# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'XlSpecArgs',
    'XlSpecAcimsArgs',
    'XlSpecAction-OrchestratorArgs',
    'XlSpecAction-OrchestratorImageArgs',
    'XlSpecAction-OrchestratorResourcesArgs',
    'XlSpecAction-OrchestratorResourcesLimitsArgs',
    'XlSpecActionscriptArgs',
    'XlSpecAixArgs',
    'XlSpecApiArgs',
    'XlSpecApiImageArgs',
    'XlSpecApiResourcesArgs',
    'XlSpecApiResourcesLimitsArgs',
    'XlSpecApicArgs',
    'XlSpecAppdynamicsArgs',
    'XlSpecAppinsightsArgs',
    'XlSpecArangodbArgs',
    'XlSpecArangodbImageArgs',
    'XlSpecArangodbPersistenceArgs',
    'XlSpecAuthArgs',
    'XlSpecAuthImageArgs',
    'XlSpecAuthResourcesArgs',
    'XlSpecAuthResourcesLimitsArgs',
    'XlSpecAwsArgs',
    'XlSpecAwslambdaArgs',
    'XlSpecAzureArgs',
    'XlSpecBaremetalArgs',
    'XlSpecChronografArgs',
    'XlSpecCloudfoundryArgs',
    'XlSpecClustermgrArgs',
    'XlSpecClustermgrImageArgs',
    'XlSpecClustermgrResourcesArgs',
    'XlSpecClustermgrResourcesLimitsArgs',
    'XlSpecCompellentArgs',
    'XlSpecConsulArgs',
    'XlSpecConsulImageArgs',
    'XlSpecControlArgs',
    'XlSpecCostArgs',
    'XlSpecCostImageArgs',
    'XlSpecCostResourcesArgs',
    'XlSpecCostResourcesLimitsArgs',
    'XlSpecDatacloudArgs',
    'XlSpecDatacloudImageArgs',
    'XlSpecDatacloudSevoneArgs',
    'XlSpecDatacloudSevoneTransportArgs',
    'XlSpecDatacloudSevoneTransportSettingsArgs',
    'XlSpecDatadogArgs',
    'XlSpecDbArgs',
    'XlSpecDbImageArgs',
    'XlSpecDbPersistenceArgs',
    'XlSpecDynatraceArgs',
    'XlSpecFluent-BitArgs',
    'XlSpecGcpArgs',
    'XlSpecGlobalArgs',
    'XlSpecGlobalCertmanagerArgs',
    'XlSpecGlobalIngressArgs',
    'XlSpecGlobalIngressSecretsArgs',
    'XlSpecGlobalSecurityContextArgs',
    'XlSpecGrafanaArgs',
    'XlSpecGroupArgs',
    'XlSpecGroupImageArgs',
    'XlSpecGroupResourcesArgs',
    'XlSpecGroupResourcesLimitsArgs',
    'XlSpecHdsArgs',
    'XlSpecHistoryArgs',
    'XlSpecHistoryImageArgs',
    'XlSpecHistoryResourcesArgs',
    'XlSpecHistoryResourcesLimitsArgs',
    'XlSpecHorizonArgs',
    'XlSpecHpe3parArgs',
    'XlSpecHyperflexArgs',
    'XlSpecHypervArgs',
    'XlSpecInfluxdbArgs',
    'XlSpecInfluxdbImageArgs',
    'XlSpecInfluxdbPersistenceArgs',
    'XlSpecIntersightArgs',
    'XlSpecIstioArgs',
    'XlSpecIstioingressArgs',
    'XlSpecIstioingressRoutesArgs',
    'XlSpecJaegerArgs',
    'XlSpecKafkaArgs',
    'XlSpecKafkaImageArgs',
    'XlSpecKafkaJavaArgs',
    'XlSpecKafkaPersistenceArgs',
    'XlSpecKubeturboArgs',
    'XlSpecLokiArgs',
    'XlSpecMarketArgs',
    'XlSpecMarketImageArgs',
    'XlSpecMarketResourcesArgs',
    'XlSpecMarketResourcesLimitsArgs',
    'XlSpecMediation-AcimsArgs',
    'XlSpecMediation-AcimsImageArgs',
    'XlSpecMediation-AcimsResourcesArgs',
    'XlSpecMediation-AcimsResourcesLimitsArgs',
    'XlSpecMediation-ActionscriptArgs',
    'XlSpecMediation-ActionscriptImageArgs',
    'XlSpecMediation-ActionscriptResourcesArgs',
    'XlSpecMediation-ActionscriptResourcesLimitsArgs',
    'XlSpecMediation-AixArgs',
    'XlSpecMediation-AixImageArgs',
    'XlSpecMediation-AixResourcesArgs',
    'XlSpecMediation-AixResourcesLimitsArgs',
    'XlSpecMediation-ApicArgs',
    'XlSpecMediation-ApicImageArgs',
    'XlSpecMediation-ApicResourcesArgs',
    'XlSpecMediation-ApicResourcesLimitsArgs',
    'XlSpecMediation-AppdynamicsArgs',
    'XlSpecMediation-AppdynamicsImageArgs',
    'XlSpecMediation-AppdynamicsResourcesArgs',
    'XlSpecMediation-AppdynamicsResourcesLimitsArgs',
    'XlSpecMediation-AppinsightsArgs',
    'XlSpecMediation-AppinsightsImageArgs',
    'XlSpecMediation-AppinsightsResourcesArgs',
    'XlSpecMediation-AppinsightsResourcesLimitsArgs',
    'XlSpecMediation-AwsArgs',
    'XlSpecMediation-AwsImageArgs',
    'XlSpecMediation-AwsResourcesArgs',
    'XlSpecMediation-AwsResourcesLimitsArgs',
    'XlSpecMediation-AwsbillingArgs',
    'XlSpecMediation-AwsbillingImageArgs',
    'XlSpecMediation-AwsbillingResourcesArgs',
    'XlSpecMediation-AwsbillingResourcesLimitsArgs',
    'XlSpecMediation-AwscostArgs',
    'XlSpecMediation-AwscostImageArgs',
    'XlSpecMediation-AwscostResourcesArgs',
    'XlSpecMediation-AwscostResourcesLimitsArgs',
    'XlSpecMediation-AwslambdaArgs',
    'XlSpecMediation-AwslambdaImageArgs',
    'XlSpecMediation-AwslambdaResourcesArgs',
    'XlSpecMediation-AwslambdaResourcesLimitsArgs',
    'XlSpecMediation-AzureArgs',
    'XlSpecMediation-AzureImageArgs',
    'XlSpecMediation-AzureResourcesArgs',
    'XlSpecMediation-AzureResourcesLimitsArgs',
    'XlSpecMediation-AzurecostArgs',
    'XlSpecMediation-AzurecostImageArgs',
    'XlSpecMediation-AzurecostResourcesArgs',
    'XlSpecMediation-AzurecostResourcesLimitsArgs',
    'XlSpecMediation-AzureeaArgs',
    'XlSpecMediation-AzureeaImageArgs',
    'XlSpecMediation-AzureeaResourcesArgs',
    'XlSpecMediation-AzureeaResourcesLimitsArgs',
    'XlSpecMediation-AzurespArgs',
    'XlSpecMediation-AzurespImageArgs',
    'XlSpecMediation-AzurespResourcesArgs',
    'XlSpecMediation-AzurespResourcesLimitsArgs',
    'XlSpecMediation-AzurevolumesArgs',
    'XlSpecMediation-AzurevolumesImageArgs',
    'XlSpecMediation-AzurevolumesResourcesArgs',
    'XlSpecMediation-AzurevolumesResourcesLimitsArgs',
    'XlSpecMediation-BaremetalArgs',
    'XlSpecMediation-BaremetalImageArgs',
    'XlSpecMediation-BaremetalResourcesArgs',
    'XlSpecMediation-BaremetalResourcesLimitsArgs',
    'XlSpecMediation-CloudfoundryArgs',
    'XlSpecMediation-CloudfoundryImageArgs',
    'XlSpecMediation-CloudfoundryResourcesArgs',
    'XlSpecMediation-CloudfoundryResourcesLimitsArgs',
    'XlSpecMediation-CompellentArgs',
    'XlSpecMediation-CompellentImageArgs',
    'XlSpecMediation-CompellentResourcesArgs',
    'XlSpecMediation-CompellentResourcesLimitsArgs',
    'XlSpecMediation-CustomdataArgs',
    'XlSpecMediation-CustomdataImageArgs',
    'XlSpecMediation-CustomdataResourcesArgs',
    'XlSpecMediation-CustomdataResourcesLimitsArgs',
    'XlSpecMediation-DatadogArgs',
    'XlSpecMediation-DatadogImageArgs',
    'XlSpecMediation-DatadogResourcesArgs',
    'XlSpecMediation-DatadogResourcesLimitsArgs',
    'XlSpecMediation-DynatraceArgs',
    'XlSpecMediation-DynatraceImageArgs',
    'XlSpecMediation-DynatraceResourcesArgs',
    'XlSpecMediation-DynatraceResourcesLimitsArgs',
    'XlSpecMediation-GcpArgs',
    'XlSpecMediation-GcpImageArgs',
    'XlSpecMediation-GcpResourcesArgs',
    'XlSpecMediation-GcpResourcesLimitsArgs',
    'XlSpecMediation-GcpcostArgs',
    'XlSpecMediation-GcpcostImageArgs',
    'XlSpecMediation-GcpcostResourcesArgs',
    'XlSpecMediation-GcpcostResourcesLimitsArgs',
    'XlSpecMediation-HdsArgs',
    'XlSpecMediation-HdsImageArgs',
    'XlSpecMediation-HdsResourcesArgs',
    'XlSpecMediation-HdsResourcesLimitsArgs',
    'XlSpecMediation-HorizonArgs',
    'XlSpecMediation-HorizonImageArgs',
    'XlSpecMediation-HorizonResourcesArgs',
    'XlSpecMediation-HorizonResourcesLimitsArgs',
    'XlSpecMediation-Hpe3parArgs',
    'XlSpecMediation-Hpe3parImageArgs',
    'XlSpecMediation-Hpe3parResourcesArgs',
    'XlSpecMediation-Hpe3parResourcesLimitsArgs',
    'XlSpecMediation-HyperflexArgs',
    'XlSpecMediation-HyperflexImageArgs',
    'XlSpecMediation-HyperflexResourcesArgs',
    'XlSpecMediation-HyperflexResourcesLimitsArgs',
    'XlSpecMediation-HypervArgs',
    'XlSpecMediation-HypervImageArgs',
    'XlSpecMediation-HypervResourcesArgs',
    'XlSpecMediation-HypervResourcesLimitsArgs',
    'XlSpecMediation-IntersightArgs',
    'XlSpecMediation-IntersightImageArgs',
    'XlSpecMediation-IntersightResourcesArgs',
    'XlSpecMediation-IntersightResourcesLimitsArgs',
    'XlSpecMediation-IntersighthyperflexArgs',
    'XlSpecMediation-IntersighthyperflexImageArgs',
    'XlSpecMediation-IntersighthyperflexResourcesArgs',
    'XlSpecMediation-IntersighthyperflexResourcesLimitsArgs',
    'XlSpecMediation-IntersightucsArgs',
    'XlSpecMediation-IntersightucsImageArgs',
    'XlSpecMediation-IntersightucsResourcesArgs',
    'XlSpecMediation-IntersightucsResourcesLimitsArgs',
    'XlSpecMediation-IstioArgs',
    'XlSpecMediation-IstioImageArgs',
    'XlSpecMediation-IstioResourcesArgs',
    'XlSpecMediation-IstioResourcesLimitsArgs',
    'XlSpecMediation-MssqlArgs',
    'XlSpecMediation-MssqlImageArgs',
    'XlSpecMediation-MssqlResourcesArgs',
    'XlSpecMediation-MssqlResourcesLimitsArgs',
    'XlSpecMediation-MysqlArgs',
    'XlSpecMediation-MysqlImageArgs',
    'XlSpecMediation-MysqlResourcesArgs',
    'XlSpecMediation-MysqlResourcesLimitsArgs',
    'XlSpecMediation-NetappArgs',
    'XlSpecMediation-NetappImageArgs',
    'XlSpecMediation-NetappResourcesArgs',
    'XlSpecMediation-NetappResourcesLimitsArgs',
    'XlSpecMediation-NetflowArgs',
    'XlSpecMediation-NetflowImageArgs',
    'XlSpecMediation-NetflowResourcesArgs',
    'XlSpecMediation-NetflowResourcesLimitsArgs',
    'XlSpecMediation-NewrelicArgs',
    'XlSpecMediation-NewrelicImageArgs',
    'XlSpecMediation-NewrelicResourcesArgs',
    'XlSpecMediation-NewrelicResourcesLimitsArgs',
    'XlSpecMediation-NutanixArgs',
    'XlSpecMediation-NutanixImageArgs',
    'XlSpecMediation-NutanixResourcesArgs',
    'XlSpecMediation-NutanixResourcesLimitsArgs',
    'XlSpecMediation-OneviewArgs',
    'XlSpecMediation-OneviewImageArgs',
    'XlSpecMediation-OneviewResourcesArgs',
    'XlSpecMediation-OneviewResourcesLimitsArgs',
    'XlSpecMediation-OpenstackArgs',
    'XlSpecMediation-OpenstackImageArgs',
    'XlSpecMediation-OpenstackResourcesArgs',
    'XlSpecMediation-OpenstackResourcesLimitsArgs',
    'XlSpecMediation-PivotalArgs',
    'XlSpecMediation-PivotalImageArgs',
    'XlSpecMediation-PivotalResourcesArgs',
    'XlSpecMediation-PivotalResourcesLimitsArgs',
    'XlSpecMediation-PureArgs',
    'XlSpecMediation-PureImageArgs',
    'XlSpecMediation-PureResourcesArgs',
    'XlSpecMediation-PureResourcesLimitsArgs',
    'XlSpecMediation-RhvArgs',
    'XlSpecMediation-RhvImageArgs',
    'XlSpecMediation-RhvResourcesArgs',
    'XlSpecMediation-RhvResourcesLimitsArgs',
    'XlSpecMediation-ScaleioArgs',
    'XlSpecMediation-ScaleioImageArgs',
    'XlSpecMediation-ScaleioResourcesArgs',
    'XlSpecMediation-ScaleioResourcesLimitsArgs',
    'XlSpecMediation-SnmpArgs',
    'XlSpecMediation-SnmpImageArgs',
    'XlSpecMediation-SnmpResourcesArgs',
    'XlSpecMediation-SnmpResourcesLimitsArgs',
    'XlSpecMediation-TerraformArgs',
    'XlSpecMediation-TerraformImageArgs',
    'XlSpecMediation-TerraformResourcesArgs',
    'XlSpecMediation-TerraformResourcesLimitsArgs',
    'XlSpecMediation-TetrationArgs',
    'XlSpecMediation-TetrationImageArgs',
    'XlSpecMediation-TetrationResourcesArgs',
    'XlSpecMediation-TetrationResourcesLimitsArgs',
    'XlSpecMediation-TomcatArgs',
    'XlSpecMediation-TomcatImageArgs',
    'XlSpecMediation-TomcatResourcesArgs',
    'XlSpecMediation-TomcatResourcesLimitsArgs',
    'XlSpecMediation-UcsArgs',
    'XlSpecMediation-UcsImageArgs',
    'XlSpecMediation-UcsResourcesArgs',
    'XlSpecMediation-UcsResourcesLimitsArgs',
    'XlSpecMediation-UcsdirectorArgs',
    'XlSpecMediation-UcsdirectorImageArgs',
    'XlSpecMediation-UcsdirectorResourcesArgs',
    'XlSpecMediation-UcsdirectorResourcesLimitsArgs',
    'XlSpecMediation-VcdArgs',
    'XlSpecMediation-VcdImageArgs',
    'XlSpecMediation-VcdResourcesArgs',
    'XlSpecMediation-VcdResourcesLimitsArgs',
    'XlSpecMediation-VcenterArgs',
    'XlSpecMediation-VcenterImageArgs',
    'XlSpecMediation-VcenterResourcesArgs',
    'XlSpecMediation-VcenterResourcesLimitsArgs',
    'XlSpecMediation-VcenterbrowsingArgs',
    'XlSpecMediation-VcenterbrowsingImageArgs',
    'XlSpecMediation-VcenterbrowsingResourcesArgs',
    'XlSpecMediation-VcenterbrowsingResourcesLimitsArgs',
    'XlSpecMediation-VmaxArgs',
    'XlSpecMediation-VmaxImageArgs',
    'XlSpecMediation-VmaxResourcesArgs',
    'XlSpecMediation-VmaxResourcesLimitsArgs',
    'XlSpecMediation-VmmArgs',
    'XlSpecMediation-VmmImageArgs',
    'XlSpecMediation-VmmResourcesArgs',
    'XlSpecMediation-VmmResourcesLimitsArgs',
    'XlSpecMediation-VplexArgs',
    'XlSpecMediation-VplexImageArgs',
    'XlSpecMediation-VplexResourcesArgs',
    'XlSpecMediation-VplexResourcesLimitsArgs',
    'XlSpecMediation-WmiArgs',
    'XlSpecMediation-WmiImageArgs',
    'XlSpecMediation-WmiResourcesArgs',
    'XlSpecMediation-WmiResourcesLimitsArgs',
    'XlSpecMediation-XtremioArgs',
    'XlSpecMediation-XtremioImageArgs',
    'XlSpecMediation-XtremioResourcesArgs',
    'XlSpecMediation-XtremioResourcesLimitsArgs',
    'XlSpecMetronArgs',
    'XlSpecMssqlArgs',
    'XlSpecMysqlArgs',
    'XlSpecNetappArgs',
    'XlSpecNetflowArgs',
    'XlSpecNewrelicArgs',
    'XlSpecNginxingressArgs',
    'XlSpecNutanixArgs',
    'XlSpecOneviewArgs',
    'XlSpecOpenshiftingressArgs',
    'XlSpecOpenstackArgs',
    'XlSpecPivotalArgs',
    'XlSpecPlan-OrchestratorArgs',
    'XlSpecPlan-OrchestratorImageArgs',
    'XlSpecPlan-OrchestratorResourcesArgs',
    'XlSpecPlan-OrchestratorResourcesLimitsArgs',
    'XlSpecPlatformArgs',
    'XlSpecPrometheusArgs',
    'XlSpecPrometheus-Mysql-ExporterArgs',
    'XlSpecPrometheus-Mysql-ExporterMysqlArgs',
    'XlSpecPrometurboArgs',
    'XlSpecPromtailArgs',
    'XlSpecPropertiesArgs',
    'XlSpecPropertiesAction-OrchestratorArgs',
    'XlSpecPropertiesApiArgs',
    'XlSpecPropertiesGlobalArgs',
    'XlSpecPropertiesRepositoryArgs',
    'XlSpecPureArgs',
    'XlSpecRepositoryArgs',
    'XlSpecRepositoryImageArgs',
    'XlSpecRepositoryResourcesArgs',
    'XlSpecRepositoryResourcesLimitsArgs',
    'XlSpecRhvArgs',
    'XlSpecRsyslogArgs',
    'XlSpecRsyslogImageArgs',
    'XlSpecRsyslogPersistenceArgs',
    'XlSpecScaleioArgs',
    'XlSpecSnmpArgs',
    'XlSpecTerraformArgs',
    'XlSpecTetrationArgs',
    'XlSpecTimescaledbArgs',
    'XlSpecTopology-ProcessorArgs',
    'XlSpecTopology-ProcessorImageArgs',
    'XlSpecTopology-ProcessorResourcesArgs',
    'XlSpecTopology-ProcessorResourcesLimitsArgs',
    'XlSpecUcsArgs',
    'XlSpecUcsdirectorArgs',
    'XlSpecUiArgs',
    'XlSpecUiImageArgs',
    'XlSpecUiResourcesArgs',
    'XlSpecUiResourcesLimitsArgs',
    'XlSpecVcdArgs',
    'XlSpecVcenterArgs',
    'XlSpecVmaxArgs',
    'XlSpecVmmArgs',
    'XlSpecVplexArgs',
    'XlSpecWmiArgs',
    'XlSpecXtremioArgs',
    'XlSpecZookeeperArgs',
    'XlSpecZookeeperImageArgs',
    'XlSpecZookeeperResourcesArgs',
    'XlSpecZookeeperResourcesLimitsArgs',
]

@pulumi.input_type
class XlSpecArgs:
    def __init__(__self__, *,
                 acims: Optional[pulumi.Input['XlSpecAcimsArgs']] = None,
                 action_orchestrator: Optional[pulumi.Input['XlSpecAction-OrchestratorArgs']] = None,
                 actionscript: Optional[pulumi.Input['XlSpecActionscriptArgs']] = None,
                 aix: Optional[pulumi.Input['XlSpecAixArgs']] = None,
                 api: Optional[pulumi.Input['XlSpecApiArgs']] = None,
                 apic: Optional[pulumi.Input['XlSpecApicArgs']] = None,
                 appdynamics: Optional[pulumi.Input['XlSpecAppdynamicsArgs']] = None,
                 appinsights: Optional[pulumi.Input['XlSpecAppinsightsArgs']] = None,
                 arangodb: Optional[pulumi.Input['XlSpecArangodbArgs']] = None,
                 auth: Optional[pulumi.Input['XlSpecAuthArgs']] = None,
                 aws: Optional[pulumi.Input['XlSpecAwsArgs']] = None,
                 awslambda: Optional[pulumi.Input['XlSpecAwslambdaArgs']] = None,
                 azure: Optional[pulumi.Input['XlSpecAzureArgs']] = None,
                 baremetal: Optional[pulumi.Input['XlSpecBaremetalArgs']] = None,
                 chronograf: Optional[pulumi.Input['XlSpecChronografArgs']] = None,
                 cloudfoundry: Optional[pulumi.Input['XlSpecCloudfoundryArgs']] = None,
                 clustermgr: Optional[pulumi.Input['XlSpecClustermgrArgs']] = None,
                 compellent: Optional[pulumi.Input['XlSpecCompellentArgs']] = None,
                 consul: Optional[pulumi.Input['XlSpecConsulArgs']] = None,
                 control: Optional[pulumi.Input['XlSpecControlArgs']] = None,
                 cost: Optional[pulumi.Input['XlSpecCostArgs']] = None,
                 datacloud: Optional[pulumi.Input['XlSpecDatacloudArgs']] = None,
                 datadog: Optional[pulumi.Input['XlSpecDatadogArgs']] = None,
                 db: Optional[pulumi.Input['XlSpecDbArgs']] = None,
                 dynatrace: Optional[pulumi.Input['XlSpecDynatraceArgs']] = None,
                 fluent_bit: Optional[pulumi.Input['XlSpecFluent-BitArgs']] = None,
                 gcp: Optional[pulumi.Input['XlSpecGcpArgs']] = None,
                 global_: Optional[pulumi.Input['XlSpecGlobalArgs']] = None,
                 grafana: Optional[pulumi.Input['XlSpecGrafanaArgs']] = None,
                 group: Optional[pulumi.Input['XlSpecGroupArgs']] = None,
                 hds: Optional[pulumi.Input['XlSpecHdsArgs']] = None,
                 history: Optional[pulumi.Input['XlSpecHistoryArgs']] = None,
                 horizon: Optional[pulumi.Input['XlSpecHorizonArgs']] = None,
                 hpe3par: Optional[pulumi.Input['XlSpecHpe3parArgs']] = None,
                 hyperflex: Optional[pulumi.Input['XlSpecHyperflexArgs']] = None,
                 hyperv: Optional[pulumi.Input['XlSpecHypervArgs']] = None,
                 influxdb: Optional[pulumi.Input['XlSpecInfluxdbArgs']] = None,
                 intersight: Optional[pulumi.Input['XlSpecIntersightArgs']] = None,
                 istio: Optional[pulumi.Input['XlSpecIstioArgs']] = None,
                 istioingress: Optional[pulumi.Input['XlSpecIstioingressArgs']] = None,
                 jaeger: Optional[pulumi.Input['XlSpecJaegerArgs']] = None,
                 kafka: Optional[pulumi.Input['XlSpecKafkaArgs']] = None,
                 kubeturbo: Optional[pulumi.Input['XlSpecKubeturboArgs']] = None,
                 loki: Optional[pulumi.Input['XlSpecLokiArgs']] = None,
                 market: Optional[pulumi.Input['XlSpecMarketArgs']] = None,
                 mediation_acims: Optional[pulumi.Input['XlSpecMediation-AcimsArgs']] = None,
                 mediation_actionscript: Optional[pulumi.Input['XlSpecMediation-ActionscriptArgs']] = None,
                 mediation_aix: Optional[pulumi.Input['XlSpecMediation-AixArgs']] = None,
                 mediation_apic: Optional[pulumi.Input['XlSpecMediation-ApicArgs']] = None,
                 mediation_appdynamics: Optional[pulumi.Input['XlSpecMediation-AppdynamicsArgs']] = None,
                 mediation_appinsights: Optional[pulumi.Input['XlSpecMediation-AppinsightsArgs']] = None,
                 mediation_aws: Optional[pulumi.Input['XlSpecMediation-AwsArgs']] = None,
                 mediation_awsbilling: Optional[pulumi.Input['XlSpecMediation-AwsbillingArgs']] = None,
                 mediation_awscost: Optional[pulumi.Input['XlSpecMediation-AwscostArgs']] = None,
                 mediation_awslambda: Optional[pulumi.Input['XlSpecMediation-AwslambdaArgs']] = None,
                 mediation_azure: Optional[pulumi.Input['XlSpecMediation-AzureArgs']] = None,
                 mediation_azurecost: Optional[pulumi.Input['XlSpecMediation-AzurecostArgs']] = None,
                 mediation_azureea: Optional[pulumi.Input['XlSpecMediation-AzureeaArgs']] = None,
                 mediation_azuresp: Optional[pulumi.Input['XlSpecMediation-AzurespArgs']] = None,
                 mediation_azurevolumes: Optional[pulumi.Input['XlSpecMediation-AzurevolumesArgs']] = None,
                 mediation_baremetal: Optional[pulumi.Input['XlSpecMediation-BaremetalArgs']] = None,
                 mediation_cloudfoundry: Optional[pulumi.Input['XlSpecMediation-CloudfoundryArgs']] = None,
                 mediation_compellent: Optional[pulumi.Input['XlSpecMediation-CompellentArgs']] = None,
                 mediation_customdata: Optional[pulumi.Input['XlSpecMediation-CustomdataArgs']] = None,
                 mediation_datadog: Optional[pulumi.Input['XlSpecMediation-DatadogArgs']] = None,
                 mediation_dynatrace: Optional[pulumi.Input['XlSpecMediation-DynatraceArgs']] = None,
                 mediation_gcp: Optional[pulumi.Input['XlSpecMediation-GcpArgs']] = None,
                 mediation_gcpcost: Optional[pulumi.Input['XlSpecMediation-GcpcostArgs']] = None,
                 mediation_hds: Optional[pulumi.Input['XlSpecMediation-HdsArgs']] = None,
                 mediation_horizon: Optional[pulumi.Input['XlSpecMediation-HorizonArgs']] = None,
                 mediation_hpe3par: Optional[pulumi.Input['XlSpecMediation-Hpe3parArgs']] = None,
                 mediation_hyperflex: Optional[pulumi.Input['XlSpecMediation-HyperflexArgs']] = None,
                 mediation_hyperv: Optional[pulumi.Input['XlSpecMediation-HypervArgs']] = None,
                 mediation_intersight: Optional[pulumi.Input['XlSpecMediation-IntersightArgs']] = None,
                 mediation_intersighthyperflex: Optional[pulumi.Input['XlSpecMediation-IntersighthyperflexArgs']] = None,
                 mediation_intersightucs: Optional[pulumi.Input['XlSpecMediation-IntersightucsArgs']] = None,
                 mediation_istio: Optional[pulumi.Input['XlSpecMediation-IstioArgs']] = None,
                 mediation_mssql: Optional[pulumi.Input['XlSpecMediation-MssqlArgs']] = None,
                 mediation_mysql: Optional[pulumi.Input['XlSpecMediation-MysqlArgs']] = None,
                 mediation_netapp: Optional[pulumi.Input['XlSpecMediation-NetappArgs']] = None,
                 mediation_netflow: Optional[pulumi.Input['XlSpecMediation-NetflowArgs']] = None,
                 mediation_newrelic: Optional[pulumi.Input['XlSpecMediation-NewrelicArgs']] = None,
                 mediation_nutanix: Optional[pulumi.Input['XlSpecMediation-NutanixArgs']] = None,
                 mediation_oneview: Optional[pulumi.Input['XlSpecMediation-OneviewArgs']] = None,
                 mediation_openstack: Optional[pulumi.Input['XlSpecMediation-OpenstackArgs']] = None,
                 mediation_pivotal: Optional[pulumi.Input['XlSpecMediation-PivotalArgs']] = None,
                 mediation_pure: Optional[pulumi.Input['XlSpecMediation-PureArgs']] = None,
                 mediation_rhv: Optional[pulumi.Input['XlSpecMediation-RhvArgs']] = None,
                 mediation_scaleio: Optional[pulumi.Input['XlSpecMediation-ScaleioArgs']] = None,
                 mediation_snmp: Optional[pulumi.Input['XlSpecMediation-SnmpArgs']] = None,
                 mediation_terraform: Optional[pulumi.Input['XlSpecMediation-TerraformArgs']] = None,
                 mediation_tetration: Optional[pulumi.Input['XlSpecMediation-TetrationArgs']] = None,
                 mediation_tomcat: Optional[pulumi.Input['XlSpecMediation-TomcatArgs']] = None,
                 mediation_ucs: Optional[pulumi.Input['XlSpecMediation-UcsArgs']] = None,
                 mediation_ucsdirector: Optional[pulumi.Input['XlSpecMediation-UcsdirectorArgs']] = None,
                 mediation_vcd: Optional[pulumi.Input['XlSpecMediation-VcdArgs']] = None,
                 mediation_vcenter: Optional[pulumi.Input['XlSpecMediation-VcenterArgs']] = None,
                 mediation_vcenterbrowsing: Optional[pulumi.Input['XlSpecMediation-VcenterbrowsingArgs']] = None,
                 mediation_vmax: Optional[pulumi.Input['XlSpecMediation-VmaxArgs']] = None,
                 mediation_vmm: Optional[pulumi.Input['XlSpecMediation-VmmArgs']] = None,
                 mediation_vplex: Optional[pulumi.Input['XlSpecMediation-VplexArgs']] = None,
                 mediation_wmi: Optional[pulumi.Input['XlSpecMediation-WmiArgs']] = None,
                 mediation_xtremio: Optional[pulumi.Input['XlSpecMediation-XtremioArgs']] = None,
                 metron: Optional[pulumi.Input['XlSpecMetronArgs']] = None,
                 mssql: Optional[pulumi.Input['XlSpecMssqlArgs']] = None,
                 mysql: Optional[pulumi.Input['XlSpecMysqlArgs']] = None,
                 netapp: Optional[pulumi.Input['XlSpecNetappArgs']] = None,
                 netflow: Optional[pulumi.Input['XlSpecNetflowArgs']] = None,
                 newrelic: Optional[pulumi.Input['XlSpecNewrelicArgs']] = None,
                 nginxingress: Optional[pulumi.Input['XlSpecNginxingressArgs']] = None,
                 nutanix: Optional[pulumi.Input['XlSpecNutanixArgs']] = None,
                 oneview: Optional[pulumi.Input['XlSpecOneviewArgs']] = None,
                 openshiftingress: Optional[pulumi.Input['XlSpecOpenshiftingressArgs']] = None,
                 openstack: Optional[pulumi.Input['XlSpecOpenstackArgs']] = None,
                 pivotal: Optional[pulumi.Input['XlSpecPivotalArgs']] = None,
                 plan_orchestrator: Optional[pulumi.Input['XlSpecPlan-OrchestratorArgs']] = None,
                 platform: Optional[pulumi.Input['XlSpecPlatformArgs']] = None,
                 prometheus: Optional[pulumi.Input['XlSpecPrometheusArgs']] = None,
                 prometheus_mysql_exporter: Optional[pulumi.Input['XlSpecPrometheus-Mysql-ExporterArgs']] = None,
                 prometurbo: Optional[pulumi.Input['XlSpecPrometurboArgs']] = None,
                 promtail: Optional[pulumi.Input['XlSpecPromtailArgs']] = None,
                 properties: Optional[pulumi.Input['XlSpecPropertiesArgs']] = None,
                 pure: Optional[pulumi.Input['XlSpecPureArgs']] = None,
                 repository: Optional[pulumi.Input['XlSpecRepositoryArgs']] = None,
                 rhv: Optional[pulumi.Input['XlSpecRhvArgs']] = None,
                 rsyslog: Optional[pulumi.Input['XlSpecRsyslogArgs']] = None,
                 scaleio: Optional[pulumi.Input['XlSpecScaleioArgs']] = None,
                 snmp: Optional[pulumi.Input['XlSpecSnmpArgs']] = None,
                 terraform: Optional[pulumi.Input['XlSpecTerraformArgs']] = None,
                 tetration: Optional[pulumi.Input['XlSpecTetrationArgs']] = None,
                 timescaledb: Optional[pulumi.Input['XlSpecTimescaledbArgs']] = None,
                 topology_processor: Optional[pulumi.Input['XlSpecTopology-ProcessorArgs']] = None,
                 ucs: Optional[pulumi.Input['XlSpecUcsArgs']] = None,
                 ucsdirector: Optional[pulumi.Input['XlSpecUcsdirectorArgs']] = None,
                 ui: Optional[pulumi.Input['XlSpecUiArgs']] = None,
                 vcd: Optional[pulumi.Input['XlSpecVcdArgs']] = None,
                 vcenter: Optional[pulumi.Input['XlSpecVcenterArgs']] = None,
                 vmax: Optional[pulumi.Input['XlSpecVmaxArgs']] = None,
                 vmm: Optional[pulumi.Input['XlSpecVmmArgs']] = None,
                 vplex: Optional[pulumi.Input['XlSpecVplexArgs']] = None,
                 wmi: Optional[pulumi.Input['XlSpecWmiArgs']] = None,
                 xtremio: Optional[pulumi.Input['XlSpecXtremioArgs']] = None,
                 zookeeper: Optional[pulumi.Input['XlSpecZookeeperArgs']] = None):
        """
        :param pulumi.Input['XlSpecGlobalArgs'] global_: Platform configuration options
        :param pulumi.Input['XlSpecPropertiesArgs'] properties: Custom property overrides
        """
        if acims is not None:
            pulumi.set(__self__, "acims", acims)
        if action_orchestrator is not None:
            pulumi.set(__self__, "action_orchestrator", action_orchestrator)
        if actionscript is not None:
            pulumi.set(__self__, "actionscript", actionscript)
        if aix is not None:
            pulumi.set(__self__, "aix", aix)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if apic is not None:
            pulumi.set(__self__, "apic", apic)
        if appdynamics is not None:
            pulumi.set(__self__, "appdynamics", appdynamics)
        if appinsights is not None:
            pulumi.set(__self__, "appinsights", appinsights)
        if arangodb is not None:
            pulumi.set(__self__, "arangodb", arangodb)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if awslambda is not None:
            pulumi.set(__self__, "awslambda", awslambda)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if baremetal is not None:
            pulumi.set(__self__, "baremetal", baremetal)
        if chronograf is not None:
            pulumi.set(__self__, "chronograf", chronograf)
        if cloudfoundry is not None:
            pulumi.set(__self__, "cloudfoundry", cloudfoundry)
        if clustermgr is not None:
            pulumi.set(__self__, "clustermgr", clustermgr)
        if compellent is not None:
            pulumi.set(__self__, "compellent", compellent)
        if consul is not None:
            pulumi.set(__self__, "consul", consul)
        if control is not None:
            pulumi.set(__self__, "control", control)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if datacloud is not None:
            pulumi.set(__self__, "datacloud", datacloud)
        if datadog is not None:
            pulumi.set(__self__, "datadog", datadog)
        if db is not None:
            pulumi.set(__self__, "db", db)
        if dynatrace is not None:
            pulumi.set(__self__, "dynatrace", dynatrace)
        if fluent_bit is not None:
            pulumi.set(__self__, "fluent_bit", fluent_bit)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if hds is not None:
            pulumi.set(__self__, "hds", hds)
        if history is not None:
            pulumi.set(__self__, "history", history)
        if horizon is not None:
            pulumi.set(__self__, "horizon", horizon)
        if hpe3par is not None:
            pulumi.set(__self__, "hpe3par", hpe3par)
        if hyperflex is not None:
            pulumi.set(__self__, "hyperflex", hyperflex)
        if hyperv is not None:
            pulumi.set(__self__, "hyperv", hyperv)
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)
        if intersight is not None:
            pulumi.set(__self__, "intersight", intersight)
        if istio is not None:
            pulumi.set(__self__, "istio", istio)
        if istioingress is not None:
            pulumi.set(__self__, "istioingress", istioingress)
        if jaeger is not None:
            pulumi.set(__self__, "jaeger", jaeger)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kubeturbo is not None:
            pulumi.set(__self__, "kubeturbo", kubeturbo)
        if loki is not None:
            pulumi.set(__self__, "loki", loki)
        if market is not None:
            pulumi.set(__self__, "market", market)
        if mediation_acims is not None:
            pulumi.set(__self__, "mediation_acims", mediation_acims)
        if mediation_actionscript is not None:
            pulumi.set(__self__, "mediation_actionscript", mediation_actionscript)
        if mediation_aix is not None:
            pulumi.set(__self__, "mediation_aix", mediation_aix)
        if mediation_apic is not None:
            pulumi.set(__self__, "mediation_apic", mediation_apic)
        if mediation_appdynamics is not None:
            pulumi.set(__self__, "mediation_appdynamics", mediation_appdynamics)
        if mediation_appinsights is not None:
            pulumi.set(__self__, "mediation_appinsights", mediation_appinsights)
        if mediation_aws is not None:
            pulumi.set(__self__, "mediation_aws", mediation_aws)
        if mediation_awsbilling is not None:
            pulumi.set(__self__, "mediation_awsbilling", mediation_awsbilling)
        if mediation_awscost is not None:
            pulumi.set(__self__, "mediation_awscost", mediation_awscost)
        if mediation_awslambda is not None:
            pulumi.set(__self__, "mediation_awslambda", mediation_awslambda)
        if mediation_azure is not None:
            pulumi.set(__self__, "mediation_azure", mediation_azure)
        if mediation_azurecost is not None:
            pulumi.set(__self__, "mediation_azurecost", mediation_azurecost)
        if mediation_azureea is not None:
            pulumi.set(__self__, "mediation_azureea", mediation_azureea)
        if mediation_azuresp is not None:
            pulumi.set(__self__, "mediation_azuresp", mediation_azuresp)
        if mediation_azurevolumes is not None:
            pulumi.set(__self__, "mediation_azurevolumes", mediation_azurevolumes)
        if mediation_baremetal is not None:
            pulumi.set(__self__, "mediation_baremetal", mediation_baremetal)
        if mediation_cloudfoundry is not None:
            pulumi.set(__self__, "mediation_cloudfoundry", mediation_cloudfoundry)
        if mediation_compellent is not None:
            pulumi.set(__self__, "mediation_compellent", mediation_compellent)
        if mediation_customdata is not None:
            pulumi.set(__self__, "mediation_customdata", mediation_customdata)
        if mediation_datadog is not None:
            pulumi.set(__self__, "mediation_datadog", mediation_datadog)
        if mediation_dynatrace is not None:
            pulumi.set(__self__, "mediation_dynatrace", mediation_dynatrace)
        if mediation_gcp is not None:
            pulumi.set(__self__, "mediation_gcp", mediation_gcp)
        if mediation_gcpcost is not None:
            pulumi.set(__self__, "mediation_gcpcost", mediation_gcpcost)
        if mediation_hds is not None:
            pulumi.set(__self__, "mediation_hds", mediation_hds)
        if mediation_horizon is not None:
            pulumi.set(__self__, "mediation_horizon", mediation_horizon)
        if mediation_hpe3par is not None:
            pulumi.set(__self__, "mediation_hpe3par", mediation_hpe3par)
        if mediation_hyperflex is not None:
            pulumi.set(__self__, "mediation_hyperflex", mediation_hyperflex)
        if mediation_hyperv is not None:
            pulumi.set(__self__, "mediation_hyperv", mediation_hyperv)
        if mediation_intersight is not None:
            pulumi.set(__self__, "mediation_intersight", mediation_intersight)
        if mediation_intersighthyperflex is not None:
            pulumi.set(__self__, "mediation_intersighthyperflex", mediation_intersighthyperflex)
        if mediation_intersightucs is not None:
            pulumi.set(__self__, "mediation_intersightucs", mediation_intersightucs)
        if mediation_istio is not None:
            pulumi.set(__self__, "mediation_istio", mediation_istio)
        if mediation_mssql is not None:
            pulumi.set(__self__, "mediation_mssql", mediation_mssql)
        if mediation_mysql is not None:
            pulumi.set(__self__, "mediation_mysql", mediation_mysql)
        if mediation_netapp is not None:
            pulumi.set(__self__, "mediation_netapp", mediation_netapp)
        if mediation_netflow is not None:
            pulumi.set(__self__, "mediation_netflow", mediation_netflow)
        if mediation_newrelic is not None:
            pulumi.set(__self__, "mediation_newrelic", mediation_newrelic)
        if mediation_nutanix is not None:
            pulumi.set(__self__, "mediation_nutanix", mediation_nutanix)
        if mediation_oneview is not None:
            pulumi.set(__self__, "mediation_oneview", mediation_oneview)
        if mediation_openstack is not None:
            pulumi.set(__self__, "mediation_openstack", mediation_openstack)
        if mediation_pivotal is not None:
            pulumi.set(__self__, "mediation_pivotal", mediation_pivotal)
        if mediation_pure is not None:
            pulumi.set(__self__, "mediation_pure", mediation_pure)
        if mediation_rhv is not None:
            pulumi.set(__self__, "mediation_rhv", mediation_rhv)
        if mediation_scaleio is not None:
            pulumi.set(__self__, "mediation_scaleio", mediation_scaleio)
        if mediation_snmp is not None:
            pulumi.set(__self__, "mediation_snmp", mediation_snmp)
        if mediation_terraform is not None:
            pulumi.set(__self__, "mediation_terraform", mediation_terraform)
        if mediation_tetration is not None:
            pulumi.set(__self__, "mediation_tetration", mediation_tetration)
        if mediation_tomcat is not None:
            pulumi.set(__self__, "mediation_tomcat", mediation_tomcat)
        if mediation_ucs is not None:
            pulumi.set(__self__, "mediation_ucs", mediation_ucs)
        if mediation_ucsdirector is not None:
            pulumi.set(__self__, "mediation_ucsdirector", mediation_ucsdirector)
        if mediation_vcd is not None:
            pulumi.set(__self__, "mediation_vcd", mediation_vcd)
        if mediation_vcenter is not None:
            pulumi.set(__self__, "mediation_vcenter", mediation_vcenter)
        if mediation_vcenterbrowsing is not None:
            pulumi.set(__self__, "mediation_vcenterbrowsing", mediation_vcenterbrowsing)
        if mediation_vmax is not None:
            pulumi.set(__self__, "mediation_vmax", mediation_vmax)
        if mediation_vmm is not None:
            pulumi.set(__self__, "mediation_vmm", mediation_vmm)
        if mediation_vplex is not None:
            pulumi.set(__self__, "mediation_vplex", mediation_vplex)
        if mediation_wmi is not None:
            pulumi.set(__self__, "mediation_wmi", mediation_wmi)
        if mediation_xtremio is not None:
            pulumi.set(__self__, "mediation_xtremio", mediation_xtremio)
        if metron is not None:
            pulumi.set(__self__, "metron", metron)
        if mssql is not None:
            pulumi.set(__self__, "mssql", mssql)
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if netapp is not None:
            pulumi.set(__self__, "netapp", netapp)
        if netflow is not None:
            pulumi.set(__self__, "netflow", netflow)
        if newrelic is not None:
            pulumi.set(__self__, "newrelic", newrelic)
        if nginxingress is not None:
            pulumi.set(__self__, "nginxingress", nginxingress)
        if nutanix is not None:
            pulumi.set(__self__, "nutanix", nutanix)
        if oneview is not None:
            pulumi.set(__self__, "oneview", oneview)
        if openshiftingress is not None:
            pulumi.set(__self__, "openshiftingress", openshiftingress)
        if openstack is not None:
            pulumi.set(__self__, "openstack", openstack)
        if pivotal is not None:
            pulumi.set(__self__, "pivotal", pivotal)
        if plan_orchestrator is not None:
            pulumi.set(__self__, "plan_orchestrator", plan_orchestrator)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if prometheus_mysql_exporter is not None:
            pulumi.set(__self__, "prometheus_mysql_exporter", prometheus_mysql_exporter)
        if prometurbo is not None:
            pulumi.set(__self__, "prometurbo", prometurbo)
        if promtail is not None:
            pulumi.set(__self__, "promtail", promtail)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if pure is not None:
            pulumi.set(__self__, "pure", pure)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if rhv is not None:
            pulumi.set(__self__, "rhv", rhv)
        if rsyslog is not None:
            pulumi.set(__self__, "rsyslog", rsyslog)
        if scaleio is not None:
            pulumi.set(__self__, "scaleio", scaleio)
        if snmp is not None:
            pulumi.set(__self__, "snmp", snmp)
        if terraform is not None:
            pulumi.set(__self__, "terraform", terraform)
        if tetration is not None:
            pulumi.set(__self__, "tetration", tetration)
        if timescaledb is not None:
            pulumi.set(__self__, "timescaledb", timescaledb)
        if topology_processor is not None:
            pulumi.set(__self__, "topology_processor", topology_processor)
        if ucs is not None:
            pulumi.set(__self__, "ucs", ucs)
        if ucsdirector is not None:
            pulumi.set(__self__, "ucsdirector", ucsdirector)
        if ui is not None:
            pulumi.set(__self__, "ui", ui)
        if vcd is not None:
            pulumi.set(__self__, "vcd", vcd)
        if vcenter is not None:
            pulumi.set(__self__, "vcenter", vcenter)
        if vmax is not None:
            pulumi.set(__self__, "vmax", vmax)
        if vmm is not None:
            pulumi.set(__self__, "vmm", vmm)
        if vplex is not None:
            pulumi.set(__self__, "vplex", vplex)
        if wmi is not None:
            pulumi.set(__self__, "wmi", wmi)
        if xtremio is not None:
            pulumi.set(__self__, "xtremio", xtremio)
        if zookeeper is not None:
            pulumi.set(__self__, "zookeeper", zookeeper)

    @property
    @pulumi.getter
    def acims(self) -> Optional[pulumi.Input['XlSpecAcimsArgs']]:
        return pulumi.get(self, "acims")

    @acims.setter
    def acims(self, value: Optional[pulumi.Input['XlSpecAcimsArgs']]):
        pulumi.set(self, "acims", value)

    @property
    @pulumi.getter(name="action-orchestrator")
    def action_orchestrator(self) -> Optional[pulumi.Input['XlSpecAction-OrchestratorArgs']]:
        return pulumi.get(self, "action_orchestrator")

    @action_orchestrator.setter
    def action_orchestrator(self, value: Optional[pulumi.Input['XlSpecAction-OrchestratorArgs']]):
        pulumi.set(self, "action_orchestrator", value)

    @property
    @pulumi.getter
    def actionscript(self) -> Optional[pulumi.Input['XlSpecActionscriptArgs']]:
        return pulumi.get(self, "actionscript")

    @actionscript.setter
    def actionscript(self, value: Optional[pulumi.Input['XlSpecActionscriptArgs']]):
        pulumi.set(self, "actionscript", value)

    @property
    @pulumi.getter
    def aix(self) -> Optional[pulumi.Input['XlSpecAixArgs']]:
        return pulumi.get(self, "aix")

    @aix.setter
    def aix(self, value: Optional[pulumi.Input['XlSpecAixArgs']]):
        pulumi.set(self, "aix", value)

    @property
    @pulumi.getter
    def api(self) -> Optional[pulumi.Input['XlSpecApiArgs']]:
        return pulumi.get(self, "api")

    @api.setter
    def api(self, value: Optional[pulumi.Input['XlSpecApiArgs']]):
        pulumi.set(self, "api", value)

    @property
    @pulumi.getter
    def apic(self) -> Optional[pulumi.Input['XlSpecApicArgs']]:
        return pulumi.get(self, "apic")

    @apic.setter
    def apic(self, value: Optional[pulumi.Input['XlSpecApicArgs']]):
        pulumi.set(self, "apic", value)

    @property
    @pulumi.getter
    def appdynamics(self) -> Optional[pulumi.Input['XlSpecAppdynamicsArgs']]:
        return pulumi.get(self, "appdynamics")

    @appdynamics.setter
    def appdynamics(self, value: Optional[pulumi.Input['XlSpecAppdynamicsArgs']]):
        pulumi.set(self, "appdynamics", value)

    @property
    @pulumi.getter
    def appinsights(self) -> Optional[pulumi.Input['XlSpecAppinsightsArgs']]:
        return pulumi.get(self, "appinsights")

    @appinsights.setter
    def appinsights(self, value: Optional[pulumi.Input['XlSpecAppinsightsArgs']]):
        pulumi.set(self, "appinsights", value)

    @property
    @pulumi.getter
    def arangodb(self) -> Optional[pulumi.Input['XlSpecArangodbArgs']]:
        return pulumi.get(self, "arangodb")

    @arangodb.setter
    def arangodb(self, value: Optional[pulumi.Input['XlSpecArangodbArgs']]):
        pulumi.set(self, "arangodb", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input['XlSpecAuthArgs']]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input['XlSpecAuthArgs']]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['XlSpecAwsArgs']]:
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['XlSpecAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def awslambda(self) -> Optional[pulumi.Input['XlSpecAwslambdaArgs']]:
        return pulumi.get(self, "awslambda")

    @awslambda.setter
    def awslambda(self, value: Optional[pulumi.Input['XlSpecAwslambdaArgs']]):
        pulumi.set(self, "awslambda", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['XlSpecAzureArgs']]:
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['XlSpecAzureArgs']]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter
    def baremetal(self) -> Optional[pulumi.Input['XlSpecBaremetalArgs']]:
        return pulumi.get(self, "baremetal")

    @baremetal.setter
    def baremetal(self, value: Optional[pulumi.Input['XlSpecBaremetalArgs']]):
        pulumi.set(self, "baremetal", value)

    @property
    @pulumi.getter
    def chronograf(self) -> Optional[pulumi.Input['XlSpecChronografArgs']]:
        return pulumi.get(self, "chronograf")

    @chronograf.setter
    def chronograf(self, value: Optional[pulumi.Input['XlSpecChronografArgs']]):
        pulumi.set(self, "chronograf", value)

    @property
    @pulumi.getter
    def cloudfoundry(self) -> Optional[pulumi.Input['XlSpecCloudfoundryArgs']]:
        return pulumi.get(self, "cloudfoundry")

    @cloudfoundry.setter
    def cloudfoundry(self, value: Optional[pulumi.Input['XlSpecCloudfoundryArgs']]):
        pulumi.set(self, "cloudfoundry", value)

    @property
    @pulumi.getter
    def clustermgr(self) -> Optional[pulumi.Input['XlSpecClustermgrArgs']]:
        return pulumi.get(self, "clustermgr")

    @clustermgr.setter
    def clustermgr(self, value: Optional[pulumi.Input['XlSpecClustermgrArgs']]):
        pulumi.set(self, "clustermgr", value)

    @property
    @pulumi.getter
    def compellent(self) -> Optional[pulumi.Input['XlSpecCompellentArgs']]:
        return pulumi.get(self, "compellent")

    @compellent.setter
    def compellent(self, value: Optional[pulumi.Input['XlSpecCompellentArgs']]):
        pulumi.set(self, "compellent", value)

    @property
    @pulumi.getter
    def consul(self) -> Optional[pulumi.Input['XlSpecConsulArgs']]:
        return pulumi.get(self, "consul")

    @consul.setter
    def consul(self, value: Optional[pulumi.Input['XlSpecConsulArgs']]):
        pulumi.set(self, "consul", value)

    @property
    @pulumi.getter
    def control(self) -> Optional[pulumi.Input['XlSpecControlArgs']]:
        return pulumi.get(self, "control")

    @control.setter
    def control(self, value: Optional[pulumi.Input['XlSpecControlArgs']]):
        pulumi.set(self, "control", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input['XlSpecCostArgs']]:
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input['XlSpecCostArgs']]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def datacloud(self) -> Optional[pulumi.Input['XlSpecDatacloudArgs']]:
        return pulumi.get(self, "datacloud")

    @datacloud.setter
    def datacloud(self, value: Optional[pulumi.Input['XlSpecDatacloudArgs']]):
        pulumi.set(self, "datacloud", value)

    @property
    @pulumi.getter
    def datadog(self) -> Optional[pulumi.Input['XlSpecDatadogArgs']]:
        return pulumi.get(self, "datadog")

    @datadog.setter
    def datadog(self, value: Optional[pulumi.Input['XlSpecDatadogArgs']]):
        pulumi.set(self, "datadog", value)

    @property
    @pulumi.getter
    def db(self) -> Optional[pulumi.Input['XlSpecDbArgs']]:
        return pulumi.get(self, "db")

    @db.setter
    def db(self, value: Optional[pulumi.Input['XlSpecDbArgs']]):
        pulumi.set(self, "db", value)

    @property
    @pulumi.getter
    def dynatrace(self) -> Optional[pulumi.Input['XlSpecDynatraceArgs']]:
        return pulumi.get(self, "dynatrace")

    @dynatrace.setter
    def dynatrace(self, value: Optional[pulumi.Input['XlSpecDynatraceArgs']]):
        pulumi.set(self, "dynatrace", value)

    @property
    @pulumi.getter(name="fluent-bit")
    def fluent_bit(self) -> Optional[pulumi.Input['XlSpecFluent-BitArgs']]:
        return pulumi.get(self, "fluent_bit")

    @fluent_bit.setter
    def fluent_bit(self, value: Optional[pulumi.Input['XlSpecFluent-BitArgs']]):
        pulumi.set(self, "fluent_bit", value)

    @property
    @pulumi.getter
    def gcp(self) -> Optional[pulumi.Input['XlSpecGcpArgs']]:
        return pulumi.get(self, "gcp")

    @gcp.setter
    def gcp(self, value: Optional[pulumi.Input['XlSpecGcpArgs']]):
        pulumi.set(self, "gcp", value)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input['XlSpecGlobalArgs']]:
        """
        Platform configuration options
        """
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input['XlSpecGlobalArgs']]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[pulumi.Input['XlSpecGrafanaArgs']]:
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[pulumi.Input['XlSpecGrafanaArgs']]):
        pulumi.set(self, "grafana", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input['XlSpecGroupArgs']]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input['XlSpecGroupArgs']]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def hds(self) -> Optional[pulumi.Input['XlSpecHdsArgs']]:
        return pulumi.get(self, "hds")

    @hds.setter
    def hds(self, value: Optional[pulumi.Input['XlSpecHdsArgs']]):
        pulumi.set(self, "hds", value)

    @property
    @pulumi.getter
    def history(self) -> Optional[pulumi.Input['XlSpecHistoryArgs']]:
        return pulumi.get(self, "history")

    @history.setter
    def history(self, value: Optional[pulumi.Input['XlSpecHistoryArgs']]):
        pulumi.set(self, "history", value)

    @property
    @pulumi.getter
    def horizon(self) -> Optional[pulumi.Input['XlSpecHorizonArgs']]:
        return pulumi.get(self, "horizon")

    @horizon.setter
    def horizon(self, value: Optional[pulumi.Input['XlSpecHorizonArgs']]):
        pulumi.set(self, "horizon", value)

    @property
    @pulumi.getter
    def hpe3par(self) -> Optional[pulumi.Input['XlSpecHpe3parArgs']]:
        return pulumi.get(self, "hpe3par")

    @hpe3par.setter
    def hpe3par(self, value: Optional[pulumi.Input['XlSpecHpe3parArgs']]):
        pulumi.set(self, "hpe3par", value)

    @property
    @pulumi.getter
    def hyperflex(self) -> Optional[pulumi.Input['XlSpecHyperflexArgs']]:
        return pulumi.get(self, "hyperflex")

    @hyperflex.setter
    def hyperflex(self, value: Optional[pulumi.Input['XlSpecHyperflexArgs']]):
        pulumi.set(self, "hyperflex", value)

    @property
    @pulumi.getter
    def hyperv(self) -> Optional[pulumi.Input['XlSpecHypervArgs']]:
        return pulumi.get(self, "hyperv")

    @hyperv.setter
    def hyperv(self, value: Optional[pulumi.Input['XlSpecHypervArgs']]):
        pulumi.set(self, "hyperv", value)

    @property
    @pulumi.getter
    def influxdb(self) -> Optional[pulumi.Input['XlSpecInfluxdbArgs']]:
        return pulumi.get(self, "influxdb")

    @influxdb.setter
    def influxdb(self, value: Optional[pulumi.Input['XlSpecInfluxdbArgs']]):
        pulumi.set(self, "influxdb", value)

    @property
    @pulumi.getter
    def intersight(self) -> Optional[pulumi.Input['XlSpecIntersightArgs']]:
        return pulumi.get(self, "intersight")

    @intersight.setter
    def intersight(self, value: Optional[pulumi.Input['XlSpecIntersightArgs']]):
        pulumi.set(self, "intersight", value)

    @property
    @pulumi.getter
    def istio(self) -> Optional[pulumi.Input['XlSpecIstioArgs']]:
        return pulumi.get(self, "istio")

    @istio.setter
    def istio(self, value: Optional[pulumi.Input['XlSpecIstioArgs']]):
        pulumi.set(self, "istio", value)

    @property
    @pulumi.getter
    def istioingress(self) -> Optional[pulumi.Input['XlSpecIstioingressArgs']]:
        return pulumi.get(self, "istioingress")

    @istioingress.setter
    def istioingress(self, value: Optional[pulumi.Input['XlSpecIstioingressArgs']]):
        pulumi.set(self, "istioingress", value)

    @property
    @pulumi.getter
    def jaeger(self) -> Optional[pulumi.Input['XlSpecJaegerArgs']]:
        return pulumi.get(self, "jaeger")

    @jaeger.setter
    def jaeger(self, value: Optional[pulumi.Input['XlSpecJaegerArgs']]):
        pulumi.set(self, "jaeger", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input['XlSpecKafkaArgs']]:
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input['XlSpecKafkaArgs']]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter
    def kubeturbo(self) -> Optional[pulumi.Input['XlSpecKubeturboArgs']]:
        return pulumi.get(self, "kubeturbo")

    @kubeturbo.setter
    def kubeturbo(self, value: Optional[pulumi.Input['XlSpecKubeturboArgs']]):
        pulumi.set(self, "kubeturbo", value)

    @property
    @pulumi.getter
    def loki(self) -> Optional[pulumi.Input['XlSpecLokiArgs']]:
        return pulumi.get(self, "loki")

    @loki.setter
    def loki(self, value: Optional[pulumi.Input['XlSpecLokiArgs']]):
        pulumi.set(self, "loki", value)

    @property
    @pulumi.getter
    def market(self) -> Optional[pulumi.Input['XlSpecMarketArgs']]:
        return pulumi.get(self, "market")

    @market.setter
    def market(self, value: Optional[pulumi.Input['XlSpecMarketArgs']]):
        pulumi.set(self, "market", value)

    @property
    @pulumi.getter(name="mediation-acims")
    def mediation_acims(self) -> Optional[pulumi.Input['XlSpecMediation-AcimsArgs']]:
        return pulumi.get(self, "mediation_acims")

    @mediation_acims.setter
    def mediation_acims(self, value: Optional[pulumi.Input['XlSpecMediation-AcimsArgs']]):
        pulumi.set(self, "mediation_acims", value)

    @property
    @pulumi.getter(name="mediation-actionscript")
    def mediation_actionscript(self) -> Optional[pulumi.Input['XlSpecMediation-ActionscriptArgs']]:
        return pulumi.get(self, "mediation_actionscript")

    @mediation_actionscript.setter
    def mediation_actionscript(self, value: Optional[pulumi.Input['XlSpecMediation-ActionscriptArgs']]):
        pulumi.set(self, "mediation_actionscript", value)

    @property
    @pulumi.getter(name="mediation-aix")
    def mediation_aix(self) -> Optional[pulumi.Input['XlSpecMediation-AixArgs']]:
        return pulumi.get(self, "mediation_aix")

    @mediation_aix.setter
    def mediation_aix(self, value: Optional[pulumi.Input['XlSpecMediation-AixArgs']]):
        pulumi.set(self, "mediation_aix", value)

    @property
    @pulumi.getter(name="mediation-apic")
    def mediation_apic(self) -> Optional[pulumi.Input['XlSpecMediation-ApicArgs']]:
        return pulumi.get(self, "mediation_apic")

    @mediation_apic.setter
    def mediation_apic(self, value: Optional[pulumi.Input['XlSpecMediation-ApicArgs']]):
        pulumi.set(self, "mediation_apic", value)

    @property
    @pulumi.getter(name="mediation-appdynamics")
    def mediation_appdynamics(self) -> Optional[pulumi.Input['XlSpecMediation-AppdynamicsArgs']]:
        return pulumi.get(self, "mediation_appdynamics")

    @mediation_appdynamics.setter
    def mediation_appdynamics(self, value: Optional[pulumi.Input['XlSpecMediation-AppdynamicsArgs']]):
        pulumi.set(self, "mediation_appdynamics", value)

    @property
    @pulumi.getter(name="mediation-appinsights")
    def mediation_appinsights(self) -> Optional[pulumi.Input['XlSpecMediation-AppinsightsArgs']]:
        return pulumi.get(self, "mediation_appinsights")

    @mediation_appinsights.setter
    def mediation_appinsights(self, value: Optional[pulumi.Input['XlSpecMediation-AppinsightsArgs']]):
        pulumi.set(self, "mediation_appinsights", value)

    @property
    @pulumi.getter(name="mediation-aws")
    def mediation_aws(self) -> Optional[pulumi.Input['XlSpecMediation-AwsArgs']]:
        return pulumi.get(self, "mediation_aws")

    @mediation_aws.setter
    def mediation_aws(self, value: Optional[pulumi.Input['XlSpecMediation-AwsArgs']]):
        pulumi.set(self, "mediation_aws", value)

    @property
    @pulumi.getter(name="mediation-awsbilling")
    def mediation_awsbilling(self) -> Optional[pulumi.Input['XlSpecMediation-AwsbillingArgs']]:
        return pulumi.get(self, "mediation_awsbilling")

    @mediation_awsbilling.setter
    def mediation_awsbilling(self, value: Optional[pulumi.Input['XlSpecMediation-AwsbillingArgs']]):
        pulumi.set(self, "mediation_awsbilling", value)

    @property
    @pulumi.getter(name="mediation-awscost")
    def mediation_awscost(self) -> Optional[pulumi.Input['XlSpecMediation-AwscostArgs']]:
        return pulumi.get(self, "mediation_awscost")

    @mediation_awscost.setter
    def mediation_awscost(self, value: Optional[pulumi.Input['XlSpecMediation-AwscostArgs']]):
        pulumi.set(self, "mediation_awscost", value)

    @property
    @pulumi.getter(name="mediation-awslambda")
    def mediation_awslambda(self) -> Optional[pulumi.Input['XlSpecMediation-AwslambdaArgs']]:
        return pulumi.get(self, "mediation_awslambda")

    @mediation_awslambda.setter
    def mediation_awslambda(self, value: Optional[pulumi.Input['XlSpecMediation-AwslambdaArgs']]):
        pulumi.set(self, "mediation_awslambda", value)

    @property
    @pulumi.getter(name="mediation-azure")
    def mediation_azure(self) -> Optional[pulumi.Input['XlSpecMediation-AzureArgs']]:
        return pulumi.get(self, "mediation_azure")

    @mediation_azure.setter
    def mediation_azure(self, value: Optional[pulumi.Input['XlSpecMediation-AzureArgs']]):
        pulumi.set(self, "mediation_azure", value)

    @property
    @pulumi.getter(name="mediation-azurecost")
    def mediation_azurecost(self) -> Optional[pulumi.Input['XlSpecMediation-AzurecostArgs']]:
        return pulumi.get(self, "mediation_azurecost")

    @mediation_azurecost.setter
    def mediation_azurecost(self, value: Optional[pulumi.Input['XlSpecMediation-AzurecostArgs']]):
        pulumi.set(self, "mediation_azurecost", value)

    @property
    @pulumi.getter(name="mediation-azureea")
    def mediation_azureea(self) -> Optional[pulumi.Input['XlSpecMediation-AzureeaArgs']]:
        return pulumi.get(self, "mediation_azureea")

    @mediation_azureea.setter
    def mediation_azureea(self, value: Optional[pulumi.Input['XlSpecMediation-AzureeaArgs']]):
        pulumi.set(self, "mediation_azureea", value)

    @property
    @pulumi.getter(name="mediation-azuresp")
    def mediation_azuresp(self) -> Optional[pulumi.Input['XlSpecMediation-AzurespArgs']]:
        return pulumi.get(self, "mediation_azuresp")

    @mediation_azuresp.setter
    def mediation_azuresp(self, value: Optional[pulumi.Input['XlSpecMediation-AzurespArgs']]):
        pulumi.set(self, "mediation_azuresp", value)

    @property
    @pulumi.getter(name="mediation-azurevolumes")
    def mediation_azurevolumes(self) -> Optional[pulumi.Input['XlSpecMediation-AzurevolumesArgs']]:
        return pulumi.get(self, "mediation_azurevolumes")

    @mediation_azurevolumes.setter
    def mediation_azurevolumes(self, value: Optional[pulumi.Input['XlSpecMediation-AzurevolumesArgs']]):
        pulumi.set(self, "mediation_azurevolumes", value)

    @property
    @pulumi.getter(name="mediation-baremetal")
    def mediation_baremetal(self) -> Optional[pulumi.Input['XlSpecMediation-BaremetalArgs']]:
        return pulumi.get(self, "mediation_baremetal")

    @mediation_baremetal.setter
    def mediation_baremetal(self, value: Optional[pulumi.Input['XlSpecMediation-BaremetalArgs']]):
        pulumi.set(self, "mediation_baremetal", value)

    @property
    @pulumi.getter(name="mediation-cloudfoundry")
    def mediation_cloudfoundry(self) -> Optional[pulumi.Input['XlSpecMediation-CloudfoundryArgs']]:
        return pulumi.get(self, "mediation_cloudfoundry")

    @mediation_cloudfoundry.setter
    def mediation_cloudfoundry(self, value: Optional[pulumi.Input['XlSpecMediation-CloudfoundryArgs']]):
        pulumi.set(self, "mediation_cloudfoundry", value)

    @property
    @pulumi.getter(name="mediation-compellent")
    def mediation_compellent(self) -> Optional[pulumi.Input['XlSpecMediation-CompellentArgs']]:
        return pulumi.get(self, "mediation_compellent")

    @mediation_compellent.setter
    def mediation_compellent(self, value: Optional[pulumi.Input['XlSpecMediation-CompellentArgs']]):
        pulumi.set(self, "mediation_compellent", value)

    @property
    @pulumi.getter(name="mediation-customdata")
    def mediation_customdata(self) -> Optional[pulumi.Input['XlSpecMediation-CustomdataArgs']]:
        return pulumi.get(self, "mediation_customdata")

    @mediation_customdata.setter
    def mediation_customdata(self, value: Optional[pulumi.Input['XlSpecMediation-CustomdataArgs']]):
        pulumi.set(self, "mediation_customdata", value)

    @property
    @pulumi.getter(name="mediation-datadog")
    def mediation_datadog(self) -> Optional[pulumi.Input['XlSpecMediation-DatadogArgs']]:
        return pulumi.get(self, "mediation_datadog")

    @mediation_datadog.setter
    def mediation_datadog(self, value: Optional[pulumi.Input['XlSpecMediation-DatadogArgs']]):
        pulumi.set(self, "mediation_datadog", value)

    @property
    @pulumi.getter(name="mediation-dynatrace")
    def mediation_dynatrace(self) -> Optional[pulumi.Input['XlSpecMediation-DynatraceArgs']]:
        return pulumi.get(self, "mediation_dynatrace")

    @mediation_dynatrace.setter
    def mediation_dynatrace(self, value: Optional[pulumi.Input['XlSpecMediation-DynatraceArgs']]):
        pulumi.set(self, "mediation_dynatrace", value)

    @property
    @pulumi.getter(name="mediation-gcp")
    def mediation_gcp(self) -> Optional[pulumi.Input['XlSpecMediation-GcpArgs']]:
        return pulumi.get(self, "mediation_gcp")

    @mediation_gcp.setter
    def mediation_gcp(self, value: Optional[pulumi.Input['XlSpecMediation-GcpArgs']]):
        pulumi.set(self, "mediation_gcp", value)

    @property
    @pulumi.getter(name="mediation-gcpcost")
    def mediation_gcpcost(self) -> Optional[pulumi.Input['XlSpecMediation-GcpcostArgs']]:
        return pulumi.get(self, "mediation_gcpcost")

    @mediation_gcpcost.setter
    def mediation_gcpcost(self, value: Optional[pulumi.Input['XlSpecMediation-GcpcostArgs']]):
        pulumi.set(self, "mediation_gcpcost", value)

    @property
    @pulumi.getter(name="mediation-hds")
    def mediation_hds(self) -> Optional[pulumi.Input['XlSpecMediation-HdsArgs']]:
        return pulumi.get(self, "mediation_hds")

    @mediation_hds.setter
    def mediation_hds(self, value: Optional[pulumi.Input['XlSpecMediation-HdsArgs']]):
        pulumi.set(self, "mediation_hds", value)

    @property
    @pulumi.getter(name="mediation-horizon")
    def mediation_horizon(self) -> Optional[pulumi.Input['XlSpecMediation-HorizonArgs']]:
        return pulumi.get(self, "mediation_horizon")

    @mediation_horizon.setter
    def mediation_horizon(self, value: Optional[pulumi.Input['XlSpecMediation-HorizonArgs']]):
        pulumi.set(self, "mediation_horizon", value)

    @property
    @pulumi.getter(name="mediation-hpe3par")
    def mediation_hpe3par(self) -> Optional[pulumi.Input['XlSpecMediation-Hpe3parArgs']]:
        return pulumi.get(self, "mediation_hpe3par")

    @mediation_hpe3par.setter
    def mediation_hpe3par(self, value: Optional[pulumi.Input['XlSpecMediation-Hpe3parArgs']]):
        pulumi.set(self, "mediation_hpe3par", value)

    @property
    @pulumi.getter(name="mediation-hyperflex")
    def mediation_hyperflex(self) -> Optional[pulumi.Input['XlSpecMediation-HyperflexArgs']]:
        return pulumi.get(self, "mediation_hyperflex")

    @mediation_hyperflex.setter
    def mediation_hyperflex(self, value: Optional[pulumi.Input['XlSpecMediation-HyperflexArgs']]):
        pulumi.set(self, "mediation_hyperflex", value)

    @property
    @pulumi.getter(name="mediation-hyperv")
    def mediation_hyperv(self) -> Optional[pulumi.Input['XlSpecMediation-HypervArgs']]:
        return pulumi.get(self, "mediation_hyperv")

    @mediation_hyperv.setter
    def mediation_hyperv(self, value: Optional[pulumi.Input['XlSpecMediation-HypervArgs']]):
        pulumi.set(self, "mediation_hyperv", value)

    @property
    @pulumi.getter(name="mediation-intersight")
    def mediation_intersight(self) -> Optional[pulumi.Input['XlSpecMediation-IntersightArgs']]:
        return pulumi.get(self, "mediation_intersight")

    @mediation_intersight.setter
    def mediation_intersight(self, value: Optional[pulumi.Input['XlSpecMediation-IntersightArgs']]):
        pulumi.set(self, "mediation_intersight", value)

    @property
    @pulumi.getter(name="mediation-intersighthyperflex")
    def mediation_intersighthyperflex(self) -> Optional[pulumi.Input['XlSpecMediation-IntersighthyperflexArgs']]:
        return pulumi.get(self, "mediation_intersighthyperflex")

    @mediation_intersighthyperflex.setter
    def mediation_intersighthyperflex(self, value: Optional[pulumi.Input['XlSpecMediation-IntersighthyperflexArgs']]):
        pulumi.set(self, "mediation_intersighthyperflex", value)

    @property
    @pulumi.getter(name="mediation-intersightucs")
    def mediation_intersightucs(self) -> Optional[pulumi.Input['XlSpecMediation-IntersightucsArgs']]:
        return pulumi.get(self, "mediation_intersightucs")

    @mediation_intersightucs.setter
    def mediation_intersightucs(self, value: Optional[pulumi.Input['XlSpecMediation-IntersightucsArgs']]):
        pulumi.set(self, "mediation_intersightucs", value)

    @property
    @pulumi.getter(name="mediation-istio")
    def mediation_istio(self) -> Optional[pulumi.Input['XlSpecMediation-IstioArgs']]:
        return pulumi.get(self, "mediation_istio")

    @mediation_istio.setter
    def mediation_istio(self, value: Optional[pulumi.Input['XlSpecMediation-IstioArgs']]):
        pulumi.set(self, "mediation_istio", value)

    @property
    @pulumi.getter(name="mediation-mssql")
    def mediation_mssql(self) -> Optional[pulumi.Input['XlSpecMediation-MssqlArgs']]:
        return pulumi.get(self, "mediation_mssql")

    @mediation_mssql.setter
    def mediation_mssql(self, value: Optional[pulumi.Input['XlSpecMediation-MssqlArgs']]):
        pulumi.set(self, "mediation_mssql", value)

    @property
    @pulumi.getter(name="mediation-mysql")
    def mediation_mysql(self) -> Optional[pulumi.Input['XlSpecMediation-MysqlArgs']]:
        return pulumi.get(self, "mediation_mysql")

    @mediation_mysql.setter
    def mediation_mysql(self, value: Optional[pulumi.Input['XlSpecMediation-MysqlArgs']]):
        pulumi.set(self, "mediation_mysql", value)

    @property
    @pulumi.getter(name="mediation-netapp")
    def mediation_netapp(self) -> Optional[pulumi.Input['XlSpecMediation-NetappArgs']]:
        return pulumi.get(self, "mediation_netapp")

    @mediation_netapp.setter
    def mediation_netapp(self, value: Optional[pulumi.Input['XlSpecMediation-NetappArgs']]):
        pulumi.set(self, "mediation_netapp", value)

    @property
    @pulumi.getter(name="mediation-netflow")
    def mediation_netflow(self) -> Optional[pulumi.Input['XlSpecMediation-NetflowArgs']]:
        return pulumi.get(self, "mediation_netflow")

    @mediation_netflow.setter
    def mediation_netflow(self, value: Optional[pulumi.Input['XlSpecMediation-NetflowArgs']]):
        pulumi.set(self, "mediation_netflow", value)

    @property
    @pulumi.getter(name="mediation-newrelic")
    def mediation_newrelic(self) -> Optional[pulumi.Input['XlSpecMediation-NewrelicArgs']]:
        return pulumi.get(self, "mediation_newrelic")

    @mediation_newrelic.setter
    def mediation_newrelic(self, value: Optional[pulumi.Input['XlSpecMediation-NewrelicArgs']]):
        pulumi.set(self, "mediation_newrelic", value)

    @property
    @pulumi.getter(name="mediation-nutanix")
    def mediation_nutanix(self) -> Optional[pulumi.Input['XlSpecMediation-NutanixArgs']]:
        return pulumi.get(self, "mediation_nutanix")

    @mediation_nutanix.setter
    def mediation_nutanix(self, value: Optional[pulumi.Input['XlSpecMediation-NutanixArgs']]):
        pulumi.set(self, "mediation_nutanix", value)

    @property
    @pulumi.getter(name="mediation-oneview")
    def mediation_oneview(self) -> Optional[pulumi.Input['XlSpecMediation-OneviewArgs']]:
        return pulumi.get(self, "mediation_oneview")

    @mediation_oneview.setter
    def mediation_oneview(self, value: Optional[pulumi.Input['XlSpecMediation-OneviewArgs']]):
        pulumi.set(self, "mediation_oneview", value)

    @property
    @pulumi.getter(name="mediation-openstack")
    def mediation_openstack(self) -> Optional[pulumi.Input['XlSpecMediation-OpenstackArgs']]:
        return pulumi.get(self, "mediation_openstack")

    @mediation_openstack.setter
    def mediation_openstack(self, value: Optional[pulumi.Input['XlSpecMediation-OpenstackArgs']]):
        pulumi.set(self, "mediation_openstack", value)

    @property
    @pulumi.getter(name="mediation-pivotal")
    def mediation_pivotal(self) -> Optional[pulumi.Input['XlSpecMediation-PivotalArgs']]:
        return pulumi.get(self, "mediation_pivotal")

    @mediation_pivotal.setter
    def mediation_pivotal(self, value: Optional[pulumi.Input['XlSpecMediation-PivotalArgs']]):
        pulumi.set(self, "mediation_pivotal", value)

    @property
    @pulumi.getter(name="mediation-pure")
    def mediation_pure(self) -> Optional[pulumi.Input['XlSpecMediation-PureArgs']]:
        return pulumi.get(self, "mediation_pure")

    @mediation_pure.setter
    def mediation_pure(self, value: Optional[pulumi.Input['XlSpecMediation-PureArgs']]):
        pulumi.set(self, "mediation_pure", value)

    @property
    @pulumi.getter(name="mediation-rhv")
    def mediation_rhv(self) -> Optional[pulumi.Input['XlSpecMediation-RhvArgs']]:
        return pulumi.get(self, "mediation_rhv")

    @mediation_rhv.setter
    def mediation_rhv(self, value: Optional[pulumi.Input['XlSpecMediation-RhvArgs']]):
        pulumi.set(self, "mediation_rhv", value)

    @property
    @pulumi.getter(name="mediation-scaleio")
    def mediation_scaleio(self) -> Optional[pulumi.Input['XlSpecMediation-ScaleioArgs']]:
        return pulumi.get(self, "mediation_scaleio")

    @mediation_scaleio.setter
    def mediation_scaleio(self, value: Optional[pulumi.Input['XlSpecMediation-ScaleioArgs']]):
        pulumi.set(self, "mediation_scaleio", value)

    @property
    @pulumi.getter(name="mediation-snmp")
    def mediation_snmp(self) -> Optional[pulumi.Input['XlSpecMediation-SnmpArgs']]:
        return pulumi.get(self, "mediation_snmp")

    @mediation_snmp.setter
    def mediation_snmp(self, value: Optional[pulumi.Input['XlSpecMediation-SnmpArgs']]):
        pulumi.set(self, "mediation_snmp", value)

    @property
    @pulumi.getter(name="mediation-terraform")
    def mediation_terraform(self) -> Optional[pulumi.Input['XlSpecMediation-TerraformArgs']]:
        return pulumi.get(self, "mediation_terraform")

    @mediation_terraform.setter
    def mediation_terraform(self, value: Optional[pulumi.Input['XlSpecMediation-TerraformArgs']]):
        pulumi.set(self, "mediation_terraform", value)

    @property
    @pulumi.getter(name="mediation-tetration")
    def mediation_tetration(self) -> Optional[pulumi.Input['XlSpecMediation-TetrationArgs']]:
        return pulumi.get(self, "mediation_tetration")

    @mediation_tetration.setter
    def mediation_tetration(self, value: Optional[pulumi.Input['XlSpecMediation-TetrationArgs']]):
        pulumi.set(self, "mediation_tetration", value)

    @property
    @pulumi.getter(name="mediation-tomcat")
    def mediation_tomcat(self) -> Optional[pulumi.Input['XlSpecMediation-TomcatArgs']]:
        return pulumi.get(self, "mediation_tomcat")

    @mediation_tomcat.setter
    def mediation_tomcat(self, value: Optional[pulumi.Input['XlSpecMediation-TomcatArgs']]):
        pulumi.set(self, "mediation_tomcat", value)

    @property
    @pulumi.getter(name="mediation-ucs")
    def mediation_ucs(self) -> Optional[pulumi.Input['XlSpecMediation-UcsArgs']]:
        return pulumi.get(self, "mediation_ucs")

    @mediation_ucs.setter
    def mediation_ucs(self, value: Optional[pulumi.Input['XlSpecMediation-UcsArgs']]):
        pulumi.set(self, "mediation_ucs", value)

    @property
    @pulumi.getter(name="mediation-ucsdirector")
    def mediation_ucsdirector(self) -> Optional[pulumi.Input['XlSpecMediation-UcsdirectorArgs']]:
        return pulumi.get(self, "mediation_ucsdirector")

    @mediation_ucsdirector.setter
    def mediation_ucsdirector(self, value: Optional[pulumi.Input['XlSpecMediation-UcsdirectorArgs']]):
        pulumi.set(self, "mediation_ucsdirector", value)

    @property
    @pulumi.getter(name="mediation-vcd")
    def mediation_vcd(self) -> Optional[pulumi.Input['XlSpecMediation-VcdArgs']]:
        return pulumi.get(self, "mediation_vcd")

    @mediation_vcd.setter
    def mediation_vcd(self, value: Optional[pulumi.Input['XlSpecMediation-VcdArgs']]):
        pulumi.set(self, "mediation_vcd", value)

    @property
    @pulumi.getter(name="mediation-vcenter")
    def mediation_vcenter(self) -> Optional[pulumi.Input['XlSpecMediation-VcenterArgs']]:
        return pulumi.get(self, "mediation_vcenter")

    @mediation_vcenter.setter
    def mediation_vcenter(self, value: Optional[pulumi.Input['XlSpecMediation-VcenterArgs']]):
        pulumi.set(self, "mediation_vcenter", value)

    @property
    @pulumi.getter(name="mediation-vcenterbrowsing")
    def mediation_vcenterbrowsing(self) -> Optional[pulumi.Input['XlSpecMediation-VcenterbrowsingArgs']]:
        return pulumi.get(self, "mediation_vcenterbrowsing")

    @mediation_vcenterbrowsing.setter
    def mediation_vcenterbrowsing(self, value: Optional[pulumi.Input['XlSpecMediation-VcenterbrowsingArgs']]):
        pulumi.set(self, "mediation_vcenterbrowsing", value)

    @property
    @pulumi.getter(name="mediation-vmax")
    def mediation_vmax(self) -> Optional[pulumi.Input['XlSpecMediation-VmaxArgs']]:
        return pulumi.get(self, "mediation_vmax")

    @mediation_vmax.setter
    def mediation_vmax(self, value: Optional[pulumi.Input['XlSpecMediation-VmaxArgs']]):
        pulumi.set(self, "mediation_vmax", value)

    @property
    @pulumi.getter(name="mediation-vmm")
    def mediation_vmm(self) -> Optional[pulumi.Input['XlSpecMediation-VmmArgs']]:
        return pulumi.get(self, "mediation_vmm")

    @mediation_vmm.setter
    def mediation_vmm(self, value: Optional[pulumi.Input['XlSpecMediation-VmmArgs']]):
        pulumi.set(self, "mediation_vmm", value)

    @property
    @pulumi.getter(name="mediation-vplex")
    def mediation_vplex(self) -> Optional[pulumi.Input['XlSpecMediation-VplexArgs']]:
        return pulumi.get(self, "mediation_vplex")

    @mediation_vplex.setter
    def mediation_vplex(self, value: Optional[pulumi.Input['XlSpecMediation-VplexArgs']]):
        pulumi.set(self, "mediation_vplex", value)

    @property
    @pulumi.getter(name="mediation-wmi")
    def mediation_wmi(self) -> Optional[pulumi.Input['XlSpecMediation-WmiArgs']]:
        return pulumi.get(self, "mediation_wmi")

    @mediation_wmi.setter
    def mediation_wmi(self, value: Optional[pulumi.Input['XlSpecMediation-WmiArgs']]):
        pulumi.set(self, "mediation_wmi", value)

    @property
    @pulumi.getter(name="mediation-xtremio")
    def mediation_xtremio(self) -> Optional[pulumi.Input['XlSpecMediation-XtremioArgs']]:
        return pulumi.get(self, "mediation_xtremio")

    @mediation_xtremio.setter
    def mediation_xtremio(self, value: Optional[pulumi.Input['XlSpecMediation-XtremioArgs']]):
        pulumi.set(self, "mediation_xtremio", value)

    @property
    @pulumi.getter
    def metron(self) -> Optional[pulumi.Input['XlSpecMetronArgs']]:
        return pulumi.get(self, "metron")

    @metron.setter
    def metron(self, value: Optional[pulumi.Input['XlSpecMetronArgs']]):
        pulumi.set(self, "metron", value)

    @property
    @pulumi.getter
    def mssql(self) -> Optional[pulumi.Input['XlSpecMssqlArgs']]:
        return pulumi.get(self, "mssql")

    @mssql.setter
    def mssql(self, value: Optional[pulumi.Input['XlSpecMssqlArgs']]):
        pulumi.set(self, "mssql", value)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input['XlSpecMysqlArgs']]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input['XlSpecMysqlArgs']]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def netapp(self) -> Optional[pulumi.Input['XlSpecNetappArgs']]:
        return pulumi.get(self, "netapp")

    @netapp.setter
    def netapp(self, value: Optional[pulumi.Input['XlSpecNetappArgs']]):
        pulumi.set(self, "netapp", value)

    @property
    @pulumi.getter
    def netflow(self) -> Optional[pulumi.Input['XlSpecNetflowArgs']]:
        return pulumi.get(self, "netflow")

    @netflow.setter
    def netflow(self, value: Optional[pulumi.Input['XlSpecNetflowArgs']]):
        pulumi.set(self, "netflow", value)

    @property
    @pulumi.getter
    def newrelic(self) -> Optional[pulumi.Input['XlSpecNewrelicArgs']]:
        return pulumi.get(self, "newrelic")

    @newrelic.setter
    def newrelic(self, value: Optional[pulumi.Input['XlSpecNewrelicArgs']]):
        pulumi.set(self, "newrelic", value)

    @property
    @pulumi.getter
    def nginxingress(self) -> Optional[pulumi.Input['XlSpecNginxingressArgs']]:
        return pulumi.get(self, "nginxingress")

    @nginxingress.setter
    def nginxingress(self, value: Optional[pulumi.Input['XlSpecNginxingressArgs']]):
        pulumi.set(self, "nginxingress", value)

    @property
    @pulumi.getter
    def nutanix(self) -> Optional[pulumi.Input['XlSpecNutanixArgs']]:
        return pulumi.get(self, "nutanix")

    @nutanix.setter
    def nutanix(self, value: Optional[pulumi.Input['XlSpecNutanixArgs']]):
        pulumi.set(self, "nutanix", value)

    @property
    @pulumi.getter
    def oneview(self) -> Optional[pulumi.Input['XlSpecOneviewArgs']]:
        return pulumi.get(self, "oneview")

    @oneview.setter
    def oneview(self, value: Optional[pulumi.Input['XlSpecOneviewArgs']]):
        pulumi.set(self, "oneview", value)

    @property
    @pulumi.getter
    def openshiftingress(self) -> Optional[pulumi.Input['XlSpecOpenshiftingressArgs']]:
        return pulumi.get(self, "openshiftingress")

    @openshiftingress.setter
    def openshiftingress(self, value: Optional[pulumi.Input['XlSpecOpenshiftingressArgs']]):
        pulumi.set(self, "openshiftingress", value)

    @property
    @pulumi.getter
    def openstack(self) -> Optional[pulumi.Input['XlSpecOpenstackArgs']]:
        return pulumi.get(self, "openstack")

    @openstack.setter
    def openstack(self, value: Optional[pulumi.Input['XlSpecOpenstackArgs']]):
        pulumi.set(self, "openstack", value)

    @property
    @pulumi.getter
    def pivotal(self) -> Optional[pulumi.Input['XlSpecPivotalArgs']]:
        return pulumi.get(self, "pivotal")

    @pivotal.setter
    def pivotal(self, value: Optional[pulumi.Input['XlSpecPivotalArgs']]):
        pulumi.set(self, "pivotal", value)

    @property
    @pulumi.getter(name="plan-orchestrator")
    def plan_orchestrator(self) -> Optional[pulumi.Input['XlSpecPlan-OrchestratorArgs']]:
        return pulumi.get(self, "plan_orchestrator")

    @plan_orchestrator.setter
    def plan_orchestrator(self, value: Optional[pulumi.Input['XlSpecPlan-OrchestratorArgs']]):
        pulumi.set(self, "plan_orchestrator", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input['XlSpecPlatformArgs']]:
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input['XlSpecPlatformArgs']]):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input['XlSpecPrometheusArgs']]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input['XlSpecPrometheusArgs']]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter(name="prometheus-mysql-exporter")
    def prometheus_mysql_exporter(self) -> Optional[pulumi.Input['XlSpecPrometheus-Mysql-ExporterArgs']]:
        return pulumi.get(self, "prometheus_mysql_exporter")

    @prometheus_mysql_exporter.setter
    def prometheus_mysql_exporter(self, value: Optional[pulumi.Input['XlSpecPrometheus-Mysql-ExporterArgs']]):
        pulumi.set(self, "prometheus_mysql_exporter", value)

    @property
    @pulumi.getter
    def prometurbo(self) -> Optional[pulumi.Input['XlSpecPrometurboArgs']]:
        return pulumi.get(self, "prometurbo")

    @prometurbo.setter
    def prometurbo(self, value: Optional[pulumi.Input['XlSpecPrometurboArgs']]):
        pulumi.set(self, "prometurbo", value)

    @property
    @pulumi.getter
    def promtail(self) -> Optional[pulumi.Input['XlSpecPromtailArgs']]:
        return pulumi.get(self, "promtail")

    @promtail.setter
    def promtail(self, value: Optional[pulumi.Input['XlSpecPromtailArgs']]):
        pulumi.set(self, "promtail", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['XlSpecPropertiesArgs']]:
        """
        Custom property overrides
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['XlSpecPropertiesArgs']]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def pure(self) -> Optional[pulumi.Input['XlSpecPureArgs']]:
        return pulumi.get(self, "pure")

    @pure.setter
    def pure(self, value: Optional[pulumi.Input['XlSpecPureArgs']]):
        pulumi.set(self, "pure", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input['XlSpecRepositoryArgs']]:
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input['XlSpecRepositoryArgs']]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def rhv(self) -> Optional[pulumi.Input['XlSpecRhvArgs']]:
        return pulumi.get(self, "rhv")

    @rhv.setter
    def rhv(self, value: Optional[pulumi.Input['XlSpecRhvArgs']]):
        pulumi.set(self, "rhv", value)

    @property
    @pulumi.getter
    def rsyslog(self) -> Optional[pulumi.Input['XlSpecRsyslogArgs']]:
        return pulumi.get(self, "rsyslog")

    @rsyslog.setter
    def rsyslog(self, value: Optional[pulumi.Input['XlSpecRsyslogArgs']]):
        pulumi.set(self, "rsyslog", value)

    @property
    @pulumi.getter
    def scaleio(self) -> Optional[pulumi.Input['XlSpecScaleioArgs']]:
        return pulumi.get(self, "scaleio")

    @scaleio.setter
    def scaleio(self, value: Optional[pulumi.Input['XlSpecScaleioArgs']]):
        pulumi.set(self, "scaleio", value)

    @property
    @pulumi.getter
    def snmp(self) -> Optional[pulumi.Input['XlSpecSnmpArgs']]:
        return pulumi.get(self, "snmp")

    @snmp.setter
    def snmp(self, value: Optional[pulumi.Input['XlSpecSnmpArgs']]):
        pulumi.set(self, "snmp", value)

    @property
    @pulumi.getter
    def terraform(self) -> Optional[pulumi.Input['XlSpecTerraformArgs']]:
        return pulumi.get(self, "terraform")

    @terraform.setter
    def terraform(self, value: Optional[pulumi.Input['XlSpecTerraformArgs']]):
        pulumi.set(self, "terraform", value)

    @property
    @pulumi.getter
    def tetration(self) -> Optional[pulumi.Input['XlSpecTetrationArgs']]:
        return pulumi.get(self, "tetration")

    @tetration.setter
    def tetration(self, value: Optional[pulumi.Input['XlSpecTetrationArgs']]):
        pulumi.set(self, "tetration", value)

    @property
    @pulumi.getter
    def timescaledb(self) -> Optional[pulumi.Input['XlSpecTimescaledbArgs']]:
        return pulumi.get(self, "timescaledb")

    @timescaledb.setter
    def timescaledb(self, value: Optional[pulumi.Input['XlSpecTimescaledbArgs']]):
        pulumi.set(self, "timescaledb", value)

    @property
    @pulumi.getter(name="topology-processor")
    def topology_processor(self) -> Optional[pulumi.Input['XlSpecTopology-ProcessorArgs']]:
        return pulumi.get(self, "topology_processor")

    @topology_processor.setter
    def topology_processor(self, value: Optional[pulumi.Input['XlSpecTopology-ProcessorArgs']]):
        pulumi.set(self, "topology_processor", value)

    @property
    @pulumi.getter
    def ucs(self) -> Optional[pulumi.Input['XlSpecUcsArgs']]:
        return pulumi.get(self, "ucs")

    @ucs.setter
    def ucs(self, value: Optional[pulumi.Input['XlSpecUcsArgs']]):
        pulumi.set(self, "ucs", value)

    @property
    @pulumi.getter
    def ucsdirector(self) -> Optional[pulumi.Input['XlSpecUcsdirectorArgs']]:
        return pulumi.get(self, "ucsdirector")

    @ucsdirector.setter
    def ucsdirector(self, value: Optional[pulumi.Input['XlSpecUcsdirectorArgs']]):
        pulumi.set(self, "ucsdirector", value)

    @property
    @pulumi.getter
    def ui(self) -> Optional[pulumi.Input['XlSpecUiArgs']]:
        return pulumi.get(self, "ui")

    @ui.setter
    def ui(self, value: Optional[pulumi.Input['XlSpecUiArgs']]):
        pulumi.set(self, "ui", value)

    @property
    @pulumi.getter
    def vcd(self) -> Optional[pulumi.Input['XlSpecVcdArgs']]:
        return pulumi.get(self, "vcd")

    @vcd.setter
    def vcd(self, value: Optional[pulumi.Input['XlSpecVcdArgs']]):
        pulumi.set(self, "vcd", value)

    @property
    @pulumi.getter
    def vcenter(self) -> Optional[pulumi.Input['XlSpecVcenterArgs']]:
        return pulumi.get(self, "vcenter")

    @vcenter.setter
    def vcenter(self, value: Optional[pulumi.Input['XlSpecVcenterArgs']]):
        pulumi.set(self, "vcenter", value)

    @property
    @pulumi.getter
    def vmax(self) -> Optional[pulumi.Input['XlSpecVmaxArgs']]:
        return pulumi.get(self, "vmax")

    @vmax.setter
    def vmax(self, value: Optional[pulumi.Input['XlSpecVmaxArgs']]):
        pulumi.set(self, "vmax", value)

    @property
    @pulumi.getter
    def vmm(self) -> Optional[pulumi.Input['XlSpecVmmArgs']]:
        return pulumi.get(self, "vmm")

    @vmm.setter
    def vmm(self, value: Optional[pulumi.Input['XlSpecVmmArgs']]):
        pulumi.set(self, "vmm", value)

    @property
    @pulumi.getter
    def vplex(self) -> Optional[pulumi.Input['XlSpecVplexArgs']]:
        return pulumi.get(self, "vplex")

    @vplex.setter
    def vplex(self, value: Optional[pulumi.Input['XlSpecVplexArgs']]):
        pulumi.set(self, "vplex", value)

    @property
    @pulumi.getter
    def wmi(self) -> Optional[pulumi.Input['XlSpecWmiArgs']]:
        return pulumi.get(self, "wmi")

    @wmi.setter
    def wmi(self, value: Optional[pulumi.Input['XlSpecWmiArgs']]):
        pulumi.set(self, "wmi", value)

    @property
    @pulumi.getter
    def xtremio(self) -> Optional[pulumi.Input['XlSpecXtremioArgs']]:
        return pulumi.get(self, "xtremio")

    @xtremio.setter
    def xtremio(self, value: Optional[pulumi.Input['XlSpecXtremioArgs']]):
        pulumi.set(self, "xtremio", value)

    @property
    @pulumi.getter
    def zookeeper(self) -> Optional[pulumi.Input['XlSpecZookeeperArgs']]:
        return pulumi.get(self, "zookeeper")

    @zookeeper.setter
    def zookeeper(self, value: Optional[pulumi.Input['XlSpecZookeeperArgs']]):
        pulumi.set(self, "zookeeper", value)


@pulumi.input_type
class XlSpecAcimsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Cisco APIC mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Cisco APIC mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecAction-OrchestratorArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecAction-OrchestratorImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecAction-OrchestratorResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecAction-OrchestratorImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecAction-OrchestratorResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecAction-OrchestratorImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecAction-OrchestratorImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecAction-OrchestratorResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecAction-OrchestratorResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecAction-OrchestratorImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecAction-OrchestratorResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecAction-OrchestratorResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecAction-OrchestratorResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecAction-OrchestratorResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecAction-OrchestratorResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecAction-OrchestratorResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecActionscriptArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable actionscript mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable actionscript mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecAixArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable AIX mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable AIX mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecApiArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecApiImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecApiResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecApiImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecApiResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecApiImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecApiImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecApiResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecApiResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecApiImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecApiResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecApiResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecApiResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecApiResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecApiResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecApiResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecApicArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Cisco APIC mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Cisco APIC mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecAppdynamicsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable AppDynamics mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable AppDynamics mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecAppinsightsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Azure App Insights mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Azure App Insights mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecArangodbArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 image: Optional[pulumi.Input['XlSpecArangodbImageArgs']] = None,
                 persistence: Optional[pulumi.Input['XlSpecArangodbPersistenceArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input['XlSpecArangodbImageArgs'] image: component specific image options
        :param pulumi.Input['XlSpecArangodbPersistenceArgs'] persistence: arangodb persistence options
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecArangodbImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecArangodbImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input['XlSpecArangodbPersistenceArgs']]:
        """
        arangodb persistence options
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input['XlSpecArangodbPersistenceArgs']]):
        pulumi.set(self, "persistence", value)


@pulumi.input_type
class XlSpecArangodbImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecArangodbPersistenceArgs:
    def __init__(__self__, *,
                 apps: Optional[pulumi.Input[str]] = None,
                 arangodb: Optional[pulumi.Input[str]] = None,
                 dump: Optional[pulumi.Input[str]] = None):
        """
        arangodb persistence options
        :param pulumi.Input[str] apps: arangodb apps persistent volume size
        :param pulumi.Input[str] arangodb: arangodb persistent volume size
        :param pulumi.Input[str] dump: arangodb dump persistent volume size
        """
        if apps is not None:
            pulumi.set(__self__, "apps", apps)
        if arangodb is not None:
            pulumi.set(__self__, "arangodb", arangodb)
        if dump is not None:
            pulumi.set(__self__, "dump", dump)

    @property
    @pulumi.getter
    def apps(self) -> Optional[pulumi.Input[str]]:
        """
        arangodb apps persistent volume size
        """
        return pulumi.get(self, "apps")

    @apps.setter
    def apps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apps", value)

    @property
    @pulumi.getter
    def arangodb(self) -> Optional[pulumi.Input[str]]:
        """
        arangodb persistent volume size
        """
        return pulumi.get(self, "arangodb")

    @arangodb.setter
    def arangodb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arangodb", value)

    @property
    @pulumi.getter
    def dump(self) -> Optional[pulumi.Input[str]]:
        """
        arangodb dump persistent volume size
        """
        return pulumi.get(self, "dump")

    @dump.setter
    def dump(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dump", value)


@pulumi.input_type
class XlSpecAuthArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecAuthImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecAuthResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecAuthImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecAuthResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecAuthImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecAuthImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecAuthResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecAuthResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecAuthImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecAuthResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecAuthResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecAuthResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecAuthResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecAuthResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecAuthResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecAwsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable AWS mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable AWS mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecAwslambdaArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable AWS Lambda mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable AWS Lambda mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecAzureArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Azure mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Azure mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecBaremetalArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable baremetal mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable baremetal mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecChronografArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable chronograf
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable chronograf
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecCloudfoundryArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Cloud Foundry mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Cloud Foundry mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecClustermgrArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecClustermgrImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecClustermgrResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecClustermgrImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecClustermgrResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecClustermgrImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecClustermgrImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecClustermgrResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecClustermgrResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecClustermgrImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecClustermgrResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecClustermgrResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecClustermgrResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecClustermgrResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecClustermgrResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecClustermgrResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecCompellentArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Compellent mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Compellent mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecConsulArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 image: Optional[pulumi.Input['XlSpecConsulImageArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input['XlSpecConsulImageArgs'] image: component specific image options
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecConsulImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecConsulImageArgs']]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class XlSpecConsulImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecControlArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable platform licensed components
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable platform licensed components
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecCostArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecCostImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecCostResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecCostImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecCostResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecCostImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecCostImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecCostResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecCostResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecCostImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecCostResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecCostResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecCostResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecCostResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecCostResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecCostResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecDatacloudArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecDatacloudImageArgs']] = None,
                 sevone: Optional[pulumi.Input['XlSpecDatacloudSevoneArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] enabled: Enable datacloud collector
        :param pulumi.Input['XlSpecDatacloudImageArgs'] image: component specific image options
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if sevone is not None:
            pulumi.set(__self__, "sevone", sevone)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable datacloud collector
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecDatacloudImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecDatacloudImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def sevone(self) -> Optional[pulumi.Input['XlSpecDatacloudSevoneArgs']]:
        return pulumi.get(self, "sevone")

    @sevone.setter
    def sevone(self, value: Optional[pulumi.Input['XlSpecDatacloudSevoneArgs']]):
        pulumi.set(self, "sevone", value)


@pulumi.input_type
class XlSpecDatacloudImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecDatacloudSevoneArgs:
    def __init__(__self__, *,
                 transport: Optional[pulumi.Input['XlSpecDatacloudSevoneTransportArgs']] = None):
        """
        :param pulumi.Input['XlSpecDatacloudSevoneTransportArgs'] transport: Sevone transport properties
        """
        if transport is not None:
            pulumi.set(__self__, "transport", transport)

    @property
    @pulumi.getter
    def transport(self) -> Optional[pulumi.Input['XlSpecDatacloudSevoneTransportArgs']]:
        """
        Sevone transport properties
        """
        return pulumi.get(self, "transport")

    @transport.setter
    def transport(self, value: Optional[pulumi.Input['XlSpecDatacloudSevoneTransportArgs']]):
        pulumi.set(self, "transport", value)


@pulumi.input_type
class XlSpecDatacloudSevoneTransportArgs:
    def __init__(__self__, *,
                 settings: Optional[pulumi.Input['XlSpecDatacloudSevoneTransportSettingsArgs']] = None):
        """
        Sevone transport properties
        :param pulumi.Input['XlSpecDatacloudSevoneTransportSettingsArgs'] settings: Sevone transport settings properties
        """
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['XlSpecDatacloudSevoneTransportSettingsArgs']]:
        """
        Sevone transport settings properties
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['XlSpecDatacloudSevoneTransportSettingsArgs']]):
        pulumi.set(self, "settings", value)


@pulumi.input_type
class XlSpecDatacloudSevoneTransportSettingsArgs:
    def __init__(__self__, *,
                 d_e__projec_t__id: Optional[pulumi.Input[str]] = None):
        """
        Sevone transport settings properties
        :param pulumi.Input[str] d_e__projec_t__id: Sevone datacloud project id
        """
        if d_e__projec_t__id is not None:
            pulumi.set(__self__, "d_e__projec_t__id", d_e__projec_t__id)

    @property
    @pulumi.getter(name="DE_PROJECT_ID")
    def d_e__projec_t__id(self) -> Optional[pulumi.Input[str]]:
        """
        Sevone datacloud project id
        """
        return pulumi.get(self, "d_e__projec_t__id")

    @d_e__projec_t__id.setter
    def d_e__projec_t__id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "d_e__projec_t__id", value)


@pulumi.input_type
class XlSpecDatadogArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Datadog mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Datadog mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecDbArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 image: Optional[pulumi.Input['XlSpecDbImageArgs']] = None,
                 persistence: Optional[pulumi.Input['XlSpecDbPersistenceArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input['XlSpecDbImageArgs'] image: component specific image options
        :param pulumi.Input['XlSpecDbPersistenceArgs'] persistence: MariaDB persistence options
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecDbImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecDbImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input['XlSpecDbPersistenceArgs']]:
        """
        MariaDB persistence options
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input['XlSpecDbPersistenceArgs']]):
        pulumi.set(self, "persistence", value)


@pulumi.input_type
class XlSpecDbImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecDbPersistenceArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[str]] = None):
        """
        MariaDB persistence options
        :param pulumi.Input[str] size: MariaDB persistent volume size
        """
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        MariaDB persistent volume size
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class XlSpecDynatraceArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Dynatrace mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Dynatrace mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecFluent-BitArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable fluent log collection
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable fluent log collection
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecGcpArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable GCP mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable GCP mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecGlobalArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 certmanager: Optional[pulumi.Input['XlSpecGlobalCertmanagerArgs']] = None,
                 custom_image_names: Optional[pulumi.Input[bool]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 elk: Optional[pulumi.Input[bool]] = None,
                 external_db_name: Optional[pulumi.Input[str]] = None,
                 external_db_ip: Optional[pulumi.Input[str]] = None,
                 external_ip: Optional[pulumi.Input[str]] = None,
                 image_password: Optional[pulumi.Input[str]] = None,
                 image_pull_secret: Optional[pulumi.Input[str]] = None,
                 image_username: Optional[pulumi.Input[str]] = None,
                 ingress: Optional[pulumi.Input['XlSpecGlobalIngressArgs']] = None,
                 java_base_options: Optional[pulumi.Input[str]] = None,
                 logtostdout: Optional[pulumi.Input[bool]] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 readiness_period_secs: Optional[pulumi.Input[int]] = None,
                 readiness_timeout_secs: Optional[pulumi.Input[int]] = None,
                 registry: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 security_context: Optional[pulumi.Input['XlSpecGlobalSecurityContextArgs']] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 storage_annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 storage_class_name: Optional[pulumi.Input[str]] = None,
                 storage_selector: Optional[pulumi.Input[bool]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None):
        """
        Platform configuration options
        :param pulumi.Input[Mapping[str, Any]] affinity: Global pod affinity list
        :param pulumi.Input[Mapping[str, Any]] annotations: Global pod annotations list
        :param pulumi.Input['XlSpecGlobalCertmanagerArgs'] certmanager: Certificate Manager configuration options
        :param pulumi.Input[bool] custom_image_names: Use custom image names
        :param pulumi.Input[bool] debug: Global debug
        :param pulumi.Input[bool] elk: Install ELK stack
        :param pulumi.Input[str] external_db_name: DNS name for external mysql compliant database server
        :param pulumi.Input[str] external_db_ip: IP address for external mysql compliant database server
        :param pulumi.Input[str] external_ip: Static external IP address for ingress LoadBalancer
        :param pulumi.Input[str] image_password: Global image registry password for pull secret
        :param pulumi.Input[str] image_pull_secret: Global image registry pull secret instead of credentials
        :param pulumi.Input[str] image_username: Global image registry username for pull secret
        :param pulumi.Input['XlSpecGlobalIngressArgs'] ingress: Certificate Manager configuration options
        :param pulumi.Input[str] java_base_options: Global java options override
        :param pulumi.Input[bool] logtostdout: Send logs to stdout of each microservices globally
        :param pulumi.Input[Mapping[str, Any]] node_selector: Global pod nodeSelector list
        :param pulumi.Input[str] pull_policy: Global image pull policy
        :param pulumi.Input[int] readiness_period_secs: Global pod readiness period in seconds
        :param pulumi.Input[int] readiness_timeout_secs: Global pod readiness timeout in seconds
        :param pulumi.Input[str] registry: Global image registry name for pull secret
        :param pulumi.Input[str] repository: Global container registry and repository name
        :param pulumi.Input['XlSpecGlobalSecurityContextArgs'] security_context: Security Context for persistent volumes
        :param pulumi.Input[str] service_account_name: Global serviceAccountName
        :param pulumi.Input[Mapping[str, Any]] storage_annotations: Global pvc annotations list
        :param pulumi.Input[str] storage_class_name: StorageClassName to be used for all persistent volume claims
        :param pulumi.Input[bool] storage_selector: Use StorageSelector for statically provisioned persistent volume
        :param pulumi.Input[str] tag: Global container tag
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] tolerations: Global pod tolerations array
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if certmanager is not None:
            pulumi.set(__self__, "certmanager", certmanager)
        if custom_image_names is not None:
            pulumi.set(__self__, "custom_image_names", custom_image_names)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if elk is not None:
            pulumi.set(__self__, "elk", elk)
        if external_db_name is not None:
            pulumi.set(__self__, "external_db_name", external_db_name)
        if external_db_ip is not None:
            pulumi.set(__self__, "external_db_ip", external_db_ip)
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)
        if image_password is not None:
            pulumi.set(__self__, "image_password", image_password)
        if image_pull_secret is not None:
            pulumi.set(__self__, "image_pull_secret", image_pull_secret)
        if image_username is not None:
            pulumi.set(__self__, "image_username", image_username)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if java_base_options is not None:
            pulumi.set(__self__, "java_base_options", java_base_options)
        if logtostdout is not None:
            pulumi.set(__self__, "logtostdout", logtostdout)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if readiness_period_secs is not None:
            pulumi.set(__self__, "readiness_period_secs", readiness_period_secs)
        if readiness_timeout_secs is not None:
            pulumi.set(__self__, "readiness_timeout_secs", readiness_timeout_secs)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if storage_annotations is not None:
            pulumi.set(__self__, "storage_annotations", storage_annotations)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if storage_selector is not None:
            pulumi.set(__self__, "storage_selector", storage_selector)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Global pod affinity list
        """
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Global pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def certmanager(self) -> Optional[pulumi.Input['XlSpecGlobalCertmanagerArgs']]:
        """
        Certificate Manager configuration options
        """
        return pulumi.get(self, "certmanager")

    @certmanager.setter
    def certmanager(self, value: Optional[pulumi.Input['XlSpecGlobalCertmanagerArgs']]):
        pulumi.set(self, "certmanager", value)

    @property
    @pulumi.getter(name="customImageNames")
    def custom_image_names(self) -> Optional[pulumi.Input[bool]]:
        """
        Use custom image names
        """
        return pulumi.get(self, "custom_image_names")

    @custom_image_names.setter
    def custom_image_names(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "custom_image_names", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        Global debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def elk(self) -> Optional[pulumi.Input[bool]]:
        """
        Install ELK stack
        """
        return pulumi.get(self, "elk")

    @elk.setter
    def elk(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elk", value)

    @property
    @pulumi.getter(name="externalDBName")
    def external_db_name(self) -> Optional[pulumi.Input[str]]:
        """
        DNS name for external mysql compliant database server
        """
        return pulumi.get(self, "external_db_name")

    @external_db_name.setter
    def external_db_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_db_name", value)

    @property
    @pulumi.getter(name="externalDbIP")
    def external_db_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address for external mysql compliant database server
        """
        return pulumi.get(self, "external_db_ip")

    @external_db_ip.setter
    def external_db_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_db_ip", value)

    @property
    @pulumi.getter(name="externalIP")
    def external_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Static external IP address for ingress LoadBalancer
        """
        return pulumi.get(self, "external_ip")

    @external_ip.setter
    def external_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_ip", value)

    @property
    @pulumi.getter(name="imagePassword")
    def image_password(self) -> Optional[pulumi.Input[str]]:
        """
        Global image registry password for pull secret
        """
        return pulumi.get(self, "image_password")

    @image_password.setter
    def image_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_password", value)

    @property
    @pulumi.getter(name="imagePullSecret")
    def image_pull_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Global image registry pull secret instead of credentials
        """
        return pulumi.get(self, "image_pull_secret")

    @image_pull_secret.setter
    def image_pull_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_secret", value)

    @property
    @pulumi.getter(name="imageUsername")
    def image_username(self) -> Optional[pulumi.Input[str]]:
        """
        Global image registry username for pull secret
        """
        return pulumi.get(self, "image_username")

    @image_username.setter
    def image_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_username", value)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['XlSpecGlobalIngressArgs']]:
        """
        Certificate Manager configuration options
        """
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['XlSpecGlobalIngressArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter(name="javaBaseOptions")
    def java_base_options(self) -> Optional[pulumi.Input[str]]:
        """
        Global java options override
        """
        return pulumi.get(self, "java_base_options")

    @java_base_options.setter
    def java_base_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_base_options", value)

    @property
    @pulumi.getter
    def logtostdout(self) -> Optional[pulumi.Input[bool]]:
        """
        Send logs to stdout of each microservices globally
        """
        return pulumi.get(self, "logtostdout")

    @logtostdout.setter
    def logtostdout(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logtostdout", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Global pod nodeSelector list
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Global image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter(name="readinessPeriodSecs")
    def readiness_period_secs(self) -> Optional[pulumi.Input[int]]:
        """
        Global pod readiness period in seconds
        """
        return pulumi.get(self, "readiness_period_secs")

    @readiness_period_secs.setter
    def readiness_period_secs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "readiness_period_secs", value)

    @property
    @pulumi.getter(name="readinessTimeoutSecs")
    def readiness_timeout_secs(self) -> Optional[pulumi.Input[int]]:
        """
        Global pod readiness timeout in seconds
        """
        return pulumi.get(self, "readiness_timeout_secs")

    @readiness_timeout_secs.setter
    def readiness_timeout_secs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "readiness_timeout_secs", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        """
        Global image registry name for pull secret
        """
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        Global container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['XlSpecGlobalSecurityContextArgs']]:
        """
        Security Context for persistent volumes
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['XlSpecGlobalSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        Global serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter(name="storageAnnotations")
    def storage_annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Global pvc annotations list
        """
        return pulumi.get(self, "storage_annotations")

    @storage_annotations.setter
    def storage_annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "storage_annotations", value)

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        StorageClassName to be used for all persistent volume claims
        """
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class_name", value)

    @property
    @pulumi.getter(name="storageSelector")
    def storage_selector(self) -> Optional[pulumi.Input[bool]]:
        """
        Use StorageSelector for statically provisioned persistent volume
        """
        return pulumi.get(self, "storage_selector")

    @storage_selector.setter
    def storage_selector(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "storage_selector", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Global container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        """
        Global pod tolerations array
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class XlSpecGlobalCertmanagerArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 issuer: Optional[pulumi.Input[str]] = None):
        """
        Certificate Manager configuration options
        :param pulumi.Input[bool] enabled: If set to true, use cert-manager
        :param pulumi.Input[str] issuer: The name of the certification issuer
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, use cert-manager
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the certification issuer
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)


@pulumi.input_type
class XlSpecGlobalIngressArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 secrets: Optional[pulumi.Input[Sequence[pulumi.Input['XlSpecGlobalIngressSecretsArgs']]]] = None):
        """
        Certificate Manager configuration options
        :param pulumi.Input[Mapping[str, Any]] annotations: Ingress service annotations list
        :param pulumi.Input[str] domain: Optional wildcard domain to accept ingress requests for
        :param pulumi.Input[Sequence[pulumi.Input['XlSpecGlobalIngressSecretsArgs']]] secrets: Array of certificates to be created for the ingress
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Ingress service annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Optional wildcard domain to accept ingress requests for
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['XlSpecGlobalIngressSecretsArgs']]]]:
        """
        Array of certificates to be created for the ingress
        """
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['XlSpecGlobalIngressSecretsArgs']]]]):
        pulumi.set(self, "secrets", value)


@pulumi.input_type
class XlSpecGlobalIngressSecretsArgs:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] certificate: The certificate in pem format
        :param pulumi.Input[str] key: The cert key in pem format
        :param pulumi.Input[str] name: The name of the certificate secret
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The certificate in pem format
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The cert key in pem format
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the certificate secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class XlSpecGlobalSecurityContextArgs:
    def __init__(__self__, *,
                 fs_group: Optional[pulumi.Input[int]] = None):
        """
        Security Context for persistent volumes
        :param pulumi.Input[int] fs_group: Group ID used for persisent volumes globally.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[int]]:
        """
        Group ID used for persisent volumes globally.
        """
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fs_group", value)


@pulumi.input_type
class XlSpecGrafanaArgs:
    def __init__(__self__, *,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] admin_password: Configure grafana admin password
        :param pulumi.Input[bool] enabled: Enable grafana
        """
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        """
        Configure grafana admin password
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable grafana
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecGroupArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecGroupImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecGroupResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecGroupImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecGroupResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecGroupImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecGroupImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecGroupResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecGroupResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecGroupImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecGroupResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecGroupResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecGroupResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecGroupResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecGroupResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecGroupResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecHdsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Hitachi Data Systems mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Hitachi Data Systems mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecHistoryArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecHistoryImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecHistoryResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecHistoryImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecHistoryResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecHistoryImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecHistoryImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecHistoryResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecHistoryResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecHistoryImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecHistoryResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecHistoryResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecHistoryResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecHistoryResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecHistoryResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecHistoryResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecHorizonArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable VMware Horizon mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable VMware Horizon mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecHpe3parArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable HPE 3PAR mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable HPE 3PAR mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecHyperflexArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Hyperflex mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Hyperflex mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecHypervArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Microsoft HyperV mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Microsoft HyperV mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecInfluxdbArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 image: Optional[pulumi.Input['XlSpecInfluxdbImageArgs']] = None,
                 persistence: Optional[pulumi.Input['XlSpecInfluxdbPersistenceArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input['XlSpecInfluxdbImageArgs'] image: component specific image options
        :param pulumi.Input['XlSpecInfluxdbPersistenceArgs'] persistence: influxdb persistence options
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecInfluxdbImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecInfluxdbImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input['XlSpecInfluxdbPersistenceArgs']]:
        """
        influxdb persistence options
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input['XlSpecInfluxdbPersistenceArgs']]):
        pulumi.set(self, "persistence", value)


@pulumi.input_type
class XlSpecInfluxdbImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecInfluxdbPersistenceArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[str]] = None):
        """
        influxdb persistence options
        :param pulumi.Input[str] size: influxdb persistent volume size
        """
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        influxdb persistent volume size
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class XlSpecIntersightArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Cisco Intersight mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Cisco Intersight mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecIstioArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Istio mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Istio mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecIstioingressArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 routes: Optional[pulumi.Input['XlSpecIstioingressRoutesArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: Enable istio ingress
        :param pulumi.Input['XlSpecIstioingressRoutesArgs'] routes: Additional istio routes
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable istio ingress
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input['XlSpecIstioingressRoutesArgs']]:
        """
        Additional istio routes
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input['XlSpecIstioingressRoutesArgs']]):
        pulumi.set(self, "routes", value)


@pulumi.input_type
class XlSpecIstioingressRoutesArgs:
    def __init__(__self__, *,
                 match: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 route: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None):
        """
        Additional istio routes
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] match: Istio match statement
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] route: Istio route statement
        """
        if match is not None:
            pulumi.set(__self__, "match", match)
        if route is not None:
            pulumi.set(__self__, "route", route)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        """
        Istio match statement
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        """
        Istio route statement
        """
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "route", value)


@pulumi.input_type
class XlSpecJaegerArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable jaeger tracing
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable jaeger tracing
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecKafkaArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 image: Optional[pulumi.Input['XlSpecKafkaImageArgs']] = None,
                 java: Optional[pulumi.Input['XlSpecKafkaJavaArgs']] = None,
                 persistence: Optional[pulumi.Input['XlSpecKafkaPersistenceArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input['XlSpecKafkaImageArgs'] image: component specific image options
        :param pulumi.Input['XlSpecKafkaJavaArgs'] java: kafka java options
        :param pulumi.Input['XlSpecKafkaPersistenceArgs'] persistence: kafka persistence options
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java is not None:
            pulumi.set(__self__, "java", java)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecKafkaImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecKafkaImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def java(self) -> Optional[pulumi.Input['XlSpecKafkaJavaArgs']]:
        """
        kafka java options
        """
        return pulumi.get(self, "java")

    @java.setter
    def java(self, value: Optional[pulumi.Input['XlSpecKafkaJavaArgs']]):
        pulumi.set(self, "java", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input['XlSpecKafkaPersistenceArgs']]:
        """
        kafka persistence options
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input['XlSpecKafkaPersistenceArgs']]):
        pulumi.set(self, "persistence", value)


@pulumi.input_type
class XlSpecKafkaImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecKafkaJavaArgs:
    def __init__(__self__, *,
                 options: Optional[pulumi.Input[str]] = None):
        """
        kafka java options
        :param pulumi.Input[str] options: kafka java options value
        """
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        kafka java options value
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)


@pulumi.input_type
class XlSpecKafkaPersistenceArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[str]] = None):
        """
        kafka persistence options
        :param pulumi.Input[str] size: kafka persistent volume size
        """
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        kafka persistent volume size
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class XlSpecKubeturboArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable kubeturbo for the local k8s cluster
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable kubeturbo for the local k8s cluster
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecLokiArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable grafana loki
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable grafana loki
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecMarketArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMarketImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMarketResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMarketImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMarketResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMarketImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMarketImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMarketResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMarketResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMarketImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMarketResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMarketResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMarketResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMarketResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMarketResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMarketResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-AcimsArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-AcimsImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-AcimsResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-AcimsImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-AcimsResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-AcimsImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-AcimsImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-AcimsResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-AcimsResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-AcimsImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-AcimsResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-AcimsResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-AcimsResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-AcimsResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-AcimsResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-AcimsResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-ActionscriptArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-ActionscriptImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-ActionscriptResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-ActionscriptImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-ActionscriptResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-ActionscriptImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-ActionscriptImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-ActionscriptResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-ActionscriptResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-ActionscriptImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-ActionscriptResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-ActionscriptResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-ActionscriptResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-ActionscriptResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-ActionscriptResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-ActionscriptResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-AixArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-AixImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-AixResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-AixImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-AixResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-AixImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-AixImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-AixResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-AixResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-AixImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-AixResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-AixResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-AixResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-AixResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-AixResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-AixResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-ApicArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-ApicImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-ApicResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-ApicImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-ApicResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-ApicImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-ApicImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-ApicResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-ApicResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-ApicImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-ApicResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-ApicResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-ApicResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-ApicResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-ApicResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-ApicResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-AppdynamicsArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-AppdynamicsImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-AppdynamicsResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-AppdynamicsImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-AppdynamicsResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-AppdynamicsImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-AppdynamicsImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-AppdynamicsResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-AppdynamicsResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-AppdynamicsImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-AppdynamicsResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-AppdynamicsResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-AppdynamicsResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-AppdynamicsResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-AppdynamicsResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-AppdynamicsResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-AppinsightsArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-AppinsightsImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-AppinsightsResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-AppinsightsImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-AppinsightsResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-AppinsightsImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-AppinsightsImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-AppinsightsResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-AppinsightsResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-AppinsightsImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-AppinsightsResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-AppinsightsResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-AppinsightsResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-AppinsightsResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-AppinsightsResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-AppinsightsResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-AwsArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-AwsImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-AwsResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-AwsImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-AwsResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-AwsImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-AwsImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-AwsResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-AwsResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-AwsImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-AwsResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-AwsResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-AwsResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-AwsResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-AwsResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-AwsResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-AwsbillingArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-AwsbillingImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-AwsbillingResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-AwsbillingImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-AwsbillingResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-AwsbillingImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-AwsbillingImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-AwsbillingResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-AwsbillingResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-AwsbillingImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-AwsbillingResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-AwsbillingResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-AwsbillingResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-AwsbillingResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-AwsbillingResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-AwsbillingResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-AwscostArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-AwscostImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-AwscostResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-AwscostImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-AwscostResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-AwscostImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-AwscostImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-AwscostResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-AwscostResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-AwscostImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-AwscostResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-AwscostResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-AwscostResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-AwscostResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-AwscostResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-AwscostResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-AwslambdaArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-AwslambdaImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-AwslambdaResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-AwslambdaImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-AwslambdaResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-AwslambdaImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-AwslambdaImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-AwslambdaResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-AwslambdaResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-AwslambdaImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-AwslambdaResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-AwslambdaResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-AwslambdaResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-AwslambdaResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-AwslambdaResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-AwslambdaResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-AzureArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-AzureImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-AzureResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-AzureImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-AzureResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-AzureImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-AzureImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-AzureResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-AzureResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-AzureImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-AzureResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-AzureResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-AzureResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-AzureResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-AzureResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-AzureResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-AzurecostArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-AzurecostImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-AzurecostResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-AzurecostImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-AzurecostResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-AzurecostImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-AzurecostImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-AzurecostResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-AzurecostResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-AzurecostImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-AzurecostResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-AzurecostResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-AzurecostResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-AzurecostResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-AzurecostResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-AzurecostResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-AzureeaArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-AzureeaImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-AzureeaResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-AzureeaImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-AzureeaResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-AzureeaImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-AzureeaImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-AzureeaResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-AzureeaResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-AzureeaImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-AzureeaResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-AzureeaResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-AzureeaResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-AzureeaResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-AzureeaResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-AzureeaResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-AzurespArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-AzurespImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-AzurespResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-AzurespImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-AzurespResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-AzurespImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-AzurespImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-AzurespResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-AzurespResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-AzurespImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-AzurespResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-AzurespResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-AzurespResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-AzurespResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-AzurespResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-AzurespResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-AzurevolumesArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-AzurevolumesImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-AzurevolumesResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-AzurevolumesImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-AzurevolumesResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-AzurevolumesImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-AzurevolumesImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-AzurevolumesResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-AzurevolumesResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-AzurevolumesImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-AzurevolumesResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-AzurevolumesResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-AzurevolumesResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-AzurevolumesResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-AzurevolumesResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-AzurevolumesResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-BaremetalArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-BaremetalImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-BaremetalResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-BaremetalImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-BaremetalResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-BaremetalImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-BaremetalImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-BaremetalResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-BaremetalResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-BaremetalImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-BaremetalResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-BaremetalResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-BaremetalResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-BaremetalResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-BaremetalResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-BaremetalResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-CloudfoundryArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-CloudfoundryImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-CloudfoundryResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-CloudfoundryImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-CloudfoundryResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-CloudfoundryImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-CloudfoundryImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-CloudfoundryResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-CloudfoundryResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-CloudfoundryImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-CloudfoundryResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-CloudfoundryResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-CloudfoundryResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-CloudfoundryResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-CloudfoundryResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-CloudfoundryResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-CompellentArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-CompellentImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-CompellentResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-CompellentImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-CompellentResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-CompellentImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-CompellentImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-CompellentResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-CompellentResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-CompellentImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-CompellentResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-CompellentResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-CompellentResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-CompellentResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-CompellentResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-CompellentResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-CustomdataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-CustomdataImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-CustomdataResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-CustomdataImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-CustomdataResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-CustomdataImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-CustomdataImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-CustomdataResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-CustomdataResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-CustomdataImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-CustomdataResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-CustomdataResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-CustomdataResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-CustomdataResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-CustomdataResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-CustomdataResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-DatadogArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-DatadogImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-DatadogResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-DatadogImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-DatadogResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-DatadogImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-DatadogImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-DatadogResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-DatadogResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-DatadogImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-DatadogResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-DatadogResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-DatadogResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-DatadogResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-DatadogResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-DatadogResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-DynatraceArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-DynatraceImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-DynatraceResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-DynatraceImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-DynatraceResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-DynatraceImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-DynatraceImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-DynatraceResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-DynatraceResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-DynatraceImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-DynatraceResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-DynatraceResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-DynatraceResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-DynatraceResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-DynatraceResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-DynatraceResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-GcpArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-GcpImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-GcpResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-GcpImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-GcpResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-GcpImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-GcpImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-GcpResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-GcpResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-GcpImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-GcpResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-GcpResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-GcpResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-GcpResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-GcpResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-GcpResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-GcpcostArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-GcpcostImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-GcpcostResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-GcpcostImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-GcpcostResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-GcpcostImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-GcpcostImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-GcpcostResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-GcpcostResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-GcpcostImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-GcpcostResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-GcpcostResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-GcpcostResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-GcpcostResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-GcpcostResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-GcpcostResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-HdsArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-HdsImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-HdsResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-HdsImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-HdsResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-HdsImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-HdsImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-HdsResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-HdsResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-HdsImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-HdsResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-HdsResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-HdsResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-HdsResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-HdsResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-HdsResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-HorizonArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-HorizonImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-HorizonResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-HorizonImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-HorizonResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-HorizonImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-HorizonImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-HorizonResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-HorizonResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-HorizonImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-HorizonResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-HorizonResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-HorizonResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-HorizonResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-HorizonResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-HorizonResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-Hpe3parArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-Hpe3parImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-Hpe3parResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-Hpe3parImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-Hpe3parResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-Hpe3parImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-Hpe3parImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-Hpe3parResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-Hpe3parResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-Hpe3parImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-Hpe3parResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-Hpe3parResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-Hpe3parResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-Hpe3parResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-Hpe3parResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-Hpe3parResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-HyperflexArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-HyperflexImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-HyperflexResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-HyperflexImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-HyperflexResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-HyperflexImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-HyperflexImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-HyperflexResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-HyperflexResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-HyperflexImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-HyperflexResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-HyperflexResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-HyperflexResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-HyperflexResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-HyperflexResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-HyperflexResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-HypervArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-HypervImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-HypervResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-HypervImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-HypervResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-HypervImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-HypervImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-HypervResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-HypervResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-HypervImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-HypervResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-HypervResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-HypervResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-HypervResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-HypervResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-HypervResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-IntersightArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-IntersightImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-IntersightResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-IntersightImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-IntersightResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-IntersightImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-IntersightImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-IntersightResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-IntersightResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-IntersightImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-IntersightResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-IntersightResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-IntersightResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-IntersightResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-IntersightResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-IntersightResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-IntersighthyperflexArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-IntersighthyperflexImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-IntersighthyperflexResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-IntersighthyperflexImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-IntersighthyperflexResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-IntersighthyperflexImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-IntersighthyperflexImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-IntersighthyperflexResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-IntersighthyperflexResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-IntersighthyperflexImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-IntersighthyperflexResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-IntersighthyperflexResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-IntersighthyperflexResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-IntersighthyperflexResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-IntersighthyperflexResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-IntersighthyperflexResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-IntersightucsArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-IntersightucsImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-IntersightucsResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-IntersightucsImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-IntersightucsResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-IntersightucsImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-IntersightucsImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-IntersightucsResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-IntersightucsResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-IntersightucsImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-IntersightucsResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-IntersightucsResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-IntersightucsResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-IntersightucsResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-IntersightucsResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-IntersightucsResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-IstioArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-IstioImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-IstioResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-IstioImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-IstioResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-IstioImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-IstioImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-IstioResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-IstioResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-IstioImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-IstioResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-IstioResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-IstioResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-IstioResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-IstioResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-IstioResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-MssqlArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-MssqlImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-MssqlResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-MssqlImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-MssqlResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-MssqlImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-MssqlImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-MssqlResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-MssqlResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-MssqlImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-MssqlResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-MssqlResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-MssqlResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-MssqlResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-MssqlResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-MssqlResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-MysqlArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-MysqlImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-MysqlResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-MysqlImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-MysqlResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-MysqlImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-MysqlImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-MysqlResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-MysqlResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-MysqlImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-MysqlResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-MysqlResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-MysqlResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-MysqlResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-MysqlResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-MysqlResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-NetappArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-NetappImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-NetappResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-NetappImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-NetappResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-NetappImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-NetappImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-NetappResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-NetappResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-NetappImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-NetappResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-NetappResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-NetappResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-NetappResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-NetappResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-NetappResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-NetflowArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-NetflowImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-NetflowResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-NetflowImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-NetflowResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-NetflowImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-NetflowImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-NetflowResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-NetflowResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-NetflowImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-NetflowResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-NetflowResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-NetflowResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-NetflowResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-NetflowResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-NetflowResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-NewrelicArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-NewrelicImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-NewrelicResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-NewrelicImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-NewrelicResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-NewrelicImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-NewrelicImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-NewrelicResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-NewrelicResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-NewrelicImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-NewrelicResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-NewrelicResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-NewrelicResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-NewrelicResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-NewrelicResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-NewrelicResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-NutanixArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-NutanixImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-NutanixResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-NutanixImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-NutanixResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-NutanixImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-NutanixImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-NutanixResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-NutanixResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-NutanixImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-NutanixResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-NutanixResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-NutanixResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-NutanixResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-NutanixResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-NutanixResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-OneviewArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-OneviewImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-OneviewResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-OneviewImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-OneviewResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-OneviewImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-OneviewImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-OneviewResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-OneviewResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-OneviewImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-OneviewResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-OneviewResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-OneviewResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-OneviewResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-OneviewResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-OneviewResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-OpenstackArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-OpenstackImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-OpenstackResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-OpenstackImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-OpenstackResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-OpenstackImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-OpenstackImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-OpenstackResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-OpenstackResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-OpenstackImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-OpenstackResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-OpenstackResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-OpenstackResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-OpenstackResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-OpenstackResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-OpenstackResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-PivotalArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-PivotalImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-PivotalResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-PivotalImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-PivotalResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-PivotalImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-PivotalImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-PivotalResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-PivotalResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-PivotalImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-PivotalResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-PivotalResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-PivotalResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-PivotalResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-PivotalResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-PivotalResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-PureArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-PureImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-PureResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-PureImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-PureResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-PureImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-PureImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-PureResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-PureResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-PureImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-PureResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-PureResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-PureResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-PureResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-PureResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-PureResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-RhvArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-RhvImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-RhvResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-RhvImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-RhvResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-RhvImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-RhvImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-RhvResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-RhvResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-RhvImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-RhvResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-RhvResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-RhvResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-RhvResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-RhvResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-RhvResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-ScaleioArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-ScaleioImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-ScaleioResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-ScaleioImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-ScaleioResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-ScaleioImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-ScaleioImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-ScaleioResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-ScaleioResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-ScaleioImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-ScaleioResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-ScaleioResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-ScaleioResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-ScaleioResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-ScaleioResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-ScaleioResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-SnmpArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-SnmpImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-SnmpResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-SnmpImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-SnmpResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-SnmpImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-SnmpImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-SnmpResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-SnmpResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-SnmpImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-SnmpResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-SnmpResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-SnmpResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-SnmpResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-SnmpResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-SnmpResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-TerraformArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-TerraformImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-TerraformResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-TerraformImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-TerraformResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-TerraformImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-TerraformImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-TerraformResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-TerraformResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-TerraformImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-TerraformResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-TerraformResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-TerraformResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-TerraformResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-TerraformResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-TerraformResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-TetrationArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-TetrationImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-TetrationResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-TetrationImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-TetrationResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-TetrationImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-TetrationImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-TetrationResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-TetrationResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-TetrationImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-TetrationResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-TetrationResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-TetrationResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-TetrationResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-TetrationResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-TetrationResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-TomcatArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-TomcatImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-TomcatResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-TomcatImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-TomcatResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-TomcatImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-TomcatImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-TomcatResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-TomcatResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-TomcatImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-TomcatResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-TomcatResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-TomcatResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-TomcatResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-TomcatResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-TomcatResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-UcsArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-UcsImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-UcsResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-UcsImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-UcsResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-UcsImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-UcsImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-UcsResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-UcsResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-UcsImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-UcsResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-UcsResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-UcsResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-UcsResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-UcsResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-UcsResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-UcsdirectorArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-UcsdirectorImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-UcsdirectorResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-UcsdirectorImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-UcsdirectorResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-UcsdirectorImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-UcsdirectorImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-UcsdirectorResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-UcsdirectorResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-UcsdirectorImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-UcsdirectorResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-UcsdirectorResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-UcsdirectorResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-UcsdirectorResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-UcsdirectorResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-UcsdirectorResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-VcdArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-VcdImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-VcdResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-VcdImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-VcdResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-VcdImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-VcdImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-VcdResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-VcdResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-VcdImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-VcdResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-VcdResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-VcdResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-VcdResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-VcdResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-VcdResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-VcenterArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-VcenterImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-VcenterResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-VcenterImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-VcenterResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-VcenterImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-VcenterImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-VcenterResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-VcenterResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-VcenterImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-VcenterResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-VcenterResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-VcenterResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-VcenterResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-VcenterResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-VcenterResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-VcenterbrowsingArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-VcenterbrowsingImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-VcenterbrowsingResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-VcenterbrowsingImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-VcenterbrowsingResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-VcenterbrowsingImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-VcenterbrowsingImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-VcenterbrowsingResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-VcenterbrowsingResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-VcenterbrowsingImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-VcenterbrowsingResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-VcenterbrowsingResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-VcenterbrowsingResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-VcenterbrowsingResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-VcenterbrowsingResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-VcenterbrowsingResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-VmaxArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-VmaxImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-VmaxResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-VmaxImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-VmaxResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-VmaxImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-VmaxImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-VmaxResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-VmaxResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-VmaxImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-VmaxResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-VmaxResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-VmaxResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-VmaxResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-VmaxResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-VmaxResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-VmmArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-VmmImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-VmmResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-VmmImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-VmmResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-VmmImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-VmmImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-VmmResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-VmmResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-VmmImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-VmmResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-VmmResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-VmmResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-VmmResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-VmmResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-VmmResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-VplexArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-VplexImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-VplexResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-VplexImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-VplexResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-VplexImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-VplexImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-VplexResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-VplexResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-VplexImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-VplexResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-VplexResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-VplexResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-VplexResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-VplexResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-VplexResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-WmiArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-WmiImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-WmiResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-WmiImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-WmiResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-WmiImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-WmiImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-WmiResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-WmiResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-WmiImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-WmiResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-WmiResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-WmiResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-WmiResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-WmiResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-WmiResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMediation-XtremioArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecMediation-XtremioImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecMediation-XtremioResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecMediation-XtremioImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecMediation-XtremioResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecMediation-XtremioImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecMediation-XtremioImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecMediation-XtremioResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecMediation-XtremioResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecMediation-XtremioImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecMediation-XtremioResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecMediation-XtremioResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecMediation-XtremioResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecMediation-XtremioResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecMediation-XtremioResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecMediation-XtremioResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecMetronArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable experimental time series data collection.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable experimental time series data collection.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecMssqlArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Microsoft SQL Server mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Microsoft SQL Server mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecMysqlArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable MySQL Server mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable MySQL Server mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecNetappArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable NetApp mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable NetApp mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecNetflowArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable netflow mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable netflow mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecNewrelicArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable New Relic mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable New Relic mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecNginxingressArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable nginx ingress
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable nginx ingress
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecNutanixArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Nutanix mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Nutanix mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecOneviewArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable HPE OneView mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable HPE OneView mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecOpenshiftingressArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Openshift routes
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Openshift routes
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecOpenstackArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Openstack mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Openstack mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecPivotalArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Pivotal mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Pivotal mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecPlan-OrchestratorArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecPlan-OrchestratorImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecPlan-OrchestratorResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecPlan-OrchestratorImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecPlan-OrchestratorResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecPlan-OrchestratorImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecPlan-OrchestratorImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecPlan-OrchestratorResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecPlan-OrchestratorResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecPlan-OrchestratorImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecPlan-OrchestratorResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecPlan-OrchestratorResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecPlan-OrchestratorResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecPlan-OrchestratorResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecPlan-OrchestratorResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecPlan-OrchestratorResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecPlatformArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable platform components
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable platform components
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecPrometheusArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable prometheus
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable prometheus
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecPrometheus-Mysql-ExporterArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 mysql: Optional[pulumi.Input['XlSpecPrometheus-Mysql-ExporterMysqlArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: Enable prometheus mysql exporter
        :param pulumi.Input['XlSpecPrometheus-Mysql-ExporterMysqlArgs'] mysql: Enable prometheus mysql exporter
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable prometheus mysql exporter
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input['XlSpecPrometheus-Mysql-ExporterMysqlArgs']]:
        """
        Enable prometheus mysql exporter
        """
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input['XlSpecPrometheus-Mysql-ExporterMysqlArgs']]):
        pulumi.set(self, "mysql", value)


@pulumi.input_type
class XlSpecPrometheus-Mysql-ExporterMysqlArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        Enable prometheus mysql exporter
        :param pulumi.Input[str] pass_: password for the mysql exporter
        :param pulumi.Input[str] user: username for the mysql exporter
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[str]]:
        """
        password for the mysql exporter
        """
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        username for the mysql exporter
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class XlSpecPrometurboArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable prometurbo for the local prometheus server
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable prometurbo for the local prometheus server
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecPromtailArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable promtail log collection
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable promtail log collection
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecPropertiesArgs:
    def __init__(__self__, *,
                 action_orchestrator: Optional[pulumi.Input['XlSpecPropertiesAction-OrchestratorArgs']] = None,
                 api: Optional[pulumi.Input['XlSpecPropertiesApiArgs']] = None,
                 auth: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cost: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 global_: Optional[pulumi.Input['XlSpecPropertiesGlobalArgs']] = None,
                 group: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 history: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 plan_orchestrator: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 repository: Optional[pulumi.Input['XlSpecPropertiesRepositoryArgs']] = None,
                 topology_processor: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Custom property overrides
        :param pulumi.Input['XlSpecPropertiesAction-OrchestratorArgs'] action_orchestrator: action-orchestrator property overrides
        :param pulumi.Input['XlSpecPropertiesApiArgs'] api: api property overrides
        :param pulumi.Input[Mapping[str, Any]] auth: auth property overrides
        :param pulumi.Input[Mapping[str, Any]] cost: cost property overrides
        :param pulumi.Input['XlSpecPropertiesGlobalArgs'] global_: global property overrides
        :param pulumi.Input[Mapping[str, Any]] group: group property overrides
        :param pulumi.Input[Mapping[str, Any]] history: history property overrides
        :param pulumi.Input[Mapping[str, Any]] plan_orchestrator: plan-orchestrator property overrides
        :param pulumi.Input['XlSpecPropertiesRepositoryArgs'] repository: repository property overrides
        :param pulumi.Input[Mapping[str, Any]] topology_processor: topology-processor property overrides
        """
        if action_orchestrator is not None:
            pulumi.set(__self__, "action_orchestrator", action_orchestrator)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if history is not None:
            pulumi.set(__self__, "history", history)
        if plan_orchestrator is not None:
            pulumi.set(__self__, "plan_orchestrator", plan_orchestrator)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if topology_processor is not None:
            pulumi.set(__self__, "topology_processor", topology_processor)

    @property
    @pulumi.getter(name="action-orchestrator")
    def action_orchestrator(self) -> Optional[pulumi.Input['XlSpecPropertiesAction-OrchestratorArgs']]:
        """
        action-orchestrator property overrides
        """
        return pulumi.get(self, "action_orchestrator")

    @action_orchestrator.setter
    def action_orchestrator(self, value: Optional[pulumi.Input['XlSpecPropertiesAction-OrchestratorArgs']]):
        pulumi.set(self, "action_orchestrator", value)

    @property
    @pulumi.getter
    def api(self) -> Optional[pulumi.Input['XlSpecPropertiesApiArgs']]:
        """
        api property overrides
        """
        return pulumi.get(self, "api")

    @api.setter
    def api(self, value: Optional[pulumi.Input['XlSpecPropertiesApiArgs']]):
        pulumi.set(self, "api", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        auth property overrides
        """
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        cost property overrides
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input['XlSpecPropertiesGlobalArgs']]:
        """
        global property overrides
        """
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input['XlSpecPropertiesGlobalArgs']]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        group property overrides
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def history(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        history property overrides
        """
        return pulumi.get(self, "history")

    @history.setter
    def history(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "history", value)

    @property
    @pulumi.getter(name="plan-orchestrator")
    def plan_orchestrator(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        plan-orchestrator property overrides
        """
        return pulumi.get(self, "plan_orchestrator")

    @plan_orchestrator.setter
    def plan_orchestrator(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "plan_orchestrator", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input['XlSpecPropertiesRepositoryArgs']]:
        """
        repository property overrides
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input['XlSpecPropertiesRepositoryArgs']]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="topology-processor")
    def topology_processor(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        topology-processor property overrides
        """
        return pulumi.get(self, "topology_processor")

    @topology_processor.setter
    def topology_processor(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "topology_processor", value)


@pulumi.input_type
class XlSpecPropertiesAction-OrchestratorArgs:
    def __init__(__self__, *,
                 risk_propagation_enabled: Optional[pulumi.Input[bool]] = None):
        """
        action-orchestrator property overrides
        :param pulumi.Input[bool] risk_propagation_enabled: Enable risk propagation
        """
        if risk_propagation_enabled is not None:
            pulumi.set(__self__, "risk_propagation_enabled", risk_propagation_enabled)

    @property
    @pulumi.getter(name="riskPropagationEnabled")
    def risk_propagation_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable risk propagation
        """
        return pulumi.get(self, "risk_propagation_enabled")

    @risk_propagation_enabled.setter
    def risk_propagation_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "risk_propagation_enabled", value)


@pulumi.input_type
class XlSpecPropertiesApiArgs:
    def __init__(__self__, *,
                 open_id_access_token_uri: Optional[pulumi.Input[str]] = None,
                 open_id_client_authentication: Optional[pulumi.Input[str]] = None,
                 open_id_client_id: Optional[pulumi.Input[str]] = None,
                 open_id_client_secret: Optional[pulumi.Input[str]] = None,
                 open_id_clients: Optional[pulumi.Input[str]] = None,
                 open_id_enabled: Optional[pulumi.Input[bool]] = None,
                 open_id_jwk_set_uri: Optional[pulumi.Input[str]] = None,
                 open_id_user_authentication: Optional[pulumi.Input[str]] = None,
                 open_id_user_authorization_uri: Optional[pulumi.Input[str]] = None,
                 open_id_user_info_uri: Optional[pulumi.Input[str]] = None,
                 saml_enabled: Optional[pulumi.Input[bool]] = None,
                 saml_entity_id: Optional[pulumi.Input[str]] = None,
                 saml_idp_certificate: Optional[pulumi.Input[str]] = None,
                 saml_registration_id: Optional[pulumi.Input[str]] = None,
                 saml_sp_entity_id: Optional[pulumi.Input[str]] = None,
                 saml_web_sso_endpoint: Optional[pulumi.Input[str]] = None):
        """
        api property overrides
        :param pulumi.Input[str] open_id_access_token_uri: URI for the SSO provider Access Token endpoint
        :param pulumi.Input[str] open_id_client_authentication: OpenID clientAuthentication such as “basic”, “post”, “none”
        :param pulumi.Input[str] open_id_client_id: A unique string identifier for the SSO client
        :param pulumi.Input[str] open_id_client_secret: A secret string identifier for the SSO client
        :param pulumi.Input[str] open_id_clients: Array of OpenID clients such as “google”, “okta”, “ibm”
        :param pulumi.Input[bool] open_id_enabled: Enable OpenID SSO
        :param pulumi.Input[str] open_id_jwk_set_uri: URI for the SSO provider JWK certificate endpoint
        :param pulumi.Input[str] open_id_user_authentication: OpenID userAuthentication such as “header”, “form”, “query”
        :param pulumi.Input[str] open_id_user_authorization_uri: URI for the SSO provider Authorization endpoint
        :param pulumi.Input[str] open_id_user_info_uri: URI for the SSO provider UserInfo endpoint
        :param pulumi.Input[bool] saml_enabled: Enable SAML SSO
        :param pulumi.Input[str] saml_entity_id: The IDP entity ID, it can be found in IDP metadata
        :param pulumi.Input[str] saml_idp_certificate: The IDP X.509 certificate
        :param pulumi.Input[str] saml_registration_id: A unique string identifier for the SSO
        :param pulumi.Input[str] saml_sp_entity_id: Audience URI (SP Entity ID)
        :param pulumi.Input[str] saml_web_sso_endpoint: The IDP web sso HTTP POST endpoint, it can be found in IDP metadata
        """
        if open_id_access_token_uri is not None:
            pulumi.set(__self__, "open_id_access_token_uri", open_id_access_token_uri)
        if open_id_client_authentication is not None:
            pulumi.set(__self__, "open_id_client_authentication", open_id_client_authentication)
        if open_id_client_id is not None:
            pulumi.set(__self__, "open_id_client_id", open_id_client_id)
        if open_id_client_secret is not None:
            pulumi.set(__self__, "open_id_client_secret", open_id_client_secret)
        if open_id_clients is not None:
            pulumi.set(__self__, "open_id_clients", open_id_clients)
        if open_id_enabled is not None:
            pulumi.set(__self__, "open_id_enabled", open_id_enabled)
        if open_id_jwk_set_uri is not None:
            pulumi.set(__self__, "open_id_jwk_set_uri", open_id_jwk_set_uri)
        if open_id_user_authentication is not None:
            pulumi.set(__self__, "open_id_user_authentication", open_id_user_authentication)
        if open_id_user_authorization_uri is not None:
            pulumi.set(__self__, "open_id_user_authorization_uri", open_id_user_authorization_uri)
        if open_id_user_info_uri is not None:
            pulumi.set(__self__, "open_id_user_info_uri", open_id_user_info_uri)
        if saml_enabled is not None:
            pulumi.set(__self__, "saml_enabled", saml_enabled)
        if saml_entity_id is not None:
            pulumi.set(__self__, "saml_entity_id", saml_entity_id)
        if saml_idp_certificate is not None:
            pulumi.set(__self__, "saml_idp_certificate", saml_idp_certificate)
        if saml_registration_id is not None:
            pulumi.set(__self__, "saml_registration_id", saml_registration_id)
        if saml_sp_entity_id is not None:
            pulumi.set(__self__, "saml_sp_entity_id", saml_sp_entity_id)
        if saml_web_sso_endpoint is not None:
            pulumi.set(__self__, "saml_web_sso_endpoint", saml_web_sso_endpoint)

    @property
    @pulumi.getter(name="openIdAccessTokenUri")
    def open_id_access_token_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI for the SSO provider Access Token endpoint
        """
        return pulumi.get(self, "open_id_access_token_uri")

    @open_id_access_token_uri.setter
    def open_id_access_token_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_id_access_token_uri", value)

    @property
    @pulumi.getter(name="openIdClientAuthentication")
    def open_id_client_authentication(self) -> Optional[pulumi.Input[str]]:
        """
        OpenID clientAuthentication such as “basic”, “post”, “none”
        """
        return pulumi.get(self, "open_id_client_authentication")

    @open_id_client_authentication.setter
    def open_id_client_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_id_client_authentication", value)

    @property
    @pulumi.getter(name="openIdClientId")
    def open_id_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        A unique string identifier for the SSO client
        """
        return pulumi.get(self, "open_id_client_id")

    @open_id_client_id.setter
    def open_id_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_id_client_id", value)

    @property
    @pulumi.getter(name="openIdClientSecret")
    def open_id_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        A secret string identifier for the SSO client
        """
        return pulumi.get(self, "open_id_client_secret")

    @open_id_client_secret.setter
    def open_id_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_id_client_secret", value)

    @property
    @pulumi.getter(name="openIdClients")
    def open_id_clients(self) -> Optional[pulumi.Input[str]]:
        """
        Array of OpenID clients such as “google”, “okta”, “ibm”
        """
        return pulumi.get(self, "open_id_clients")

    @open_id_clients.setter
    def open_id_clients(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_id_clients", value)

    @property
    @pulumi.getter(name="openIdEnabled")
    def open_id_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable OpenID SSO
        """
        return pulumi.get(self, "open_id_enabled")

    @open_id_enabled.setter
    def open_id_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "open_id_enabled", value)

    @property
    @pulumi.getter(name="openIdJwkSetUri")
    def open_id_jwk_set_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI for the SSO provider JWK certificate endpoint
        """
        return pulumi.get(self, "open_id_jwk_set_uri")

    @open_id_jwk_set_uri.setter
    def open_id_jwk_set_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_id_jwk_set_uri", value)

    @property
    @pulumi.getter(name="openIdUserAuthentication")
    def open_id_user_authentication(self) -> Optional[pulumi.Input[str]]:
        """
        OpenID userAuthentication such as “header”, “form”, “query”
        """
        return pulumi.get(self, "open_id_user_authentication")

    @open_id_user_authentication.setter
    def open_id_user_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_id_user_authentication", value)

    @property
    @pulumi.getter(name="openIdUserAuthorizationUri")
    def open_id_user_authorization_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI for the SSO provider Authorization endpoint
        """
        return pulumi.get(self, "open_id_user_authorization_uri")

    @open_id_user_authorization_uri.setter
    def open_id_user_authorization_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_id_user_authorization_uri", value)

    @property
    @pulumi.getter(name="openIdUserInfoUri")
    def open_id_user_info_uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI for the SSO provider UserInfo endpoint
        """
        return pulumi.get(self, "open_id_user_info_uri")

    @open_id_user_info_uri.setter
    def open_id_user_info_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_id_user_info_uri", value)

    @property
    @pulumi.getter(name="samlEnabled")
    def saml_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SAML SSO
        """
        return pulumi.get(self, "saml_enabled")

    @saml_enabled.setter
    def saml_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "saml_enabled", value)

    @property
    @pulumi.getter(name="samlEntityId")
    def saml_entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        The IDP entity ID, it can be found in IDP metadata
        """
        return pulumi.get(self, "saml_entity_id")

    @saml_entity_id.setter
    def saml_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_entity_id", value)

    @property
    @pulumi.getter(name="samlIdpCertificate")
    def saml_idp_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The IDP X.509 certificate
        """
        return pulumi.get(self, "saml_idp_certificate")

    @saml_idp_certificate.setter
    def saml_idp_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_idp_certificate", value)

    @property
    @pulumi.getter(name="samlRegistrationId")
    def saml_registration_id(self) -> Optional[pulumi.Input[str]]:
        """
        A unique string identifier for the SSO
        """
        return pulumi.get(self, "saml_registration_id")

    @saml_registration_id.setter
    def saml_registration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_registration_id", value)

    @property
    @pulumi.getter(name="samlSpEntityId")
    def saml_sp_entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        Audience URI (SP Entity ID)
        """
        return pulumi.get(self, "saml_sp_entity_id")

    @saml_sp_entity_id.setter
    def saml_sp_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_sp_entity_id", value)

    @property
    @pulumi.getter(name="samlWebSsoEndpoint")
    def saml_web_sso_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The IDP web sso HTTP POST endpoint, it can be found in IDP metadata
        """
        return pulumi.get(self, "saml_web_sso_endpoint")

    @saml_web_sso_endpoint.setter
    def saml_web_sso_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_web_sso_endpoint", value)


@pulumi.input_type
class XlSpecPropertiesGlobalArgs:
    def __init__(__self__, *,
                 db_port: Optional[pulumi.Input[int]] = None,
                 enable_secure_db_connection: Optional[pulumi.Input[bool]] = None):
        """
        global property overrides
        :param pulumi.Input[int] db_port: Configure custom mysql database port
        :param pulumi.Input[bool] enable_secure_db_connection: Enable SSL connection to the mysql database
        """
        if db_port is not None:
            pulumi.set(__self__, "db_port", db_port)
        if enable_secure_db_connection is not None:
            pulumi.set(__self__, "enable_secure_db_connection", enable_secure_db_connection)

    @property
    @pulumi.getter(name="dbPort")
    def db_port(self) -> Optional[pulumi.Input[int]]:
        """
        Configure custom mysql database port
        """
        return pulumi.get(self, "db_port")

    @db_port.setter
    def db_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "db_port", value)

    @property
    @pulumi.getter(name="enableSecureDBConnection")
    def enable_secure_db_connection(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SSL connection to the mysql database
        """
        return pulumi.get(self, "enable_secure_db_connection")

    @enable_secure_db_connection.setter
    def enable_secure_db_connection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_secure_db_connection", value)


@pulumi.input_type
class XlSpecPropertiesRepositoryArgs:
    def __init__(__self__, *,
                 show_guest_load: Optional[pulumi.Input[bool]] = None,
                 use_sql_for_plans: Optional[pulumi.Input[bool]] = None):
        """
        repository property overrides
        :param pulumi.Input[bool] show_guest_load: Show GuestLoad entities
        :param pulumi.Input[bool] use_sql_for_plans: Store plan data in MySQL instead of ArangoDB.
        """
        if show_guest_load is not None:
            pulumi.set(__self__, "show_guest_load", show_guest_load)
        if use_sql_for_plans is not None:
            pulumi.set(__self__, "use_sql_for_plans", use_sql_for_plans)

    @property
    @pulumi.getter(name="showGuestLoad")
    def show_guest_load(self) -> Optional[pulumi.Input[bool]]:
        """
        Show GuestLoad entities
        """
        return pulumi.get(self, "show_guest_load")

    @show_guest_load.setter
    def show_guest_load(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_guest_load", value)

    @property
    @pulumi.getter(name="useSqlForPlans")
    def use_sql_for_plans(self) -> Optional[pulumi.Input[bool]]:
        """
        Store plan data in MySQL instead of ArangoDB.
        """
        return pulumi.get(self, "use_sql_for_plans")

    @use_sql_for_plans.setter
    def use_sql_for_plans(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_sql_for_plans", value)


@pulumi.input_type
class XlSpecPureArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Pure mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Pure mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecRepositoryArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecRepositoryImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecRepositoryResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecRepositoryImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecRepositoryResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecRepositoryImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecRepositoryImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecRepositoryResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecRepositoryResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecRepositoryImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecRepositoryResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecRepositoryResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecRepositoryResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecRepositoryResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecRepositoryResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecRepositoryResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecRhvArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Red Hat Virtualization mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Red Hat Virtualization mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecRsyslogArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 image: Optional[pulumi.Input['XlSpecRsyslogImageArgs']] = None,
                 persistence: Optional[pulumi.Input['XlSpecRsyslogPersistenceArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] env: optional environment variables for syslog
        :param pulumi.Input['XlSpecRsyslogImageArgs'] image: component specific image options
        :param pulumi.Input['XlSpecRsyslogPersistenceArgs'] persistence: rsyslog persistence options
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        """
        optional environment variables for syslog
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecRsyslogImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecRsyslogImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input['XlSpecRsyslogPersistenceArgs']]:
        """
        rsyslog persistence options
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input['XlSpecRsyslogPersistenceArgs']]):
        pulumi.set(self, "persistence", value)


@pulumi.input_type
class XlSpecRsyslogImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecRsyslogPersistenceArgs:
    def __init__(__self__, *,
                 auditsize: Optional[pulumi.Input[str]] = None,
                 logsize: Optional[pulumi.Input[str]] = None):
        """
        rsyslog persistence options
        :param pulumi.Input[str] auditsize: influxdb audit persistent volume size
        :param pulumi.Input[str] logsize: influxdb log persistent volume size
        """
        if auditsize is not None:
            pulumi.set(__self__, "auditsize", auditsize)
        if logsize is not None:
            pulumi.set(__self__, "logsize", logsize)

    @property
    @pulumi.getter
    def auditsize(self) -> Optional[pulumi.Input[str]]:
        """
        influxdb audit persistent volume size
        """
        return pulumi.get(self, "auditsize")

    @auditsize.setter
    def auditsize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auditsize", value)

    @property
    @pulumi.getter
    def logsize(self) -> Optional[pulumi.Input[str]]:
        """
        influxdb log persistent volume size
        """
        return pulumi.get(self, "logsize")

    @logsize.setter
    def logsize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logsize", value)


@pulumi.input_type
class XlSpecScaleioArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable EMC ScaleIO mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable EMC ScaleIO mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecSnmpArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable SNMP mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecTerraformArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Terraform mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Terraform mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecTetrationArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Cisco Tetration mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Cisco Tetration mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecTimescaledbArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable timescaledb with postgress backend
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timescaledb with postgress backend
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecTopology-ProcessorArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecTopology-ProcessorImageArgs']] = None,
                 java_component_options: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['XlSpecTopology-ProcessorResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] debug: component debug
        :param pulumi.Input['XlSpecTopology-ProcessorImageArgs'] image: component specific image options
        :param pulumi.Input[str] java_component_options: component additional java options
        :param pulumi.Input['XlSpecTopology-ProcessorResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecTopology-ProcessorImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecTopology-ProcessorImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[pulumi.Input[str]]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @java_component_options.setter
    def java_component_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_component_options", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecTopology-ProcessorResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecTopology-ProcessorResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecTopology-ProcessorImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecTopology-ProcessorResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecTopology-ProcessorResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecTopology-ProcessorResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecTopology-ProcessorResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecTopology-ProcessorResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecTopology-ProcessorResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecUcsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Cisco UCS mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Cisco UCS mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecUcsdirectorArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Cisco UCS Director mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Cisco UCS Director mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecUiArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['XlSpecUiImageArgs']] = None,
                 resources: Optional[pulumi.Input['XlSpecUiResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input[bool] enabled: Enable UI component
        :param pulumi.Input['XlSpecUiImageArgs'] image: component specific image options
        :param pulumi.Input['XlSpecUiResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable UI component
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecUiImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecUiImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecUiResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecUiResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecUiImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecUiResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecUiResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecUiResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecUiResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecUiResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecUiResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class XlSpecVcdArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable VMware Cloud Director mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable VMware Cloud Director mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecVcenterArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable VMware vCenter mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable VMware vCenter mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecVmaxArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable EMC VMAX mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable EMC VMAX mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecVmmArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable Microsoft VMM mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Microsoft VMM mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecVplexArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable EMC VPLEX mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable EMC VPLEX mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecWmiArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable WMI mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable WMI mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecXtremioArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable EMC XtremIO mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable EMC XtremIO mediation
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class XlSpecZookeeperArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 image: Optional[pulumi.Input['XlSpecZookeeperImageArgs']] = None,
                 resources: Optional[pulumi.Input['XlSpecZookeeperResourcesArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: component specific pod annotations list
        :param pulumi.Input['XlSpecZookeeperImageArgs'] image: component specific image options
        :param pulumi.Input['XlSpecZookeeperResourcesArgs'] resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['XlSpecZookeeperImageArgs']]:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['XlSpecZookeeperImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['XlSpecZookeeperResourcesArgs']]:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['XlSpecZookeeperResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class XlSpecZookeeperImageArgs:
    def __init__(__self__, *,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        component specific image options
        :param pulumi.Input[str] pull_policy: component image pull policy
        :param pulumi.Input[str] repository: component container registry and repository name
        :param pulumi.Input[str] service_account_name: component serviceAccountName
        :param pulumi.Input[str] tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class XlSpecZookeeperResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['XlSpecZookeeperResourcesLimitsArgs']] = None):
        """
        component resource configuration
        :param pulumi.Input['XlSpecZookeeperResourcesLimitsArgs'] limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['XlSpecZookeeperResourcesLimitsArgs']]:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['XlSpecZookeeperResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)


@pulumi.input_type
class XlSpecZookeeperResourcesLimitsArgs:
    def __init__(__self__, *,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        component limits
        :param pulumi.Input[str] memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)



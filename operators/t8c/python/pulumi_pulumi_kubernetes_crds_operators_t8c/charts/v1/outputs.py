# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'XlSpec',
    'XlSpecAcims',
    'XlSpecAction-Orchestrator',
    'XlSpecAction-OrchestratorImage',
    'XlSpecAction-OrchestratorResources',
    'XlSpecAction-OrchestratorResourcesLimits',
    'XlSpecActionscript',
    'XlSpecAix',
    'XlSpecApi',
    'XlSpecApiImage',
    'XlSpecApiResources',
    'XlSpecApiResourcesLimits',
    'XlSpecApic',
    'XlSpecAppdynamics',
    'XlSpecAppinsights',
    'XlSpecArangodb',
    'XlSpecArangodbImage',
    'XlSpecArangodbPersistence',
    'XlSpecAuth',
    'XlSpecAuthImage',
    'XlSpecAuthResources',
    'XlSpecAuthResourcesLimits',
    'XlSpecAws',
    'XlSpecAwslambda',
    'XlSpecAzure',
    'XlSpecBaremetal',
    'XlSpecChronograf',
    'XlSpecCloudfoundry',
    'XlSpecClustermgr',
    'XlSpecClustermgrImage',
    'XlSpecClustermgrResources',
    'XlSpecClustermgrResourcesLimits',
    'XlSpecCompellent',
    'XlSpecConsul',
    'XlSpecConsulImage',
    'XlSpecControl',
    'XlSpecCost',
    'XlSpecCostImage',
    'XlSpecCostResources',
    'XlSpecCostResourcesLimits',
    'XlSpecDatacloud',
    'XlSpecDatacloudImage',
    'XlSpecDatacloudSevone',
    'XlSpecDatacloudSevoneTransport',
    'XlSpecDatacloudSevoneTransportSettings',
    'XlSpecDatadog',
    'XlSpecDb',
    'XlSpecDbImage',
    'XlSpecDbPersistence',
    'XlSpecDynatrace',
    'XlSpecFluent-Bit',
    'XlSpecGcp',
    'XlSpecGlobal',
    'XlSpecGlobalCertmanager',
    'XlSpecGlobalIngress',
    'XlSpecGlobalIngressSecrets',
    'XlSpecGlobalSecurityContext',
    'XlSpecGrafana',
    'XlSpecGroup',
    'XlSpecGroupImage',
    'XlSpecGroupResources',
    'XlSpecGroupResourcesLimits',
    'XlSpecHds',
    'XlSpecHistory',
    'XlSpecHistoryImage',
    'XlSpecHistoryResources',
    'XlSpecHistoryResourcesLimits',
    'XlSpecHorizon',
    'XlSpecHpe3par',
    'XlSpecHyperflex',
    'XlSpecHyperv',
    'XlSpecInfluxdb',
    'XlSpecInfluxdbImage',
    'XlSpecInfluxdbPersistence',
    'XlSpecIntersight',
    'XlSpecIstio',
    'XlSpecIstioingress',
    'XlSpecIstioingressRoutes',
    'XlSpecJaeger',
    'XlSpecKafka',
    'XlSpecKafkaImage',
    'XlSpecKafkaJava',
    'XlSpecKafkaPersistence',
    'XlSpecKubeturbo',
    'XlSpecLoki',
    'XlSpecMarket',
    'XlSpecMarketImage',
    'XlSpecMarketResources',
    'XlSpecMarketResourcesLimits',
    'XlSpecMediation-Acims',
    'XlSpecMediation-AcimsImage',
    'XlSpecMediation-AcimsResources',
    'XlSpecMediation-AcimsResourcesLimits',
    'XlSpecMediation-Actionscript',
    'XlSpecMediation-ActionscriptImage',
    'XlSpecMediation-ActionscriptResources',
    'XlSpecMediation-ActionscriptResourcesLimits',
    'XlSpecMediation-Aix',
    'XlSpecMediation-AixImage',
    'XlSpecMediation-AixResources',
    'XlSpecMediation-AixResourcesLimits',
    'XlSpecMediation-Apic',
    'XlSpecMediation-ApicImage',
    'XlSpecMediation-ApicResources',
    'XlSpecMediation-ApicResourcesLimits',
    'XlSpecMediation-Appdynamics',
    'XlSpecMediation-AppdynamicsImage',
    'XlSpecMediation-AppdynamicsResources',
    'XlSpecMediation-AppdynamicsResourcesLimits',
    'XlSpecMediation-Appinsights',
    'XlSpecMediation-AppinsightsImage',
    'XlSpecMediation-AppinsightsResources',
    'XlSpecMediation-AppinsightsResourcesLimits',
    'XlSpecMediation-Aws',
    'XlSpecMediation-AwsImage',
    'XlSpecMediation-AwsResources',
    'XlSpecMediation-AwsResourcesLimits',
    'XlSpecMediation-Awsbilling',
    'XlSpecMediation-AwsbillingImage',
    'XlSpecMediation-AwsbillingResources',
    'XlSpecMediation-AwsbillingResourcesLimits',
    'XlSpecMediation-Awscost',
    'XlSpecMediation-AwscostImage',
    'XlSpecMediation-AwscostResources',
    'XlSpecMediation-AwscostResourcesLimits',
    'XlSpecMediation-Awslambda',
    'XlSpecMediation-AwslambdaImage',
    'XlSpecMediation-AwslambdaResources',
    'XlSpecMediation-AwslambdaResourcesLimits',
    'XlSpecMediation-Azure',
    'XlSpecMediation-AzureImage',
    'XlSpecMediation-AzureResources',
    'XlSpecMediation-AzureResourcesLimits',
    'XlSpecMediation-Azurecost',
    'XlSpecMediation-AzurecostImage',
    'XlSpecMediation-AzurecostResources',
    'XlSpecMediation-AzurecostResourcesLimits',
    'XlSpecMediation-Azureea',
    'XlSpecMediation-AzureeaImage',
    'XlSpecMediation-AzureeaResources',
    'XlSpecMediation-AzureeaResourcesLimits',
    'XlSpecMediation-Azuresp',
    'XlSpecMediation-AzurespImage',
    'XlSpecMediation-AzurespResources',
    'XlSpecMediation-AzurespResourcesLimits',
    'XlSpecMediation-Azurevolumes',
    'XlSpecMediation-AzurevolumesImage',
    'XlSpecMediation-AzurevolumesResources',
    'XlSpecMediation-AzurevolumesResourcesLimits',
    'XlSpecMediation-Baremetal',
    'XlSpecMediation-BaremetalImage',
    'XlSpecMediation-BaremetalResources',
    'XlSpecMediation-BaremetalResourcesLimits',
    'XlSpecMediation-Cloudfoundry',
    'XlSpecMediation-CloudfoundryImage',
    'XlSpecMediation-CloudfoundryResources',
    'XlSpecMediation-CloudfoundryResourcesLimits',
    'XlSpecMediation-Compellent',
    'XlSpecMediation-CompellentImage',
    'XlSpecMediation-CompellentResources',
    'XlSpecMediation-CompellentResourcesLimits',
    'XlSpecMediation-Customdata',
    'XlSpecMediation-CustomdataImage',
    'XlSpecMediation-CustomdataResources',
    'XlSpecMediation-CustomdataResourcesLimits',
    'XlSpecMediation-Datadog',
    'XlSpecMediation-DatadogImage',
    'XlSpecMediation-DatadogResources',
    'XlSpecMediation-DatadogResourcesLimits',
    'XlSpecMediation-Dynatrace',
    'XlSpecMediation-DynatraceImage',
    'XlSpecMediation-DynatraceResources',
    'XlSpecMediation-DynatraceResourcesLimits',
    'XlSpecMediation-Gcp',
    'XlSpecMediation-GcpImage',
    'XlSpecMediation-GcpResources',
    'XlSpecMediation-GcpResourcesLimits',
    'XlSpecMediation-Gcpcost',
    'XlSpecMediation-GcpcostImage',
    'XlSpecMediation-GcpcostResources',
    'XlSpecMediation-GcpcostResourcesLimits',
    'XlSpecMediation-Hds',
    'XlSpecMediation-HdsImage',
    'XlSpecMediation-HdsResources',
    'XlSpecMediation-HdsResourcesLimits',
    'XlSpecMediation-Horizon',
    'XlSpecMediation-HorizonImage',
    'XlSpecMediation-HorizonResources',
    'XlSpecMediation-HorizonResourcesLimits',
    'XlSpecMediation-Hpe3par',
    'XlSpecMediation-Hpe3parImage',
    'XlSpecMediation-Hpe3parResources',
    'XlSpecMediation-Hpe3parResourcesLimits',
    'XlSpecMediation-Hyperflex',
    'XlSpecMediation-HyperflexImage',
    'XlSpecMediation-HyperflexResources',
    'XlSpecMediation-HyperflexResourcesLimits',
    'XlSpecMediation-Hyperv',
    'XlSpecMediation-HypervImage',
    'XlSpecMediation-HypervResources',
    'XlSpecMediation-HypervResourcesLimits',
    'XlSpecMediation-Intersight',
    'XlSpecMediation-IntersightImage',
    'XlSpecMediation-IntersightResources',
    'XlSpecMediation-IntersightResourcesLimits',
    'XlSpecMediation-Intersighthyperflex',
    'XlSpecMediation-IntersighthyperflexImage',
    'XlSpecMediation-IntersighthyperflexResources',
    'XlSpecMediation-IntersighthyperflexResourcesLimits',
    'XlSpecMediation-Intersightucs',
    'XlSpecMediation-IntersightucsImage',
    'XlSpecMediation-IntersightucsResources',
    'XlSpecMediation-IntersightucsResourcesLimits',
    'XlSpecMediation-Istio',
    'XlSpecMediation-IstioImage',
    'XlSpecMediation-IstioResources',
    'XlSpecMediation-IstioResourcesLimits',
    'XlSpecMediation-Mssql',
    'XlSpecMediation-MssqlImage',
    'XlSpecMediation-MssqlResources',
    'XlSpecMediation-MssqlResourcesLimits',
    'XlSpecMediation-Mysql',
    'XlSpecMediation-MysqlImage',
    'XlSpecMediation-MysqlResources',
    'XlSpecMediation-MysqlResourcesLimits',
    'XlSpecMediation-Netapp',
    'XlSpecMediation-NetappImage',
    'XlSpecMediation-NetappResources',
    'XlSpecMediation-NetappResourcesLimits',
    'XlSpecMediation-Netflow',
    'XlSpecMediation-NetflowImage',
    'XlSpecMediation-NetflowResources',
    'XlSpecMediation-NetflowResourcesLimits',
    'XlSpecMediation-Newrelic',
    'XlSpecMediation-NewrelicImage',
    'XlSpecMediation-NewrelicResources',
    'XlSpecMediation-NewrelicResourcesLimits',
    'XlSpecMediation-Nutanix',
    'XlSpecMediation-NutanixImage',
    'XlSpecMediation-NutanixResources',
    'XlSpecMediation-NutanixResourcesLimits',
    'XlSpecMediation-Oneview',
    'XlSpecMediation-OneviewImage',
    'XlSpecMediation-OneviewResources',
    'XlSpecMediation-OneviewResourcesLimits',
    'XlSpecMediation-Openstack',
    'XlSpecMediation-OpenstackImage',
    'XlSpecMediation-OpenstackResources',
    'XlSpecMediation-OpenstackResourcesLimits',
    'XlSpecMediation-Pivotal',
    'XlSpecMediation-PivotalImage',
    'XlSpecMediation-PivotalResources',
    'XlSpecMediation-PivotalResourcesLimits',
    'XlSpecMediation-Pure',
    'XlSpecMediation-PureImage',
    'XlSpecMediation-PureResources',
    'XlSpecMediation-PureResourcesLimits',
    'XlSpecMediation-Rhv',
    'XlSpecMediation-RhvImage',
    'XlSpecMediation-RhvResources',
    'XlSpecMediation-RhvResourcesLimits',
    'XlSpecMediation-Scaleio',
    'XlSpecMediation-ScaleioImage',
    'XlSpecMediation-ScaleioResources',
    'XlSpecMediation-ScaleioResourcesLimits',
    'XlSpecMediation-Snmp',
    'XlSpecMediation-SnmpImage',
    'XlSpecMediation-SnmpResources',
    'XlSpecMediation-SnmpResourcesLimits',
    'XlSpecMediation-Terraform',
    'XlSpecMediation-TerraformImage',
    'XlSpecMediation-TerraformResources',
    'XlSpecMediation-TerraformResourcesLimits',
    'XlSpecMediation-Tetration',
    'XlSpecMediation-TetrationImage',
    'XlSpecMediation-TetrationResources',
    'XlSpecMediation-TetrationResourcesLimits',
    'XlSpecMediation-Tomcat',
    'XlSpecMediation-TomcatImage',
    'XlSpecMediation-TomcatResources',
    'XlSpecMediation-TomcatResourcesLimits',
    'XlSpecMediation-Ucs',
    'XlSpecMediation-UcsImage',
    'XlSpecMediation-UcsResources',
    'XlSpecMediation-UcsResourcesLimits',
    'XlSpecMediation-Ucsdirector',
    'XlSpecMediation-UcsdirectorImage',
    'XlSpecMediation-UcsdirectorResources',
    'XlSpecMediation-UcsdirectorResourcesLimits',
    'XlSpecMediation-Vcd',
    'XlSpecMediation-VcdImage',
    'XlSpecMediation-VcdResources',
    'XlSpecMediation-VcdResourcesLimits',
    'XlSpecMediation-Vcenter',
    'XlSpecMediation-VcenterImage',
    'XlSpecMediation-VcenterResources',
    'XlSpecMediation-VcenterResourcesLimits',
    'XlSpecMediation-Vcenterbrowsing',
    'XlSpecMediation-VcenterbrowsingImage',
    'XlSpecMediation-VcenterbrowsingResources',
    'XlSpecMediation-VcenterbrowsingResourcesLimits',
    'XlSpecMediation-Vmax',
    'XlSpecMediation-VmaxImage',
    'XlSpecMediation-VmaxResources',
    'XlSpecMediation-VmaxResourcesLimits',
    'XlSpecMediation-Vmm',
    'XlSpecMediation-VmmImage',
    'XlSpecMediation-VmmResources',
    'XlSpecMediation-VmmResourcesLimits',
    'XlSpecMediation-Vplex',
    'XlSpecMediation-VplexImage',
    'XlSpecMediation-VplexResources',
    'XlSpecMediation-VplexResourcesLimits',
    'XlSpecMediation-Wmi',
    'XlSpecMediation-WmiImage',
    'XlSpecMediation-WmiResources',
    'XlSpecMediation-WmiResourcesLimits',
    'XlSpecMediation-Xtremio',
    'XlSpecMediation-XtremioImage',
    'XlSpecMediation-XtremioResources',
    'XlSpecMediation-XtremioResourcesLimits',
    'XlSpecMetron',
    'XlSpecMssql',
    'XlSpecMysql',
    'XlSpecNetapp',
    'XlSpecNetflow',
    'XlSpecNewrelic',
    'XlSpecNginxingress',
    'XlSpecNutanix',
    'XlSpecOneview',
    'XlSpecOpenshiftingress',
    'XlSpecOpenstack',
    'XlSpecPivotal',
    'XlSpecPlan-Orchestrator',
    'XlSpecPlan-OrchestratorImage',
    'XlSpecPlan-OrchestratorResources',
    'XlSpecPlan-OrchestratorResourcesLimits',
    'XlSpecPlatform',
    'XlSpecPrometheus',
    'XlSpecPrometheus-Mysql-Exporter',
    'XlSpecPrometheus-Mysql-ExporterMysql',
    'XlSpecPrometurbo',
    'XlSpecPromtail',
    'XlSpecProperties',
    'XlSpecPropertiesAction-Orchestrator',
    'XlSpecPropertiesApi',
    'XlSpecPropertiesGlobal',
    'XlSpecPropertiesRepository',
    'XlSpecPure',
    'XlSpecRepository',
    'XlSpecRepositoryImage',
    'XlSpecRepositoryResources',
    'XlSpecRepositoryResourcesLimits',
    'XlSpecRhv',
    'XlSpecRsyslog',
    'XlSpecRsyslogImage',
    'XlSpecRsyslogPersistence',
    'XlSpecScaleio',
    'XlSpecSnmp',
    'XlSpecTerraform',
    'XlSpecTetration',
    'XlSpecTimescaledb',
    'XlSpecTopology-Processor',
    'XlSpecTopology-ProcessorImage',
    'XlSpecTopology-ProcessorResources',
    'XlSpecTopology-ProcessorResourcesLimits',
    'XlSpecUcs',
    'XlSpecUcsdirector',
    'XlSpecUi',
    'XlSpecUiImage',
    'XlSpecUiResources',
    'XlSpecUiResourcesLimits',
    'XlSpecVcd',
    'XlSpecVcenter',
    'XlSpecVmax',
    'XlSpecVmm',
    'XlSpecVplex',
    'XlSpecWmi',
    'XlSpecXtremio',
    'XlSpecZookeeper',
    'XlSpecZookeeperImage',
    'XlSpecZookeeperResources',
    'XlSpecZookeeperResourcesLimits',
]

@pulumi.output_type
class XlSpec(dict):
    def __init__(__self__, *,
                 acims: Optional['outputs.XlSpecAcims'] = None,
                 action_orchestrator: Optional['outputs.XlSpecAction-Orchestrator'] = None,
                 actionscript: Optional['outputs.XlSpecActionscript'] = None,
                 aix: Optional['outputs.XlSpecAix'] = None,
                 api: Optional['outputs.XlSpecApi'] = None,
                 apic: Optional['outputs.XlSpecApic'] = None,
                 appdynamics: Optional['outputs.XlSpecAppdynamics'] = None,
                 appinsights: Optional['outputs.XlSpecAppinsights'] = None,
                 arangodb: Optional['outputs.XlSpecArangodb'] = None,
                 auth: Optional['outputs.XlSpecAuth'] = None,
                 aws: Optional['outputs.XlSpecAws'] = None,
                 awslambda: Optional['outputs.XlSpecAwslambda'] = None,
                 azure: Optional['outputs.XlSpecAzure'] = None,
                 baremetal: Optional['outputs.XlSpecBaremetal'] = None,
                 chronograf: Optional['outputs.XlSpecChronograf'] = None,
                 cloudfoundry: Optional['outputs.XlSpecCloudfoundry'] = None,
                 clustermgr: Optional['outputs.XlSpecClustermgr'] = None,
                 compellent: Optional['outputs.XlSpecCompellent'] = None,
                 consul: Optional['outputs.XlSpecConsul'] = None,
                 control: Optional['outputs.XlSpecControl'] = None,
                 cost: Optional['outputs.XlSpecCost'] = None,
                 datacloud: Optional['outputs.XlSpecDatacloud'] = None,
                 datadog: Optional['outputs.XlSpecDatadog'] = None,
                 db: Optional['outputs.XlSpecDb'] = None,
                 dynatrace: Optional['outputs.XlSpecDynatrace'] = None,
                 fluent_bit: Optional['outputs.XlSpecFluent-Bit'] = None,
                 gcp: Optional['outputs.XlSpecGcp'] = None,
                 global_: Optional['outputs.XlSpecGlobal'] = None,
                 grafana: Optional['outputs.XlSpecGrafana'] = None,
                 group: Optional['outputs.XlSpecGroup'] = None,
                 hds: Optional['outputs.XlSpecHds'] = None,
                 history: Optional['outputs.XlSpecHistory'] = None,
                 horizon: Optional['outputs.XlSpecHorizon'] = None,
                 hpe3par: Optional['outputs.XlSpecHpe3par'] = None,
                 hyperflex: Optional['outputs.XlSpecHyperflex'] = None,
                 hyperv: Optional['outputs.XlSpecHyperv'] = None,
                 influxdb: Optional['outputs.XlSpecInfluxdb'] = None,
                 intersight: Optional['outputs.XlSpecIntersight'] = None,
                 istio: Optional['outputs.XlSpecIstio'] = None,
                 istioingress: Optional['outputs.XlSpecIstioingress'] = None,
                 jaeger: Optional['outputs.XlSpecJaeger'] = None,
                 kafka: Optional['outputs.XlSpecKafka'] = None,
                 kubeturbo: Optional['outputs.XlSpecKubeturbo'] = None,
                 loki: Optional['outputs.XlSpecLoki'] = None,
                 market: Optional['outputs.XlSpecMarket'] = None,
                 mediation_acims: Optional['outputs.XlSpecMediation-Acims'] = None,
                 mediation_actionscript: Optional['outputs.XlSpecMediation-Actionscript'] = None,
                 mediation_aix: Optional['outputs.XlSpecMediation-Aix'] = None,
                 mediation_apic: Optional['outputs.XlSpecMediation-Apic'] = None,
                 mediation_appdynamics: Optional['outputs.XlSpecMediation-Appdynamics'] = None,
                 mediation_appinsights: Optional['outputs.XlSpecMediation-Appinsights'] = None,
                 mediation_aws: Optional['outputs.XlSpecMediation-Aws'] = None,
                 mediation_awsbilling: Optional['outputs.XlSpecMediation-Awsbilling'] = None,
                 mediation_awscost: Optional['outputs.XlSpecMediation-Awscost'] = None,
                 mediation_awslambda: Optional['outputs.XlSpecMediation-Awslambda'] = None,
                 mediation_azure: Optional['outputs.XlSpecMediation-Azure'] = None,
                 mediation_azurecost: Optional['outputs.XlSpecMediation-Azurecost'] = None,
                 mediation_azureea: Optional['outputs.XlSpecMediation-Azureea'] = None,
                 mediation_azuresp: Optional['outputs.XlSpecMediation-Azuresp'] = None,
                 mediation_azurevolumes: Optional['outputs.XlSpecMediation-Azurevolumes'] = None,
                 mediation_baremetal: Optional['outputs.XlSpecMediation-Baremetal'] = None,
                 mediation_cloudfoundry: Optional['outputs.XlSpecMediation-Cloudfoundry'] = None,
                 mediation_compellent: Optional['outputs.XlSpecMediation-Compellent'] = None,
                 mediation_customdata: Optional['outputs.XlSpecMediation-Customdata'] = None,
                 mediation_datadog: Optional['outputs.XlSpecMediation-Datadog'] = None,
                 mediation_dynatrace: Optional['outputs.XlSpecMediation-Dynatrace'] = None,
                 mediation_gcp: Optional['outputs.XlSpecMediation-Gcp'] = None,
                 mediation_gcpcost: Optional['outputs.XlSpecMediation-Gcpcost'] = None,
                 mediation_hds: Optional['outputs.XlSpecMediation-Hds'] = None,
                 mediation_horizon: Optional['outputs.XlSpecMediation-Horizon'] = None,
                 mediation_hpe3par: Optional['outputs.XlSpecMediation-Hpe3par'] = None,
                 mediation_hyperflex: Optional['outputs.XlSpecMediation-Hyperflex'] = None,
                 mediation_hyperv: Optional['outputs.XlSpecMediation-Hyperv'] = None,
                 mediation_intersight: Optional['outputs.XlSpecMediation-Intersight'] = None,
                 mediation_intersighthyperflex: Optional['outputs.XlSpecMediation-Intersighthyperflex'] = None,
                 mediation_intersightucs: Optional['outputs.XlSpecMediation-Intersightucs'] = None,
                 mediation_istio: Optional['outputs.XlSpecMediation-Istio'] = None,
                 mediation_mssql: Optional['outputs.XlSpecMediation-Mssql'] = None,
                 mediation_mysql: Optional['outputs.XlSpecMediation-Mysql'] = None,
                 mediation_netapp: Optional['outputs.XlSpecMediation-Netapp'] = None,
                 mediation_netflow: Optional['outputs.XlSpecMediation-Netflow'] = None,
                 mediation_newrelic: Optional['outputs.XlSpecMediation-Newrelic'] = None,
                 mediation_nutanix: Optional['outputs.XlSpecMediation-Nutanix'] = None,
                 mediation_oneview: Optional['outputs.XlSpecMediation-Oneview'] = None,
                 mediation_openstack: Optional['outputs.XlSpecMediation-Openstack'] = None,
                 mediation_pivotal: Optional['outputs.XlSpecMediation-Pivotal'] = None,
                 mediation_pure: Optional['outputs.XlSpecMediation-Pure'] = None,
                 mediation_rhv: Optional['outputs.XlSpecMediation-Rhv'] = None,
                 mediation_scaleio: Optional['outputs.XlSpecMediation-Scaleio'] = None,
                 mediation_snmp: Optional['outputs.XlSpecMediation-Snmp'] = None,
                 mediation_terraform: Optional['outputs.XlSpecMediation-Terraform'] = None,
                 mediation_tetration: Optional['outputs.XlSpecMediation-Tetration'] = None,
                 mediation_tomcat: Optional['outputs.XlSpecMediation-Tomcat'] = None,
                 mediation_ucs: Optional['outputs.XlSpecMediation-Ucs'] = None,
                 mediation_ucsdirector: Optional['outputs.XlSpecMediation-Ucsdirector'] = None,
                 mediation_vcd: Optional['outputs.XlSpecMediation-Vcd'] = None,
                 mediation_vcenter: Optional['outputs.XlSpecMediation-Vcenter'] = None,
                 mediation_vcenterbrowsing: Optional['outputs.XlSpecMediation-Vcenterbrowsing'] = None,
                 mediation_vmax: Optional['outputs.XlSpecMediation-Vmax'] = None,
                 mediation_vmm: Optional['outputs.XlSpecMediation-Vmm'] = None,
                 mediation_vplex: Optional['outputs.XlSpecMediation-Vplex'] = None,
                 mediation_wmi: Optional['outputs.XlSpecMediation-Wmi'] = None,
                 mediation_xtremio: Optional['outputs.XlSpecMediation-Xtremio'] = None,
                 metron: Optional['outputs.XlSpecMetron'] = None,
                 mssql: Optional['outputs.XlSpecMssql'] = None,
                 mysql: Optional['outputs.XlSpecMysql'] = None,
                 netapp: Optional['outputs.XlSpecNetapp'] = None,
                 netflow: Optional['outputs.XlSpecNetflow'] = None,
                 newrelic: Optional['outputs.XlSpecNewrelic'] = None,
                 nginxingress: Optional['outputs.XlSpecNginxingress'] = None,
                 nutanix: Optional['outputs.XlSpecNutanix'] = None,
                 oneview: Optional['outputs.XlSpecOneview'] = None,
                 openshiftingress: Optional['outputs.XlSpecOpenshiftingress'] = None,
                 openstack: Optional['outputs.XlSpecOpenstack'] = None,
                 pivotal: Optional['outputs.XlSpecPivotal'] = None,
                 plan_orchestrator: Optional['outputs.XlSpecPlan-Orchestrator'] = None,
                 platform: Optional['outputs.XlSpecPlatform'] = None,
                 prometheus: Optional['outputs.XlSpecPrometheus'] = None,
                 prometheus_mysql_exporter: Optional['outputs.XlSpecPrometheus-Mysql-Exporter'] = None,
                 prometurbo: Optional['outputs.XlSpecPrometurbo'] = None,
                 promtail: Optional['outputs.XlSpecPromtail'] = None,
                 properties: Optional['outputs.XlSpecProperties'] = None,
                 pure: Optional['outputs.XlSpecPure'] = None,
                 repository: Optional['outputs.XlSpecRepository'] = None,
                 rhv: Optional['outputs.XlSpecRhv'] = None,
                 rsyslog: Optional['outputs.XlSpecRsyslog'] = None,
                 scaleio: Optional['outputs.XlSpecScaleio'] = None,
                 snmp: Optional['outputs.XlSpecSnmp'] = None,
                 terraform: Optional['outputs.XlSpecTerraform'] = None,
                 tetration: Optional['outputs.XlSpecTetration'] = None,
                 timescaledb: Optional['outputs.XlSpecTimescaledb'] = None,
                 topology_processor: Optional['outputs.XlSpecTopology-Processor'] = None,
                 ucs: Optional['outputs.XlSpecUcs'] = None,
                 ucsdirector: Optional['outputs.XlSpecUcsdirector'] = None,
                 ui: Optional['outputs.XlSpecUi'] = None,
                 vcd: Optional['outputs.XlSpecVcd'] = None,
                 vcenter: Optional['outputs.XlSpecVcenter'] = None,
                 vmax: Optional['outputs.XlSpecVmax'] = None,
                 vmm: Optional['outputs.XlSpecVmm'] = None,
                 vplex: Optional['outputs.XlSpecVplex'] = None,
                 wmi: Optional['outputs.XlSpecWmi'] = None,
                 xtremio: Optional['outputs.XlSpecXtremio'] = None,
                 zookeeper: Optional['outputs.XlSpecZookeeper'] = None):
        """
        :param 'XlSpecGlobalArgs' global_: Platform configuration options
        :param 'XlSpecPropertiesArgs' properties: Custom property overrides
        """
        if acims is not None:
            pulumi.set(__self__, "acims", acims)
        if action_orchestrator is not None:
            pulumi.set(__self__, "action_orchestrator", action_orchestrator)
        if actionscript is not None:
            pulumi.set(__self__, "actionscript", actionscript)
        if aix is not None:
            pulumi.set(__self__, "aix", aix)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if apic is not None:
            pulumi.set(__self__, "apic", apic)
        if appdynamics is not None:
            pulumi.set(__self__, "appdynamics", appdynamics)
        if appinsights is not None:
            pulumi.set(__self__, "appinsights", appinsights)
        if arangodb is not None:
            pulumi.set(__self__, "arangodb", arangodb)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if awslambda is not None:
            pulumi.set(__self__, "awslambda", awslambda)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if baremetal is not None:
            pulumi.set(__self__, "baremetal", baremetal)
        if chronograf is not None:
            pulumi.set(__self__, "chronograf", chronograf)
        if cloudfoundry is not None:
            pulumi.set(__self__, "cloudfoundry", cloudfoundry)
        if clustermgr is not None:
            pulumi.set(__self__, "clustermgr", clustermgr)
        if compellent is not None:
            pulumi.set(__self__, "compellent", compellent)
        if consul is not None:
            pulumi.set(__self__, "consul", consul)
        if control is not None:
            pulumi.set(__self__, "control", control)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if datacloud is not None:
            pulumi.set(__self__, "datacloud", datacloud)
        if datadog is not None:
            pulumi.set(__self__, "datadog", datadog)
        if db is not None:
            pulumi.set(__self__, "db", db)
        if dynatrace is not None:
            pulumi.set(__self__, "dynatrace", dynatrace)
        if fluent_bit is not None:
            pulumi.set(__self__, "fluent_bit", fluent_bit)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if hds is not None:
            pulumi.set(__self__, "hds", hds)
        if history is not None:
            pulumi.set(__self__, "history", history)
        if horizon is not None:
            pulumi.set(__self__, "horizon", horizon)
        if hpe3par is not None:
            pulumi.set(__self__, "hpe3par", hpe3par)
        if hyperflex is not None:
            pulumi.set(__self__, "hyperflex", hyperflex)
        if hyperv is not None:
            pulumi.set(__self__, "hyperv", hyperv)
        if influxdb is not None:
            pulumi.set(__self__, "influxdb", influxdb)
        if intersight is not None:
            pulumi.set(__self__, "intersight", intersight)
        if istio is not None:
            pulumi.set(__self__, "istio", istio)
        if istioingress is not None:
            pulumi.set(__self__, "istioingress", istioingress)
        if jaeger is not None:
            pulumi.set(__self__, "jaeger", jaeger)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kubeturbo is not None:
            pulumi.set(__self__, "kubeturbo", kubeturbo)
        if loki is not None:
            pulumi.set(__self__, "loki", loki)
        if market is not None:
            pulumi.set(__self__, "market", market)
        if mediation_acims is not None:
            pulumi.set(__self__, "mediation_acims", mediation_acims)
        if mediation_actionscript is not None:
            pulumi.set(__self__, "mediation_actionscript", mediation_actionscript)
        if mediation_aix is not None:
            pulumi.set(__self__, "mediation_aix", mediation_aix)
        if mediation_apic is not None:
            pulumi.set(__self__, "mediation_apic", mediation_apic)
        if mediation_appdynamics is not None:
            pulumi.set(__self__, "mediation_appdynamics", mediation_appdynamics)
        if mediation_appinsights is not None:
            pulumi.set(__self__, "mediation_appinsights", mediation_appinsights)
        if mediation_aws is not None:
            pulumi.set(__self__, "mediation_aws", mediation_aws)
        if mediation_awsbilling is not None:
            pulumi.set(__self__, "mediation_awsbilling", mediation_awsbilling)
        if mediation_awscost is not None:
            pulumi.set(__self__, "mediation_awscost", mediation_awscost)
        if mediation_awslambda is not None:
            pulumi.set(__self__, "mediation_awslambda", mediation_awslambda)
        if mediation_azure is not None:
            pulumi.set(__self__, "mediation_azure", mediation_azure)
        if mediation_azurecost is not None:
            pulumi.set(__self__, "mediation_azurecost", mediation_azurecost)
        if mediation_azureea is not None:
            pulumi.set(__self__, "mediation_azureea", mediation_azureea)
        if mediation_azuresp is not None:
            pulumi.set(__self__, "mediation_azuresp", mediation_azuresp)
        if mediation_azurevolumes is not None:
            pulumi.set(__self__, "mediation_azurevolumes", mediation_azurevolumes)
        if mediation_baremetal is not None:
            pulumi.set(__self__, "mediation_baremetal", mediation_baremetal)
        if mediation_cloudfoundry is not None:
            pulumi.set(__self__, "mediation_cloudfoundry", mediation_cloudfoundry)
        if mediation_compellent is not None:
            pulumi.set(__self__, "mediation_compellent", mediation_compellent)
        if mediation_customdata is not None:
            pulumi.set(__self__, "mediation_customdata", mediation_customdata)
        if mediation_datadog is not None:
            pulumi.set(__self__, "mediation_datadog", mediation_datadog)
        if mediation_dynatrace is not None:
            pulumi.set(__self__, "mediation_dynatrace", mediation_dynatrace)
        if mediation_gcp is not None:
            pulumi.set(__self__, "mediation_gcp", mediation_gcp)
        if mediation_gcpcost is not None:
            pulumi.set(__self__, "mediation_gcpcost", mediation_gcpcost)
        if mediation_hds is not None:
            pulumi.set(__self__, "mediation_hds", mediation_hds)
        if mediation_horizon is not None:
            pulumi.set(__self__, "mediation_horizon", mediation_horizon)
        if mediation_hpe3par is not None:
            pulumi.set(__self__, "mediation_hpe3par", mediation_hpe3par)
        if mediation_hyperflex is not None:
            pulumi.set(__self__, "mediation_hyperflex", mediation_hyperflex)
        if mediation_hyperv is not None:
            pulumi.set(__self__, "mediation_hyperv", mediation_hyperv)
        if mediation_intersight is not None:
            pulumi.set(__self__, "mediation_intersight", mediation_intersight)
        if mediation_intersighthyperflex is not None:
            pulumi.set(__self__, "mediation_intersighthyperflex", mediation_intersighthyperflex)
        if mediation_intersightucs is not None:
            pulumi.set(__self__, "mediation_intersightucs", mediation_intersightucs)
        if mediation_istio is not None:
            pulumi.set(__self__, "mediation_istio", mediation_istio)
        if mediation_mssql is not None:
            pulumi.set(__self__, "mediation_mssql", mediation_mssql)
        if mediation_mysql is not None:
            pulumi.set(__self__, "mediation_mysql", mediation_mysql)
        if mediation_netapp is not None:
            pulumi.set(__self__, "mediation_netapp", mediation_netapp)
        if mediation_netflow is not None:
            pulumi.set(__self__, "mediation_netflow", mediation_netflow)
        if mediation_newrelic is not None:
            pulumi.set(__self__, "mediation_newrelic", mediation_newrelic)
        if mediation_nutanix is not None:
            pulumi.set(__self__, "mediation_nutanix", mediation_nutanix)
        if mediation_oneview is not None:
            pulumi.set(__self__, "mediation_oneview", mediation_oneview)
        if mediation_openstack is not None:
            pulumi.set(__self__, "mediation_openstack", mediation_openstack)
        if mediation_pivotal is not None:
            pulumi.set(__self__, "mediation_pivotal", mediation_pivotal)
        if mediation_pure is not None:
            pulumi.set(__self__, "mediation_pure", mediation_pure)
        if mediation_rhv is not None:
            pulumi.set(__self__, "mediation_rhv", mediation_rhv)
        if mediation_scaleio is not None:
            pulumi.set(__self__, "mediation_scaleio", mediation_scaleio)
        if mediation_snmp is not None:
            pulumi.set(__self__, "mediation_snmp", mediation_snmp)
        if mediation_terraform is not None:
            pulumi.set(__self__, "mediation_terraform", mediation_terraform)
        if mediation_tetration is not None:
            pulumi.set(__self__, "mediation_tetration", mediation_tetration)
        if mediation_tomcat is not None:
            pulumi.set(__self__, "mediation_tomcat", mediation_tomcat)
        if mediation_ucs is not None:
            pulumi.set(__self__, "mediation_ucs", mediation_ucs)
        if mediation_ucsdirector is not None:
            pulumi.set(__self__, "mediation_ucsdirector", mediation_ucsdirector)
        if mediation_vcd is not None:
            pulumi.set(__self__, "mediation_vcd", mediation_vcd)
        if mediation_vcenter is not None:
            pulumi.set(__self__, "mediation_vcenter", mediation_vcenter)
        if mediation_vcenterbrowsing is not None:
            pulumi.set(__self__, "mediation_vcenterbrowsing", mediation_vcenterbrowsing)
        if mediation_vmax is not None:
            pulumi.set(__self__, "mediation_vmax", mediation_vmax)
        if mediation_vmm is not None:
            pulumi.set(__self__, "mediation_vmm", mediation_vmm)
        if mediation_vplex is not None:
            pulumi.set(__self__, "mediation_vplex", mediation_vplex)
        if mediation_wmi is not None:
            pulumi.set(__self__, "mediation_wmi", mediation_wmi)
        if mediation_xtremio is not None:
            pulumi.set(__self__, "mediation_xtremio", mediation_xtremio)
        if metron is not None:
            pulumi.set(__self__, "metron", metron)
        if mssql is not None:
            pulumi.set(__self__, "mssql", mssql)
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if netapp is not None:
            pulumi.set(__self__, "netapp", netapp)
        if netflow is not None:
            pulumi.set(__self__, "netflow", netflow)
        if newrelic is not None:
            pulumi.set(__self__, "newrelic", newrelic)
        if nginxingress is not None:
            pulumi.set(__self__, "nginxingress", nginxingress)
        if nutanix is not None:
            pulumi.set(__self__, "nutanix", nutanix)
        if oneview is not None:
            pulumi.set(__self__, "oneview", oneview)
        if openshiftingress is not None:
            pulumi.set(__self__, "openshiftingress", openshiftingress)
        if openstack is not None:
            pulumi.set(__self__, "openstack", openstack)
        if pivotal is not None:
            pulumi.set(__self__, "pivotal", pivotal)
        if plan_orchestrator is not None:
            pulumi.set(__self__, "plan_orchestrator", plan_orchestrator)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if prometheus_mysql_exporter is not None:
            pulumi.set(__self__, "prometheus_mysql_exporter", prometheus_mysql_exporter)
        if prometurbo is not None:
            pulumi.set(__self__, "prometurbo", prometurbo)
        if promtail is not None:
            pulumi.set(__self__, "promtail", promtail)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if pure is not None:
            pulumi.set(__self__, "pure", pure)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if rhv is not None:
            pulumi.set(__self__, "rhv", rhv)
        if rsyslog is not None:
            pulumi.set(__self__, "rsyslog", rsyslog)
        if scaleio is not None:
            pulumi.set(__self__, "scaleio", scaleio)
        if snmp is not None:
            pulumi.set(__self__, "snmp", snmp)
        if terraform is not None:
            pulumi.set(__self__, "terraform", terraform)
        if tetration is not None:
            pulumi.set(__self__, "tetration", tetration)
        if timescaledb is not None:
            pulumi.set(__self__, "timescaledb", timescaledb)
        if topology_processor is not None:
            pulumi.set(__self__, "topology_processor", topology_processor)
        if ucs is not None:
            pulumi.set(__self__, "ucs", ucs)
        if ucsdirector is not None:
            pulumi.set(__self__, "ucsdirector", ucsdirector)
        if ui is not None:
            pulumi.set(__self__, "ui", ui)
        if vcd is not None:
            pulumi.set(__self__, "vcd", vcd)
        if vcenter is not None:
            pulumi.set(__self__, "vcenter", vcenter)
        if vmax is not None:
            pulumi.set(__self__, "vmax", vmax)
        if vmm is not None:
            pulumi.set(__self__, "vmm", vmm)
        if vplex is not None:
            pulumi.set(__self__, "vplex", vplex)
        if wmi is not None:
            pulumi.set(__self__, "wmi", wmi)
        if xtremio is not None:
            pulumi.set(__self__, "xtremio", xtremio)
        if zookeeper is not None:
            pulumi.set(__self__, "zookeeper", zookeeper)

    @property
    @pulumi.getter
    def acims(self) -> Optional['outputs.XlSpecAcims']:
        return pulumi.get(self, "acims")

    @property
    @pulumi.getter(name="action-orchestrator")
    def action_orchestrator(self) -> Optional['outputs.XlSpecAction-Orchestrator']:
        return pulumi.get(self, "action_orchestrator")

    @property
    @pulumi.getter
    def actionscript(self) -> Optional['outputs.XlSpecActionscript']:
        return pulumi.get(self, "actionscript")

    @property
    @pulumi.getter
    def aix(self) -> Optional['outputs.XlSpecAix']:
        return pulumi.get(self, "aix")

    @property
    @pulumi.getter
    def api(self) -> Optional['outputs.XlSpecApi']:
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def apic(self) -> Optional['outputs.XlSpecApic']:
        return pulumi.get(self, "apic")

    @property
    @pulumi.getter
    def appdynamics(self) -> Optional['outputs.XlSpecAppdynamics']:
        return pulumi.get(self, "appdynamics")

    @property
    @pulumi.getter
    def appinsights(self) -> Optional['outputs.XlSpecAppinsights']:
        return pulumi.get(self, "appinsights")

    @property
    @pulumi.getter
    def arangodb(self) -> Optional['outputs.XlSpecArangodb']:
        return pulumi.get(self, "arangodb")

    @property
    @pulumi.getter
    def auth(self) -> Optional['outputs.XlSpecAuth']:
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter
    def aws(self) -> Optional['outputs.XlSpecAws']:
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter
    def awslambda(self) -> Optional['outputs.XlSpecAwslambda']:
        return pulumi.get(self, "awslambda")

    @property
    @pulumi.getter
    def azure(self) -> Optional['outputs.XlSpecAzure']:
        return pulumi.get(self, "azure")

    @property
    @pulumi.getter
    def baremetal(self) -> Optional['outputs.XlSpecBaremetal']:
        return pulumi.get(self, "baremetal")

    @property
    @pulumi.getter
    def chronograf(self) -> Optional['outputs.XlSpecChronograf']:
        return pulumi.get(self, "chronograf")

    @property
    @pulumi.getter
    def cloudfoundry(self) -> Optional['outputs.XlSpecCloudfoundry']:
        return pulumi.get(self, "cloudfoundry")

    @property
    @pulumi.getter
    def clustermgr(self) -> Optional['outputs.XlSpecClustermgr']:
        return pulumi.get(self, "clustermgr")

    @property
    @pulumi.getter
    def compellent(self) -> Optional['outputs.XlSpecCompellent']:
        return pulumi.get(self, "compellent")

    @property
    @pulumi.getter
    def consul(self) -> Optional['outputs.XlSpecConsul']:
        return pulumi.get(self, "consul")

    @property
    @pulumi.getter
    def control(self) -> Optional['outputs.XlSpecControl']:
        return pulumi.get(self, "control")

    @property
    @pulumi.getter
    def cost(self) -> Optional['outputs.XlSpecCost']:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def datacloud(self) -> Optional['outputs.XlSpecDatacloud']:
        return pulumi.get(self, "datacloud")

    @property
    @pulumi.getter
    def datadog(self) -> Optional['outputs.XlSpecDatadog']:
        return pulumi.get(self, "datadog")

    @property
    @pulumi.getter
    def db(self) -> Optional['outputs.XlSpecDb']:
        return pulumi.get(self, "db")

    @property
    @pulumi.getter
    def dynatrace(self) -> Optional['outputs.XlSpecDynatrace']:
        return pulumi.get(self, "dynatrace")

    @property
    @pulumi.getter(name="fluent-bit")
    def fluent_bit(self) -> Optional['outputs.XlSpecFluent-Bit']:
        return pulumi.get(self, "fluent_bit")

    @property
    @pulumi.getter
    def gcp(self) -> Optional['outputs.XlSpecGcp']:
        return pulumi.get(self, "gcp")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional['outputs.XlSpecGlobal']:
        """
        Platform configuration options
        """
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def grafana(self) -> Optional['outputs.XlSpecGrafana']:
        return pulumi.get(self, "grafana")

    @property
    @pulumi.getter
    def group(self) -> Optional['outputs.XlSpecGroup']:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def hds(self) -> Optional['outputs.XlSpecHds']:
        return pulumi.get(self, "hds")

    @property
    @pulumi.getter
    def history(self) -> Optional['outputs.XlSpecHistory']:
        return pulumi.get(self, "history")

    @property
    @pulumi.getter
    def horizon(self) -> Optional['outputs.XlSpecHorizon']:
        return pulumi.get(self, "horizon")

    @property
    @pulumi.getter
    def hpe3par(self) -> Optional['outputs.XlSpecHpe3par']:
        return pulumi.get(self, "hpe3par")

    @property
    @pulumi.getter
    def hyperflex(self) -> Optional['outputs.XlSpecHyperflex']:
        return pulumi.get(self, "hyperflex")

    @property
    @pulumi.getter
    def hyperv(self) -> Optional['outputs.XlSpecHyperv']:
        return pulumi.get(self, "hyperv")

    @property
    @pulumi.getter
    def influxdb(self) -> Optional['outputs.XlSpecInfluxdb']:
        return pulumi.get(self, "influxdb")

    @property
    @pulumi.getter
    def intersight(self) -> Optional['outputs.XlSpecIntersight']:
        return pulumi.get(self, "intersight")

    @property
    @pulumi.getter
    def istio(self) -> Optional['outputs.XlSpecIstio']:
        return pulumi.get(self, "istio")

    @property
    @pulumi.getter
    def istioingress(self) -> Optional['outputs.XlSpecIstioingress']:
        return pulumi.get(self, "istioingress")

    @property
    @pulumi.getter
    def jaeger(self) -> Optional['outputs.XlSpecJaeger']:
        return pulumi.get(self, "jaeger")

    @property
    @pulumi.getter
    def kafka(self) -> Optional['outputs.XlSpecKafka']:
        return pulumi.get(self, "kafka")

    @property
    @pulumi.getter
    def kubeturbo(self) -> Optional['outputs.XlSpecKubeturbo']:
        return pulumi.get(self, "kubeturbo")

    @property
    @pulumi.getter
    def loki(self) -> Optional['outputs.XlSpecLoki']:
        return pulumi.get(self, "loki")

    @property
    @pulumi.getter
    def market(self) -> Optional['outputs.XlSpecMarket']:
        return pulumi.get(self, "market")

    @property
    @pulumi.getter(name="mediation-acims")
    def mediation_acims(self) -> Optional['outputs.XlSpecMediation-Acims']:
        return pulumi.get(self, "mediation_acims")

    @property
    @pulumi.getter(name="mediation-actionscript")
    def mediation_actionscript(self) -> Optional['outputs.XlSpecMediation-Actionscript']:
        return pulumi.get(self, "mediation_actionscript")

    @property
    @pulumi.getter(name="mediation-aix")
    def mediation_aix(self) -> Optional['outputs.XlSpecMediation-Aix']:
        return pulumi.get(self, "mediation_aix")

    @property
    @pulumi.getter(name="mediation-apic")
    def mediation_apic(self) -> Optional['outputs.XlSpecMediation-Apic']:
        return pulumi.get(self, "mediation_apic")

    @property
    @pulumi.getter(name="mediation-appdynamics")
    def mediation_appdynamics(self) -> Optional['outputs.XlSpecMediation-Appdynamics']:
        return pulumi.get(self, "mediation_appdynamics")

    @property
    @pulumi.getter(name="mediation-appinsights")
    def mediation_appinsights(self) -> Optional['outputs.XlSpecMediation-Appinsights']:
        return pulumi.get(self, "mediation_appinsights")

    @property
    @pulumi.getter(name="mediation-aws")
    def mediation_aws(self) -> Optional['outputs.XlSpecMediation-Aws']:
        return pulumi.get(self, "mediation_aws")

    @property
    @pulumi.getter(name="mediation-awsbilling")
    def mediation_awsbilling(self) -> Optional['outputs.XlSpecMediation-Awsbilling']:
        return pulumi.get(self, "mediation_awsbilling")

    @property
    @pulumi.getter(name="mediation-awscost")
    def mediation_awscost(self) -> Optional['outputs.XlSpecMediation-Awscost']:
        return pulumi.get(self, "mediation_awscost")

    @property
    @pulumi.getter(name="mediation-awslambda")
    def mediation_awslambda(self) -> Optional['outputs.XlSpecMediation-Awslambda']:
        return pulumi.get(self, "mediation_awslambda")

    @property
    @pulumi.getter(name="mediation-azure")
    def mediation_azure(self) -> Optional['outputs.XlSpecMediation-Azure']:
        return pulumi.get(self, "mediation_azure")

    @property
    @pulumi.getter(name="mediation-azurecost")
    def mediation_azurecost(self) -> Optional['outputs.XlSpecMediation-Azurecost']:
        return pulumi.get(self, "mediation_azurecost")

    @property
    @pulumi.getter(name="mediation-azureea")
    def mediation_azureea(self) -> Optional['outputs.XlSpecMediation-Azureea']:
        return pulumi.get(self, "mediation_azureea")

    @property
    @pulumi.getter(name="mediation-azuresp")
    def mediation_azuresp(self) -> Optional['outputs.XlSpecMediation-Azuresp']:
        return pulumi.get(self, "mediation_azuresp")

    @property
    @pulumi.getter(name="mediation-azurevolumes")
    def mediation_azurevolumes(self) -> Optional['outputs.XlSpecMediation-Azurevolumes']:
        return pulumi.get(self, "mediation_azurevolumes")

    @property
    @pulumi.getter(name="mediation-baremetal")
    def mediation_baremetal(self) -> Optional['outputs.XlSpecMediation-Baremetal']:
        return pulumi.get(self, "mediation_baremetal")

    @property
    @pulumi.getter(name="mediation-cloudfoundry")
    def mediation_cloudfoundry(self) -> Optional['outputs.XlSpecMediation-Cloudfoundry']:
        return pulumi.get(self, "mediation_cloudfoundry")

    @property
    @pulumi.getter(name="mediation-compellent")
    def mediation_compellent(self) -> Optional['outputs.XlSpecMediation-Compellent']:
        return pulumi.get(self, "mediation_compellent")

    @property
    @pulumi.getter(name="mediation-customdata")
    def mediation_customdata(self) -> Optional['outputs.XlSpecMediation-Customdata']:
        return pulumi.get(self, "mediation_customdata")

    @property
    @pulumi.getter(name="mediation-datadog")
    def mediation_datadog(self) -> Optional['outputs.XlSpecMediation-Datadog']:
        return pulumi.get(self, "mediation_datadog")

    @property
    @pulumi.getter(name="mediation-dynatrace")
    def mediation_dynatrace(self) -> Optional['outputs.XlSpecMediation-Dynatrace']:
        return pulumi.get(self, "mediation_dynatrace")

    @property
    @pulumi.getter(name="mediation-gcp")
    def mediation_gcp(self) -> Optional['outputs.XlSpecMediation-Gcp']:
        return pulumi.get(self, "mediation_gcp")

    @property
    @pulumi.getter(name="mediation-gcpcost")
    def mediation_gcpcost(self) -> Optional['outputs.XlSpecMediation-Gcpcost']:
        return pulumi.get(self, "mediation_gcpcost")

    @property
    @pulumi.getter(name="mediation-hds")
    def mediation_hds(self) -> Optional['outputs.XlSpecMediation-Hds']:
        return pulumi.get(self, "mediation_hds")

    @property
    @pulumi.getter(name="mediation-horizon")
    def mediation_horizon(self) -> Optional['outputs.XlSpecMediation-Horizon']:
        return pulumi.get(self, "mediation_horizon")

    @property
    @pulumi.getter(name="mediation-hpe3par")
    def mediation_hpe3par(self) -> Optional['outputs.XlSpecMediation-Hpe3par']:
        return pulumi.get(self, "mediation_hpe3par")

    @property
    @pulumi.getter(name="mediation-hyperflex")
    def mediation_hyperflex(self) -> Optional['outputs.XlSpecMediation-Hyperflex']:
        return pulumi.get(self, "mediation_hyperflex")

    @property
    @pulumi.getter(name="mediation-hyperv")
    def mediation_hyperv(self) -> Optional['outputs.XlSpecMediation-Hyperv']:
        return pulumi.get(self, "mediation_hyperv")

    @property
    @pulumi.getter(name="mediation-intersight")
    def mediation_intersight(self) -> Optional['outputs.XlSpecMediation-Intersight']:
        return pulumi.get(self, "mediation_intersight")

    @property
    @pulumi.getter(name="mediation-intersighthyperflex")
    def mediation_intersighthyperflex(self) -> Optional['outputs.XlSpecMediation-Intersighthyperflex']:
        return pulumi.get(self, "mediation_intersighthyperflex")

    @property
    @pulumi.getter(name="mediation-intersightucs")
    def mediation_intersightucs(self) -> Optional['outputs.XlSpecMediation-Intersightucs']:
        return pulumi.get(self, "mediation_intersightucs")

    @property
    @pulumi.getter(name="mediation-istio")
    def mediation_istio(self) -> Optional['outputs.XlSpecMediation-Istio']:
        return pulumi.get(self, "mediation_istio")

    @property
    @pulumi.getter(name="mediation-mssql")
    def mediation_mssql(self) -> Optional['outputs.XlSpecMediation-Mssql']:
        return pulumi.get(self, "mediation_mssql")

    @property
    @pulumi.getter(name="mediation-mysql")
    def mediation_mysql(self) -> Optional['outputs.XlSpecMediation-Mysql']:
        return pulumi.get(self, "mediation_mysql")

    @property
    @pulumi.getter(name="mediation-netapp")
    def mediation_netapp(self) -> Optional['outputs.XlSpecMediation-Netapp']:
        return pulumi.get(self, "mediation_netapp")

    @property
    @pulumi.getter(name="mediation-netflow")
    def mediation_netflow(self) -> Optional['outputs.XlSpecMediation-Netflow']:
        return pulumi.get(self, "mediation_netflow")

    @property
    @pulumi.getter(name="mediation-newrelic")
    def mediation_newrelic(self) -> Optional['outputs.XlSpecMediation-Newrelic']:
        return pulumi.get(self, "mediation_newrelic")

    @property
    @pulumi.getter(name="mediation-nutanix")
    def mediation_nutanix(self) -> Optional['outputs.XlSpecMediation-Nutanix']:
        return pulumi.get(self, "mediation_nutanix")

    @property
    @pulumi.getter(name="mediation-oneview")
    def mediation_oneview(self) -> Optional['outputs.XlSpecMediation-Oneview']:
        return pulumi.get(self, "mediation_oneview")

    @property
    @pulumi.getter(name="mediation-openstack")
    def mediation_openstack(self) -> Optional['outputs.XlSpecMediation-Openstack']:
        return pulumi.get(self, "mediation_openstack")

    @property
    @pulumi.getter(name="mediation-pivotal")
    def mediation_pivotal(self) -> Optional['outputs.XlSpecMediation-Pivotal']:
        return pulumi.get(self, "mediation_pivotal")

    @property
    @pulumi.getter(name="mediation-pure")
    def mediation_pure(self) -> Optional['outputs.XlSpecMediation-Pure']:
        return pulumi.get(self, "mediation_pure")

    @property
    @pulumi.getter(name="mediation-rhv")
    def mediation_rhv(self) -> Optional['outputs.XlSpecMediation-Rhv']:
        return pulumi.get(self, "mediation_rhv")

    @property
    @pulumi.getter(name="mediation-scaleio")
    def mediation_scaleio(self) -> Optional['outputs.XlSpecMediation-Scaleio']:
        return pulumi.get(self, "mediation_scaleio")

    @property
    @pulumi.getter(name="mediation-snmp")
    def mediation_snmp(self) -> Optional['outputs.XlSpecMediation-Snmp']:
        return pulumi.get(self, "mediation_snmp")

    @property
    @pulumi.getter(name="mediation-terraform")
    def mediation_terraform(self) -> Optional['outputs.XlSpecMediation-Terraform']:
        return pulumi.get(self, "mediation_terraform")

    @property
    @pulumi.getter(name="mediation-tetration")
    def mediation_tetration(self) -> Optional['outputs.XlSpecMediation-Tetration']:
        return pulumi.get(self, "mediation_tetration")

    @property
    @pulumi.getter(name="mediation-tomcat")
    def mediation_tomcat(self) -> Optional['outputs.XlSpecMediation-Tomcat']:
        return pulumi.get(self, "mediation_tomcat")

    @property
    @pulumi.getter(name="mediation-ucs")
    def mediation_ucs(self) -> Optional['outputs.XlSpecMediation-Ucs']:
        return pulumi.get(self, "mediation_ucs")

    @property
    @pulumi.getter(name="mediation-ucsdirector")
    def mediation_ucsdirector(self) -> Optional['outputs.XlSpecMediation-Ucsdirector']:
        return pulumi.get(self, "mediation_ucsdirector")

    @property
    @pulumi.getter(name="mediation-vcd")
    def mediation_vcd(self) -> Optional['outputs.XlSpecMediation-Vcd']:
        return pulumi.get(self, "mediation_vcd")

    @property
    @pulumi.getter(name="mediation-vcenter")
    def mediation_vcenter(self) -> Optional['outputs.XlSpecMediation-Vcenter']:
        return pulumi.get(self, "mediation_vcenter")

    @property
    @pulumi.getter(name="mediation-vcenterbrowsing")
    def mediation_vcenterbrowsing(self) -> Optional['outputs.XlSpecMediation-Vcenterbrowsing']:
        return pulumi.get(self, "mediation_vcenterbrowsing")

    @property
    @pulumi.getter(name="mediation-vmax")
    def mediation_vmax(self) -> Optional['outputs.XlSpecMediation-Vmax']:
        return pulumi.get(self, "mediation_vmax")

    @property
    @pulumi.getter(name="mediation-vmm")
    def mediation_vmm(self) -> Optional['outputs.XlSpecMediation-Vmm']:
        return pulumi.get(self, "mediation_vmm")

    @property
    @pulumi.getter(name="mediation-vplex")
    def mediation_vplex(self) -> Optional['outputs.XlSpecMediation-Vplex']:
        return pulumi.get(self, "mediation_vplex")

    @property
    @pulumi.getter(name="mediation-wmi")
    def mediation_wmi(self) -> Optional['outputs.XlSpecMediation-Wmi']:
        return pulumi.get(self, "mediation_wmi")

    @property
    @pulumi.getter(name="mediation-xtremio")
    def mediation_xtremio(self) -> Optional['outputs.XlSpecMediation-Xtremio']:
        return pulumi.get(self, "mediation_xtremio")

    @property
    @pulumi.getter
    def metron(self) -> Optional['outputs.XlSpecMetron']:
        return pulumi.get(self, "metron")

    @property
    @pulumi.getter
    def mssql(self) -> Optional['outputs.XlSpecMssql']:
        return pulumi.get(self, "mssql")

    @property
    @pulumi.getter
    def mysql(self) -> Optional['outputs.XlSpecMysql']:
        return pulumi.get(self, "mysql")

    @property
    @pulumi.getter
    def netapp(self) -> Optional['outputs.XlSpecNetapp']:
        return pulumi.get(self, "netapp")

    @property
    @pulumi.getter
    def netflow(self) -> Optional['outputs.XlSpecNetflow']:
        return pulumi.get(self, "netflow")

    @property
    @pulumi.getter
    def newrelic(self) -> Optional['outputs.XlSpecNewrelic']:
        return pulumi.get(self, "newrelic")

    @property
    @pulumi.getter
    def nginxingress(self) -> Optional['outputs.XlSpecNginxingress']:
        return pulumi.get(self, "nginxingress")

    @property
    @pulumi.getter
    def nutanix(self) -> Optional['outputs.XlSpecNutanix']:
        return pulumi.get(self, "nutanix")

    @property
    @pulumi.getter
    def oneview(self) -> Optional['outputs.XlSpecOneview']:
        return pulumi.get(self, "oneview")

    @property
    @pulumi.getter
    def openshiftingress(self) -> Optional['outputs.XlSpecOpenshiftingress']:
        return pulumi.get(self, "openshiftingress")

    @property
    @pulumi.getter
    def openstack(self) -> Optional['outputs.XlSpecOpenstack']:
        return pulumi.get(self, "openstack")

    @property
    @pulumi.getter
    def pivotal(self) -> Optional['outputs.XlSpecPivotal']:
        return pulumi.get(self, "pivotal")

    @property
    @pulumi.getter(name="plan-orchestrator")
    def plan_orchestrator(self) -> Optional['outputs.XlSpecPlan-Orchestrator']:
        return pulumi.get(self, "plan_orchestrator")

    @property
    @pulumi.getter
    def platform(self) -> Optional['outputs.XlSpecPlatform']:
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def prometheus(self) -> Optional['outputs.XlSpecPrometheus']:
        return pulumi.get(self, "prometheus")

    @property
    @pulumi.getter(name="prometheus-mysql-exporter")
    def prometheus_mysql_exporter(self) -> Optional['outputs.XlSpecPrometheus-Mysql-Exporter']:
        return pulumi.get(self, "prometheus_mysql_exporter")

    @property
    @pulumi.getter
    def prometurbo(self) -> Optional['outputs.XlSpecPrometurbo']:
        return pulumi.get(self, "prometurbo")

    @property
    @pulumi.getter
    def promtail(self) -> Optional['outputs.XlSpecPromtail']:
        return pulumi.get(self, "promtail")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.XlSpecProperties']:
        """
        Custom property overrides
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def pure(self) -> Optional['outputs.XlSpecPure']:
        return pulumi.get(self, "pure")

    @property
    @pulumi.getter
    def repository(self) -> Optional['outputs.XlSpecRepository']:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def rhv(self) -> Optional['outputs.XlSpecRhv']:
        return pulumi.get(self, "rhv")

    @property
    @pulumi.getter
    def rsyslog(self) -> Optional['outputs.XlSpecRsyslog']:
        return pulumi.get(self, "rsyslog")

    @property
    @pulumi.getter
    def scaleio(self) -> Optional['outputs.XlSpecScaleio']:
        return pulumi.get(self, "scaleio")

    @property
    @pulumi.getter
    def snmp(self) -> Optional['outputs.XlSpecSnmp']:
        return pulumi.get(self, "snmp")

    @property
    @pulumi.getter
    def terraform(self) -> Optional['outputs.XlSpecTerraform']:
        return pulumi.get(self, "terraform")

    @property
    @pulumi.getter
    def tetration(self) -> Optional['outputs.XlSpecTetration']:
        return pulumi.get(self, "tetration")

    @property
    @pulumi.getter
    def timescaledb(self) -> Optional['outputs.XlSpecTimescaledb']:
        return pulumi.get(self, "timescaledb")

    @property
    @pulumi.getter(name="topology-processor")
    def topology_processor(self) -> Optional['outputs.XlSpecTopology-Processor']:
        return pulumi.get(self, "topology_processor")

    @property
    @pulumi.getter
    def ucs(self) -> Optional['outputs.XlSpecUcs']:
        return pulumi.get(self, "ucs")

    @property
    @pulumi.getter
    def ucsdirector(self) -> Optional['outputs.XlSpecUcsdirector']:
        return pulumi.get(self, "ucsdirector")

    @property
    @pulumi.getter
    def ui(self) -> Optional['outputs.XlSpecUi']:
        return pulumi.get(self, "ui")

    @property
    @pulumi.getter
    def vcd(self) -> Optional['outputs.XlSpecVcd']:
        return pulumi.get(self, "vcd")

    @property
    @pulumi.getter
    def vcenter(self) -> Optional['outputs.XlSpecVcenter']:
        return pulumi.get(self, "vcenter")

    @property
    @pulumi.getter
    def vmax(self) -> Optional['outputs.XlSpecVmax']:
        return pulumi.get(self, "vmax")

    @property
    @pulumi.getter
    def vmm(self) -> Optional['outputs.XlSpecVmm']:
        return pulumi.get(self, "vmm")

    @property
    @pulumi.getter
    def vplex(self) -> Optional['outputs.XlSpecVplex']:
        return pulumi.get(self, "vplex")

    @property
    @pulumi.getter
    def wmi(self) -> Optional['outputs.XlSpecWmi']:
        return pulumi.get(self, "wmi")

    @property
    @pulumi.getter
    def xtremio(self) -> Optional['outputs.XlSpecXtremio']:
        return pulumi.get(self, "xtremio")

    @property
    @pulumi.getter
    def zookeeper(self) -> Optional['outputs.XlSpecZookeeper']:
        return pulumi.get(self, "zookeeper")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecAcims(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Cisco APIC mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Cisco APIC mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecAction-Orchestrator(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecAction-OrchestratorImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecAction-OrchestratorResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecAction-OrchestratorImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecAction-OrchestratorResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecAction-OrchestratorImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecAction-OrchestratorResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecAction-OrchestratorImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecAction-OrchestratorResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecAction-OrchestratorResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecAction-OrchestratorResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecAction-OrchestratorResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecAction-OrchestratorResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecActionscript(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable actionscript mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable actionscript mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecAix(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable AIX mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable AIX mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecApi(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecApiImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecApiResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecApiImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecApiResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecApiImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecApiResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecApiImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecApiResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecApiResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecApiResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecApiResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecApiResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecApic(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Cisco APIC mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Cisco APIC mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecAppdynamics(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable AppDynamics mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable AppDynamics mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecAppinsights(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Azure App Insights mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Azure App Insights mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecArangodb(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 image: Optional['outputs.XlSpecArangodbImage'] = None,
                 persistence: Optional['outputs.XlSpecArangodbPersistence'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param 'XlSpecArangodbImageArgs' image: component specific image options
        :param 'XlSpecArangodbPersistenceArgs' persistence: arangodb persistence options
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecArangodbImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def persistence(self) -> Optional['outputs.XlSpecArangodbPersistence']:
        """
        arangodb persistence options
        """
        return pulumi.get(self, "persistence")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecArangodbImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecArangodbPersistence(dict):
    """
    arangodb persistence options
    """
    def __init__(__self__, *,
                 apps: Optional[str] = None,
                 arangodb: Optional[str] = None,
                 dump: Optional[str] = None):
        """
        arangodb persistence options
        :param str apps: arangodb apps persistent volume size
        :param str arangodb: arangodb persistent volume size
        :param str dump: arangodb dump persistent volume size
        """
        if apps is not None:
            pulumi.set(__self__, "apps", apps)
        if arangodb is not None:
            pulumi.set(__self__, "arangodb", arangodb)
        if dump is not None:
            pulumi.set(__self__, "dump", dump)

    @property
    @pulumi.getter
    def apps(self) -> Optional[str]:
        """
        arangodb apps persistent volume size
        """
        return pulumi.get(self, "apps")

    @property
    @pulumi.getter
    def arangodb(self) -> Optional[str]:
        """
        arangodb persistent volume size
        """
        return pulumi.get(self, "arangodb")

    @property
    @pulumi.getter
    def dump(self) -> Optional[str]:
        """
        arangodb dump persistent volume size
        """
        return pulumi.get(self, "dump")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecAuth(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecAuthImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecAuthResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecAuthImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecAuthResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecAuthImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecAuthResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecAuthImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecAuthResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecAuthResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecAuthResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecAuthResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecAuthResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecAws(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable AWS mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable AWS mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecAwslambda(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable AWS Lambda mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable AWS Lambda mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecAzure(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Azure mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Azure mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecBaremetal(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable baremetal mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable baremetal mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecChronograf(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable chronograf
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable chronograf
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecCloudfoundry(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Cloud Foundry mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Cloud Foundry mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecClustermgr(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecClustermgrImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecClustermgrResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecClustermgrImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecClustermgrResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecClustermgrImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecClustermgrResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecClustermgrImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecClustermgrResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecClustermgrResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecClustermgrResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecClustermgrResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecClustermgrResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecCompellent(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Compellent mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Compellent mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecConsul(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 image: Optional['outputs.XlSpecConsulImage'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param 'XlSpecConsulImageArgs' image: component specific image options
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecConsulImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecConsulImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecControl(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable platform licensed components
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable platform licensed components
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecCost(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecCostImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecCostResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecCostImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecCostResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecCostImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecCostResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecCostImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecCostResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecCostResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecCostResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecCostResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecCostResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecDatacloud(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 enabled: Optional[bool] = None,
                 image: Optional['outputs.XlSpecDatacloudImage'] = None,
                 sevone: Optional['outputs.XlSpecDatacloudSevone'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool enabled: Enable datacloud collector
        :param 'XlSpecDatacloudImageArgs' image: component specific image options
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if sevone is not None:
            pulumi.set(__self__, "sevone", sevone)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable datacloud collector
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecDatacloudImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def sevone(self) -> Optional['outputs.XlSpecDatacloudSevone']:
        return pulumi.get(self, "sevone")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecDatacloudImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecDatacloudSevone(dict):
    def __init__(__self__, *,
                 transport: Optional['outputs.XlSpecDatacloudSevoneTransport'] = None):
        """
        :param 'XlSpecDatacloudSevoneTransportArgs' transport: Sevone transport properties
        """
        if transport is not None:
            pulumi.set(__self__, "transport", transport)

    @property
    @pulumi.getter
    def transport(self) -> Optional['outputs.XlSpecDatacloudSevoneTransport']:
        """
        Sevone transport properties
        """
        return pulumi.get(self, "transport")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecDatacloudSevoneTransport(dict):
    """
    Sevone transport properties
    """
    def __init__(__self__, *,
                 settings: Optional['outputs.XlSpecDatacloudSevoneTransportSettings'] = None):
        """
        Sevone transport properties
        :param 'XlSpecDatacloudSevoneTransportSettingsArgs' settings: Sevone transport settings properties
        """
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def settings(self) -> Optional['outputs.XlSpecDatacloudSevoneTransportSettings']:
        """
        Sevone transport settings properties
        """
        return pulumi.get(self, "settings")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecDatacloudSevoneTransportSettings(dict):
    """
    Sevone transport settings properties
    """
    def __init__(__self__, *,
                 d_e__projec_t__id: Optional[str] = None):
        """
        Sevone transport settings properties
        :param str d_e__projec_t__id: Sevone datacloud project id
        """
        if d_e__projec_t__id is not None:
            pulumi.set(__self__, "d_e__projec_t__id", d_e__projec_t__id)

    @property
    @pulumi.getter(name="DE_PROJECT_ID")
    def d_e__projec_t__id(self) -> Optional[str]:
        """
        Sevone datacloud project id
        """
        return pulumi.get(self, "d_e__projec_t__id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecDatadog(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Datadog mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Datadog mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecDb(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 image: Optional['outputs.XlSpecDbImage'] = None,
                 persistence: Optional['outputs.XlSpecDbPersistence'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param 'XlSpecDbImageArgs' image: component specific image options
        :param 'XlSpecDbPersistenceArgs' persistence: MariaDB persistence options
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecDbImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def persistence(self) -> Optional['outputs.XlSpecDbPersistence']:
        """
        MariaDB persistence options
        """
        return pulumi.get(self, "persistence")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecDbImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecDbPersistence(dict):
    """
    MariaDB persistence options
    """
    def __init__(__self__, *,
                 size: Optional[str] = None):
        """
        MariaDB persistence options
        :param str size: MariaDB persistent volume size
        """
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        MariaDB persistent volume size
        """
        return pulumi.get(self, "size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecDynatrace(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Dynatrace mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Dynatrace mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecFluent-Bit(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable fluent log collection
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable fluent log collection
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecGcp(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable GCP mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable GCP mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecGlobal(dict):
    """
    Platform configuration options
    """
    def __init__(__self__, *,
                 affinity: Optional[Mapping[str, Any]] = None,
                 annotations: Optional[Mapping[str, Any]] = None,
                 certmanager: Optional['outputs.XlSpecGlobalCertmanager'] = None,
                 custom_image_names: Optional[bool] = None,
                 debug: Optional[bool] = None,
                 elk: Optional[bool] = None,
                 external_db_name: Optional[str] = None,
                 external_db_ip: Optional[str] = None,
                 external_ip: Optional[str] = None,
                 image_password: Optional[str] = None,
                 image_pull_secret: Optional[str] = None,
                 image_username: Optional[str] = None,
                 ingress: Optional['outputs.XlSpecGlobalIngress'] = None,
                 java_base_options: Optional[str] = None,
                 logtostdout: Optional[bool] = None,
                 node_selector: Optional[Mapping[str, Any]] = None,
                 pull_policy: Optional[str] = None,
                 readiness_period_secs: Optional[int] = None,
                 readiness_timeout_secs: Optional[int] = None,
                 registry: Optional[str] = None,
                 repository: Optional[str] = None,
                 security_context: Optional['outputs.XlSpecGlobalSecurityContext'] = None,
                 service_account_name: Optional[str] = None,
                 storage_annotations: Optional[Mapping[str, Any]] = None,
                 storage_class_name: Optional[str] = None,
                 storage_selector: Optional[bool] = None,
                 tag: Optional[str] = None,
                 tolerations: Optional[Sequence[Mapping[str, Any]]] = None):
        """
        Platform configuration options
        :param Mapping[str, Any] affinity: Global pod affinity list
        :param Mapping[str, Any] annotations: Global pod annotations list
        :param 'XlSpecGlobalCertmanagerArgs' certmanager: Certificate Manager configuration options
        :param bool custom_image_names: Use custom image names
        :param bool debug: Global debug
        :param bool elk: Install ELK stack
        :param str external_db_name: DNS name for external mysql compliant database server
        :param str external_db_ip: IP address for external mysql compliant database server
        :param str external_ip: Static external IP address for ingress LoadBalancer
        :param str image_password: Global image registry password for pull secret
        :param str image_pull_secret: Global image registry pull secret instead of credentials
        :param str image_username: Global image registry username for pull secret
        :param 'XlSpecGlobalIngressArgs' ingress: Certificate Manager configuration options
        :param str java_base_options: Global java options override
        :param bool logtostdout: Send logs to stdout of each microservices globally
        :param Mapping[str, Any] node_selector: Global pod nodeSelector list
        :param str pull_policy: Global image pull policy
        :param int readiness_period_secs: Global pod readiness period in seconds
        :param int readiness_timeout_secs: Global pod readiness timeout in seconds
        :param str registry: Global image registry name for pull secret
        :param str repository: Global container registry and repository name
        :param 'XlSpecGlobalSecurityContextArgs' security_context: Security Context for persistent volumes
        :param str service_account_name: Global serviceAccountName
        :param Mapping[str, Any] storage_annotations: Global pvc annotations list
        :param str storage_class_name: StorageClassName to be used for all persistent volume claims
        :param bool storage_selector: Use StorageSelector for statically provisioned persistent volume
        :param str tag: Global container tag
        :param Sequence[Mapping[str, Any]] tolerations: Global pod tolerations array
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if certmanager is not None:
            pulumi.set(__self__, "certmanager", certmanager)
        if custom_image_names is not None:
            pulumi.set(__self__, "custom_image_names", custom_image_names)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if elk is not None:
            pulumi.set(__self__, "elk", elk)
        if external_db_name is not None:
            pulumi.set(__self__, "external_db_name", external_db_name)
        if external_db_ip is not None:
            pulumi.set(__self__, "external_db_ip", external_db_ip)
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)
        if image_password is not None:
            pulumi.set(__self__, "image_password", image_password)
        if image_pull_secret is not None:
            pulumi.set(__self__, "image_pull_secret", image_pull_secret)
        if image_username is not None:
            pulumi.set(__self__, "image_username", image_username)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if java_base_options is not None:
            pulumi.set(__self__, "java_base_options", java_base_options)
        if logtostdout is not None:
            pulumi.set(__self__, "logtostdout", logtostdout)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if readiness_period_secs is not None:
            pulumi.set(__self__, "readiness_period_secs", readiness_period_secs)
        if readiness_timeout_secs is not None:
            pulumi.set(__self__, "readiness_timeout_secs", readiness_timeout_secs)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if storage_annotations is not None:
            pulumi.set(__self__, "storage_annotations", storage_annotations)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if storage_selector is not None:
            pulumi.set(__self__, "storage_selector", storage_selector)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[Mapping[str, Any]]:
        """
        Global pod affinity list
        """
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        Global pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def certmanager(self) -> Optional['outputs.XlSpecGlobalCertmanager']:
        """
        Certificate Manager configuration options
        """
        return pulumi.get(self, "certmanager")

    @property
    @pulumi.getter(name="customImageNames")
    def custom_image_names(self) -> Optional[bool]:
        """
        Use custom image names
        """
        return pulumi.get(self, "custom_image_names")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        Global debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def elk(self) -> Optional[bool]:
        """
        Install ELK stack
        """
        return pulumi.get(self, "elk")

    @property
    @pulumi.getter(name="externalDBName")
    def external_db_name(self) -> Optional[str]:
        """
        DNS name for external mysql compliant database server
        """
        return pulumi.get(self, "external_db_name")

    @property
    @pulumi.getter(name="externalDbIP")
    def external_db_ip(self) -> Optional[str]:
        """
        IP address for external mysql compliant database server
        """
        return pulumi.get(self, "external_db_ip")

    @property
    @pulumi.getter(name="externalIP")
    def external_ip(self) -> Optional[str]:
        """
        Static external IP address for ingress LoadBalancer
        """
        return pulumi.get(self, "external_ip")

    @property
    @pulumi.getter(name="imagePassword")
    def image_password(self) -> Optional[str]:
        """
        Global image registry password for pull secret
        """
        return pulumi.get(self, "image_password")

    @property
    @pulumi.getter(name="imagePullSecret")
    def image_pull_secret(self) -> Optional[str]:
        """
        Global image registry pull secret instead of credentials
        """
        return pulumi.get(self, "image_pull_secret")

    @property
    @pulumi.getter(name="imageUsername")
    def image_username(self) -> Optional[str]:
        """
        Global image registry username for pull secret
        """
        return pulumi.get(self, "image_username")

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.XlSpecGlobalIngress']:
        """
        Certificate Manager configuration options
        """
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter(name="javaBaseOptions")
    def java_base_options(self) -> Optional[str]:
        """
        Global java options override
        """
        return pulumi.get(self, "java_base_options")

    @property
    @pulumi.getter
    def logtostdout(self) -> Optional[bool]:
        """
        Send logs to stdout of each microservices globally
        """
        return pulumi.get(self, "logtostdout")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, Any]]:
        """
        Global pod nodeSelector list
        """
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        Global image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter(name="readinessPeriodSecs")
    def readiness_period_secs(self) -> Optional[int]:
        """
        Global pod readiness period in seconds
        """
        return pulumi.get(self, "readiness_period_secs")

    @property
    @pulumi.getter(name="readinessTimeoutSecs")
    def readiness_timeout_secs(self) -> Optional[int]:
        """
        Global pod readiness timeout in seconds
        """
        return pulumi.get(self, "readiness_timeout_secs")

    @property
    @pulumi.getter
    def registry(self) -> Optional[str]:
        """
        Global image registry name for pull secret
        """
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        Global container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.XlSpecGlobalSecurityContext']:
        """
        Security Context for persistent volumes
        """
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        Global serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter(name="storageAnnotations")
    def storage_annotations(self) -> Optional[Mapping[str, Any]]:
        """
        Global pvc annotations list
        """
        return pulumi.get(self, "storage_annotations")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        """
        StorageClassName to be used for all persistent volume claims
        """
        return pulumi.get(self, "storage_class_name")

    @property
    @pulumi.getter(name="storageSelector")
    def storage_selector(self) -> Optional[bool]:
        """
        Use StorageSelector for statically provisioned persistent volume
        """
        return pulumi.get(self, "storage_selector")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        Global container tag
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence[Mapping[str, Any]]]:
        """
        Global pod tolerations array
        """
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecGlobalCertmanager(dict):
    """
    Certificate Manager configuration options
    """
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 issuer: Optional[str] = None):
        """
        Certificate Manager configuration options
        :param bool enabled: If set to true, use cert-manager
        :param str issuer: The name of the certification issuer
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        If set to true, use cert-manager
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[str]:
        """
        The name of the certification issuer
        """
        return pulumi.get(self, "issuer")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecGlobalIngress(dict):
    """
    Certificate Manager configuration options
    """
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 domain: Optional[str] = None,
                 secrets: Optional[Sequence['outputs.XlSpecGlobalIngressSecrets']] = None):
        """
        Certificate Manager configuration options
        :param Mapping[str, Any] annotations: Ingress service annotations list
        :param str domain: Optional wildcard domain to accept ingress requests for
        :param Sequence['XlSpecGlobalIngressSecretsArgs'] secrets: Array of certificates to be created for the ingress
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        Ingress service annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        Optional wildcard domain to accept ingress requests for
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def secrets(self) -> Optional[Sequence['outputs.XlSpecGlobalIngressSecrets']]:
        """
        Array of certificates to be created for the ingress
        """
        return pulumi.get(self, "secrets")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecGlobalIngressSecrets(dict):
    def __init__(__self__, *,
                 certificate: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str certificate: The certificate in pem format
        :param str key: The cert key in pem format
        :param str name: The name of the certificate secret
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        """
        The certificate in pem format
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The cert key in pem format
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the certificate secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecGlobalSecurityContext(dict):
    """
    Security Context for persistent volumes
    """
    def __init__(__self__, *,
                 fs_group: Optional[int] = None):
        """
        Security Context for persistent volumes
        :param int fs_group: Group ID used for persisent volumes globally.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[int]:
        """
        Group ID used for persisent volumes globally.
        """
        return pulumi.get(self, "fs_group")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecGrafana(dict):
    def __init__(__self__, *,
                 admin_password: Optional[str] = None,
                 enabled: Optional[bool] = None):
        """
        :param str admin_password: Configure grafana admin password
        :param bool enabled: Enable grafana
        """
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        """
        Configure grafana admin password
        """
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable grafana
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecGroup(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecGroupImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecGroupResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecGroupImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecGroupResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecGroupImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecGroupResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecGroupImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecGroupResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecGroupResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecGroupResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecGroupResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecGroupResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecHds(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Hitachi Data Systems mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Hitachi Data Systems mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecHistory(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecHistoryImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecHistoryResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecHistoryImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecHistoryResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecHistoryImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecHistoryResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecHistoryImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecHistoryResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecHistoryResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecHistoryResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecHistoryResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecHistoryResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecHorizon(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable VMware Horizon mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable VMware Horizon mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecHpe3par(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable HPE 3PAR mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable HPE 3PAR mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecHyperflex(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Hyperflex mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Hyperflex mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecHyperv(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Microsoft HyperV mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Microsoft HyperV mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecInfluxdb(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 image: Optional['outputs.XlSpecInfluxdbImage'] = None,
                 persistence: Optional['outputs.XlSpecInfluxdbPersistence'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param 'XlSpecInfluxdbImageArgs' image: component specific image options
        :param 'XlSpecInfluxdbPersistenceArgs' persistence: influxdb persistence options
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecInfluxdbImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def persistence(self) -> Optional['outputs.XlSpecInfluxdbPersistence']:
        """
        influxdb persistence options
        """
        return pulumi.get(self, "persistence")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecInfluxdbImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecInfluxdbPersistence(dict):
    """
    influxdb persistence options
    """
    def __init__(__self__, *,
                 size: Optional[str] = None):
        """
        influxdb persistence options
        :param str size: influxdb persistent volume size
        """
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        influxdb persistent volume size
        """
        return pulumi.get(self, "size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecIntersight(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Cisco Intersight mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Cisco Intersight mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecIstio(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Istio mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Istio mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecIstioingress(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 routes: Optional['outputs.XlSpecIstioingressRoutes'] = None):
        """
        :param bool enabled: Enable istio ingress
        :param 'XlSpecIstioingressRoutesArgs' routes: Additional istio routes
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable istio ingress
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def routes(self) -> Optional['outputs.XlSpecIstioingressRoutes']:
        """
        Additional istio routes
        """
        return pulumi.get(self, "routes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecIstioingressRoutes(dict):
    """
    Additional istio routes
    """
    def __init__(__self__, *,
                 match: Optional[Sequence[Mapping[str, Any]]] = None,
                 route: Optional[Sequence[Mapping[str, Any]]] = None):
        """
        Additional istio routes
        :param Sequence[Mapping[str, Any]] match: Istio match statement
        :param Sequence[Mapping[str, Any]] route: Istio route statement
        """
        if match is not None:
            pulumi.set(__self__, "match", match)
        if route is not None:
            pulumi.set(__self__, "route", route)

    @property
    @pulumi.getter
    def match(self) -> Optional[Sequence[Mapping[str, Any]]]:
        """
        Istio match statement
        """
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def route(self) -> Optional[Sequence[Mapping[str, Any]]]:
        """
        Istio route statement
        """
        return pulumi.get(self, "route")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecJaeger(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable jaeger tracing
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable jaeger tracing
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecKafka(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 image: Optional['outputs.XlSpecKafkaImage'] = None,
                 java: Optional['outputs.XlSpecKafkaJava'] = None,
                 persistence: Optional['outputs.XlSpecKafkaPersistence'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param 'XlSpecKafkaImageArgs' image: component specific image options
        :param 'XlSpecKafkaJavaArgs' java: kafka java options
        :param 'XlSpecKafkaPersistenceArgs' persistence: kafka persistence options
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java is not None:
            pulumi.set(__self__, "java", java)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecKafkaImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def java(self) -> Optional['outputs.XlSpecKafkaJava']:
        """
        kafka java options
        """
        return pulumi.get(self, "java")

    @property
    @pulumi.getter
    def persistence(self) -> Optional['outputs.XlSpecKafkaPersistence']:
        """
        kafka persistence options
        """
        return pulumi.get(self, "persistence")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecKafkaImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecKafkaJava(dict):
    """
    kafka java options
    """
    def __init__(__self__, *,
                 options: Optional[str] = None):
        """
        kafka java options
        :param str options: kafka java options value
        """
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        """
        kafka java options value
        """
        return pulumi.get(self, "options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecKafkaPersistence(dict):
    """
    kafka persistence options
    """
    def __init__(__self__, *,
                 size: Optional[str] = None):
        """
        kafka persistence options
        :param str size: kafka persistent volume size
        """
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        kafka persistent volume size
        """
        return pulumi.get(self, "size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecKubeturbo(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable kubeturbo for the local k8s cluster
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable kubeturbo for the local k8s cluster
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecLoki(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable grafana loki
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable grafana loki
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMarket(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMarketImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMarketResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMarketImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMarketResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMarketImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMarketResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMarketImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMarketResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMarketResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMarketResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMarketResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMarketResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Acims(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-AcimsImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-AcimsResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-AcimsImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-AcimsResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-AcimsImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-AcimsResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AcimsImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AcimsResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-AcimsResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-AcimsResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-AcimsResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AcimsResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Actionscript(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-ActionscriptImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-ActionscriptResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-ActionscriptImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-ActionscriptResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-ActionscriptImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-ActionscriptResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-ActionscriptImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-ActionscriptResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-ActionscriptResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-ActionscriptResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-ActionscriptResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-ActionscriptResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Aix(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-AixImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-AixResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-AixImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-AixResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-AixImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-AixResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AixImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AixResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-AixResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-AixResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-AixResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AixResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Apic(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-ApicImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-ApicResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-ApicImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-ApicResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-ApicImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-ApicResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-ApicImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-ApicResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-ApicResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-ApicResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-ApicResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-ApicResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Appdynamics(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-AppdynamicsImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-AppdynamicsResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-AppdynamicsImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-AppdynamicsResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-AppdynamicsImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-AppdynamicsResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AppdynamicsImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AppdynamicsResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-AppdynamicsResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-AppdynamicsResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-AppdynamicsResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AppdynamicsResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Appinsights(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-AppinsightsImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-AppinsightsResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-AppinsightsImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-AppinsightsResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-AppinsightsImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-AppinsightsResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AppinsightsImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AppinsightsResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-AppinsightsResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-AppinsightsResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-AppinsightsResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AppinsightsResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Aws(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-AwsImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-AwsResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-AwsImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-AwsResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-AwsImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-AwsResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AwsImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AwsResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-AwsResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-AwsResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-AwsResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AwsResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Awsbilling(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-AwsbillingImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-AwsbillingResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-AwsbillingImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-AwsbillingResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-AwsbillingImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-AwsbillingResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AwsbillingImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AwsbillingResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-AwsbillingResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-AwsbillingResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-AwsbillingResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AwsbillingResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Awscost(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-AwscostImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-AwscostResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-AwscostImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-AwscostResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-AwscostImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-AwscostResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AwscostImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AwscostResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-AwscostResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-AwscostResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-AwscostResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AwscostResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Awslambda(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-AwslambdaImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-AwslambdaResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-AwslambdaImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-AwslambdaResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-AwslambdaImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-AwslambdaResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AwslambdaImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AwslambdaResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-AwslambdaResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-AwslambdaResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-AwslambdaResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AwslambdaResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Azure(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-AzureImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-AzureResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-AzureImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-AzureResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-AzureImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-AzureResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AzureImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AzureResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-AzureResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-AzureResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-AzureResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AzureResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Azurecost(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-AzurecostImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-AzurecostResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-AzurecostImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-AzurecostResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-AzurecostImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-AzurecostResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AzurecostImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AzurecostResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-AzurecostResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-AzurecostResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-AzurecostResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AzurecostResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Azureea(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-AzureeaImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-AzureeaResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-AzureeaImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-AzureeaResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-AzureeaImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-AzureeaResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AzureeaImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AzureeaResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-AzureeaResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-AzureeaResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-AzureeaResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AzureeaResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Azuresp(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-AzurespImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-AzurespResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-AzurespImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-AzurespResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-AzurespImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-AzurespResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AzurespImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AzurespResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-AzurespResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-AzurespResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-AzurespResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AzurespResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Azurevolumes(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-AzurevolumesImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-AzurevolumesResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-AzurevolumesImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-AzurevolumesResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-AzurevolumesImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-AzurevolumesResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AzurevolumesImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AzurevolumesResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-AzurevolumesResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-AzurevolumesResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-AzurevolumesResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-AzurevolumesResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Baremetal(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-BaremetalImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-BaremetalResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-BaremetalImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-BaremetalResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-BaremetalImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-BaremetalResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-BaremetalImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-BaremetalResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-BaremetalResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-BaremetalResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-BaremetalResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-BaremetalResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Cloudfoundry(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-CloudfoundryImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-CloudfoundryResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-CloudfoundryImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-CloudfoundryResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-CloudfoundryImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-CloudfoundryResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-CloudfoundryImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-CloudfoundryResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-CloudfoundryResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-CloudfoundryResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-CloudfoundryResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-CloudfoundryResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Compellent(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-CompellentImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-CompellentResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-CompellentImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-CompellentResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-CompellentImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-CompellentResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-CompellentImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-CompellentResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-CompellentResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-CompellentResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-CompellentResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-CompellentResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Customdata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-CustomdataImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-CustomdataResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-CustomdataImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-CustomdataResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-CustomdataImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-CustomdataResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-CustomdataImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-CustomdataResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-CustomdataResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-CustomdataResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-CustomdataResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-CustomdataResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Datadog(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-DatadogImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-DatadogResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-DatadogImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-DatadogResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-DatadogImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-DatadogResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-DatadogImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-DatadogResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-DatadogResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-DatadogResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-DatadogResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-DatadogResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Dynatrace(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-DynatraceImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-DynatraceResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-DynatraceImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-DynatraceResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-DynatraceImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-DynatraceResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-DynatraceImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-DynatraceResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-DynatraceResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-DynatraceResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-DynatraceResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-DynatraceResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Gcp(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-GcpImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-GcpResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-GcpImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-GcpResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-GcpImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-GcpResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-GcpImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-GcpResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-GcpResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-GcpResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-GcpResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-GcpResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Gcpcost(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-GcpcostImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-GcpcostResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-GcpcostImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-GcpcostResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-GcpcostImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-GcpcostResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-GcpcostImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-GcpcostResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-GcpcostResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-GcpcostResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-GcpcostResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-GcpcostResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Hds(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-HdsImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-HdsResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-HdsImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-HdsResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-HdsImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-HdsResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-HdsImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-HdsResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-HdsResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-HdsResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-HdsResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-HdsResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Horizon(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-HorizonImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-HorizonResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-HorizonImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-HorizonResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-HorizonImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-HorizonResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-HorizonImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-HorizonResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-HorizonResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-HorizonResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-HorizonResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-HorizonResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Hpe3par(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-Hpe3parImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-Hpe3parResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-Hpe3parImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-Hpe3parResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-Hpe3parImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-Hpe3parResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Hpe3parImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Hpe3parResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-Hpe3parResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-Hpe3parResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-Hpe3parResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Hpe3parResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Hyperflex(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-HyperflexImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-HyperflexResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-HyperflexImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-HyperflexResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-HyperflexImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-HyperflexResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-HyperflexImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-HyperflexResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-HyperflexResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-HyperflexResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-HyperflexResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-HyperflexResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Hyperv(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-HypervImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-HypervResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-HypervImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-HypervResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-HypervImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-HypervResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-HypervImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-HypervResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-HypervResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-HypervResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-HypervResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-HypervResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Intersight(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-IntersightImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-IntersightResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-IntersightImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-IntersightResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-IntersightImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-IntersightResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-IntersightImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-IntersightResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-IntersightResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-IntersightResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-IntersightResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-IntersightResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Intersighthyperflex(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-IntersighthyperflexImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-IntersighthyperflexResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-IntersighthyperflexImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-IntersighthyperflexResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-IntersighthyperflexImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-IntersighthyperflexResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-IntersighthyperflexImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-IntersighthyperflexResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-IntersighthyperflexResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-IntersighthyperflexResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-IntersighthyperflexResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-IntersighthyperflexResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Intersightucs(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-IntersightucsImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-IntersightucsResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-IntersightucsImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-IntersightucsResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-IntersightucsImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-IntersightucsResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-IntersightucsImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-IntersightucsResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-IntersightucsResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-IntersightucsResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-IntersightucsResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-IntersightucsResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Istio(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-IstioImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-IstioResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-IstioImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-IstioResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-IstioImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-IstioResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-IstioImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-IstioResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-IstioResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-IstioResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-IstioResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-IstioResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Mssql(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-MssqlImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-MssqlResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-MssqlImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-MssqlResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-MssqlImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-MssqlResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-MssqlImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-MssqlResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-MssqlResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-MssqlResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-MssqlResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-MssqlResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Mysql(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-MysqlImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-MysqlResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-MysqlImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-MysqlResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-MysqlImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-MysqlResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-MysqlImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-MysqlResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-MysqlResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-MysqlResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-MysqlResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-MysqlResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Netapp(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-NetappImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-NetappResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-NetappImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-NetappResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-NetappImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-NetappResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-NetappImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-NetappResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-NetappResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-NetappResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-NetappResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-NetappResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Netflow(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-NetflowImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-NetflowResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-NetflowImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-NetflowResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-NetflowImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-NetflowResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-NetflowImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-NetflowResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-NetflowResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-NetflowResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-NetflowResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-NetflowResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Newrelic(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-NewrelicImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-NewrelicResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-NewrelicImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-NewrelicResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-NewrelicImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-NewrelicResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-NewrelicImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-NewrelicResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-NewrelicResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-NewrelicResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-NewrelicResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-NewrelicResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Nutanix(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-NutanixImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-NutanixResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-NutanixImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-NutanixResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-NutanixImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-NutanixResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-NutanixImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-NutanixResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-NutanixResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-NutanixResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-NutanixResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-NutanixResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Oneview(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-OneviewImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-OneviewResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-OneviewImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-OneviewResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-OneviewImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-OneviewResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-OneviewImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-OneviewResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-OneviewResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-OneviewResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-OneviewResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-OneviewResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Openstack(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-OpenstackImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-OpenstackResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-OpenstackImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-OpenstackResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-OpenstackImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-OpenstackResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-OpenstackImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-OpenstackResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-OpenstackResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-OpenstackResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-OpenstackResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-OpenstackResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Pivotal(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-PivotalImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-PivotalResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-PivotalImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-PivotalResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-PivotalImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-PivotalResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-PivotalImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-PivotalResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-PivotalResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-PivotalResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-PivotalResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-PivotalResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Pure(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-PureImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-PureResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-PureImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-PureResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-PureImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-PureResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-PureImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-PureResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-PureResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-PureResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-PureResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-PureResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Rhv(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-RhvImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-RhvResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-RhvImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-RhvResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-RhvImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-RhvResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-RhvImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-RhvResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-RhvResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-RhvResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-RhvResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-RhvResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Scaleio(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-ScaleioImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-ScaleioResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-ScaleioImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-ScaleioResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-ScaleioImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-ScaleioResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-ScaleioImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-ScaleioResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-ScaleioResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-ScaleioResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-ScaleioResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-ScaleioResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Snmp(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-SnmpImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-SnmpResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-SnmpImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-SnmpResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-SnmpImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-SnmpResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-SnmpImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-SnmpResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-SnmpResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-SnmpResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-SnmpResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-SnmpResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Terraform(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-TerraformImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-TerraformResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-TerraformImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-TerraformResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-TerraformImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-TerraformResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-TerraformImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-TerraformResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-TerraformResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-TerraformResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-TerraformResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-TerraformResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Tetration(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-TetrationImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-TetrationResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-TetrationImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-TetrationResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-TetrationImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-TetrationResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-TetrationImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-TetrationResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-TetrationResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-TetrationResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-TetrationResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-TetrationResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Tomcat(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-TomcatImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-TomcatResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-TomcatImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-TomcatResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-TomcatImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-TomcatResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-TomcatImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-TomcatResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-TomcatResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-TomcatResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-TomcatResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-TomcatResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Ucs(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-UcsImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-UcsResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-UcsImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-UcsResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-UcsImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-UcsResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-UcsImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-UcsResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-UcsResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-UcsResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-UcsResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-UcsResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Ucsdirector(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-UcsdirectorImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-UcsdirectorResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-UcsdirectorImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-UcsdirectorResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-UcsdirectorImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-UcsdirectorResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-UcsdirectorImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-UcsdirectorResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-UcsdirectorResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-UcsdirectorResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-UcsdirectorResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-UcsdirectorResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Vcd(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-VcdImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-VcdResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-VcdImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-VcdResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-VcdImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-VcdResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VcdImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VcdResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-VcdResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-VcdResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-VcdResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VcdResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Vcenter(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-VcenterImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-VcenterResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-VcenterImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-VcenterResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-VcenterImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-VcenterResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VcenterImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VcenterResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-VcenterResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-VcenterResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-VcenterResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VcenterResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Vcenterbrowsing(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-VcenterbrowsingImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-VcenterbrowsingResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-VcenterbrowsingImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-VcenterbrowsingResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-VcenterbrowsingImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-VcenterbrowsingResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VcenterbrowsingImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VcenterbrowsingResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-VcenterbrowsingResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-VcenterbrowsingResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-VcenterbrowsingResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VcenterbrowsingResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Vmax(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-VmaxImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-VmaxResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-VmaxImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-VmaxResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-VmaxImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-VmaxResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VmaxImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VmaxResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-VmaxResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-VmaxResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-VmaxResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VmaxResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Vmm(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-VmmImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-VmmResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-VmmImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-VmmResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-VmmImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-VmmResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VmmImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VmmResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-VmmResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-VmmResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-VmmResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VmmResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Vplex(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-VplexImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-VplexResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-VplexImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-VplexResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-VplexImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-VplexResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VplexImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VplexResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-VplexResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-VplexResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-VplexResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-VplexResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Wmi(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-WmiImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-WmiResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-WmiImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-WmiResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-WmiImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-WmiResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-WmiImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-WmiResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-WmiResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-WmiResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-WmiResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-WmiResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-Xtremio(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecMediation-XtremioImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecMediation-XtremioResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecMediation-XtremioImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecMediation-XtremioResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecMediation-XtremioImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecMediation-XtremioResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-XtremioImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-XtremioResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecMediation-XtremioResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecMediation-XtremioResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecMediation-XtremioResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMediation-XtremioResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMetron(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable experimental time series data collection.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable experimental time series data collection.
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMssql(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Microsoft SQL Server mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Microsoft SQL Server mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecMysql(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable MySQL Server mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable MySQL Server mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecNetapp(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable NetApp mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable NetApp mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecNetflow(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable netflow mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable netflow mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecNewrelic(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable New Relic mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable New Relic mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecNginxingress(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable nginx ingress
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable nginx ingress
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecNutanix(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Nutanix mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Nutanix mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecOneview(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable HPE OneView mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable HPE OneView mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecOpenshiftingress(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Openshift routes
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Openshift routes
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecOpenstack(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Openstack mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Openstack mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecPivotal(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Pivotal mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Pivotal mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecPlan-Orchestrator(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecPlan-OrchestratorImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecPlan-OrchestratorResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecPlan-OrchestratorImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecPlan-OrchestratorResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecPlan-OrchestratorImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecPlan-OrchestratorResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecPlan-OrchestratorImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecPlan-OrchestratorResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecPlan-OrchestratorResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecPlan-OrchestratorResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecPlan-OrchestratorResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecPlan-OrchestratorResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecPlatform(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable platform components
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable platform components
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecPrometheus(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable prometheus
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable prometheus
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecPrometheus-Mysql-Exporter(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 mysql: Optional['outputs.XlSpecPrometheus-Mysql-ExporterMysql'] = None):
        """
        :param bool enabled: Enable prometheus mysql exporter
        :param 'XlSpecPrometheus-Mysql-ExporterMysqlArgs' mysql: Enable prometheus mysql exporter
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable prometheus mysql exporter
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def mysql(self) -> Optional['outputs.XlSpecPrometheus-Mysql-ExporterMysql']:
        """
        Enable prometheus mysql exporter
        """
        return pulumi.get(self, "mysql")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecPrometheus-Mysql-ExporterMysql(dict):
    """
    Enable prometheus mysql exporter
    """
    def __init__(__self__, *,
                 pass_: Optional[str] = None,
                 user: Optional[str] = None):
        """
        Enable prometheus mysql exporter
        :param str pass_: password for the mysql exporter
        :param str user: username for the mysql exporter
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[str]:
        """
        password for the mysql exporter
        """
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        username for the mysql exporter
        """
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecPrometurbo(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable prometurbo for the local prometheus server
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable prometurbo for the local prometheus server
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecPromtail(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable promtail log collection
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable promtail log collection
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecProperties(dict):
    """
    Custom property overrides
    """
    def __init__(__self__, *,
                 action_orchestrator: Optional['outputs.XlSpecPropertiesAction-Orchestrator'] = None,
                 api: Optional['outputs.XlSpecPropertiesApi'] = None,
                 auth: Optional[Mapping[str, Any]] = None,
                 cost: Optional[Mapping[str, Any]] = None,
                 global_: Optional['outputs.XlSpecPropertiesGlobal'] = None,
                 group: Optional[Mapping[str, Any]] = None,
                 history: Optional[Mapping[str, Any]] = None,
                 plan_orchestrator: Optional[Mapping[str, Any]] = None,
                 repository: Optional['outputs.XlSpecPropertiesRepository'] = None,
                 topology_processor: Optional[Mapping[str, Any]] = None):
        """
        Custom property overrides
        :param 'XlSpecPropertiesAction-OrchestratorArgs' action_orchestrator: action-orchestrator property overrides
        :param 'XlSpecPropertiesApiArgs' api: api property overrides
        :param Mapping[str, Any] auth: auth property overrides
        :param Mapping[str, Any] cost: cost property overrides
        :param 'XlSpecPropertiesGlobalArgs' global_: global property overrides
        :param Mapping[str, Any] group: group property overrides
        :param Mapping[str, Any] history: history property overrides
        :param Mapping[str, Any] plan_orchestrator: plan-orchestrator property overrides
        :param 'XlSpecPropertiesRepositoryArgs' repository: repository property overrides
        :param Mapping[str, Any] topology_processor: topology-processor property overrides
        """
        if action_orchestrator is not None:
            pulumi.set(__self__, "action_orchestrator", action_orchestrator)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if history is not None:
            pulumi.set(__self__, "history", history)
        if plan_orchestrator is not None:
            pulumi.set(__self__, "plan_orchestrator", plan_orchestrator)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if topology_processor is not None:
            pulumi.set(__self__, "topology_processor", topology_processor)

    @property
    @pulumi.getter(name="action-orchestrator")
    def action_orchestrator(self) -> Optional['outputs.XlSpecPropertiesAction-Orchestrator']:
        """
        action-orchestrator property overrides
        """
        return pulumi.get(self, "action_orchestrator")

    @property
    @pulumi.getter
    def api(self) -> Optional['outputs.XlSpecPropertiesApi']:
        """
        api property overrides
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def auth(self) -> Optional[Mapping[str, Any]]:
        """
        auth property overrides
        """
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter
    def cost(self) -> Optional[Mapping[str, Any]]:
        """
        cost property overrides
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional['outputs.XlSpecPropertiesGlobal']:
        """
        global property overrides
        """
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def group(self) -> Optional[Mapping[str, Any]]:
        """
        group property overrides
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def history(self) -> Optional[Mapping[str, Any]]:
        """
        history property overrides
        """
        return pulumi.get(self, "history")

    @property
    @pulumi.getter(name="plan-orchestrator")
    def plan_orchestrator(self) -> Optional[Mapping[str, Any]]:
        """
        plan-orchestrator property overrides
        """
        return pulumi.get(self, "plan_orchestrator")

    @property
    @pulumi.getter
    def repository(self) -> Optional['outputs.XlSpecPropertiesRepository']:
        """
        repository property overrides
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="topology-processor")
    def topology_processor(self) -> Optional[Mapping[str, Any]]:
        """
        topology-processor property overrides
        """
        return pulumi.get(self, "topology_processor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecPropertiesAction-Orchestrator(dict):
    """
    action-orchestrator property overrides
    """
    def __init__(__self__, *,
                 risk_propagation_enabled: Optional[bool] = None):
        """
        action-orchestrator property overrides
        :param bool risk_propagation_enabled: Enable risk propagation
        """
        if risk_propagation_enabled is not None:
            pulumi.set(__self__, "risk_propagation_enabled", risk_propagation_enabled)

    @property
    @pulumi.getter(name="riskPropagationEnabled")
    def risk_propagation_enabled(self) -> Optional[bool]:
        """
        Enable risk propagation
        """
        return pulumi.get(self, "risk_propagation_enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecPropertiesApi(dict):
    """
    api property overrides
    """
    def __init__(__self__, *,
                 open_id_access_token_uri: Optional[str] = None,
                 open_id_client_authentication: Optional[str] = None,
                 open_id_client_id: Optional[str] = None,
                 open_id_client_secret: Optional[str] = None,
                 open_id_clients: Optional[str] = None,
                 open_id_enabled: Optional[bool] = None,
                 open_id_jwk_set_uri: Optional[str] = None,
                 open_id_user_authentication: Optional[str] = None,
                 open_id_user_authorization_uri: Optional[str] = None,
                 open_id_user_info_uri: Optional[str] = None,
                 saml_enabled: Optional[bool] = None,
                 saml_entity_id: Optional[str] = None,
                 saml_idp_certificate: Optional[str] = None,
                 saml_registration_id: Optional[str] = None,
                 saml_sp_entity_id: Optional[str] = None,
                 saml_web_sso_endpoint: Optional[str] = None):
        """
        api property overrides
        :param str open_id_access_token_uri: URI for the SSO provider Access Token endpoint
        :param str open_id_client_authentication: OpenID clientAuthentication such as “basic”, “post”, “none”
        :param str open_id_client_id: A unique string identifier for the SSO client
        :param str open_id_client_secret: A secret string identifier for the SSO client
        :param str open_id_clients: Array of OpenID clients such as “google”, “okta”, “ibm”
        :param bool open_id_enabled: Enable OpenID SSO
        :param str open_id_jwk_set_uri: URI for the SSO provider JWK certificate endpoint
        :param str open_id_user_authentication: OpenID userAuthentication such as “header”, “form”, “query”
        :param str open_id_user_authorization_uri: URI for the SSO provider Authorization endpoint
        :param str open_id_user_info_uri: URI for the SSO provider UserInfo endpoint
        :param bool saml_enabled: Enable SAML SSO
        :param str saml_entity_id: The IDP entity ID, it can be found in IDP metadata
        :param str saml_idp_certificate: The IDP X.509 certificate
        :param str saml_registration_id: A unique string identifier for the SSO
        :param str saml_sp_entity_id: Audience URI (SP Entity ID)
        :param str saml_web_sso_endpoint: The IDP web sso HTTP POST endpoint, it can be found in IDP metadata
        """
        if open_id_access_token_uri is not None:
            pulumi.set(__self__, "open_id_access_token_uri", open_id_access_token_uri)
        if open_id_client_authentication is not None:
            pulumi.set(__self__, "open_id_client_authentication", open_id_client_authentication)
        if open_id_client_id is not None:
            pulumi.set(__self__, "open_id_client_id", open_id_client_id)
        if open_id_client_secret is not None:
            pulumi.set(__self__, "open_id_client_secret", open_id_client_secret)
        if open_id_clients is not None:
            pulumi.set(__self__, "open_id_clients", open_id_clients)
        if open_id_enabled is not None:
            pulumi.set(__self__, "open_id_enabled", open_id_enabled)
        if open_id_jwk_set_uri is not None:
            pulumi.set(__self__, "open_id_jwk_set_uri", open_id_jwk_set_uri)
        if open_id_user_authentication is not None:
            pulumi.set(__self__, "open_id_user_authentication", open_id_user_authentication)
        if open_id_user_authorization_uri is not None:
            pulumi.set(__self__, "open_id_user_authorization_uri", open_id_user_authorization_uri)
        if open_id_user_info_uri is not None:
            pulumi.set(__self__, "open_id_user_info_uri", open_id_user_info_uri)
        if saml_enabled is not None:
            pulumi.set(__self__, "saml_enabled", saml_enabled)
        if saml_entity_id is not None:
            pulumi.set(__self__, "saml_entity_id", saml_entity_id)
        if saml_idp_certificate is not None:
            pulumi.set(__self__, "saml_idp_certificate", saml_idp_certificate)
        if saml_registration_id is not None:
            pulumi.set(__self__, "saml_registration_id", saml_registration_id)
        if saml_sp_entity_id is not None:
            pulumi.set(__self__, "saml_sp_entity_id", saml_sp_entity_id)
        if saml_web_sso_endpoint is not None:
            pulumi.set(__self__, "saml_web_sso_endpoint", saml_web_sso_endpoint)

    @property
    @pulumi.getter(name="openIdAccessTokenUri")
    def open_id_access_token_uri(self) -> Optional[str]:
        """
        URI for the SSO provider Access Token endpoint
        """
        return pulumi.get(self, "open_id_access_token_uri")

    @property
    @pulumi.getter(name="openIdClientAuthentication")
    def open_id_client_authentication(self) -> Optional[str]:
        """
        OpenID clientAuthentication such as “basic”, “post”, “none”
        """
        return pulumi.get(self, "open_id_client_authentication")

    @property
    @pulumi.getter(name="openIdClientId")
    def open_id_client_id(self) -> Optional[str]:
        """
        A unique string identifier for the SSO client
        """
        return pulumi.get(self, "open_id_client_id")

    @property
    @pulumi.getter(name="openIdClientSecret")
    def open_id_client_secret(self) -> Optional[str]:
        """
        A secret string identifier for the SSO client
        """
        return pulumi.get(self, "open_id_client_secret")

    @property
    @pulumi.getter(name="openIdClients")
    def open_id_clients(self) -> Optional[str]:
        """
        Array of OpenID clients such as “google”, “okta”, “ibm”
        """
        return pulumi.get(self, "open_id_clients")

    @property
    @pulumi.getter(name="openIdEnabled")
    def open_id_enabled(self) -> Optional[bool]:
        """
        Enable OpenID SSO
        """
        return pulumi.get(self, "open_id_enabled")

    @property
    @pulumi.getter(name="openIdJwkSetUri")
    def open_id_jwk_set_uri(self) -> Optional[str]:
        """
        URI for the SSO provider JWK certificate endpoint
        """
        return pulumi.get(self, "open_id_jwk_set_uri")

    @property
    @pulumi.getter(name="openIdUserAuthentication")
    def open_id_user_authentication(self) -> Optional[str]:
        """
        OpenID userAuthentication such as “header”, “form”, “query”
        """
        return pulumi.get(self, "open_id_user_authentication")

    @property
    @pulumi.getter(name="openIdUserAuthorizationUri")
    def open_id_user_authorization_uri(self) -> Optional[str]:
        """
        URI for the SSO provider Authorization endpoint
        """
        return pulumi.get(self, "open_id_user_authorization_uri")

    @property
    @pulumi.getter(name="openIdUserInfoUri")
    def open_id_user_info_uri(self) -> Optional[str]:
        """
        URI for the SSO provider UserInfo endpoint
        """
        return pulumi.get(self, "open_id_user_info_uri")

    @property
    @pulumi.getter(name="samlEnabled")
    def saml_enabled(self) -> Optional[bool]:
        """
        Enable SAML SSO
        """
        return pulumi.get(self, "saml_enabled")

    @property
    @pulumi.getter(name="samlEntityId")
    def saml_entity_id(self) -> Optional[str]:
        """
        The IDP entity ID, it can be found in IDP metadata
        """
        return pulumi.get(self, "saml_entity_id")

    @property
    @pulumi.getter(name="samlIdpCertificate")
    def saml_idp_certificate(self) -> Optional[str]:
        """
        The IDP X.509 certificate
        """
        return pulumi.get(self, "saml_idp_certificate")

    @property
    @pulumi.getter(name="samlRegistrationId")
    def saml_registration_id(self) -> Optional[str]:
        """
        A unique string identifier for the SSO
        """
        return pulumi.get(self, "saml_registration_id")

    @property
    @pulumi.getter(name="samlSpEntityId")
    def saml_sp_entity_id(self) -> Optional[str]:
        """
        Audience URI (SP Entity ID)
        """
        return pulumi.get(self, "saml_sp_entity_id")

    @property
    @pulumi.getter(name="samlWebSsoEndpoint")
    def saml_web_sso_endpoint(self) -> Optional[str]:
        """
        The IDP web sso HTTP POST endpoint, it can be found in IDP metadata
        """
        return pulumi.get(self, "saml_web_sso_endpoint")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecPropertiesGlobal(dict):
    """
    global property overrides
    """
    def __init__(__self__, *,
                 db_port: Optional[int] = None,
                 enable_secure_db_connection: Optional[bool] = None):
        """
        global property overrides
        :param int db_port: Configure custom mysql database port
        :param bool enable_secure_db_connection: Enable SSL connection to the mysql database
        """
        if db_port is not None:
            pulumi.set(__self__, "db_port", db_port)
        if enable_secure_db_connection is not None:
            pulumi.set(__self__, "enable_secure_db_connection", enable_secure_db_connection)

    @property
    @pulumi.getter(name="dbPort")
    def db_port(self) -> Optional[int]:
        """
        Configure custom mysql database port
        """
        return pulumi.get(self, "db_port")

    @property
    @pulumi.getter(name="enableSecureDBConnection")
    def enable_secure_db_connection(self) -> Optional[bool]:
        """
        Enable SSL connection to the mysql database
        """
        return pulumi.get(self, "enable_secure_db_connection")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecPropertiesRepository(dict):
    """
    repository property overrides
    """
    def __init__(__self__, *,
                 show_guest_load: Optional[bool] = None,
                 use_sql_for_plans: Optional[bool] = None):
        """
        repository property overrides
        :param bool show_guest_load: Show GuestLoad entities
        :param bool use_sql_for_plans: Store plan data in MySQL instead of ArangoDB.
        """
        if show_guest_load is not None:
            pulumi.set(__self__, "show_guest_load", show_guest_load)
        if use_sql_for_plans is not None:
            pulumi.set(__self__, "use_sql_for_plans", use_sql_for_plans)

    @property
    @pulumi.getter(name="showGuestLoad")
    def show_guest_load(self) -> Optional[bool]:
        """
        Show GuestLoad entities
        """
        return pulumi.get(self, "show_guest_load")

    @property
    @pulumi.getter(name="useSqlForPlans")
    def use_sql_for_plans(self) -> Optional[bool]:
        """
        Store plan data in MySQL instead of ArangoDB.
        """
        return pulumi.get(self, "use_sql_for_plans")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecPure(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Pure mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Pure mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecRepository(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecRepositoryImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecRepositoryResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecRepositoryImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecRepositoryResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecRepositoryImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecRepositoryResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecRepositoryImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecRepositoryResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecRepositoryResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecRepositoryResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecRepositoryResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecRepositoryResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecRhv(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Red Hat Virtualization mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Red Hat Virtualization mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecRsyslog(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 env: Optional[Sequence[Mapping[str, Any]]] = None,
                 image: Optional['outputs.XlSpecRsyslogImage'] = None,
                 persistence: Optional['outputs.XlSpecRsyslogPersistence'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param Sequence[Mapping[str, Any]] env: optional environment variables for syslog
        :param 'XlSpecRsyslogImageArgs' image: component specific image options
        :param 'XlSpecRsyslogPersistenceArgs' persistence: rsyslog persistence options
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence[Mapping[str, Any]]]:
        """
        optional environment variables for syslog
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecRsyslogImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def persistence(self) -> Optional['outputs.XlSpecRsyslogPersistence']:
        """
        rsyslog persistence options
        """
        return pulumi.get(self, "persistence")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecRsyslogImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecRsyslogPersistence(dict):
    """
    rsyslog persistence options
    """
    def __init__(__self__, *,
                 auditsize: Optional[str] = None,
                 logsize: Optional[str] = None):
        """
        rsyslog persistence options
        :param str auditsize: influxdb audit persistent volume size
        :param str logsize: influxdb log persistent volume size
        """
        if auditsize is not None:
            pulumi.set(__self__, "auditsize", auditsize)
        if logsize is not None:
            pulumi.set(__self__, "logsize", logsize)

    @property
    @pulumi.getter
    def auditsize(self) -> Optional[str]:
        """
        influxdb audit persistent volume size
        """
        return pulumi.get(self, "auditsize")

    @property
    @pulumi.getter
    def logsize(self) -> Optional[str]:
        """
        influxdb log persistent volume size
        """
        return pulumi.get(self, "logsize")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecScaleio(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable EMC ScaleIO mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable EMC ScaleIO mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecSnmp(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable SNMP mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable SNMP mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecTerraform(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Terraform mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Terraform mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecTetration(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Cisco Tetration mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Cisco Tetration mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecTimescaledb(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable timescaledb with postgress backend
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable timescaledb with postgress backend
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecTopology-Processor(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 debug: Optional[bool] = None,
                 image: Optional['outputs.XlSpecTopology-ProcessorImage'] = None,
                 java_component_options: Optional[str] = None,
                 resources: Optional['outputs.XlSpecTopology-ProcessorResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool debug: component debug
        :param 'XlSpecTopology-ProcessorImageArgs' image: component specific image options
        :param str java_component_options: component additional java options
        :param 'XlSpecTopology-ProcessorResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if java_component_options is not None:
            pulumi.set(__self__, "java_component_options", java_component_options)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        component debug
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecTopology-ProcessorImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="javaComponentOptions")
    def java_component_options(self) -> Optional[str]:
        """
        component additional java options
        """
        return pulumi.get(self, "java_component_options")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecTopology-ProcessorResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecTopology-ProcessorImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecTopology-ProcessorResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecTopology-ProcessorResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecTopology-ProcessorResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecTopology-ProcessorResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecTopology-ProcessorResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecUcs(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Cisco UCS mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Cisco UCS mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecUcsdirector(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Cisco UCS Director mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Cisco UCS Director mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecUi(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 enabled: Optional[bool] = None,
                 image: Optional['outputs.XlSpecUiImage'] = None,
                 resources: Optional['outputs.XlSpecUiResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param bool enabled: Enable UI component
        :param 'XlSpecUiImageArgs' image: component specific image options
        :param 'XlSpecUiResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable UI component
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecUiImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecUiResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecUiImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecUiResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecUiResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecUiResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecUiResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecUiResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecVcd(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable VMware Cloud Director mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable VMware Cloud Director mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecVcenter(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable VMware vCenter mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable VMware vCenter mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecVmax(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable EMC VMAX mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable EMC VMAX mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecVmm(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable Microsoft VMM mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable Microsoft VMM mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecVplex(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable EMC VPLEX mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable EMC VPLEX mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecWmi(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable WMI mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable WMI mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecXtremio(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable EMC XtremIO mediation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable EMC XtremIO mediation
        """
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecZookeeper(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 image: Optional['outputs.XlSpecZookeeperImage'] = None,
                 resources: Optional['outputs.XlSpecZookeeperResources'] = None):
        """
        :param Mapping[str, Any] annotations: component specific pod annotations list
        :param 'XlSpecZookeeperImageArgs' image: component specific image options
        :param 'XlSpecZookeeperResourcesArgs' resources: component resource configuration
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        component specific pod annotations list
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.XlSpecZookeeperImage']:
        """
        component specific image options
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.XlSpecZookeeperResources']:
        """
        component resource configuration
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecZookeeperImage(dict):
    """
    component specific image options
    """
    def __init__(__self__, *,
                 pull_policy: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        component specific image options
        :param str pull_policy: component image pull policy
        :param str repository: component container registry and repository name
        :param str service_account_name: component serviceAccountName
        :param str tag: component container tag
        """
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        """
        component image pull policy
        """
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        component container registry and repository name
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        component serviceAccountName
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        component container tag
        """
        return pulumi.get(self, "tag")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecZookeeperResources(dict):
    """
    component resource configuration
    """
    def __init__(__self__, *,
                 limits: Optional['outputs.XlSpecZookeeperResourcesLimits'] = None):
        """
        component resource configuration
        :param 'XlSpecZookeeperResourcesLimitsArgs' limits: component limits
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.XlSpecZookeeperResourcesLimits']:
        """
        component limits
        """
        return pulumi.get(self, "limits")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class XlSpecZookeeperResourcesLimits(dict):
    """
    component limits
    """
    def __init__(__self__, *,
                 memory: Optional[str] = None):
        """
        component limits
        :param str memory: component memory limits
        """
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        component memory limits
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'CSIScaleOperatorSpecArgs',
    'CSIScaleOperatorSpecAttacherNodeSelectorArgs',
    'CSIScaleOperatorSpecClustersArgs',
    'CSIScaleOperatorSpecClustersPrimaryArgs',
    'CSIScaleOperatorSpecClustersRestApiArgs',
    'CSIScaleOperatorSpecNodeMappingArgs',
    'CSIScaleOperatorSpecPluginNodeSelectorArgs',
    'CSIScaleOperatorSpecProvisionerNodeSelectorArgs',
    'CSIScaleOperatorSpecTolerationsArgs',
    'CSIScaleOperatorStatusArgs',
    'CSIScaleOperatorStatusConditionsArgs',
]

@pulumi.input_type
class CSIScaleOperatorSpecArgs:
    def __init__(__self__, *,
                 scale_hostpath: pulumi.Input[str],
                 attacher: Optional[pulumi.Input[str]] = None,
                 attacher_node_selector: Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecAttacherNodeSelectorArgs']]]] = None,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecClustersArgs']]]] = None,
                 driver_registrar: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_mapping: Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecNodeMappingArgs']]]] = None,
                 plugin_node_selector: Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecPluginNodeSelectorArgs']]]] = None,
                 provisioner: Optional[pulumi.Input[str]] = None,
                 provisioner_node_selector: Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecProvisionerNodeSelectorArgs']]]] = None,
                 secret_counter: Optional[pulumi.Input[int]] = None,
                 spectrum_scale: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecTolerationsArgs']]]] = None,
                 trigger: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] scale_hostpath: The path to the gpfs file system mounted on the host machine.
        :param pulumi.Input[str] attacher: Attacher image for csi (actually attaches to the storage).
        :param pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecAttacherNodeSelectorArgs']]] attacher_node_selector: Node selector for attacher sidecar.
        :param pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecClustersArgs']]] clusters: A collection of gpfs cluster properties for the csi driver to mount.
        :param pulumi.Input[str] driver_registrar: Sidecar container image for the csi spectrum scale plugin pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] image_pull_secrets: A passthrough option that distributes an imagePullSecrets array to the containers generated by the csi scale operator. Please refer to official k8s documentation for your environment for more details.
        :param pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecNodeMappingArgs']]] node_mapping: Mapping of K8s node with SpectrumScale node.
        :param pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecPluginNodeSelectorArgs']]] plugin_node_selector: Node selector for SpectrumScale CSI Plugin.
        :param pulumi.Input[str] provisioner: Provisioner image for csi (actually issues provision requests).
        :param pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecProvisionerNodeSelectorArgs']]] provisioner_node_selector: Node selector for provisioner sidecar.
        :param pulumi.Input[int] secret_counter: An internal counter used by the operator to trigger reloads on secret change.
        :param pulumi.Input[str] spectrum_scale: Image name for the csi spectrum scale plugin container.
        :param pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecTolerationsArgs']]] tolerations: Array of tolerations that will be distribued to CSI pods. Please refer to official k8s documentation for your environment for more details.
        :param pulumi.Input[str] trigger: A generic trigger to be used in kickin off the ansible operator.
        """
        pulumi.set(__self__, "scale_hostpath", scale_hostpath)
        if attacher is not None:
            pulumi.set(__self__, "attacher", attacher)
        if attacher_node_selector is not None:
            pulumi.set(__self__, "attacher_node_selector", attacher_node_selector)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if driver_registrar is not None:
            pulumi.set(__self__, "driver_registrar", driver_registrar)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_mapping is not None:
            pulumi.set(__self__, "node_mapping", node_mapping)
        if plugin_node_selector is not None:
            pulumi.set(__self__, "plugin_node_selector", plugin_node_selector)
        if provisioner is not None:
            pulumi.set(__self__, "provisioner", provisioner)
        if provisioner_node_selector is not None:
            pulumi.set(__self__, "provisioner_node_selector", provisioner_node_selector)
        if secret_counter is not None:
            pulumi.set(__self__, "secret_counter", secret_counter)
        if spectrum_scale is not None:
            pulumi.set(__self__, "spectrum_scale", spectrum_scale)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if trigger is not None:
            pulumi.set(__self__, "trigger", trigger)

    @property
    @pulumi.getter(name="scaleHostpath")
    def scale_hostpath(self) -> pulumi.Input[str]:
        """
        The path to the gpfs file system mounted on the host machine.
        """
        return pulumi.get(self, "scale_hostpath")

    @scale_hostpath.setter
    def scale_hostpath(self, value: pulumi.Input[str]):
        pulumi.set(self, "scale_hostpath", value)

    @property
    @pulumi.getter
    def attacher(self) -> Optional[pulumi.Input[str]]:
        """
        Attacher image for csi (actually attaches to the storage).
        """
        return pulumi.get(self, "attacher")

    @attacher.setter
    def attacher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attacher", value)

    @property
    @pulumi.getter(name="attacherNodeSelector")
    def attacher_node_selector(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecAttacherNodeSelectorArgs']]]]:
        """
        Node selector for attacher sidecar.
        """
        return pulumi.get(self, "attacher_node_selector")

    @attacher_node_selector.setter
    def attacher_node_selector(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecAttacherNodeSelectorArgs']]]]):
        pulumi.set(self, "attacher_node_selector", value)

    @property
    @pulumi.getter
    def clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecClustersArgs']]]]:
        """
        A collection of gpfs cluster properties for the csi driver to mount.
        """
        return pulumi.get(self, "clusters")

    @clusters.setter
    def clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecClustersArgs']]]]):
        pulumi.set(self, "clusters", value)

    @property
    @pulumi.getter(name="driverRegistrar")
    def driver_registrar(self) -> Optional[pulumi.Input[str]]:
        """
        Sidecar container image for the csi spectrum scale plugin pods.
        """
        return pulumi.get(self, "driver_registrar")

    @driver_registrar.setter
    def driver_registrar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "driver_registrar", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A passthrough option that distributes an imagePullSecrets array to the containers generated by the csi scale operator. Please refer to official k8s documentation for your environment for more details.
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="nodeMapping")
    def node_mapping(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecNodeMappingArgs']]]]:
        """
        Mapping of K8s node with SpectrumScale node.
        """
        return pulumi.get(self, "node_mapping")

    @node_mapping.setter
    def node_mapping(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecNodeMappingArgs']]]]):
        pulumi.set(self, "node_mapping", value)

    @property
    @pulumi.getter(name="pluginNodeSelector")
    def plugin_node_selector(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecPluginNodeSelectorArgs']]]]:
        """
        Node selector for SpectrumScale CSI Plugin.
        """
        return pulumi.get(self, "plugin_node_selector")

    @plugin_node_selector.setter
    def plugin_node_selector(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecPluginNodeSelectorArgs']]]]):
        pulumi.set(self, "plugin_node_selector", value)

    @property
    @pulumi.getter
    def provisioner(self) -> Optional[pulumi.Input[str]]:
        """
        Provisioner image for csi (actually issues provision requests).
        """
        return pulumi.get(self, "provisioner")

    @provisioner.setter
    def provisioner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provisioner", value)

    @property
    @pulumi.getter(name="provisionerNodeSelector")
    def provisioner_node_selector(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecProvisionerNodeSelectorArgs']]]]:
        """
        Node selector for provisioner sidecar.
        """
        return pulumi.get(self, "provisioner_node_selector")

    @provisioner_node_selector.setter
    def provisioner_node_selector(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecProvisionerNodeSelectorArgs']]]]):
        pulumi.set(self, "provisioner_node_selector", value)

    @property
    @pulumi.getter(name="secretCounter")
    def secret_counter(self) -> Optional[pulumi.Input[int]]:
        """
        An internal counter used by the operator to trigger reloads on secret change.
        """
        return pulumi.get(self, "secret_counter")

    @secret_counter.setter
    def secret_counter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "secret_counter", value)

    @property
    @pulumi.getter(name="spectrumScale")
    def spectrum_scale(self) -> Optional[pulumi.Input[str]]:
        """
        Image name for the csi spectrum scale plugin container.
        """
        return pulumi.get(self, "spectrum_scale")

    @spectrum_scale.setter
    def spectrum_scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_scale", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecTolerationsArgs']]]]:
        """
        Array of tolerations that will be distribued to CSI pods. Please refer to official k8s documentation for your environment for more details.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)

    @property
    @pulumi.getter
    def trigger(self) -> Optional[pulumi.Input[str]]:
        """
        A generic trigger to be used in kickin off the ansible operator.
        """
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger", value)


@pulumi.input_type
class CSIScaleOperatorSpecAttacherNodeSelectorArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Key for node selector.
        :param pulumi.Input[str] value: Value for key.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key for node selector.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value for key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CSIScaleOperatorSpecClustersArgs:
    def __init__(__self__, *,
                 cacert: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input['CSIScaleOperatorSpecClustersPrimaryArgs']] = None,
                 rest_api: Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecClustersRestApiArgs']]]] = None,
                 secrets: Optional[pulumi.Input[str]] = None,
                 secure_ssl_mode: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] cacert: A string specifying a cacert resource name.
        :param pulumi.Input[str] id: The cluster id of the gpfs cluster specified (mandatory).
        :param pulumi.Input['CSIScaleOperatorSpecClustersPrimaryArgs'] primary: The primary file system for the GPFS cluster.
        :param pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecClustersRestApiArgs']]] rest_api: A collection of targets for REST calls.
        :param pulumi.Input[str] secrets: A string specifying a secret resource name.
        :param pulumi.Input[bool] secure_ssl_mode: Require a secure SSL connection to connect to GPFS.
        """
        if cacert is not None:
            pulumi.set(__self__, "cacert", cacert)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if rest_api is not None:
            pulumi.set(__self__, "rest_api", rest_api)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if secure_ssl_mode is not None:
            pulumi.set(__self__, "secure_ssl_mode", secure_ssl_mode)

    @property
    @pulumi.getter
    def cacert(self) -> Optional[pulumi.Input[str]]:
        """
        A string specifying a cacert resource name.
        """
        return pulumi.get(self, "cacert")

    @cacert.setter
    def cacert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cacert", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster id of the gpfs cluster specified (mandatory).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input['CSIScaleOperatorSpecClustersPrimaryArgs']]:
        """
        The primary file system for the GPFS cluster.
        """
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input['CSIScaleOperatorSpecClustersPrimaryArgs']]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter(name="restApi")
    def rest_api(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecClustersRestApiArgs']]]]:
        """
        A collection of targets for REST calls.
        """
        return pulumi.get(self, "rest_api")

    @rest_api.setter
    def rest_api(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorSpecClustersRestApiArgs']]]]):
        pulumi.set(self, "rest_api", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[str]]:
        """
        A string specifying a secret resource name.
        """
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter(name="secureSslMode")
    def secure_ssl_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Require a secure SSL connection to connect to GPFS.
        """
        return pulumi.get(self, "secure_ssl_mode")

    @secure_ssl_mode.setter
    def secure_ssl_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure_ssl_mode", value)


@pulumi.input_type
class CSIScaleOperatorSpecClustersPrimaryArgs:
    def __init__(__self__, *,
                 inode_limit: Optional[pulumi.Input[str]] = None,
                 primary_fs: Optional[pulumi.Input[str]] = None,
                 primary_fset: Optional[pulumi.Input[str]] = None,
                 remote_cluster: Optional[pulumi.Input[str]] = None):
        """
        The primary file system for the GPFS cluster.
        :param pulumi.Input[str] inode_limit: Inode limit for Primary Fileset.
        :param pulumi.Input[str] primary_fs: The name of the primary filesystem.
        :param pulumi.Input[str] primary_fset: The name of the primary fileset, created in primaryFs.
        :param pulumi.Input[str] remote_cluster: Remote cluster ID.
        """
        if inode_limit is not None:
            pulumi.set(__self__, "inode_limit", inode_limit)
        if primary_fs is not None:
            pulumi.set(__self__, "primary_fs", primary_fs)
        if primary_fset is not None:
            pulumi.set(__self__, "primary_fset", primary_fset)
        if remote_cluster is not None:
            pulumi.set(__self__, "remote_cluster", remote_cluster)

    @property
    @pulumi.getter(name="inodeLimit")
    def inode_limit(self) -> Optional[pulumi.Input[str]]:
        """
        Inode limit for Primary Fileset.
        """
        return pulumi.get(self, "inode_limit")

    @inode_limit.setter
    def inode_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inode_limit", value)

    @property
    @pulumi.getter(name="primaryFs")
    def primary_fs(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the primary filesystem.
        """
        return pulumi.get(self, "primary_fs")

    @primary_fs.setter
    def primary_fs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_fs", value)

    @property
    @pulumi.getter(name="primaryFset")
    def primary_fset(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the primary fileset, created in primaryFs.
        """
        return pulumi.get(self, "primary_fset")

    @primary_fset.setter
    def primary_fset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_fset", value)

    @property
    @pulumi.getter(name="remoteCluster")
    def remote_cluster(self) -> Optional[pulumi.Input[str]]:
        """
        Remote cluster ID.
        """
        return pulumi.get(self, "remote_cluster")

    @remote_cluster.setter
    def remote_cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_cluster", value)


@pulumi.input_type
class CSIScaleOperatorSpecClustersRestApiArgs:
    def __init__(__self__, *,
                 gui_host: Optional[pulumi.Input[str]] = None,
                 gui_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] gui_host: The hostname of the REST server.
        :param pulumi.Input[int] gui_port: The port number running the REST server.
        """
        if gui_host is not None:
            pulumi.set(__self__, "gui_host", gui_host)
        if gui_port is not None:
            pulumi.set(__self__, "gui_port", gui_port)

    @property
    @pulumi.getter(name="guiHost")
    def gui_host(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname of the REST server.
        """
        return pulumi.get(self, "gui_host")

    @gui_host.setter
    def gui_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_host", value)

    @property
    @pulumi.getter(name="guiPort")
    def gui_port(self) -> Optional[pulumi.Input[int]]:
        """
        The port number running the REST server.
        """
        return pulumi.get(self, "gui_port")

    @gui_port.setter
    def gui_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gui_port", value)


@pulumi.input_type
class CSIScaleOperatorSpecNodeMappingArgs:
    def __init__(__self__, *,
                 k8s_node: Optional[pulumi.Input[str]] = None,
                 spectrumscale_node: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] k8s_node: K8s node name.
        :param pulumi.Input[str] spectrumscale_node: SpectrumScale node name.
        """
        if k8s_node is not None:
            pulumi.set(__self__, "k8s_node", k8s_node)
        if spectrumscale_node is not None:
            pulumi.set(__self__, "spectrumscale_node", spectrumscale_node)

    @property
    @pulumi.getter(name="k8sNode")
    def k8s_node(self) -> Optional[pulumi.Input[str]]:
        """
        K8s node name.
        """
        return pulumi.get(self, "k8s_node")

    @k8s_node.setter
    def k8s_node(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "k8s_node", value)

    @property
    @pulumi.getter(name="spectrumscaleNode")
    def spectrumscale_node(self) -> Optional[pulumi.Input[str]]:
        """
        SpectrumScale node name.
        """
        return pulumi.get(self, "spectrumscale_node")

    @spectrumscale_node.setter
    def spectrumscale_node(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrumscale_node", value)


@pulumi.input_type
class CSIScaleOperatorSpecPluginNodeSelectorArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Key for node selector.
        :param pulumi.Input[str] value: Value for key.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key for node selector.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value for key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CSIScaleOperatorSpecProvisionerNodeSelectorArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Key for node selector.
        :param pulumi.Input[str] value: Value for key.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key for node selector.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value for key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CSIScaleOperatorSpecTolerationsArgs:
    def __init__(__self__, *,
                 effect: pulumi.Input[str],
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] effect: Valid values are "NoSchedule", "PreferNoSchedule" and "NoExecute". An empty effect matches all effects with given key.
        :param pulumi.Input[str] key: Node taint key name
        :param pulumi.Input[str] operator: Valid values are "Exists" and "Equal".
        :param pulumi.Input[int] toleration_seconds: Used only when effect is "NoExecute". It determines how long the pod will stay bound to the node after the taint is added.
        :param pulumi.Input[str] value: Required if operator is "Equal"
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> pulumi.Input[str]:
        """
        Valid values are "NoSchedule", "PreferNoSchedule" and "NoExecute". An empty effect matches all effects with given key.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: pulumi.Input[str]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Node taint key name
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Valid values are "Exists" and "Equal".
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Used only when effect is "NoExecute". It determines how long the pod will stay bound to the node after the taint is added.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Required if operator is "Equal"
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CSIScaleOperatorStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorStatusConditionsArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorStatusConditionsArgs']]] conditions: The active status of the operator
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorStatusConditionsArgs']]]]:
        """
        The active status of the operator
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CSIScaleOperatorStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class CSIScaleOperatorStatusConditionsArgs:
    def __init__(__self__, *,
                 ready: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] ready: Indicates that the plugin is running.
        """
        if ready is not None:
            pulumi.set(__self__, "ready", ready)

    @property
    @pulumi.getter(name="Ready")
    def ready(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the plugin is running.
        """
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ready", value)



// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// QiskitPlayground is the Schema for the qiskitplaygrounds API
type QiskitPlaygroundType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// QiskitPlaygroundSpec defines the desired state of QiskitPlayground
	Spec map[string]interface{} `pulumi:"spec"`
	// QiskitPlaygroundStatus defines the observed state of QiskitPlayground
	Status map[string]interface{} `pulumi:"status"`
}

// QiskitPlaygroundTypeInput is an input type that accepts QiskitPlaygroundTypeArgs and QiskitPlaygroundTypeOutput values.
// You can construct a concrete instance of `QiskitPlaygroundTypeInput` via:
//
//          QiskitPlaygroundTypeArgs{...}
type QiskitPlaygroundTypeInput interface {
	pulumi.Input

	ToQiskitPlaygroundTypeOutput() QiskitPlaygroundTypeOutput
	ToQiskitPlaygroundTypeOutputWithContext(context.Context) QiskitPlaygroundTypeOutput
}

// QiskitPlayground is the Schema for the qiskitplaygrounds API
type QiskitPlaygroundTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// QiskitPlaygroundSpec defines the desired state of QiskitPlayground
	Spec pulumi.MapInput `pulumi:"spec"`
	// QiskitPlaygroundStatus defines the observed state of QiskitPlayground
	Status pulumi.MapInput `pulumi:"status"`
}

func (QiskitPlaygroundTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QiskitPlaygroundType)(nil)).Elem()
}

func (i QiskitPlaygroundTypeArgs) ToQiskitPlaygroundTypeOutput() QiskitPlaygroundTypeOutput {
	return i.ToQiskitPlaygroundTypeOutputWithContext(context.Background())
}

func (i QiskitPlaygroundTypeArgs) ToQiskitPlaygroundTypeOutputWithContext(ctx context.Context) QiskitPlaygroundTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QiskitPlaygroundTypeOutput)
}

// QiskitPlayground is the Schema for the qiskitplaygrounds API
type QiskitPlaygroundTypeOutput struct{ *pulumi.OutputState }

func (QiskitPlaygroundTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QiskitPlaygroundType)(nil)).Elem()
}

func (o QiskitPlaygroundTypeOutput) ToQiskitPlaygroundTypeOutput() QiskitPlaygroundTypeOutput {
	return o
}

func (o QiskitPlaygroundTypeOutput) ToQiskitPlaygroundTypeOutputWithContext(ctx context.Context) QiskitPlaygroundTypeOutput {
	return o
}

func (o QiskitPlaygroundTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QiskitPlaygroundType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o QiskitPlaygroundTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QiskitPlaygroundType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o QiskitPlaygroundTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v QiskitPlaygroundType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// QiskitPlaygroundSpec defines the desired state of QiskitPlayground
func (o QiskitPlaygroundTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v QiskitPlaygroundType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

// QiskitPlaygroundStatus defines the observed state of QiskitPlayground
func (o QiskitPlaygroundTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v QiskitPlaygroundType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type QiskitPlaygroundMetadata struct {
}

// QiskitPlaygroundMetadataInput is an input type that accepts QiskitPlaygroundMetadataArgs and QiskitPlaygroundMetadataOutput values.
// You can construct a concrete instance of `QiskitPlaygroundMetadataInput` via:
//
//          QiskitPlaygroundMetadataArgs{...}
type QiskitPlaygroundMetadataInput interface {
	pulumi.Input

	ToQiskitPlaygroundMetadataOutput() QiskitPlaygroundMetadataOutput
	ToQiskitPlaygroundMetadataOutputWithContext(context.Context) QiskitPlaygroundMetadataOutput
}

type QiskitPlaygroundMetadataArgs struct {
}

func (QiskitPlaygroundMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QiskitPlaygroundMetadata)(nil)).Elem()
}

func (i QiskitPlaygroundMetadataArgs) ToQiskitPlaygroundMetadataOutput() QiskitPlaygroundMetadataOutput {
	return i.ToQiskitPlaygroundMetadataOutputWithContext(context.Background())
}

func (i QiskitPlaygroundMetadataArgs) ToQiskitPlaygroundMetadataOutputWithContext(ctx context.Context) QiskitPlaygroundMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QiskitPlaygroundMetadataOutput)
}

type QiskitPlaygroundMetadataOutput struct{ *pulumi.OutputState }

func (QiskitPlaygroundMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QiskitPlaygroundMetadata)(nil)).Elem()
}

func (o QiskitPlaygroundMetadataOutput) ToQiskitPlaygroundMetadataOutput() QiskitPlaygroundMetadataOutput {
	return o
}

func (o QiskitPlaygroundMetadataOutput) ToQiskitPlaygroundMetadataOutputWithContext(ctx context.Context) QiskitPlaygroundMetadataOutput {
	return o
}

// QiskitPlaygroundSpec defines the desired state of QiskitPlayground
type QiskitPlaygroundSpec struct {
}

// QiskitPlaygroundSpecInput is an input type that accepts QiskitPlaygroundSpecArgs and QiskitPlaygroundSpecOutput values.
// You can construct a concrete instance of `QiskitPlaygroundSpecInput` via:
//
//          QiskitPlaygroundSpecArgs{...}
type QiskitPlaygroundSpecInput interface {
	pulumi.Input

	ToQiskitPlaygroundSpecOutput() QiskitPlaygroundSpecOutput
	ToQiskitPlaygroundSpecOutputWithContext(context.Context) QiskitPlaygroundSpecOutput
}

// QiskitPlaygroundSpec defines the desired state of QiskitPlayground
type QiskitPlaygroundSpecArgs struct {
}

func (QiskitPlaygroundSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QiskitPlaygroundSpec)(nil)).Elem()
}

func (i QiskitPlaygroundSpecArgs) ToQiskitPlaygroundSpecOutput() QiskitPlaygroundSpecOutput {
	return i.ToQiskitPlaygroundSpecOutputWithContext(context.Background())
}

func (i QiskitPlaygroundSpecArgs) ToQiskitPlaygroundSpecOutputWithContext(ctx context.Context) QiskitPlaygroundSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QiskitPlaygroundSpecOutput)
}

// QiskitPlaygroundSpec defines the desired state of QiskitPlayground
type QiskitPlaygroundSpecOutput struct{ *pulumi.OutputState }

func (QiskitPlaygroundSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QiskitPlaygroundSpec)(nil)).Elem()
}

func (o QiskitPlaygroundSpecOutput) ToQiskitPlaygroundSpecOutput() QiskitPlaygroundSpecOutput {
	return o
}

func (o QiskitPlaygroundSpecOutput) ToQiskitPlaygroundSpecOutputWithContext(ctx context.Context) QiskitPlaygroundSpecOutput {
	return o
}

// QiskitPlaygroundStatus defines the observed state of QiskitPlayground
type QiskitPlaygroundStatus struct {
}

// QiskitPlaygroundStatusInput is an input type that accepts QiskitPlaygroundStatusArgs and QiskitPlaygroundStatusOutput values.
// You can construct a concrete instance of `QiskitPlaygroundStatusInput` via:
//
//          QiskitPlaygroundStatusArgs{...}
type QiskitPlaygroundStatusInput interface {
	pulumi.Input

	ToQiskitPlaygroundStatusOutput() QiskitPlaygroundStatusOutput
	ToQiskitPlaygroundStatusOutputWithContext(context.Context) QiskitPlaygroundStatusOutput
}

// QiskitPlaygroundStatus defines the observed state of QiskitPlayground
type QiskitPlaygroundStatusArgs struct {
}

func (QiskitPlaygroundStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QiskitPlaygroundStatus)(nil)).Elem()
}

func (i QiskitPlaygroundStatusArgs) ToQiskitPlaygroundStatusOutput() QiskitPlaygroundStatusOutput {
	return i.ToQiskitPlaygroundStatusOutputWithContext(context.Background())
}

func (i QiskitPlaygroundStatusArgs) ToQiskitPlaygroundStatusOutputWithContext(ctx context.Context) QiskitPlaygroundStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QiskitPlaygroundStatusOutput)
}

// QiskitPlaygroundStatus defines the observed state of QiskitPlayground
type QiskitPlaygroundStatusOutput struct{ *pulumi.OutputState }

func (QiskitPlaygroundStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QiskitPlaygroundStatus)(nil)).Elem()
}

func (o QiskitPlaygroundStatusOutput) ToQiskitPlaygroundStatusOutput() QiskitPlaygroundStatusOutput {
	return o
}

func (o QiskitPlaygroundStatusOutput) ToQiskitPlaygroundStatusOutputWithContext(ctx context.Context) QiskitPlaygroundStatusOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(QiskitPlaygroundTypeOutput{})
	pulumi.RegisterOutputType(QiskitPlaygroundMetadataOutput{})
	pulumi.RegisterOutputType(QiskitPlaygroundSpecOutput{})
	pulumi.RegisterOutputType(QiskitPlaygroundStatusOutput{})
}

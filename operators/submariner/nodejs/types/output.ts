// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace submariner {
    export namespace v1alpha1 {
        /**
         * SubmarinerSpec defines the desired state of Submariner
         */
        export interface SubmarinerSpec {
            broker: string;
            brokerK8sApiServer: string;
            brokerK8sApiServerToken: string;
            brokerK8sCA: string;
            brokerK8sRemoteNamespace: string;
            cableDriver?: string;
            ceIPSecDebug: boolean;
            ceIPSecIKEPort?: number;
            ceIPSecNATTPort?: number;
            ceIPSecPSK: string;
            clusterCIDR: string;
            clusterID: string;
            colorCodes?: string;
            connectionHealthCheck?: outputs.submariner.v1alpha1.SubmarinerSpecConnectionHealthCheck;
            customDomains?: string[];
            debug: boolean;
            globalCIDR?: string;
            imageOverrides?: {[key: string]: string};
            namespace: string;
            natEnabled: boolean;
            repository?: string;
            serviceCIDR: string;
            serviceDiscoveryEnabled?: boolean;
            version?: string;
        }

        export interface SubmarinerSpecConnectionHealthCheck {
            enabled?: boolean;
            /**
             * The interval at which health check pings are sent.
             */
            intervalSeconds?: number;
            /**
             * The maximum number of packets lost at which the health checker will mark the connection as down.
             */
            maxPacketLossCount?: number;
        }

        /**
         * SubmarinerStatus defines the observed state of Submariner
         */
        export interface SubmarinerStatus {
            clusterCIDR?: string;
            clusterID: string;
            colorCodes?: string;
            engineDaemonSetStatus?: outputs.submariner.v1alpha1.SubmarinerStatusEngineDaemonSetStatus;
            gateways?: outputs.submariner.v1alpha1.SubmarinerStatusGateways[];
            globalCIDR?: string;
            globalnetDaemonSetStatus?: outputs.submariner.v1alpha1.SubmarinerStatusGlobalnetDaemonSetStatus;
            natEnabled: boolean;
            networkPlugin?: string;
            routeAgentDaemonSetStatus?: outputs.submariner.v1alpha1.SubmarinerStatusRouteAgentDaemonSetStatus;
            serviceCIDR?: string;
        }

        export interface SubmarinerStatusEngineDaemonSetStatus {
            lastResourceVersion?: string;
            mismatchedContainerImages: boolean;
            nonReadyContainerStates?: outputs.submariner.v1alpha1.SubmarinerStatusEngineDaemonSetStatusNonReadyContainerStates[];
            /**
             * DaemonSetStatus represents the current status of a daemon set.
             */
            status?: outputs.submariner.v1alpha1.SubmarinerStatusEngineDaemonSetStatusStatus;
        }

        /**
         * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
         */
        export interface SubmarinerStatusEngineDaemonSetStatusNonReadyContainerStates {
            /**
             * Details about a running container
             */
            running?: outputs.submariner.v1alpha1.SubmarinerStatusEngineDaemonSetStatusNonReadyContainerStatesRunning;
            /**
             * Details about a terminated container
             */
            terminated?: outputs.submariner.v1alpha1.SubmarinerStatusEngineDaemonSetStatusNonReadyContainerStatesTerminated;
            /**
             * Details about a waiting container
             */
            waiting?: outputs.submariner.v1alpha1.SubmarinerStatusEngineDaemonSetStatusNonReadyContainerStatesWaiting;
        }

        /**
         * Details about a running container
         */
        export interface SubmarinerStatusEngineDaemonSetStatusNonReadyContainerStatesRunning {
            /**
             * Time at which the container was last (re-)started
             */
            startedAt?: string;
        }

        /**
         * Details about a terminated container
         */
        export interface SubmarinerStatusEngineDaemonSetStatusNonReadyContainerStatesTerminated {
            /**
             * Container's ID in the format 'docker://<container_id>'
             */
            containerID?: string;
            /**
             * Exit status from the last termination of the container
             */
            exitCode: number;
            /**
             * Time at which the container last terminated
             */
            finishedAt?: string;
            /**
             * Message regarding the last termination of the container
             */
            message?: string;
            /**
             * (brief) reason from the last termination of the container
             */
            reason?: string;
            /**
             * Signal from the last termination of the container
             */
            signal?: number;
            /**
             * Time at which previous execution of the container started
             */
            startedAt?: string;
        }

        /**
         * Details about a waiting container
         */
        export interface SubmarinerStatusEngineDaemonSetStatusNonReadyContainerStatesWaiting {
            /**
             * Message regarding why the container is not yet running.
             */
            message?: string;
            /**
             * (brief) reason the container is not yet running.
             */
            reason?: string;
        }

        /**
         * DaemonSetStatus represents the current status of a daemon set.
         */
        export interface SubmarinerStatusEngineDaemonSetStatusStatus {
            /**
             * Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
             */
            collisionCount?: number;
            /**
             * Represents the latest available observations of a DaemonSet's current state.
             */
            conditions?: outputs.submariner.v1alpha1.SubmarinerStatusEngineDaemonSetStatusStatusConditions[];
            /**
             * The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            currentNumberScheduled: number;
            /**
             * The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            desiredNumberScheduled: number;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberAvailable?: number;
            /**
             * The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            numberMisscheduled: number;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
             */
            numberReady: number;
            /**
             * The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberUnavailable?: number;
            /**
             * The most recent generation observed by the daemon set controller.
             */
            observedGeneration?: number;
            /**
             * The total number of nodes that are running updated daemon pod
             */
            updatedNumberScheduled?: number;
        }

        /**
         * DaemonSetCondition describes the state of a DaemonSet at a certain point.
         */
        export interface SubmarinerStatusEngineDaemonSetStatusStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: string;
            /**
             * The reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of DaemonSet condition.
             */
            type: string;
        }

        export interface SubmarinerStatusGateways {
            connections: outputs.submariner.v1alpha1.SubmarinerStatusGatewaysConnections[];
            haStatus: string;
            localEndpoint: outputs.submariner.v1alpha1.SubmarinerStatusGatewaysLocalEndpoint;
            statusFailure: string;
            version: string;
        }

        export interface SubmarinerStatusGatewaysConnections {
            endpoint: outputs.submariner.v1alpha1.SubmarinerStatusGatewaysConnectionsEndpoint;
            /**
             * LatencySpec describes the round trip time information for a packet between the gateway pods of two clusters.
             */
            latencyRTT?: outputs.submariner.v1alpha1.SubmarinerStatusGatewaysConnectionsLatencyRTT;
            status: string;
            statusMessage: string;
        }

        export interface SubmarinerStatusGatewaysConnectionsEndpoint {
            backend: string;
            backend_config?: {[key: string]: string};
            cable_name: string;
            cluster_id: string;
            healthCheckIP?: string;
            hostname: string;
            nat_enabled: boolean;
            private_ip: string;
            public_ip: string;
            subnets: string[];
        }

        /**
         * LatencySpec describes the round trip time information for a packet between the gateway pods of two clusters.
         */
        export interface SubmarinerStatusGatewaysConnectionsLatencyRTT {
            average?: string;
            last?: string;
            max?: string;
            min?: string;
            stdDev?: string;
        }

        export interface SubmarinerStatusGatewaysLocalEndpoint {
            backend: string;
            backend_config?: {[key: string]: string};
            cable_name: string;
            cluster_id: string;
            healthCheckIP?: string;
            hostname: string;
            nat_enabled: boolean;
            private_ip: string;
            public_ip: string;
            subnets: string[];
        }

        export interface SubmarinerStatusGlobalnetDaemonSetStatus {
            lastResourceVersion?: string;
            mismatchedContainerImages: boolean;
            nonReadyContainerStates?: outputs.submariner.v1alpha1.SubmarinerStatusGlobalnetDaemonSetStatusNonReadyContainerStates[];
            /**
             * DaemonSetStatus represents the current status of a daemon set.
             */
            status?: outputs.submariner.v1alpha1.SubmarinerStatusGlobalnetDaemonSetStatusStatus;
        }

        /**
         * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
         */
        export interface SubmarinerStatusGlobalnetDaemonSetStatusNonReadyContainerStates {
            /**
             * Details about a running container
             */
            running?: outputs.submariner.v1alpha1.SubmarinerStatusGlobalnetDaemonSetStatusNonReadyContainerStatesRunning;
            /**
             * Details about a terminated container
             */
            terminated?: outputs.submariner.v1alpha1.SubmarinerStatusGlobalnetDaemonSetStatusNonReadyContainerStatesTerminated;
            /**
             * Details about a waiting container
             */
            waiting?: outputs.submariner.v1alpha1.SubmarinerStatusGlobalnetDaemonSetStatusNonReadyContainerStatesWaiting;
        }

        /**
         * Details about a running container
         */
        export interface SubmarinerStatusGlobalnetDaemonSetStatusNonReadyContainerStatesRunning {
            /**
             * Time at which the container was last (re-)started
             */
            startedAt?: string;
        }

        /**
         * Details about a terminated container
         */
        export interface SubmarinerStatusGlobalnetDaemonSetStatusNonReadyContainerStatesTerminated {
            /**
             * Container's ID in the format 'docker://<container_id>'
             */
            containerID?: string;
            /**
             * Exit status from the last termination of the container
             */
            exitCode: number;
            /**
             * Time at which the container last terminated
             */
            finishedAt?: string;
            /**
             * Message regarding the last termination of the container
             */
            message?: string;
            /**
             * (brief) reason from the last termination of the container
             */
            reason?: string;
            /**
             * Signal from the last termination of the container
             */
            signal?: number;
            /**
             * Time at which previous execution of the container started
             */
            startedAt?: string;
        }

        /**
         * Details about a waiting container
         */
        export interface SubmarinerStatusGlobalnetDaemonSetStatusNonReadyContainerStatesWaiting {
            /**
             * Message regarding why the container is not yet running.
             */
            message?: string;
            /**
             * (brief) reason the container is not yet running.
             */
            reason?: string;
        }

        /**
         * DaemonSetStatus represents the current status of a daemon set.
         */
        export interface SubmarinerStatusGlobalnetDaemonSetStatusStatus {
            /**
             * Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
             */
            collisionCount?: number;
            /**
             * Represents the latest available observations of a DaemonSet's current state.
             */
            conditions?: outputs.submariner.v1alpha1.SubmarinerStatusGlobalnetDaemonSetStatusStatusConditions[];
            /**
             * The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            currentNumberScheduled: number;
            /**
             * The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            desiredNumberScheduled: number;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberAvailable?: number;
            /**
             * The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            numberMisscheduled: number;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
             */
            numberReady: number;
            /**
             * The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberUnavailable?: number;
            /**
             * The most recent generation observed by the daemon set controller.
             */
            observedGeneration?: number;
            /**
             * The total number of nodes that are running updated daemon pod
             */
            updatedNumberScheduled?: number;
        }

        /**
         * DaemonSetCondition describes the state of a DaemonSet at a certain point.
         */
        export interface SubmarinerStatusGlobalnetDaemonSetStatusStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: string;
            /**
             * The reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of DaemonSet condition.
             */
            type: string;
        }

        export interface SubmarinerStatusRouteAgentDaemonSetStatus {
            lastResourceVersion?: string;
            mismatchedContainerImages: boolean;
            nonReadyContainerStates?: outputs.submariner.v1alpha1.SubmarinerStatusRouteAgentDaemonSetStatusNonReadyContainerStates[];
            /**
             * DaemonSetStatus represents the current status of a daemon set.
             */
            status?: outputs.submariner.v1alpha1.SubmarinerStatusRouteAgentDaemonSetStatusStatus;
        }

        /**
         * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
         */
        export interface SubmarinerStatusRouteAgentDaemonSetStatusNonReadyContainerStates {
            /**
             * Details about a running container
             */
            running?: outputs.submariner.v1alpha1.SubmarinerStatusRouteAgentDaemonSetStatusNonReadyContainerStatesRunning;
            /**
             * Details about a terminated container
             */
            terminated?: outputs.submariner.v1alpha1.SubmarinerStatusRouteAgentDaemonSetStatusNonReadyContainerStatesTerminated;
            /**
             * Details about a waiting container
             */
            waiting?: outputs.submariner.v1alpha1.SubmarinerStatusRouteAgentDaemonSetStatusNonReadyContainerStatesWaiting;
        }

        /**
         * Details about a running container
         */
        export interface SubmarinerStatusRouteAgentDaemonSetStatusNonReadyContainerStatesRunning {
            /**
             * Time at which the container was last (re-)started
             */
            startedAt?: string;
        }

        /**
         * Details about a terminated container
         */
        export interface SubmarinerStatusRouteAgentDaemonSetStatusNonReadyContainerStatesTerminated {
            /**
             * Container's ID in the format 'docker://<container_id>'
             */
            containerID?: string;
            /**
             * Exit status from the last termination of the container
             */
            exitCode: number;
            /**
             * Time at which the container last terminated
             */
            finishedAt?: string;
            /**
             * Message regarding the last termination of the container
             */
            message?: string;
            /**
             * (brief) reason from the last termination of the container
             */
            reason?: string;
            /**
             * Signal from the last termination of the container
             */
            signal?: number;
            /**
             * Time at which previous execution of the container started
             */
            startedAt?: string;
        }

        /**
         * Details about a waiting container
         */
        export interface SubmarinerStatusRouteAgentDaemonSetStatusNonReadyContainerStatesWaiting {
            /**
             * Message regarding why the container is not yet running.
             */
            message?: string;
            /**
             * (brief) reason the container is not yet running.
             */
            reason?: string;
        }

        /**
         * DaemonSetStatus represents the current status of a daemon set.
         */
        export interface SubmarinerStatusRouteAgentDaemonSetStatusStatus {
            /**
             * Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
             */
            collisionCount?: number;
            /**
             * Represents the latest available observations of a DaemonSet's current state.
             */
            conditions?: outputs.submariner.v1alpha1.SubmarinerStatusRouteAgentDaemonSetStatusStatusConditions[];
            /**
             * The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            currentNumberScheduled: number;
            /**
             * The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            desiredNumberScheduled: number;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberAvailable?: number;
            /**
             * The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            numberMisscheduled: number;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
             */
            numberReady: number;
            /**
             * The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberUnavailable?: number;
            /**
             * The most recent generation observed by the daemon set controller.
             */
            observedGeneration?: number;
            /**
             * The total number of nodes that are running updated daemon pod
             */
            updatedNumberScheduled?: number;
        }

        /**
         * DaemonSetCondition describes the state of a DaemonSet at a certain point.
         */
        export interface SubmarinerStatusRouteAgentDaemonSetStatusStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: string;
            /**
             * The reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of DaemonSet condition.
             */
            type: string;
        }
    }
}

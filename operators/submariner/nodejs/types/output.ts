// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace submariner {
    export namespace v1alpha1 {
        /**
         * ServiceDiscoverySpec defines the desired state of ServiceDiscovery
         */
        export interface ServiceDiscoverySpec {
            brokerK8sApiServer: string;
            brokerK8sApiServerToken: string;
            brokerK8sCA: string;
            brokerK8sRemoteNamespace: string;
            clusterID: string;
            debug: boolean;
            globalnetEnabled?: boolean;
            namespace: string;
            repository?: string;
            version?: string;
        }

        /**
         * SubmarinerSpec defines the desired state of Submariner
         */
        export interface SubmarinerSpec {
            broker: string;
            brokerK8sApiServer: string;
            brokerK8sApiServerToken: string;
            brokerK8sCA: string;
            brokerK8sRemoteNamespace: string;
            cableDriver?: string;
            ceIPSecDebug: boolean;
            ceIPSecIKEPort?: number;
            ceIPSecNATTPort?: number;
            ceIPSecPSK: string;
            clusterCIDR: string;
            clusterID: string;
            colorCodes?: string;
            debug: boolean;
            globalCIDR?: string;
            namespace: string;
            natEnabled: boolean;
            repository?: string;
            serviceCIDR: string;
            serviceDiscoveryEnabled?: boolean;
            version?: string;
        }

        /**
         * SubmarinerStatus defines the observed state of Submariner
         */
        export interface SubmarinerStatus {
            clusterCIDR: string;
            clusterID: string;
            colorCodes?: string;
            /**
             * DaemonSetStatus represents the current status of a daemon set.
             */
            engineDaemonSetStatus?: outputs.submariner.v1alpha1.SubmarinerStatusEngineDaemonSetStatus;
            gateways?: outputs.submariner.v1alpha1.SubmarinerStatusGateways[];
            globalCIDR?: string;
            /**
             * DaemonSetStatus represents the current status of a daemon set.
             */
            globalnetDaemonSetStatus?: outputs.submariner.v1alpha1.SubmarinerStatusGlobalnetDaemonSetStatus;
            natEnabled: boolean;
            /**
             * DaemonSetStatus represents the current status of a daemon set.
             */
            routeAgentDaemonSetStatus?: outputs.submariner.v1alpha1.SubmarinerStatusRouteAgentDaemonSetStatus;
            serviceCIDR: string;
        }

        /**
         * DaemonSetStatus represents the current status of a daemon set.
         */
        export interface SubmarinerStatusEngineDaemonSetStatus {
            /**
             * Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
             */
            collisionCount?: number;
            /**
             * Represents the latest available observations of a DaemonSet's current state.
             */
            conditions?: outputs.submariner.v1alpha1.SubmarinerStatusEngineDaemonSetStatusConditions[];
            /**
             * The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            currentNumberScheduled: number;
            /**
             * The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            desiredNumberScheduled: number;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberAvailable?: number;
            /**
             * The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            numberMisscheduled: number;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
             */
            numberReady: number;
            /**
             * The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberUnavailable?: number;
            /**
             * The most recent generation observed by the daemon set controller.
             */
            observedGeneration?: number;
            /**
             * The total number of nodes that are running updated daemon pod
             */
            updatedNumberScheduled?: number;
        }

        /**
         * DaemonSetCondition describes the state of a DaemonSet at a certain point.
         */
        export interface SubmarinerStatusEngineDaemonSetStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: string;
            /**
             * The reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of DaemonSet condition.
             */
            type: string;
        }

        export interface SubmarinerStatusGateways {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
             */
            apiVersion?: string;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
             */
            kind?: string;
            metadata?: {[key: string]: any};
            status: outputs.submariner.v1alpha1.SubmarinerStatusGatewaysStatus;
        }

        export interface SubmarinerStatusGatewaysStatus {
            connections: outputs.submariner.v1alpha1.SubmarinerStatusGatewaysStatusConnections[];
            haStatus: string;
            localEndpoint: outputs.submariner.v1alpha1.SubmarinerStatusGatewaysStatusLocalEndpoint;
            statusFailure: string;
            version: string;
        }

        export interface SubmarinerStatusGatewaysStatusConnections {
            endpoint: outputs.submariner.v1alpha1.SubmarinerStatusGatewaysStatusConnectionsEndpoint;
            status: string;
            statusMessage: string;
        }

        export interface SubmarinerStatusGatewaysStatusConnectionsEndpoint {
            backend: string;
            backend_config?: {[key: string]: string};
            cable_name: string;
            cluster_id: string;
            hostname: string;
            nat_enabled: boolean;
            private_ip: string;
            public_ip: string;
            subnets: string[];
        }

        export interface SubmarinerStatusGatewaysStatusLocalEndpoint {
            backend: string;
            backend_config?: {[key: string]: string};
            cable_name: string;
            cluster_id: string;
            hostname: string;
            nat_enabled: boolean;
            private_ip: string;
            public_ip: string;
            subnets: string[];
        }

        /**
         * DaemonSetStatus represents the current status of a daemon set.
         */
        export interface SubmarinerStatusGlobalnetDaemonSetStatus {
            /**
             * Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
             */
            collisionCount?: number;
            /**
             * Represents the latest available observations of a DaemonSet's current state.
             */
            conditions?: outputs.submariner.v1alpha1.SubmarinerStatusGlobalnetDaemonSetStatusConditions[];
            /**
             * The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            currentNumberScheduled: number;
            /**
             * The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            desiredNumberScheduled: number;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberAvailable?: number;
            /**
             * The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            numberMisscheduled: number;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
             */
            numberReady: number;
            /**
             * The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberUnavailable?: number;
            /**
             * The most recent generation observed by the daemon set controller.
             */
            observedGeneration?: number;
            /**
             * The total number of nodes that are running updated daemon pod
             */
            updatedNumberScheduled?: number;
        }

        /**
         * DaemonSetCondition describes the state of a DaemonSet at a certain point.
         */
        export interface SubmarinerStatusGlobalnetDaemonSetStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: string;
            /**
             * The reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of DaemonSet condition.
             */
            type: string;
        }

        /**
         * DaemonSetStatus represents the current status of a daemon set.
         */
        export interface SubmarinerStatusRouteAgentDaemonSetStatus {
            /**
             * Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
             */
            collisionCount?: number;
            /**
             * Represents the latest available observations of a DaemonSet's current state.
             */
            conditions?: outputs.submariner.v1alpha1.SubmarinerStatusRouteAgentDaemonSetStatusConditions[];
            /**
             * The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            currentNumberScheduled: number;
            /**
             * The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            desiredNumberScheduled: number;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberAvailable?: number;
            /**
             * The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            numberMisscheduled: number;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
             */
            numberReady: number;
            /**
             * The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberUnavailable?: number;
            /**
             * The most recent generation observed by the daemon set controller.
             */
            observedGeneration?: number;
            /**
             * The total number of nodes that are running updated daemon pod
             */
            updatedNumberScheduled?: number;
        }

        /**
         * DaemonSetCondition describes the state of a DaemonSet at a certain point.
         */
        export interface SubmarinerStatusRouteAgentDaemonSetStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: string;
            /**
             * The reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of DaemonSet condition.
             */
            type: string;
        }
    }
}

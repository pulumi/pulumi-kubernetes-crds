// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace submariner {
    export namespace v1alpha1 {
        /**
         * ServiceDiscoverySpec defines the desired state of ServiceDiscovery
         */
        export interface ServiceDiscoverySpec {
            brokerK8sApiServer: pulumi.Input<string>;
            brokerK8sApiServerToken: pulumi.Input<string>;
            brokerK8sCA: pulumi.Input<string>;
            brokerK8sRemoteNamespace: pulumi.Input<string>;
            clusterID: pulumi.Input<string>;
            debug: pulumi.Input<boolean>;
            globalnetEnabled?: pulumi.Input<boolean>;
            namespace: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * SubmarinerSpec defines the desired state of Submariner
         */
        export interface SubmarinerSpec {
            broker: pulumi.Input<string>;
            brokerK8sApiServer: pulumi.Input<string>;
            brokerK8sApiServerToken: pulumi.Input<string>;
            brokerK8sCA: pulumi.Input<string>;
            brokerK8sRemoteNamespace: pulumi.Input<string>;
            cableDriver?: pulumi.Input<string>;
            ceIPSecDebug: pulumi.Input<boolean>;
            ceIPSecIKEPort?: pulumi.Input<number>;
            ceIPSecNATTPort?: pulumi.Input<number>;
            ceIPSecPSK: pulumi.Input<string>;
            clusterCIDR: pulumi.Input<string>;
            clusterID: pulumi.Input<string>;
            colorCodes?: pulumi.Input<string>;
            debug: pulumi.Input<boolean>;
            globalCIDR?: pulumi.Input<string>;
            namespace: pulumi.Input<string>;
            natEnabled: pulumi.Input<boolean>;
            repository?: pulumi.Input<string>;
            serviceCIDR: pulumi.Input<string>;
            serviceDiscoveryEnabled?: pulumi.Input<boolean>;
            version?: pulumi.Input<string>;
        }

        /**
         * SubmarinerStatus defines the observed state of Submariner
         */
        export interface SubmarinerStatus {
            clusterCIDR: pulumi.Input<string>;
            clusterID: pulumi.Input<string>;
            colorCodes?: pulumi.Input<string>;
            /**
             * DaemonSetStatus represents the current status of a daemon set.
             */
            engineDaemonSetStatus?: pulumi.Input<inputs.submariner.v1alpha1.SubmarinerStatusEngineDaemonSetStatus>;
            gateways?: pulumi.Input<pulumi.Input<inputs.submariner.v1alpha1.SubmarinerStatusGateways>[]>;
            globalCIDR?: pulumi.Input<string>;
            /**
             * DaemonSetStatus represents the current status of a daemon set.
             */
            globalnetDaemonSetStatus?: pulumi.Input<inputs.submariner.v1alpha1.SubmarinerStatusGlobalnetDaemonSetStatus>;
            natEnabled: pulumi.Input<boolean>;
            /**
             * DaemonSetStatus represents the current status of a daemon set.
             */
            routeAgentDaemonSetStatus?: pulumi.Input<inputs.submariner.v1alpha1.SubmarinerStatusRouteAgentDaemonSetStatus>;
            serviceCIDR: pulumi.Input<string>;
        }

        /**
         * DaemonSetStatus represents the current status of a daemon set.
         */
        export interface SubmarinerStatusEngineDaemonSetStatus {
            /**
             * Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
             */
            collisionCount?: pulumi.Input<number>;
            /**
             * Represents the latest available observations of a DaemonSet's current state.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.submariner.v1alpha1.SubmarinerStatusEngineDaemonSetStatusConditions>[]>;
            /**
             * The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            currentNumberScheduled: pulumi.Input<number>;
            /**
             * The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            desiredNumberScheduled: pulumi.Input<number>;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberAvailable?: pulumi.Input<number>;
            /**
             * The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            numberMisscheduled: pulumi.Input<number>;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
             */
            numberReady: pulumi.Input<number>;
            /**
             * The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberUnavailable?: pulumi.Input<number>;
            /**
             * The most recent generation observed by the daemon set controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * The total number of nodes that are running updated daemon pod
             */
            updatedNumberScheduled?: pulumi.Input<number>;
        }

        /**
         * DaemonSetCondition describes the state of a DaemonSet at a certain point.
         */
        export interface SubmarinerStatusEngineDaemonSetStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of DaemonSet condition.
             */
            type: pulumi.Input<string>;
        }

        export interface SubmarinerStatusGateways {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            metadata?: pulumi.Input<{[key: string]: any}>;
            status: pulumi.Input<inputs.submariner.v1alpha1.SubmarinerStatusGatewaysStatus>;
        }

        export interface SubmarinerStatusGatewaysStatus {
            connections: pulumi.Input<pulumi.Input<inputs.submariner.v1alpha1.SubmarinerStatusGatewaysStatusConnections>[]>;
            haStatus: pulumi.Input<string>;
            localEndpoint: pulumi.Input<inputs.submariner.v1alpha1.SubmarinerStatusGatewaysStatusLocalEndpoint>;
            statusFailure: pulumi.Input<string>;
            version: pulumi.Input<string>;
        }

        export interface SubmarinerStatusGatewaysStatusConnections {
            endpoint: pulumi.Input<inputs.submariner.v1alpha1.SubmarinerStatusGatewaysStatusConnectionsEndpoint>;
            status: pulumi.Input<string>;
            statusMessage: pulumi.Input<string>;
        }

        export interface SubmarinerStatusGatewaysStatusConnectionsEndpoint {
            backend: pulumi.Input<string>;
            backend_config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            cable_name: pulumi.Input<string>;
            cluster_id: pulumi.Input<string>;
            hostname: pulumi.Input<string>;
            nat_enabled: pulumi.Input<boolean>;
            private_ip: pulumi.Input<string>;
            public_ip: pulumi.Input<string>;
            subnets: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface SubmarinerStatusGatewaysStatusLocalEndpoint {
            backend: pulumi.Input<string>;
            backend_config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            cable_name: pulumi.Input<string>;
            cluster_id: pulumi.Input<string>;
            hostname: pulumi.Input<string>;
            nat_enabled: pulumi.Input<boolean>;
            private_ip: pulumi.Input<string>;
            public_ip: pulumi.Input<string>;
            subnets: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * DaemonSetStatus represents the current status of a daemon set.
         */
        export interface SubmarinerStatusGlobalnetDaemonSetStatus {
            /**
             * Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
             */
            collisionCount?: pulumi.Input<number>;
            /**
             * Represents the latest available observations of a DaemonSet's current state.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.submariner.v1alpha1.SubmarinerStatusGlobalnetDaemonSetStatusConditions>[]>;
            /**
             * The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            currentNumberScheduled: pulumi.Input<number>;
            /**
             * The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            desiredNumberScheduled: pulumi.Input<number>;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberAvailable?: pulumi.Input<number>;
            /**
             * The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            numberMisscheduled: pulumi.Input<number>;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
             */
            numberReady: pulumi.Input<number>;
            /**
             * The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberUnavailable?: pulumi.Input<number>;
            /**
             * The most recent generation observed by the daemon set controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * The total number of nodes that are running updated daemon pod
             */
            updatedNumberScheduled?: pulumi.Input<number>;
        }

        /**
         * DaemonSetCondition describes the state of a DaemonSet at a certain point.
         */
        export interface SubmarinerStatusGlobalnetDaemonSetStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of DaemonSet condition.
             */
            type: pulumi.Input<string>;
        }

        /**
         * DaemonSetStatus represents the current status of a daemon set.
         */
        export interface SubmarinerStatusRouteAgentDaemonSetStatus {
            /**
             * Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
             */
            collisionCount?: pulumi.Input<number>;
            /**
             * Represents the latest available observations of a DaemonSet's current state.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.submariner.v1alpha1.SubmarinerStatusRouteAgentDaemonSetStatusConditions>[]>;
            /**
             * The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            currentNumberScheduled: pulumi.Input<number>;
            /**
             * The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            desiredNumberScheduled: pulumi.Input<number>;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberAvailable?: pulumi.Input<number>;
            /**
             * The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            numberMisscheduled: pulumi.Input<number>;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
             */
            numberReady: pulumi.Input<number>;
            /**
             * The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberUnavailable?: pulumi.Input<number>;
            /**
             * The most recent generation observed by the daemon set controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * The total number of nodes that are running updated daemon pod
             */
            updatedNumberScheduled?: pulumi.Input<number>;
        }

        /**
         * DaemonSetCondition describes the state of a DaemonSet at a certain point.
         */
        export interface SubmarinerStatusRouteAgentDaemonSetStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of DaemonSet condition.
             */
            type: pulumi.Input<string>;
        }
    }
}

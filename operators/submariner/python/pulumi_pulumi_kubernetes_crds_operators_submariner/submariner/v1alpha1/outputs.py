# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'ServiceDiscoverySpec',
    'SubmarinerSpec',
    'SubmarinerStatus',
    'SubmarinerStatusEngineDaemonSetStatus',
    'SubmarinerStatusEngineDaemonSetStatusConditions',
    'SubmarinerStatusGateways',
    'SubmarinerStatusGatewaysStatus',
    'SubmarinerStatusGatewaysStatusConnections',
    'SubmarinerStatusGatewaysStatusConnectionsEndpoint',
    'SubmarinerStatusGatewaysStatusLocalEndpoint',
    'SubmarinerStatusGlobalnetDaemonSetStatus',
    'SubmarinerStatusGlobalnetDaemonSetStatusConditions',
    'SubmarinerStatusRouteAgentDaemonSetStatus',
    'SubmarinerStatusRouteAgentDaemonSetStatusConditions',
]

@pulumi.output_type
class ServiceDiscoverySpec(dict):
    """
    ServiceDiscoverySpec defines the desired state of ServiceDiscovery
    """
    def __init__(__self__, *,
                 broker_k8s_api_server: str,
                 broker_k8s_api_server_token: str,
                 broker_k8s_ca: str,
                 broker_k8s_remote_namespace: str,
                 cluster_id: str,
                 debug: bool,
                 namespace: str,
                 globalnet_enabled: Optional[bool] = None,
                 repository: Optional[str] = None,
                 version: Optional[str] = None):
        """
        ServiceDiscoverySpec defines the desired state of ServiceDiscovery
        """
        pulumi.set(__self__, "broker_k8s_api_server", broker_k8s_api_server)
        pulumi.set(__self__, "broker_k8s_api_server_token", broker_k8s_api_server_token)
        pulumi.set(__self__, "broker_k8s_ca", broker_k8s_ca)
        pulumi.set(__self__, "broker_k8s_remote_namespace", broker_k8s_remote_namespace)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "debug", debug)
        pulumi.set(__self__, "namespace", namespace)
        if globalnet_enabled is not None:
            pulumi.set(__self__, "globalnet_enabled", globalnet_enabled)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="brokerK8sApiServer")
    def broker_k8s_api_server(self) -> str:
        return pulumi.get(self, "broker_k8s_api_server")

    @property
    @pulumi.getter(name="brokerK8sApiServerToken")
    def broker_k8s_api_server_token(self) -> str:
        return pulumi.get(self, "broker_k8s_api_server_token")

    @property
    @pulumi.getter(name="brokerK8sCA")
    def broker_k8s_ca(self) -> str:
        return pulumi.get(self, "broker_k8s_ca")

    @property
    @pulumi.getter(name="brokerK8sRemoteNamespace")
    def broker_k8s_remote_namespace(self) -> str:
        return pulumi.get(self, "broker_k8s_remote_namespace")

    @property
    @pulumi.getter(name="clusterID")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def debug(self) -> bool:
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="globalnetEnabled")
    def globalnet_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "globalnet_enabled")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubmarinerSpec(dict):
    """
    SubmarinerSpec defines the desired state of Submariner
    """
    def __init__(__self__, *,
                 broker: str,
                 broker_k8s_api_server: str,
                 broker_k8s_api_server_token: str,
                 broker_k8s_ca: str,
                 broker_k8s_remote_namespace: str,
                 ce_ip_sec_debug: bool,
                 ce_ip_sec_psk: str,
                 cluster_cidr: str,
                 cluster_id: str,
                 debug: bool,
                 namespace: str,
                 nat_enabled: bool,
                 service_cidr: str,
                 cable_driver: Optional[str] = None,
                 ce_ip_sec_ike_port: Optional[int] = None,
                 ce_ip_sec_natt_port: Optional[int] = None,
                 color_codes: Optional[str] = None,
                 global_cidr: Optional[str] = None,
                 repository: Optional[str] = None,
                 service_discovery_enabled: Optional[bool] = None,
                 version: Optional[str] = None):
        """
        SubmarinerSpec defines the desired state of Submariner
        """
        pulumi.set(__self__, "broker", broker)
        pulumi.set(__self__, "broker_k8s_api_server", broker_k8s_api_server)
        pulumi.set(__self__, "broker_k8s_api_server_token", broker_k8s_api_server_token)
        pulumi.set(__self__, "broker_k8s_ca", broker_k8s_ca)
        pulumi.set(__self__, "broker_k8s_remote_namespace", broker_k8s_remote_namespace)
        pulumi.set(__self__, "ce_ip_sec_debug", ce_ip_sec_debug)
        pulumi.set(__self__, "ce_ip_sec_psk", ce_ip_sec_psk)
        pulumi.set(__self__, "cluster_cidr", cluster_cidr)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "debug", debug)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "nat_enabled", nat_enabled)
        pulumi.set(__self__, "service_cidr", service_cidr)
        if cable_driver is not None:
            pulumi.set(__self__, "cable_driver", cable_driver)
        if ce_ip_sec_ike_port is not None:
            pulumi.set(__self__, "ce_ip_sec_ike_port", ce_ip_sec_ike_port)
        if ce_ip_sec_natt_port is not None:
            pulumi.set(__self__, "ce_ip_sec_natt_port", ce_ip_sec_natt_port)
        if color_codes is not None:
            pulumi.set(__self__, "color_codes", color_codes)
        if global_cidr is not None:
            pulumi.set(__self__, "global_cidr", global_cidr)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_discovery_enabled is not None:
            pulumi.set(__self__, "service_discovery_enabled", service_discovery_enabled)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def broker(self) -> str:
        return pulumi.get(self, "broker")

    @property
    @pulumi.getter(name="brokerK8sApiServer")
    def broker_k8s_api_server(self) -> str:
        return pulumi.get(self, "broker_k8s_api_server")

    @property
    @pulumi.getter(name="brokerK8sApiServerToken")
    def broker_k8s_api_server_token(self) -> str:
        return pulumi.get(self, "broker_k8s_api_server_token")

    @property
    @pulumi.getter(name="brokerK8sCA")
    def broker_k8s_ca(self) -> str:
        return pulumi.get(self, "broker_k8s_ca")

    @property
    @pulumi.getter(name="brokerK8sRemoteNamespace")
    def broker_k8s_remote_namespace(self) -> str:
        return pulumi.get(self, "broker_k8s_remote_namespace")

    @property
    @pulumi.getter(name="ceIPSecDebug")
    def ce_ip_sec_debug(self) -> bool:
        return pulumi.get(self, "ce_ip_sec_debug")

    @property
    @pulumi.getter(name="ceIPSecPSK")
    def ce_ip_sec_psk(self) -> str:
        return pulumi.get(self, "ce_ip_sec_psk")

    @property
    @pulumi.getter(name="clusterCIDR")
    def cluster_cidr(self) -> str:
        return pulumi.get(self, "cluster_cidr")

    @property
    @pulumi.getter(name="clusterID")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def debug(self) -> bool:
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="natEnabled")
    def nat_enabled(self) -> bool:
        return pulumi.get(self, "nat_enabled")

    @property
    @pulumi.getter(name="serviceCIDR")
    def service_cidr(self) -> str:
        return pulumi.get(self, "service_cidr")

    @property
    @pulumi.getter(name="cableDriver")
    def cable_driver(self) -> Optional[str]:
        return pulumi.get(self, "cable_driver")

    @property
    @pulumi.getter(name="ceIPSecIKEPort")
    def ce_ip_sec_ike_port(self) -> Optional[int]:
        return pulumi.get(self, "ce_ip_sec_ike_port")

    @property
    @pulumi.getter(name="ceIPSecNATTPort")
    def ce_ip_sec_natt_port(self) -> Optional[int]:
        return pulumi.get(self, "ce_ip_sec_natt_port")

    @property
    @pulumi.getter(name="colorCodes")
    def color_codes(self) -> Optional[str]:
        return pulumi.get(self, "color_codes")

    @property
    @pulumi.getter(name="globalCIDR")
    def global_cidr(self) -> Optional[str]:
        return pulumi.get(self, "global_cidr")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="serviceDiscoveryEnabled")
    def service_discovery_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "service_discovery_enabled")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubmarinerStatus(dict):
    """
    SubmarinerStatus defines the observed state of Submariner
    """
    def __init__(__self__, *,
                 cluster_cidr: str,
                 cluster_id: str,
                 nat_enabled: bool,
                 service_cidr: str,
                 color_codes: Optional[str] = None,
                 engine_daemon_set_status: Optional['outputs.SubmarinerStatusEngineDaemonSetStatus'] = None,
                 gateways: Optional[Sequence['outputs.SubmarinerStatusGateways']] = None,
                 global_cidr: Optional[str] = None,
                 globalnet_daemon_set_status: Optional['outputs.SubmarinerStatusGlobalnetDaemonSetStatus'] = None,
                 route_agent_daemon_set_status: Optional['outputs.SubmarinerStatusRouteAgentDaemonSetStatus'] = None):
        """
        SubmarinerStatus defines the observed state of Submariner
        :param 'SubmarinerStatusEngineDaemonSetStatusArgs' engine_daemon_set_status: DaemonSetStatus represents the current status of a daemon set.
        :param 'SubmarinerStatusGlobalnetDaemonSetStatusArgs' globalnet_daemon_set_status: DaemonSetStatus represents the current status of a daemon set.
        :param 'SubmarinerStatusRouteAgentDaemonSetStatusArgs' route_agent_daemon_set_status: DaemonSetStatus represents the current status of a daemon set.
        """
        pulumi.set(__self__, "cluster_cidr", cluster_cidr)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "nat_enabled", nat_enabled)
        pulumi.set(__self__, "service_cidr", service_cidr)
        if color_codes is not None:
            pulumi.set(__self__, "color_codes", color_codes)
        if engine_daemon_set_status is not None:
            pulumi.set(__self__, "engine_daemon_set_status", engine_daemon_set_status)
        if gateways is not None:
            pulumi.set(__self__, "gateways", gateways)
        if global_cidr is not None:
            pulumi.set(__self__, "global_cidr", global_cidr)
        if globalnet_daemon_set_status is not None:
            pulumi.set(__self__, "globalnet_daemon_set_status", globalnet_daemon_set_status)
        if route_agent_daemon_set_status is not None:
            pulumi.set(__self__, "route_agent_daemon_set_status", route_agent_daemon_set_status)

    @property
    @pulumi.getter(name="clusterCIDR")
    def cluster_cidr(self) -> str:
        return pulumi.get(self, "cluster_cidr")

    @property
    @pulumi.getter(name="clusterID")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="natEnabled")
    def nat_enabled(self) -> bool:
        return pulumi.get(self, "nat_enabled")

    @property
    @pulumi.getter(name="serviceCIDR")
    def service_cidr(self) -> str:
        return pulumi.get(self, "service_cidr")

    @property
    @pulumi.getter(name="colorCodes")
    def color_codes(self) -> Optional[str]:
        return pulumi.get(self, "color_codes")

    @property
    @pulumi.getter(name="engineDaemonSetStatus")
    def engine_daemon_set_status(self) -> Optional['outputs.SubmarinerStatusEngineDaemonSetStatus']:
        """
        DaemonSetStatus represents the current status of a daemon set.
        """
        return pulumi.get(self, "engine_daemon_set_status")

    @property
    @pulumi.getter
    def gateways(self) -> Optional[Sequence['outputs.SubmarinerStatusGateways']]:
        return pulumi.get(self, "gateways")

    @property
    @pulumi.getter(name="globalCIDR")
    def global_cidr(self) -> Optional[str]:
        return pulumi.get(self, "global_cidr")

    @property
    @pulumi.getter(name="globalnetDaemonSetStatus")
    def globalnet_daemon_set_status(self) -> Optional['outputs.SubmarinerStatusGlobalnetDaemonSetStatus']:
        """
        DaemonSetStatus represents the current status of a daemon set.
        """
        return pulumi.get(self, "globalnet_daemon_set_status")

    @property
    @pulumi.getter(name="routeAgentDaemonSetStatus")
    def route_agent_daemon_set_status(self) -> Optional['outputs.SubmarinerStatusRouteAgentDaemonSetStatus']:
        """
        DaemonSetStatus represents the current status of a daemon set.
        """
        return pulumi.get(self, "route_agent_daemon_set_status")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubmarinerStatusEngineDaemonSetStatus(dict):
    """
    DaemonSetStatus represents the current status of a daemon set.
    """
    def __init__(__self__, *,
                 current_number_scheduled: int,
                 desired_number_scheduled: int,
                 number_misscheduled: int,
                 number_ready: int,
                 collision_count: Optional[int] = None,
                 conditions: Optional[Sequence['outputs.SubmarinerStatusEngineDaemonSetStatusConditions']] = None,
                 number_available: Optional[int] = None,
                 number_unavailable: Optional[int] = None,
                 observed_generation: Optional[int] = None,
                 updated_number_scheduled: Optional[int] = None):
        """
        DaemonSetStatus represents the current status of a daemon set.
        :param int current_number_scheduled: The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param int desired_number_scheduled: The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param int number_misscheduled: The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param int number_ready: The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
        :param int collision_count: Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
        :param Sequence['SubmarinerStatusEngineDaemonSetStatusConditionsArgs'] conditions: Represents the latest available observations of a DaemonSet's current state.
        :param int number_available: The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
        :param int number_unavailable: The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
        :param int observed_generation: The most recent generation observed by the daemon set controller.
        :param int updated_number_scheduled: The total number of nodes that are running updated daemon pod
        """
        pulumi.set(__self__, "current_number_scheduled", current_number_scheduled)
        pulumi.set(__self__, "desired_number_scheduled", desired_number_scheduled)
        pulumi.set(__self__, "number_misscheduled", number_misscheduled)
        pulumi.set(__self__, "number_ready", number_ready)
        if collision_count is not None:
            pulumi.set(__self__, "collision_count", collision_count)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if number_available is not None:
            pulumi.set(__self__, "number_available", number_available)
        if number_unavailable is not None:
            pulumi.set(__self__, "number_unavailable", number_unavailable)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if updated_number_scheduled is not None:
            pulumi.set(__self__, "updated_number_scheduled", updated_number_scheduled)

    @property
    @pulumi.getter(name="currentNumberScheduled")
    def current_number_scheduled(self) -> int:
        """
        The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "current_number_scheduled")

    @property
    @pulumi.getter(name="desiredNumberScheduled")
    def desired_number_scheduled(self) -> int:
        """
        The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "desired_number_scheduled")

    @property
    @pulumi.getter(name="numberMisscheduled")
    def number_misscheduled(self) -> int:
        """
        The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "number_misscheduled")

    @property
    @pulumi.getter(name="numberReady")
    def number_ready(self) -> int:
        """
        The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
        """
        return pulumi.get(self, "number_ready")

    @property
    @pulumi.getter(name="collisionCount")
    def collision_count(self) -> Optional[int]:
        """
        Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
        """
        return pulumi.get(self, "collision_count")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.SubmarinerStatusEngineDaemonSetStatusConditions']]:
        """
        Represents the latest available observations of a DaemonSet's current state.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="numberAvailable")
    def number_available(self) -> Optional[int]:
        """
        The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
        """
        return pulumi.get(self, "number_available")

    @property
    @pulumi.getter(name="numberUnavailable")
    def number_unavailable(self) -> Optional[int]:
        """
        The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
        """
        return pulumi.get(self, "number_unavailable")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        The most recent generation observed by the daemon set controller.
        """
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter(name="updatedNumberScheduled")
    def updated_number_scheduled(self) -> Optional[int]:
        """
        The total number of nodes that are running updated daemon pod
        """
        return pulumi.get(self, "updated_number_scheduled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubmarinerStatusEngineDaemonSetStatusConditions(dict):
    """
    DaemonSetCondition describes the state of a DaemonSet at a certain point.
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        DaemonSetCondition describes the state of a DaemonSet at a certain point.
        :param str status: Status of the condition, one of True, False, Unknown.
        :param str type: Type of DaemonSet condition.
        :param str last_transition_time: Last time the condition transitioned from one status to another.
        :param str message: A human readable message indicating details about the transition.
        :param str reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of DaemonSet condition.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubmarinerStatusGateways(dict):
    def __init__(__self__, *,
                 status: 'outputs.SubmarinerStatusGatewaysStatus',
                 api_version: Optional[str] = None,
                 kind: Optional[str] = None,
                 metadata: Optional[Mapping[str, Any]] = None):
        """
        :param str api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        :param str kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        """
        pulumi.set(__self__, "status", status)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def status(self) -> 'outputs.SubmarinerStatusGatewaysStatus':
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "metadata")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubmarinerStatusGatewaysStatus(dict):
    def __init__(__self__, *,
                 connections: Sequence['outputs.SubmarinerStatusGatewaysStatusConnections'],
                 ha_status: str,
                 local_endpoint: 'outputs.SubmarinerStatusGatewaysStatusLocalEndpoint',
                 status_failure: str,
                 version: str):
        pulumi.set(__self__, "connections", connections)
        pulumi.set(__self__, "ha_status", ha_status)
        pulumi.set(__self__, "local_endpoint", local_endpoint)
        pulumi.set(__self__, "status_failure", status_failure)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.SubmarinerStatusGatewaysStatusConnections']:
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter(name="haStatus")
    def ha_status(self) -> str:
        return pulumi.get(self, "ha_status")

    @property
    @pulumi.getter(name="localEndpoint")
    def local_endpoint(self) -> 'outputs.SubmarinerStatusGatewaysStatusLocalEndpoint':
        return pulumi.get(self, "local_endpoint")

    @property
    @pulumi.getter(name="statusFailure")
    def status_failure(self) -> str:
        return pulumi.get(self, "status_failure")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubmarinerStatusGatewaysStatusConnections(dict):
    def __init__(__self__, *,
                 endpoint: 'outputs.SubmarinerStatusGatewaysStatusConnectionsEndpoint',
                 status: str,
                 status_message: str):
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_message", status_message)

    @property
    @pulumi.getter
    def endpoint(self) -> 'outputs.SubmarinerStatusGatewaysStatusConnectionsEndpoint':
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        return pulumi.get(self, "status_message")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubmarinerStatusGatewaysStatusConnectionsEndpoint(dict):
    def __init__(__self__, *,
                 backend: str,
                 cable_name: str,
                 cluster_id: str,
                 hostname: str,
                 nat_enabled: bool,
                 private_ip: str,
                 public_ip: str,
                 subnets: Sequence[str],
                 backend_config: Optional[Mapping[str, str]] = None):
        pulumi.set(__self__, "backend", backend)
        pulumi.set(__self__, "cable_name", cable_name)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "nat_enabled", nat_enabled)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "subnets", subnets)
        if backend_config is not None:
            pulumi.set(__self__, "backend_config", backend_config)

    @property
    @pulumi.getter
    def backend(self) -> str:
        return pulumi.get(self, "backend")

    @property
    @pulumi.getter
    def cable_name(self) -> str:
        return pulumi.get(self, "cable_name")

    @property
    @pulumi.getter
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def nat_enabled(self) -> bool:
        return pulumi.get(self, "nat_enabled")

    @property
    @pulumi.getter
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence[str]:
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter
    def backend_config(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "backend_config")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubmarinerStatusGatewaysStatusLocalEndpoint(dict):
    def __init__(__self__, *,
                 backend: str,
                 cable_name: str,
                 cluster_id: str,
                 hostname: str,
                 nat_enabled: bool,
                 private_ip: str,
                 public_ip: str,
                 subnets: Sequence[str],
                 backend_config: Optional[Mapping[str, str]] = None):
        pulumi.set(__self__, "backend", backend)
        pulumi.set(__self__, "cable_name", cable_name)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "nat_enabled", nat_enabled)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "subnets", subnets)
        if backend_config is not None:
            pulumi.set(__self__, "backend_config", backend_config)

    @property
    @pulumi.getter
    def backend(self) -> str:
        return pulumi.get(self, "backend")

    @property
    @pulumi.getter
    def cable_name(self) -> str:
        return pulumi.get(self, "cable_name")

    @property
    @pulumi.getter
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def nat_enabled(self) -> bool:
        return pulumi.get(self, "nat_enabled")

    @property
    @pulumi.getter
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence[str]:
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter
    def backend_config(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "backend_config")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubmarinerStatusGlobalnetDaemonSetStatus(dict):
    """
    DaemonSetStatus represents the current status of a daemon set.
    """
    def __init__(__self__, *,
                 current_number_scheduled: int,
                 desired_number_scheduled: int,
                 number_misscheduled: int,
                 number_ready: int,
                 collision_count: Optional[int] = None,
                 conditions: Optional[Sequence['outputs.SubmarinerStatusGlobalnetDaemonSetStatusConditions']] = None,
                 number_available: Optional[int] = None,
                 number_unavailable: Optional[int] = None,
                 observed_generation: Optional[int] = None,
                 updated_number_scheduled: Optional[int] = None):
        """
        DaemonSetStatus represents the current status of a daemon set.
        :param int current_number_scheduled: The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param int desired_number_scheduled: The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param int number_misscheduled: The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param int number_ready: The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
        :param int collision_count: Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
        :param Sequence['SubmarinerStatusGlobalnetDaemonSetStatusConditionsArgs'] conditions: Represents the latest available observations of a DaemonSet's current state.
        :param int number_available: The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
        :param int number_unavailable: The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
        :param int observed_generation: The most recent generation observed by the daemon set controller.
        :param int updated_number_scheduled: The total number of nodes that are running updated daemon pod
        """
        pulumi.set(__self__, "current_number_scheduled", current_number_scheduled)
        pulumi.set(__self__, "desired_number_scheduled", desired_number_scheduled)
        pulumi.set(__self__, "number_misscheduled", number_misscheduled)
        pulumi.set(__self__, "number_ready", number_ready)
        if collision_count is not None:
            pulumi.set(__self__, "collision_count", collision_count)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if number_available is not None:
            pulumi.set(__self__, "number_available", number_available)
        if number_unavailable is not None:
            pulumi.set(__self__, "number_unavailable", number_unavailable)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if updated_number_scheduled is not None:
            pulumi.set(__self__, "updated_number_scheduled", updated_number_scheduled)

    @property
    @pulumi.getter(name="currentNumberScheduled")
    def current_number_scheduled(self) -> int:
        """
        The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "current_number_scheduled")

    @property
    @pulumi.getter(name="desiredNumberScheduled")
    def desired_number_scheduled(self) -> int:
        """
        The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "desired_number_scheduled")

    @property
    @pulumi.getter(name="numberMisscheduled")
    def number_misscheduled(self) -> int:
        """
        The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "number_misscheduled")

    @property
    @pulumi.getter(name="numberReady")
    def number_ready(self) -> int:
        """
        The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
        """
        return pulumi.get(self, "number_ready")

    @property
    @pulumi.getter(name="collisionCount")
    def collision_count(self) -> Optional[int]:
        """
        Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
        """
        return pulumi.get(self, "collision_count")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.SubmarinerStatusGlobalnetDaemonSetStatusConditions']]:
        """
        Represents the latest available observations of a DaemonSet's current state.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="numberAvailable")
    def number_available(self) -> Optional[int]:
        """
        The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
        """
        return pulumi.get(self, "number_available")

    @property
    @pulumi.getter(name="numberUnavailable")
    def number_unavailable(self) -> Optional[int]:
        """
        The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
        """
        return pulumi.get(self, "number_unavailable")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        The most recent generation observed by the daemon set controller.
        """
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter(name="updatedNumberScheduled")
    def updated_number_scheduled(self) -> Optional[int]:
        """
        The total number of nodes that are running updated daemon pod
        """
        return pulumi.get(self, "updated_number_scheduled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubmarinerStatusGlobalnetDaemonSetStatusConditions(dict):
    """
    DaemonSetCondition describes the state of a DaemonSet at a certain point.
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        DaemonSetCondition describes the state of a DaemonSet at a certain point.
        :param str status: Status of the condition, one of True, False, Unknown.
        :param str type: Type of DaemonSet condition.
        :param str last_transition_time: Last time the condition transitioned from one status to another.
        :param str message: A human readable message indicating details about the transition.
        :param str reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of DaemonSet condition.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubmarinerStatusRouteAgentDaemonSetStatus(dict):
    """
    DaemonSetStatus represents the current status of a daemon set.
    """
    def __init__(__self__, *,
                 current_number_scheduled: int,
                 desired_number_scheduled: int,
                 number_misscheduled: int,
                 number_ready: int,
                 collision_count: Optional[int] = None,
                 conditions: Optional[Sequence['outputs.SubmarinerStatusRouteAgentDaemonSetStatusConditions']] = None,
                 number_available: Optional[int] = None,
                 number_unavailable: Optional[int] = None,
                 observed_generation: Optional[int] = None,
                 updated_number_scheduled: Optional[int] = None):
        """
        DaemonSetStatus represents the current status of a daemon set.
        :param int current_number_scheduled: The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param int desired_number_scheduled: The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param int number_misscheduled: The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param int number_ready: The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
        :param int collision_count: Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
        :param Sequence['SubmarinerStatusRouteAgentDaemonSetStatusConditionsArgs'] conditions: Represents the latest available observations of a DaemonSet's current state.
        :param int number_available: The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
        :param int number_unavailable: The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
        :param int observed_generation: The most recent generation observed by the daemon set controller.
        :param int updated_number_scheduled: The total number of nodes that are running updated daemon pod
        """
        pulumi.set(__self__, "current_number_scheduled", current_number_scheduled)
        pulumi.set(__self__, "desired_number_scheduled", desired_number_scheduled)
        pulumi.set(__self__, "number_misscheduled", number_misscheduled)
        pulumi.set(__self__, "number_ready", number_ready)
        if collision_count is not None:
            pulumi.set(__self__, "collision_count", collision_count)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if number_available is not None:
            pulumi.set(__self__, "number_available", number_available)
        if number_unavailable is not None:
            pulumi.set(__self__, "number_unavailable", number_unavailable)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if updated_number_scheduled is not None:
            pulumi.set(__self__, "updated_number_scheduled", updated_number_scheduled)

    @property
    @pulumi.getter(name="currentNumberScheduled")
    def current_number_scheduled(self) -> int:
        """
        The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "current_number_scheduled")

    @property
    @pulumi.getter(name="desiredNumberScheduled")
    def desired_number_scheduled(self) -> int:
        """
        The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "desired_number_scheduled")

    @property
    @pulumi.getter(name="numberMisscheduled")
    def number_misscheduled(self) -> int:
        """
        The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "number_misscheduled")

    @property
    @pulumi.getter(name="numberReady")
    def number_ready(self) -> int:
        """
        The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
        """
        return pulumi.get(self, "number_ready")

    @property
    @pulumi.getter(name="collisionCount")
    def collision_count(self) -> Optional[int]:
        """
        Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
        """
        return pulumi.get(self, "collision_count")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.SubmarinerStatusRouteAgentDaemonSetStatusConditions']]:
        """
        Represents the latest available observations of a DaemonSet's current state.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="numberAvailable")
    def number_available(self) -> Optional[int]:
        """
        The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
        """
        return pulumi.get(self, "number_available")

    @property
    @pulumi.getter(name="numberUnavailable")
    def number_unavailable(self) -> Optional[int]:
        """
        The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
        """
        return pulumi.get(self, "number_unavailable")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        The most recent generation observed by the daemon set controller.
        """
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter(name="updatedNumberScheduled")
    def updated_number_scheduled(self) -> Optional[int]:
        """
        The total number of nodes that are running updated daemon pod
        """
        return pulumi.get(self, "updated_number_scheduled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SubmarinerStatusRouteAgentDaemonSetStatusConditions(dict):
    """
    DaemonSetCondition describes the state of a DaemonSet at a certain point.
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        DaemonSetCondition describes the state of a DaemonSet at a certain point.
        :param str status: Status of the condition, one of True, False, Unknown.
        :param str type: Type of DaemonSet condition.
        :param str last_transition_time: Last time the condition transitioned from one status to another.
        :param str message: A human readable message indicating details about the transition.
        :param str reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of DaemonSet condition.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'ServiceDiscoverySpecArgs',
    'SubmarinerSpecArgs',
    'SubmarinerStatusArgs',
    'SubmarinerStatusEngineDaemonSetStatusArgs',
    'SubmarinerStatusEngineDaemonSetStatusConditionsArgs',
    'SubmarinerStatusGatewaysArgs',
    'SubmarinerStatusGatewaysStatusArgs',
    'SubmarinerStatusGatewaysStatusConnectionsArgs',
    'SubmarinerStatusGatewaysStatusConnectionsEndpointArgs',
    'SubmarinerStatusGatewaysStatusLocalEndpointArgs',
    'SubmarinerStatusGlobalnetDaemonSetStatusArgs',
    'SubmarinerStatusGlobalnetDaemonSetStatusConditionsArgs',
    'SubmarinerStatusRouteAgentDaemonSetStatusArgs',
    'SubmarinerStatusRouteAgentDaemonSetStatusConditionsArgs',
]

@pulumi.input_type
class ServiceDiscoverySpecArgs:
    def __init__(__self__, *,
                 broker_k8s_api_server: pulumi.Input[str],
                 broker_k8s_api_server_token: pulumi.Input[str],
                 broker_k8s_ca: pulumi.Input[str],
                 broker_k8s_remote_namespace: pulumi.Input[str],
                 cluster_id: pulumi.Input[str],
                 debug: pulumi.Input[bool],
                 namespace: pulumi.Input[str],
                 globalnet_enabled: Optional[pulumi.Input[bool]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        ServiceDiscoverySpec defines the desired state of ServiceDiscovery
        """
        pulumi.set(__self__, "broker_k8s_api_server", broker_k8s_api_server)
        pulumi.set(__self__, "broker_k8s_api_server_token", broker_k8s_api_server_token)
        pulumi.set(__self__, "broker_k8s_ca", broker_k8s_ca)
        pulumi.set(__self__, "broker_k8s_remote_namespace", broker_k8s_remote_namespace)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "debug", debug)
        pulumi.set(__self__, "namespace", namespace)
        if globalnet_enabled is not None:
            pulumi.set(__self__, "globalnet_enabled", globalnet_enabled)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="brokerK8sApiServer")
    def broker_k8s_api_server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "broker_k8s_api_server")

    @broker_k8s_api_server.setter
    def broker_k8s_api_server(self, value: pulumi.Input[str]):
        pulumi.set(self, "broker_k8s_api_server", value)

    @property
    @pulumi.getter(name="brokerK8sApiServerToken")
    def broker_k8s_api_server_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "broker_k8s_api_server_token")

    @broker_k8s_api_server_token.setter
    def broker_k8s_api_server_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "broker_k8s_api_server_token", value)

    @property
    @pulumi.getter(name="brokerK8sCA")
    def broker_k8s_ca(self) -> pulumi.Input[str]:
        return pulumi.get(self, "broker_k8s_ca")

    @broker_k8s_ca.setter
    def broker_k8s_ca(self, value: pulumi.Input[str]):
        pulumi.set(self, "broker_k8s_ca", value)

    @property
    @pulumi.getter(name="brokerK8sRemoteNamespace")
    def broker_k8s_remote_namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "broker_k8s_remote_namespace")

    @broker_k8s_remote_namespace.setter
    def broker_k8s_remote_namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "broker_k8s_remote_namespace", value)

    @property
    @pulumi.getter(name="clusterID")
    def cluster_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def debug(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: pulumi.Input[bool]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="globalnetEnabled")
    def globalnet_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "globalnet_enabled")

    @globalnet_enabled.setter
    def globalnet_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "globalnet_enabled", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class SubmarinerSpecArgs:
    def __init__(__self__, *,
                 broker: pulumi.Input[str],
                 broker_k8s_api_server: pulumi.Input[str],
                 broker_k8s_api_server_token: pulumi.Input[str],
                 broker_k8s_ca: pulumi.Input[str],
                 broker_k8s_remote_namespace: pulumi.Input[str],
                 ce_ip_sec_debug: pulumi.Input[bool],
                 ce_ip_sec_psk: pulumi.Input[str],
                 cluster_cidr: pulumi.Input[str],
                 cluster_id: pulumi.Input[str],
                 debug: pulumi.Input[bool],
                 namespace: pulumi.Input[str],
                 nat_enabled: pulumi.Input[bool],
                 service_cidr: pulumi.Input[str],
                 cable_driver: Optional[pulumi.Input[str]] = None,
                 ce_ip_sec_ike_port: Optional[pulumi.Input[int]] = None,
                 ce_ip_sec_natt_port: Optional[pulumi.Input[int]] = None,
                 color_codes: Optional[pulumi.Input[str]] = None,
                 global_cidr: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 service_discovery_enabled: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        SubmarinerSpec defines the desired state of Submariner
        """
        pulumi.set(__self__, "broker", broker)
        pulumi.set(__self__, "broker_k8s_api_server", broker_k8s_api_server)
        pulumi.set(__self__, "broker_k8s_api_server_token", broker_k8s_api_server_token)
        pulumi.set(__self__, "broker_k8s_ca", broker_k8s_ca)
        pulumi.set(__self__, "broker_k8s_remote_namespace", broker_k8s_remote_namespace)
        pulumi.set(__self__, "ce_ip_sec_debug", ce_ip_sec_debug)
        pulumi.set(__self__, "ce_ip_sec_psk", ce_ip_sec_psk)
        pulumi.set(__self__, "cluster_cidr", cluster_cidr)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "debug", debug)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "nat_enabled", nat_enabled)
        pulumi.set(__self__, "service_cidr", service_cidr)
        if cable_driver is not None:
            pulumi.set(__self__, "cable_driver", cable_driver)
        if ce_ip_sec_ike_port is not None:
            pulumi.set(__self__, "ce_ip_sec_ike_port", ce_ip_sec_ike_port)
        if ce_ip_sec_natt_port is not None:
            pulumi.set(__self__, "ce_ip_sec_natt_port", ce_ip_sec_natt_port)
        if color_codes is not None:
            pulumi.set(__self__, "color_codes", color_codes)
        if global_cidr is not None:
            pulumi.set(__self__, "global_cidr", global_cidr)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if service_discovery_enabled is not None:
            pulumi.set(__self__, "service_discovery_enabled", service_discovery_enabled)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def broker(self) -> pulumi.Input[str]:
        return pulumi.get(self, "broker")

    @broker.setter
    def broker(self, value: pulumi.Input[str]):
        pulumi.set(self, "broker", value)

    @property
    @pulumi.getter(name="brokerK8sApiServer")
    def broker_k8s_api_server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "broker_k8s_api_server")

    @broker_k8s_api_server.setter
    def broker_k8s_api_server(self, value: pulumi.Input[str]):
        pulumi.set(self, "broker_k8s_api_server", value)

    @property
    @pulumi.getter(name="brokerK8sApiServerToken")
    def broker_k8s_api_server_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "broker_k8s_api_server_token")

    @broker_k8s_api_server_token.setter
    def broker_k8s_api_server_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "broker_k8s_api_server_token", value)

    @property
    @pulumi.getter(name="brokerK8sCA")
    def broker_k8s_ca(self) -> pulumi.Input[str]:
        return pulumi.get(self, "broker_k8s_ca")

    @broker_k8s_ca.setter
    def broker_k8s_ca(self, value: pulumi.Input[str]):
        pulumi.set(self, "broker_k8s_ca", value)

    @property
    @pulumi.getter(name="brokerK8sRemoteNamespace")
    def broker_k8s_remote_namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "broker_k8s_remote_namespace")

    @broker_k8s_remote_namespace.setter
    def broker_k8s_remote_namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "broker_k8s_remote_namespace", value)

    @property
    @pulumi.getter(name="ceIPSecDebug")
    def ce_ip_sec_debug(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "ce_ip_sec_debug")

    @ce_ip_sec_debug.setter
    def ce_ip_sec_debug(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ce_ip_sec_debug", value)

    @property
    @pulumi.getter(name="ceIPSecPSK")
    def ce_ip_sec_psk(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ce_ip_sec_psk")

    @ce_ip_sec_psk.setter
    def ce_ip_sec_psk(self, value: pulumi.Input[str]):
        pulumi.set(self, "ce_ip_sec_psk", value)

    @property
    @pulumi.getter(name="clusterCIDR")
    def cluster_cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_cidr")

    @cluster_cidr.setter
    def cluster_cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_cidr", value)

    @property
    @pulumi.getter(name="clusterID")
    def cluster_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def debug(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: pulumi.Input[bool]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="natEnabled")
    def nat_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "nat_enabled")

    @nat_enabled.setter
    def nat_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "nat_enabled", value)

    @property
    @pulumi.getter(name="serviceCIDR")
    def service_cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_cidr")

    @service_cidr.setter
    def service_cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_cidr", value)

    @property
    @pulumi.getter(name="cableDriver")
    def cable_driver(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cable_driver")

    @cable_driver.setter
    def cable_driver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cable_driver", value)

    @property
    @pulumi.getter(name="ceIPSecIKEPort")
    def ce_ip_sec_ike_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ce_ip_sec_ike_port")

    @ce_ip_sec_ike_port.setter
    def ce_ip_sec_ike_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ce_ip_sec_ike_port", value)

    @property
    @pulumi.getter(name="ceIPSecNATTPort")
    def ce_ip_sec_natt_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ce_ip_sec_natt_port")

    @ce_ip_sec_natt_port.setter
    def ce_ip_sec_natt_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ce_ip_sec_natt_port", value)

    @property
    @pulumi.getter(name="colorCodes")
    def color_codes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color_codes")

    @color_codes.setter
    def color_codes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_codes", value)

    @property
    @pulumi.getter(name="globalCIDR")
    def global_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_cidr")

    @global_cidr.setter
    def global_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_cidr", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="serviceDiscoveryEnabled")
    def service_discovery_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "service_discovery_enabled")

    @service_discovery_enabled.setter
    def service_discovery_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "service_discovery_enabled", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class SubmarinerStatusArgs:
    def __init__(__self__, *,
                 cluster_cidr: pulumi.Input[str],
                 cluster_id: pulumi.Input[str],
                 nat_enabled: pulumi.Input[bool],
                 service_cidr: pulumi.Input[str],
                 color_codes: Optional[pulumi.Input[str]] = None,
                 engine_daemon_set_status: Optional[pulumi.Input['SubmarinerStatusEngineDaemonSetStatusArgs']] = None,
                 gateways: Optional[pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusGatewaysArgs']]]] = None,
                 global_cidr: Optional[pulumi.Input[str]] = None,
                 globalnet_daemon_set_status: Optional[pulumi.Input['SubmarinerStatusGlobalnetDaemonSetStatusArgs']] = None,
                 route_agent_daemon_set_status: Optional[pulumi.Input['SubmarinerStatusRouteAgentDaemonSetStatusArgs']] = None):
        """
        SubmarinerStatus defines the observed state of Submariner
        :param pulumi.Input['SubmarinerStatusEngineDaemonSetStatusArgs'] engine_daemon_set_status: DaemonSetStatus represents the current status of a daemon set.
        :param pulumi.Input['SubmarinerStatusGlobalnetDaemonSetStatusArgs'] globalnet_daemon_set_status: DaemonSetStatus represents the current status of a daemon set.
        :param pulumi.Input['SubmarinerStatusRouteAgentDaemonSetStatusArgs'] route_agent_daemon_set_status: DaemonSetStatus represents the current status of a daemon set.
        """
        pulumi.set(__self__, "cluster_cidr", cluster_cidr)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "nat_enabled", nat_enabled)
        pulumi.set(__self__, "service_cidr", service_cidr)
        if color_codes is not None:
            pulumi.set(__self__, "color_codes", color_codes)
        if engine_daemon_set_status is not None:
            pulumi.set(__self__, "engine_daemon_set_status", engine_daemon_set_status)
        if gateways is not None:
            pulumi.set(__self__, "gateways", gateways)
        if global_cidr is not None:
            pulumi.set(__self__, "global_cidr", global_cidr)
        if globalnet_daemon_set_status is not None:
            pulumi.set(__self__, "globalnet_daemon_set_status", globalnet_daemon_set_status)
        if route_agent_daemon_set_status is not None:
            pulumi.set(__self__, "route_agent_daemon_set_status", route_agent_daemon_set_status)

    @property
    @pulumi.getter(name="clusterCIDR")
    def cluster_cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_cidr")

    @cluster_cidr.setter
    def cluster_cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_cidr", value)

    @property
    @pulumi.getter(name="clusterID")
    def cluster_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="natEnabled")
    def nat_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "nat_enabled")

    @nat_enabled.setter
    def nat_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "nat_enabled", value)

    @property
    @pulumi.getter(name="serviceCIDR")
    def service_cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_cidr")

    @service_cidr.setter
    def service_cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_cidr", value)

    @property
    @pulumi.getter(name="colorCodes")
    def color_codes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color_codes")

    @color_codes.setter
    def color_codes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_codes", value)

    @property
    @pulumi.getter(name="engineDaemonSetStatus")
    def engine_daemon_set_status(self) -> Optional[pulumi.Input['SubmarinerStatusEngineDaemonSetStatusArgs']]:
        """
        DaemonSetStatus represents the current status of a daemon set.
        """
        return pulumi.get(self, "engine_daemon_set_status")

    @engine_daemon_set_status.setter
    def engine_daemon_set_status(self, value: Optional[pulumi.Input['SubmarinerStatusEngineDaemonSetStatusArgs']]):
        pulumi.set(self, "engine_daemon_set_status", value)

    @property
    @pulumi.getter
    def gateways(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusGatewaysArgs']]]]:
        return pulumi.get(self, "gateways")

    @gateways.setter
    def gateways(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusGatewaysArgs']]]]):
        pulumi.set(self, "gateways", value)

    @property
    @pulumi.getter(name="globalCIDR")
    def global_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_cidr")

    @global_cidr.setter
    def global_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_cidr", value)

    @property
    @pulumi.getter(name="globalnetDaemonSetStatus")
    def globalnet_daemon_set_status(self) -> Optional[pulumi.Input['SubmarinerStatusGlobalnetDaemonSetStatusArgs']]:
        """
        DaemonSetStatus represents the current status of a daemon set.
        """
        return pulumi.get(self, "globalnet_daemon_set_status")

    @globalnet_daemon_set_status.setter
    def globalnet_daemon_set_status(self, value: Optional[pulumi.Input['SubmarinerStatusGlobalnetDaemonSetStatusArgs']]):
        pulumi.set(self, "globalnet_daemon_set_status", value)

    @property
    @pulumi.getter(name="routeAgentDaemonSetStatus")
    def route_agent_daemon_set_status(self) -> Optional[pulumi.Input['SubmarinerStatusRouteAgentDaemonSetStatusArgs']]:
        """
        DaemonSetStatus represents the current status of a daemon set.
        """
        return pulumi.get(self, "route_agent_daemon_set_status")

    @route_agent_daemon_set_status.setter
    def route_agent_daemon_set_status(self, value: Optional[pulumi.Input['SubmarinerStatusRouteAgentDaemonSetStatusArgs']]):
        pulumi.set(self, "route_agent_daemon_set_status", value)


@pulumi.input_type
class SubmarinerStatusEngineDaemonSetStatusArgs:
    def __init__(__self__, *,
                 current_number_scheduled: pulumi.Input[int],
                 desired_number_scheduled: pulumi.Input[int],
                 number_misscheduled: pulumi.Input[int],
                 number_ready: pulumi.Input[int],
                 collision_count: Optional[pulumi.Input[int]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusEngineDaemonSetStatusConditionsArgs']]]] = None,
                 number_available: Optional[pulumi.Input[int]] = None,
                 number_unavailable: Optional[pulumi.Input[int]] = None,
                 observed_generation: Optional[pulumi.Input[int]] = None,
                 updated_number_scheduled: Optional[pulumi.Input[int]] = None):
        """
        DaemonSetStatus represents the current status of a daemon set.
        :param pulumi.Input[int] current_number_scheduled: The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param pulumi.Input[int] desired_number_scheduled: The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param pulumi.Input[int] number_misscheduled: The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param pulumi.Input[int] number_ready: The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
        :param pulumi.Input[int] collision_count: Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
        :param pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusEngineDaemonSetStatusConditionsArgs']]] conditions: Represents the latest available observations of a DaemonSet's current state.
        :param pulumi.Input[int] number_available: The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
        :param pulumi.Input[int] number_unavailable: The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
        :param pulumi.Input[int] observed_generation: The most recent generation observed by the daemon set controller.
        :param pulumi.Input[int] updated_number_scheduled: The total number of nodes that are running updated daemon pod
        """
        pulumi.set(__self__, "current_number_scheduled", current_number_scheduled)
        pulumi.set(__self__, "desired_number_scheduled", desired_number_scheduled)
        pulumi.set(__self__, "number_misscheduled", number_misscheduled)
        pulumi.set(__self__, "number_ready", number_ready)
        if collision_count is not None:
            pulumi.set(__self__, "collision_count", collision_count)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if number_available is not None:
            pulumi.set(__self__, "number_available", number_available)
        if number_unavailable is not None:
            pulumi.set(__self__, "number_unavailable", number_unavailable)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if updated_number_scheduled is not None:
            pulumi.set(__self__, "updated_number_scheduled", updated_number_scheduled)

    @property
    @pulumi.getter(name="currentNumberScheduled")
    def current_number_scheduled(self) -> pulumi.Input[int]:
        """
        The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "current_number_scheduled")

    @current_number_scheduled.setter
    def current_number_scheduled(self, value: pulumi.Input[int]):
        pulumi.set(self, "current_number_scheduled", value)

    @property
    @pulumi.getter(name="desiredNumberScheduled")
    def desired_number_scheduled(self) -> pulumi.Input[int]:
        """
        The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "desired_number_scheduled")

    @desired_number_scheduled.setter
    def desired_number_scheduled(self, value: pulumi.Input[int]):
        pulumi.set(self, "desired_number_scheduled", value)

    @property
    @pulumi.getter(name="numberMisscheduled")
    def number_misscheduled(self) -> pulumi.Input[int]:
        """
        The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "number_misscheduled")

    @number_misscheduled.setter
    def number_misscheduled(self, value: pulumi.Input[int]):
        pulumi.set(self, "number_misscheduled", value)

    @property
    @pulumi.getter(name="numberReady")
    def number_ready(self) -> pulumi.Input[int]:
        """
        The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
        """
        return pulumi.get(self, "number_ready")

    @number_ready.setter
    def number_ready(self, value: pulumi.Input[int]):
        pulumi.set(self, "number_ready", value)

    @property
    @pulumi.getter(name="collisionCount")
    def collision_count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
        """
        return pulumi.get(self, "collision_count")

    @collision_count.setter
    def collision_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "collision_count", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusEngineDaemonSetStatusConditionsArgs']]]]:
        """
        Represents the latest available observations of a DaemonSet's current state.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusEngineDaemonSetStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="numberAvailable")
    def number_available(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
        """
        return pulumi.get(self, "number_available")

    @number_available.setter
    def number_available(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_available", value)

    @property
    @pulumi.getter(name="numberUnavailable")
    def number_unavailable(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
        """
        return pulumi.get(self, "number_unavailable")

    @number_unavailable.setter
    def number_unavailable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_unavailable", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        The most recent generation observed by the daemon set controller.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter(name="updatedNumberScheduled")
    def updated_number_scheduled(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of nodes that are running updated daemon pod
        """
        return pulumi.get(self, "updated_number_scheduled")

    @updated_number_scheduled.setter
    def updated_number_scheduled(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "updated_number_scheduled", value)


@pulumi.input_type
class SubmarinerStatusEngineDaemonSetStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        DaemonSetCondition describes the state of a DaemonSet at a certain point.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of DaemonSet condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of DaemonSet condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class SubmarinerStatusGatewaysArgs:
    def __init__(__self__, *,
                 status: pulumi.Input['SubmarinerStatusGatewaysStatusArgs'],
                 api_version: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        """
        pulumi.set(__self__, "status", status)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input['SubmarinerStatusGatewaysStatusArgs']:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input['SubmarinerStatusGatewaysStatusArgs']):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "metadata", value)


@pulumi.input_type
class SubmarinerStatusGatewaysStatusArgs:
    def __init__(__self__, *,
                 connections: pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusGatewaysStatusConnectionsArgs']]],
                 ha_status: pulumi.Input[str],
                 local_endpoint: pulumi.Input['SubmarinerStatusGatewaysStatusLocalEndpointArgs'],
                 status_failure: pulumi.Input[str],
                 version: pulumi.Input[str]):
        pulumi.set(__self__, "connections", connections)
        pulumi.set(__self__, "ha_status", ha_status)
        pulumi.set(__self__, "local_endpoint", local_endpoint)
        pulumi.set(__self__, "status_failure", status_failure)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def connections(self) -> pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusGatewaysStatusConnectionsArgs']]]:
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusGatewaysStatusConnectionsArgs']]]):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter(name="haStatus")
    def ha_status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ha_status")

    @ha_status.setter
    def ha_status(self, value: pulumi.Input[str]):
        pulumi.set(self, "ha_status", value)

    @property
    @pulumi.getter(name="localEndpoint")
    def local_endpoint(self) -> pulumi.Input['SubmarinerStatusGatewaysStatusLocalEndpointArgs']:
        return pulumi.get(self, "local_endpoint")

    @local_endpoint.setter
    def local_endpoint(self, value: pulumi.Input['SubmarinerStatusGatewaysStatusLocalEndpointArgs']):
        pulumi.set(self, "local_endpoint", value)

    @property
    @pulumi.getter(name="statusFailure")
    def status_failure(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status_failure")

    @status_failure.setter
    def status_failure(self, value: pulumi.Input[str]):
        pulumi.set(self, "status_failure", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class SubmarinerStatusGatewaysStatusConnectionsArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input['SubmarinerStatusGatewaysStatusConnectionsEndpointArgs'],
                 status: pulumi.Input[str],
                 status_message: pulumi.Input[str]):
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_message", status_message)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input['SubmarinerStatusGatewaysStatusConnectionsEndpointArgs']:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input['SubmarinerStatusGatewaysStatusConnectionsEndpointArgs']):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status_message")

    @status_message.setter
    def status_message(self, value: pulumi.Input[str]):
        pulumi.set(self, "status_message", value)


@pulumi.input_type
class SubmarinerStatusGatewaysStatusConnectionsEndpointArgs:
    def __init__(__self__, *,
                 backend: pulumi.Input[str],
                 cable_name: pulumi.Input[str],
                 cluster_id: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 nat_enabled: pulumi.Input[bool],
                 private_ip: pulumi.Input[str],
                 public_ip: pulumi.Input[str],
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]],
                 backend_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "backend", backend)
        pulumi.set(__self__, "cable_name", cable_name)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "nat_enabled", nat_enabled)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "subnets", subnets)
        if backend_config is not None:
            pulumi.set(__self__, "backend_config", backend_config)

    @property
    @pulumi.getter
    def backend(self) -> pulumi.Input[str]:
        return pulumi.get(self, "backend")

    @backend.setter
    def backend(self, value: pulumi.Input[str]):
        pulumi.set(self, "backend", value)

    @property
    @pulumi.getter
    def cable_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cable_name")

    @cable_name.setter
    def cable_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cable_name", value)

    @property
    @pulumi.getter
    def cluster_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def nat_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "nat_enabled")

    @nat_enabled.setter
    def nat_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "nat_enabled", value)

    @property
    @pulumi.getter
    def private_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter
    def public_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter
    def backend_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "backend_config")

    @backend_config.setter
    def backend_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "backend_config", value)


@pulumi.input_type
class SubmarinerStatusGatewaysStatusLocalEndpointArgs:
    def __init__(__self__, *,
                 backend: pulumi.Input[str],
                 cable_name: pulumi.Input[str],
                 cluster_id: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 nat_enabled: pulumi.Input[bool],
                 private_ip: pulumi.Input[str],
                 public_ip: pulumi.Input[str],
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]],
                 backend_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "backend", backend)
        pulumi.set(__self__, "cable_name", cable_name)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "nat_enabled", nat_enabled)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "subnets", subnets)
        if backend_config is not None:
            pulumi.set(__self__, "backend_config", backend_config)

    @property
    @pulumi.getter
    def backend(self) -> pulumi.Input[str]:
        return pulumi.get(self, "backend")

    @backend.setter
    def backend(self, value: pulumi.Input[str]):
        pulumi.set(self, "backend", value)

    @property
    @pulumi.getter
    def cable_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cable_name")

    @cable_name.setter
    def cable_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cable_name", value)

    @property
    @pulumi.getter
    def cluster_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def nat_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "nat_enabled")

    @nat_enabled.setter
    def nat_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "nat_enabled", value)

    @property
    @pulumi.getter
    def private_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter
    def public_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter
    def backend_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "backend_config")

    @backend_config.setter
    def backend_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "backend_config", value)


@pulumi.input_type
class SubmarinerStatusGlobalnetDaemonSetStatusArgs:
    def __init__(__self__, *,
                 current_number_scheduled: pulumi.Input[int],
                 desired_number_scheduled: pulumi.Input[int],
                 number_misscheduled: pulumi.Input[int],
                 number_ready: pulumi.Input[int],
                 collision_count: Optional[pulumi.Input[int]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusGlobalnetDaemonSetStatusConditionsArgs']]]] = None,
                 number_available: Optional[pulumi.Input[int]] = None,
                 number_unavailable: Optional[pulumi.Input[int]] = None,
                 observed_generation: Optional[pulumi.Input[int]] = None,
                 updated_number_scheduled: Optional[pulumi.Input[int]] = None):
        """
        DaemonSetStatus represents the current status of a daemon set.
        :param pulumi.Input[int] current_number_scheduled: The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param pulumi.Input[int] desired_number_scheduled: The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param pulumi.Input[int] number_misscheduled: The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param pulumi.Input[int] number_ready: The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
        :param pulumi.Input[int] collision_count: Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
        :param pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusGlobalnetDaemonSetStatusConditionsArgs']]] conditions: Represents the latest available observations of a DaemonSet's current state.
        :param pulumi.Input[int] number_available: The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
        :param pulumi.Input[int] number_unavailable: The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
        :param pulumi.Input[int] observed_generation: The most recent generation observed by the daemon set controller.
        :param pulumi.Input[int] updated_number_scheduled: The total number of nodes that are running updated daemon pod
        """
        pulumi.set(__self__, "current_number_scheduled", current_number_scheduled)
        pulumi.set(__self__, "desired_number_scheduled", desired_number_scheduled)
        pulumi.set(__self__, "number_misscheduled", number_misscheduled)
        pulumi.set(__self__, "number_ready", number_ready)
        if collision_count is not None:
            pulumi.set(__self__, "collision_count", collision_count)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if number_available is not None:
            pulumi.set(__self__, "number_available", number_available)
        if number_unavailable is not None:
            pulumi.set(__self__, "number_unavailable", number_unavailable)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if updated_number_scheduled is not None:
            pulumi.set(__self__, "updated_number_scheduled", updated_number_scheduled)

    @property
    @pulumi.getter(name="currentNumberScheduled")
    def current_number_scheduled(self) -> pulumi.Input[int]:
        """
        The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "current_number_scheduled")

    @current_number_scheduled.setter
    def current_number_scheduled(self, value: pulumi.Input[int]):
        pulumi.set(self, "current_number_scheduled", value)

    @property
    @pulumi.getter(name="desiredNumberScheduled")
    def desired_number_scheduled(self) -> pulumi.Input[int]:
        """
        The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "desired_number_scheduled")

    @desired_number_scheduled.setter
    def desired_number_scheduled(self, value: pulumi.Input[int]):
        pulumi.set(self, "desired_number_scheduled", value)

    @property
    @pulumi.getter(name="numberMisscheduled")
    def number_misscheduled(self) -> pulumi.Input[int]:
        """
        The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "number_misscheduled")

    @number_misscheduled.setter
    def number_misscheduled(self, value: pulumi.Input[int]):
        pulumi.set(self, "number_misscheduled", value)

    @property
    @pulumi.getter(name="numberReady")
    def number_ready(self) -> pulumi.Input[int]:
        """
        The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
        """
        return pulumi.get(self, "number_ready")

    @number_ready.setter
    def number_ready(self, value: pulumi.Input[int]):
        pulumi.set(self, "number_ready", value)

    @property
    @pulumi.getter(name="collisionCount")
    def collision_count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
        """
        return pulumi.get(self, "collision_count")

    @collision_count.setter
    def collision_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "collision_count", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusGlobalnetDaemonSetStatusConditionsArgs']]]]:
        """
        Represents the latest available observations of a DaemonSet's current state.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusGlobalnetDaemonSetStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="numberAvailable")
    def number_available(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
        """
        return pulumi.get(self, "number_available")

    @number_available.setter
    def number_available(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_available", value)

    @property
    @pulumi.getter(name="numberUnavailable")
    def number_unavailable(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
        """
        return pulumi.get(self, "number_unavailable")

    @number_unavailable.setter
    def number_unavailable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_unavailable", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        The most recent generation observed by the daemon set controller.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter(name="updatedNumberScheduled")
    def updated_number_scheduled(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of nodes that are running updated daemon pod
        """
        return pulumi.get(self, "updated_number_scheduled")

    @updated_number_scheduled.setter
    def updated_number_scheduled(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "updated_number_scheduled", value)


@pulumi.input_type
class SubmarinerStatusGlobalnetDaemonSetStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        DaemonSetCondition describes the state of a DaemonSet at a certain point.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of DaemonSet condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of DaemonSet condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class SubmarinerStatusRouteAgentDaemonSetStatusArgs:
    def __init__(__self__, *,
                 current_number_scheduled: pulumi.Input[int],
                 desired_number_scheduled: pulumi.Input[int],
                 number_misscheduled: pulumi.Input[int],
                 number_ready: pulumi.Input[int],
                 collision_count: Optional[pulumi.Input[int]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusRouteAgentDaemonSetStatusConditionsArgs']]]] = None,
                 number_available: Optional[pulumi.Input[int]] = None,
                 number_unavailable: Optional[pulumi.Input[int]] = None,
                 observed_generation: Optional[pulumi.Input[int]] = None,
                 updated_number_scheduled: Optional[pulumi.Input[int]] = None):
        """
        DaemonSetStatus represents the current status of a daemon set.
        :param pulumi.Input[int] current_number_scheduled: The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param pulumi.Input[int] desired_number_scheduled: The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param pulumi.Input[int] number_misscheduled: The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        :param pulumi.Input[int] number_ready: The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
        :param pulumi.Input[int] collision_count: Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
        :param pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusRouteAgentDaemonSetStatusConditionsArgs']]] conditions: Represents the latest available observations of a DaemonSet's current state.
        :param pulumi.Input[int] number_available: The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
        :param pulumi.Input[int] number_unavailable: The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
        :param pulumi.Input[int] observed_generation: The most recent generation observed by the daemon set controller.
        :param pulumi.Input[int] updated_number_scheduled: The total number of nodes that are running updated daemon pod
        """
        pulumi.set(__self__, "current_number_scheduled", current_number_scheduled)
        pulumi.set(__self__, "desired_number_scheduled", desired_number_scheduled)
        pulumi.set(__self__, "number_misscheduled", number_misscheduled)
        pulumi.set(__self__, "number_ready", number_ready)
        if collision_count is not None:
            pulumi.set(__self__, "collision_count", collision_count)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if number_available is not None:
            pulumi.set(__self__, "number_available", number_available)
        if number_unavailable is not None:
            pulumi.set(__self__, "number_unavailable", number_unavailable)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if updated_number_scheduled is not None:
            pulumi.set(__self__, "updated_number_scheduled", updated_number_scheduled)

    @property
    @pulumi.getter(name="currentNumberScheduled")
    def current_number_scheduled(self) -> pulumi.Input[int]:
        """
        The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "current_number_scheduled")

    @current_number_scheduled.setter
    def current_number_scheduled(self, value: pulumi.Input[int]):
        pulumi.set(self, "current_number_scheduled", value)

    @property
    @pulumi.getter(name="desiredNumberScheduled")
    def desired_number_scheduled(self) -> pulumi.Input[int]:
        """
        The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "desired_number_scheduled")

    @desired_number_scheduled.setter
    def desired_number_scheduled(self, value: pulumi.Input[int]):
        pulumi.set(self, "desired_number_scheduled", value)

    @property
    @pulumi.getter(name="numberMisscheduled")
    def number_misscheduled(self) -> pulumi.Input[int]:
        """
        The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        """
        return pulumi.get(self, "number_misscheduled")

    @number_misscheduled.setter
    def number_misscheduled(self, value: pulumi.Input[int]):
        pulumi.set(self, "number_misscheduled", value)

    @property
    @pulumi.getter(name="numberReady")
    def number_ready(self) -> pulumi.Input[int]:
        """
        The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
        """
        return pulumi.get(self, "number_ready")

    @number_ready.setter
    def number_ready(self, value: pulumi.Input[int]):
        pulumi.set(self, "number_ready", value)

    @property
    @pulumi.getter(name="collisionCount")
    def collision_count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
        """
        return pulumi.get(self, "collision_count")

    @collision_count.setter
    def collision_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "collision_count", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusRouteAgentDaemonSetStatusConditionsArgs']]]]:
        """
        Represents the latest available observations of a DaemonSet's current state.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SubmarinerStatusRouteAgentDaemonSetStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="numberAvailable")
    def number_available(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
        """
        return pulumi.get(self, "number_available")

    @number_available.setter
    def number_available(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_available", value)

    @property
    @pulumi.getter(name="numberUnavailable")
    def number_unavailable(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
        """
        return pulumi.get(self, "number_unavailable")

    @number_unavailable.setter
    def number_unavailable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_unavailable", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        The most recent generation observed by the daemon set controller.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter(name="updatedNumberScheduled")
    def updated_number_scheduled(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of nodes that are running updated daemon pod
        """
        return pulumi.get(self, "updated_number_scheduled")

    @updated_number_scheduled.setter
    def updated_number_scheduled(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "updated_number_scheduled", value)


@pulumi.input_type
class SubmarinerStatusRouteAgentDaemonSetStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        DaemonSetCondition describes the state of a DaemonSet at a certain point.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of DaemonSet condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of DaemonSet condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)



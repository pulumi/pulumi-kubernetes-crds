// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Submariner.V1Alpha1
{

    [OutputType]
    public sealed class SubmarinerStatus
    {
        public readonly string ClusterCIDR;
        public readonly string ClusterID;
        public readonly string ColorCodes;
        public readonly Pulumi.Kubernetes.Types.Outputs.Submariner.V1Alpha1.SubmarinerStatusEngineDaemonSetStatus EngineDaemonSetStatus;
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Submariner.V1Alpha1.SubmarinerStatusGateways> Gateways;
        public readonly string GlobalCIDR;
        public readonly Pulumi.Kubernetes.Types.Outputs.Submariner.V1Alpha1.SubmarinerStatusGlobalnetDaemonSetStatus GlobalnetDaemonSetStatus;
        public readonly bool NatEnabled;
        public readonly string NetworkPlugin;
        public readonly Pulumi.Kubernetes.Types.Outputs.Submariner.V1Alpha1.SubmarinerStatusRouteAgentDaemonSetStatus RouteAgentDaemonSetStatus;
        public readonly string ServiceCIDR;

        [OutputConstructor]
        private SubmarinerStatus(
            string clusterCIDR,

            string clusterID,

            string colorCodes,

            Pulumi.Kubernetes.Types.Outputs.Submariner.V1Alpha1.SubmarinerStatusEngineDaemonSetStatus engineDaemonSetStatus,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Submariner.V1Alpha1.SubmarinerStatusGateways> gateways,

            string globalCIDR,

            Pulumi.Kubernetes.Types.Outputs.Submariner.V1Alpha1.SubmarinerStatusGlobalnetDaemonSetStatus globalnetDaemonSetStatus,

            bool natEnabled,

            string networkPlugin,

            Pulumi.Kubernetes.Types.Outputs.Submariner.V1Alpha1.SubmarinerStatusRouteAgentDaemonSetStatus routeAgentDaemonSetStatus,

            string serviceCIDR)
        {
            ClusterCIDR = clusterCIDR;
            ClusterID = clusterID;
            ColorCodes = colorCodes;
            EngineDaemonSetStatus = engineDaemonSetStatus;
            Gateways = gateways;
            GlobalCIDR = globalCIDR;
            GlobalnetDaemonSetStatus = globalnetDaemonSetStatus;
            NatEnabled = natEnabled;
            NetworkPlugin = networkPlugin;
            RouteAgentDaemonSetStatus = routeAgentDaemonSetStatus;
            ServiceCIDR = serviceCIDR;
        }
    }
}

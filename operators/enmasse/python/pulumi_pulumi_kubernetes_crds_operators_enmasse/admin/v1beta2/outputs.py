# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'AddressPlanRequiredResources',
    'AddressPlanSpec',
    'AddressPlanSpecMessageTtl',
    'AddressPlanSpecResources',
    'AddressSpacePlanResources',
    'AddressSpacePlanSpec',
    'AddressSpacePlanSpecResourceLimits',
]

@pulumi.output_type
class AddressPlanRequiredResources(dict):
    def __init__(__self__, *,
                 credit: float,
                 name: str):
        pulumi.set(__self__, "credit", credit)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def credit(self) -> float:
        return pulumi.get(self, "credit")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AddressPlanSpec(dict):
    def __init__(__self__, *,
                 address_type: str,
                 resources: 'outputs.AddressPlanSpecResources',
                 display_name: Optional[str] = None,
                 display_order: Optional[int] = None,
                 long_description: Optional[str] = None,
                 message_ttl: Optional['outputs.AddressPlanSpecMessageTtl'] = None,
                 partitions: Optional[int] = None,
                 short_description: Optional[str] = None):
        """
        :param 'AddressPlanSpecMessageTtlArgs' message_ttl: Restricts message time-to-live (TTL). Applies to address types queue and topic only.
        """
        pulumi.set(__self__, "address_type", address_type)
        pulumi.set(__self__, "resources", resources)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if display_order is not None:
            pulumi.set(__self__, "display_order", display_order)
        if long_description is not None:
            pulumi.set(__self__, "long_description", long_description)
        if message_ttl is not None:
            pulumi.set(__self__, "message_ttl", message_ttl)
        if partitions is not None:
            pulumi.set(__self__, "partitions", partitions)
        if short_description is not None:
            pulumi.set(__self__, "short_description", short_description)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> str:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.AddressPlanSpecResources':
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> Optional[int]:
        return pulumi.get(self, "display_order")

    @property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> Optional[str]:
        return pulumi.get(self, "long_description")

    @property
    @pulumi.getter(name="messageTtl")
    def message_ttl(self) -> Optional['outputs.AddressPlanSpecMessageTtl']:
        """
        Restricts message time-to-live (TTL). Applies to address types queue and topic only.
        """
        return pulumi.get(self, "message_ttl")

    @property
    @pulumi.getter
    def partitions(self) -> Optional[int]:
        return pulumi.get(self, "partitions")

    @property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> Optional[str]:
        return pulumi.get(self, "short_description")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AddressPlanSpecMessageTtl(dict):
    """
    Restricts message time-to-live (TTL). Applies to address types queue and topic only.
    """
    def __init__(__self__, *,
                 maximum: Optional[int] = None,
                 minimum: Optional[int] = None):
        """
        Restricts message time-to-live (TTL). Applies to address types queue and topic only.
        :param int maximum: Imposes a maximum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values greater than this value (or no TTL value) will have their expiration adjusted.
        :param int minimum: Imposes a minimum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values less than this value will have their expiration adjusted.
        """
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[int]:
        """
        Imposes a maximum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values greater than this value (or no TTL value) will have their expiration adjusted.
        """
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> Optional[int]:
        """
        Imposes a minimum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values less than this value will have their expiration adjusted.
        """
        return pulumi.get(self, "minimum")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AddressPlanSpecResources(dict):
    def __init__(__self__, *,
                 broker: Optional[float] = None,
                 router: Optional[float] = None):
        if broker is not None:
            pulumi.set(__self__, "broker", broker)
        if router is not None:
            pulumi.set(__self__, "router", router)

    @property
    @pulumi.getter
    def broker(self) -> Optional[float]:
        return pulumi.get(self, "broker")

    @property
    @pulumi.getter
    def router(self) -> Optional[float]:
        return pulumi.get(self, "router")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AddressSpacePlanResources(dict):
    def __init__(__self__, *,
                 max: float,
                 name: str):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def max(self) -> float:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AddressSpacePlanSpec(dict):
    def __init__(__self__, *,
                 address_plans: Sequence[str],
                 address_space_type: str,
                 infra_config_ref: str,
                 resource_limits: 'outputs.AddressSpacePlanSpecResourceLimits',
                 display_name: Optional[str] = None,
                 display_order: Optional[int] = None,
                 long_description: Optional[str] = None,
                 short_description: Optional[str] = None):
        pulumi.set(__self__, "address_plans", address_plans)
        pulumi.set(__self__, "address_space_type", address_space_type)
        pulumi.set(__self__, "infra_config_ref", infra_config_ref)
        pulumi.set(__self__, "resource_limits", resource_limits)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if display_order is not None:
            pulumi.set(__self__, "display_order", display_order)
        if long_description is not None:
            pulumi.set(__self__, "long_description", long_description)
        if short_description is not None:
            pulumi.set(__self__, "short_description", short_description)

    @property
    @pulumi.getter(name="addressPlans")
    def address_plans(self) -> Sequence[str]:
        return pulumi.get(self, "address_plans")

    @property
    @pulumi.getter(name="addressSpaceType")
    def address_space_type(self) -> str:
        return pulumi.get(self, "address_space_type")

    @property
    @pulumi.getter(name="infraConfigRef")
    def infra_config_ref(self) -> str:
        return pulumi.get(self, "infra_config_ref")

    @property
    @pulumi.getter(name="resourceLimits")
    def resource_limits(self) -> 'outputs.AddressSpacePlanSpecResourceLimits':
        return pulumi.get(self, "resource_limits")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> Optional[int]:
        return pulumi.get(self, "display_order")

    @property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> Optional[str]:
        return pulumi.get(self, "long_description")

    @property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> Optional[str]:
        return pulumi.get(self, "short_description")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AddressSpacePlanSpecResourceLimits(dict):
    def __init__(__self__, *,
                 aggregate: Optional[float] = None,
                 broker: Optional[float] = None,
                 router: Optional[float] = None):
        if aggregate is not None:
            pulumi.set(__self__, "aggregate", aggregate)
        if broker is not None:
            pulumi.set(__self__, "broker", broker)
        if router is not None:
            pulumi.set(__self__, "router", router)

    @property
    @pulumi.getter
    def aggregate(self) -> Optional[float]:
        return pulumi.get(self, "aggregate")

    @property
    @pulumi.getter
    def broker(self) -> Optional[float]:
        return pulumi.get(self, "broker")

    @property
    @pulumi.getter
    def router(self) -> Optional[float]:
        return pulumi.get(self, "router")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



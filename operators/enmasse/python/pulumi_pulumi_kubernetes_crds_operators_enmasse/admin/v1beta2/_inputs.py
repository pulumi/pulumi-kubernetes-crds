# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'AddressPlanRequiredResourcesArgs',
    'AddressPlanSpecArgs',
    'AddressPlanSpecMessageTtlArgs',
    'AddressPlanSpecResourcesArgs',
    'AddressSpacePlanResourcesArgs',
    'AddressSpacePlanSpecArgs',
    'AddressSpacePlanSpecResourceLimitsArgs',
]

@pulumi.input_type
class AddressPlanRequiredResourcesArgs:
    def __init__(__self__, *,
                 credit: pulumi.Input[float],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "credit", credit)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def credit(self) -> pulumi.Input[float]:
        return pulumi.get(self, "credit")

    @credit.setter
    def credit(self, value: pulumi.Input[float]):
        pulumi.set(self, "credit", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AddressPlanSpecArgs:
    def __init__(__self__, *,
                 address_type: pulumi.Input[str],
                 resources: pulumi.Input['AddressPlanSpecResourcesArgs'],
                 display_name: Optional[pulumi.Input[str]] = None,
                 display_order: Optional[pulumi.Input[int]] = None,
                 long_description: Optional[pulumi.Input[str]] = None,
                 message_ttl: Optional[pulumi.Input['AddressPlanSpecMessageTtlArgs']] = None,
                 partitions: Optional[pulumi.Input[int]] = None,
                 short_description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['AddressPlanSpecMessageTtlArgs'] message_ttl: Restricts message time-to-live (TTL). Applies to address types queue and topic only.
        """
        pulumi.set(__self__, "address_type", address_type)
        pulumi.set(__self__, "resources", resources)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if display_order is not None:
            pulumi.set(__self__, "display_order", display_order)
        if long_description is not None:
            pulumi.set(__self__, "long_description", long_description)
        if message_ttl is not None:
            pulumi.set(__self__, "message_ttl", message_ttl)
        if partitions is not None:
            pulumi.set(__self__, "partitions", partitions)
        if short_description is not None:
            pulumi.set(__self__, "short_description", short_description)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address_type")

    @address_type.setter
    def address_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "address_type", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input['AddressPlanSpecResourcesArgs']:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input['AddressPlanSpecResourcesArgs']):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "display_order")

    @display_order.setter
    def display_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "display_order", value)

    @property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "long_description")

    @long_description.setter
    def long_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "long_description", value)

    @property
    @pulumi.getter(name="messageTtl")
    def message_ttl(self) -> Optional[pulumi.Input['AddressPlanSpecMessageTtlArgs']]:
        """
        Restricts message time-to-live (TTL). Applies to address types queue and topic only.
        """
        return pulumi.get(self, "message_ttl")

    @message_ttl.setter
    def message_ttl(self, value: Optional[pulumi.Input['AddressPlanSpecMessageTtlArgs']]):
        pulumi.set(self, "message_ttl", value)

    @property
    @pulumi.getter
    def partitions(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "partitions")

    @partitions.setter
    def partitions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partitions", value)

    @property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "short_description")

    @short_description.setter
    def short_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_description", value)


@pulumi.input_type
class AddressPlanSpecMessageTtlArgs:
    def __init__(__self__, *,
                 maximum: Optional[pulumi.Input[int]] = None,
                 minimum: Optional[pulumi.Input[int]] = None):
        """
        Restricts message time-to-live (TTL). Applies to address types queue and topic only.
        :param pulumi.Input[int] maximum: Imposes a maximum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values greater than this value (or no TTL value) will have their expiration adjusted.
        :param pulumi.Input[int] minimum: Imposes a minimum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values less than this value will have their expiration adjusted.
        """
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[int]]:
        """
        Imposes a maximum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values greater than this value (or no TTL value) will have their expiration adjusted.
        """
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum", value)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[int]]:
        """
        Imposes a minimum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values less than this value will have their expiration adjusted.
        """
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum", value)


@pulumi.input_type
class AddressPlanSpecResourcesArgs:
    def __init__(__self__, *,
                 broker: Optional[pulumi.Input[float]] = None,
                 router: Optional[pulumi.Input[float]] = None):
        if broker is not None:
            pulumi.set(__self__, "broker", broker)
        if router is not None:
            pulumi.set(__self__, "router", router)

    @property
    @pulumi.getter
    def broker(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "broker")

    @broker.setter
    def broker(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "broker", value)

    @property
    @pulumi.getter
    def router(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "router")

    @router.setter
    def router(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "router", value)


@pulumi.input_type
class AddressSpacePlanResourcesArgs:
    def __init__(__self__, *,
                 max: pulumi.Input[float],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def max(self) -> pulumi.Input[float]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: pulumi.Input[float]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AddressSpacePlanSpecArgs:
    def __init__(__self__, *,
                 address_plans: pulumi.Input[Sequence[pulumi.Input[str]]],
                 address_space_type: pulumi.Input[str],
                 infra_config_ref: pulumi.Input[str],
                 resource_limits: pulumi.Input['AddressSpacePlanSpecResourceLimitsArgs'],
                 display_name: Optional[pulumi.Input[str]] = None,
                 display_order: Optional[pulumi.Input[int]] = None,
                 long_description: Optional[pulumi.Input[str]] = None,
                 short_description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "address_plans", address_plans)
        pulumi.set(__self__, "address_space_type", address_space_type)
        pulumi.set(__self__, "infra_config_ref", infra_config_ref)
        pulumi.set(__self__, "resource_limits", resource_limits)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if display_order is not None:
            pulumi.set(__self__, "display_order", display_order)
        if long_description is not None:
            pulumi.set(__self__, "long_description", long_description)
        if short_description is not None:
            pulumi.set(__self__, "short_description", short_description)

    @property
    @pulumi.getter(name="addressPlans")
    def address_plans(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "address_plans")

    @address_plans.setter
    def address_plans(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "address_plans", value)

    @property
    @pulumi.getter(name="addressSpaceType")
    def address_space_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address_space_type")

    @address_space_type.setter
    def address_space_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "address_space_type", value)

    @property
    @pulumi.getter(name="infraConfigRef")
    def infra_config_ref(self) -> pulumi.Input[str]:
        return pulumi.get(self, "infra_config_ref")

    @infra_config_ref.setter
    def infra_config_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "infra_config_ref", value)

    @property
    @pulumi.getter(name="resourceLimits")
    def resource_limits(self) -> pulumi.Input['AddressSpacePlanSpecResourceLimitsArgs']:
        return pulumi.get(self, "resource_limits")

    @resource_limits.setter
    def resource_limits(self, value: pulumi.Input['AddressSpacePlanSpecResourceLimitsArgs']):
        pulumi.set(self, "resource_limits", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "display_order")

    @display_order.setter
    def display_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "display_order", value)

    @property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "long_description")

    @long_description.setter
    def long_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "long_description", value)

    @property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "short_description")

    @short_description.setter
    def short_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_description", value)


@pulumi.input_type
class AddressSpacePlanSpecResourceLimitsArgs:
    def __init__(__self__, *,
                 aggregate: Optional[pulumi.Input[float]] = None,
                 broker: Optional[pulumi.Input[float]] = None,
                 router: Optional[pulumi.Input[float]] = None):
        if aggregate is not None:
            pulumi.set(__self__, "aggregate", aggregate)
        if broker is not None:
            pulumi.set(__self__, "broker", broker)
        if router is not None:
            pulumi.set(__self__, "router", router)

    @property
    @pulumi.getter
    def aggregate(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "aggregate")

    @aggregate.setter
    def aggregate(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "aggregate", value)

    @property
    @pulumi.getter
    def broker(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "broker")

    @broker.setter
    def broker(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "broker", value)

    @property
    @pulumi.getter
    def router(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "router")

    @router.setter
    def router(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "router", value)



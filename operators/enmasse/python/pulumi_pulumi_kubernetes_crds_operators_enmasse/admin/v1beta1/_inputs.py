# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'AuthenticationServiceSpecArgs',
    'AuthenticationServiceSpecExternalArgs',
    'AuthenticationServiceSpecExternalCaCertSecretArgs',
    'AuthenticationServiceSpecExternalClientCertSecretArgs',
    'AuthenticationServiceSpecNoneArgs',
    'AuthenticationServiceSpecNoneCertificateSecretArgs',
    'AuthenticationServiceSpecNoneImageArgs',
    'AuthenticationServiceSpecNoneResourcesArgs',
    'AuthenticationServiceSpecNoneResourcesLimitsArgs',
    'AuthenticationServiceSpecNoneResourcesRequestsArgs',
    'AuthenticationServiceSpecStandardArgs',
    'AuthenticationServiceSpecStandardCertificateSecretArgs',
    'AuthenticationServiceSpecStandardCredentialsSecretArgs',
    'AuthenticationServiceSpecStandardDatasourceArgs',
    'AuthenticationServiceSpecStandardDatasourceCredentialsSecretArgs',
    'AuthenticationServiceSpecStandardImageArgs',
    'AuthenticationServiceSpecStandardInitImageArgs',
    'AuthenticationServiceSpecStandardResourcesArgs',
    'AuthenticationServiceSpecStandardResourcesLimitsArgs',
    'AuthenticationServiceSpecStandardResourcesRequestsArgs',
    'AuthenticationServiceSpecStandardStorageArgs',
    'AuthenticationServiceStatusArgs',
    'BrokeredInfraConfigSpecArgs',
    'BrokeredInfraConfigSpecAdminArgs',
    'BrokeredInfraConfigSpecAdminPodTemplateArgs',
    'BrokeredInfraConfigSpecAdminPodTemplateMetadataArgs',
    'BrokeredInfraConfigSpecAdminPodTemplateSpecArgs',
    'BrokeredInfraConfigSpecAdminPodTemplateSpecContainersArgs',
    'BrokeredInfraConfigSpecAdminResourcesArgs',
    'BrokeredInfraConfigSpecBrokerArgs',
    'BrokeredInfraConfigSpecBrokerPodTemplateArgs',
    'BrokeredInfraConfigSpecBrokerPodTemplateMetadataArgs',
    'BrokeredInfraConfigSpecBrokerPodTemplateSpecArgs',
    'BrokeredInfraConfigSpecBrokerResourcesArgs',
    'BrokeredInfraConfigSpecNetworkPolicyArgs',
    'ConsoleServiceSpecArgs',
    'ConsoleServiceSpecCertificateSecretArgs',
    'ConsoleServiceSpecConsoleServerArgs',
    'ConsoleServiceSpecConsoleServerLivenessProbeArgs',
    'ConsoleServiceSpecConsoleServerReadinessProbeArgs',
    'ConsoleServiceSpecConsoleServerResourcesArgs',
    'ConsoleServiceSpecConsoleServerResourcesLimitsArgs',
    'ConsoleServiceSpecConsoleServerResourcesRequestsArgs',
    'ConsoleServiceSpecConsoleServerSessionArgs',
    'ConsoleServiceSpecImpersonationArgs',
    'ConsoleServiceSpecOauthClientSecretArgs',
    'ConsoleServiceSpecOauthProxyArgs',
    'ConsoleServiceSpecOauthProxyResourcesArgs',
    'ConsoleServiceSpecOauthProxyResourcesLimitsArgs',
    'ConsoleServiceSpecOauthProxyResourcesRequestsArgs',
    'ConsoleServiceSpecSsoCookieSecretArgs',
    'ConsoleServiceStatusArgs',
    'ConsoleServiceStatusCaCertSecretArgs',
    'StandardInfraConfigSpecArgs',
    'StandardInfraConfigSpecAdminArgs',
    'StandardInfraConfigSpecAdminPodTemplateArgs',
    'StandardInfraConfigSpecAdminPodTemplateMetadataArgs',
    'StandardInfraConfigSpecAdminPodTemplateSpecArgs',
    'StandardInfraConfigSpecAdminPodTemplateSpecContainersArgs',
    'StandardInfraConfigSpecAdminResourcesArgs',
    'StandardInfraConfigSpecBrokerArgs',
    'StandardInfraConfigSpecBrokerMaxUnavailableArgs',
    'StandardInfraConfigSpecBrokerMinAvailableArgs',
    'StandardInfraConfigSpecBrokerPodTemplateArgs',
    'StandardInfraConfigSpecBrokerPodTemplateMetadataArgs',
    'StandardInfraConfigSpecBrokerPodTemplateSpecArgs',
    'StandardInfraConfigSpecBrokerResourcesArgs',
    'StandardInfraConfigSpecNetworkPolicyArgs',
    'StandardInfraConfigSpecRouterArgs',
    'StandardInfraConfigSpecRouterMaxUnavailableArgs',
    'StandardInfraConfigSpecRouterMinAvailableArgs',
    'StandardInfraConfigSpecRouterPodTemplateArgs',
    'StandardInfraConfigSpecRouterPodTemplateMetadataArgs',
    'StandardInfraConfigSpecRouterPodTemplateSpecArgs',
    'StandardInfraConfigSpecRouterPolicyArgs',
    'StandardInfraConfigSpecRouterResourcesArgs',
]

@pulumi.input_type
class AuthenticationServiceSpecArgs:
    def __init__(__self__, *,
                 external: Optional[pulumi.Input['AuthenticationServiceSpecExternalArgs']] = None,
                 none: Optional[pulumi.Input['AuthenticationServiceSpecNoneArgs']] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 standard: Optional[pulumi.Input['AuthenticationServiceSpecStandardArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if external is not None:
            pulumi.set(__self__, "external", external)
        if none is not None:
            pulumi.set(__self__, "none", none)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if standard is not None:
            pulumi.set(__self__, "standard", standard)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input['AuthenticationServiceSpecExternalArgs']]:
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input['AuthenticationServiceSpecExternalArgs']]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter
    def none(self) -> Optional[pulumi.Input['AuthenticationServiceSpecNoneArgs']]:
        return pulumi.get(self, "none")

    @none.setter
    def none(self, value: Optional[pulumi.Input['AuthenticationServiceSpecNoneArgs']]):
        pulumi.set(self, "none", value)

    @property
    @pulumi.getter
    def realm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter
    def standard(self) -> Optional[pulumi.Input['AuthenticationServiceSpecStandardArgs']]:
        return pulumi.get(self, "standard")

    @standard.setter
    def standard(self, value: Optional[pulumi.Input['AuthenticationServiceSpecStandardArgs']]):
        pulumi.set(self, "standard", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AuthenticationServiceSpecExternalArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 allow_override: Optional[pulumi.Input[bool]] = None,
                 ca_cert_secret: Optional[pulumi.Input['AuthenticationServiceSpecExternalCaCertSecretArgs']] = None,
                 client_cert_secret: Optional[pulumi.Input['AuthenticationServiceSpecExternalClientCertSecretArgs']] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        if allow_override is not None:
            pulumi.set(__self__, "allow_override", allow_override)
        if ca_cert_secret is not None:
            pulumi.set(__self__, "ca_cert_secret", ca_cert_secret)
        if client_cert_secret is not None:
            pulumi.set(__self__, "client_cert_secret", client_cert_secret)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="allowOverride")
    def allow_override(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_override")

    @allow_override.setter
    def allow_override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_override", value)

    @property
    @pulumi.getter(name="caCertSecret")
    def ca_cert_secret(self) -> Optional[pulumi.Input['AuthenticationServiceSpecExternalCaCertSecretArgs']]:
        return pulumi.get(self, "ca_cert_secret")

    @ca_cert_secret.setter
    def ca_cert_secret(self, value: Optional[pulumi.Input['AuthenticationServiceSpecExternalCaCertSecretArgs']]):
        pulumi.set(self, "ca_cert_secret", value)

    @property
    @pulumi.getter(name="clientCertSecret")
    def client_cert_secret(self) -> Optional[pulumi.Input['AuthenticationServiceSpecExternalClientCertSecretArgs']]:
        return pulumi.get(self, "client_cert_secret")

    @client_cert_secret.setter
    def client_cert_secret(self, value: Optional[pulumi.Input['AuthenticationServiceSpecExternalClientCertSecretArgs']]):
        pulumi.set(self, "client_cert_secret", value)


@pulumi.input_type
class AuthenticationServiceSpecExternalCaCertSecretArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class AuthenticationServiceSpecExternalClientCertSecretArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class AuthenticationServiceSpecNoneArgs:
    def __init__(__self__, *,
                 certificate_secret: Optional[pulumi.Input['AuthenticationServiceSpecNoneCertificateSecretArgs']] = None,
                 image: Optional[pulumi.Input['AuthenticationServiceSpecNoneImageArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input['AuthenticationServiceSpecNoneResourcesArgs']] = None):
        if certificate_secret is not None:
            pulumi.set(__self__, "certificate_secret", certificate_secret)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="certificateSecret")
    def certificate_secret(self) -> Optional[pulumi.Input['AuthenticationServiceSpecNoneCertificateSecretArgs']]:
        return pulumi.get(self, "certificate_secret")

    @certificate_secret.setter
    def certificate_secret(self, value: Optional[pulumi.Input['AuthenticationServiceSpecNoneCertificateSecretArgs']]):
        pulumi.set(self, "certificate_secret", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['AuthenticationServiceSpecNoneImageArgs']]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['AuthenticationServiceSpecNoneImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['AuthenticationServiceSpecNoneResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['AuthenticationServiceSpecNoneResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class AuthenticationServiceSpecNoneCertificateSecretArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class AuthenticationServiceSpecNoneImageArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 pull_policy: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)


@pulumi.input_type
class AuthenticationServiceSpecNoneResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['AuthenticationServiceSpecNoneResourcesLimitsArgs']] = None,
                 requests: Optional[pulumi.Input['AuthenticationServiceSpecNoneResourcesRequestsArgs']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['AuthenticationServiceSpecNoneResourcesLimitsArgs']]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['AuthenticationServiceSpecNoneResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input['AuthenticationServiceSpecNoneResourcesRequestsArgs']]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input['AuthenticationServiceSpecNoneResourcesRequestsArgs']]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class AuthenticationServiceSpecNoneResourcesLimitsArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class AuthenticationServiceSpecNoneResourcesRequestsArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class AuthenticationServiceSpecStandardArgs:
    def __init__(__self__, *,
                 certificate_secret: Optional[pulumi.Input['AuthenticationServiceSpecStandardCertificateSecretArgs']] = None,
                 credentials_secret: Optional[pulumi.Input['AuthenticationServiceSpecStandardCredentialsSecretArgs']] = None,
                 datasource: Optional[pulumi.Input['AuthenticationServiceSpecStandardDatasourceArgs']] = None,
                 deployment_name: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input['AuthenticationServiceSpecStandardImageArgs']] = None,
                 init_image: Optional[pulumi.Input['AuthenticationServiceSpecStandardInitImageArgs']] = None,
                 jvm_options: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input['AuthenticationServiceSpecStandardResourcesArgs']] = None,
                 route_name: Optional[pulumi.Input[str]] = None,
                 security_context: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input['AuthenticationServiceSpecStandardStorageArgs']] = None):
        if certificate_secret is not None:
            pulumi.set(__self__, "certificate_secret", certificate_secret)
        if credentials_secret is not None:
            pulumi.set(__self__, "credentials_secret", credentials_secret)
        if datasource is not None:
            pulumi.set(__self__, "datasource", datasource)
        if deployment_name is not None:
            pulumi.set(__self__, "deployment_name", deployment_name)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if init_image is not None:
            pulumi.set(__self__, "init_image", init_image)
        if jvm_options is not None:
            pulumi.set(__self__, "jvm_options", jvm_options)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if route_name is not None:
            pulumi.set(__self__, "route_name", route_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="certificateSecret")
    def certificate_secret(self) -> Optional[pulumi.Input['AuthenticationServiceSpecStandardCertificateSecretArgs']]:
        return pulumi.get(self, "certificate_secret")

    @certificate_secret.setter
    def certificate_secret(self, value: Optional[pulumi.Input['AuthenticationServiceSpecStandardCertificateSecretArgs']]):
        pulumi.set(self, "certificate_secret", value)

    @property
    @pulumi.getter(name="credentialsSecret")
    def credentials_secret(self) -> Optional[pulumi.Input['AuthenticationServiceSpecStandardCredentialsSecretArgs']]:
        return pulumi.get(self, "credentials_secret")

    @credentials_secret.setter
    def credentials_secret(self, value: Optional[pulumi.Input['AuthenticationServiceSpecStandardCredentialsSecretArgs']]):
        pulumi.set(self, "credentials_secret", value)

    @property
    @pulumi.getter
    def datasource(self) -> Optional[pulumi.Input['AuthenticationServiceSpecStandardDatasourceArgs']]:
        return pulumi.get(self, "datasource")

    @datasource.setter
    def datasource(self, value: Optional[pulumi.Input['AuthenticationServiceSpecStandardDatasourceArgs']]):
        pulumi.set(self, "datasource", value)

    @property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deployment_name")

    @deployment_name.setter
    def deployment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_name", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['AuthenticationServiceSpecStandardImageArgs']]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['AuthenticationServiceSpecStandardImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="initImage")
    def init_image(self) -> Optional[pulumi.Input['AuthenticationServiceSpecStandardInitImageArgs']]:
        return pulumi.get(self, "init_image")

    @init_image.setter
    def init_image(self, value: Optional[pulumi.Input['AuthenticationServiceSpecStandardInitImageArgs']]):
        pulumi.set(self, "init_image", value)

    @property
    @pulumi.getter(name="jvmOptions")
    def jvm_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jvm_options")

    @jvm_options.setter
    def jvm_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jvm_options", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['AuthenticationServiceSpecStandardResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['AuthenticationServiceSpecStandardResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="routeName")
    def route_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_name")

    @route_name.setter
    def route_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['AuthenticationServiceSpecStandardStorageArgs']]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['AuthenticationServiceSpecStandardStorageArgs']]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class AuthenticationServiceSpecStandardCertificateSecretArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class AuthenticationServiceSpecStandardCredentialsSecretArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class AuthenticationServiceSpecStandardDatasourceArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 credentials_secret: Optional[pulumi.Input['AuthenticationServiceSpecStandardDatasourceCredentialsSecretArgs']] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "type", type)
        if credentials_secret is not None:
            pulumi.set(__self__, "credentials_secret", credentials_secret)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="credentialsSecret")
    def credentials_secret(self) -> Optional[pulumi.Input['AuthenticationServiceSpecStandardDatasourceCredentialsSecretArgs']]:
        return pulumi.get(self, "credentials_secret")

    @credentials_secret.setter
    def credentials_secret(self, value: Optional[pulumi.Input['AuthenticationServiceSpecStandardDatasourceCredentialsSecretArgs']]):
        pulumi.set(self, "credentials_secret", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class AuthenticationServiceSpecStandardDatasourceCredentialsSecretArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class AuthenticationServiceSpecStandardImageArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 pull_policy: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)


@pulumi.input_type
class AuthenticationServiceSpecStandardInitImageArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 pull_policy: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)


@pulumi.input_type
class AuthenticationServiceSpecStandardResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['AuthenticationServiceSpecStandardResourcesLimitsArgs']] = None,
                 requests: Optional[pulumi.Input['AuthenticationServiceSpecStandardResourcesRequestsArgs']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['AuthenticationServiceSpecStandardResourcesLimitsArgs']]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['AuthenticationServiceSpecStandardResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input['AuthenticationServiceSpecStandardResourcesRequestsArgs']]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input['AuthenticationServiceSpecStandardResourcesRequestsArgs']]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class AuthenticationServiceSpecStandardResourcesLimitsArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class AuthenticationServiceSpecStandardResourcesRequestsArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class AuthenticationServiceSpecStandardStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 claim_name: Optional[pulumi.Input[str]] = None,
                 class_: Optional[pulumi.Input[str]] = None,
                 delete_claim: Optional[pulumi.Input[bool]] = None,
                 size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if claim_name is not None:
            pulumi.set(__self__, "claim_name", claim_name)
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if delete_claim is not None:
            pulumi.set(__self__, "delete_claim", delete_claim)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "claim_name")

    @claim_name.setter
    def claim_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "claim_name", value)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_", value)

    @property
    @pulumi.getter(name="deleteClaim")
    def delete_claim(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_claim")

    @delete_claim.setter
    def delete_claim(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_claim", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class AuthenticationServiceStatusArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 phase: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] message: Status and error messages for the authentication service.
        :param pulumi.Input[str] phase: Phase of the authentication service.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Status and error messages for the authentication service.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[pulumi.Input[str]]:
        """
        Phase of the authentication service.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class BrokeredInfraConfigSpecArgs:
    def __init__(__self__, *,
                 admin: Optional[pulumi.Input['BrokeredInfraConfigSpecAdminArgs']] = None,
                 broker: Optional[pulumi.Input['BrokeredInfraConfigSpecBrokerArgs']] = None,
                 network_policy: Optional[pulumi.Input['BrokeredInfraConfigSpecNetworkPolicyArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if broker is not None:
            pulumi.set(__self__, "broker", broker)
        if network_policy is not None:
            pulumi.set(__self__, "network_policy", network_policy)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def admin(self) -> Optional[pulumi.Input['BrokeredInfraConfigSpecAdminArgs']]:
        return pulumi.get(self, "admin")

    @admin.setter
    def admin(self, value: Optional[pulumi.Input['BrokeredInfraConfigSpecAdminArgs']]):
        pulumi.set(self, "admin", value)

    @property
    @pulumi.getter
    def broker(self) -> Optional[pulumi.Input['BrokeredInfraConfigSpecBrokerArgs']]:
        return pulumi.get(self, "broker")

    @broker.setter
    def broker(self, value: Optional[pulumi.Input['BrokeredInfraConfigSpecBrokerArgs']]):
        pulumi.set(self, "broker", value)

    @property
    @pulumi.getter(name="networkPolicy")
    def network_policy(self) -> Optional[pulumi.Input['BrokeredInfraConfigSpecNetworkPolicyArgs']]:
        return pulumi.get(self, "network_policy")

    @network_policy.setter
    def network_policy(self, value: Optional[pulumi.Input['BrokeredInfraConfigSpecNetworkPolicyArgs']]):
        pulumi.set(self, "network_policy", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class BrokeredInfraConfigSpecAdminArgs:
    def __init__(__self__, *,
                 pod_template: Optional[pulumi.Input['BrokeredInfraConfigSpecAdminPodTemplateArgs']] = None,
                 resources: Optional[pulumi.Input['BrokeredInfraConfigSpecAdminResourcesArgs']] = None):
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(self) -> Optional[pulumi.Input['BrokeredInfraConfigSpecAdminPodTemplateArgs']]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(self, value: Optional[pulumi.Input['BrokeredInfraConfigSpecAdminPodTemplateArgs']]):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['BrokeredInfraConfigSpecAdminResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['BrokeredInfraConfigSpecAdminResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class BrokeredInfraConfigSpecAdminPodTemplateArgs:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['BrokeredInfraConfigSpecAdminPodTemplateMetadataArgs']] = None,
                 spec: Optional[pulumi.Input['BrokeredInfraConfigSpecAdminPodTemplateSpecArgs']] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['BrokeredInfraConfigSpecAdminPodTemplateMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['BrokeredInfraConfigSpecAdminPodTemplateMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['BrokeredInfraConfigSpecAdminPodTemplateSpecArgs']]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['BrokeredInfraConfigSpecAdminPodTemplateSpecArgs']]):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class BrokeredInfraConfigSpecAdminPodTemplateMetadataArgs:
    def __init__(__self__, *,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class BrokeredInfraConfigSpecAdminPodTemplateSpecArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['BrokeredInfraConfigSpecAdminPodTemplateSpecContainersArgs']]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 security_context: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrokeredInfraConfigSpecAdminPodTemplateSpecContainersArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrokeredInfraConfigSpecAdminPodTemplateSpecContainersArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class BrokeredInfraConfigSpecAdminPodTemplateSpecContainersArgs:
    def __init__(__self__, *,
                 resources: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class BrokeredInfraConfigSpecAdminResourcesArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class BrokeredInfraConfigSpecBrokerArgs:
    def __init__(__self__, *,
                 address_full_policy: Optional[pulumi.Input[str]] = None,
                 global_max_size: Optional[pulumi.Input[str]] = None,
                 java_opts: Optional[pulumi.Input[str]] = None,
                 pod_template: Optional[pulumi.Input['BrokeredInfraConfigSpecBrokerPodTemplateArgs']] = None,
                 resources: Optional[pulumi.Input['BrokeredInfraConfigSpecBrokerResourcesArgs']] = None,
                 storage_class_name: Optional[pulumi.Input[str]] = None,
                 update_persistent_volume_claim: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] global_max_size: Sets a global limit to the amount of memory the broker can use before it applies the rules determined by addressFullPolicy. Value in bytes or use a byte suffix ("B", "K", "MB", "GB")
        """
        if address_full_policy is not None:
            pulumi.set(__self__, "address_full_policy", address_full_policy)
        if global_max_size is not None:
            pulumi.set(__self__, "global_max_size", global_max_size)
        if java_opts is not None:
            pulumi.set(__self__, "java_opts", java_opts)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if update_persistent_volume_claim is not None:
            pulumi.set(__self__, "update_persistent_volume_claim", update_persistent_volume_claim)

    @property
    @pulumi.getter(name="addressFullPolicy")
    def address_full_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_full_policy")

    @address_full_policy.setter
    def address_full_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_full_policy", value)

    @property
    @pulumi.getter(name="globalMaxSize")
    def global_max_size(self) -> Optional[pulumi.Input[str]]:
        """
        Sets a global limit to the amount of memory the broker can use before it applies the rules determined by addressFullPolicy. Value in bytes or use a byte suffix ("B", "K", "MB", "GB")
        """
        return pulumi.get(self, "global_max_size")

    @global_max_size.setter
    def global_max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_max_size", value)

    @property
    @pulumi.getter(name="javaOpts")
    def java_opts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "java_opts")

    @java_opts.setter
    def java_opts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_opts", value)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(self) -> Optional[pulumi.Input['BrokeredInfraConfigSpecBrokerPodTemplateArgs']]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(self, value: Optional[pulumi.Input['BrokeredInfraConfigSpecBrokerPodTemplateArgs']]):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['BrokeredInfraConfigSpecBrokerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['BrokeredInfraConfigSpecBrokerResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class_name", value)

    @property
    @pulumi.getter(name="updatePersistentVolumeClaim")
    def update_persistent_volume_claim(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "update_persistent_volume_claim")

    @update_persistent_volume_claim.setter
    def update_persistent_volume_claim(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_persistent_volume_claim", value)


@pulumi.input_type
class BrokeredInfraConfigSpecBrokerPodTemplateArgs:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['BrokeredInfraConfigSpecBrokerPodTemplateMetadataArgs']] = None,
                 spec: Optional[pulumi.Input['BrokeredInfraConfigSpecBrokerPodTemplateSpecArgs']] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['BrokeredInfraConfigSpecBrokerPodTemplateMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['BrokeredInfraConfigSpecBrokerPodTemplateMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['BrokeredInfraConfigSpecBrokerPodTemplateSpecArgs']]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['BrokeredInfraConfigSpecBrokerPodTemplateSpecArgs']]):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class BrokeredInfraConfigSpecBrokerPodTemplateMetadataArgs:
    def __init__(__self__, *,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class BrokeredInfraConfigSpecBrokerPodTemplateSpecArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 security_context: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[Any]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class BrokeredInfraConfigSpecBrokerResourcesArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class BrokeredInfraConfigSpecNetworkPolicyArgs:
    def __init__(__self__, *,
                 egress: Optional[pulumi.Input[Sequence[Any]]] = None,
                 ingress: Optional[pulumi.Input[Sequence[Any]]] = None):
        if egress is not None:
            pulumi.set(__self__, "egress", egress)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter
    def egress(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "egress")

    @egress.setter
    def egress(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "egress", value)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "ingress", value)


@pulumi.input_type
class ConsoleServiceSpecArgs:
    def __init__(__self__, *,
                 certificate_secret: Optional[pulumi.Input['ConsoleServiceSpecCertificateSecretArgs']] = None,
                 console_server: Optional[pulumi.Input['ConsoleServiceSpecConsoleServerArgs']] = None,
                 discovery_metadata_url: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 impersonation: Optional[pulumi.Input['ConsoleServiceSpecImpersonationArgs']] = None,
                 oauth_client_secret: Optional[pulumi.Input['ConsoleServiceSpecOauthClientSecretArgs']] = None,
                 oauth_proxy: Optional[pulumi.Input['ConsoleServiceSpecOauthProxyArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 sso_cookie_domain: Optional[pulumi.Input[str]] = None,
                 sso_cookie_secret: Optional[pulumi.Input['ConsoleServiceSpecSsoCookieSecretArgs']] = None):
        """
        :param pulumi.Input['ConsoleServiceSpecImpersonationArgs'] impersonation: Enable impersonation as the mechanism for authorizing user actions. For impersonation to work, it is important to also grant the console-server permissions to impersonate users.
        """
        if certificate_secret is not None:
            pulumi.set(__self__, "certificate_secret", certificate_secret)
        if console_server is not None:
            pulumi.set(__self__, "console_server", console_server)
        if discovery_metadata_url is not None:
            pulumi.set(__self__, "discovery_metadata_url", discovery_metadata_url)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if impersonation is not None:
            pulumi.set(__self__, "impersonation", impersonation)
        if oauth_client_secret is not None:
            pulumi.set(__self__, "oauth_client_secret", oauth_client_secret)
        if oauth_proxy is not None:
            pulumi.set(__self__, "oauth_proxy", oauth_proxy)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sso_cookie_domain is not None:
            pulumi.set(__self__, "sso_cookie_domain", sso_cookie_domain)
        if sso_cookie_secret is not None:
            pulumi.set(__self__, "sso_cookie_secret", sso_cookie_secret)

    @property
    @pulumi.getter(name="certificateSecret")
    def certificate_secret(self) -> Optional[pulumi.Input['ConsoleServiceSpecCertificateSecretArgs']]:
        return pulumi.get(self, "certificate_secret")

    @certificate_secret.setter
    def certificate_secret(self, value: Optional[pulumi.Input['ConsoleServiceSpecCertificateSecretArgs']]):
        pulumi.set(self, "certificate_secret", value)

    @property
    @pulumi.getter(name="consoleServer")
    def console_server(self) -> Optional[pulumi.Input['ConsoleServiceSpecConsoleServerArgs']]:
        return pulumi.get(self, "console_server")

    @console_server.setter
    def console_server(self, value: Optional[pulumi.Input['ConsoleServiceSpecConsoleServerArgs']]):
        pulumi.set(self, "console_server", value)

    @property
    @pulumi.getter(name="discoveryMetadataURL")
    def discovery_metadata_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "discovery_metadata_url")

    @discovery_metadata_url.setter
    def discovery_metadata_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "discovery_metadata_url", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def impersonation(self) -> Optional[pulumi.Input['ConsoleServiceSpecImpersonationArgs']]:
        """
        Enable impersonation as the mechanism for authorizing user actions. For impersonation to work, it is important to also grant the console-server permissions to impersonate users.
        """
        return pulumi.get(self, "impersonation")

    @impersonation.setter
    def impersonation(self, value: Optional[pulumi.Input['ConsoleServiceSpecImpersonationArgs']]):
        pulumi.set(self, "impersonation", value)

    @property
    @pulumi.getter(name="oauthClientSecret")
    def oauth_client_secret(self) -> Optional[pulumi.Input['ConsoleServiceSpecOauthClientSecretArgs']]:
        return pulumi.get(self, "oauth_client_secret")

    @oauth_client_secret.setter
    def oauth_client_secret(self, value: Optional[pulumi.Input['ConsoleServiceSpecOauthClientSecretArgs']]):
        pulumi.set(self, "oauth_client_secret", value)

    @property
    @pulumi.getter(name="oauthProxy")
    def oauth_proxy(self) -> Optional[pulumi.Input['ConsoleServiceSpecOauthProxyArgs']]:
        return pulumi.get(self, "oauth_proxy")

    @oauth_proxy.setter
    def oauth_proxy(self, value: Optional[pulumi.Input['ConsoleServiceSpecOauthProxyArgs']]):
        pulumi.set(self, "oauth_proxy", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="ssoCookieDomain")
    def sso_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_cookie_domain")

    @sso_cookie_domain.setter
    def sso_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_cookie_domain", value)

    @property
    @pulumi.getter(name="ssoCookieSecret")
    def sso_cookie_secret(self) -> Optional[pulumi.Input['ConsoleServiceSpecSsoCookieSecretArgs']]:
        return pulumi.get(self, "sso_cookie_secret")

    @sso_cookie_secret.setter
    def sso_cookie_secret(self, value: Optional[pulumi.Input['ConsoleServiceSpecSsoCookieSecretArgs']]):
        pulumi.set(self, "sso_cookie_secret", value)


@pulumi.input_type
class ConsoleServiceSpecCertificateSecretArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ConsoleServiceSpecConsoleServerArgs:
    def __init__(__self__, *,
                 liveness_probe: Optional[pulumi.Input['ConsoleServiceSpecConsoleServerLivenessProbeArgs']] = None,
                 readiness_probe: Optional[pulumi.Input['ConsoleServiceSpecConsoleServerReadinessProbeArgs']] = None,
                 resources: Optional[pulumi.Input['ConsoleServiceSpecConsoleServerResourcesArgs']] = None,
                 session: Optional[pulumi.Input['ConsoleServiceSpecConsoleServerSessionArgs']] = None):
        """
        :param pulumi.Input['ConsoleServiceSpecConsoleServerLivenessProbeArgs'] liveness_probe: Overrides for the periodic probe of container liveness.
        :param pulumi.Input['ConsoleServiceSpecConsoleServerReadinessProbeArgs'] readiness_probe: Overrides for the periodic probe of container liveness.
        """
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if session is not None:
            pulumi.set(__self__, "session", session)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['ConsoleServiceSpecConsoleServerLivenessProbeArgs']]:
        """
        Overrides for the periodic probe of container liveness.
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['ConsoleServiceSpecConsoleServerLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['ConsoleServiceSpecConsoleServerReadinessProbeArgs']]:
        """
        Overrides for the periodic probe of container liveness.
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['ConsoleServiceSpecConsoleServerReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ConsoleServiceSpecConsoleServerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ConsoleServiceSpecConsoleServerResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def session(self) -> Optional[pulumi.Input['ConsoleServiceSpecConsoleServerSessionArgs']]:
        return pulumi.get(self, "session")

    @session.setter
    def session(self, value: Optional[pulumi.Input['ConsoleServiceSpecConsoleServerSessionArgs']]):
        pulumi.set(self, "session", value)


@pulumi.input_type
class ConsoleServiceSpecConsoleServerLivenessProbeArgs:
    def __init__(__self__, *,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        Overrides for the periodic probe of container liveness.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated.
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed.
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out.
        """
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ConsoleServiceSpecConsoleServerReadinessProbeArgs:
    def __init__(__self__, *,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        Overrides for the periodic probe of container liveness.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated.
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed.
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out.
        """
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ConsoleServiceSpecConsoleServerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['ConsoleServiceSpecConsoleServerResourcesLimitsArgs']] = None,
                 requests: Optional[pulumi.Input['ConsoleServiceSpecConsoleServerResourcesRequestsArgs']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['ConsoleServiceSpecConsoleServerResourcesLimitsArgs']]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['ConsoleServiceSpecConsoleServerResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input['ConsoleServiceSpecConsoleServerResourcesRequestsArgs']]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input['ConsoleServiceSpecConsoleServerResourcesRequestsArgs']]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ConsoleServiceSpecConsoleServerResourcesLimitsArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class ConsoleServiceSpecConsoleServerResourcesRequestsArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class ConsoleServiceSpecConsoleServerSessionArgs:
    def __init__(__self__, *,
                 idle_timeout: Optional[pulumi.Input[str]] = None,
                 lifetime: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] idle_timeout: IdleTimeout controls the maximum length of time a session can be inactive before it expires. Defaults to 5m.
        :param pulumi.Input[str] lifetime: Lifetime controls the maximum length of time that a session is valid for before it expires. Defaults to 30m.
        """
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if lifetime is not None:
            pulumi.set(__self__, "lifetime", lifetime)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        IdleTimeout controls the maximum length of time a session can be inactive before it expires. Defaults to 5m.
        """
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter
    def lifetime(self) -> Optional[pulumi.Input[str]]:
        """
        Lifetime controls the maximum length of time that a session is valid for before it expires. Defaults to 30m.
        """
        return pulumi.get(self, "lifetime")

    @lifetime.setter
    def lifetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifetime", value)


@pulumi.input_type
class ConsoleServiceSpecImpersonationArgs:
    def __init__(__self__, *,
                 user_header: Optional[pulumi.Input[str]] = None):
        """
        Enable impersonation as the mechanism for authorizing user actions. For impersonation to work, it is important to also grant the console-server permissions to impersonate users.
        :param pulumi.Input[str] user_header: Headers to use for user impersonation.
        """
        if user_header is not None:
            pulumi.set(__self__, "user_header", user_header)

    @property
    @pulumi.getter(name="userHeader")
    def user_header(self) -> Optional[pulumi.Input[str]]:
        """
        Headers to use for user impersonation.
        """
        return pulumi.get(self, "user_header")

    @user_header.setter
    def user_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_header", value)


@pulumi.input_type
class ConsoleServiceSpecOauthClientSecretArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ConsoleServiceSpecOauthProxyArgs:
    def __init__(__self__, *,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources: Optional[pulumi.Input['ConsoleServiceSpecOauthProxyResourcesArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Extra arguments to pass to oauth-proxy
        """
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra arguments to pass to oauth-proxy
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ConsoleServiceSpecOauthProxyResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ConsoleServiceSpecOauthProxyResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ConsoleServiceSpecOauthProxyResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['ConsoleServiceSpecOauthProxyResourcesLimitsArgs']] = None,
                 requests: Optional[pulumi.Input['ConsoleServiceSpecOauthProxyResourcesRequestsArgs']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['ConsoleServiceSpecOauthProxyResourcesLimitsArgs']]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['ConsoleServiceSpecOauthProxyResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input['ConsoleServiceSpecOauthProxyResourcesRequestsArgs']]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input['ConsoleServiceSpecOauthProxyResourcesRequestsArgs']]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ConsoleServiceSpecOauthProxyResourcesLimitsArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class ConsoleServiceSpecOauthProxyResourcesRequestsArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class ConsoleServiceSpecSsoCookieSecretArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ConsoleServiceStatusArgs:
    def __init__(__self__, *,
                 ca_cert_secret: Optional[pulumi.Input['ConsoleServiceStatusCaCertSecretArgs']] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        if ca_cert_secret is not None:
            pulumi.set(__self__, "ca_cert_secret", ca_cert_secret)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="caCertSecret")
    def ca_cert_secret(self) -> Optional[pulumi.Input['ConsoleServiceStatusCaCertSecretArgs']]:
        return pulumi.get(self, "ca_cert_secret")

    @ca_cert_secret.setter
    def ca_cert_secret(self, value: Optional[pulumi.Input['ConsoleServiceStatusCaCertSecretArgs']]):
        pulumi.set(self, "ca_cert_secret", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class ConsoleServiceStatusCaCertSecretArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class StandardInfraConfigSpecArgs:
    def __init__(__self__, *,
                 admin: Optional[pulumi.Input['StandardInfraConfigSpecAdminArgs']] = None,
                 broker: Optional[pulumi.Input['StandardInfraConfigSpecBrokerArgs']] = None,
                 network_policy: Optional[pulumi.Input['StandardInfraConfigSpecNetworkPolicyArgs']] = None,
                 router: Optional[pulumi.Input['StandardInfraConfigSpecRouterArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if broker is not None:
            pulumi.set(__self__, "broker", broker)
        if network_policy is not None:
            pulumi.set(__self__, "network_policy", network_policy)
        if router is not None:
            pulumi.set(__self__, "router", router)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def admin(self) -> Optional[pulumi.Input['StandardInfraConfigSpecAdminArgs']]:
        return pulumi.get(self, "admin")

    @admin.setter
    def admin(self, value: Optional[pulumi.Input['StandardInfraConfigSpecAdminArgs']]):
        pulumi.set(self, "admin", value)

    @property
    @pulumi.getter
    def broker(self) -> Optional[pulumi.Input['StandardInfraConfigSpecBrokerArgs']]:
        return pulumi.get(self, "broker")

    @broker.setter
    def broker(self, value: Optional[pulumi.Input['StandardInfraConfigSpecBrokerArgs']]):
        pulumi.set(self, "broker", value)

    @property
    @pulumi.getter(name="networkPolicy")
    def network_policy(self) -> Optional[pulumi.Input['StandardInfraConfigSpecNetworkPolicyArgs']]:
        return pulumi.get(self, "network_policy")

    @network_policy.setter
    def network_policy(self, value: Optional[pulumi.Input['StandardInfraConfigSpecNetworkPolicyArgs']]):
        pulumi.set(self, "network_policy", value)

    @property
    @pulumi.getter
    def router(self) -> Optional[pulumi.Input['StandardInfraConfigSpecRouterArgs']]:
        return pulumi.get(self, "router")

    @router.setter
    def router(self, value: Optional[pulumi.Input['StandardInfraConfigSpecRouterArgs']]):
        pulumi.set(self, "router", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class StandardInfraConfigSpecAdminArgs:
    def __init__(__self__, *,
                 pod_template: Optional[pulumi.Input['StandardInfraConfigSpecAdminPodTemplateArgs']] = None,
                 resources: Optional[pulumi.Input['StandardInfraConfigSpecAdminResourcesArgs']] = None):
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(self) -> Optional[pulumi.Input['StandardInfraConfigSpecAdminPodTemplateArgs']]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(self, value: Optional[pulumi.Input['StandardInfraConfigSpecAdminPodTemplateArgs']]):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['StandardInfraConfigSpecAdminResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['StandardInfraConfigSpecAdminResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class StandardInfraConfigSpecAdminPodTemplateArgs:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['StandardInfraConfigSpecAdminPodTemplateMetadataArgs']] = None,
                 spec: Optional[pulumi.Input['StandardInfraConfigSpecAdminPodTemplateSpecArgs']] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['StandardInfraConfigSpecAdminPodTemplateMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['StandardInfraConfigSpecAdminPodTemplateMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['StandardInfraConfigSpecAdminPodTemplateSpecArgs']]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['StandardInfraConfigSpecAdminPodTemplateSpecArgs']]):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class StandardInfraConfigSpecAdminPodTemplateMetadataArgs:
    def __init__(__self__, *,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class StandardInfraConfigSpecAdminPodTemplateSpecArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['StandardInfraConfigSpecAdminPodTemplateSpecContainersArgs']]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 security_context: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StandardInfraConfigSpecAdminPodTemplateSpecContainersArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StandardInfraConfigSpecAdminPodTemplateSpecContainersArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class StandardInfraConfigSpecAdminPodTemplateSpecContainersArgs:
    def __init__(__self__, *,
                 resources: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class StandardInfraConfigSpecAdminResourcesArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class StandardInfraConfigSpecBrokerArgs:
    def __init__(__self__, *,
                 address_full_policy: Optional[pulumi.Input[str]] = None,
                 connector_idle_timeout: Optional[pulumi.Input[int]] = None,
                 connector_worker_threads: Optional[pulumi.Input[int]] = None,
                 global_max_size: Optional[pulumi.Input[str]] = None,
                 java_opts: Optional[pulumi.Input[str]] = None,
                 max_unavailable: Optional[pulumi.Input['StandardInfraConfigSpecBrokerMaxUnavailableArgs']] = None,
                 min_available: Optional[pulumi.Input['StandardInfraConfigSpecBrokerMinAvailableArgs']] = None,
                 pod_template: Optional[pulumi.Input['StandardInfraConfigSpecBrokerPodTemplateArgs']] = None,
                 resources: Optional[pulumi.Input['StandardInfraConfigSpecBrokerResourcesArgs']] = None,
                 storage_class_name: Optional[pulumi.Input[str]] = None,
                 update_persistent_volume_claim: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] global_max_size: Sets a global limit to the amount of memory the broker can use before it applies the rules determined by addressFullPolicy. Value in bytes or use a byte suffix ("B", "K", "MB", "GB")
        """
        if address_full_policy is not None:
            pulumi.set(__self__, "address_full_policy", address_full_policy)
        if connector_idle_timeout is not None:
            pulumi.set(__self__, "connector_idle_timeout", connector_idle_timeout)
        if connector_worker_threads is not None:
            pulumi.set(__self__, "connector_worker_threads", connector_worker_threads)
        if global_max_size is not None:
            pulumi.set(__self__, "global_max_size", global_max_size)
        if java_opts is not None:
            pulumi.set(__self__, "java_opts", java_opts)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)
        if min_available is not None:
            pulumi.set(__self__, "min_available", min_available)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if update_persistent_volume_claim is not None:
            pulumi.set(__self__, "update_persistent_volume_claim", update_persistent_volume_claim)

    @property
    @pulumi.getter(name="addressFullPolicy")
    def address_full_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_full_policy")

    @address_full_policy.setter
    def address_full_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_full_policy", value)

    @property
    @pulumi.getter(name="connectorIdleTimeout")
    def connector_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "connector_idle_timeout")

    @connector_idle_timeout.setter
    def connector_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connector_idle_timeout", value)

    @property
    @pulumi.getter(name="connectorWorkerThreads")
    def connector_worker_threads(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "connector_worker_threads")

    @connector_worker_threads.setter
    def connector_worker_threads(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connector_worker_threads", value)

    @property
    @pulumi.getter(name="globalMaxSize")
    def global_max_size(self) -> Optional[pulumi.Input[str]]:
        """
        Sets a global limit to the amount of memory the broker can use before it applies the rules determined by addressFullPolicy. Value in bytes or use a byte suffix ("B", "K", "MB", "GB")
        """
        return pulumi.get(self, "global_max_size")

    @global_max_size.setter
    def global_max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_max_size", value)

    @property
    @pulumi.getter(name="javaOpts")
    def java_opts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "java_opts")

    @java_opts.setter
    def java_opts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_opts", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['StandardInfraConfigSpecBrokerMaxUnavailableArgs']]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['StandardInfraConfigSpecBrokerMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)

    @property
    @pulumi.getter(name="minAvailable")
    def min_available(self) -> Optional[pulumi.Input['StandardInfraConfigSpecBrokerMinAvailableArgs']]:
        return pulumi.get(self, "min_available")

    @min_available.setter
    def min_available(self, value: Optional[pulumi.Input['StandardInfraConfigSpecBrokerMinAvailableArgs']]):
        pulumi.set(self, "min_available", value)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(self) -> Optional[pulumi.Input['StandardInfraConfigSpecBrokerPodTemplateArgs']]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(self, value: Optional[pulumi.Input['StandardInfraConfigSpecBrokerPodTemplateArgs']]):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['StandardInfraConfigSpecBrokerResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['StandardInfraConfigSpecBrokerResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class_name", value)

    @property
    @pulumi.getter(name="updatePersistentVolumeClaim")
    def update_persistent_volume_claim(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "update_persistent_volume_claim")

    @update_persistent_volume_claim.setter
    def update_persistent_volume_claim(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_persistent_volume_claim", value)


@pulumi.input_type
class StandardInfraConfigSpecBrokerMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class StandardInfraConfigSpecBrokerMinAvailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class StandardInfraConfigSpecBrokerPodTemplateArgs:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['StandardInfraConfigSpecBrokerPodTemplateMetadataArgs']] = None,
                 spec: Optional[pulumi.Input['StandardInfraConfigSpecBrokerPodTemplateSpecArgs']] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['StandardInfraConfigSpecBrokerPodTemplateMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['StandardInfraConfigSpecBrokerPodTemplateMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['StandardInfraConfigSpecBrokerPodTemplateSpecArgs']]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['StandardInfraConfigSpecBrokerPodTemplateSpecArgs']]):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class StandardInfraConfigSpecBrokerPodTemplateMetadataArgs:
    def __init__(__self__, *,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class StandardInfraConfigSpecBrokerPodTemplateSpecArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 security_context: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[Any]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class StandardInfraConfigSpecBrokerResourcesArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class StandardInfraConfigSpecNetworkPolicyArgs:
    def __init__(__self__, *,
                 egress: Optional[pulumi.Input[Sequence[Any]]] = None,
                 ingress: Optional[pulumi.Input[Sequence[Any]]] = None):
        if egress is not None:
            pulumi.set(__self__, "egress", egress)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter
    def egress(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "egress")

    @egress.setter
    def egress(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "egress", value)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "ingress", value)


@pulumi.input_type
class StandardInfraConfigSpecRouterArgs:
    def __init__(__self__, *,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 link_capacity: Optional[pulumi.Input[int]] = None,
                 max_unavailable: Optional[pulumi.Input['StandardInfraConfigSpecRouterMaxUnavailableArgs']] = None,
                 min_available: Optional[pulumi.Input['StandardInfraConfigSpecRouterMinAvailableArgs']] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 pod_template: Optional[pulumi.Input['StandardInfraConfigSpecRouterPodTemplateArgs']] = None,
                 policy: Optional[pulumi.Input['StandardInfraConfigSpecRouterPolicyArgs']] = None,
                 resources: Optional[pulumi.Input['StandardInfraConfigSpecRouterResourcesArgs']] = None,
                 worker_threads: Optional[pulumi.Input[int]] = None):
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if link_capacity is not None:
            pulumi.set(__self__, "link_capacity", link_capacity)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)
        if min_available is not None:
            pulumi.set(__self__, "min_available", min_available)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if worker_threads is not None:
            pulumi.set(__self__, "worker_threads", worker_threads)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter(name="linkCapacity")
    def link_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "link_capacity")

    @link_capacity.setter
    def link_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "link_capacity", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['StandardInfraConfigSpecRouterMaxUnavailableArgs']]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['StandardInfraConfigSpecRouterMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)

    @property
    @pulumi.getter(name="minAvailable")
    def min_available(self) -> Optional[pulumi.Input['StandardInfraConfigSpecRouterMinAvailableArgs']]:
        return pulumi.get(self, "min_available")

    @min_available.setter
    def min_available(self, value: Optional[pulumi.Input['StandardInfraConfigSpecRouterMinAvailableArgs']]):
        pulumi.set(self, "min_available", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(self) -> Optional[pulumi.Input['StandardInfraConfigSpecRouterPodTemplateArgs']]:
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(self, value: Optional[pulumi.Input['StandardInfraConfigSpecRouterPodTemplateArgs']]):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input['StandardInfraConfigSpecRouterPolicyArgs']]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input['StandardInfraConfigSpecRouterPolicyArgs']]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['StandardInfraConfigSpecRouterResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['StandardInfraConfigSpecRouterResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="workerThreads")
    def worker_threads(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "worker_threads")

    @worker_threads.setter
    def worker_threads(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "worker_threads", value)


@pulumi.input_type
class StandardInfraConfigSpecRouterMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class StandardInfraConfigSpecRouterMinAvailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class StandardInfraConfigSpecRouterPodTemplateArgs:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['StandardInfraConfigSpecRouterPodTemplateMetadataArgs']] = None,
                 spec: Optional[pulumi.Input['StandardInfraConfigSpecRouterPodTemplateSpecArgs']] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['StandardInfraConfigSpecRouterPodTemplateMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['StandardInfraConfigSpecRouterPodTemplateMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['StandardInfraConfigSpecRouterPodTemplateSpecArgs']]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['StandardInfraConfigSpecRouterPodTemplateSpecArgs']]):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class StandardInfraConfigSpecRouterPodTemplateMetadataArgs:
    def __init__(__self__, *,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class StandardInfraConfigSpecRouterPodTemplateSpecArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 security_context: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[Any]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class StandardInfraConfigSpecRouterPolicyArgs:
    def __init__(__self__, *,
                 max_connections: Optional[pulumi.Input[int]] = None,
                 max_connections_per_host: Optional[pulumi.Input[int]] = None,
                 max_connections_per_user: Optional[pulumi.Input[int]] = None,
                 max_receivers_per_connection: Optional[pulumi.Input[int]] = None,
                 max_senders_per_connection: Optional[pulumi.Input[int]] = None,
                 max_sessions_per_connection: Optional[pulumi.Input[int]] = None):
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if max_connections_per_host is not None:
            pulumi.set(__self__, "max_connections_per_host", max_connections_per_host)
        if max_connections_per_user is not None:
            pulumi.set(__self__, "max_connections_per_user", max_connections_per_user)
        if max_receivers_per_connection is not None:
            pulumi.set(__self__, "max_receivers_per_connection", max_receivers_per_connection)
        if max_senders_per_connection is not None:
            pulumi.set(__self__, "max_senders_per_connection", max_senders_per_connection)
        if max_sessions_per_connection is not None:
            pulumi.set(__self__, "max_sessions_per_connection", max_sessions_per_connection)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter(name="maxConnectionsPerHost")
    def max_connections_per_host(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_connections_per_host")

    @max_connections_per_host.setter
    def max_connections_per_host(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connections_per_host", value)

    @property
    @pulumi.getter(name="maxConnectionsPerUser")
    def max_connections_per_user(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_connections_per_user")

    @max_connections_per_user.setter
    def max_connections_per_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connections_per_user", value)

    @property
    @pulumi.getter(name="maxReceiversPerConnection")
    def max_receivers_per_connection(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_receivers_per_connection")

    @max_receivers_per_connection.setter
    def max_receivers_per_connection(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_receivers_per_connection", value)

    @property
    @pulumi.getter(name="maxSendersPerConnection")
    def max_senders_per_connection(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_senders_per_connection")

    @max_senders_per_connection.setter
    def max_senders_per_connection(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_senders_per_connection", value)

    @property
    @pulumi.getter(name="maxSessionsPerConnection")
    def max_sessions_per_connection(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_sessions_per_connection")

    @max_sessions_per_connection.setter
    def max_sessions_per_connection(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_sessions_per_connection", value)


@pulumi.input_type
class StandardInfraConfigSpecRouterResourcesArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'AuthenticationServiceSpec',
    'AuthenticationServiceSpecExternal',
    'AuthenticationServiceSpecExternalCaCertSecret',
    'AuthenticationServiceSpecExternalClientCertSecret',
    'AuthenticationServiceSpecNone',
    'AuthenticationServiceSpecNoneCertificateSecret',
    'AuthenticationServiceSpecNoneImage',
    'AuthenticationServiceSpecNoneResources',
    'AuthenticationServiceSpecNoneResourcesLimits',
    'AuthenticationServiceSpecNoneResourcesRequests',
    'AuthenticationServiceSpecStandard',
    'AuthenticationServiceSpecStandardCertificateSecret',
    'AuthenticationServiceSpecStandardCredentialsSecret',
    'AuthenticationServiceSpecStandardDatasource',
    'AuthenticationServiceSpecStandardDatasourceCredentialsSecret',
    'AuthenticationServiceSpecStandardImage',
    'AuthenticationServiceSpecStandardInitImage',
    'AuthenticationServiceSpecStandardResources',
    'AuthenticationServiceSpecStandardResourcesLimits',
    'AuthenticationServiceSpecStandardResourcesRequests',
    'AuthenticationServiceSpecStandardStorage',
    'AuthenticationServiceStatus',
    'BrokeredInfraConfigSpec',
    'BrokeredInfraConfigSpecAdmin',
    'BrokeredInfraConfigSpecAdminPodTemplate',
    'BrokeredInfraConfigSpecAdminPodTemplateMetadata',
    'BrokeredInfraConfigSpecAdminPodTemplateSpec',
    'BrokeredInfraConfigSpecAdminPodTemplateSpecContainers',
    'BrokeredInfraConfigSpecAdminResources',
    'BrokeredInfraConfigSpecBroker',
    'BrokeredInfraConfigSpecBrokerPodTemplate',
    'BrokeredInfraConfigSpecBrokerPodTemplateMetadata',
    'BrokeredInfraConfigSpecBrokerPodTemplateSpec',
    'BrokeredInfraConfigSpecBrokerResources',
    'BrokeredInfraConfigSpecNetworkPolicy',
    'ConsoleServiceSpec',
    'ConsoleServiceSpecCertificateSecret',
    'ConsoleServiceSpecConsoleServer',
    'ConsoleServiceSpecConsoleServerLivenessProbe',
    'ConsoleServiceSpecConsoleServerReadinessProbe',
    'ConsoleServiceSpecConsoleServerResources',
    'ConsoleServiceSpecConsoleServerResourcesLimits',
    'ConsoleServiceSpecConsoleServerResourcesRequests',
    'ConsoleServiceSpecConsoleServerSession',
    'ConsoleServiceSpecImpersonation',
    'ConsoleServiceSpecOauthClientSecret',
    'ConsoleServiceSpecOauthProxy',
    'ConsoleServiceSpecOauthProxyResources',
    'ConsoleServiceSpecOauthProxyResourcesLimits',
    'ConsoleServiceSpecOauthProxyResourcesRequests',
    'ConsoleServiceSpecSsoCookieSecret',
    'ConsoleServiceStatus',
    'ConsoleServiceStatusCaCertSecret',
    'StandardInfraConfigSpec',
    'StandardInfraConfigSpecAdmin',
    'StandardInfraConfigSpecAdminPodTemplate',
    'StandardInfraConfigSpecAdminPodTemplateMetadata',
    'StandardInfraConfigSpecAdminPodTemplateSpec',
    'StandardInfraConfigSpecAdminPodTemplateSpecContainers',
    'StandardInfraConfigSpecAdminResources',
    'StandardInfraConfigSpecBroker',
    'StandardInfraConfigSpecBrokerMaxUnavailable',
    'StandardInfraConfigSpecBrokerMinAvailable',
    'StandardInfraConfigSpecBrokerPodTemplate',
    'StandardInfraConfigSpecBrokerPodTemplateMetadata',
    'StandardInfraConfigSpecBrokerPodTemplateSpec',
    'StandardInfraConfigSpecBrokerResources',
    'StandardInfraConfigSpecNetworkPolicy',
    'StandardInfraConfigSpecRouter',
    'StandardInfraConfigSpecRouterMaxUnavailable',
    'StandardInfraConfigSpecRouterMinAvailable',
    'StandardInfraConfigSpecRouterPodTemplate',
    'StandardInfraConfigSpecRouterPodTemplateMetadata',
    'StandardInfraConfigSpecRouterPodTemplateSpec',
    'StandardInfraConfigSpecRouterPolicy',
    'StandardInfraConfigSpecRouterResources',
]

@pulumi.output_type
class AuthenticationServiceSpec(dict):
    def __init__(__self__, *,
                 external: Optional['outputs.AuthenticationServiceSpecExternal'] = None,
                 none: Optional['outputs.AuthenticationServiceSpecNone'] = None,
                 realm: Optional[str] = None,
                 standard: Optional['outputs.AuthenticationServiceSpecStandard'] = None,
                 type: Optional[str] = None):
        if external is not None:
            pulumi.set(__self__, "external", external)
        if none is not None:
            pulumi.set(__self__, "none", none)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if standard is not None:
            pulumi.set(__self__, "standard", standard)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def external(self) -> Optional['outputs.AuthenticationServiceSpecExternal']:
        return pulumi.get(self, "external")

    @property
    @pulumi.getter
    def none(self) -> Optional['outputs.AuthenticationServiceSpecNone']:
        return pulumi.get(self, "none")

    @property
    @pulumi.getter
    def realm(self) -> Optional[str]:
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter
    def standard(self) -> Optional['outputs.AuthenticationServiceSpecStandard']:
        return pulumi.get(self, "standard")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecExternal(dict):
    def __init__(__self__, *,
                 host: str,
                 port: int,
                 allow_override: Optional[bool] = None,
                 ca_cert_secret: Optional['outputs.AuthenticationServiceSpecExternalCaCertSecret'] = None,
                 client_cert_secret: Optional['outputs.AuthenticationServiceSpecExternalClientCertSecret'] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        if allow_override is not None:
            pulumi.set(__self__, "allow_override", allow_override)
        if ca_cert_secret is not None:
            pulumi.set(__self__, "ca_cert_secret", ca_cert_secret)
        if client_cert_secret is not None:
            pulumi.set(__self__, "client_cert_secret", client_cert_secret)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="allowOverride")
    def allow_override(self) -> Optional[bool]:
        return pulumi.get(self, "allow_override")

    @property
    @pulumi.getter(name="caCertSecret")
    def ca_cert_secret(self) -> Optional['outputs.AuthenticationServiceSpecExternalCaCertSecret']:
        return pulumi.get(self, "ca_cert_secret")

    @property
    @pulumi.getter(name="clientCertSecret")
    def client_cert_secret(self) -> Optional['outputs.AuthenticationServiceSpecExternalClientCertSecret']:
        return pulumi.get(self, "client_cert_secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecExternalCaCertSecret(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecExternalClientCertSecret(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecNone(dict):
    def __init__(__self__, *,
                 certificate_secret: Optional['outputs.AuthenticationServiceSpecNoneCertificateSecret'] = None,
                 image: Optional['outputs.AuthenticationServiceSpecNoneImage'] = None,
                 replicas: Optional[int] = None,
                 resources: Optional['outputs.AuthenticationServiceSpecNoneResources'] = None):
        if certificate_secret is not None:
            pulumi.set(__self__, "certificate_secret", certificate_secret)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="certificateSecret")
    def certificate_secret(self) -> Optional['outputs.AuthenticationServiceSpecNoneCertificateSecret']:
        return pulumi.get(self, "certificate_secret")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.AuthenticationServiceSpecNoneImage']:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.AuthenticationServiceSpecNoneResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecNoneCertificateSecret(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecNoneImage(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 pull_policy: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "pull_policy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecNoneResources(dict):
    def __init__(__self__, *,
                 limits: Optional['outputs.AuthenticationServiceSpecNoneResourcesLimits'] = None,
                 requests: Optional['outputs.AuthenticationServiceSpecNoneResourcesRequests'] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.AuthenticationServiceSpecNoneResourcesLimits']:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional['outputs.AuthenticationServiceSpecNoneResourcesRequests']:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecNoneResourcesLimits(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecNoneResourcesRequests(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecStandard(dict):
    def __init__(__self__, *,
                 certificate_secret: Optional['outputs.AuthenticationServiceSpecStandardCertificateSecret'] = None,
                 credentials_secret: Optional['outputs.AuthenticationServiceSpecStandardCredentialsSecret'] = None,
                 datasource: Optional['outputs.AuthenticationServiceSpecStandardDatasource'] = None,
                 deployment_name: Optional[str] = None,
                 image: Optional['outputs.AuthenticationServiceSpecStandardImage'] = None,
                 init_image: Optional['outputs.AuthenticationServiceSpecStandardInitImage'] = None,
                 jvm_options: Optional[str] = None,
                 replicas: Optional[int] = None,
                 resources: Optional['outputs.AuthenticationServiceSpecStandardResources'] = None,
                 route_name: Optional[str] = None,
                 security_context: Optional[Mapping[str, Any]] = None,
                 service_name: Optional[str] = None,
                 storage: Optional['outputs.AuthenticationServiceSpecStandardStorage'] = None):
        if certificate_secret is not None:
            pulumi.set(__self__, "certificate_secret", certificate_secret)
        if credentials_secret is not None:
            pulumi.set(__self__, "credentials_secret", credentials_secret)
        if datasource is not None:
            pulumi.set(__self__, "datasource", datasource)
        if deployment_name is not None:
            pulumi.set(__self__, "deployment_name", deployment_name)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if init_image is not None:
            pulumi.set(__self__, "init_image", init_image)
        if jvm_options is not None:
            pulumi.set(__self__, "jvm_options", jvm_options)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if route_name is not None:
            pulumi.set(__self__, "route_name", route_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="certificateSecret")
    def certificate_secret(self) -> Optional['outputs.AuthenticationServiceSpecStandardCertificateSecret']:
        return pulumi.get(self, "certificate_secret")

    @property
    @pulumi.getter(name="credentialsSecret")
    def credentials_secret(self) -> Optional['outputs.AuthenticationServiceSpecStandardCredentialsSecret']:
        return pulumi.get(self, "credentials_secret")

    @property
    @pulumi.getter
    def datasource(self) -> Optional['outputs.AuthenticationServiceSpecStandardDatasource']:
        return pulumi.get(self, "datasource")

    @property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> Optional[str]:
        return pulumi.get(self, "deployment_name")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.AuthenticationServiceSpecStandardImage']:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="initImage")
    def init_image(self) -> Optional['outputs.AuthenticationServiceSpecStandardInitImage']:
        return pulumi.get(self, "init_image")

    @property
    @pulumi.getter(name="jvmOptions")
    def jvm_options(self) -> Optional[str]:
        return pulumi.get(self, "jvm_options")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.AuthenticationServiceSpecStandardResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="routeName")
    def route_name(self) -> Optional[str]:
        return pulumi.get(self, "route_name")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def storage(self) -> Optional['outputs.AuthenticationServiceSpecStandardStorage']:
        return pulumi.get(self, "storage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecStandardCertificateSecret(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecStandardCredentialsSecret(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecStandardDatasource(dict):
    def __init__(__self__, *,
                 type: str,
                 credentials_secret: Optional['outputs.AuthenticationServiceSpecStandardDatasourceCredentialsSecret'] = None,
                 database: Optional[str] = None,
                 host: Optional[str] = None,
                 port: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if credentials_secret is not None:
            pulumi.set(__self__, "credentials_secret", credentials_secret)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="credentialsSecret")
    def credentials_secret(self) -> Optional['outputs.AuthenticationServiceSpecStandardDatasourceCredentialsSecret']:
        return pulumi.get(self, "credentials_secret")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecStandardDatasourceCredentialsSecret(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecStandardImage(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 pull_policy: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "pull_policy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecStandardInitImage(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 pull_policy: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "pull_policy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecStandardResources(dict):
    def __init__(__self__, *,
                 limits: Optional['outputs.AuthenticationServiceSpecStandardResourcesLimits'] = None,
                 requests: Optional['outputs.AuthenticationServiceSpecStandardResourcesRequests'] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.AuthenticationServiceSpecStandardResourcesLimits']:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional['outputs.AuthenticationServiceSpecStandardResourcesRequests']:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecStandardResourcesLimits(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecStandardResourcesRequests(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceSpecStandardStorage(dict):
    def __init__(__self__, *,
                 type: str,
                 claim_name: Optional[str] = None,
                 class_: Optional[str] = None,
                 delete_claim: Optional[bool] = None,
                 size: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if claim_name is not None:
            pulumi.set(__self__, "claim_name", claim_name)
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if delete_claim is not None:
            pulumi.set(__self__, "delete_claim", delete_claim)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> Optional[str]:
        return pulumi.get(self, "claim_name")

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[str]:
        return pulumi.get(self, "class_")

    @property
    @pulumi.getter(name="deleteClaim")
    def delete_claim(self) -> Optional[bool]:
        return pulumi.get(self, "delete_claim")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthenticationServiceStatus(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 message: Optional[str] = None,
                 phase: Optional[str] = None,
                 port: Optional[int] = None):
        """
        :param str message: Status and error messages for the authentication service.
        :param str phase: Phase of the authentication service.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Status and error messages for the authentication service.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        Phase of the authentication service.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BrokeredInfraConfigSpec(dict):
    def __init__(__self__, *,
                 admin: Optional['outputs.BrokeredInfraConfigSpecAdmin'] = None,
                 broker: Optional['outputs.BrokeredInfraConfigSpecBroker'] = None,
                 network_policy: Optional['outputs.BrokeredInfraConfigSpecNetworkPolicy'] = None,
                 version: Optional[str] = None):
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if broker is not None:
            pulumi.set(__self__, "broker", broker)
        if network_policy is not None:
            pulumi.set(__self__, "network_policy", network_policy)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def admin(self) -> Optional['outputs.BrokeredInfraConfigSpecAdmin']:
        return pulumi.get(self, "admin")

    @property
    @pulumi.getter
    def broker(self) -> Optional['outputs.BrokeredInfraConfigSpecBroker']:
        return pulumi.get(self, "broker")

    @property
    @pulumi.getter(name="networkPolicy")
    def network_policy(self) -> Optional['outputs.BrokeredInfraConfigSpecNetworkPolicy']:
        return pulumi.get(self, "network_policy")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BrokeredInfraConfigSpecAdmin(dict):
    def __init__(__self__, *,
                 pod_template: Optional['outputs.BrokeredInfraConfigSpecAdminPodTemplate'] = None,
                 resources: Optional['outputs.BrokeredInfraConfigSpecAdminResources'] = None):
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(self) -> Optional['outputs.BrokeredInfraConfigSpecAdminPodTemplate']:
        return pulumi.get(self, "pod_template")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.BrokeredInfraConfigSpecAdminResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BrokeredInfraConfigSpecAdminPodTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.BrokeredInfraConfigSpecAdminPodTemplateMetadata'] = None,
                 spec: Optional['outputs.BrokeredInfraConfigSpecAdminPodTemplateSpec'] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.BrokeredInfraConfigSpecAdminPodTemplateMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.BrokeredInfraConfigSpecAdminPodTemplateSpec']:
        return pulumi.get(self, "spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BrokeredInfraConfigSpecAdminPodTemplateMetadata(dict):
    def __init__(__self__, *,
                 labels: Optional[Mapping[str, Any]] = None):
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BrokeredInfraConfigSpecAdminPodTemplateSpec(dict):
    def __init__(__self__, *,
                 affinity: Optional[Mapping[str, Any]] = None,
                 containers: Optional[Sequence['outputs.BrokeredInfraConfigSpecAdminPodTemplateSpecContainers']] = None,
                 priority_class_name: Optional[str] = None,
                 security_context: Optional[Mapping[str, Any]] = None,
                 tolerations: Optional[Sequence[Mapping[str, Any]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.BrokeredInfraConfigSpecAdminPodTemplateSpecContainers']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence[Mapping[str, Any]]]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BrokeredInfraConfigSpecAdminPodTemplateSpecContainers(dict):
    def __init__(__self__, *,
                 resources: Optional[Mapping[str, Any]] = None):
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BrokeredInfraConfigSpecAdminResources(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BrokeredInfraConfigSpecBroker(dict):
    def __init__(__self__, *,
                 address_full_policy: Optional[str] = None,
                 global_max_size: Optional[str] = None,
                 java_opts: Optional[str] = None,
                 pod_template: Optional['outputs.BrokeredInfraConfigSpecBrokerPodTemplate'] = None,
                 resources: Optional['outputs.BrokeredInfraConfigSpecBrokerResources'] = None,
                 storage_class_name: Optional[str] = None,
                 update_persistent_volume_claim: Optional[bool] = None):
        """
        :param str global_max_size: Sets a global limit to the amount of memory the broker can use before it applies the rules determined by addressFullPolicy. Value in bytes or use a byte suffix ("B", "K", "MB", "GB")
        """
        if address_full_policy is not None:
            pulumi.set(__self__, "address_full_policy", address_full_policy)
        if global_max_size is not None:
            pulumi.set(__self__, "global_max_size", global_max_size)
        if java_opts is not None:
            pulumi.set(__self__, "java_opts", java_opts)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if update_persistent_volume_claim is not None:
            pulumi.set(__self__, "update_persistent_volume_claim", update_persistent_volume_claim)

    @property
    @pulumi.getter(name="addressFullPolicy")
    def address_full_policy(self) -> Optional[str]:
        return pulumi.get(self, "address_full_policy")

    @property
    @pulumi.getter(name="globalMaxSize")
    def global_max_size(self) -> Optional[str]:
        """
        Sets a global limit to the amount of memory the broker can use before it applies the rules determined by addressFullPolicy. Value in bytes or use a byte suffix ("B", "K", "MB", "GB")
        """
        return pulumi.get(self, "global_max_size")

    @property
    @pulumi.getter(name="javaOpts")
    def java_opts(self) -> Optional[str]:
        return pulumi.get(self, "java_opts")

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(self) -> Optional['outputs.BrokeredInfraConfigSpecBrokerPodTemplate']:
        return pulumi.get(self, "pod_template")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.BrokeredInfraConfigSpecBrokerResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_class_name")

    @property
    @pulumi.getter(name="updatePersistentVolumeClaim")
    def update_persistent_volume_claim(self) -> Optional[bool]:
        return pulumi.get(self, "update_persistent_volume_claim")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BrokeredInfraConfigSpecBrokerPodTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.BrokeredInfraConfigSpecBrokerPodTemplateMetadata'] = None,
                 spec: Optional['outputs.BrokeredInfraConfigSpecBrokerPodTemplateSpec'] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.BrokeredInfraConfigSpecBrokerPodTemplateMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.BrokeredInfraConfigSpecBrokerPodTemplateSpec']:
        return pulumi.get(self, "spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BrokeredInfraConfigSpecBrokerPodTemplateMetadata(dict):
    def __init__(__self__, *,
                 labels: Optional[Mapping[str, Any]] = None):
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BrokeredInfraConfigSpecBrokerPodTemplateSpec(dict):
    def __init__(__self__, *,
                 affinity: Optional[Mapping[str, Any]] = None,
                 priority_class_name: Optional[str] = None,
                 resources: Optional[Mapping[str, Any]] = None,
                 security_context: Optional[Mapping[str, Any]] = None,
                 tolerations: Optional[Sequence[Any]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BrokeredInfraConfigSpecBrokerResources(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None,
                 storage: Optional[str] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def storage(self) -> Optional[str]:
        return pulumi.get(self, "storage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BrokeredInfraConfigSpecNetworkPolicy(dict):
    def __init__(__self__, *,
                 egress: Optional[Sequence[Any]] = None,
                 ingress: Optional[Sequence[Any]] = None):
        if egress is not None:
            pulumi.set(__self__, "egress", egress)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter
    def egress(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "egress")

    @property
    @pulumi.getter
    def ingress(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "ingress")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceSpec(dict):
    def __init__(__self__, *,
                 certificate_secret: Optional['outputs.ConsoleServiceSpecCertificateSecret'] = None,
                 console_server: Optional['outputs.ConsoleServiceSpecConsoleServer'] = None,
                 discovery_metadata_url: Optional[str] = None,
                 host: Optional[str] = None,
                 impersonation: Optional['outputs.ConsoleServiceSpecImpersonation'] = None,
                 oauth_client_secret: Optional['outputs.ConsoleServiceSpecOauthClientSecret'] = None,
                 oauth_proxy: Optional['outputs.ConsoleServiceSpecOauthProxy'] = None,
                 replicas: Optional[int] = None,
                 scope: Optional[str] = None,
                 sso_cookie_domain: Optional[str] = None,
                 sso_cookie_secret: Optional['outputs.ConsoleServiceSpecSsoCookieSecret'] = None):
        """
        :param 'ConsoleServiceSpecImpersonationArgs' impersonation: Enable impersonation as the mechanism for authorizing user actions. For impersonation to work, it is important to also grant the console-server permissions to impersonate users.
        """
        if certificate_secret is not None:
            pulumi.set(__self__, "certificate_secret", certificate_secret)
        if console_server is not None:
            pulumi.set(__self__, "console_server", console_server)
        if discovery_metadata_url is not None:
            pulumi.set(__self__, "discovery_metadata_url", discovery_metadata_url)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if impersonation is not None:
            pulumi.set(__self__, "impersonation", impersonation)
        if oauth_client_secret is not None:
            pulumi.set(__self__, "oauth_client_secret", oauth_client_secret)
        if oauth_proxy is not None:
            pulumi.set(__self__, "oauth_proxy", oauth_proxy)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sso_cookie_domain is not None:
            pulumi.set(__self__, "sso_cookie_domain", sso_cookie_domain)
        if sso_cookie_secret is not None:
            pulumi.set(__self__, "sso_cookie_secret", sso_cookie_secret)

    @property
    @pulumi.getter(name="certificateSecret")
    def certificate_secret(self) -> Optional['outputs.ConsoleServiceSpecCertificateSecret']:
        return pulumi.get(self, "certificate_secret")

    @property
    @pulumi.getter(name="consoleServer")
    def console_server(self) -> Optional['outputs.ConsoleServiceSpecConsoleServer']:
        return pulumi.get(self, "console_server")

    @property
    @pulumi.getter(name="discoveryMetadataURL")
    def discovery_metadata_url(self) -> Optional[str]:
        return pulumi.get(self, "discovery_metadata_url")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def impersonation(self) -> Optional['outputs.ConsoleServiceSpecImpersonation']:
        """
        Enable impersonation as the mechanism for authorizing user actions. For impersonation to work, it is important to also grant the console-server permissions to impersonate users.
        """
        return pulumi.get(self, "impersonation")

    @property
    @pulumi.getter(name="oauthClientSecret")
    def oauth_client_secret(self) -> Optional['outputs.ConsoleServiceSpecOauthClientSecret']:
        return pulumi.get(self, "oauth_client_secret")

    @property
    @pulumi.getter(name="oauthProxy")
    def oauth_proxy(self) -> Optional['outputs.ConsoleServiceSpecOauthProxy']:
        return pulumi.get(self, "oauth_proxy")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="ssoCookieDomain")
    def sso_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "sso_cookie_domain")

    @property
    @pulumi.getter(name="ssoCookieSecret")
    def sso_cookie_secret(self) -> Optional['outputs.ConsoleServiceSpecSsoCookieSecret']:
        return pulumi.get(self, "sso_cookie_secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceSpecCertificateSecret(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceSpecConsoleServer(dict):
    def __init__(__self__, *,
                 liveness_probe: Optional['outputs.ConsoleServiceSpecConsoleServerLivenessProbe'] = None,
                 readiness_probe: Optional['outputs.ConsoleServiceSpecConsoleServerReadinessProbe'] = None,
                 resources: Optional['outputs.ConsoleServiceSpecConsoleServerResources'] = None,
                 session: Optional['outputs.ConsoleServiceSpecConsoleServerSession'] = None):
        """
        :param 'ConsoleServiceSpecConsoleServerLivenessProbeArgs' liveness_probe: Overrides for the periodic probe of container liveness.
        :param 'ConsoleServiceSpecConsoleServerReadinessProbeArgs' readiness_probe: Overrides for the periodic probe of container liveness.
        """
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if session is not None:
            pulumi.set(__self__, "session", session)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.ConsoleServiceSpecConsoleServerLivenessProbe']:
        """
        Overrides for the periodic probe of container liveness.
        """
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.ConsoleServiceSpecConsoleServerReadinessProbe']:
        """
        Overrides for the periodic probe of container liveness.
        """
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ConsoleServiceSpecConsoleServerResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def session(self) -> Optional['outputs.ConsoleServiceSpecConsoleServerSession']:
        return pulumi.get(self, "session")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceSpecConsoleServerLivenessProbe(dict):
    """
    Overrides for the periodic probe of container liveness.
    """
    def __init__(__self__, *,
                 failure_threshold: Optional[int] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 timeout_seconds: Optional[int] = None):
        """
        Overrides for the periodic probe of container liveness.
        :param int failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded.
        :param int initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated.
        :param int period_seconds: How often (in seconds) to perform the probe.
        :param int success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed.
        :param int timeout_seconds: Number of seconds after which the probe times out.
        """
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        """
        Number of seconds after the container has started before liveness probes are initiated.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        How often (in seconds) to perform the probe.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Number of seconds after which the probe times out.
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceSpecConsoleServerReadinessProbe(dict):
    """
    Overrides for the periodic probe of container liveness.
    """
    def __init__(__self__, *,
                 failure_threshold: Optional[int] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 timeout_seconds: Optional[int] = None):
        """
        Overrides for the periodic probe of container liveness.
        :param int failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded.
        :param int initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated.
        :param int period_seconds: How often (in seconds) to perform the probe.
        :param int success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed.
        :param int timeout_seconds: Number of seconds after which the probe times out.
        """
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        """
        Number of seconds after the container has started before liveness probes are initiated.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        How often (in seconds) to perform the probe.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Number of seconds after which the probe times out.
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceSpecConsoleServerResources(dict):
    def __init__(__self__, *,
                 limits: Optional['outputs.ConsoleServiceSpecConsoleServerResourcesLimits'] = None,
                 requests: Optional['outputs.ConsoleServiceSpecConsoleServerResourcesRequests'] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.ConsoleServiceSpecConsoleServerResourcesLimits']:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional['outputs.ConsoleServiceSpecConsoleServerResourcesRequests']:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceSpecConsoleServerResourcesLimits(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceSpecConsoleServerResourcesRequests(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceSpecConsoleServerSession(dict):
    def __init__(__self__, *,
                 idle_timeout: Optional[str] = None,
                 lifetime: Optional[str] = None):
        """
        :param str idle_timeout: IdleTimeout controls the maximum length of time a session can be inactive before it expires. Defaults to 5m.
        :param str lifetime: Lifetime controls the maximum length of time that a session is valid for before it expires. Defaults to 30m.
        """
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if lifetime is not None:
            pulumi.set(__self__, "lifetime", lifetime)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[str]:
        """
        IdleTimeout controls the maximum length of time a session can be inactive before it expires. Defaults to 5m.
        """
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter
    def lifetime(self) -> Optional[str]:
        """
        Lifetime controls the maximum length of time that a session is valid for before it expires. Defaults to 30m.
        """
        return pulumi.get(self, "lifetime")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceSpecImpersonation(dict):
    """
    Enable impersonation as the mechanism for authorizing user actions. For impersonation to work, it is important to also grant the console-server permissions to impersonate users.
    """
    def __init__(__self__, *,
                 user_header: Optional[str] = None):
        """
        Enable impersonation as the mechanism for authorizing user actions. For impersonation to work, it is important to also grant the console-server permissions to impersonate users.
        :param str user_header: Headers to use for user impersonation.
        """
        if user_header is not None:
            pulumi.set(__self__, "user_header", user_header)

    @property
    @pulumi.getter(name="userHeader")
    def user_header(self) -> Optional[str]:
        """
        Headers to use for user impersonation.
        """
        return pulumi.get(self, "user_header")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceSpecOauthClientSecret(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceSpecOauthProxy(dict):
    def __init__(__self__, *,
                 extra_args: Optional[Sequence[str]] = None,
                 resources: Optional['outputs.ConsoleServiceSpecOauthProxyResources'] = None):
        """
        :param Sequence[str] extra_args: Extra arguments to pass to oauth-proxy
        """
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[Sequence[str]]:
        """
        Extra arguments to pass to oauth-proxy
        """
        return pulumi.get(self, "extra_args")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ConsoleServiceSpecOauthProxyResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceSpecOauthProxyResources(dict):
    def __init__(__self__, *,
                 limits: Optional['outputs.ConsoleServiceSpecOauthProxyResourcesLimits'] = None,
                 requests: Optional['outputs.ConsoleServiceSpecOauthProxyResourcesRequests'] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.ConsoleServiceSpecOauthProxyResourcesLimits']:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional['outputs.ConsoleServiceSpecOauthProxyResourcesRequests']:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceSpecOauthProxyResourcesLimits(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceSpecOauthProxyResourcesRequests(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceSpecSsoCookieSecret(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceStatus(dict):
    def __init__(__self__, *,
                 ca_cert_secret: Optional['outputs.ConsoleServiceStatusCaCertSecret'] = None,
                 host: Optional[str] = None,
                 port: Optional[int] = None):
        if ca_cert_secret is not None:
            pulumi.set(__self__, "ca_cert_secret", ca_cert_secret)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="caCertSecret")
    def ca_cert_secret(self) -> Optional['outputs.ConsoleServiceStatusCaCertSecret']:
        return pulumi.get(self, "ca_cert_secret")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsoleServiceStatusCaCertSecret(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpec(dict):
    def __init__(__self__, *,
                 admin: Optional['outputs.StandardInfraConfigSpecAdmin'] = None,
                 broker: Optional['outputs.StandardInfraConfigSpecBroker'] = None,
                 network_policy: Optional['outputs.StandardInfraConfigSpecNetworkPolicy'] = None,
                 router: Optional['outputs.StandardInfraConfigSpecRouter'] = None,
                 version: Optional[str] = None):
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if broker is not None:
            pulumi.set(__self__, "broker", broker)
        if network_policy is not None:
            pulumi.set(__self__, "network_policy", network_policy)
        if router is not None:
            pulumi.set(__self__, "router", router)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def admin(self) -> Optional['outputs.StandardInfraConfigSpecAdmin']:
        return pulumi.get(self, "admin")

    @property
    @pulumi.getter
    def broker(self) -> Optional['outputs.StandardInfraConfigSpecBroker']:
        return pulumi.get(self, "broker")

    @property
    @pulumi.getter(name="networkPolicy")
    def network_policy(self) -> Optional['outputs.StandardInfraConfigSpecNetworkPolicy']:
        return pulumi.get(self, "network_policy")

    @property
    @pulumi.getter
    def router(self) -> Optional['outputs.StandardInfraConfigSpecRouter']:
        return pulumi.get(self, "router")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecAdmin(dict):
    def __init__(__self__, *,
                 pod_template: Optional['outputs.StandardInfraConfigSpecAdminPodTemplate'] = None,
                 resources: Optional['outputs.StandardInfraConfigSpecAdminResources'] = None):
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(self) -> Optional['outputs.StandardInfraConfigSpecAdminPodTemplate']:
        return pulumi.get(self, "pod_template")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.StandardInfraConfigSpecAdminResources']:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecAdminPodTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.StandardInfraConfigSpecAdminPodTemplateMetadata'] = None,
                 spec: Optional['outputs.StandardInfraConfigSpecAdminPodTemplateSpec'] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.StandardInfraConfigSpecAdminPodTemplateMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.StandardInfraConfigSpecAdminPodTemplateSpec']:
        return pulumi.get(self, "spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecAdminPodTemplateMetadata(dict):
    def __init__(__self__, *,
                 labels: Optional[Mapping[str, Any]] = None):
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecAdminPodTemplateSpec(dict):
    def __init__(__self__, *,
                 affinity: Optional[Mapping[str, Any]] = None,
                 containers: Optional[Sequence['outputs.StandardInfraConfigSpecAdminPodTemplateSpecContainers']] = None,
                 priority_class_name: Optional[str] = None,
                 security_context: Optional[Mapping[str, Any]] = None,
                 tolerations: Optional[Sequence[Mapping[str, Any]]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.StandardInfraConfigSpecAdminPodTemplateSpecContainers']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence[Mapping[str, Any]]]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecAdminPodTemplateSpecContainers(dict):
    def __init__(__self__, *,
                 resources: Optional[Mapping[str, Any]] = None):
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecAdminResources(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecBroker(dict):
    def __init__(__self__, *,
                 address_full_policy: Optional[str] = None,
                 connector_idle_timeout: Optional[int] = None,
                 connector_worker_threads: Optional[int] = None,
                 global_max_size: Optional[str] = None,
                 java_opts: Optional[str] = None,
                 max_unavailable: Optional['outputs.StandardInfraConfigSpecBrokerMaxUnavailable'] = None,
                 min_available: Optional['outputs.StandardInfraConfigSpecBrokerMinAvailable'] = None,
                 pod_template: Optional['outputs.StandardInfraConfigSpecBrokerPodTemplate'] = None,
                 resources: Optional['outputs.StandardInfraConfigSpecBrokerResources'] = None,
                 storage_class_name: Optional[str] = None,
                 update_persistent_volume_claim: Optional[bool] = None):
        """
        :param str global_max_size: Sets a global limit to the amount of memory the broker can use before it applies the rules determined by addressFullPolicy. Value in bytes or use a byte suffix ("B", "K", "MB", "GB")
        """
        if address_full_policy is not None:
            pulumi.set(__self__, "address_full_policy", address_full_policy)
        if connector_idle_timeout is not None:
            pulumi.set(__self__, "connector_idle_timeout", connector_idle_timeout)
        if connector_worker_threads is not None:
            pulumi.set(__self__, "connector_worker_threads", connector_worker_threads)
        if global_max_size is not None:
            pulumi.set(__self__, "global_max_size", global_max_size)
        if java_opts is not None:
            pulumi.set(__self__, "java_opts", java_opts)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)
        if min_available is not None:
            pulumi.set(__self__, "min_available", min_available)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if update_persistent_volume_claim is not None:
            pulumi.set(__self__, "update_persistent_volume_claim", update_persistent_volume_claim)

    @property
    @pulumi.getter(name="addressFullPolicy")
    def address_full_policy(self) -> Optional[str]:
        return pulumi.get(self, "address_full_policy")

    @property
    @pulumi.getter(name="connectorIdleTimeout")
    def connector_idle_timeout(self) -> Optional[int]:
        return pulumi.get(self, "connector_idle_timeout")

    @property
    @pulumi.getter(name="connectorWorkerThreads")
    def connector_worker_threads(self) -> Optional[int]:
        return pulumi.get(self, "connector_worker_threads")

    @property
    @pulumi.getter(name="globalMaxSize")
    def global_max_size(self) -> Optional[str]:
        """
        Sets a global limit to the amount of memory the broker can use before it applies the rules determined by addressFullPolicy. Value in bytes or use a byte suffix ("B", "K", "MB", "GB")
        """
        return pulumi.get(self, "global_max_size")

    @property
    @pulumi.getter(name="javaOpts")
    def java_opts(self) -> Optional[str]:
        return pulumi.get(self, "java_opts")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.StandardInfraConfigSpecBrokerMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    @property
    @pulumi.getter(name="minAvailable")
    def min_available(self) -> Optional['outputs.StandardInfraConfigSpecBrokerMinAvailable']:
        return pulumi.get(self, "min_available")

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(self) -> Optional['outputs.StandardInfraConfigSpecBrokerPodTemplate']:
        return pulumi.get(self, "pod_template")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.StandardInfraConfigSpecBrokerResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_class_name")

    @property
    @pulumi.getter(name="updatePersistentVolumeClaim")
    def update_persistent_volume_claim(self) -> Optional[bool]:
        return pulumi.get(self, "update_persistent_volume_claim")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecBrokerMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecBrokerMinAvailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecBrokerPodTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.StandardInfraConfigSpecBrokerPodTemplateMetadata'] = None,
                 spec: Optional['outputs.StandardInfraConfigSpecBrokerPodTemplateSpec'] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.StandardInfraConfigSpecBrokerPodTemplateMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.StandardInfraConfigSpecBrokerPodTemplateSpec']:
        return pulumi.get(self, "spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecBrokerPodTemplateMetadata(dict):
    def __init__(__self__, *,
                 labels: Optional[Mapping[str, Any]] = None):
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecBrokerPodTemplateSpec(dict):
    def __init__(__self__, *,
                 affinity: Optional[Mapping[str, Any]] = None,
                 priority_class_name: Optional[str] = None,
                 resources: Optional[Mapping[str, Any]] = None,
                 security_context: Optional[Mapping[str, Any]] = None,
                 tolerations: Optional[Sequence[Any]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecBrokerResources(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None,
                 storage: Optional[str] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def storage(self) -> Optional[str]:
        return pulumi.get(self, "storage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecNetworkPolicy(dict):
    def __init__(__self__, *,
                 egress: Optional[Sequence[Any]] = None,
                 ingress: Optional[Sequence[Any]] = None):
        if egress is not None:
            pulumi.set(__self__, "egress", egress)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter
    def egress(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "egress")

    @property
    @pulumi.getter
    def ingress(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "ingress")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecRouter(dict):
    def __init__(__self__, *,
                 idle_timeout: Optional[int] = None,
                 link_capacity: Optional[int] = None,
                 max_unavailable: Optional['outputs.StandardInfraConfigSpecRouterMaxUnavailable'] = None,
                 min_available: Optional['outputs.StandardInfraConfigSpecRouterMinAvailable'] = None,
                 min_replicas: Optional[int] = None,
                 pod_template: Optional['outputs.StandardInfraConfigSpecRouterPodTemplate'] = None,
                 policy: Optional['outputs.StandardInfraConfigSpecRouterPolicy'] = None,
                 resources: Optional['outputs.StandardInfraConfigSpecRouterResources'] = None,
                 worker_threads: Optional[int] = None):
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if link_capacity is not None:
            pulumi.set(__self__, "link_capacity", link_capacity)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)
        if min_available is not None:
            pulumi.set(__self__, "min_available", min_available)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if worker_threads is not None:
            pulumi.set(__self__, "worker_threads", worker_threads)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[int]:
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter(name="linkCapacity")
    def link_capacity(self) -> Optional[int]:
        return pulumi.get(self, "link_capacity")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.StandardInfraConfigSpecRouterMaxUnavailable']:
        return pulumi.get(self, "max_unavailable")

    @property
    @pulumi.getter(name="minAvailable")
    def min_available(self) -> Optional['outputs.StandardInfraConfigSpecRouterMinAvailable']:
        return pulumi.get(self, "min_available")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(self) -> Optional['outputs.StandardInfraConfigSpecRouterPodTemplate']:
        return pulumi.get(self, "pod_template")

    @property
    @pulumi.getter
    def policy(self) -> Optional['outputs.StandardInfraConfigSpecRouterPolicy']:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.StandardInfraConfigSpecRouterResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="workerThreads")
    def worker_threads(self) -> Optional[int]:
        return pulumi.get(self, "worker_threads")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecRouterMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecRouterMinAvailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecRouterPodTemplate(dict):
    def __init__(__self__, *,
                 metadata: Optional['outputs.StandardInfraConfigSpecRouterPodTemplateMetadata'] = None,
                 spec: Optional['outputs.StandardInfraConfigSpecRouterPodTemplateSpec'] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.StandardInfraConfigSpecRouterPodTemplateMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.StandardInfraConfigSpecRouterPodTemplateSpec']:
        return pulumi.get(self, "spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecRouterPodTemplateMetadata(dict):
    def __init__(__self__, *,
                 labels: Optional[Mapping[str, Any]] = None):
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecRouterPodTemplateSpec(dict):
    def __init__(__self__, *,
                 affinity: Optional[Mapping[str, Any]] = None,
                 priority_class_name: Optional[str] = None,
                 resources: Optional[Mapping[str, Any]] = None,
                 security_context: Optional[Mapping[str, Any]] = None,
                 tolerations: Optional[Sequence[Any]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecRouterPolicy(dict):
    def __init__(__self__, *,
                 max_connections: Optional[int] = None,
                 max_connections_per_host: Optional[int] = None,
                 max_connections_per_user: Optional[int] = None,
                 max_receivers_per_connection: Optional[int] = None,
                 max_senders_per_connection: Optional[int] = None,
                 max_sessions_per_connection: Optional[int] = None):
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if max_connections_per_host is not None:
            pulumi.set(__self__, "max_connections_per_host", max_connections_per_host)
        if max_connections_per_user is not None:
            pulumi.set(__self__, "max_connections_per_user", max_connections_per_user)
        if max_receivers_per_connection is not None:
            pulumi.set(__self__, "max_receivers_per_connection", max_receivers_per_connection)
        if max_senders_per_connection is not None:
            pulumi.set(__self__, "max_senders_per_connection", max_senders_per_connection)
        if max_sessions_per_connection is not None:
            pulumi.set(__self__, "max_sessions_per_connection", max_sessions_per_connection)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[int]:
        return pulumi.get(self, "max_connections")

    @property
    @pulumi.getter(name="maxConnectionsPerHost")
    def max_connections_per_host(self) -> Optional[int]:
        return pulumi.get(self, "max_connections_per_host")

    @property
    @pulumi.getter(name="maxConnectionsPerUser")
    def max_connections_per_user(self) -> Optional[int]:
        return pulumi.get(self, "max_connections_per_user")

    @property
    @pulumi.getter(name="maxReceiversPerConnection")
    def max_receivers_per_connection(self) -> Optional[int]:
        return pulumi.get(self, "max_receivers_per_connection")

    @property
    @pulumi.getter(name="maxSendersPerConnection")
    def max_senders_per_connection(self) -> Optional[int]:
        return pulumi.get(self, "max_senders_per_connection")

    @property
    @pulumi.getter(name="maxSessionsPerConnection")
    def max_sessions_per_connection(self) -> Optional[int]:
        return pulumi.get(self, "max_sessions_per_connection")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StandardInfraConfigSpecRouterResources(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



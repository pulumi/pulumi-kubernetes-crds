# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'IoTConfigSpecArgs',
    'IoTConfigSpecAdaptersArgs',
    'IoTConfigSpecJavaArgs',
    'IoTConfigSpecMeshArgs',
    'IoTConfigSpecServicesArgs',
    'IoTConfigSpecTlsArgs',
    'IoTConfigStatusArgs',
    'IoTConfigStatusConditionsArgs',
    'IoTProjectSpecArgs',
    'IoTProjectSpecConfigurationArgs',
    'IoTProjectSpecConfigurationAdaptersArgs',
    'IoTProjectSpecConfigurationAdaptersHttpArgs',
    'IoTProjectSpecConfigurationAdaptersLorawanArgs',
    'IoTProjectSpecConfigurationAdaptersMqttArgs',
    'IoTProjectSpecConfigurationAdaptersSigfoxArgs',
    'IoTProjectSpecConfigurationTrustAnchorsArgs',
    'IoTProjectStatusArgs',
    'IoTProjectStatusAcceptedArgs',
    'IoTProjectStatusConditionsArgs',
]

@pulumi.input_type
class IoTConfigSpecArgs:
    def __init__(__self__, *,
                 adapters: Optional[pulumi.Input['IoTConfigSpecAdaptersArgs']] = None,
                 enable_default_routes: Optional[pulumi.Input[bool]] = None,
                 image_overrides: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 inter_service_certificates: Optional[Any] = None,
                 java: Optional[pulumi.Input['IoTConfigSpecJavaArgs']] = None,
                 logging: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 mesh: Optional[pulumi.Input['IoTConfigSpecMeshArgs']] = None,
                 monitoring: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 services: Optional[pulumi.Input['IoTConfigSpecServicesArgs']] = None,
                 tls: Optional[pulumi.Input['IoTConfigSpecTlsArgs']] = None,
                 tracing: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param Any inter_service_certificates: Configure the strategy to use for connecting services using certificates. If no configuration
               is present, and you are running on OpenShift 4, then it will automatically deploy certificates
               using the Service CA.
        :param pulumi.Input['IoTConfigSpecTlsArgs'] tls: Global TLS configuration
        """
        if adapters is not None:
            pulumi.set(__self__, "adapters", adapters)
        if enable_default_routes is not None:
            pulumi.set(__self__, "enable_default_routes", enable_default_routes)
        if image_overrides is not None:
            pulumi.set(__self__, "image_overrides", image_overrides)
        if inter_service_certificates is not None:
            pulumi.set(__self__, "inter_service_certificates", inter_service_certificates)
        if java is not None:
            pulumi.set(__self__, "java", java)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if mesh is not None:
            pulumi.set(__self__, "mesh", mesh)
        if monitoring is not None:
            pulumi.set(__self__, "monitoring", monitoring)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if tracing is not None:
            pulumi.set(__self__, "tracing", tracing)

    @property
    @pulumi.getter
    def adapters(self) -> Optional[pulumi.Input['IoTConfigSpecAdaptersArgs']]:
        return pulumi.get(self, "adapters")

    @adapters.setter
    def adapters(self, value: Optional[pulumi.Input['IoTConfigSpecAdaptersArgs']]):
        pulumi.set(self, "adapters", value)

    @property
    @pulumi.getter(name="enableDefaultRoutes")
    def enable_default_routes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_default_routes")

    @enable_default_routes.setter
    def enable_default_routes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_default_routes", value)

    @property
    @pulumi.getter(name="imageOverrides")
    def image_overrides(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "image_overrides")

    @image_overrides.setter
    def image_overrides(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "image_overrides", value)

    @property
    @pulumi.getter(name="interServiceCertificates")
    def inter_service_certificates(self) -> Optional[Any]:
        """
        Configure the strategy to use for connecting services using certificates. If no configuration
        is present, and you are running on OpenShift 4, then it will automatically deploy certificates
        using the Service CA.
        """
        return pulumi.get(self, "inter_service_certificates")

    @inter_service_certificates.setter
    def inter_service_certificates(self, value: Optional[Any]):
        pulumi.set(self, "inter_service_certificates", value)

    @property
    @pulumi.getter
    def java(self) -> Optional[pulumi.Input['IoTConfigSpecJavaArgs']]:
        return pulumi.get(self, "java")

    @java.setter
    def java(self, value: Optional[pulumi.Input['IoTConfigSpecJavaArgs']]):
        pulumi.set(self, "java", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def mesh(self) -> Optional[pulumi.Input['IoTConfigSpecMeshArgs']]:
        return pulumi.get(self, "mesh")

    @mesh.setter
    def mesh(self, value: Optional[pulumi.Input['IoTConfigSpecMeshArgs']]):
        pulumi.set(self, "mesh", value)

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "monitoring")

    @monitoring.setter
    def monitoring(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "monitoring", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input['IoTConfigSpecServicesArgs']]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input['IoTConfigSpecServicesArgs']]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['IoTConfigSpecTlsArgs']]:
        """
        Global TLS configuration
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['IoTConfigSpecTlsArgs']]):
        pulumi.set(self, "tls", value)

    @property
    @pulumi.getter
    def tracing(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "tracing")

    @tracing.setter
    def tracing(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tracing", value)


@pulumi.input_type
class IoTConfigSpecAdaptersArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 http: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 lorawan: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 mqtt: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 sigfox: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if http is not None:
            pulumi.set(__self__, "http", http)
        if lorawan is not None:
            pulumi.set(__self__, "lorawan", lorawan)
        if mqtt is not None:
            pulumi.set(__self__, "mqtt", mqtt)
        if sigfox is not None:
            pulumi.set(__self__, "sigfox", sigfox)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defaults", value)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def lorawan(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "lorawan")

    @lorawan.setter
    def lorawan(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "lorawan", value)

    @property
    @pulumi.getter
    def mqtt(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "mqtt")

    @mqtt.setter
    def mqtt(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "mqtt", value)

    @property
    @pulumi.getter
    def sigfox(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "sigfox")

    @sigfox.setter
    def sigfox(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "sigfox", value)


@pulumi.input_type
class IoTConfigSpecJavaArgs:
    def __init__(__self__, *,
                 require_native_tls: Optional[pulumi.Input[bool]] = None):
        if require_native_tls is not None:
            pulumi.set(__self__, "require_native_tls", require_native_tls)

    @property
    @pulumi.getter(name="requireNativeTls")
    def require_native_tls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_native_tls")

    @require_native_tls.setter
    def require_native_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_native_tls", value)


@pulumi.input_type
class IoTConfigSpecMeshArgs:
    def __init__(__self__, *,
                 services: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if services is not None:
            pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "services", value)


@pulumi.input_type
class IoTConfigSpecServicesArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 device_connection: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 device_registry: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tenant: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if device_connection is not None:
            pulumi.set(__self__, "device_connection", device_connection)
        if device_registry is not None:
            pulumi.set(__self__, "device_registry", device_registry)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="deviceConnection")
    def device_connection(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "device_connection")

    @device_connection.setter
    def device_connection(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "device_connection", value)

    @property
    @pulumi.getter(name="deviceRegistry")
    def device_registry(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "device_registry")

    @device_registry.setter
    def device_registry(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "device_registry", value)

    @property
    @pulumi.getter
    def tenant(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tenant", value)


@pulumi.input_type
class IoTConfigSpecTlsArgs:
    def __init__(__self__, *,
                 versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Global TLS configuration
        """
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class IoTConfigStatusArgs:
    def __init__(__self__, *,
                 adapters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['IoTConfigStatusConditionsArgs']]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 phase: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if adapters is not None:
            pulumi.set(__self__, "adapters", adapters)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if services is not None:
            pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter
    def adapters(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "adapters")

    @adapters.setter
    def adapters(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "adapters", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IoTConfigStatusConditionsArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IoTConfigStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "services", value)


@pulumi.input_type
class IoTConfigStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class IoTProjectSpecArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['IoTProjectSpecConfigurationArgs']] = None,
                 downstream_strategy: Optional[Any] = None):
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if downstream_strategy is not None:
            pulumi.set(__self__, "downstream_strategy", downstream_strategy)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['IoTProjectSpecConfigurationArgs']]:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['IoTProjectSpecConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="downstreamStrategy")
    def downstream_strategy(self) -> Optional[Any]:
        return pulumi.get(self, "downstream_strategy")

    @downstream_strategy.setter
    def downstream_strategy(self, value: Optional[Any]):
        pulumi.set(self, "downstream_strategy", value)


@pulumi.input_type
class IoTProjectSpecConfigurationArgs:
    def __init__(__self__, *,
                 adapters: Optional[pulumi.Input['IoTProjectSpecConfigurationAdaptersArgs']] = None,
                 defaults: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ext: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 minimum_message_size: Optional[pulumi.Input[int]] = None,
                 trust_anchors: Optional[pulumi.Input[Sequence[pulumi.Input['IoTProjectSpecConfigurationTrustAnchorsArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] defaults: Defaults for properties defined on the tenant and device level.
        :param pulumi.Input[bool] enabled: Allows to disable the use of the Tenant.
        :param pulumi.Input[Mapping[str, Any]] ext: Allows arbitrary properties as extension to the ones specified by the Hono API.
        :param pulumi.Input[int] minimum_message_size: The minimum message size in bytes. If set, then reported size of
               telemetry, event and command messages is calculated as the minimum multiple
               of the configured value that is greater than or equal to the messages
               payload size.
        """
        if adapters is not None:
            pulumi.set(__self__, "adapters", adapters)
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ext is not None:
            pulumi.set(__self__, "ext", ext)
        if minimum_message_size is not None:
            pulumi.set(__self__, "minimum_message_size", minimum_message_size)
        if trust_anchors is not None:
            pulumi.set(__self__, "trust_anchors", trust_anchors)

    @property
    @pulumi.getter
    def adapters(self) -> Optional[pulumi.Input['IoTProjectSpecConfigurationAdaptersArgs']]:
        return pulumi.get(self, "adapters")

    @adapters.setter
    def adapters(self, value: Optional[pulumi.Input['IoTProjectSpecConfigurationAdaptersArgs']]):
        pulumi.set(self, "adapters", value)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Defaults for properties defined on the tenant and device level.
        """
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defaults", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows to disable the use of the Tenant.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ext(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Allows arbitrary properties as extension to the ones specified by the Hono API.
        """
        return pulumi.get(self, "ext")

    @ext.setter
    def ext(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "ext", value)

    @property
    @pulumi.getter(name="minimumMessageSize")
    def minimum_message_size(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum message size in bytes. If set, then reported size of
        telemetry, event and command messages is calculated as the minimum multiple
        of the configured value that is greater than or equal to the messages
        payload size.
        """
        return pulumi.get(self, "minimum_message_size")

    @minimum_message_size.setter
    def minimum_message_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_message_size", value)

    @property
    @pulumi.getter(name="trustAnchors")
    def trust_anchors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IoTProjectSpecConfigurationTrustAnchorsArgs']]]]:
        return pulumi.get(self, "trust_anchors")

    @trust_anchors.setter
    def trust_anchors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IoTProjectSpecConfigurationTrustAnchorsArgs']]]]):
        pulumi.set(self, "trust_anchors", value)


@pulumi.input_type
class IoTProjectSpecConfigurationAdaptersArgs:
    def __init__(__self__, *,
                 http: Optional[pulumi.Input['IoTProjectSpecConfigurationAdaptersHttpArgs']] = None,
                 lorawan: Optional[pulumi.Input['IoTProjectSpecConfigurationAdaptersLorawanArgs']] = None,
                 mqtt: Optional[pulumi.Input['IoTProjectSpecConfigurationAdaptersMqttArgs']] = None,
                 sigfox: Optional[pulumi.Input['IoTProjectSpecConfigurationAdaptersSigfoxArgs']] = None):
        if http is not None:
            pulumi.set(__self__, "http", http)
        if lorawan is not None:
            pulumi.set(__self__, "lorawan", lorawan)
        if mqtt is not None:
            pulumi.set(__self__, "mqtt", mqtt)
        if sigfox is not None:
            pulumi.set(__self__, "sigfox", sigfox)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['IoTProjectSpecConfigurationAdaptersHttpArgs']]:
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['IoTProjectSpecConfigurationAdaptersHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def lorawan(self) -> Optional[pulumi.Input['IoTProjectSpecConfigurationAdaptersLorawanArgs']]:
        return pulumi.get(self, "lorawan")

    @lorawan.setter
    def lorawan(self, value: Optional[pulumi.Input['IoTProjectSpecConfigurationAdaptersLorawanArgs']]):
        pulumi.set(self, "lorawan", value)

    @property
    @pulumi.getter
    def mqtt(self) -> Optional[pulumi.Input['IoTProjectSpecConfigurationAdaptersMqttArgs']]:
        return pulumi.get(self, "mqtt")

    @mqtt.setter
    def mqtt(self, value: Optional[pulumi.Input['IoTProjectSpecConfigurationAdaptersMqttArgs']]):
        pulumi.set(self, "mqtt", value)

    @property
    @pulumi.getter
    def sigfox(self) -> Optional[pulumi.Input['IoTProjectSpecConfigurationAdaptersSigfoxArgs']]:
        return pulumi.get(self, "sigfox")

    @sigfox.setter
    def sigfox(self, value: Optional[pulumi.Input['IoTProjectSpecConfigurationAdaptersSigfoxArgs']]):
        pulumi.set(self, "sigfox", value)


@pulumi.input_type
class IoTProjectSpecConfigurationAdaptersHttpArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ext: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ext is not None:
            pulumi.set(__self__, "ext", ext)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ext(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "ext")

    @ext.setter
    def ext(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "ext", value)


@pulumi.input_type
class IoTProjectSpecConfigurationAdaptersLorawanArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ext: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ext is not None:
            pulumi.set(__self__, "ext", ext)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ext(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "ext")

    @ext.setter
    def ext(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "ext", value)


@pulumi.input_type
class IoTProjectSpecConfigurationAdaptersMqttArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ext: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ext is not None:
            pulumi.set(__self__, "ext", ext)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ext(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "ext")

    @ext.setter
    def ext(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "ext", value)


@pulumi.input_type
class IoTProjectSpecConfigurationAdaptersSigfoxArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ext: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ext is not None:
            pulumi.set(__self__, "ext", ext)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ext(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "ext")

    @ext.setter
    def ext(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "ext", value)


@pulumi.input_type
class IoTProjectSpecConfigurationTrustAnchorsArgs:
    def __init__(__self__, *,
                 certificate: pulumi.Input[str]):
        pulumi.set(__self__, "certificate", certificate)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate", value)


@pulumi.input_type
class IoTProjectStatusArgs:
    def __init__(__self__, *,
                 accepted: Optional[pulumi.Input['IoTProjectStatusAcceptedArgs']] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['IoTProjectStatusConditionsArgs']]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 phase: Optional[pulumi.Input[str]] = None,
                 tenant_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['IoTProjectStatusAcceptedArgs'] accepted: The input accepted from the `.spec.configuration` section, split up into the different areas.
        """
        if accepted is not None:
            pulumi.set(__self__, "accepted", accepted)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if tenant_name is not None:
            pulumi.set(__self__, "tenant_name", tenant_name)

    @property
    @pulumi.getter
    def accepted(self) -> Optional[pulumi.Input['IoTProjectStatusAcceptedArgs']]:
        """
        The input accepted from the `.spec.configuration` section, split up into the different areas.
        """
        return pulumi.get(self, "accepted")

    @accepted.setter
    def accepted(self, value: Optional[pulumi.Input['IoTProjectStatusAcceptedArgs']]):
        pulumi.set(self, "accepted", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IoTProjectStatusConditionsArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IoTProjectStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_name")

    @tenant_name.setter
    def tenant_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_name", value)


@pulumi.input_type
class IoTProjectStatusAcceptedArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The input accepted from the `.spec.configuration` section, split up into the different areas.
        :param pulumi.Input[Mapping[str, Any]] configuration: The accepted configuration section, ready to be used as a reply to a "Get Tenant" request.
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The accepted configuration section, ready to be used as a reply to a "Get Tenant" request.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class IoTProjectStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)



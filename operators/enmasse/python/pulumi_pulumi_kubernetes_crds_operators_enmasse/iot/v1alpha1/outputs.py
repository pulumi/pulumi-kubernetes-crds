# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'IoTConfigSpec',
    'IoTConfigSpecAdapters',
    'IoTConfigSpecJava',
    'IoTConfigSpecMesh',
    'IoTConfigSpecServices',
    'IoTConfigSpecTls',
    'IoTConfigStatus',
    'IoTConfigStatusConditions',
    'IoTProjectSpec',
    'IoTProjectSpecConfiguration',
    'IoTProjectSpecConfigurationAdapters',
    'IoTProjectSpecConfigurationAdaptersHttp',
    'IoTProjectSpecConfigurationAdaptersLorawan',
    'IoTProjectSpecConfigurationAdaptersMqtt',
    'IoTProjectSpecConfigurationAdaptersSigfox',
    'IoTProjectSpecConfigurationTrustAnchors',
    'IoTProjectStatus',
    'IoTProjectStatusAccepted',
    'IoTProjectStatusConditions',
]

@pulumi.output_type
class IoTConfigSpec(dict):
    def __init__(__self__, *,
                 adapters: Optional['outputs.IoTConfigSpecAdapters'] = None,
                 enable_default_routes: Optional[bool] = None,
                 image_overrides: Optional[Mapping[str, Any]] = None,
                 inter_service_certificates: Optional[Any] = None,
                 java: Optional['outputs.IoTConfigSpecJava'] = None,
                 logging: Optional[Mapping[str, Any]] = None,
                 mesh: Optional['outputs.IoTConfigSpecMesh'] = None,
                 monitoring: Optional[Mapping[str, Any]] = None,
                 services: Optional['outputs.IoTConfigSpecServices'] = None,
                 tls: Optional['outputs.IoTConfigSpecTls'] = None,
                 tracing: Optional[Mapping[str, Any]] = None):
        """
        :param Any inter_service_certificates: Configure the strategy to use for connecting services using certificates. If no configuration
               is present, and you are running on OpenShift 4, then it will automatically deploy certificates
               using the Service CA.
        :param 'IoTConfigSpecTlsArgs' tls: Global TLS configuration
        """
        if adapters is not None:
            pulumi.set(__self__, "adapters", adapters)
        if enable_default_routes is not None:
            pulumi.set(__self__, "enable_default_routes", enable_default_routes)
        if image_overrides is not None:
            pulumi.set(__self__, "image_overrides", image_overrides)
        if inter_service_certificates is not None:
            pulumi.set(__self__, "inter_service_certificates", inter_service_certificates)
        if java is not None:
            pulumi.set(__self__, "java", java)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if mesh is not None:
            pulumi.set(__self__, "mesh", mesh)
        if monitoring is not None:
            pulumi.set(__self__, "monitoring", monitoring)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if tracing is not None:
            pulumi.set(__self__, "tracing", tracing)

    @property
    @pulumi.getter
    def adapters(self) -> Optional['outputs.IoTConfigSpecAdapters']:
        return pulumi.get(self, "adapters")

    @property
    @pulumi.getter(name="enableDefaultRoutes")
    def enable_default_routes(self) -> Optional[bool]:
        return pulumi.get(self, "enable_default_routes")

    @property
    @pulumi.getter(name="imageOverrides")
    def image_overrides(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "image_overrides")

    @property
    @pulumi.getter(name="interServiceCertificates")
    def inter_service_certificates(self) -> Optional[Any]:
        """
        Configure the strategy to use for connecting services using certificates. If no configuration
        is present, and you are running on OpenShift 4, then it will automatically deploy certificates
        using the Service CA.
        """
        return pulumi.get(self, "inter_service_certificates")

    @property
    @pulumi.getter
    def java(self) -> Optional['outputs.IoTConfigSpecJava']:
        return pulumi.get(self, "java")

    @property
    @pulumi.getter
    def logging(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def mesh(self) -> Optional['outputs.IoTConfigSpecMesh']:
        return pulumi.get(self, "mesh")

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "monitoring")

    @property
    @pulumi.getter
    def services(self) -> Optional['outputs.IoTConfigSpecServices']:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.IoTConfigSpecTls']:
        """
        Global TLS configuration
        """
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter
    def tracing(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "tracing")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTConfigSpecAdapters(dict):
    def __init__(__self__, *,
                 defaults: Optional[Mapping[str, Any]] = None,
                 http: Optional[Mapping[str, Any]] = None,
                 lorawan: Optional[Mapping[str, Any]] = None,
                 mqtt: Optional[Mapping[str, Any]] = None,
                 sigfox: Optional[Mapping[str, Any]] = None):
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if http is not None:
            pulumi.set(__self__, "http", http)
        if lorawan is not None:
            pulumi.set(__self__, "lorawan", lorawan)
        if mqtt is not None:
            pulumi.set(__self__, "mqtt", mqtt)
        if sigfox is not None:
            pulumi.set(__self__, "sigfox", sigfox)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defaults")

    @property
    @pulumi.getter
    def http(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "http")

    @property
    @pulumi.getter
    def lorawan(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "lorawan")

    @property
    @pulumi.getter
    def mqtt(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "mqtt")

    @property
    @pulumi.getter
    def sigfox(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "sigfox")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTConfigSpecJava(dict):
    def __init__(__self__, *,
                 require_native_tls: Optional[bool] = None):
        if require_native_tls is not None:
            pulumi.set(__self__, "require_native_tls", require_native_tls)

    @property
    @pulumi.getter(name="requireNativeTls")
    def require_native_tls(self) -> Optional[bool]:
        return pulumi.get(self, "require_native_tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTConfigSpecMesh(dict):
    def __init__(__self__, *,
                 services: Optional[Mapping[str, Any]] = None):
        if services is not None:
            pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter
    def services(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "services")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTConfigSpecServices(dict):
    def __init__(__self__, *,
                 authentication: Optional[Mapping[str, Any]] = None,
                 device_connection: Optional[Mapping[str, Any]] = None,
                 device_registry: Optional[Mapping[str, Any]] = None,
                 tenant: Optional[Mapping[str, Any]] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if device_connection is not None:
            pulumi.set(__self__, "device_connection", device_connection)
        if device_registry is not None:
            pulumi.set(__self__, "device_registry", device_registry)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="deviceConnection")
    def device_connection(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "device_connection")

    @property
    @pulumi.getter(name="deviceRegistry")
    def device_registry(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "device_registry")

    @property
    @pulumi.getter
    def tenant(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "tenant")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTConfigSpecTls(dict):
    """
    Global TLS configuration
    """
    def __init__(__self__, *,
                 versions: Optional[Sequence[str]] = None):
        """
        Global TLS configuration
        """
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def versions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "versions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTConfigStatus(dict):
    def __init__(__self__, *,
                 adapters: Optional[Mapping[str, Any]] = None,
                 conditions: Optional[Sequence['outputs.IoTConfigStatusConditions']] = None,
                 message: Optional[str] = None,
                 phase: Optional[str] = None,
                 services: Optional[Mapping[str, Any]] = None):
        if adapters is not None:
            pulumi.set(__self__, "adapters", adapters)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if services is not None:
            pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter
    def adapters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "adapters")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.IoTConfigStatusConditions']]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def services(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "services")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTConfigStatusConditions(dict):
    def __init__(__self__, *,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTProjectSpec(dict):
    def __init__(__self__, *,
                 configuration: Optional['outputs.IoTProjectSpecConfiguration'] = None,
                 downstream_strategy: Optional[Any] = None):
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if downstream_strategy is not None:
            pulumi.set(__self__, "downstream_strategy", downstream_strategy)

    @property
    @pulumi.getter
    def configuration(self) -> Optional['outputs.IoTProjectSpecConfiguration']:
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="downstreamStrategy")
    def downstream_strategy(self) -> Optional[Any]:
        return pulumi.get(self, "downstream_strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTProjectSpecConfiguration(dict):
    def __init__(__self__, *,
                 adapters: Optional['outputs.IoTProjectSpecConfigurationAdapters'] = None,
                 defaults: Optional[Mapping[str, Any]] = None,
                 enabled: Optional[bool] = None,
                 ext: Optional[Mapping[str, Any]] = None,
                 minimum_message_size: Optional[int] = None,
                 trust_anchors: Optional[Sequence['outputs.IoTProjectSpecConfigurationTrustAnchors']] = None):
        """
        :param Mapping[str, Any] defaults: Defaults for properties defined on the tenant and device level.
        :param bool enabled: Allows to disable the use of the Tenant.
        :param Mapping[str, Any] ext: Allows arbitrary properties as extension to the ones specified by the Hono API.
        :param int minimum_message_size: The minimum message size in bytes. If set, then reported size of
               telemetry, event and command messages is calculated as the minimum multiple
               of the configured value that is greater than or equal to the messages
               payload size.
        """
        if adapters is not None:
            pulumi.set(__self__, "adapters", adapters)
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ext is not None:
            pulumi.set(__self__, "ext", ext)
        if minimum_message_size is not None:
            pulumi.set(__self__, "minimum_message_size", minimum_message_size)
        if trust_anchors is not None:
            pulumi.set(__self__, "trust_anchors", trust_anchors)

    @property
    @pulumi.getter
    def adapters(self) -> Optional['outputs.IoTProjectSpecConfigurationAdapters']:
        return pulumi.get(self, "adapters")

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Mapping[str, Any]]:
        """
        Defaults for properties defined on the tenant and device level.
        """
        return pulumi.get(self, "defaults")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Allows to disable the use of the Tenant.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ext(self) -> Optional[Mapping[str, Any]]:
        """
        Allows arbitrary properties as extension to the ones specified by the Hono API.
        """
        return pulumi.get(self, "ext")

    @property
    @pulumi.getter(name="minimumMessageSize")
    def minimum_message_size(self) -> Optional[int]:
        """
        The minimum message size in bytes. If set, then reported size of
        telemetry, event and command messages is calculated as the minimum multiple
        of the configured value that is greater than or equal to the messages
        payload size.
        """
        return pulumi.get(self, "minimum_message_size")

    @property
    @pulumi.getter(name="trustAnchors")
    def trust_anchors(self) -> Optional[Sequence['outputs.IoTProjectSpecConfigurationTrustAnchors']]:
        return pulumi.get(self, "trust_anchors")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTProjectSpecConfigurationAdapters(dict):
    def __init__(__self__, *,
                 http: Optional['outputs.IoTProjectSpecConfigurationAdaptersHttp'] = None,
                 lorawan: Optional['outputs.IoTProjectSpecConfigurationAdaptersLorawan'] = None,
                 mqtt: Optional['outputs.IoTProjectSpecConfigurationAdaptersMqtt'] = None,
                 sigfox: Optional['outputs.IoTProjectSpecConfigurationAdaptersSigfox'] = None):
        if http is not None:
            pulumi.set(__self__, "http", http)
        if lorawan is not None:
            pulumi.set(__self__, "lorawan", lorawan)
        if mqtt is not None:
            pulumi.set(__self__, "mqtt", mqtt)
        if sigfox is not None:
            pulumi.set(__self__, "sigfox", sigfox)

    @property
    @pulumi.getter
    def http(self) -> Optional['outputs.IoTProjectSpecConfigurationAdaptersHttp']:
        return pulumi.get(self, "http")

    @property
    @pulumi.getter
    def lorawan(self) -> Optional['outputs.IoTProjectSpecConfigurationAdaptersLorawan']:
        return pulumi.get(self, "lorawan")

    @property
    @pulumi.getter
    def mqtt(self) -> Optional['outputs.IoTProjectSpecConfigurationAdaptersMqtt']:
        return pulumi.get(self, "mqtt")

    @property
    @pulumi.getter
    def sigfox(self) -> Optional['outputs.IoTProjectSpecConfigurationAdaptersSigfox']:
        return pulumi.get(self, "sigfox")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTProjectSpecConfigurationAdaptersHttp(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ext: Optional[Mapping[str, Any]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ext is not None:
            pulumi.set(__self__, "ext", ext)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ext(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "ext")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTProjectSpecConfigurationAdaptersLorawan(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ext: Optional[Mapping[str, Any]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ext is not None:
            pulumi.set(__self__, "ext", ext)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ext(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "ext")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTProjectSpecConfigurationAdaptersMqtt(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ext: Optional[Mapping[str, Any]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ext is not None:
            pulumi.set(__self__, "ext", ext)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ext(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "ext")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTProjectSpecConfigurationAdaptersSigfox(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ext: Optional[Mapping[str, Any]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ext is not None:
            pulumi.set(__self__, "ext", ext)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ext(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "ext")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTProjectSpecConfigurationTrustAnchors(dict):
    def __init__(__self__, *,
                 certificate: str):
        pulumi.set(__self__, "certificate", certificate)

    @property
    @pulumi.getter
    def certificate(self) -> str:
        return pulumi.get(self, "certificate")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTProjectStatus(dict):
    def __init__(__self__, *,
                 accepted: Optional['outputs.IoTProjectStatusAccepted'] = None,
                 conditions: Optional[Sequence['outputs.IoTProjectStatusConditions']] = None,
                 message: Optional[str] = None,
                 phase: Optional[str] = None,
                 tenant_name: Optional[str] = None):
        """
        :param 'IoTProjectStatusAcceptedArgs' accepted: The input accepted from the `.spec.configuration` section, split up into the different areas.
        """
        if accepted is not None:
            pulumi.set(__self__, "accepted", accepted)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if tenant_name is not None:
            pulumi.set(__self__, "tenant_name", tenant_name)

    @property
    @pulumi.getter
    def accepted(self) -> Optional['outputs.IoTProjectStatusAccepted']:
        """
        The input accepted from the `.spec.configuration` section, split up into the different areas.
        """
        return pulumi.get(self, "accepted")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.IoTProjectStatusConditions']]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> Optional[str]:
        return pulumi.get(self, "tenant_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTProjectStatusAccepted(dict):
    """
    The input accepted from the `.spec.configuration` section, split up into the different areas.
    """
    def __init__(__self__, *,
                 configuration: Optional[Mapping[str, Any]] = None):
        """
        The input accepted from the `.spec.configuration` section, split up into the different areas.
        :param Mapping[str, Any] configuration: The accepted configuration section, ready to be used as a reply to a "Get Tenant" request.
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[Mapping[str, Any]]:
        """
        The accepted configuration section, ready to be used as a reply to a "Get Tenant" request.
        """
        return pulumi.get(self, "configuration")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IoTProjectStatusConditions(dict):
    def __init__(__self__, *,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



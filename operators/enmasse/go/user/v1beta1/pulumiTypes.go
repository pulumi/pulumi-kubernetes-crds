// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// MessagingUser is a user that can be used to authenticate and authorize a messaging application. This resource is created by messaging tenants.
type MessagingUserType struct {
	ApiVersion *string              `pulumi:"apiVersion"`
	Kind       *string              `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta   `pulumi:"metadata"`
	Spec       *MessagingUserSpec   `pulumi:"spec"`
	Status     *MessagingUserStatus `pulumi:"status"`
}

// MessagingUserTypeInput is an input type that accepts MessagingUserTypeArgs and MessagingUserTypeOutput values.
// You can construct a concrete instance of `MessagingUserTypeInput` via:
//
//          MessagingUserTypeArgs{...}
type MessagingUserTypeInput interface {
	pulumi.Input

	ToMessagingUserTypeOutput() MessagingUserTypeOutput
	ToMessagingUserTypeOutputWithContext(context.Context) MessagingUserTypeOutput
}

// MessagingUser is a user that can be used to authenticate and authorize a messaging application. This resource is created by messaging tenants.
type MessagingUserTypeArgs struct {
	ApiVersion pulumi.StringPtrInput       `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput       `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput   `pulumi:"metadata"`
	Spec       MessagingUserSpecPtrInput   `pulumi:"spec"`
	Status     MessagingUserStatusPtrInput `pulumi:"status"`
}

func (MessagingUserTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MessagingUserType)(nil)).Elem()
}

func (i MessagingUserTypeArgs) ToMessagingUserTypeOutput() MessagingUserTypeOutput {
	return i.ToMessagingUserTypeOutputWithContext(context.Background())
}

func (i MessagingUserTypeArgs) ToMessagingUserTypeOutputWithContext(ctx context.Context) MessagingUserTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessagingUserTypeOutput)
}

// MessagingUser is a user that can be used to authenticate and authorize a messaging application. This resource is created by messaging tenants.
type MessagingUserTypeOutput struct{ *pulumi.OutputState }

func (MessagingUserTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MessagingUserType)(nil)).Elem()
}

func (o MessagingUserTypeOutput) ToMessagingUserTypeOutput() MessagingUserTypeOutput {
	return o
}

func (o MessagingUserTypeOutput) ToMessagingUserTypeOutputWithContext(ctx context.Context) MessagingUserTypeOutput {
	return o
}

func (o MessagingUserTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MessagingUserType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o MessagingUserTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MessagingUserType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o MessagingUserTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v MessagingUserType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o MessagingUserTypeOutput) Spec() MessagingUserSpecPtrOutput {
	return o.ApplyT(func(v MessagingUserType) *MessagingUserSpec { return v.Spec }).(MessagingUserSpecPtrOutput)
}

func (o MessagingUserTypeOutput) Status() MessagingUserStatusPtrOutput {
	return o.ApplyT(func(v MessagingUserType) *MessagingUserStatus { return v.Status }).(MessagingUserStatusPtrOutput)
}

type MessagingUserSpec struct {
	// The authentication specification.
	Authentication MessagingUserSpecAuthentication `pulumi:"authentication"`
	// The authorization rules for the user.
	Authorization []MessagingUserSpecAuthorization `pulumi:"authorization"`
	// The username used by messaging clients.
	Username string `pulumi:"username"`
}

// MessagingUserSpecInput is an input type that accepts MessagingUserSpecArgs and MessagingUserSpecOutput values.
// You can construct a concrete instance of `MessagingUserSpecInput` via:
//
//          MessagingUserSpecArgs{...}
type MessagingUserSpecInput interface {
	pulumi.Input

	ToMessagingUserSpecOutput() MessagingUserSpecOutput
	ToMessagingUserSpecOutputWithContext(context.Context) MessagingUserSpecOutput
}

type MessagingUserSpecArgs struct {
	// The authentication specification.
	Authentication MessagingUserSpecAuthenticationInput `pulumi:"authentication"`
	// The authorization rules for the user.
	Authorization MessagingUserSpecAuthorizationArrayInput `pulumi:"authorization"`
	// The username used by messaging clients.
	Username pulumi.StringInput `pulumi:"username"`
}

func (MessagingUserSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MessagingUserSpec)(nil)).Elem()
}

func (i MessagingUserSpecArgs) ToMessagingUserSpecOutput() MessagingUserSpecOutput {
	return i.ToMessagingUserSpecOutputWithContext(context.Background())
}

func (i MessagingUserSpecArgs) ToMessagingUserSpecOutputWithContext(ctx context.Context) MessagingUserSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessagingUserSpecOutput)
}

func (i MessagingUserSpecArgs) ToMessagingUserSpecPtrOutput() MessagingUserSpecPtrOutput {
	return i.ToMessagingUserSpecPtrOutputWithContext(context.Background())
}

func (i MessagingUserSpecArgs) ToMessagingUserSpecPtrOutputWithContext(ctx context.Context) MessagingUserSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessagingUserSpecOutput).ToMessagingUserSpecPtrOutputWithContext(ctx)
}

// MessagingUserSpecPtrInput is an input type that accepts MessagingUserSpecArgs, MessagingUserSpecPtr and MessagingUserSpecPtrOutput values.
// You can construct a concrete instance of `MessagingUserSpecPtrInput` via:
//
//          MessagingUserSpecArgs{...}
//
//  or:
//
//          nil
type MessagingUserSpecPtrInput interface {
	pulumi.Input

	ToMessagingUserSpecPtrOutput() MessagingUserSpecPtrOutput
	ToMessagingUserSpecPtrOutputWithContext(context.Context) MessagingUserSpecPtrOutput
}

type messagingUserSpecPtrType MessagingUserSpecArgs

func MessagingUserSpecPtr(v *MessagingUserSpecArgs) MessagingUserSpecPtrInput {
	return (*messagingUserSpecPtrType)(v)
}

func (*messagingUserSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MessagingUserSpec)(nil)).Elem()
}

func (i *messagingUserSpecPtrType) ToMessagingUserSpecPtrOutput() MessagingUserSpecPtrOutput {
	return i.ToMessagingUserSpecPtrOutputWithContext(context.Background())
}

func (i *messagingUserSpecPtrType) ToMessagingUserSpecPtrOutputWithContext(ctx context.Context) MessagingUserSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessagingUserSpecPtrOutput)
}

type MessagingUserSpecOutput struct{ *pulumi.OutputState }

func (MessagingUserSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MessagingUserSpec)(nil)).Elem()
}

func (o MessagingUserSpecOutput) ToMessagingUserSpecOutput() MessagingUserSpecOutput {
	return o
}

func (o MessagingUserSpecOutput) ToMessagingUserSpecOutputWithContext(ctx context.Context) MessagingUserSpecOutput {
	return o
}

func (o MessagingUserSpecOutput) ToMessagingUserSpecPtrOutput() MessagingUserSpecPtrOutput {
	return o.ToMessagingUserSpecPtrOutputWithContext(context.Background())
}

func (o MessagingUserSpecOutput) ToMessagingUserSpecPtrOutputWithContext(ctx context.Context) MessagingUserSpecPtrOutput {
	return o.ApplyT(func(v MessagingUserSpec) *MessagingUserSpec {
		return &v
	}).(MessagingUserSpecPtrOutput)
}

// The authentication specification.
func (o MessagingUserSpecOutput) Authentication() MessagingUserSpecAuthenticationOutput {
	return o.ApplyT(func(v MessagingUserSpec) MessagingUserSpecAuthentication { return v.Authentication }).(MessagingUserSpecAuthenticationOutput)
}

// The authorization rules for the user.
func (o MessagingUserSpecOutput) Authorization() MessagingUserSpecAuthorizationArrayOutput {
	return o.ApplyT(func(v MessagingUserSpec) []MessagingUserSpecAuthorization { return v.Authorization }).(MessagingUserSpecAuthorizationArrayOutput)
}

// The username used by messaging clients.
func (o MessagingUserSpecOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MessagingUserSpec) string { return v.Username }).(pulumi.StringOutput)
}

type MessagingUserSpecPtrOutput struct{ *pulumi.OutputState }

func (MessagingUserSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MessagingUserSpec)(nil)).Elem()
}

func (o MessagingUserSpecPtrOutput) ToMessagingUserSpecPtrOutput() MessagingUserSpecPtrOutput {
	return o
}

func (o MessagingUserSpecPtrOutput) ToMessagingUserSpecPtrOutputWithContext(ctx context.Context) MessagingUserSpecPtrOutput {
	return o
}

func (o MessagingUserSpecPtrOutput) Elem() MessagingUserSpecOutput {
	return o.ApplyT(func(v *MessagingUserSpec) MessagingUserSpec { return *v }).(MessagingUserSpecOutput)
}

// The authentication specification.
func (o MessagingUserSpecPtrOutput) Authentication() MessagingUserSpecAuthenticationPtrOutput {
	return o.ApplyT(func(v *MessagingUserSpec) *MessagingUserSpecAuthentication {
		if v == nil {
			return nil
		}
		return &v.Authentication
	}).(MessagingUserSpecAuthenticationPtrOutput)
}

// The authorization rules for the user.
func (o MessagingUserSpecPtrOutput) Authorization() MessagingUserSpecAuthorizationArrayOutput {
	return o.ApplyT(func(v *MessagingUserSpec) []MessagingUserSpecAuthorization {
		if v == nil {
			return nil
		}
		return v.Authorization
	}).(MessagingUserSpecAuthorizationArrayOutput)
}

// The username used by messaging clients.
func (o MessagingUserSpecPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessagingUserSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// The authentication specification.
type MessagingUserSpecAuthentication struct {
	// Federated user id for the 'federated' authentication type.
	FederatedUserid *string `pulumi:"federatedUserid"`
	// Federated user name for the 'federated' authentication type.
	FederatedUsername *string `pulumi:"federatedUsername"`
	// Base64-encoded password for the 'password' authentication type.
	Password *string `pulumi:"password"`
	// Federated identity provider for the 'federated' authentication type.
	Provider *string `pulumi:"provider"`
	// The type of authentication.
	Type string `pulumi:"type"`
}

// MessagingUserSpecAuthenticationInput is an input type that accepts MessagingUserSpecAuthenticationArgs and MessagingUserSpecAuthenticationOutput values.
// You can construct a concrete instance of `MessagingUserSpecAuthenticationInput` via:
//
//          MessagingUserSpecAuthenticationArgs{...}
type MessagingUserSpecAuthenticationInput interface {
	pulumi.Input

	ToMessagingUserSpecAuthenticationOutput() MessagingUserSpecAuthenticationOutput
	ToMessagingUserSpecAuthenticationOutputWithContext(context.Context) MessagingUserSpecAuthenticationOutput
}

// The authentication specification.
type MessagingUserSpecAuthenticationArgs struct {
	// Federated user id for the 'federated' authentication type.
	FederatedUserid pulumi.StringPtrInput `pulumi:"federatedUserid"`
	// Federated user name for the 'federated' authentication type.
	FederatedUsername pulumi.StringPtrInput `pulumi:"federatedUsername"`
	// Base64-encoded password for the 'password' authentication type.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Federated identity provider for the 'federated' authentication type.
	Provider pulumi.StringPtrInput `pulumi:"provider"`
	// The type of authentication.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MessagingUserSpecAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MessagingUserSpecAuthentication)(nil)).Elem()
}

func (i MessagingUserSpecAuthenticationArgs) ToMessagingUserSpecAuthenticationOutput() MessagingUserSpecAuthenticationOutput {
	return i.ToMessagingUserSpecAuthenticationOutputWithContext(context.Background())
}

func (i MessagingUserSpecAuthenticationArgs) ToMessagingUserSpecAuthenticationOutputWithContext(ctx context.Context) MessagingUserSpecAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessagingUserSpecAuthenticationOutput)
}

func (i MessagingUserSpecAuthenticationArgs) ToMessagingUserSpecAuthenticationPtrOutput() MessagingUserSpecAuthenticationPtrOutput {
	return i.ToMessagingUserSpecAuthenticationPtrOutputWithContext(context.Background())
}

func (i MessagingUserSpecAuthenticationArgs) ToMessagingUserSpecAuthenticationPtrOutputWithContext(ctx context.Context) MessagingUserSpecAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessagingUserSpecAuthenticationOutput).ToMessagingUserSpecAuthenticationPtrOutputWithContext(ctx)
}

// MessagingUserSpecAuthenticationPtrInput is an input type that accepts MessagingUserSpecAuthenticationArgs, MessagingUserSpecAuthenticationPtr and MessagingUserSpecAuthenticationPtrOutput values.
// You can construct a concrete instance of `MessagingUserSpecAuthenticationPtrInput` via:
//
//          MessagingUserSpecAuthenticationArgs{...}
//
//  or:
//
//          nil
type MessagingUserSpecAuthenticationPtrInput interface {
	pulumi.Input

	ToMessagingUserSpecAuthenticationPtrOutput() MessagingUserSpecAuthenticationPtrOutput
	ToMessagingUserSpecAuthenticationPtrOutputWithContext(context.Context) MessagingUserSpecAuthenticationPtrOutput
}

type messagingUserSpecAuthenticationPtrType MessagingUserSpecAuthenticationArgs

func MessagingUserSpecAuthenticationPtr(v *MessagingUserSpecAuthenticationArgs) MessagingUserSpecAuthenticationPtrInput {
	return (*messagingUserSpecAuthenticationPtrType)(v)
}

func (*messagingUserSpecAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MessagingUserSpecAuthentication)(nil)).Elem()
}

func (i *messagingUserSpecAuthenticationPtrType) ToMessagingUserSpecAuthenticationPtrOutput() MessagingUserSpecAuthenticationPtrOutput {
	return i.ToMessagingUserSpecAuthenticationPtrOutputWithContext(context.Background())
}

func (i *messagingUserSpecAuthenticationPtrType) ToMessagingUserSpecAuthenticationPtrOutputWithContext(ctx context.Context) MessagingUserSpecAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessagingUserSpecAuthenticationPtrOutput)
}

// The authentication specification.
type MessagingUserSpecAuthenticationOutput struct{ *pulumi.OutputState }

func (MessagingUserSpecAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MessagingUserSpecAuthentication)(nil)).Elem()
}

func (o MessagingUserSpecAuthenticationOutput) ToMessagingUserSpecAuthenticationOutput() MessagingUserSpecAuthenticationOutput {
	return o
}

func (o MessagingUserSpecAuthenticationOutput) ToMessagingUserSpecAuthenticationOutputWithContext(ctx context.Context) MessagingUserSpecAuthenticationOutput {
	return o
}

func (o MessagingUserSpecAuthenticationOutput) ToMessagingUserSpecAuthenticationPtrOutput() MessagingUserSpecAuthenticationPtrOutput {
	return o.ToMessagingUserSpecAuthenticationPtrOutputWithContext(context.Background())
}

func (o MessagingUserSpecAuthenticationOutput) ToMessagingUserSpecAuthenticationPtrOutputWithContext(ctx context.Context) MessagingUserSpecAuthenticationPtrOutput {
	return o.ApplyT(func(v MessagingUserSpecAuthentication) *MessagingUserSpecAuthentication {
		return &v
	}).(MessagingUserSpecAuthenticationPtrOutput)
}

// Federated user id for the 'federated' authentication type.
func (o MessagingUserSpecAuthenticationOutput) FederatedUserid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MessagingUserSpecAuthentication) *string { return v.FederatedUserid }).(pulumi.StringPtrOutput)
}

// Federated user name for the 'federated' authentication type.
func (o MessagingUserSpecAuthenticationOutput) FederatedUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MessagingUserSpecAuthentication) *string { return v.FederatedUsername }).(pulumi.StringPtrOutput)
}

// Base64-encoded password for the 'password' authentication type.
func (o MessagingUserSpecAuthenticationOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MessagingUserSpecAuthentication) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Federated identity provider for the 'federated' authentication type.
func (o MessagingUserSpecAuthenticationOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MessagingUserSpecAuthentication) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

// The type of authentication.
func (o MessagingUserSpecAuthenticationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MessagingUserSpecAuthentication) string { return v.Type }).(pulumi.StringOutput)
}

type MessagingUserSpecAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (MessagingUserSpecAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MessagingUserSpecAuthentication)(nil)).Elem()
}

func (o MessagingUserSpecAuthenticationPtrOutput) ToMessagingUserSpecAuthenticationPtrOutput() MessagingUserSpecAuthenticationPtrOutput {
	return o
}

func (o MessagingUserSpecAuthenticationPtrOutput) ToMessagingUserSpecAuthenticationPtrOutputWithContext(ctx context.Context) MessagingUserSpecAuthenticationPtrOutput {
	return o
}

func (o MessagingUserSpecAuthenticationPtrOutput) Elem() MessagingUserSpecAuthenticationOutput {
	return o.ApplyT(func(v *MessagingUserSpecAuthentication) MessagingUserSpecAuthentication { return *v }).(MessagingUserSpecAuthenticationOutput)
}

// Federated user id for the 'federated' authentication type.
func (o MessagingUserSpecAuthenticationPtrOutput) FederatedUserid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessagingUserSpecAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.FederatedUserid
	}).(pulumi.StringPtrOutput)
}

// Federated user name for the 'federated' authentication type.
func (o MessagingUserSpecAuthenticationPtrOutput) FederatedUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessagingUserSpecAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.FederatedUsername
	}).(pulumi.StringPtrOutput)
}

// Base64-encoded password for the 'password' authentication type.
func (o MessagingUserSpecAuthenticationPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessagingUserSpecAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Federated identity provider for the 'federated' authentication type.
func (o MessagingUserSpecAuthenticationPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessagingUserSpecAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

// The type of authentication.
func (o MessagingUserSpecAuthenticationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessagingUserSpecAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type MessagingUserSpecAuthorization struct {
	// The addresses the rule should apply to.
	Addresses []string `pulumi:"addresses"`
	// The operations that should apply to addresses matched by this rule.
	Operations []string `pulumi:"operations"`
}

// MessagingUserSpecAuthorizationInput is an input type that accepts MessagingUserSpecAuthorizationArgs and MessagingUserSpecAuthorizationOutput values.
// You can construct a concrete instance of `MessagingUserSpecAuthorizationInput` via:
//
//          MessagingUserSpecAuthorizationArgs{...}
type MessagingUserSpecAuthorizationInput interface {
	pulumi.Input

	ToMessagingUserSpecAuthorizationOutput() MessagingUserSpecAuthorizationOutput
	ToMessagingUserSpecAuthorizationOutputWithContext(context.Context) MessagingUserSpecAuthorizationOutput
}

type MessagingUserSpecAuthorizationArgs struct {
	// The addresses the rule should apply to.
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
	// The operations that should apply to addresses matched by this rule.
	Operations pulumi.StringArrayInput `pulumi:"operations"`
}

func (MessagingUserSpecAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MessagingUserSpecAuthorization)(nil)).Elem()
}

func (i MessagingUserSpecAuthorizationArgs) ToMessagingUserSpecAuthorizationOutput() MessagingUserSpecAuthorizationOutput {
	return i.ToMessagingUserSpecAuthorizationOutputWithContext(context.Background())
}

func (i MessagingUserSpecAuthorizationArgs) ToMessagingUserSpecAuthorizationOutputWithContext(ctx context.Context) MessagingUserSpecAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessagingUserSpecAuthorizationOutput)
}

// MessagingUserSpecAuthorizationArrayInput is an input type that accepts MessagingUserSpecAuthorizationArray and MessagingUserSpecAuthorizationArrayOutput values.
// You can construct a concrete instance of `MessagingUserSpecAuthorizationArrayInput` via:
//
//          MessagingUserSpecAuthorizationArray{ MessagingUserSpecAuthorizationArgs{...} }
type MessagingUserSpecAuthorizationArrayInput interface {
	pulumi.Input

	ToMessagingUserSpecAuthorizationArrayOutput() MessagingUserSpecAuthorizationArrayOutput
	ToMessagingUserSpecAuthorizationArrayOutputWithContext(context.Context) MessagingUserSpecAuthorizationArrayOutput
}

type MessagingUserSpecAuthorizationArray []MessagingUserSpecAuthorizationInput

func (MessagingUserSpecAuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MessagingUserSpecAuthorization)(nil)).Elem()
}

func (i MessagingUserSpecAuthorizationArray) ToMessagingUserSpecAuthorizationArrayOutput() MessagingUserSpecAuthorizationArrayOutput {
	return i.ToMessagingUserSpecAuthorizationArrayOutputWithContext(context.Background())
}

func (i MessagingUserSpecAuthorizationArray) ToMessagingUserSpecAuthorizationArrayOutputWithContext(ctx context.Context) MessagingUserSpecAuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessagingUserSpecAuthorizationArrayOutput)
}

type MessagingUserSpecAuthorizationOutput struct{ *pulumi.OutputState }

func (MessagingUserSpecAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MessagingUserSpecAuthorization)(nil)).Elem()
}

func (o MessagingUserSpecAuthorizationOutput) ToMessagingUserSpecAuthorizationOutput() MessagingUserSpecAuthorizationOutput {
	return o
}

func (o MessagingUserSpecAuthorizationOutput) ToMessagingUserSpecAuthorizationOutputWithContext(ctx context.Context) MessagingUserSpecAuthorizationOutput {
	return o
}

// The addresses the rule should apply to.
func (o MessagingUserSpecAuthorizationOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MessagingUserSpecAuthorization) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// The operations that should apply to addresses matched by this rule.
func (o MessagingUserSpecAuthorizationOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MessagingUserSpecAuthorization) []string { return v.Operations }).(pulumi.StringArrayOutput)
}

type MessagingUserSpecAuthorizationArrayOutput struct{ *pulumi.OutputState }

func (MessagingUserSpecAuthorizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MessagingUserSpecAuthorization)(nil)).Elem()
}

func (o MessagingUserSpecAuthorizationArrayOutput) ToMessagingUserSpecAuthorizationArrayOutput() MessagingUserSpecAuthorizationArrayOutput {
	return o
}

func (o MessagingUserSpecAuthorizationArrayOutput) ToMessagingUserSpecAuthorizationArrayOutputWithContext(ctx context.Context) MessagingUserSpecAuthorizationArrayOutput {
	return o
}

func (o MessagingUserSpecAuthorizationArrayOutput) Index(i pulumi.IntInput) MessagingUserSpecAuthorizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MessagingUserSpecAuthorization {
		return vs[0].([]MessagingUserSpecAuthorization)[vs[1].(int)]
	}).(MessagingUserSpecAuthorizationOutput)
}

type MessagingUserStatus struct {
	// Applied generation
	Generation *int `pulumi:"generation"`
	// Message describing the current state
	Message *string `pulumi:"message"`
	// The lifecycle phase of the messaging user
	Phase *string `pulumi:"phase"`
}

// MessagingUserStatusInput is an input type that accepts MessagingUserStatusArgs and MessagingUserStatusOutput values.
// You can construct a concrete instance of `MessagingUserStatusInput` via:
//
//          MessagingUserStatusArgs{...}
type MessagingUserStatusInput interface {
	pulumi.Input

	ToMessagingUserStatusOutput() MessagingUserStatusOutput
	ToMessagingUserStatusOutputWithContext(context.Context) MessagingUserStatusOutput
}

type MessagingUserStatusArgs struct {
	// Applied generation
	Generation pulumi.IntPtrInput `pulumi:"generation"`
	// Message describing the current state
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The lifecycle phase of the messaging user
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (MessagingUserStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MessagingUserStatus)(nil)).Elem()
}

func (i MessagingUserStatusArgs) ToMessagingUserStatusOutput() MessagingUserStatusOutput {
	return i.ToMessagingUserStatusOutputWithContext(context.Background())
}

func (i MessagingUserStatusArgs) ToMessagingUserStatusOutputWithContext(ctx context.Context) MessagingUserStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessagingUserStatusOutput)
}

func (i MessagingUserStatusArgs) ToMessagingUserStatusPtrOutput() MessagingUserStatusPtrOutput {
	return i.ToMessagingUserStatusPtrOutputWithContext(context.Background())
}

func (i MessagingUserStatusArgs) ToMessagingUserStatusPtrOutputWithContext(ctx context.Context) MessagingUserStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessagingUserStatusOutput).ToMessagingUserStatusPtrOutputWithContext(ctx)
}

// MessagingUserStatusPtrInput is an input type that accepts MessagingUserStatusArgs, MessagingUserStatusPtr and MessagingUserStatusPtrOutput values.
// You can construct a concrete instance of `MessagingUserStatusPtrInput` via:
//
//          MessagingUserStatusArgs{...}
//
//  or:
//
//          nil
type MessagingUserStatusPtrInput interface {
	pulumi.Input

	ToMessagingUserStatusPtrOutput() MessagingUserStatusPtrOutput
	ToMessagingUserStatusPtrOutputWithContext(context.Context) MessagingUserStatusPtrOutput
}

type messagingUserStatusPtrType MessagingUserStatusArgs

func MessagingUserStatusPtr(v *MessagingUserStatusArgs) MessagingUserStatusPtrInput {
	return (*messagingUserStatusPtrType)(v)
}

func (*messagingUserStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MessagingUserStatus)(nil)).Elem()
}

func (i *messagingUserStatusPtrType) ToMessagingUserStatusPtrOutput() MessagingUserStatusPtrOutput {
	return i.ToMessagingUserStatusPtrOutputWithContext(context.Background())
}

func (i *messagingUserStatusPtrType) ToMessagingUserStatusPtrOutputWithContext(ctx context.Context) MessagingUserStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessagingUserStatusPtrOutput)
}

type MessagingUserStatusOutput struct{ *pulumi.OutputState }

func (MessagingUserStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MessagingUserStatus)(nil)).Elem()
}

func (o MessagingUserStatusOutput) ToMessagingUserStatusOutput() MessagingUserStatusOutput {
	return o
}

func (o MessagingUserStatusOutput) ToMessagingUserStatusOutputWithContext(ctx context.Context) MessagingUserStatusOutput {
	return o
}

func (o MessagingUserStatusOutput) ToMessagingUserStatusPtrOutput() MessagingUserStatusPtrOutput {
	return o.ToMessagingUserStatusPtrOutputWithContext(context.Background())
}

func (o MessagingUserStatusOutput) ToMessagingUserStatusPtrOutputWithContext(ctx context.Context) MessagingUserStatusPtrOutput {
	return o.ApplyT(func(v MessagingUserStatus) *MessagingUserStatus {
		return &v
	}).(MessagingUserStatusPtrOutput)
}

// Applied generation
func (o MessagingUserStatusOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MessagingUserStatus) *int { return v.Generation }).(pulumi.IntPtrOutput)
}

// Message describing the current state
func (o MessagingUserStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MessagingUserStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The lifecycle phase of the messaging user
func (o MessagingUserStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MessagingUserStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type MessagingUserStatusPtrOutput struct{ *pulumi.OutputState }

func (MessagingUserStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MessagingUserStatus)(nil)).Elem()
}

func (o MessagingUserStatusPtrOutput) ToMessagingUserStatusPtrOutput() MessagingUserStatusPtrOutput {
	return o
}

func (o MessagingUserStatusPtrOutput) ToMessagingUserStatusPtrOutputWithContext(ctx context.Context) MessagingUserStatusPtrOutput {
	return o
}

func (o MessagingUserStatusPtrOutput) Elem() MessagingUserStatusOutput {
	return o.ApplyT(func(v *MessagingUserStatus) MessagingUserStatus { return *v }).(MessagingUserStatusOutput)
}

// Applied generation
func (o MessagingUserStatusPtrOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MessagingUserStatus) *int {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.IntPtrOutput)
}

// Message describing the current state
func (o MessagingUserStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessagingUserStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// The lifecycle phase of the messaging user
func (o MessagingUserStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessagingUserStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(MessagingUserTypeOutput{})
	pulumi.RegisterOutputType(MessagingUserSpecOutput{})
	pulumi.RegisterOutputType(MessagingUserSpecPtrOutput{})
	pulumi.RegisterOutputType(MessagingUserSpecAuthenticationOutput{})
	pulumi.RegisterOutputType(MessagingUserSpecAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(MessagingUserSpecAuthorizationOutput{})
	pulumi.RegisterOutputType(MessagingUserSpecAuthorizationArrayOutput{})
	pulumi.RegisterOutputType(MessagingUserStatusOutput{})
	pulumi.RegisterOutputType(MessagingUserStatusPtrOutput{})
}

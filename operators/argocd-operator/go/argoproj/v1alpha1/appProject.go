// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// AppProject provides a logical grouping of applications, providing controls for: * where the apps may deploy to (cluster whitelist) * what may be deployed (repository whitelist, resource whitelist/blacklist) * who can access these applications (roles, OIDC group claims bindings) * and what they can do (RBAC policies) * automation access to these roles (JWT tokens)
type AppProject struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput  `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput  `pulumi:"kind"`
	Metadata   metav1.ObjectMetaOutput `pulumi:"metadata"`
	// AppProjectSpec is the specification of an AppProject
	Spec AppProjectSpecOutput `pulumi:"spec"`
}

// NewAppProject registers a new resource with the given unique name, arguments, and options.
func NewAppProject(ctx *pulumi.Context,
	name string, args *AppProjectArgs, opts ...pulumi.ResourceOption) (*AppProject, error) {
	if args == nil {
		args = &AppProjectArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("AppProject")
	var resource AppProject
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:AppProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppProject gets an existing AppProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppProjectState, opts ...pulumi.ResourceOption) (*AppProject, error) {
	var resource AppProject
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:AppProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppProject resources.
type appProjectState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// AppProjectSpec is the specification of an AppProject
	Spec *AppProjectSpec `pulumi:"spec"`
}

type AppProjectState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// AppProjectSpec is the specification of an AppProject
	Spec AppProjectSpecPtrInput
}

func (AppProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*appProjectState)(nil)).Elem()
}

type appProjectArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// AppProjectSpec is the specification of an AppProject
	Spec *AppProjectSpec `pulumi:"spec"`
}

// The set of arguments for constructing a AppProject resource.
type AppProjectArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// AppProjectSpec is the specification of an AppProject
	Spec AppProjectSpecPtrInput
}

func (AppProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appProjectArgs)(nil)).Elem()
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ArgoCD is the Schema for the argocds API
type ArgoCD struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// ArgoCDSpec defines the desired state of ArgoCD
	Spec ArgoCDSpecPtrOutput `pulumi:"spec"`
	// ArgoCDStatus defines the observed state of ArgoCD
	Status ArgoCDStatusPtrOutput `pulumi:"status"`
}

// NewArgoCD registers a new resource with the given unique name, arguments, and options.
func NewArgoCD(ctx *pulumi.Context,
	name string, args *ArgoCDArgs, opts ...pulumi.ResourceOption) (*ArgoCD, error) {
	if args == nil {
		args = &ArgoCDArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ArgoCD")
	var resource ArgoCD
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:ArgoCD", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArgoCD gets an existing ArgoCD resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArgoCD(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArgoCDState, opts ...pulumi.ResourceOption) (*ArgoCD, error) {
	var resource ArgoCD
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:ArgoCD", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ArgoCD resources.
type argoCDState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ArgoCDSpec defines the desired state of ArgoCD
	Spec *ArgoCDSpec `pulumi:"spec"`
	// ArgoCDStatus defines the observed state of ArgoCD
	Status *ArgoCDStatus `pulumi:"status"`
}

type ArgoCDState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ArgoCDSpec defines the desired state of ArgoCD
	Spec ArgoCDSpecPtrInput
	// ArgoCDStatus defines the observed state of ArgoCD
	Status ArgoCDStatusPtrInput
}

func (ArgoCDState) ElementType() reflect.Type {
	return reflect.TypeOf((*argoCDState)(nil)).Elem()
}

type argoCDArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ArgoCDSpec defines the desired state of ArgoCD
	Spec *ArgoCDSpec `pulumi:"spec"`
	// ArgoCDStatus defines the observed state of ArgoCD
	Status *ArgoCDStatus `pulumi:"status"`
}

// The set of arguments for constructing a ArgoCD resource.
type ArgoCDArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ArgoCDSpec defines the desired state of ArgoCD
	Spec ArgoCDSpecPtrInput
	// ArgoCDStatus defines the observed state of ArgoCD
	Status ArgoCDStatusPtrInput
}

func (ArgoCDArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*argoCDArgs)(nil)).Elem()
}

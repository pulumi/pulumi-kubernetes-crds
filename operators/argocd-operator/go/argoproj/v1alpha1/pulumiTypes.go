// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// AppProject provides a logical grouping of applications, providing controls for: * where the apps may deploy to (cluster whitelist) * what may be deployed (repository whitelist, resource whitelist/blacklist) * who can access these applications (roles, OIDC group claims bindings) * and what they can do (RBAC policies) * automation access to these roles (JWT tokens)
type AppProjectType struct {
	ApiVersion *string           `pulumi:"apiVersion"`
	Kind       *string           `pulumi:"kind"`
	Metadata   metav1.ObjectMeta `pulumi:"metadata"`
	// AppProjectSpec is the specification of an AppProject
	Spec AppProjectSpec `pulumi:"spec"`
}

// AppProjectTypeInput is an input type that accepts AppProjectTypeArgs and AppProjectTypeOutput values.
// You can construct a concrete instance of `AppProjectTypeInput` via:
//
//          AppProjectTypeArgs{...}
type AppProjectTypeInput interface {
	pulumi.Input

	ToAppProjectTypeOutput() AppProjectTypeOutput
	ToAppProjectTypeOutputWithContext(context.Context) AppProjectTypeOutput
}

// AppProject provides a logical grouping of applications, providing controls for: * where the apps may deploy to (cluster whitelist) * what may be deployed (repository whitelist, resource whitelist/blacklist) * who can access these applications (roles, OIDC group claims bindings) * and what they can do (RBAC policies) * automation access to these roles (JWT tokens)
type AppProjectTypeArgs struct {
	ApiVersion pulumi.StringPtrInput  `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput  `pulumi:"kind"`
	Metadata   metav1.ObjectMetaInput `pulumi:"metadata"`
	// AppProjectSpec is the specification of an AppProject
	Spec AppProjectSpecInput `pulumi:"spec"`
}

func (AppProjectTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectType)(nil)).Elem()
}

func (i AppProjectTypeArgs) ToAppProjectTypeOutput() AppProjectTypeOutput {
	return i.ToAppProjectTypeOutputWithContext(context.Background())
}

func (i AppProjectTypeArgs) ToAppProjectTypeOutputWithContext(ctx context.Context) AppProjectTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectTypeOutput)
}

// AppProject provides a logical grouping of applications, providing controls for: * where the apps may deploy to (cluster whitelist) * what may be deployed (repository whitelist, resource whitelist/blacklist) * who can access these applications (roles, OIDC group claims bindings) * and what they can do (RBAC policies) * automation access to these roles (JWT tokens)
type AppProjectTypeOutput struct{ *pulumi.OutputState }

func (AppProjectTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectType)(nil)).Elem()
}

func (o AppProjectTypeOutput) ToAppProjectTypeOutput() AppProjectTypeOutput {
	return o
}

func (o AppProjectTypeOutput) ToAppProjectTypeOutputWithContext(ctx context.Context) AppProjectTypeOutput {
	return o
}

func (o AppProjectTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppProjectType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o AppProjectTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppProjectType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o AppProjectTypeOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v AppProjectType) metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// AppProjectSpec is the specification of an AppProject
func (o AppProjectTypeOutput) Spec() AppProjectSpecOutput {
	return o.ApplyT(func(v AppProjectType) AppProjectSpec { return v.Spec }).(AppProjectSpecOutput)
}

type AppProjectMetadata struct {
}

// AppProjectMetadataInput is an input type that accepts AppProjectMetadataArgs and AppProjectMetadataOutput values.
// You can construct a concrete instance of `AppProjectMetadataInput` via:
//
//          AppProjectMetadataArgs{...}
type AppProjectMetadataInput interface {
	pulumi.Input

	ToAppProjectMetadataOutput() AppProjectMetadataOutput
	ToAppProjectMetadataOutputWithContext(context.Context) AppProjectMetadataOutput
}

type AppProjectMetadataArgs struct {
}

func (AppProjectMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectMetadata)(nil)).Elem()
}

func (i AppProjectMetadataArgs) ToAppProjectMetadataOutput() AppProjectMetadataOutput {
	return i.ToAppProjectMetadataOutputWithContext(context.Background())
}

func (i AppProjectMetadataArgs) ToAppProjectMetadataOutputWithContext(ctx context.Context) AppProjectMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectMetadataOutput)
}

type AppProjectMetadataOutput struct{ *pulumi.OutputState }

func (AppProjectMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectMetadata)(nil)).Elem()
}

func (o AppProjectMetadataOutput) ToAppProjectMetadataOutput() AppProjectMetadataOutput {
	return o
}

func (o AppProjectMetadataOutput) ToAppProjectMetadataOutputWithContext(ctx context.Context) AppProjectMetadataOutput {
	return o
}

// AppProjectSpec is the specification of an AppProject
type AppProjectSpec struct {
	// ClusterResourceBlacklist contains list of blacklisted cluster level resources
	ClusterResourceBlacklist []AppProjectSpecClusterResourceBlacklist `pulumi:"clusterResourceBlacklist"`
	// ClusterResourceWhitelist contains list of whitelisted cluster level resources
	ClusterResourceWhitelist []AppProjectSpecClusterResourceWhitelist `pulumi:"clusterResourceWhitelist"`
	// Description contains optional project description
	Description *string `pulumi:"description"`
	// Destinations contains list of destinations available for deployment
	Destinations []AppProjectSpecDestinations `pulumi:"destinations"`
	// NamespaceResourceBlacklist contains list of blacklisted namespace level resources
	NamespaceResourceBlacklist []AppProjectSpecNamespaceResourceBlacklist `pulumi:"namespaceResourceBlacklist"`
	// NamespaceResourceWhitelist contains list of whitelisted namespace level resources
	NamespaceResourceWhitelist []AppProjectSpecNamespaceResourceWhitelist `pulumi:"namespaceResourceWhitelist"`
	// OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
	OrphanedResources *AppProjectSpecOrphanedResources `pulumi:"orphanedResources"`
	// Roles are user defined RBAC roles associated with this project
	Roles []AppProjectSpecRoles `pulumi:"roles"`
	// List of PGP key IDs that commits to be synced to must be signed with
	SignatureKeys []AppProjectSpecSignatureKeys `pulumi:"signatureKeys"`
	// SourceRepos contains list of repository URLs which can be used for deployment
	SourceRepos []string `pulumi:"sourceRepos"`
	// SyncWindows controls when syncs can be run for apps in this project
	SyncWindows []AppProjectSpecSyncWindows `pulumi:"syncWindows"`
}

// AppProjectSpecInput is an input type that accepts AppProjectSpecArgs and AppProjectSpecOutput values.
// You can construct a concrete instance of `AppProjectSpecInput` via:
//
//          AppProjectSpecArgs{...}
type AppProjectSpecInput interface {
	pulumi.Input

	ToAppProjectSpecOutput() AppProjectSpecOutput
	ToAppProjectSpecOutputWithContext(context.Context) AppProjectSpecOutput
}

// AppProjectSpec is the specification of an AppProject
type AppProjectSpecArgs struct {
	// ClusterResourceBlacklist contains list of blacklisted cluster level resources
	ClusterResourceBlacklist AppProjectSpecClusterResourceBlacklistArrayInput `pulumi:"clusterResourceBlacklist"`
	// ClusterResourceWhitelist contains list of whitelisted cluster level resources
	ClusterResourceWhitelist AppProjectSpecClusterResourceWhitelistArrayInput `pulumi:"clusterResourceWhitelist"`
	// Description contains optional project description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Destinations contains list of destinations available for deployment
	Destinations AppProjectSpecDestinationsArrayInput `pulumi:"destinations"`
	// NamespaceResourceBlacklist contains list of blacklisted namespace level resources
	NamespaceResourceBlacklist AppProjectSpecNamespaceResourceBlacklistArrayInput `pulumi:"namespaceResourceBlacklist"`
	// NamespaceResourceWhitelist contains list of whitelisted namespace level resources
	NamespaceResourceWhitelist AppProjectSpecNamespaceResourceWhitelistArrayInput `pulumi:"namespaceResourceWhitelist"`
	// OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
	OrphanedResources AppProjectSpecOrphanedResourcesPtrInput `pulumi:"orphanedResources"`
	// Roles are user defined RBAC roles associated with this project
	Roles AppProjectSpecRolesArrayInput `pulumi:"roles"`
	// List of PGP key IDs that commits to be synced to must be signed with
	SignatureKeys AppProjectSpecSignatureKeysArrayInput `pulumi:"signatureKeys"`
	// SourceRepos contains list of repository URLs which can be used for deployment
	SourceRepos pulumi.StringArrayInput `pulumi:"sourceRepos"`
	// SyncWindows controls when syncs can be run for apps in this project
	SyncWindows AppProjectSpecSyncWindowsArrayInput `pulumi:"syncWindows"`
}

func (AppProjectSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpec)(nil)).Elem()
}

func (i AppProjectSpecArgs) ToAppProjectSpecOutput() AppProjectSpecOutput {
	return i.ToAppProjectSpecOutputWithContext(context.Background())
}

func (i AppProjectSpecArgs) ToAppProjectSpecOutputWithContext(ctx context.Context) AppProjectSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecOutput)
}

func (i AppProjectSpecArgs) ToAppProjectSpecPtrOutput() AppProjectSpecPtrOutput {
	return i.ToAppProjectSpecPtrOutputWithContext(context.Background())
}

func (i AppProjectSpecArgs) ToAppProjectSpecPtrOutputWithContext(ctx context.Context) AppProjectSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecOutput).ToAppProjectSpecPtrOutputWithContext(ctx)
}

// AppProjectSpecPtrInput is an input type that accepts AppProjectSpecArgs, AppProjectSpecPtr and AppProjectSpecPtrOutput values.
// You can construct a concrete instance of `AppProjectSpecPtrInput` via:
//
//          AppProjectSpecArgs{...}
//
//  or:
//
//          nil
type AppProjectSpecPtrInput interface {
	pulumi.Input

	ToAppProjectSpecPtrOutput() AppProjectSpecPtrOutput
	ToAppProjectSpecPtrOutputWithContext(context.Context) AppProjectSpecPtrOutput
}

type appProjectSpecPtrType AppProjectSpecArgs

func AppProjectSpecPtr(v *AppProjectSpecArgs) AppProjectSpecPtrInput {
	return (*appProjectSpecPtrType)(v)
}

func (*appProjectSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProjectSpec)(nil)).Elem()
}

func (i *appProjectSpecPtrType) ToAppProjectSpecPtrOutput() AppProjectSpecPtrOutput {
	return i.ToAppProjectSpecPtrOutputWithContext(context.Background())
}

func (i *appProjectSpecPtrType) ToAppProjectSpecPtrOutputWithContext(ctx context.Context) AppProjectSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecPtrOutput)
}

// AppProjectSpec is the specification of an AppProject
type AppProjectSpecOutput struct{ *pulumi.OutputState }

func (AppProjectSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpec)(nil)).Elem()
}

func (o AppProjectSpecOutput) ToAppProjectSpecOutput() AppProjectSpecOutput {
	return o
}

func (o AppProjectSpecOutput) ToAppProjectSpecOutputWithContext(ctx context.Context) AppProjectSpecOutput {
	return o
}

func (o AppProjectSpecOutput) ToAppProjectSpecPtrOutput() AppProjectSpecPtrOutput {
	return o.ToAppProjectSpecPtrOutputWithContext(context.Background())
}

func (o AppProjectSpecOutput) ToAppProjectSpecPtrOutputWithContext(ctx context.Context) AppProjectSpecPtrOutput {
	return o.ApplyT(func(v AppProjectSpec) *AppProjectSpec {
		return &v
	}).(AppProjectSpecPtrOutput)
}

// ClusterResourceBlacklist contains list of blacklisted cluster level resources
func (o AppProjectSpecOutput) ClusterResourceBlacklist() AppProjectSpecClusterResourceBlacklistArrayOutput {
	return o.ApplyT(func(v AppProjectSpec) []AppProjectSpecClusterResourceBlacklist { return v.ClusterResourceBlacklist }).(AppProjectSpecClusterResourceBlacklistArrayOutput)
}

// ClusterResourceWhitelist contains list of whitelisted cluster level resources
func (o AppProjectSpecOutput) ClusterResourceWhitelist() AppProjectSpecClusterResourceWhitelistArrayOutput {
	return o.ApplyT(func(v AppProjectSpec) []AppProjectSpecClusterResourceWhitelist { return v.ClusterResourceWhitelist }).(AppProjectSpecClusterResourceWhitelistArrayOutput)
}

// Description contains optional project description
func (o AppProjectSpecOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppProjectSpec) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Destinations contains list of destinations available for deployment
func (o AppProjectSpecOutput) Destinations() AppProjectSpecDestinationsArrayOutput {
	return o.ApplyT(func(v AppProjectSpec) []AppProjectSpecDestinations { return v.Destinations }).(AppProjectSpecDestinationsArrayOutput)
}

// NamespaceResourceBlacklist contains list of blacklisted namespace level resources
func (o AppProjectSpecOutput) NamespaceResourceBlacklist() AppProjectSpecNamespaceResourceBlacklistArrayOutput {
	return o.ApplyT(func(v AppProjectSpec) []AppProjectSpecNamespaceResourceBlacklist { return v.NamespaceResourceBlacklist }).(AppProjectSpecNamespaceResourceBlacklistArrayOutput)
}

// NamespaceResourceWhitelist contains list of whitelisted namespace level resources
func (o AppProjectSpecOutput) NamespaceResourceWhitelist() AppProjectSpecNamespaceResourceWhitelistArrayOutput {
	return o.ApplyT(func(v AppProjectSpec) []AppProjectSpecNamespaceResourceWhitelist { return v.NamespaceResourceWhitelist }).(AppProjectSpecNamespaceResourceWhitelistArrayOutput)
}

// OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
func (o AppProjectSpecOutput) OrphanedResources() AppProjectSpecOrphanedResourcesPtrOutput {
	return o.ApplyT(func(v AppProjectSpec) *AppProjectSpecOrphanedResources { return v.OrphanedResources }).(AppProjectSpecOrphanedResourcesPtrOutput)
}

// Roles are user defined RBAC roles associated with this project
func (o AppProjectSpecOutput) Roles() AppProjectSpecRolesArrayOutput {
	return o.ApplyT(func(v AppProjectSpec) []AppProjectSpecRoles { return v.Roles }).(AppProjectSpecRolesArrayOutput)
}

// List of PGP key IDs that commits to be synced to must be signed with
func (o AppProjectSpecOutput) SignatureKeys() AppProjectSpecSignatureKeysArrayOutput {
	return o.ApplyT(func(v AppProjectSpec) []AppProjectSpecSignatureKeys { return v.SignatureKeys }).(AppProjectSpecSignatureKeysArrayOutput)
}

// SourceRepos contains list of repository URLs which can be used for deployment
func (o AppProjectSpecOutput) SourceRepos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AppProjectSpec) []string { return v.SourceRepos }).(pulumi.StringArrayOutput)
}

// SyncWindows controls when syncs can be run for apps in this project
func (o AppProjectSpecOutput) SyncWindows() AppProjectSpecSyncWindowsArrayOutput {
	return o.ApplyT(func(v AppProjectSpec) []AppProjectSpecSyncWindows { return v.SyncWindows }).(AppProjectSpecSyncWindowsArrayOutput)
}

type AppProjectSpecPtrOutput struct{ *pulumi.OutputState }

func (AppProjectSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProjectSpec)(nil)).Elem()
}

func (o AppProjectSpecPtrOutput) ToAppProjectSpecPtrOutput() AppProjectSpecPtrOutput {
	return o
}

func (o AppProjectSpecPtrOutput) ToAppProjectSpecPtrOutputWithContext(ctx context.Context) AppProjectSpecPtrOutput {
	return o
}

func (o AppProjectSpecPtrOutput) Elem() AppProjectSpecOutput {
	return o.ApplyT(func(v *AppProjectSpec) AppProjectSpec { return *v }).(AppProjectSpecOutput)
}

// ClusterResourceBlacklist contains list of blacklisted cluster level resources
func (o AppProjectSpecPtrOutput) ClusterResourceBlacklist() AppProjectSpecClusterResourceBlacklistArrayOutput {
	return o.ApplyT(func(v *AppProjectSpec) []AppProjectSpecClusterResourceBlacklist {
		if v == nil {
			return nil
		}
		return v.ClusterResourceBlacklist
	}).(AppProjectSpecClusterResourceBlacklistArrayOutput)
}

// ClusterResourceWhitelist contains list of whitelisted cluster level resources
func (o AppProjectSpecPtrOutput) ClusterResourceWhitelist() AppProjectSpecClusterResourceWhitelistArrayOutput {
	return o.ApplyT(func(v *AppProjectSpec) []AppProjectSpecClusterResourceWhitelist {
		if v == nil {
			return nil
		}
		return v.ClusterResourceWhitelist
	}).(AppProjectSpecClusterResourceWhitelistArrayOutput)
}

// Description contains optional project description
func (o AppProjectSpecPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppProjectSpec) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Destinations contains list of destinations available for deployment
func (o AppProjectSpecPtrOutput) Destinations() AppProjectSpecDestinationsArrayOutput {
	return o.ApplyT(func(v *AppProjectSpec) []AppProjectSpecDestinations {
		if v == nil {
			return nil
		}
		return v.Destinations
	}).(AppProjectSpecDestinationsArrayOutput)
}

// NamespaceResourceBlacklist contains list of blacklisted namespace level resources
func (o AppProjectSpecPtrOutput) NamespaceResourceBlacklist() AppProjectSpecNamespaceResourceBlacklistArrayOutput {
	return o.ApplyT(func(v *AppProjectSpec) []AppProjectSpecNamespaceResourceBlacklist {
		if v == nil {
			return nil
		}
		return v.NamespaceResourceBlacklist
	}).(AppProjectSpecNamespaceResourceBlacklistArrayOutput)
}

// NamespaceResourceWhitelist contains list of whitelisted namespace level resources
func (o AppProjectSpecPtrOutput) NamespaceResourceWhitelist() AppProjectSpecNamespaceResourceWhitelistArrayOutput {
	return o.ApplyT(func(v *AppProjectSpec) []AppProjectSpecNamespaceResourceWhitelist {
		if v == nil {
			return nil
		}
		return v.NamespaceResourceWhitelist
	}).(AppProjectSpecNamespaceResourceWhitelistArrayOutput)
}

// OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
func (o AppProjectSpecPtrOutput) OrphanedResources() AppProjectSpecOrphanedResourcesPtrOutput {
	return o.ApplyT(func(v *AppProjectSpec) *AppProjectSpecOrphanedResources {
		if v == nil {
			return nil
		}
		return v.OrphanedResources
	}).(AppProjectSpecOrphanedResourcesPtrOutput)
}

// Roles are user defined RBAC roles associated with this project
func (o AppProjectSpecPtrOutput) Roles() AppProjectSpecRolesArrayOutput {
	return o.ApplyT(func(v *AppProjectSpec) []AppProjectSpecRoles {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(AppProjectSpecRolesArrayOutput)
}

// List of PGP key IDs that commits to be synced to must be signed with
func (o AppProjectSpecPtrOutput) SignatureKeys() AppProjectSpecSignatureKeysArrayOutput {
	return o.ApplyT(func(v *AppProjectSpec) []AppProjectSpecSignatureKeys {
		if v == nil {
			return nil
		}
		return v.SignatureKeys
	}).(AppProjectSpecSignatureKeysArrayOutput)
}

// SourceRepos contains list of repository URLs which can be used for deployment
func (o AppProjectSpecPtrOutput) SourceRepos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppProjectSpec) []string {
		if v == nil {
			return nil
		}
		return v.SourceRepos
	}).(pulumi.StringArrayOutput)
}

// SyncWindows controls when syncs can be run for apps in this project
func (o AppProjectSpecPtrOutput) SyncWindows() AppProjectSpecSyncWindowsArrayOutput {
	return o.ApplyT(func(v *AppProjectSpec) []AppProjectSpecSyncWindows {
		if v == nil {
			return nil
		}
		return v.SyncWindows
	}).(AppProjectSpecSyncWindowsArrayOutput)
}

// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
type AppProjectSpecClusterResourceBlacklist struct {
	Group string `pulumi:"group"`
	Kind  string `pulumi:"kind"`
}

// AppProjectSpecClusterResourceBlacklistInput is an input type that accepts AppProjectSpecClusterResourceBlacklistArgs and AppProjectSpecClusterResourceBlacklistOutput values.
// You can construct a concrete instance of `AppProjectSpecClusterResourceBlacklistInput` via:
//
//          AppProjectSpecClusterResourceBlacklistArgs{...}
type AppProjectSpecClusterResourceBlacklistInput interface {
	pulumi.Input

	ToAppProjectSpecClusterResourceBlacklistOutput() AppProjectSpecClusterResourceBlacklistOutput
	ToAppProjectSpecClusterResourceBlacklistOutputWithContext(context.Context) AppProjectSpecClusterResourceBlacklistOutput
}

// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
type AppProjectSpecClusterResourceBlacklistArgs struct {
	Group pulumi.StringInput `pulumi:"group"`
	Kind  pulumi.StringInput `pulumi:"kind"`
}

func (AppProjectSpecClusterResourceBlacklistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecClusterResourceBlacklist)(nil)).Elem()
}

func (i AppProjectSpecClusterResourceBlacklistArgs) ToAppProjectSpecClusterResourceBlacklistOutput() AppProjectSpecClusterResourceBlacklistOutput {
	return i.ToAppProjectSpecClusterResourceBlacklistOutputWithContext(context.Background())
}

func (i AppProjectSpecClusterResourceBlacklistArgs) ToAppProjectSpecClusterResourceBlacklistOutputWithContext(ctx context.Context) AppProjectSpecClusterResourceBlacklistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecClusterResourceBlacklistOutput)
}

// AppProjectSpecClusterResourceBlacklistArrayInput is an input type that accepts AppProjectSpecClusterResourceBlacklistArray and AppProjectSpecClusterResourceBlacklistArrayOutput values.
// You can construct a concrete instance of `AppProjectSpecClusterResourceBlacklistArrayInput` via:
//
//          AppProjectSpecClusterResourceBlacklistArray{ AppProjectSpecClusterResourceBlacklistArgs{...} }
type AppProjectSpecClusterResourceBlacklistArrayInput interface {
	pulumi.Input

	ToAppProjectSpecClusterResourceBlacklistArrayOutput() AppProjectSpecClusterResourceBlacklistArrayOutput
	ToAppProjectSpecClusterResourceBlacklistArrayOutputWithContext(context.Context) AppProjectSpecClusterResourceBlacklistArrayOutput
}

type AppProjectSpecClusterResourceBlacklistArray []AppProjectSpecClusterResourceBlacklistInput

func (AppProjectSpecClusterResourceBlacklistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecClusterResourceBlacklist)(nil)).Elem()
}

func (i AppProjectSpecClusterResourceBlacklistArray) ToAppProjectSpecClusterResourceBlacklistArrayOutput() AppProjectSpecClusterResourceBlacklistArrayOutput {
	return i.ToAppProjectSpecClusterResourceBlacklistArrayOutputWithContext(context.Background())
}

func (i AppProjectSpecClusterResourceBlacklistArray) ToAppProjectSpecClusterResourceBlacklistArrayOutputWithContext(ctx context.Context) AppProjectSpecClusterResourceBlacklistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecClusterResourceBlacklistArrayOutput)
}

// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
type AppProjectSpecClusterResourceBlacklistOutput struct{ *pulumi.OutputState }

func (AppProjectSpecClusterResourceBlacklistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecClusterResourceBlacklist)(nil)).Elem()
}

func (o AppProjectSpecClusterResourceBlacklistOutput) ToAppProjectSpecClusterResourceBlacklistOutput() AppProjectSpecClusterResourceBlacklistOutput {
	return o
}

func (o AppProjectSpecClusterResourceBlacklistOutput) ToAppProjectSpecClusterResourceBlacklistOutputWithContext(ctx context.Context) AppProjectSpecClusterResourceBlacklistOutput {
	return o
}

func (o AppProjectSpecClusterResourceBlacklistOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v AppProjectSpecClusterResourceBlacklist) string { return v.Group }).(pulumi.StringOutput)
}

func (o AppProjectSpecClusterResourceBlacklistOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v AppProjectSpecClusterResourceBlacklist) string { return v.Kind }).(pulumi.StringOutput)
}

type AppProjectSpecClusterResourceBlacklistArrayOutput struct{ *pulumi.OutputState }

func (AppProjectSpecClusterResourceBlacklistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecClusterResourceBlacklist)(nil)).Elem()
}

func (o AppProjectSpecClusterResourceBlacklistArrayOutput) ToAppProjectSpecClusterResourceBlacklistArrayOutput() AppProjectSpecClusterResourceBlacklistArrayOutput {
	return o
}

func (o AppProjectSpecClusterResourceBlacklistArrayOutput) ToAppProjectSpecClusterResourceBlacklistArrayOutputWithContext(ctx context.Context) AppProjectSpecClusterResourceBlacklistArrayOutput {
	return o
}

func (o AppProjectSpecClusterResourceBlacklistArrayOutput) Index(i pulumi.IntInput) AppProjectSpecClusterResourceBlacklistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppProjectSpecClusterResourceBlacklist {
		return vs[0].([]AppProjectSpecClusterResourceBlacklist)[vs[1].(int)]
	}).(AppProjectSpecClusterResourceBlacklistOutput)
}

// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
type AppProjectSpecClusterResourceWhitelist struct {
	Group string `pulumi:"group"`
	Kind  string `pulumi:"kind"`
}

// AppProjectSpecClusterResourceWhitelistInput is an input type that accepts AppProjectSpecClusterResourceWhitelistArgs and AppProjectSpecClusterResourceWhitelistOutput values.
// You can construct a concrete instance of `AppProjectSpecClusterResourceWhitelistInput` via:
//
//          AppProjectSpecClusterResourceWhitelistArgs{...}
type AppProjectSpecClusterResourceWhitelistInput interface {
	pulumi.Input

	ToAppProjectSpecClusterResourceWhitelistOutput() AppProjectSpecClusterResourceWhitelistOutput
	ToAppProjectSpecClusterResourceWhitelistOutputWithContext(context.Context) AppProjectSpecClusterResourceWhitelistOutput
}

// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
type AppProjectSpecClusterResourceWhitelistArgs struct {
	Group pulumi.StringInput `pulumi:"group"`
	Kind  pulumi.StringInput `pulumi:"kind"`
}

func (AppProjectSpecClusterResourceWhitelistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecClusterResourceWhitelist)(nil)).Elem()
}

func (i AppProjectSpecClusterResourceWhitelistArgs) ToAppProjectSpecClusterResourceWhitelistOutput() AppProjectSpecClusterResourceWhitelistOutput {
	return i.ToAppProjectSpecClusterResourceWhitelistOutputWithContext(context.Background())
}

func (i AppProjectSpecClusterResourceWhitelistArgs) ToAppProjectSpecClusterResourceWhitelistOutputWithContext(ctx context.Context) AppProjectSpecClusterResourceWhitelistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecClusterResourceWhitelistOutput)
}

// AppProjectSpecClusterResourceWhitelistArrayInput is an input type that accepts AppProjectSpecClusterResourceWhitelistArray and AppProjectSpecClusterResourceWhitelistArrayOutput values.
// You can construct a concrete instance of `AppProjectSpecClusterResourceWhitelistArrayInput` via:
//
//          AppProjectSpecClusterResourceWhitelistArray{ AppProjectSpecClusterResourceWhitelistArgs{...} }
type AppProjectSpecClusterResourceWhitelistArrayInput interface {
	pulumi.Input

	ToAppProjectSpecClusterResourceWhitelistArrayOutput() AppProjectSpecClusterResourceWhitelistArrayOutput
	ToAppProjectSpecClusterResourceWhitelistArrayOutputWithContext(context.Context) AppProjectSpecClusterResourceWhitelistArrayOutput
}

type AppProjectSpecClusterResourceWhitelistArray []AppProjectSpecClusterResourceWhitelistInput

func (AppProjectSpecClusterResourceWhitelistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecClusterResourceWhitelist)(nil)).Elem()
}

func (i AppProjectSpecClusterResourceWhitelistArray) ToAppProjectSpecClusterResourceWhitelistArrayOutput() AppProjectSpecClusterResourceWhitelistArrayOutput {
	return i.ToAppProjectSpecClusterResourceWhitelistArrayOutputWithContext(context.Background())
}

func (i AppProjectSpecClusterResourceWhitelistArray) ToAppProjectSpecClusterResourceWhitelistArrayOutputWithContext(ctx context.Context) AppProjectSpecClusterResourceWhitelistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecClusterResourceWhitelistArrayOutput)
}

// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
type AppProjectSpecClusterResourceWhitelistOutput struct{ *pulumi.OutputState }

func (AppProjectSpecClusterResourceWhitelistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecClusterResourceWhitelist)(nil)).Elem()
}

func (o AppProjectSpecClusterResourceWhitelistOutput) ToAppProjectSpecClusterResourceWhitelistOutput() AppProjectSpecClusterResourceWhitelistOutput {
	return o
}

func (o AppProjectSpecClusterResourceWhitelistOutput) ToAppProjectSpecClusterResourceWhitelistOutputWithContext(ctx context.Context) AppProjectSpecClusterResourceWhitelistOutput {
	return o
}

func (o AppProjectSpecClusterResourceWhitelistOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v AppProjectSpecClusterResourceWhitelist) string { return v.Group }).(pulumi.StringOutput)
}

func (o AppProjectSpecClusterResourceWhitelistOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v AppProjectSpecClusterResourceWhitelist) string { return v.Kind }).(pulumi.StringOutput)
}

type AppProjectSpecClusterResourceWhitelistArrayOutput struct{ *pulumi.OutputState }

func (AppProjectSpecClusterResourceWhitelistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecClusterResourceWhitelist)(nil)).Elem()
}

func (o AppProjectSpecClusterResourceWhitelistArrayOutput) ToAppProjectSpecClusterResourceWhitelistArrayOutput() AppProjectSpecClusterResourceWhitelistArrayOutput {
	return o
}

func (o AppProjectSpecClusterResourceWhitelistArrayOutput) ToAppProjectSpecClusterResourceWhitelistArrayOutputWithContext(ctx context.Context) AppProjectSpecClusterResourceWhitelistArrayOutput {
	return o
}

func (o AppProjectSpecClusterResourceWhitelistArrayOutput) Index(i pulumi.IntInput) AppProjectSpecClusterResourceWhitelistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppProjectSpecClusterResourceWhitelist {
		return vs[0].([]AppProjectSpecClusterResourceWhitelist)[vs[1].(int)]
	}).(AppProjectSpecClusterResourceWhitelistOutput)
}

// ApplicationDestination contains deployment destination information
type AppProjectSpecDestinations struct {
	// Name of the destination cluster which can be used instead of server (url) field
	Name *string `pulumi:"name"`
	// Namespace overrides the environment namespace value in the ksonnet app.yaml
	Namespace *string `pulumi:"namespace"`
	// Server overrides the environment server value in the ksonnet app.yaml
	Server *string `pulumi:"server"`
}

// AppProjectSpecDestinationsInput is an input type that accepts AppProjectSpecDestinationsArgs and AppProjectSpecDestinationsOutput values.
// You can construct a concrete instance of `AppProjectSpecDestinationsInput` via:
//
//          AppProjectSpecDestinationsArgs{...}
type AppProjectSpecDestinationsInput interface {
	pulumi.Input

	ToAppProjectSpecDestinationsOutput() AppProjectSpecDestinationsOutput
	ToAppProjectSpecDestinationsOutputWithContext(context.Context) AppProjectSpecDestinationsOutput
}

// ApplicationDestination contains deployment destination information
type AppProjectSpecDestinationsArgs struct {
	// Name of the destination cluster which can be used instead of server (url) field
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace overrides the environment namespace value in the ksonnet app.yaml
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Server overrides the environment server value in the ksonnet app.yaml
	Server pulumi.StringPtrInput `pulumi:"server"`
}

func (AppProjectSpecDestinationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecDestinations)(nil)).Elem()
}

func (i AppProjectSpecDestinationsArgs) ToAppProjectSpecDestinationsOutput() AppProjectSpecDestinationsOutput {
	return i.ToAppProjectSpecDestinationsOutputWithContext(context.Background())
}

func (i AppProjectSpecDestinationsArgs) ToAppProjectSpecDestinationsOutputWithContext(ctx context.Context) AppProjectSpecDestinationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecDestinationsOutput)
}

// AppProjectSpecDestinationsArrayInput is an input type that accepts AppProjectSpecDestinationsArray and AppProjectSpecDestinationsArrayOutput values.
// You can construct a concrete instance of `AppProjectSpecDestinationsArrayInput` via:
//
//          AppProjectSpecDestinationsArray{ AppProjectSpecDestinationsArgs{...} }
type AppProjectSpecDestinationsArrayInput interface {
	pulumi.Input

	ToAppProjectSpecDestinationsArrayOutput() AppProjectSpecDestinationsArrayOutput
	ToAppProjectSpecDestinationsArrayOutputWithContext(context.Context) AppProjectSpecDestinationsArrayOutput
}

type AppProjectSpecDestinationsArray []AppProjectSpecDestinationsInput

func (AppProjectSpecDestinationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecDestinations)(nil)).Elem()
}

func (i AppProjectSpecDestinationsArray) ToAppProjectSpecDestinationsArrayOutput() AppProjectSpecDestinationsArrayOutput {
	return i.ToAppProjectSpecDestinationsArrayOutputWithContext(context.Background())
}

func (i AppProjectSpecDestinationsArray) ToAppProjectSpecDestinationsArrayOutputWithContext(ctx context.Context) AppProjectSpecDestinationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecDestinationsArrayOutput)
}

// ApplicationDestination contains deployment destination information
type AppProjectSpecDestinationsOutput struct{ *pulumi.OutputState }

func (AppProjectSpecDestinationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecDestinations)(nil)).Elem()
}

func (o AppProjectSpecDestinationsOutput) ToAppProjectSpecDestinationsOutput() AppProjectSpecDestinationsOutput {
	return o
}

func (o AppProjectSpecDestinationsOutput) ToAppProjectSpecDestinationsOutputWithContext(ctx context.Context) AppProjectSpecDestinationsOutput {
	return o
}

// Name of the destination cluster which can be used instead of server (url) field
func (o AppProjectSpecDestinationsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppProjectSpecDestinations) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace overrides the environment namespace value in the ksonnet app.yaml
func (o AppProjectSpecDestinationsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppProjectSpecDestinations) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Server overrides the environment server value in the ksonnet app.yaml
func (o AppProjectSpecDestinationsOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppProjectSpecDestinations) *string { return v.Server }).(pulumi.StringPtrOutput)
}

type AppProjectSpecDestinationsArrayOutput struct{ *pulumi.OutputState }

func (AppProjectSpecDestinationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecDestinations)(nil)).Elem()
}

func (o AppProjectSpecDestinationsArrayOutput) ToAppProjectSpecDestinationsArrayOutput() AppProjectSpecDestinationsArrayOutput {
	return o
}

func (o AppProjectSpecDestinationsArrayOutput) ToAppProjectSpecDestinationsArrayOutputWithContext(ctx context.Context) AppProjectSpecDestinationsArrayOutput {
	return o
}

func (o AppProjectSpecDestinationsArrayOutput) Index(i pulumi.IntInput) AppProjectSpecDestinationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppProjectSpecDestinations {
		return vs[0].([]AppProjectSpecDestinations)[vs[1].(int)]
	}).(AppProjectSpecDestinationsOutput)
}

// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
type AppProjectSpecNamespaceResourceBlacklist struct {
	Group string `pulumi:"group"`
	Kind  string `pulumi:"kind"`
}

// AppProjectSpecNamespaceResourceBlacklistInput is an input type that accepts AppProjectSpecNamespaceResourceBlacklistArgs and AppProjectSpecNamespaceResourceBlacklistOutput values.
// You can construct a concrete instance of `AppProjectSpecNamespaceResourceBlacklistInput` via:
//
//          AppProjectSpecNamespaceResourceBlacklistArgs{...}
type AppProjectSpecNamespaceResourceBlacklistInput interface {
	pulumi.Input

	ToAppProjectSpecNamespaceResourceBlacklistOutput() AppProjectSpecNamespaceResourceBlacklistOutput
	ToAppProjectSpecNamespaceResourceBlacklistOutputWithContext(context.Context) AppProjectSpecNamespaceResourceBlacklistOutput
}

// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
type AppProjectSpecNamespaceResourceBlacklistArgs struct {
	Group pulumi.StringInput `pulumi:"group"`
	Kind  pulumi.StringInput `pulumi:"kind"`
}

func (AppProjectSpecNamespaceResourceBlacklistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecNamespaceResourceBlacklist)(nil)).Elem()
}

func (i AppProjectSpecNamespaceResourceBlacklistArgs) ToAppProjectSpecNamespaceResourceBlacklistOutput() AppProjectSpecNamespaceResourceBlacklistOutput {
	return i.ToAppProjectSpecNamespaceResourceBlacklistOutputWithContext(context.Background())
}

func (i AppProjectSpecNamespaceResourceBlacklistArgs) ToAppProjectSpecNamespaceResourceBlacklistOutputWithContext(ctx context.Context) AppProjectSpecNamespaceResourceBlacklistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecNamespaceResourceBlacklistOutput)
}

// AppProjectSpecNamespaceResourceBlacklistArrayInput is an input type that accepts AppProjectSpecNamespaceResourceBlacklistArray and AppProjectSpecNamespaceResourceBlacklistArrayOutput values.
// You can construct a concrete instance of `AppProjectSpecNamespaceResourceBlacklistArrayInput` via:
//
//          AppProjectSpecNamespaceResourceBlacklistArray{ AppProjectSpecNamespaceResourceBlacklistArgs{...} }
type AppProjectSpecNamespaceResourceBlacklistArrayInput interface {
	pulumi.Input

	ToAppProjectSpecNamespaceResourceBlacklistArrayOutput() AppProjectSpecNamespaceResourceBlacklistArrayOutput
	ToAppProjectSpecNamespaceResourceBlacklistArrayOutputWithContext(context.Context) AppProjectSpecNamespaceResourceBlacklistArrayOutput
}

type AppProjectSpecNamespaceResourceBlacklistArray []AppProjectSpecNamespaceResourceBlacklistInput

func (AppProjectSpecNamespaceResourceBlacklistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecNamespaceResourceBlacklist)(nil)).Elem()
}

func (i AppProjectSpecNamespaceResourceBlacklistArray) ToAppProjectSpecNamespaceResourceBlacklistArrayOutput() AppProjectSpecNamespaceResourceBlacklistArrayOutput {
	return i.ToAppProjectSpecNamespaceResourceBlacklistArrayOutputWithContext(context.Background())
}

func (i AppProjectSpecNamespaceResourceBlacklistArray) ToAppProjectSpecNamespaceResourceBlacklistArrayOutputWithContext(ctx context.Context) AppProjectSpecNamespaceResourceBlacklistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecNamespaceResourceBlacklistArrayOutput)
}

// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
type AppProjectSpecNamespaceResourceBlacklistOutput struct{ *pulumi.OutputState }

func (AppProjectSpecNamespaceResourceBlacklistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecNamespaceResourceBlacklist)(nil)).Elem()
}

func (o AppProjectSpecNamespaceResourceBlacklistOutput) ToAppProjectSpecNamespaceResourceBlacklistOutput() AppProjectSpecNamespaceResourceBlacklistOutput {
	return o
}

func (o AppProjectSpecNamespaceResourceBlacklistOutput) ToAppProjectSpecNamespaceResourceBlacklistOutputWithContext(ctx context.Context) AppProjectSpecNamespaceResourceBlacklistOutput {
	return o
}

func (o AppProjectSpecNamespaceResourceBlacklistOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v AppProjectSpecNamespaceResourceBlacklist) string { return v.Group }).(pulumi.StringOutput)
}

func (o AppProjectSpecNamespaceResourceBlacklistOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v AppProjectSpecNamespaceResourceBlacklist) string { return v.Kind }).(pulumi.StringOutput)
}

type AppProjectSpecNamespaceResourceBlacklistArrayOutput struct{ *pulumi.OutputState }

func (AppProjectSpecNamespaceResourceBlacklistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecNamespaceResourceBlacklist)(nil)).Elem()
}

func (o AppProjectSpecNamespaceResourceBlacklistArrayOutput) ToAppProjectSpecNamespaceResourceBlacklistArrayOutput() AppProjectSpecNamespaceResourceBlacklistArrayOutput {
	return o
}

func (o AppProjectSpecNamespaceResourceBlacklistArrayOutput) ToAppProjectSpecNamespaceResourceBlacklistArrayOutputWithContext(ctx context.Context) AppProjectSpecNamespaceResourceBlacklistArrayOutput {
	return o
}

func (o AppProjectSpecNamespaceResourceBlacklistArrayOutput) Index(i pulumi.IntInput) AppProjectSpecNamespaceResourceBlacklistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppProjectSpecNamespaceResourceBlacklist {
		return vs[0].([]AppProjectSpecNamespaceResourceBlacklist)[vs[1].(int)]
	}).(AppProjectSpecNamespaceResourceBlacklistOutput)
}

// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
type AppProjectSpecNamespaceResourceWhitelist struct {
	Group string `pulumi:"group"`
	Kind  string `pulumi:"kind"`
}

// AppProjectSpecNamespaceResourceWhitelistInput is an input type that accepts AppProjectSpecNamespaceResourceWhitelistArgs and AppProjectSpecNamespaceResourceWhitelistOutput values.
// You can construct a concrete instance of `AppProjectSpecNamespaceResourceWhitelistInput` via:
//
//          AppProjectSpecNamespaceResourceWhitelistArgs{...}
type AppProjectSpecNamespaceResourceWhitelistInput interface {
	pulumi.Input

	ToAppProjectSpecNamespaceResourceWhitelistOutput() AppProjectSpecNamespaceResourceWhitelistOutput
	ToAppProjectSpecNamespaceResourceWhitelistOutputWithContext(context.Context) AppProjectSpecNamespaceResourceWhitelistOutput
}

// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
type AppProjectSpecNamespaceResourceWhitelistArgs struct {
	Group pulumi.StringInput `pulumi:"group"`
	Kind  pulumi.StringInput `pulumi:"kind"`
}

func (AppProjectSpecNamespaceResourceWhitelistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecNamespaceResourceWhitelist)(nil)).Elem()
}

func (i AppProjectSpecNamespaceResourceWhitelistArgs) ToAppProjectSpecNamespaceResourceWhitelistOutput() AppProjectSpecNamespaceResourceWhitelistOutput {
	return i.ToAppProjectSpecNamespaceResourceWhitelistOutputWithContext(context.Background())
}

func (i AppProjectSpecNamespaceResourceWhitelistArgs) ToAppProjectSpecNamespaceResourceWhitelistOutputWithContext(ctx context.Context) AppProjectSpecNamespaceResourceWhitelistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecNamespaceResourceWhitelistOutput)
}

// AppProjectSpecNamespaceResourceWhitelistArrayInput is an input type that accepts AppProjectSpecNamespaceResourceWhitelistArray and AppProjectSpecNamespaceResourceWhitelistArrayOutput values.
// You can construct a concrete instance of `AppProjectSpecNamespaceResourceWhitelistArrayInput` via:
//
//          AppProjectSpecNamespaceResourceWhitelistArray{ AppProjectSpecNamespaceResourceWhitelistArgs{...} }
type AppProjectSpecNamespaceResourceWhitelistArrayInput interface {
	pulumi.Input

	ToAppProjectSpecNamespaceResourceWhitelistArrayOutput() AppProjectSpecNamespaceResourceWhitelistArrayOutput
	ToAppProjectSpecNamespaceResourceWhitelistArrayOutputWithContext(context.Context) AppProjectSpecNamespaceResourceWhitelistArrayOutput
}

type AppProjectSpecNamespaceResourceWhitelistArray []AppProjectSpecNamespaceResourceWhitelistInput

func (AppProjectSpecNamespaceResourceWhitelistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecNamespaceResourceWhitelist)(nil)).Elem()
}

func (i AppProjectSpecNamespaceResourceWhitelistArray) ToAppProjectSpecNamespaceResourceWhitelistArrayOutput() AppProjectSpecNamespaceResourceWhitelistArrayOutput {
	return i.ToAppProjectSpecNamespaceResourceWhitelistArrayOutputWithContext(context.Background())
}

func (i AppProjectSpecNamespaceResourceWhitelistArray) ToAppProjectSpecNamespaceResourceWhitelistArrayOutputWithContext(ctx context.Context) AppProjectSpecNamespaceResourceWhitelistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecNamespaceResourceWhitelistArrayOutput)
}

// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
type AppProjectSpecNamespaceResourceWhitelistOutput struct{ *pulumi.OutputState }

func (AppProjectSpecNamespaceResourceWhitelistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecNamespaceResourceWhitelist)(nil)).Elem()
}

func (o AppProjectSpecNamespaceResourceWhitelistOutput) ToAppProjectSpecNamespaceResourceWhitelistOutput() AppProjectSpecNamespaceResourceWhitelistOutput {
	return o
}

func (o AppProjectSpecNamespaceResourceWhitelistOutput) ToAppProjectSpecNamespaceResourceWhitelistOutputWithContext(ctx context.Context) AppProjectSpecNamespaceResourceWhitelistOutput {
	return o
}

func (o AppProjectSpecNamespaceResourceWhitelistOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v AppProjectSpecNamespaceResourceWhitelist) string { return v.Group }).(pulumi.StringOutput)
}

func (o AppProjectSpecNamespaceResourceWhitelistOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v AppProjectSpecNamespaceResourceWhitelist) string { return v.Kind }).(pulumi.StringOutput)
}

type AppProjectSpecNamespaceResourceWhitelistArrayOutput struct{ *pulumi.OutputState }

func (AppProjectSpecNamespaceResourceWhitelistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecNamespaceResourceWhitelist)(nil)).Elem()
}

func (o AppProjectSpecNamespaceResourceWhitelistArrayOutput) ToAppProjectSpecNamespaceResourceWhitelistArrayOutput() AppProjectSpecNamespaceResourceWhitelistArrayOutput {
	return o
}

func (o AppProjectSpecNamespaceResourceWhitelistArrayOutput) ToAppProjectSpecNamespaceResourceWhitelistArrayOutputWithContext(ctx context.Context) AppProjectSpecNamespaceResourceWhitelistArrayOutput {
	return o
}

func (o AppProjectSpecNamespaceResourceWhitelistArrayOutput) Index(i pulumi.IntInput) AppProjectSpecNamespaceResourceWhitelistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppProjectSpecNamespaceResourceWhitelist {
		return vs[0].([]AppProjectSpecNamespaceResourceWhitelist)[vs[1].(int)]
	}).(AppProjectSpecNamespaceResourceWhitelistOutput)
}

// OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
type AppProjectSpecOrphanedResources struct {
	Ignore []AppProjectSpecOrphanedResourcesIgnore `pulumi:"ignore"`
	// Warn indicates if warning condition should be created for apps which have orphaned resources
	Warn *bool `pulumi:"warn"`
}

// AppProjectSpecOrphanedResourcesInput is an input type that accepts AppProjectSpecOrphanedResourcesArgs and AppProjectSpecOrphanedResourcesOutput values.
// You can construct a concrete instance of `AppProjectSpecOrphanedResourcesInput` via:
//
//          AppProjectSpecOrphanedResourcesArgs{...}
type AppProjectSpecOrphanedResourcesInput interface {
	pulumi.Input

	ToAppProjectSpecOrphanedResourcesOutput() AppProjectSpecOrphanedResourcesOutput
	ToAppProjectSpecOrphanedResourcesOutputWithContext(context.Context) AppProjectSpecOrphanedResourcesOutput
}

// OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
type AppProjectSpecOrphanedResourcesArgs struct {
	Ignore AppProjectSpecOrphanedResourcesIgnoreArrayInput `pulumi:"ignore"`
	// Warn indicates if warning condition should be created for apps which have orphaned resources
	Warn pulumi.BoolPtrInput `pulumi:"warn"`
}

func (AppProjectSpecOrphanedResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecOrphanedResources)(nil)).Elem()
}

func (i AppProjectSpecOrphanedResourcesArgs) ToAppProjectSpecOrphanedResourcesOutput() AppProjectSpecOrphanedResourcesOutput {
	return i.ToAppProjectSpecOrphanedResourcesOutputWithContext(context.Background())
}

func (i AppProjectSpecOrphanedResourcesArgs) ToAppProjectSpecOrphanedResourcesOutputWithContext(ctx context.Context) AppProjectSpecOrphanedResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecOrphanedResourcesOutput)
}

func (i AppProjectSpecOrphanedResourcesArgs) ToAppProjectSpecOrphanedResourcesPtrOutput() AppProjectSpecOrphanedResourcesPtrOutput {
	return i.ToAppProjectSpecOrphanedResourcesPtrOutputWithContext(context.Background())
}

func (i AppProjectSpecOrphanedResourcesArgs) ToAppProjectSpecOrphanedResourcesPtrOutputWithContext(ctx context.Context) AppProjectSpecOrphanedResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecOrphanedResourcesOutput).ToAppProjectSpecOrphanedResourcesPtrOutputWithContext(ctx)
}

// AppProjectSpecOrphanedResourcesPtrInput is an input type that accepts AppProjectSpecOrphanedResourcesArgs, AppProjectSpecOrphanedResourcesPtr and AppProjectSpecOrphanedResourcesPtrOutput values.
// You can construct a concrete instance of `AppProjectSpecOrphanedResourcesPtrInput` via:
//
//          AppProjectSpecOrphanedResourcesArgs{...}
//
//  or:
//
//          nil
type AppProjectSpecOrphanedResourcesPtrInput interface {
	pulumi.Input

	ToAppProjectSpecOrphanedResourcesPtrOutput() AppProjectSpecOrphanedResourcesPtrOutput
	ToAppProjectSpecOrphanedResourcesPtrOutputWithContext(context.Context) AppProjectSpecOrphanedResourcesPtrOutput
}

type appProjectSpecOrphanedResourcesPtrType AppProjectSpecOrphanedResourcesArgs

func AppProjectSpecOrphanedResourcesPtr(v *AppProjectSpecOrphanedResourcesArgs) AppProjectSpecOrphanedResourcesPtrInput {
	return (*appProjectSpecOrphanedResourcesPtrType)(v)
}

func (*appProjectSpecOrphanedResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProjectSpecOrphanedResources)(nil)).Elem()
}

func (i *appProjectSpecOrphanedResourcesPtrType) ToAppProjectSpecOrphanedResourcesPtrOutput() AppProjectSpecOrphanedResourcesPtrOutput {
	return i.ToAppProjectSpecOrphanedResourcesPtrOutputWithContext(context.Background())
}

func (i *appProjectSpecOrphanedResourcesPtrType) ToAppProjectSpecOrphanedResourcesPtrOutputWithContext(ctx context.Context) AppProjectSpecOrphanedResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecOrphanedResourcesPtrOutput)
}

// OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
type AppProjectSpecOrphanedResourcesOutput struct{ *pulumi.OutputState }

func (AppProjectSpecOrphanedResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecOrphanedResources)(nil)).Elem()
}

func (o AppProjectSpecOrphanedResourcesOutput) ToAppProjectSpecOrphanedResourcesOutput() AppProjectSpecOrphanedResourcesOutput {
	return o
}

func (o AppProjectSpecOrphanedResourcesOutput) ToAppProjectSpecOrphanedResourcesOutputWithContext(ctx context.Context) AppProjectSpecOrphanedResourcesOutput {
	return o
}

func (o AppProjectSpecOrphanedResourcesOutput) ToAppProjectSpecOrphanedResourcesPtrOutput() AppProjectSpecOrphanedResourcesPtrOutput {
	return o.ToAppProjectSpecOrphanedResourcesPtrOutputWithContext(context.Background())
}

func (o AppProjectSpecOrphanedResourcesOutput) ToAppProjectSpecOrphanedResourcesPtrOutputWithContext(ctx context.Context) AppProjectSpecOrphanedResourcesPtrOutput {
	return o.ApplyT(func(v AppProjectSpecOrphanedResources) *AppProjectSpecOrphanedResources {
		return &v
	}).(AppProjectSpecOrphanedResourcesPtrOutput)
}
func (o AppProjectSpecOrphanedResourcesOutput) Ignore() AppProjectSpecOrphanedResourcesIgnoreArrayOutput {
	return o.ApplyT(func(v AppProjectSpecOrphanedResources) []AppProjectSpecOrphanedResourcesIgnore { return v.Ignore }).(AppProjectSpecOrphanedResourcesIgnoreArrayOutput)
}

// Warn indicates if warning condition should be created for apps which have orphaned resources
func (o AppProjectSpecOrphanedResourcesOutput) Warn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppProjectSpecOrphanedResources) *bool { return v.Warn }).(pulumi.BoolPtrOutput)
}

type AppProjectSpecOrphanedResourcesPtrOutput struct{ *pulumi.OutputState }

func (AppProjectSpecOrphanedResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProjectSpecOrphanedResources)(nil)).Elem()
}

func (o AppProjectSpecOrphanedResourcesPtrOutput) ToAppProjectSpecOrphanedResourcesPtrOutput() AppProjectSpecOrphanedResourcesPtrOutput {
	return o
}

func (o AppProjectSpecOrphanedResourcesPtrOutput) ToAppProjectSpecOrphanedResourcesPtrOutputWithContext(ctx context.Context) AppProjectSpecOrphanedResourcesPtrOutput {
	return o
}

func (o AppProjectSpecOrphanedResourcesPtrOutput) Elem() AppProjectSpecOrphanedResourcesOutput {
	return o.ApplyT(func(v *AppProjectSpecOrphanedResources) AppProjectSpecOrphanedResources { return *v }).(AppProjectSpecOrphanedResourcesOutput)
}

func (o AppProjectSpecOrphanedResourcesPtrOutput) Ignore() AppProjectSpecOrphanedResourcesIgnoreArrayOutput {
	return o.ApplyT(func(v *AppProjectSpecOrphanedResources) []AppProjectSpecOrphanedResourcesIgnore {
		if v == nil {
			return nil
		}
		return v.Ignore
	}).(AppProjectSpecOrphanedResourcesIgnoreArrayOutput)
}

// Warn indicates if warning condition should be created for apps which have orphaned resources
func (o AppProjectSpecOrphanedResourcesPtrOutput) Warn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppProjectSpecOrphanedResources) *bool {
		if v == nil {
			return nil
		}
		return v.Warn
	}).(pulumi.BoolPtrOutput)
}

type AppProjectSpecOrphanedResourcesIgnore struct {
	Group *string `pulumi:"group"`
	Kind  *string `pulumi:"kind"`
	Name  *string `pulumi:"name"`
}

// AppProjectSpecOrphanedResourcesIgnoreInput is an input type that accepts AppProjectSpecOrphanedResourcesIgnoreArgs and AppProjectSpecOrphanedResourcesIgnoreOutput values.
// You can construct a concrete instance of `AppProjectSpecOrphanedResourcesIgnoreInput` via:
//
//          AppProjectSpecOrphanedResourcesIgnoreArgs{...}
type AppProjectSpecOrphanedResourcesIgnoreInput interface {
	pulumi.Input

	ToAppProjectSpecOrphanedResourcesIgnoreOutput() AppProjectSpecOrphanedResourcesIgnoreOutput
	ToAppProjectSpecOrphanedResourcesIgnoreOutputWithContext(context.Context) AppProjectSpecOrphanedResourcesIgnoreOutput
}

type AppProjectSpecOrphanedResourcesIgnoreArgs struct {
	Group pulumi.StringPtrInput `pulumi:"group"`
	Kind  pulumi.StringPtrInput `pulumi:"kind"`
	Name  pulumi.StringPtrInput `pulumi:"name"`
}

func (AppProjectSpecOrphanedResourcesIgnoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecOrphanedResourcesIgnore)(nil)).Elem()
}

func (i AppProjectSpecOrphanedResourcesIgnoreArgs) ToAppProjectSpecOrphanedResourcesIgnoreOutput() AppProjectSpecOrphanedResourcesIgnoreOutput {
	return i.ToAppProjectSpecOrphanedResourcesIgnoreOutputWithContext(context.Background())
}

func (i AppProjectSpecOrphanedResourcesIgnoreArgs) ToAppProjectSpecOrphanedResourcesIgnoreOutputWithContext(ctx context.Context) AppProjectSpecOrphanedResourcesIgnoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecOrphanedResourcesIgnoreOutput)
}

// AppProjectSpecOrphanedResourcesIgnoreArrayInput is an input type that accepts AppProjectSpecOrphanedResourcesIgnoreArray and AppProjectSpecOrphanedResourcesIgnoreArrayOutput values.
// You can construct a concrete instance of `AppProjectSpecOrphanedResourcesIgnoreArrayInput` via:
//
//          AppProjectSpecOrphanedResourcesIgnoreArray{ AppProjectSpecOrphanedResourcesIgnoreArgs{...} }
type AppProjectSpecOrphanedResourcesIgnoreArrayInput interface {
	pulumi.Input

	ToAppProjectSpecOrphanedResourcesIgnoreArrayOutput() AppProjectSpecOrphanedResourcesIgnoreArrayOutput
	ToAppProjectSpecOrphanedResourcesIgnoreArrayOutputWithContext(context.Context) AppProjectSpecOrphanedResourcesIgnoreArrayOutput
}

type AppProjectSpecOrphanedResourcesIgnoreArray []AppProjectSpecOrphanedResourcesIgnoreInput

func (AppProjectSpecOrphanedResourcesIgnoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecOrphanedResourcesIgnore)(nil)).Elem()
}

func (i AppProjectSpecOrphanedResourcesIgnoreArray) ToAppProjectSpecOrphanedResourcesIgnoreArrayOutput() AppProjectSpecOrphanedResourcesIgnoreArrayOutput {
	return i.ToAppProjectSpecOrphanedResourcesIgnoreArrayOutputWithContext(context.Background())
}

func (i AppProjectSpecOrphanedResourcesIgnoreArray) ToAppProjectSpecOrphanedResourcesIgnoreArrayOutputWithContext(ctx context.Context) AppProjectSpecOrphanedResourcesIgnoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecOrphanedResourcesIgnoreArrayOutput)
}

type AppProjectSpecOrphanedResourcesIgnoreOutput struct{ *pulumi.OutputState }

func (AppProjectSpecOrphanedResourcesIgnoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecOrphanedResourcesIgnore)(nil)).Elem()
}

func (o AppProjectSpecOrphanedResourcesIgnoreOutput) ToAppProjectSpecOrphanedResourcesIgnoreOutput() AppProjectSpecOrphanedResourcesIgnoreOutput {
	return o
}

func (o AppProjectSpecOrphanedResourcesIgnoreOutput) ToAppProjectSpecOrphanedResourcesIgnoreOutputWithContext(ctx context.Context) AppProjectSpecOrphanedResourcesIgnoreOutput {
	return o
}

func (o AppProjectSpecOrphanedResourcesIgnoreOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppProjectSpecOrphanedResourcesIgnore) *string { return v.Group }).(pulumi.StringPtrOutput)
}

func (o AppProjectSpecOrphanedResourcesIgnoreOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppProjectSpecOrphanedResourcesIgnore) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o AppProjectSpecOrphanedResourcesIgnoreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppProjectSpecOrphanedResourcesIgnore) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AppProjectSpecOrphanedResourcesIgnoreArrayOutput struct{ *pulumi.OutputState }

func (AppProjectSpecOrphanedResourcesIgnoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecOrphanedResourcesIgnore)(nil)).Elem()
}

func (o AppProjectSpecOrphanedResourcesIgnoreArrayOutput) ToAppProjectSpecOrphanedResourcesIgnoreArrayOutput() AppProjectSpecOrphanedResourcesIgnoreArrayOutput {
	return o
}

func (o AppProjectSpecOrphanedResourcesIgnoreArrayOutput) ToAppProjectSpecOrphanedResourcesIgnoreArrayOutputWithContext(ctx context.Context) AppProjectSpecOrphanedResourcesIgnoreArrayOutput {
	return o
}

func (o AppProjectSpecOrphanedResourcesIgnoreArrayOutput) Index(i pulumi.IntInput) AppProjectSpecOrphanedResourcesIgnoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppProjectSpecOrphanedResourcesIgnore {
		return vs[0].([]AppProjectSpecOrphanedResourcesIgnore)[vs[1].(int)]
	}).(AppProjectSpecOrphanedResourcesIgnoreOutput)
}

// ProjectRole represents a role that has access to a project
type AppProjectSpecRoles struct {
	// Description is a description of the role
	Description *string `pulumi:"description"`
	// Groups are a list of OIDC group claims bound to this role
	Groups []string `pulumi:"groups"`
	// JWTTokens are a list of generated JWT tokens bound to this role
	JwtTokens []AppProjectSpecRolesJwtTokens `pulumi:"jwtTokens"`
	// Name is a name for this role
	Name string `pulumi:"name"`
	// Policies Stores a list of casbin formated strings that define access policies for the role in the project
	Policies []string `pulumi:"policies"`
}

// AppProjectSpecRolesInput is an input type that accepts AppProjectSpecRolesArgs and AppProjectSpecRolesOutput values.
// You can construct a concrete instance of `AppProjectSpecRolesInput` via:
//
//          AppProjectSpecRolesArgs{...}
type AppProjectSpecRolesInput interface {
	pulumi.Input

	ToAppProjectSpecRolesOutput() AppProjectSpecRolesOutput
	ToAppProjectSpecRolesOutputWithContext(context.Context) AppProjectSpecRolesOutput
}

// ProjectRole represents a role that has access to a project
type AppProjectSpecRolesArgs struct {
	// Description is a description of the role
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Groups are a list of OIDC group claims bound to this role
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// JWTTokens are a list of generated JWT tokens bound to this role
	JwtTokens AppProjectSpecRolesJwtTokensArrayInput `pulumi:"jwtTokens"`
	// Name is a name for this role
	Name pulumi.StringInput `pulumi:"name"`
	// Policies Stores a list of casbin formated strings that define access policies for the role in the project
	Policies pulumi.StringArrayInput `pulumi:"policies"`
}

func (AppProjectSpecRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecRoles)(nil)).Elem()
}

func (i AppProjectSpecRolesArgs) ToAppProjectSpecRolesOutput() AppProjectSpecRolesOutput {
	return i.ToAppProjectSpecRolesOutputWithContext(context.Background())
}

func (i AppProjectSpecRolesArgs) ToAppProjectSpecRolesOutputWithContext(ctx context.Context) AppProjectSpecRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecRolesOutput)
}

// AppProjectSpecRolesArrayInput is an input type that accepts AppProjectSpecRolesArray and AppProjectSpecRolesArrayOutput values.
// You can construct a concrete instance of `AppProjectSpecRolesArrayInput` via:
//
//          AppProjectSpecRolesArray{ AppProjectSpecRolesArgs{...} }
type AppProjectSpecRolesArrayInput interface {
	pulumi.Input

	ToAppProjectSpecRolesArrayOutput() AppProjectSpecRolesArrayOutput
	ToAppProjectSpecRolesArrayOutputWithContext(context.Context) AppProjectSpecRolesArrayOutput
}

type AppProjectSpecRolesArray []AppProjectSpecRolesInput

func (AppProjectSpecRolesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecRoles)(nil)).Elem()
}

func (i AppProjectSpecRolesArray) ToAppProjectSpecRolesArrayOutput() AppProjectSpecRolesArrayOutput {
	return i.ToAppProjectSpecRolesArrayOutputWithContext(context.Background())
}

func (i AppProjectSpecRolesArray) ToAppProjectSpecRolesArrayOutputWithContext(ctx context.Context) AppProjectSpecRolesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecRolesArrayOutput)
}

// ProjectRole represents a role that has access to a project
type AppProjectSpecRolesOutput struct{ *pulumi.OutputState }

func (AppProjectSpecRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecRoles)(nil)).Elem()
}

func (o AppProjectSpecRolesOutput) ToAppProjectSpecRolesOutput() AppProjectSpecRolesOutput {
	return o
}

func (o AppProjectSpecRolesOutput) ToAppProjectSpecRolesOutputWithContext(ctx context.Context) AppProjectSpecRolesOutput {
	return o
}

// Description is a description of the role
func (o AppProjectSpecRolesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppProjectSpecRoles) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Groups are a list of OIDC group claims bound to this role
func (o AppProjectSpecRolesOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AppProjectSpecRoles) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// JWTTokens are a list of generated JWT tokens bound to this role
func (o AppProjectSpecRolesOutput) JwtTokens() AppProjectSpecRolesJwtTokensArrayOutput {
	return o.ApplyT(func(v AppProjectSpecRoles) []AppProjectSpecRolesJwtTokens { return v.JwtTokens }).(AppProjectSpecRolesJwtTokensArrayOutput)
}

// Name is a name for this role
func (o AppProjectSpecRolesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AppProjectSpecRoles) string { return v.Name }).(pulumi.StringOutput)
}

// Policies Stores a list of casbin formated strings that define access policies for the role in the project
func (o AppProjectSpecRolesOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AppProjectSpecRoles) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

type AppProjectSpecRolesArrayOutput struct{ *pulumi.OutputState }

func (AppProjectSpecRolesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecRoles)(nil)).Elem()
}

func (o AppProjectSpecRolesArrayOutput) ToAppProjectSpecRolesArrayOutput() AppProjectSpecRolesArrayOutput {
	return o
}

func (o AppProjectSpecRolesArrayOutput) ToAppProjectSpecRolesArrayOutputWithContext(ctx context.Context) AppProjectSpecRolesArrayOutput {
	return o
}

func (o AppProjectSpecRolesArrayOutput) Index(i pulumi.IntInput) AppProjectSpecRolesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppProjectSpecRoles {
		return vs[0].([]AppProjectSpecRoles)[vs[1].(int)]
	}).(AppProjectSpecRolesOutput)
}

// JWTToken holds the issuedAt and expiresAt values of a token
type AppProjectSpecRolesJwtTokens struct {
	Exp *int    `pulumi:"exp"`
	Iat int     `pulumi:"iat"`
	Id  *string `pulumi:"id"`
}

// AppProjectSpecRolesJwtTokensInput is an input type that accepts AppProjectSpecRolesJwtTokensArgs and AppProjectSpecRolesJwtTokensOutput values.
// You can construct a concrete instance of `AppProjectSpecRolesJwtTokensInput` via:
//
//          AppProjectSpecRolesJwtTokensArgs{...}
type AppProjectSpecRolesJwtTokensInput interface {
	pulumi.Input

	ToAppProjectSpecRolesJwtTokensOutput() AppProjectSpecRolesJwtTokensOutput
	ToAppProjectSpecRolesJwtTokensOutputWithContext(context.Context) AppProjectSpecRolesJwtTokensOutput
}

// JWTToken holds the issuedAt and expiresAt values of a token
type AppProjectSpecRolesJwtTokensArgs struct {
	Exp pulumi.IntPtrInput    `pulumi:"exp"`
	Iat pulumi.IntInput       `pulumi:"iat"`
	Id  pulumi.StringPtrInput `pulumi:"id"`
}

func (AppProjectSpecRolesJwtTokensArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecRolesJwtTokens)(nil)).Elem()
}

func (i AppProjectSpecRolesJwtTokensArgs) ToAppProjectSpecRolesJwtTokensOutput() AppProjectSpecRolesJwtTokensOutput {
	return i.ToAppProjectSpecRolesJwtTokensOutputWithContext(context.Background())
}

func (i AppProjectSpecRolesJwtTokensArgs) ToAppProjectSpecRolesJwtTokensOutputWithContext(ctx context.Context) AppProjectSpecRolesJwtTokensOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecRolesJwtTokensOutput)
}

// AppProjectSpecRolesJwtTokensArrayInput is an input type that accepts AppProjectSpecRolesJwtTokensArray and AppProjectSpecRolesJwtTokensArrayOutput values.
// You can construct a concrete instance of `AppProjectSpecRolesJwtTokensArrayInput` via:
//
//          AppProjectSpecRolesJwtTokensArray{ AppProjectSpecRolesJwtTokensArgs{...} }
type AppProjectSpecRolesJwtTokensArrayInput interface {
	pulumi.Input

	ToAppProjectSpecRolesJwtTokensArrayOutput() AppProjectSpecRolesJwtTokensArrayOutput
	ToAppProjectSpecRolesJwtTokensArrayOutputWithContext(context.Context) AppProjectSpecRolesJwtTokensArrayOutput
}

type AppProjectSpecRolesJwtTokensArray []AppProjectSpecRolesJwtTokensInput

func (AppProjectSpecRolesJwtTokensArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecRolesJwtTokens)(nil)).Elem()
}

func (i AppProjectSpecRolesJwtTokensArray) ToAppProjectSpecRolesJwtTokensArrayOutput() AppProjectSpecRolesJwtTokensArrayOutput {
	return i.ToAppProjectSpecRolesJwtTokensArrayOutputWithContext(context.Background())
}

func (i AppProjectSpecRolesJwtTokensArray) ToAppProjectSpecRolesJwtTokensArrayOutputWithContext(ctx context.Context) AppProjectSpecRolesJwtTokensArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecRolesJwtTokensArrayOutput)
}

// JWTToken holds the issuedAt and expiresAt values of a token
type AppProjectSpecRolesJwtTokensOutput struct{ *pulumi.OutputState }

func (AppProjectSpecRolesJwtTokensOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecRolesJwtTokens)(nil)).Elem()
}

func (o AppProjectSpecRolesJwtTokensOutput) ToAppProjectSpecRolesJwtTokensOutput() AppProjectSpecRolesJwtTokensOutput {
	return o
}

func (o AppProjectSpecRolesJwtTokensOutput) ToAppProjectSpecRolesJwtTokensOutputWithContext(ctx context.Context) AppProjectSpecRolesJwtTokensOutput {
	return o
}

func (o AppProjectSpecRolesJwtTokensOutput) Exp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AppProjectSpecRolesJwtTokens) *int { return v.Exp }).(pulumi.IntPtrOutput)
}

func (o AppProjectSpecRolesJwtTokensOutput) Iat() pulumi.IntOutput {
	return o.ApplyT(func(v AppProjectSpecRolesJwtTokens) int { return v.Iat }).(pulumi.IntOutput)
}

func (o AppProjectSpecRolesJwtTokensOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppProjectSpecRolesJwtTokens) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type AppProjectSpecRolesJwtTokensArrayOutput struct{ *pulumi.OutputState }

func (AppProjectSpecRolesJwtTokensArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecRolesJwtTokens)(nil)).Elem()
}

func (o AppProjectSpecRolesJwtTokensArrayOutput) ToAppProjectSpecRolesJwtTokensArrayOutput() AppProjectSpecRolesJwtTokensArrayOutput {
	return o
}

func (o AppProjectSpecRolesJwtTokensArrayOutput) ToAppProjectSpecRolesJwtTokensArrayOutputWithContext(ctx context.Context) AppProjectSpecRolesJwtTokensArrayOutput {
	return o
}

func (o AppProjectSpecRolesJwtTokensArrayOutput) Index(i pulumi.IntInput) AppProjectSpecRolesJwtTokensOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppProjectSpecRolesJwtTokens {
		return vs[0].([]AppProjectSpecRolesJwtTokens)[vs[1].(int)]
	}).(AppProjectSpecRolesJwtTokensOutput)
}

// SignatureKey is the specification of a key required to verify commit signatures with
type AppProjectSpecSignatureKeys struct {
	// The ID of the key in hexadecimal notation
	KeyID string `pulumi:"keyID"`
}

// AppProjectSpecSignatureKeysInput is an input type that accepts AppProjectSpecSignatureKeysArgs and AppProjectSpecSignatureKeysOutput values.
// You can construct a concrete instance of `AppProjectSpecSignatureKeysInput` via:
//
//          AppProjectSpecSignatureKeysArgs{...}
type AppProjectSpecSignatureKeysInput interface {
	pulumi.Input

	ToAppProjectSpecSignatureKeysOutput() AppProjectSpecSignatureKeysOutput
	ToAppProjectSpecSignatureKeysOutputWithContext(context.Context) AppProjectSpecSignatureKeysOutput
}

// SignatureKey is the specification of a key required to verify commit signatures with
type AppProjectSpecSignatureKeysArgs struct {
	// The ID of the key in hexadecimal notation
	KeyID pulumi.StringInput `pulumi:"keyID"`
}

func (AppProjectSpecSignatureKeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecSignatureKeys)(nil)).Elem()
}

func (i AppProjectSpecSignatureKeysArgs) ToAppProjectSpecSignatureKeysOutput() AppProjectSpecSignatureKeysOutput {
	return i.ToAppProjectSpecSignatureKeysOutputWithContext(context.Background())
}

func (i AppProjectSpecSignatureKeysArgs) ToAppProjectSpecSignatureKeysOutputWithContext(ctx context.Context) AppProjectSpecSignatureKeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecSignatureKeysOutput)
}

// AppProjectSpecSignatureKeysArrayInput is an input type that accepts AppProjectSpecSignatureKeysArray and AppProjectSpecSignatureKeysArrayOutput values.
// You can construct a concrete instance of `AppProjectSpecSignatureKeysArrayInput` via:
//
//          AppProjectSpecSignatureKeysArray{ AppProjectSpecSignatureKeysArgs{...} }
type AppProjectSpecSignatureKeysArrayInput interface {
	pulumi.Input

	ToAppProjectSpecSignatureKeysArrayOutput() AppProjectSpecSignatureKeysArrayOutput
	ToAppProjectSpecSignatureKeysArrayOutputWithContext(context.Context) AppProjectSpecSignatureKeysArrayOutput
}

type AppProjectSpecSignatureKeysArray []AppProjectSpecSignatureKeysInput

func (AppProjectSpecSignatureKeysArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecSignatureKeys)(nil)).Elem()
}

func (i AppProjectSpecSignatureKeysArray) ToAppProjectSpecSignatureKeysArrayOutput() AppProjectSpecSignatureKeysArrayOutput {
	return i.ToAppProjectSpecSignatureKeysArrayOutputWithContext(context.Background())
}

func (i AppProjectSpecSignatureKeysArray) ToAppProjectSpecSignatureKeysArrayOutputWithContext(ctx context.Context) AppProjectSpecSignatureKeysArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecSignatureKeysArrayOutput)
}

// SignatureKey is the specification of a key required to verify commit signatures with
type AppProjectSpecSignatureKeysOutput struct{ *pulumi.OutputState }

func (AppProjectSpecSignatureKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecSignatureKeys)(nil)).Elem()
}

func (o AppProjectSpecSignatureKeysOutput) ToAppProjectSpecSignatureKeysOutput() AppProjectSpecSignatureKeysOutput {
	return o
}

func (o AppProjectSpecSignatureKeysOutput) ToAppProjectSpecSignatureKeysOutputWithContext(ctx context.Context) AppProjectSpecSignatureKeysOutput {
	return o
}

// The ID of the key in hexadecimal notation
func (o AppProjectSpecSignatureKeysOutput) KeyID() pulumi.StringOutput {
	return o.ApplyT(func(v AppProjectSpecSignatureKeys) string { return v.KeyID }).(pulumi.StringOutput)
}

type AppProjectSpecSignatureKeysArrayOutput struct{ *pulumi.OutputState }

func (AppProjectSpecSignatureKeysArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecSignatureKeys)(nil)).Elem()
}

func (o AppProjectSpecSignatureKeysArrayOutput) ToAppProjectSpecSignatureKeysArrayOutput() AppProjectSpecSignatureKeysArrayOutput {
	return o
}

func (o AppProjectSpecSignatureKeysArrayOutput) ToAppProjectSpecSignatureKeysArrayOutputWithContext(ctx context.Context) AppProjectSpecSignatureKeysArrayOutput {
	return o
}

func (o AppProjectSpecSignatureKeysArrayOutput) Index(i pulumi.IntInput) AppProjectSpecSignatureKeysOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppProjectSpecSignatureKeys {
		return vs[0].([]AppProjectSpecSignatureKeys)[vs[1].(int)]
	}).(AppProjectSpecSignatureKeysOutput)
}

// SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps
type AppProjectSpecSyncWindows struct {
	// Applications contains a list of applications that the window will apply to
	Applications []string `pulumi:"applications"`
	// Clusters contains a list of clusters that the window will apply to
	Clusters []string `pulumi:"clusters"`
	// Duration is the amount of time the sync window will be open
	Duration *string `pulumi:"duration"`
	// Kind defines if the window allows or blocks syncs
	Kind *string `pulumi:"kind"`
	// ManualSync enables manual syncs when they would otherwise be blocked
	ManualSync *bool `pulumi:"manualSync"`
	// Namespaces contains a list of namespaces that the window will apply to
	Namespaces []string `pulumi:"namespaces"`
	// Schedule is the time the window will begin, specified in cron format
	Schedule *string `pulumi:"schedule"`
}

// AppProjectSpecSyncWindowsInput is an input type that accepts AppProjectSpecSyncWindowsArgs and AppProjectSpecSyncWindowsOutput values.
// You can construct a concrete instance of `AppProjectSpecSyncWindowsInput` via:
//
//          AppProjectSpecSyncWindowsArgs{...}
type AppProjectSpecSyncWindowsInput interface {
	pulumi.Input

	ToAppProjectSpecSyncWindowsOutput() AppProjectSpecSyncWindowsOutput
	ToAppProjectSpecSyncWindowsOutputWithContext(context.Context) AppProjectSpecSyncWindowsOutput
}

// SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps
type AppProjectSpecSyncWindowsArgs struct {
	// Applications contains a list of applications that the window will apply to
	Applications pulumi.StringArrayInput `pulumi:"applications"`
	// Clusters contains a list of clusters that the window will apply to
	Clusters pulumi.StringArrayInput `pulumi:"clusters"`
	// Duration is the amount of time the sync window will be open
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// Kind defines if the window allows or blocks syncs
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// ManualSync enables manual syncs when they would otherwise be blocked
	ManualSync pulumi.BoolPtrInput `pulumi:"manualSync"`
	// Namespaces contains a list of namespaces that the window will apply to
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// Schedule is the time the window will begin, specified in cron format
	Schedule pulumi.StringPtrInput `pulumi:"schedule"`
}

func (AppProjectSpecSyncWindowsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecSyncWindows)(nil)).Elem()
}

func (i AppProjectSpecSyncWindowsArgs) ToAppProjectSpecSyncWindowsOutput() AppProjectSpecSyncWindowsOutput {
	return i.ToAppProjectSpecSyncWindowsOutputWithContext(context.Background())
}

func (i AppProjectSpecSyncWindowsArgs) ToAppProjectSpecSyncWindowsOutputWithContext(ctx context.Context) AppProjectSpecSyncWindowsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecSyncWindowsOutput)
}

// AppProjectSpecSyncWindowsArrayInput is an input type that accepts AppProjectSpecSyncWindowsArray and AppProjectSpecSyncWindowsArrayOutput values.
// You can construct a concrete instance of `AppProjectSpecSyncWindowsArrayInput` via:
//
//          AppProjectSpecSyncWindowsArray{ AppProjectSpecSyncWindowsArgs{...} }
type AppProjectSpecSyncWindowsArrayInput interface {
	pulumi.Input

	ToAppProjectSpecSyncWindowsArrayOutput() AppProjectSpecSyncWindowsArrayOutput
	ToAppProjectSpecSyncWindowsArrayOutputWithContext(context.Context) AppProjectSpecSyncWindowsArrayOutput
}

type AppProjectSpecSyncWindowsArray []AppProjectSpecSyncWindowsInput

func (AppProjectSpecSyncWindowsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecSyncWindows)(nil)).Elem()
}

func (i AppProjectSpecSyncWindowsArray) ToAppProjectSpecSyncWindowsArrayOutput() AppProjectSpecSyncWindowsArrayOutput {
	return i.ToAppProjectSpecSyncWindowsArrayOutputWithContext(context.Background())
}

func (i AppProjectSpecSyncWindowsArray) ToAppProjectSpecSyncWindowsArrayOutputWithContext(ctx context.Context) AppProjectSpecSyncWindowsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectSpecSyncWindowsArrayOutput)
}

// SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps
type AppProjectSpecSyncWindowsOutput struct{ *pulumi.OutputState }

func (AppProjectSpecSyncWindowsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProjectSpecSyncWindows)(nil)).Elem()
}

func (o AppProjectSpecSyncWindowsOutput) ToAppProjectSpecSyncWindowsOutput() AppProjectSpecSyncWindowsOutput {
	return o
}

func (o AppProjectSpecSyncWindowsOutput) ToAppProjectSpecSyncWindowsOutputWithContext(ctx context.Context) AppProjectSpecSyncWindowsOutput {
	return o
}

// Applications contains a list of applications that the window will apply to
func (o AppProjectSpecSyncWindowsOutput) Applications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AppProjectSpecSyncWindows) []string { return v.Applications }).(pulumi.StringArrayOutput)
}

// Clusters contains a list of clusters that the window will apply to
func (o AppProjectSpecSyncWindowsOutput) Clusters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AppProjectSpecSyncWindows) []string { return v.Clusters }).(pulumi.StringArrayOutput)
}

// Duration is the amount of time the sync window will be open
func (o AppProjectSpecSyncWindowsOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppProjectSpecSyncWindows) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// Kind defines if the window allows or blocks syncs
func (o AppProjectSpecSyncWindowsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppProjectSpecSyncWindows) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// ManualSync enables manual syncs when they would otherwise be blocked
func (o AppProjectSpecSyncWindowsOutput) ManualSync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppProjectSpecSyncWindows) *bool { return v.ManualSync }).(pulumi.BoolPtrOutput)
}

// Namespaces contains a list of namespaces that the window will apply to
func (o AppProjectSpecSyncWindowsOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AppProjectSpecSyncWindows) []string { return v.Namespaces }).(pulumi.StringArrayOutput)
}

// Schedule is the time the window will begin, specified in cron format
func (o AppProjectSpecSyncWindowsOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppProjectSpecSyncWindows) *string { return v.Schedule }).(pulumi.StringPtrOutput)
}

type AppProjectSpecSyncWindowsArrayOutput struct{ *pulumi.OutputState }

func (AppProjectSpecSyncWindowsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppProjectSpecSyncWindows)(nil)).Elem()
}

func (o AppProjectSpecSyncWindowsArrayOutput) ToAppProjectSpecSyncWindowsArrayOutput() AppProjectSpecSyncWindowsArrayOutput {
	return o
}

func (o AppProjectSpecSyncWindowsArrayOutput) ToAppProjectSpecSyncWindowsArrayOutputWithContext(ctx context.Context) AppProjectSpecSyncWindowsArrayOutput {
	return o
}

func (o AppProjectSpecSyncWindowsArrayOutput) Index(i pulumi.IntInput) AppProjectSpecSyncWindowsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppProjectSpecSyncWindows {
		return vs[0].([]AppProjectSpecSyncWindows)[vs[1].(int)]
	}).(AppProjectSpecSyncWindowsOutput)
}

// Application is a definition of Application resource.
type ApplicationType struct {
	ApiVersion *string           `pulumi:"apiVersion"`
	Kind       *string           `pulumi:"kind"`
	Metadata   metav1.ObjectMeta `pulumi:"metadata"`
	// Operation contains requested operation parameters.
	Operation *ApplicationOperation `pulumi:"operation"`
	// ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
	Spec ApplicationSpec `pulumi:"spec"`
	// ApplicationStatus contains information about application sync, health status
	Status *ApplicationStatus `pulumi:"status"`
}

// ApplicationTypeInput is an input type that accepts ApplicationTypeArgs and ApplicationTypeOutput values.
// You can construct a concrete instance of `ApplicationTypeInput` via:
//
//          ApplicationTypeArgs{...}
type ApplicationTypeInput interface {
	pulumi.Input

	ToApplicationTypeOutput() ApplicationTypeOutput
	ToApplicationTypeOutputWithContext(context.Context) ApplicationTypeOutput
}

// Application is a definition of Application resource.
type ApplicationTypeArgs struct {
	ApiVersion pulumi.StringPtrInput  `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput  `pulumi:"kind"`
	Metadata   metav1.ObjectMetaInput `pulumi:"metadata"`
	// Operation contains requested operation parameters.
	Operation ApplicationOperationPtrInput `pulumi:"operation"`
	// ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
	Spec ApplicationSpecInput `pulumi:"spec"`
	// ApplicationStatus contains information about application sync, health status
	Status ApplicationStatusPtrInput `pulumi:"status"`
}

func (ApplicationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationType)(nil)).Elem()
}

func (i ApplicationTypeArgs) ToApplicationTypeOutput() ApplicationTypeOutput {
	return i.ToApplicationTypeOutputWithContext(context.Background())
}

func (i ApplicationTypeArgs) ToApplicationTypeOutputWithContext(ctx context.Context) ApplicationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeOutput)
}

// Application is a definition of Application resource.
type ApplicationTypeOutput struct{ *pulumi.OutputState }

func (ApplicationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationType)(nil)).Elem()
}

func (o ApplicationTypeOutput) ToApplicationTypeOutput() ApplicationTypeOutput {
	return o
}

func (o ApplicationTypeOutput) ToApplicationTypeOutputWithContext(ctx context.Context) ApplicationTypeOutput {
	return o
}

func (o ApplicationTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ApplicationTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ApplicationTypeOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v ApplicationType) metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// Operation contains requested operation parameters.
func (o ApplicationTypeOutput) Operation() ApplicationOperationPtrOutput {
	return o.ApplyT(func(v ApplicationType) *ApplicationOperation { return v.Operation }).(ApplicationOperationPtrOutput)
}

// ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
func (o ApplicationTypeOutput) Spec() ApplicationSpecOutput {
	return o.ApplyT(func(v ApplicationType) ApplicationSpec { return v.Spec }).(ApplicationSpecOutput)
}

// ApplicationStatus contains information about application sync, health status
func (o ApplicationTypeOutput) Status() ApplicationStatusPtrOutput {
	return o.ApplyT(func(v ApplicationType) *ApplicationStatus { return v.Status }).(ApplicationStatusPtrOutput)
}

type ApplicationMetadata struct {
}

// ApplicationMetadataInput is an input type that accepts ApplicationMetadataArgs and ApplicationMetadataOutput values.
// You can construct a concrete instance of `ApplicationMetadataInput` via:
//
//          ApplicationMetadataArgs{...}
type ApplicationMetadataInput interface {
	pulumi.Input

	ToApplicationMetadataOutput() ApplicationMetadataOutput
	ToApplicationMetadataOutputWithContext(context.Context) ApplicationMetadataOutput
}

type ApplicationMetadataArgs struct {
}

func (ApplicationMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMetadata)(nil)).Elem()
}

func (i ApplicationMetadataArgs) ToApplicationMetadataOutput() ApplicationMetadataOutput {
	return i.ToApplicationMetadataOutputWithContext(context.Background())
}

func (i ApplicationMetadataArgs) ToApplicationMetadataOutputWithContext(ctx context.Context) ApplicationMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMetadataOutput)
}

type ApplicationMetadataOutput struct{ *pulumi.OutputState }

func (ApplicationMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMetadata)(nil)).Elem()
}

func (o ApplicationMetadataOutput) ToApplicationMetadataOutput() ApplicationMetadataOutput {
	return o
}

func (o ApplicationMetadataOutput) ToApplicationMetadataOutputWithContext(ctx context.Context) ApplicationMetadataOutput {
	return o
}

// Operation contains requested operation parameters.
type ApplicationOperation struct {
	Info []ApplicationOperationInfo `pulumi:"info"`
	// OperationInitiator holds information about the operation initiator
	InitiatedBy *ApplicationOperationInitiatedBy `pulumi:"initiatedBy"`
	// Retry controls failed sync retry behavior
	Retry *ApplicationOperationRetry `pulumi:"retry"`
	// SyncOperation contains sync operation details.
	Sync *ApplicationOperationSync `pulumi:"sync"`
}

// ApplicationOperationInput is an input type that accepts ApplicationOperationArgs and ApplicationOperationOutput values.
// You can construct a concrete instance of `ApplicationOperationInput` via:
//
//          ApplicationOperationArgs{...}
type ApplicationOperationInput interface {
	pulumi.Input

	ToApplicationOperationOutput() ApplicationOperationOutput
	ToApplicationOperationOutputWithContext(context.Context) ApplicationOperationOutput
}

// Operation contains requested operation parameters.
type ApplicationOperationArgs struct {
	Info ApplicationOperationInfoArrayInput `pulumi:"info"`
	// OperationInitiator holds information about the operation initiator
	InitiatedBy ApplicationOperationInitiatedByPtrInput `pulumi:"initiatedBy"`
	// Retry controls failed sync retry behavior
	Retry ApplicationOperationRetryPtrInput `pulumi:"retry"`
	// SyncOperation contains sync operation details.
	Sync ApplicationOperationSyncPtrInput `pulumi:"sync"`
}

func (ApplicationOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperation)(nil)).Elem()
}

func (i ApplicationOperationArgs) ToApplicationOperationOutput() ApplicationOperationOutput {
	return i.ToApplicationOperationOutputWithContext(context.Background())
}

func (i ApplicationOperationArgs) ToApplicationOperationOutputWithContext(ctx context.Context) ApplicationOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationOutput)
}

func (i ApplicationOperationArgs) ToApplicationOperationPtrOutput() ApplicationOperationPtrOutput {
	return i.ToApplicationOperationPtrOutputWithContext(context.Background())
}

func (i ApplicationOperationArgs) ToApplicationOperationPtrOutputWithContext(ctx context.Context) ApplicationOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationOutput).ToApplicationOperationPtrOutputWithContext(ctx)
}

// ApplicationOperationPtrInput is an input type that accepts ApplicationOperationArgs, ApplicationOperationPtr and ApplicationOperationPtrOutput values.
// You can construct a concrete instance of `ApplicationOperationPtrInput` via:
//
//          ApplicationOperationArgs{...}
//
//  or:
//
//          nil
type ApplicationOperationPtrInput interface {
	pulumi.Input

	ToApplicationOperationPtrOutput() ApplicationOperationPtrOutput
	ToApplicationOperationPtrOutputWithContext(context.Context) ApplicationOperationPtrOutput
}

type applicationOperationPtrType ApplicationOperationArgs

func ApplicationOperationPtr(v *ApplicationOperationArgs) ApplicationOperationPtrInput {
	return (*applicationOperationPtrType)(v)
}

func (*applicationOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperation)(nil)).Elem()
}

func (i *applicationOperationPtrType) ToApplicationOperationPtrOutput() ApplicationOperationPtrOutput {
	return i.ToApplicationOperationPtrOutputWithContext(context.Background())
}

func (i *applicationOperationPtrType) ToApplicationOperationPtrOutputWithContext(ctx context.Context) ApplicationOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationPtrOutput)
}

// Operation contains requested operation parameters.
type ApplicationOperationOutput struct{ *pulumi.OutputState }

func (ApplicationOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperation)(nil)).Elem()
}

func (o ApplicationOperationOutput) ToApplicationOperationOutput() ApplicationOperationOutput {
	return o
}

func (o ApplicationOperationOutput) ToApplicationOperationOutputWithContext(ctx context.Context) ApplicationOperationOutput {
	return o
}

func (o ApplicationOperationOutput) ToApplicationOperationPtrOutput() ApplicationOperationPtrOutput {
	return o.ToApplicationOperationPtrOutputWithContext(context.Background())
}

func (o ApplicationOperationOutput) ToApplicationOperationPtrOutputWithContext(ctx context.Context) ApplicationOperationPtrOutput {
	return o.ApplyT(func(v ApplicationOperation) *ApplicationOperation {
		return &v
	}).(ApplicationOperationPtrOutput)
}
func (o ApplicationOperationOutput) Info() ApplicationOperationInfoArrayOutput {
	return o.ApplyT(func(v ApplicationOperation) []ApplicationOperationInfo { return v.Info }).(ApplicationOperationInfoArrayOutput)
}

// OperationInitiator holds information about the operation initiator
func (o ApplicationOperationOutput) InitiatedBy() ApplicationOperationInitiatedByPtrOutput {
	return o.ApplyT(func(v ApplicationOperation) *ApplicationOperationInitiatedBy { return v.InitiatedBy }).(ApplicationOperationInitiatedByPtrOutput)
}

// Retry controls failed sync retry behavior
func (o ApplicationOperationOutput) Retry() ApplicationOperationRetryPtrOutput {
	return o.ApplyT(func(v ApplicationOperation) *ApplicationOperationRetry { return v.Retry }).(ApplicationOperationRetryPtrOutput)
}

// SyncOperation contains sync operation details.
func (o ApplicationOperationOutput) Sync() ApplicationOperationSyncPtrOutput {
	return o.ApplyT(func(v ApplicationOperation) *ApplicationOperationSync { return v.Sync }).(ApplicationOperationSyncPtrOutput)
}

type ApplicationOperationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperation)(nil)).Elem()
}

func (o ApplicationOperationPtrOutput) ToApplicationOperationPtrOutput() ApplicationOperationPtrOutput {
	return o
}

func (o ApplicationOperationPtrOutput) ToApplicationOperationPtrOutputWithContext(ctx context.Context) ApplicationOperationPtrOutput {
	return o
}

func (o ApplicationOperationPtrOutput) Elem() ApplicationOperationOutput {
	return o.ApplyT(func(v *ApplicationOperation) ApplicationOperation { return *v }).(ApplicationOperationOutput)
}

func (o ApplicationOperationPtrOutput) Info() ApplicationOperationInfoArrayOutput {
	return o.ApplyT(func(v *ApplicationOperation) []ApplicationOperationInfo {
		if v == nil {
			return nil
		}
		return v.Info
	}).(ApplicationOperationInfoArrayOutput)
}

// OperationInitiator holds information about the operation initiator
func (o ApplicationOperationPtrOutput) InitiatedBy() ApplicationOperationInitiatedByPtrOutput {
	return o.ApplyT(func(v *ApplicationOperation) *ApplicationOperationInitiatedBy {
		if v == nil {
			return nil
		}
		return v.InitiatedBy
	}).(ApplicationOperationInitiatedByPtrOutput)
}

// Retry controls failed sync retry behavior
func (o ApplicationOperationPtrOutput) Retry() ApplicationOperationRetryPtrOutput {
	return o.ApplyT(func(v *ApplicationOperation) *ApplicationOperationRetry {
		if v == nil {
			return nil
		}
		return v.Retry
	}).(ApplicationOperationRetryPtrOutput)
}

// SyncOperation contains sync operation details.
func (o ApplicationOperationPtrOutput) Sync() ApplicationOperationSyncPtrOutput {
	return o.ApplyT(func(v *ApplicationOperation) *ApplicationOperationSync {
		if v == nil {
			return nil
		}
		return v.Sync
	}).(ApplicationOperationSyncPtrOutput)
}

type ApplicationOperationInfo struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ApplicationOperationInfoInput is an input type that accepts ApplicationOperationInfoArgs and ApplicationOperationInfoOutput values.
// You can construct a concrete instance of `ApplicationOperationInfoInput` via:
//
//          ApplicationOperationInfoArgs{...}
type ApplicationOperationInfoInput interface {
	pulumi.Input

	ToApplicationOperationInfoOutput() ApplicationOperationInfoOutput
	ToApplicationOperationInfoOutputWithContext(context.Context) ApplicationOperationInfoOutput
}

type ApplicationOperationInfoArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApplicationOperationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationInfo)(nil)).Elem()
}

func (i ApplicationOperationInfoArgs) ToApplicationOperationInfoOutput() ApplicationOperationInfoOutput {
	return i.ToApplicationOperationInfoOutputWithContext(context.Background())
}

func (i ApplicationOperationInfoArgs) ToApplicationOperationInfoOutputWithContext(ctx context.Context) ApplicationOperationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationInfoOutput)
}

// ApplicationOperationInfoArrayInput is an input type that accepts ApplicationOperationInfoArray and ApplicationOperationInfoArrayOutput values.
// You can construct a concrete instance of `ApplicationOperationInfoArrayInput` via:
//
//          ApplicationOperationInfoArray{ ApplicationOperationInfoArgs{...} }
type ApplicationOperationInfoArrayInput interface {
	pulumi.Input

	ToApplicationOperationInfoArrayOutput() ApplicationOperationInfoArrayOutput
	ToApplicationOperationInfoArrayOutputWithContext(context.Context) ApplicationOperationInfoArrayOutput
}

type ApplicationOperationInfoArray []ApplicationOperationInfoInput

func (ApplicationOperationInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOperationInfo)(nil)).Elem()
}

func (i ApplicationOperationInfoArray) ToApplicationOperationInfoArrayOutput() ApplicationOperationInfoArrayOutput {
	return i.ToApplicationOperationInfoArrayOutputWithContext(context.Background())
}

func (i ApplicationOperationInfoArray) ToApplicationOperationInfoArrayOutputWithContext(ctx context.Context) ApplicationOperationInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationInfoArrayOutput)
}

type ApplicationOperationInfoOutput struct{ *pulumi.OutputState }

func (ApplicationOperationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationInfo)(nil)).Elem()
}

func (o ApplicationOperationInfoOutput) ToApplicationOperationInfoOutput() ApplicationOperationInfoOutput {
	return o
}

func (o ApplicationOperationInfoOutput) ToApplicationOperationInfoOutputWithContext(ctx context.Context) ApplicationOperationInfoOutput {
	return o
}

func (o ApplicationOperationInfoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOperationInfo) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationOperationInfoOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOperationInfo) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationOperationInfoArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOperationInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOperationInfo)(nil)).Elem()
}

func (o ApplicationOperationInfoArrayOutput) ToApplicationOperationInfoArrayOutput() ApplicationOperationInfoArrayOutput {
	return o
}

func (o ApplicationOperationInfoArrayOutput) ToApplicationOperationInfoArrayOutputWithContext(ctx context.Context) ApplicationOperationInfoArrayOutput {
	return o
}

func (o ApplicationOperationInfoArrayOutput) Index(i pulumi.IntInput) ApplicationOperationInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOperationInfo {
		return vs[0].([]ApplicationOperationInfo)[vs[1].(int)]
	}).(ApplicationOperationInfoOutput)
}

// OperationInitiator holds information about the operation initiator
type ApplicationOperationInitiatedBy struct {
	// Automated is set to true if operation was initiated automatically by the application controller.
	Automated *bool `pulumi:"automated"`
	// Name of a user who started operation.
	Username *string `pulumi:"username"`
}

// ApplicationOperationInitiatedByInput is an input type that accepts ApplicationOperationInitiatedByArgs and ApplicationOperationInitiatedByOutput values.
// You can construct a concrete instance of `ApplicationOperationInitiatedByInput` via:
//
//          ApplicationOperationInitiatedByArgs{...}
type ApplicationOperationInitiatedByInput interface {
	pulumi.Input

	ToApplicationOperationInitiatedByOutput() ApplicationOperationInitiatedByOutput
	ToApplicationOperationInitiatedByOutputWithContext(context.Context) ApplicationOperationInitiatedByOutput
}

// OperationInitiator holds information about the operation initiator
type ApplicationOperationInitiatedByArgs struct {
	// Automated is set to true if operation was initiated automatically by the application controller.
	Automated pulumi.BoolPtrInput `pulumi:"automated"`
	// Name of a user who started operation.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ApplicationOperationInitiatedByArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationInitiatedBy)(nil)).Elem()
}

func (i ApplicationOperationInitiatedByArgs) ToApplicationOperationInitiatedByOutput() ApplicationOperationInitiatedByOutput {
	return i.ToApplicationOperationInitiatedByOutputWithContext(context.Background())
}

func (i ApplicationOperationInitiatedByArgs) ToApplicationOperationInitiatedByOutputWithContext(ctx context.Context) ApplicationOperationInitiatedByOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationInitiatedByOutput)
}

func (i ApplicationOperationInitiatedByArgs) ToApplicationOperationInitiatedByPtrOutput() ApplicationOperationInitiatedByPtrOutput {
	return i.ToApplicationOperationInitiatedByPtrOutputWithContext(context.Background())
}

func (i ApplicationOperationInitiatedByArgs) ToApplicationOperationInitiatedByPtrOutputWithContext(ctx context.Context) ApplicationOperationInitiatedByPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationInitiatedByOutput).ToApplicationOperationInitiatedByPtrOutputWithContext(ctx)
}

// ApplicationOperationInitiatedByPtrInput is an input type that accepts ApplicationOperationInitiatedByArgs, ApplicationOperationInitiatedByPtr and ApplicationOperationInitiatedByPtrOutput values.
// You can construct a concrete instance of `ApplicationOperationInitiatedByPtrInput` via:
//
//          ApplicationOperationInitiatedByArgs{...}
//
//  or:
//
//          nil
type ApplicationOperationInitiatedByPtrInput interface {
	pulumi.Input

	ToApplicationOperationInitiatedByPtrOutput() ApplicationOperationInitiatedByPtrOutput
	ToApplicationOperationInitiatedByPtrOutputWithContext(context.Context) ApplicationOperationInitiatedByPtrOutput
}

type applicationOperationInitiatedByPtrType ApplicationOperationInitiatedByArgs

func ApplicationOperationInitiatedByPtr(v *ApplicationOperationInitiatedByArgs) ApplicationOperationInitiatedByPtrInput {
	return (*applicationOperationInitiatedByPtrType)(v)
}

func (*applicationOperationInitiatedByPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationInitiatedBy)(nil)).Elem()
}

func (i *applicationOperationInitiatedByPtrType) ToApplicationOperationInitiatedByPtrOutput() ApplicationOperationInitiatedByPtrOutput {
	return i.ToApplicationOperationInitiatedByPtrOutputWithContext(context.Background())
}

func (i *applicationOperationInitiatedByPtrType) ToApplicationOperationInitiatedByPtrOutputWithContext(ctx context.Context) ApplicationOperationInitiatedByPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationInitiatedByPtrOutput)
}

// OperationInitiator holds information about the operation initiator
type ApplicationOperationInitiatedByOutput struct{ *pulumi.OutputState }

func (ApplicationOperationInitiatedByOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationInitiatedBy)(nil)).Elem()
}

func (o ApplicationOperationInitiatedByOutput) ToApplicationOperationInitiatedByOutput() ApplicationOperationInitiatedByOutput {
	return o
}

func (o ApplicationOperationInitiatedByOutput) ToApplicationOperationInitiatedByOutputWithContext(ctx context.Context) ApplicationOperationInitiatedByOutput {
	return o
}

func (o ApplicationOperationInitiatedByOutput) ToApplicationOperationInitiatedByPtrOutput() ApplicationOperationInitiatedByPtrOutput {
	return o.ToApplicationOperationInitiatedByPtrOutputWithContext(context.Background())
}

func (o ApplicationOperationInitiatedByOutput) ToApplicationOperationInitiatedByPtrOutputWithContext(ctx context.Context) ApplicationOperationInitiatedByPtrOutput {
	return o.ApplyT(func(v ApplicationOperationInitiatedBy) *ApplicationOperationInitiatedBy {
		return &v
	}).(ApplicationOperationInitiatedByPtrOutput)
}

// Automated is set to true if operation was initiated automatically by the application controller.
func (o ApplicationOperationInitiatedByOutput) Automated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOperationInitiatedBy) *bool { return v.Automated }).(pulumi.BoolPtrOutput)
}

// Name of a user who started operation.
func (o ApplicationOperationInitiatedByOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationInitiatedBy) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ApplicationOperationInitiatedByPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOperationInitiatedByPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationInitiatedBy)(nil)).Elem()
}

func (o ApplicationOperationInitiatedByPtrOutput) ToApplicationOperationInitiatedByPtrOutput() ApplicationOperationInitiatedByPtrOutput {
	return o
}

func (o ApplicationOperationInitiatedByPtrOutput) ToApplicationOperationInitiatedByPtrOutputWithContext(ctx context.Context) ApplicationOperationInitiatedByPtrOutput {
	return o
}

func (o ApplicationOperationInitiatedByPtrOutput) Elem() ApplicationOperationInitiatedByOutput {
	return o.ApplyT(func(v *ApplicationOperationInitiatedBy) ApplicationOperationInitiatedBy { return *v }).(ApplicationOperationInitiatedByOutput)
}

// Automated is set to true if operation was initiated automatically by the application controller.
func (o ApplicationOperationInitiatedByPtrOutput) Automated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationInitiatedBy) *bool {
		if v == nil {
			return nil
		}
		return v.Automated
	}).(pulumi.BoolPtrOutput)
}

// Name of a user who started operation.
func (o ApplicationOperationInitiatedByPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationInitiatedBy) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Retry controls failed sync retry behavior
type ApplicationOperationRetry struct {
	// Backoff is a backoff strategy
	Backoff *ApplicationOperationRetryBackoff `pulumi:"backoff"`
	// Limit is the maximum number of attempts when retrying a container
	Limit *int `pulumi:"limit"`
}

// ApplicationOperationRetryInput is an input type that accepts ApplicationOperationRetryArgs and ApplicationOperationRetryOutput values.
// You can construct a concrete instance of `ApplicationOperationRetryInput` via:
//
//          ApplicationOperationRetryArgs{...}
type ApplicationOperationRetryInput interface {
	pulumi.Input

	ToApplicationOperationRetryOutput() ApplicationOperationRetryOutput
	ToApplicationOperationRetryOutputWithContext(context.Context) ApplicationOperationRetryOutput
}

// Retry controls failed sync retry behavior
type ApplicationOperationRetryArgs struct {
	// Backoff is a backoff strategy
	Backoff ApplicationOperationRetryBackoffPtrInput `pulumi:"backoff"`
	// Limit is the maximum number of attempts when retrying a container
	Limit pulumi.IntPtrInput `pulumi:"limit"`
}

func (ApplicationOperationRetryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationRetry)(nil)).Elem()
}

func (i ApplicationOperationRetryArgs) ToApplicationOperationRetryOutput() ApplicationOperationRetryOutput {
	return i.ToApplicationOperationRetryOutputWithContext(context.Background())
}

func (i ApplicationOperationRetryArgs) ToApplicationOperationRetryOutputWithContext(ctx context.Context) ApplicationOperationRetryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationRetryOutput)
}

func (i ApplicationOperationRetryArgs) ToApplicationOperationRetryPtrOutput() ApplicationOperationRetryPtrOutput {
	return i.ToApplicationOperationRetryPtrOutputWithContext(context.Background())
}

func (i ApplicationOperationRetryArgs) ToApplicationOperationRetryPtrOutputWithContext(ctx context.Context) ApplicationOperationRetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationRetryOutput).ToApplicationOperationRetryPtrOutputWithContext(ctx)
}

// ApplicationOperationRetryPtrInput is an input type that accepts ApplicationOperationRetryArgs, ApplicationOperationRetryPtr and ApplicationOperationRetryPtrOutput values.
// You can construct a concrete instance of `ApplicationOperationRetryPtrInput` via:
//
//          ApplicationOperationRetryArgs{...}
//
//  or:
//
//          nil
type ApplicationOperationRetryPtrInput interface {
	pulumi.Input

	ToApplicationOperationRetryPtrOutput() ApplicationOperationRetryPtrOutput
	ToApplicationOperationRetryPtrOutputWithContext(context.Context) ApplicationOperationRetryPtrOutput
}

type applicationOperationRetryPtrType ApplicationOperationRetryArgs

func ApplicationOperationRetryPtr(v *ApplicationOperationRetryArgs) ApplicationOperationRetryPtrInput {
	return (*applicationOperationRetryPtrType)(v)
}

func (*applicationOperationRetryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationRetry)(nil)).Elem()
}

func (i *applicationOperationRetryPtrType) ToApplicationOperationRetryPtrOutput() ApplicationOperationRetryPtrOutput {
	return i.ToApplicationOperationRetryPtrOutputWithContext(context.Background())
}

func (i *applicationOperationRetryPtrType) ToApplicationOperationRetryPtrOutputWithContext(ctx context.Context) ApplicationOperationRetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationRetryPtrOutput)
}

// Retry controls failed sync retry behavior
type ApplicationOperationRetryOutput struct{ *pulumi.OutputState }

func (ApplicationOperationRetryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationRetry)(nil)).Elem()
}

func (o ApplicationOperationRetryOutput) ToApplicationOperationRetryOutput() ApplicationOperationRetryOutput {
	return o
}

func (o ApplicationOperationRetryOutput) ToApplicationOperationRetryOutputWithContext(ctx context.Context) ApplicationOperationRetryOutput {
	return o
}

func (o ApplicationOperationRetryOutput) ToApplicationOperationRetryPtrOutput() ApplicationOperationRetryPtrOutput {
	return o.ToApplicationOperationRetryPtrOutputWithContext(context.Background())
}

func (o ApplicationOperationRetryOutput) ToApplicationOperationRetryPtrOutputWithContext(ctx context.Context) ApplicationOperationRetryPtrOutput {
	return o.ApplyT(func(v ApplicationOperationRetry) *ApplicationOperationRetry {
		return &v
	}).(ApplicationOperationRetryPtrOutput)
}

// Backoff is a backoff strategy
func (o ApplicationOperationRetryOutput) Backoff() ApplicationOperationRetryBackoffPtrOutput {
	return o.ApplyT(func(v ApplicationOperationRetry) *ApplicationOperationRetryBackoff { return v.Backoff }).(ApplicationOperationRetryBackoffPtrOutput)
}

// Limit is the maximum number of attempts when retrying a container
func (o ApplicationOperationRetryOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationOperationRetry) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

type ApplicationOperationRetryPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOperationRetryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationRetry)(nil)).Elem()
}

func (o ApplicationOperationRetryPtrOutput) ToApplicationOperationRetryPtrOutput() ApplicationOperationRetryPtrOutput {
	return o
}

func (o ApplicationOperationRetryPtrOutput) ToApplicationOperationRetryPtrOutputWithContext(ctx context.Context) ApplicationOperationRetryPtrOutput {
	return o
}

func (o ApplicationOperationRetryPtrOutput) Elem() ApplicationOperationRetryOutput {
	return o.ApplyT(func(v *ApplicationOperationRetry) ApplicationOperationRetry { return *v }).(ApplicationOperationRetryOutput)
}

// Backoff is a backoff strategy
func (o ApplicationOperationRetryPtrOutput) Backoff() ApplicationOperationRetryBackoffPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationRetry) *ApplicationOperationRetryBackoff {
		if v == nil {
			return nil
		}
		return v.Backoff
	}).(ApplicationOperationRetryBackoffPtrOutput)
}

// Limit is the maximum number of attempts when retrying a container
func (o ApplicationOperationRetryPtrOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationRetry) *int {
		if v == nil {
			return nil
		}
		return v.Limit
	}).(pulumi.IntPtrOutput)
}

// Backoff is a backoff strategy
type ApplicationOperationRetryBackoff struct {
	// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
	Duration *string `pulumi:"duration"`
	// Factor is a factor to multiply the base duration after each failed retry
	Factor *int `pulumi:"factor"`
	// MaxDuration is the maximum amount of time allowed for the backoff strategy
	MaxDuration *string `pulumi:"maxDuration"`
}

// ApplicationOperationRetryBackoffInput is an input type that accepts ApplicationOperationRetryBackoffArgs and ApplicationOperationRetryBackoffOutput values.
// You can construct a concrete instance of `ApplicationOperationRetryBackoffInput` via:
//
//          ApplicationOperationRetryBackoffArgs{...}
type ApplicationOperationRetryBackoffInput interface {
	pulumi.Input

	ToApplicationOperationRetryBackoffOutput() ApplicationOperationRetryBackoffOutput
	ToApplicationOperationRetryBackoffOutputWithContext(context.Context) ApplicationOperationRetryBackoffOutput
}

// Backoff is a backoff strategy
type ApplicationOperationRetryBackoffArgs struct {
	// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// Factor is a factor to multiply the base duration after each failed retry
	Factor pulumi.IntPtrInput `pulumi:"factor"`
	// MaxDuration is the maximum amount of time allowed for the backoff strategy
	MaxDuration pulumi.StringPtrInput `pulumi:"maxDuration"`
}

func (ApplicationOperationRetryBackoffArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationRetryBackoff)(nil)).Elem()
}

func (i ApplicationOperationRetryBackoffArgs) ToApplicationOperationRetryBackoffOutput() ApplicationOperationRetryBackoffOutput {
	return i.ToApplicationOperationRetryBackoffOutputWithContext(context.Background())
}

func (i ApplicationOperationRetryBackoffArgs) ToApplicationOperationRetryBackoffOutputWithContext(ctx context.Context) ApplicationOperationRetryBackoffOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationRetryBackoffOutput)
}

func (i ApplicationOperationRetryBackoffArgs) ToApplicationOperationRetryBackoffPtrOutput() ApplicationOperationRetryBackoffPtrOutput {
	return i.ToApplicationOperationRetryBackoffPtrOutputWithContext(context.Background())
}

func (i ApplicationOperationRetryBackoffArgs) ToApplicationOperationRetryBackoffPtrOutputWithContext(ctx context.Context) ApplicationOperationRetryBackoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationRetryBackoffOutput).ToApplicationOperationRetryBackoffPtrOutputWithContext(ctx)
}

// ApplicationOperationRetryBackoffPtrInput is an input type that accepts ApplicationOperationRetryBackoffArgs, ApplicationOperationRetryBackoffPtr and ApplicationOperationRetryBackoffPtrOutput values.
// You can construct a concrete instance of `ApplicationOperationRetryBackoffPtrInput` via:
//
//          ApplicationOperationRetryBackoffArgs{...}
//
//  or:
//
//          nil
type ApplicationOperationRetryBackoffPtrInput interface {
	pulumi.Input

	ToApplicationOperationRetryBackoffPtrOutput() ApplicationOperationRetryBackoffPtrOutput
	ToApplicationOperationRetryBackoffPtrOutputWithContext(context.Context) ApplicationOperationRetryBackoffPtrOutput
}

type applicationOperationRetryBackoffPtrType ApplicationOperationRetryBackoffArgs

func ApplicationOperationRetryBackoffPtr(v *ApplicationOperationRetryBackoffArgs) ApplicationOperationRetryBackoffPtrInput {
	return (*applicationOperationRetryBackoffPtrType)(v)
}

func (*applicationOperationRetryBackoffPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationRetryBackoff)(nil)).Elem()
}

func (i *applicationOperationRetryBackoffPtrType) ToApplicationOperationRetryBackoffPtrOutput() ApplicationOperationRetryBackoffPtrOutput {
	return i.ToApplicationOperationRetryBackoffPtrOutputWithContext(context.Background())
}

func (i *applicationOperationRetryBackoffPtrType) ToApplicationOperationRetryBackoffPtrOutputWithContext(ctx context.Context) ApplicationOperationRetryBackoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationRetryBackoffPtrOutput)
}

// Backoff is a backoff strategy
type ApplicationOperationRetryBackoffOutput struct{ *pulumi.OutputState }

func (ApplicationOperationRetryBackoffOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationRetryBackoff)(nil)).Elem()
}

func (o ApplicationOperationRetryBackoffOutput) ToApplicationOperationRetryBackoffOutput() ApplicationOperationRetryBackoffOutput {
	return o
}

func (o ApplicationOperationRetryBackoffOutput) ToApplicationOperationRetryBackoffOutputWithContext(ctx context.Context) ApplicationOperationRetryBackoffOutput {
	return o
}

func (o ApplicationOperationRetryBackoffOutput) ToApplicationOperationRetryBackoffPtrOutput() ApplicationOperationRetryBackoffPtrOutput {
	return o.ToApplicationOperationRetryBackoffPtrOutputWithContext(context.Background())
}

func (o ApplicationOperationRetryBackoffOutput) ToApplicationOperationRetryBackoffPtrOutputWithContext(ctx context.Context) ApplicationOperationRetryBackoffPtrOutput {
	return o.ApplyT(func(v ApplicationOperationRetryBackoff) *ApplicationOperationRetryBackoff {
		return &v
	}).(ApplicationOperationRetryBackoffPtrOutput)
}

// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
func (o ApplicationOperationRetryBackoffOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationRetryBackoff) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// Factor is a factor to multiply the base duration after each failed retry
func (o ApplicationOperationRetryBackoffOutput) Factor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationOperationRetryBackoff) *int { return v.Factor }).(pulumi.IntPtrOutput)
}

// MaxDuration is the maximum amount of time allowed for the backoff strategy
func (o ApplicationOperationRetryBackoffOutput) MaxDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationRetryBackoff) *string { return v.MaxDuration }).(pulumi.StringPtrOutput)
}

type ApplicationOperationRetryBackoffPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOperationRetryBackoffPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationRetryBackoff)(nil)).Elem()
}

func (o ApplicationOperationRetryBackoffPtrOutput) ToApplicationOperationRetryBackoffPtrOutput() ApplicationOperationRetryBackoffPtrOutput {
	return o
}

func (o ApplicationOperationRetryBackoffPtrOutput) ToApplicationOperationRetryBackoffPtrOutputWithContext(ctx context.Context) ApplicationOperationRetryBackoffPtrOutput {
	return o
}

func (o ApplicationOperationRetryBackoffPtrOutput) Elem() ApplicationOperationRetryBackoffOutput {
	return o.ApplyT(func(v *ApplicationOperationRetryBackoff) ApplicationOperationRetryBackoff { return *v }).(ApplicationOperationRetryBackoffOutput)
}

// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
func (o ApplicationOperationRetryBackoffPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationRetryBackoff) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// Factor is a factor to multiply the base duration after each failed retry
func (o ApplicationOperationRetryBackoffPtrOutput) Factor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationRetryBackoff) *int {
		if v == nil {
			return nil
		}
		return v.Factor
	}).(pulumi.IntPtrOutput)
}

// MaxDuration is the maximum amount of time allowed for the backoff strategy
func (o ApplicationOperationRetryBackoffPtrOutput) MaxDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationRetryBackoff) *string {
		if v == nil {
			return nil
		}
		return v.MaxDuration
	}).(pulumi.StringPtrOutput)
}

// SyncOperation contains sync operation details.
type ApplicationOperationSync struct {
	// DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
	DryRun *bool `pulumi:"dryRun"`
	// Manifests is an optional field that overrides sync source with a local directory for development
	Manifests []string `pulumi:"manifests"`
	// Prune deletes resources that are no longer tracked in git
	Prune *bool `pulumi:"prune"`
	// Resources describes which resources to sync
	Resources []ApplicationOperationSyncResources `pulumi:"resources"`
	// Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
	Revision *string `pulumi:"revision"`
	// Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
	Source *ApplicationOperationSyncSource `pulumi:"source"`
	// SyncOptions provide per-sync sync-options, e.g. Validate=false
	SyncOptions []string `pulumi:"syncOptions"`
	// SyncStrategy describes how to perform the sync
	SyncStrategy *ApplicationOperationSyncSyncStrategy `pulumi:"syncStrategy"`
}

// ApplicationOperationSyncInput is an input type that accepts ApplicationOperationSyncArgs and ApplicationOperationSyncOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncInput` via:
//
//          ApplicationOperationSyncArgs{...}
type ApplicationOperationSyncInput interface {
	pulumi.Input

	ToApplicationOperationSyncOutput() ApplicationOperationSyncOutput
	ToApplicationOperationSyncOutputWithContext(context.Context) ApplicationOperationSyncOutput
}

// SyncOperation contains sync operation details.
type ApplicationOperationSyncArgs struct {
	// DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
	DryRun pulumi.BoolPtrInput `pulumi:"dryRun"`
	// Manifests is an optional field that overrides sync source with a local directory for development
	Manifests pulumi.StringArrayInput `pulumi:"manifests"`
	// Prune deletes resources that are no longer tracked in git
	Prune pulumi.BoolPtrInput `pulumi:"prune"`
	// Resources describes which resources to sync
	Resources ApplicationOperationSyncResourcesArrayInput `pulumi:"resources"`
	// Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
	Source ApplicationOperationSyncSourcePtrInput `pulumi:"source"`
	// SyncOptions provide per-sync sync-options, e.g. Validate=false
	SyncOptions pulumi.StringArrayInput `pulumi:"syncOptions"`
	// SyncStrategy describes how to perform the sync
	SyncStrategy ApplicationOperationSyncSyncStrategyPtrInput `pulumi:"syncStrategy"`
}

func (ApplicationOperationSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSync)(nil)).Elem()
}

func (i ApplicationOperationSyncArgs) ToApplicationOperationSyncOutput() ApplicationOperationSyncOutput {
	return i.ToApplicationOperationSyncOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncArgs) ToApplicationOperationSyncOutputWithContext(ctx context.Context) ApplicationOperationSyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncOutput)
}

func (i ApplicationOperationSyncArgs) ToApplicationOperationSyncPtrOutput() ApplicationOperationSyncPtrOutput {
	return i.ToApplicationOperationSyncPtrOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncArgs) ToApplicationOperationSyncPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncOutput).ToApplicationOperationSyncPtrOutputWithContext(ctx)
}

// ApplicationOperationSyncPtrInput is an input type that accepts ApplicationOperationSyncArgs, ApplicationOperationSyncPtr and ApplicationOperationSyncPtrOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncPtrInput` via:
//
//          ApplicationOperationSyncArgs{...}
//
//  or:
//
//          nil
type ApplicationOperationSyncPtrInput interface {
	pulumi.Input

	ToApplicationOperationSyncPtrOutput() ApplicationOperationSyncPtrOutput
	ToApplicationOperationSyncPtrOutputWithContext(context.Context) ApplicationOperationSyncPtrOutput
}

type applicationOperationSyncPtrType ApplicationOperationSyncArgs

func ApplicationOperationSyncPtr(v *ApplicationOperationSyncArgs) ApplicationOperationSyncPtrInput {
	return (*applicationOperationSyncPtrType)(v)
}

func (*applicationOperationSyncPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSync)(nil)).Elem()
}

func (i *applicationOperationSyncPtrType) ToApplicationOperationSyncPtrOutput() ApplicationOperationSyncPtrOutput {
	return i.ToApplicationOperationSyncPtrOutputWithContext(context.Background())
}

func (i *applicationOperationSyncPtrType) ToApplicationOperationSyncPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncPtrOutput)
}

// SyncOperation contains sync operation details.
type ApplicationOperationSyncOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSync)(nil)).Elem()
}

func (o ApplicationOperationSyncOutput) ToApplicationOperationSyncOutput() ApplicationOperationSyncOutput {
	return o
}

func (o ApplicationOperationSyncOutput) ToApplicationOperationSyncOutputWithContext(ctx context.Context) ApplicationOperationSyncOutput {
	return o
}

func (o ApplicationOperationSyncOutput) ToApplicationOperationSyncPtrOutput() ApplicationOperationSyncPtrOutput {
	return o.ToApplicationOperationSyncPtrOutputWithContext(context.Background())
}

func (o ApplicationOperationSyncOutput) ToApplicationOperationSyncPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSync) *ApplicationOperationSync {
		return &v
	}).(ApplicationOperationSyncPtrOutput)
}

// DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
func (o ApplicationOperationSyncOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSync) *bool { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// Manifests is an optional field that overrides sync source with a local directory for development
func (o ApplicationOperationSyncOutput) Manifests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationOperationSync) []string { return v.Manifests }).(pulumi.StringArrayOutput)
}

// Prune deletes resources that are no longer tracked in git
func (o ApplicationOperationSyncOutput) Prune() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSync) *bool { return v.Prune }).(pulumi.BoolPtrOutput)
}

// Resources describes which resources to sync
func (o ApplicationOperationSyncOutput) Resources() ApplicationOperationSyncResourcesArrayOutput {
	return o.ApplyT(func(v ApplicationOperationSync) []ApplicationOperationSyncResources { return v.Resources }).(ApplicationOperationSyncResourcesArrayOutput)
}

// Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
func (o ApplicationOperationSyncOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSync) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
func (o ApplicationOperationSyncOutput) Source() ApplicationOperationSyncSourcePtrOutput {
	return o.ApplyT(func(v ApplicationOperationSync) *ApplicationOperationSyncSource { return v.Source }).(ApplicationOperationSyncSourcePtrOutput)
}

// SyncOptions provide per-sync sync-options, e.g. Validate=false
func (o ApplicationOperationSyncOutput) SyncOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationOperationSync) []string { return v.SyncOptions }).(pulumi.StringArrayOutput)
}

// SyncStrategy describes how to perform the sync
func (o ApplicationOperationSyncOutput) SyncStrategy() ApplicationOperationSyncSyncStrategyPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSync) *ApplicationOperationSyncSyncStrategy { return v.SyncStrategy }).(ApplicationOperationSyncSyncStrategyPtrOutput)
}

type ApplicationOperationSyncPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSync)(nil)).Elem()
}

func (o ApplicationOperationSyncPtrOutput) ToApplicationOperationSyncPtrOutput() ApplicationOperationSyncPtrOutput {
	return o
}

func (o ApplicationOperationSyncPtrOutput) ToApplicationOperationSyncPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncPtrOutput {
	return o
}

func (o ApplicationOperationSyncPtrOutput) Elem() ApplicationOperationSyncOutput {
	return o.ApplyT(func(v *ApplicationOperationSync) ApplicationOperationSync { return *v }).(ApplicationOperationSyncOutput)
}

// DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
func (o ApplicationOperationSyncPtrOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSync) *bool {
		if v == nil {
			return nil
		}
		return v.DryRun
	}).(pulumi.BoolPtrOutput)
}

// Manifests is an optional field that overrides sync source with a local directory for development
func (o ApplicationOperationSyncPtrOutput) Manifests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationOperationSync) []string {
		if v == nil {
			return nil
		}
		return v.Manifests
	}).(pulumi.StringArrayOutput)
}

// Prune deletes resources that are no longer tracked in git
func (o ApplicationOperationSyncPtrOutput) Prune() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSync) *bool {
		if v == nil {
			return nil
		}
		return v.Prune
	}).(pulumi.BoolPtrOutput)
}

// Resources describes which resources to sync
func (o ApplicationOperationSyncPtrOutput) Resources() ApplicationOperationSyncResourcesArrayOutput {
	return o.ApplyT(func(v *ApplicationOperationSync) []ApplicationOperationSyncResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ApplicationOperationSyncResourcesArrayOutput)
}

// Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
func (o ApplicationOperationSyncPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSync) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
func (o ApplicationOperationSyncPtrOutput) Source() ApplicationOperationSyncSourcePtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSync) *ApplicationOperationSyncSource {
		if v == nil {
			return nil
		}
		return v.Source
	}).(ApplicationOperationSyncSourcePtrOutput)
}

// SyncOptions provide per-sync sync-options, e.g. Validate=false
func (o ApplicationOperationSyncPtrOutput) SyncOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationOperationSync) []string {
		if v == nil {
			return nil
		}
		return v.SyncOptions
	}).(pulumi.StringArrayOutput)
}

// SyncStrategy describes how to perform the sync
func (o ApplicationOperationSyncPtrOutput) SyncStrategy() ApplicationOperationSyncSyncStrategyPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSync) *ApplicationOperationSyncSyncStrategy {
		if v == nil {
			return nil
		}
		return v.SyncStrategy
	}).(ApplicationOperationSyncSyncStrategyPtrOutput)
}

// SyncOperationResource contains resources to sync.
type ApplicationOperationSyncResources struct {
	Group     *string `pulumi:"group"`
	Kind      string  `pulumi:"kind"`
	Name      string  `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
}

// ApplicationOperationSyncResourcesInput is an input type that accepts ApplicationOperationSyncResourcesArgs and ApplicationOperationSyncResourcesOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncResourcesInput` via:
//
//          ApplicationOperationSyncResourcesArgs{...}
type ApplicationOperationSyncResourcesInput interface {
	pulumi.Input

	ToApplicationOperationSyncResourcesOutput() ApplicationOperationSyncResourcesOutput
	ToApplicationOperationSyncResourcesOutputWithContext(context.Context) ApplicationOperationSyncResourcesOutput
}

// SyncOperationResource contains resources to sync.
type ApplicationOperationSyncResourcesArgs struct {
	Group     pulumi.StringPtrInput `pulumi:"group"`
	Kind      pulumi.StringInput    `pulumi:"kind"`
	Name      pulumi.StringInput    `pulumi:"name"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ApplicationOperationSyncResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncResources)(nil)).Elem()
}

func (i ApplicationOperationSyncResourcesArgs) ToApplicationOperationSyncResourcesOutput() ApplicationOperationSyncResourcesOutput {
	return i.ToApplicationOperationSyncResourcesOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncResourcesArgs) ToApplicationOperationSyncResourcesOutputWithContext(ctx context.Context) ApplicationOperationSyncResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncResourcesOutput)
}

// ApplicationOperationSyncResourcesArrayInput is an input type that accepts ApplicationOperationSyncResourcesArray and ApplicationOperationSyncResourcesArrayOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncResourcesArrayInput` via:
//
//          ApplicationOperationSyncResourcesArray{ ApplicationOperationSyncResourcesArgs{...} }
type ApplicationOperationSyncResourcesArrayInput interface {
	pulumi.Input

	ToApplicationOperationSyncResourcesArrayOutput() ApplicationOperationSyncResourcesArrayOutput
	ToApplicationOperationSyncResourcesArrayOutputWithContext(context.Context) ApplicationOperationSyncResourcesArrayOutput
}

type ApplicationOperationSyncResourcesArray []ApplicationOperationSyncResourcesInput

func (ApplicationOperationSyncResourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOperationSyncResources)(nil)).Elem()
}

func (i ApplicationOperationSyncResourcesArray) ToApplicationOperationSyncResourcesArrayOutput() ApplicationOperationSyncResourcesArrayOutput {
	return i.ToApplicationOperationSyncResourcesArrayOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncResourcesArray) ToApplicationOperationSyncResourcesArrayOutputWithContext(ctx context.Context) ApplicationOperationSyncResourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncResourcesArrayOutput)
}

// SyncOperationResource contains resources to sync.
type ApplicationOperationSyncResourcesOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncResources)(nil)).Elem()
}

func (o ApplicationOperationSyncResourcesOutput) ToApplicationOperationSyncResourcesOutput() ApplicationOperationSyncResourcesOutput {
	return o
}

func (o ApplicationOperationSyncResourcesOutput) ToApplicationOperationSyncResourcesOutputWithContext(ctx context.Context) ApplicationOperationSyncResourcesOutput {
	return o
}

func (o ApplicationOperationSyncResourcesOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncResources) *string { return v.Group }).(pulumi.StringPtrOutput)
}

func (o ApplicationOperationSyncResourcesOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOperationSyncResources) string { return v.Kind }).(pulumi.StringOutput)
}

func (o ApplicationOperationSyncResourcesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOperationSyncResources) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationOperationSyncResourcesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncResources) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ApplicationOperationSyncResourcesArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncResourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOperationSyncResources)(nil)).Elem()
}

func (o ApplicationOperationSyncResourcesArrayOutput) ToApplicationOperationSyncResourcesArrayOutput() ApplicationOperationSyncResourcesArrayOutput {
	return o
}

func (o ApplicationOperationSyncResourcesArrayOutput) ToApplicationOperationSyncResourcesArrayOutputWithContext(ctx context.Context) ApplicationOperationSyncResourcesArrayOutput {
	return o
}

func (o ApplicationOperationSyncResourcesArrayOutput) Index(i pulumi.IntInput) ApplicationOperationSyncResourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOperationSyncResources {
		return vs[0].([]ApplicationOperationSyncResources)[vs[1].(int)]
	}).(ApplicationOperationSyncResourcesOutput)
}

// Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
type ApplicationOperationSyncSource struct {
	// Chart is a Helm chart name
	Chart *string `pulumi:"chart"`
	// Directory holds path/directory specific options
	Directory *ApplicationOperationSyncSourceDirectory `pulumi:"directory"`
	// Helm holds helm specific options
	Helm *ApplicationOperationSyncSourceHelm `pulumi:"helm"`
	// Ksonnet holds ksonnet specific options
	Ksonnet *ApplicationOperationSyncSourceKsonnet `pulumi:"ksonnet"`
	// Kustomize holds kustomize specific options
	Kustomize *ApplicationOperationSyncSourceKustomize `pulumi:"kustomize"`
	// Path is a directory path within the Git repository
	Path *string `pulumi:"path"`
	// ConfigManagementPlugin holds config management plugin specific options
	Plugin *ApplicationOperationSyncSourcePlugin `pulumi:"plugin"`
	// RepoURL is the repository URL of the application manifests
	RepoURL string `pulumi:"repoURL"`
	// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
	TargetRevision *string `pulumi:"targetRevision"`
}

// ApplicationOperationSyncSourceInput is an input type that accepts ApplicationOperationSyncSourceArgs and ApplicationOperationSyncSourceOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceInput` via:
//
//          ApplicationOperationSyncSourceArgs{...}
type ApplicationOperationSyncSourceInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceOutput() ApplicationOperationSyncSourceOutput
	ToApplicationOperationSyncSourceOutputWithContext(context.Context) ApplicationOperationSyncSourceOutput
}

// Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
type ApplicationOperationSyncSourceArgs struct {
	// Chart is a Helm chart name
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// Directory holds path/directory specific options
	Directory ApplicationOperationSyncSourceDirectoryPtrInput `pulumi:"directory"`
	// Helm holds helm specific options
	Helm ApplicationOperationSyncSourceHelmPtrInput `pulumi:"helm"`
	// Ksonnet holds ksonnet specific options
	Ksonnet ApplicationOperationSyncSourceKsonnetPtrInput `pulumi:"ksonnet"`
	// Kustomize holds kustomize specific options
	Kustomize ApplicationOperationSyncSourceKustomizePtrInput `pulumi:"kustomize"`
	// Path is a directory path within the Git repository
	Path pulumi.StringPtrInput `pulumi:"path"`
	// ConfigManagementPlugin holds config management plugin specific options
	Plugin ApplicationOperationSyncSourcePluginPtrInput `pulumi:"plugin"`
	// RepoURL is the repository URL of the application manifests
	RepoURL pulumi.StringInput `pulumi:"repoURL"`
	// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
	TargetRevision pulumi.StringPtrInput `pulumi:"targetRevision"`
}

func (ApplicationOperationSyncSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSource)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceArgs) ToApplicationOperationSyncSourceOutput() ApplicationOperationSyncSourceOutput {
	return i.ToApplicationOperationSyncSourceOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceArgs) ToApplicationOperationSyncSourceOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceOutput)
}

func (i ApplicationOperationSyncSourceArgs) ToApplicationOperationSyncSourcePtrOutput() ApplicationOperationSyncSourcePtrOutput {
	return i.ToApplicationOperationSyncSourcePtrOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceArgs) ToApplicationOperationSyncSourcePtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceOutput).ToApplicationOperationSyncSourcePtrOutputWithContext(ctx)
}

// ApplicationOperationSyncSourcePtrInput is an input type that accepts ApplicationOperationSyncSourceArgs, ApplicationOperationSyncSourcePtr and ApplicationOperationSyncSourcePtrOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourcePtrInput` via:
//
//          ApplicationOperationSyncSourceArgs{...}
//
//  or:
//
//          nil
type ApplicationOperationSyncSourcePtrInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourcePtrOutput() ApplicationOperationSyncSourcePtrOutput
	ToApplicationOperationSyncSourcePtrOutputWithContext(context.Context) ApplicationOperationSyncSourcePtrOutput
}

type applicationOperationSyncSourcePtrType ApplicationOperationSyncSourceArgs

func ApplicationOperationSyncSourcePtr(v *ApplicationOperationSyncSourceArgs) ApplicationOperationSyncSourcePtrInput {
	return (*applicationOperationSyncSourcePtrType)(v)
}

func (*applicationOperationSyncSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSource)(nil)).Elem()
}

func (i *applicationOperationSyncSourcePtrType) ToApplicationOperationSyncSourcePtrOutput() ApplicationOperationSyncSourcePtrOutput {
	return i.ToApplicationOperationSyncSourcePtrOutputWithContext(context.Background())
}

func (i *applicationOperationSyncSourcePtrType) ToApplicationOperationSyncSourcePtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourcePtrOutput)
}

// Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
type ApplicationOperationSyncSourceOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSource)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceOutput) ToApplicationOperationSyncSourceOutput() ApplicationOperationSyncSourceOutput {
	return o
}

func (o ApplicationOperationSyncSourceOutput) ToApplicationOperationSyncSourceOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceOutput {
	return o
}

func (o ApplicationOperationSyncSourceOutput) ToApplicationOperationSyncSourcePtrOutput() ApplicationOperationSyncSourcePtrOutput {
	return o.ToApplicationOperationSyncSourcePtrOutputWithContext(context.Background())
}

func (o ApplicationOperationSyncSourceOutput) ToApplicationOperationSyncSourcePtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourcePtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSource) *ApplicationOperationSyncSource {
		return &v
	}).(ApplicationOperationSyncSourcePtrOutput)
}

// Chart is a Helm chart name
func (o ApplicationOperationSyncSourceOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSource) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
func (o ApplicationOperationSyncSourceOutput) Directory() ApplicationOperationSyncSourceDirectoryPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSource) *ApplicationOperationSyncSourceDirectory { return v.Directory }).(ApplicationOperationSyncSourceDirectoryPtrOutput)
}

// Helm holds helm specific options
func (o ApplicationOperationSyncSourceOutput) Helm() ApplicationOperationSyncSourceHelmPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSource) *ApplicationOperationSyncSourceHelm { return v.Helm }).(ApplicationOperationSyncSourceHelmPtrOutput)
}

// Ksonnet holds ksonnet specific options
func (o ApplicationOperationSyncSourceOutput) Ksonnet() ApplicationOperationSyncSourceKsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSource) *ApplicationOperationSyncSourceKsonnet { return v.Ksonnet }).(ApplicationOperationSyncSourceKsonnetPtrOutput)
}

// Kustomize holds kustomize specific options
func (o ApplicationOperationSyncSourceOutput) Kustomize() ApplicationOperationSyncSourceKustomizePtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSource) *ApplicationOperationSyncSourceKustomize { return v.Kustomize }).(ApplicationOperationSyncSourceKustomizePtrOutput)
}

// Path is a directory path within the Git repository
func (o ApplicationOperationSyncSourceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSource) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
func (o ApplicationOperationSyncSourceOutput) Plugin() ApplicationOperationSyncSourcePluginPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSource) *ApplicationOperationSyncSourcePlugin { return v.Plugin }).(ApplicationOperationSyncSourcePluginPtrOutput)
}

// RepoURL is the repository URL of the application manifests
func (o ApplicationOperationSyncSourceOutput) RepoURL() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSource) string { return v.RepoURL }).(pulumi.StringOutput)
}

// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
func (o ApplicationOperationSyncSourceOutput) TargetRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSource) *string { return v.TargetRevision }).(pulumi.StringPtrOutput)
}

type ApplicationOperationSyncSourcePtrOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSource)(nil)).Elem()
}

func (o ApplicationOperationSyncSourcePtrOutput) ToApplicationOperationSyncSourcePtrOutput() ApplicationOperationSyncSourcePtrOutput {
	return o
}

func (o ApplicationOperationSyncSourcePtrOutput) ToApplicationOperationSyncSourcePtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourcePtrOutput {
	return o
}

func (o ApplicationOperationSyncSourcePtrOutput) Elem() ApplicationOperationSyncSourceOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSource) ApplicationOperationSyncSource { return *v }).(ApplicationOperationSyncSourceOutput)
}

// Chart is a Helm chart name
func (o ApplicationOperationSyncSourcePtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSource) *string {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
func (o ApplicationOperationSyncSourcePtrOutput) Directory() ApplicationOperationSyncSourceDirectoryPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSource) *ApplicationOperationSyncSourceDirectory {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(ApplicationOperationSyncSourceDirectoryPtrOutput)
}

// Helm holds helm specific options
func (o ApplicationOperationSyncSourcePtrOutput) Helm() ApplicationOperationSyncSourceHelmPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSource) *ApplicationOperationSyncSourceHelm {
		if v == nil {
			return nil
		}
		return v.Helm
	}).(ApplicationOperationSyncSourceHelmPtrOutput)
}

// Ksonnet holds ksonnet specific options
func (o ApplicationOperationSyncSourcePtrOutput) Ksonnet() ApplicationOperationSyncSourceKsonnetPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSource) *ApplicationOperationSyncSourceKsonnet {
		if v == nil {
			return nil
		}
		return v.Ksonnet
	}).(ApplicationOperationSyncSourceKsonnetPtrOutput)
}

// Kustomize holds kustomize specific options
func (o ApplicationOperationSyncSourcePtrOutput) Kustomize() ApplicationOperationSyncSourceKustomizePtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSource) *ApplicationOperationSyncSourceKustomize {
		if v == nil {
			return nil
		}
		return v.Kustomize
	}).(ApplicationOperationSyncSourceKustomizePtrOutput)
}

// Path is a directory path within the Git repository
func (o ApplicationOperationSyncSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSource) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
func (o ApplicationOperationSyncSourcePtrOutput) Plugin() ApplicationOperationSyncSourcePluginPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSource) *ApplicationOperationSyncSourcePlugin {
		if v == nil {
			return nil
		}
		return v.Plugin
	}).(ApplicationOperationSyncSourcePluginPtrOutput)
}

// RepoURL is the repository URL of the application manifests
func (o ApplicationOperationSyncSourcePtrOutput) RepoURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSource) *string {
		if v == nil {
			return nil
		}
		return &v.RepoURL
	}).(pulumi.StringPtrOutput)
}

// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
func (o ApplicationOperationSyncSourcePtrOutput) TargetRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSource) *string {
		if v == nil {
			return nil
		}
		return v.TargetRevision
	}).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
type ApplicationOperationSyncSourceDirectory struct {
	// ApplicationSourceJsonnet holds jsonnet specific options
	Jsonnet *ApplicationOperationSyncSourceDirectoryJsonnet `pulumi:"jsonnet"`
	Recurse *bool                                           `pulumi:"recurse"`
}

// ApplicationOperationSyncSourceDirectoryInput is an input type that accepts ApplicationOperationSyncSourceDirectoryArgs and ApplicationOperationSyncSourceDirectoryOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceDirectoryInput` via:
//
//          ApplicationOperationSyncSourceDirectoryArgs{...}
type ApplicationOperationSyncSourceDirectoryInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceDirectoryOutput() ApplicationOperationSyncSourceDirectoryOutput
	ToApplicationOperationSyncSourceDirectoryOutputWithContext(context.Context) ApplicationOperationSyncSourceDirectoryOutput
}

// Directory holds path/directory specific options
type ApplicationOperationSyncSourceDirectoryArgs struct {
	// ApplicationSourceJsonnet holds jsonnet specific options
	Jsonnet ApplicationOperationSyncSourceDirectoryJsonnetPtrInput `pulumi:"jsonnet"`
	Recurse pulumi.BoolPtrInput                                    `pulumi:"recurse"`
}

func (ApplicationOperationSyncSourceDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceDirectory)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceDirectoryArgs) ToApplicationOperationSyncSourceDirectoryOutput() ApplicationOperationSyncSourceDirectoryOutput {
	return i.ToApplicationOperationSyncSourceDirectoryOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceDirectoryArgs) ToApplicationOperationSyncSourceDirectoryOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceDirectoryOutput)
}

func (i ApplicationOperationSyncSourceDirectoryArgs) ToApplicationOperationSyncSourceDirectoryPtrOutput() ApplicationOperationSyncSourceDirectoryPtrOutput {
	return i.ToApplicationOperationSyncSourceDirectoryPtrOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceDirectoryArgs) ToApplicationOperationSyncSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceDirectoryOutput).ToApplicationOperationSyncSourceDirectoryPtrOutputWithContext(ctx)
}

// ApplicationOperationSyncSourceDirectoryPtrInput is an input type that accepts ApplicationOperationSyncSourceDirectoryArgs, ApplicationOperationSyncSourceDirectoryPtr and ApplicationOperationSyncSourceDirectoryPtrOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceDirectoryPtrInput` via:
//
//          ApplicationOperationSyncSourceDirectoryArgs{...}
//
//  or:
//
//          nil
type ApplicationOperationSyncSourceDirectoryPtrInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceDirectoryPtrOutput() ApplicationOperationSyncSourceDirectoryPtrOutput
	ToApplicationOperationSyncSourceDirectoryPtrOutputWithContext(context.Context) ApplicationOperationSyncSourceDirectoryPtrOutput
}

type applicationOperationSyncSourceDirectoryPtrType ApplicationOperationSyncSourceDirectoryArgs

func ApplicationOperationSyncSourceDirectoryPtr(v *ApplicationOperationSyncSourceDirectoryArgs) ApplicationOperationSyncSourceDirectoryPtrInput {
	return (*applicationOperationSyncSourceDirectoryPtrType)(v)
}

func (*applicationOperationSyncSourceDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSourceDirectory)(nil)).Elem()
}

func (i *applicationOperationSyncSourceDirectoryPtrType) ToApplicationOperationSyncSourceDirectoryPtrOutput() ApplicationOperationSyncSourceDirectoryPtrOutput {
	return i.ToApplicationOperationSyncSourceDirectoryPtrOutputWithContext(context.Background())
}

func (i *applicationOperationSyncSourceDirectoryPtrType) ToApplicationOperationSyncSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceDirectoryPtrOutput)
}

// Directory holds path/directory specific options
type ApplicationOperationSyncSourceDirectoryOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceDirectory)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceDirectoryOutput) ToApplicationOperationSyncSourceDirectoryOutput() ApplicationOperationSyncSourceDirectoryOutput {
	return o
}

func (o ApplicationOperationSyncSourceDirectoryOutput) ToApplicationOperationSyncSourceDirectoryOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryOutput {
	return o
}

func (o ApplicationOperationSyncSourceDirectoryOutput) ToApplicationOperationSyncSourceDirectoryPtrOutput() ApplicationOperationSyncSourceDirectoryPtrOutput {
	return o.ToApplicationOperationSyncSourceDirectoryPtrOutputWithContext(context.Background())
}

func (o ApplicationOperationSyncSourceDirectoryOutput) ToApplicationOperationSyncSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceDirectory) *ApplicationOperationSyncSourceDirectory {
		return &v
	}).(ApplicationOperationSyncSourceDirectoryPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
func (o ApplicationOperationSyncSourceDirectoryOutput) Jsonnet() ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceDirectory) *ApplicationOperationSyncSourceDirectoryJsonnet {
		return v.Jsonnet
	}).(ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput)
}

func (o ApplicationOperationSyncSourceDirectoryOutput) Recurse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceDirectory) *bool { return v.Recurse }).(pulumi.BoolPtrOutput)
}

type ApplicationOperationSyncSourceDirectoryPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSourceDirectory)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceDirectoryPtrOutput) ToApplicationOperationSyncSourceDirectoryPtrOutput() ApplicationOperationSyncSourceDirectoryPtrOutput {
	return o
}

func (o ApplicationOperationSyncSourceDirectoryPtrOutput) ToApplicationOperationSyncSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryPtrOutput {
	return o
}

func (o ApplicationOperationSyncSourceDirectoryPtrOutput) Elem() ApplicationOperationSyncSourceDirectoryOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceDirectory) ApplicationOperationSyncSourceDirectory { return *v }).(ApplicationOperationSyncSourceDirectoryOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
func (o ApplicationOperationSyncSourceDirectoryPtrOutput) Jsonnet() ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceDirectory) *ApplicationOperationSyncSourceDirectoryJsonnet {
		if v == nil {
			return nil
		}
		return v.Jsonnet
	}).(ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput)
}

func (o ApplicationOperationSyncSourceDirectoryPtrOutput) Recurse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceDirectory) *bool {
		if v == nil {
			return nil
		}
		return v.Recurse
	}).(pulumi.BoolPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationOperationSyncSourceDirectoryJsonnet struct {
	// ExtVars is a list of Jsonnet External Variables
	ExtVars []ApplicationOperationSyncSourceDirectoryJsonnetExtVars `pulumi:"extVars"`
	// Additional library search dirs
	Libs []string `pulumi:"libs"`
	// TLAS is a list of Jsonnet Top-level Arguments
	Tlas []ApplicationOperationSyncSourceDirectoryJsonnetTlas `pulumi:"tlas"`
}

// ApplicationOperationSyncSourceDirectoryJsonnetInput is an input type that accepts ApplicationOperationSyncSourceDirectoryJsonnetArgs and ApplicationOperationSyncSourceDirectoryJsonnetOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceDirectoryJsonnetInput` via:
//
//          ApplicationOperationSyncSourceDirectoryJsonnetArgs{...}
type ApplicationOperationSyncSourceDirectoryJsonnetInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceDirectoryJsonnetOutput() ApplicationOperationSyncSourceDirectoryJsonnetOutput
	ToApplicationOperationSyncSourceDirectoryJsonnetOutputWithContext(context.Context) ApplicationOperationSyncSourceDirectoryJsonnetOutput
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationOperationSyncSourceDirectoryJsonnetArgs struct {
	// ExtVars is a list of Jsonnet External Variables
	ExtVars ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayInput `pulumi:"extVars"`
	// Additional library search dirs
	Libs pulumi.StringArrayInput `pulumi:"libs"`
	// TLAS is a list of Jsonnet Top-level Arguments
	Tlas ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayInput `pulumi:"tlas"`
}

func (ApplicationOperationSyncSourceDirectoryJsonnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceDirectoryJsonnet)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceDirectoryJsonnetArgs) ToApplicationOperationSyncSourceDirectoryJsonnetOutput() ApplicationOperationSyncSourceDirectoryJsonnetOutput {
	return i.ToApplicationOperationSyncSourceDirectoryJsonnetOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceDirectoryJsonnetArgs) ToApplicationOperationSyncSourceDirectoryJsonnetOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryJsonnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceDirectoryJsonnetOutput)
}

func (i ApplicationOperationSyncSourceDirectoryJsonnetArgs) ToApplicationOperationSyncSourceDirectoryJsonnetPtrOutput() ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput {
	return i.ToApplicationOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceDirectoryJsonnetArgs) ToApplicationOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceDirectoryJsonnetOutput).ToApplicationOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(ctx)
}

// ApplicationOperationSyncSourceDirectoryJsonnetPtrInput is an input type that accepts ApplicationOperationSyncSourceDirectoryJsonnetArgs, ApplicationOperationSyncSourceDirectoryJsonnetPtr and ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceDirectoryJsonnetPtrInput` via:
//
//          ApplicationOperationSyncSourceDirectoryJsonnetArgs{...}
//
//  or:
//
//          nil
type ApplicationOperationSyncSourceDirectoryJsonnetPtrInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceDirectoryJsonnetPtrOutput() ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput
	ToApplicationOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(context.Context) ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput
}

type applicationOperationSyncSourceDirectoryJsonnetPtrType ApplicationOperationSyncSourceDirectoryJsonnetArgs

func ApplicationOperationSyncSourceDirectoryJsonnetPtr(v *ApplicationOperationSyncSourceDirectoryJsonnetArgs) ApplicationOperationSyncSourceDirectoryJsonnetPtrInput {
	return (*applicationOperationSyncSourceDirectoryJsonnetPtrType)(v)
}

func (*applicationOperationSyncSourceDirectoryJsonnetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSourceDirectoryJsonnet)(nil)).Elem()
}

func (i *applicationOperationSyncSourceDirectoryJsonnetPtrType) ToApplicationOperationSyncSourceDirectoryJsonnetPtrOutput() ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput {
	return i.ToApplicationOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (i *applicationOperationSyncSourceDirectoryJsonnetPtrType) ToApplicationOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationOperationSyncSourceDirectoryJsonnetOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceDirectoryJsonnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceDirectoryJsonnet)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetOutput) ToApplicationOperationSyncSourceDirectoryJsonnetOutput() ApplicationOperationSyncSourceDirectoryJsonnetOutput {
	return o
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetOutput) ToApplicationOperationSyncSourceDirectoryJsonnetOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryJsonnetOutput {
	return o
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetOutput) ToApplicationOperationSyncSourceDirectoryJsonnetPtrOutput() ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput {
	return o.ToApplicationOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetOutput) ToApplicationOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceDirectoryJsonnet) *ApplicationOperationSyncSourceDirectoryJsonnet {
		return &v
	}).(ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput)
}

// ExtVars is a list of Jsonnet External Variables
func (o ApplicationOperationSyncSourceDirectoryJsonnetOutput) ExtVars() ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceDirectoryJsonnet) []ApplicationOperationSyncSourceDirectoryJsonnetExtVars {
		return v.ExtVars
	}).(ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput)
}

// Additional library search dirs
func (o ApplicationOperationSyncSourceDirectoryJsonnetOutput) Libs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceDirectoryJsonnet) []string { return v.Libs }).(pulumi.StringArrayOutput)
}

// TLAS is a list of Jsonnet Top-level Arguments
func (o ApplicationOperationSyncSourceDirectoryJsonnetOutput) Tlas() ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceDirectoryJsonnet) []ApplicationOperationSyncSourceDirectoryJsonnetTlas {
		return v.Tlas
	}).(ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput)
}

type ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSourceDirectoryJsonnet)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput) ToApplicationOperationSyncSourceDirectoryJsonnetPtrOutput() ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput {
	return o
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput) ToApplicationOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput {
	return o
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput) Elem() ApplicationOperationSyncSourceDirectoryJsonnetOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceDirectoryJsonnet) ApplicationOperationSyncSourceDirectoryJsonnet {
		return *v
	}).(ApplicationOperationSyncSourceDirectoryJsonnetOutput)
}

// ExtVars is a list of Jsonnet External Variables
func (o ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput) ExtVars() ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceDirectoryJsonnet) []ApplicationOperationSyncSourceDirectoryJsonnetExtVars {
		if v == nil {
			return nil
		}
		return v.ExtVars
	}).(ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput)
}

// Additional library search dirs
func (o ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput) Libs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceDirectoryJsonnet) []string {
		if v == nil {
			return nil
		}
		return v.Libs
	}).(pulumi.StringArrayOutput)
}

// TLAS is a list of Jsonnet Top-level Arguments
func (o ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput) Tlas() ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceDirectoryJsonnet) []ApplicationOperationSyncSourceDirectoryJsonnetTlas {
		if v == nil {
			return nil
		}
		return v.Tlas
	}).(ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationOperationSyncSourceDirectoryJsonnetExtVars struct {
	Code  *bool  `pulumi:"code"`
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ApplicationOperationSyncSourceDirectoryJsonnetExtVarsInput is an input type that accepts ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArgs and ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceDirectoryJsonnetExtVarsInput` via:
//
//          ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArgs{...}
type ApplicationOperationSyncSourceDirectoryJsonnetExtVarsInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput() ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput
	ToApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutputWithContext(context.Context) ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput
}

// JsonnetVar is a jsonnet variable
type ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArgs struct {
	Code  pulumi.BoolPtrInput `pulumi:"code"`
	Name  pulumi.StringInput  `pulumi:"name"`
	Value pulumi.StringInput  `pulumi:"value"`
}

func (ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArgs) ToApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput() ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput {
	return i.ToApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArgs) ToApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput)
}

// ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayInput is an input type that accepts ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArray and ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayInput` via:
//
//          ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArray{ ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArgs{...} }
type ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput() ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput
	ToApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutputWithContext(context.Context) ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput
}

type ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArray []ApplicationOperationSyncSourceDirectoryJsonnetExtVarsInput

func (ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOperationSyncSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArray) ToApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput() ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput {
	return i.ToApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArray) ToApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput) ToApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput() ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput {
	return o
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput) ToApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput {
	return o
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput) Code() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceDirectoryJsonnetExtVars) *bool { return v.Code }).(pulumi.BoolPtrOutput)
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceDirectoryJsonnetExtVars) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceDirectoryJsonnetExtVars) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOperationSyncSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput) ToApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput() ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput {
	return o
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput) ToApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput {
	return o
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput) Index(i pulumi.IntInput) ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOperationSyncSourceDirectoryJsonnetExtVars {
		return vs[0].([]ApplicationOperationSyncSourceDirectoryJsonnetExtVars)[vs[1].(int)]
	}).(ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationOperationSyncSourceDirectoryJsonnetTlas struct {
	Code  *bool  `pulumi:"code"`
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ApplicationOperationSyncSourceDirectoryJsonnetTlasInput is an input type that accepts ApplicationOperationSyncSourceDirectoryJsonnetTlasArgs and ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceDirectoryJsonnetTlasInput` via:
//
//          ApplicationOperationSyncSourceDirectoryJsonnetTlasArgs{...}
type ApplicationOperationSyncSourceDirectoryJsonnetTlasInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceDirectoryJsonnetTlasOutput() ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput
	ToApplicationOperationSyncSourceDirectoryJsonnetTlasOutputWithContext(context.Context) ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput
}

// JsonnetVar is a jsonnet variable
type ApplicationOperationSyncSourceDirectoryJsonnetTlasArgs struct {
	Code  pulumi.BoolPtrInput `pulumi:"code"`
	Name  pulumi.StringInput  `pulumi:"name"`
	Value pulumi.StringInput  `pulumi:"value"`
}

func (ApplicationOperationSyncSourceDirectoryJsonnetTlasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceDirectoryJsonnetTlasArgs) ToApplicationOperationSyncSourceDirectoryJsonnetTlasOutput() ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput {
	return i.ToApplicationOperationSyncSourceDirectoryJsonnetTlasOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceDirectoryJsonnetTlasArgs) ToApplicationOperationSyncSourceDirectoryJsonnetTlasOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput)
}

// ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayInput is an input type that accepts ApplicationOperationSyncSourceDirectoryJsonnetTlasArray and ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayInput` via:
//
//          ApplicationOperationSyncSourceDirectoryJsonnetTlasArray{ ApplicationOperationSyncSourceDirectoryJsonnetTlasArgs{...} }
type ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput() ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput
	ToApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutputWithContext(context.Context) ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput
}

type ApplicationOperationSyncSourceDirectoryJsonnetTlasArray []ApplicationOperationSyncSourceDirectoryJsonnetTlasInput

func (ApplicationOperationSyncSourceDirectoryJsonnetTlasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOperationSyncSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceDirectoryJsonnetTlasArray) ToApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput() ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput {
	return i.ToApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceDirectoryJsonnetTlasArray) ToApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput) ToApplicationOperationSyncSourceDirectoryJsonnetTlasOutput() ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput {
	return o
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput) ToApplicationOperationSyncSourceDirectoryJsonnetTlasOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput {
	return o
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput) Code() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceDirectoryJsonnetTlas) *bool { return v.Code }).(pulumi.BoolPtrOutput)
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceDirectoryJsonnetTlas) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceDirectoryJsonnetTlas) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOperationSyncSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput) ToApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput() ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput {
	return o
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput) ToApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput {
	return o
}

func (o ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput) Index(i pulumi.IntInput) ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOperationSyncSourceDirectoryJsonnetTlas {
		return vs[0].([]ApplicationOperationSyncSourceDirectoryJsonnetTlas)[vs[1].(int)]
	}).(ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput)
}

// Helm holds helm specific options
type ApplicationOperationSyncSourceHelm struct {
	// FileParameters are file parameters to the helm template
	FileParameters []ApplicationOperationSyncSourceHelmFileParameters `pulumi:"fileParameters"`
	// Parameters are parameters to the helm template
	Parameters []ApplicationOperationSyncSourceHelmParameters `pulumi:"parameters"`
	// The Helm release name. If omitted it will use the application name
	ReleaseName *string `pulumi:"releaseName"`
	// ValuesFiles is a list of Helm value files to use when generating a template
	ValueFiles []string `pulumi:"valueFiles"`
	// Values is Helm values, typically defined as a block
	Values *string `pulumi:"values"`
}

// ApplicationOperationSyncSourceHelmInput is an input type that accepts ApplicationOperationSyncSourceHelmArgs and ApplicationOperationSyncSourceHelmOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceHelmInput` via:
//
//          ApplicationOperationSyncSourceHelmArgs{...}
type ApplicationOperationSyncSourceHelmInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceHelmOutput() ApplicationOperationSyncSourceHelmOutput
	ToApplicationOperationSyncSourceHelmOutputWithContext(context.Context) ApplicationOperationSyncSourceHelmOutput
}

// Helm holds helm specific options
type ApplicationOperationSyncSourceHelmArgs struct {
	// FileParameters are file parameters to the helm template
	FileParameters ApplicationOperationSyncSourceHelmFileParametersArrayInput `pulumi:"fileParameters"`
	// Parameters are parameters to the helm template
	Parameters ApplicationOperationSyncSourceHelmParametersArrayInput `pulumi:"parameters"`
	// The Helm release name. If omitted it will use the application name
	ReleaseName pulumi.StringPtrInput `pulumi:"releaseName"`
	// ValuesFiles is a list of Helm value files to use when generating a template
	ValueFiles pulumi.StringArrayInput `pulumi:"valueFiles"`
	// Values is Helm values, typically defined as a block
	Values pulumi.StringPtrInput `pulumi:"values"`
}

func (ApplicationOperationSyncSourceHelmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceHelm)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceHelmArgs) ToApplicationOperationSyncSourceHelmOutput() ApplicationOperationSyncSourceHelmOutput {
	return i.ToApplicationOperationSyncSourceHelmOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceHelmArgs) ToApplicationOperationSyncSourceHelmOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceHelmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceHelmOutput)
}

func (i ApplicationOperationSyncSourceHelmArgs) ToApplicationOperationSyncSourceHelmPtrOutput() ApplicationOperationSyncSourceHelmPtrOutput {
	return i.ToApplicationOperationSyncSourceHelmPtrOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceHelmArgs) ToApplicationOperationSyncSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceHelmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceHelmOutput).ToApplicationOperationSyncSourceHelmPtrOutputWithContext(ctx)
}

// ApplicationOperationSyncSourceHelmPtrInput is an input type that accepts ApplicationOperationSyncSourceHelmArgs, ApplicationOperationSyncSourceHelmPtr and ApplicationOperationSyncSourceHelmPtrOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceHelmPtrInput` via:
//
//          ApplicationOperationSyncSourceHelmArgs{...}
//
//  or:
//
//          nil
type ApplicationOperationSyncSourceHelmPtrInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceHelmPtrOutput() ApplicationOperationSyncSourceHelmPtrOutput
	ToApplicationOperationSyncSourceHelmPtrOutputWithContext(context.Context) ApplicationOperationSyncSourceHelmPtrOutput
}

type applicationOperationSyncSourceHelmPtrType ApplicationOperationSyncSourceHelmArgs

func ApplicationOperationSyncSourceHelmPtr(v *ApplicationOperationSyncSourceHelmArgs) ApplicationOperationSyncSourceHelmPtrInput {
	return (*applicationOperationSyncSourceHelmPtrType)(v)
}

func (*applicationOperationSyncSourceHelmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSourceHelm)(nil)).Elem()
}

func (i *applicationOperationSyncSourceHelmPtrType) ToApplicationOperationSyncSourceHelmPtrOutput() ApplicationOperationSyncSourceHelmPtrOutput {
	return i.ToApplicationOperationSyncSourceHelmPtrOutputWithContext(context.Background())
}

func (i *applicationOperationSyncSourceHelmPtrType) ToApplicationOperationSyncSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceHelmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceHelmPtrOutput)
}

// Helm holds helm specific options
type ApplicationOperationSyncSourceHelmOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceHelmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceHelm)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceHelmOutput) ToApplicationOperationSyncSourceHelmOutput() ApplicationOperationSyncSourceHelmOutput {
	return o
}

func (o ApplicationOperationSyncSourceHelmOutput) ToApplicationOperationSyncSourceHelmOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceHelmOutput {
	return o
}

func (o ApplicationOperationSyncSourceHelmOutput) ToApplicationOperationSyncSourceHelmPtrOutput() ApplicationOperationSyncSourceHelmPtrOutput {
	return o.ToApplicationOperationSyncSourceHelmPtrOutputWithContext(context.Background())
}

func (o ApplicationOperationSyncSourceHelmOutput) ToApplicationOperationSyncSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceHelmPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceHelm) *ApplicationOperationSyncSourceHelm {
		return &v
	}).(ApplicationOperationSyncSourceHelmPtrOutput)
}

// FileParameters are file parameters to the helm template
func (o ApplicationOperationSyncSourceHelmOutput) FileParameters() ApplicationOperationSyncSourceHelmFileParametersArrayOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceHelm) []ApplicationOperationSyncSourceHelmFileParameters {
		return v.FileParameters
	}).(ApplicationOperationSyncSourceHelmFileParametersArrayOutput)
}

// Parameters are parameters to the helm template
func (o ApplicationOperationSyncSourceHelmOutput) Parameters() ApplicationOperationSyncSourceHelmParametersArrayOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceHelm) []ApplicationOperationSyncSourceHelmParameters {
		return v.Parameters
	}).(ApplicationOperationSyncSourceHelmParametersArrayOutput)
}

// The Helm release name. If omitted it will use the application name
func (o ApplicationOperationSyncSourceHelmOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceHelm) *string { return v.ReleaseName }).(pulumi.StringPtrOutput)
}

// ValuesFiles is a list of Helm value files to use when generating a template
func (o ApplicationOperationSyncSourceHelmOutput) ValueFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceHelm) []string { return v.ValueFiles }).(pulumi.StringArrayOutput)
}

// Values is Helm values, typically defined as a block
func (o ApplicationOperationSyncSourceHelmOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceHelm) *string { return v.Values }).(pulumi.StringPtrOutput)
}

type ApplicationOperationSyncSourceHelmPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceHelmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSourceHelm)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceHelmPtrOutput) ToApplicationOperationSyncSourceHelmPtrOutput() ApplicationOperationSyncSourceHelmPtrOutput {
	return o
}

func (o ApplicationOperationSyncSourceHelmPtrOutput) ToApplicationOperationSyncSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceHelmPtrOutput {
	return o
}

func (o ApplicationOperationSyncSourceHelmPtrOutput) Elem() ApplicationOperationSyncSourceHelmOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceHelm) ApplicationOperationSyncSourceHelm { return *v }).(ApplicationOperationSyncSourceHelmOutput)
}

// FileParameters are file parameters to the helm template
func (o ApplicationOperationSyncSourceHelmPtrOutput) FileParameters() ApplicationOperationSyncSourceHelmFileParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceHelm) []ApplicationOperationSyncSourceHelmFileParameters {
		if v == nil {
			return nil
		}
		return v.FileParameters
	}).(ApplicationOperationSyncSourceHelmFileParametersArrayOutput)
}

// Parameters are parameters to the helm template
func (o ApplicationOperationSyncSourceHelmPtrOutput) Parameters() ApplicationOperationSyncSourceHelmParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceHelm) []ApplicationOperationSyncSourceHelmParameters {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ApplicationOperationSyncSourceHelmParametersArrayOutput)
}

// The Helm release name. If omitted it will use the application name
func (o ApplicationOperationSyncSourceHelmPtrOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceHelm) *string {
		if v == nil {
			return nil
		}
		return v.ReleaseName
	}).(pulumi.StringPtrOutput)
}

// ValuesFiles is a list of Helm value files to use when generating a template
func (o ApplicationOperationSyncSourceHelmPtrOutput) ValueFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceHelm) []string {
		if v == nil {
			return nil
		}
		return v.ValueFiles
	}).(pulumi.StringArrayOutput)
}

// Values is Helm values, typically defined as a block
func (o ApplicationOperationSyncSourceHelmPtrOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceHelm) *string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringPtrOutput)
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationOperationSyncSourceHelmFileParameters struct {
	// Name is the name of the helm parameter
	Name *string `pulumi:"name"`
	// Path is the path value for the helm parameter
	Path *string `pulumi:"path"`
}

// ApplicationOperationSyncSourceHelmFileParametersInput is an input type that accepts ApplicationOperationSyncSourceHelmFileParametersArgs and ApplicationOperationSyncSourceHelmFileParametersOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceHelmFileParametersInput` via:
//
//          ApplicationOperationSyncSourceHelmFileParametersArgs{...}
type ApplicationOperationSyncSourceHelmFileParametersInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceHelmFileParametersOutput() ApplicationOperationSyncSourceHelmFileParametersOutput
	ToApplicationOperationSyncSourceHelmFileParametersOutputWithContext(context.Context) ApplicationOperationSyncSourceHelmFileParametersOutput
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationOperationSyncSourceHelmFileParametersArgs struct {
	// Name is the name of the helm parameter
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path is the path value for the helm parameter
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ApplicationOperationSyncSourceHelmFileParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceHelmFileParameters)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceHelmFileParametersArgs) ToApplicationOperationSyncSourceHelmFileParametersOutput() ApplicationOperationSyncSourceHelmFileParametersOutput {
	return i.ToApplicationOperationSyncSourceHelmFileParametersOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceHelmFileParametersArgs) ToApplicationOperationSyncSourceHelmFileParametersOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceHelmFileParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceHelmFileParametersOutput)
}

// ApplicationOperationSyncSourceHelmFileParametersArrayInput is an input type that accepts ApplicationOperationSyncSourceHelmFileParametersArray and ApplicationOperationSyncSourceHelmFileParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceHelmFileParametersArrayInput` via:
//
//          ApplicationOperationSyncSourceHelmFileParametersArray{ ApplicationOperationSyncSourceHelmFileParametersArgs{...} }
type ApplicationOperationSyncSourceHelmFileParametersArrayInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceHelmFileParametersArrayOutput() ApplicationOperationSyncSourceHelmFileParametersArrayOutput
	ToApplicationOperationSyncSourceHelmFileParametersArrayOutputWithContext(context.Context) ApplicationOperationSyncSourceHelmFileParametersArrayOutput
}

type ApplicationOperationSyncSourceHelmFileParametersArray []ApplicationOperationSyncSourceHelmFileParametersInput

func (ApplicationOperationSyncSourceHelmFileParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOperationSyncSourceHelmFileParameters)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceHelmFileParametersArray) ToApplicationOperationSyncSourceHelmFileParametersArrayOutput() ApplicationOperationSyncSourceHelmFileParametersArrayOutput {
	return i.ToApplicationOperationSyncSourceHelmFileParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceHelmFileParametersArray) ToApplicationOperationSyncSourceHelmFileParametersArrayOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceHelmFileParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceHelmFileParametersArrayOutput)
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationOperationSyncSourceHelmFileParametersOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceHelmFileParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceHelmFileParameters)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceHelmFileParametersOutput) ToApplicationOperationSyncSourceHelmFileParametersOutput() ApplicationOperationSyncSourceHelmFileParametersOutput {
	return o
}

func (o ApplicationOperationSyncSourceHelmFileParametersOutput) ToApplicationOperationSyncSourceHelmFileParametersOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceHelmFileParametersOutput {
	return o
}

// Name is the name of the helm parameter
func (o ApplicationOperationSyncSourceHelmFileParametersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceHelmFileParameters) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path is the path value for the helm parameter
func (o ApplicationOperationSyncSourceHelmFileParametersOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceHelmFileParameters) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ApplicationOperationSyncSourceHelmFileParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceHelmFileParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOperationSyncSourceHelmFileParameters)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceHelmFileParametersArrayOutput) ToApplicationOperationSyncSourceHelmFileParametersArrayOutput() ApplicationOperationSyncSourceHelmFileParametersArrayOutput {
	return o
}

func (o ApplicationOperationSyncSourceHelmFileParametersArrayOutput) ToApplicationOperationSyncSourceHelmFileParametersArrayOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceHelmFileParametersArrayOutput {
	return o
}

func (o ApplicationOperationSyncSourceHelmFileParametersArrayOutput) Index(i pulumi.IntInput) ApplicationOperationSyncSourceHelmFileParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOperationSyncSourceHelmFileParameters {
		return vs[0].([]ApplicationOperationSyncSourceHelmFileParameters)[vs[1].(int)]
	}).(ApplicationOperationSyncSourceHelmFileParametersOutput)
}

// HelmParameter is a parameter to a helm template
type ApplicationOperationSyncSourceHelmParameters struct {
	// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
	ForceString *bool `pulumi:"forceString"`
	// Name is the name of the helm parameter
	Name *string `pulumi:"name"`
	// Value is the value for the helm parameter
	Value *string `pulumi:"value"`
}

// ApplicationOperationSyncSourceHelmParametersInput is an input type that accepts ApplicationOperationSyncSourceHelmParametersArgs and ApplicationOperationSyncSourceHelmParametersOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceHelmParametersInput` via:
//
//          ApplicationOperationSyncSourceHelmParametersArgs{...}
type ApplicationOperationSyncSourceHelmParametersInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceHelmParametersOutput() ApplicationOperationSyncSourceHelmParametersOutput
	ToApplicationOperationSyncSourceHelmParametersOutputWithContext(context.Context) ApplicationOperationSyncSourceHelmParametersOutput
}

// HelmParameter is a parameter to a helm template
type ApplicationOperationSyncSourceHelmParametersArgs struct {
	// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
	ForceString pulumi.BoolPtrInput `pulumi:"forceString"`
	// Name is the name of the helm parameter
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value for the helm parameter
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApplicationOperationSyncSourceHelmParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceHelmParameters)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceHelmParametersArgs) ToApplicationOperationSyncSourceHelmParametersOutput() ApplicationOperationSyncSourceHelmParametersOutput {
	return i.ToApplicationOperationSyncSourceHelmParametersOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceHelmParametersArgs) ToApplicationOperationSyncSourceHelmParametersOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceHelmParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceHelmParametersOutput)
}

// ApplicationOperationSyncSourceHelmParametersArrayInput is an input type that accepts ApplicationOperationSyncSourceHelmParametersArray and ApplicationOperationSyncSourceHelmParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceHelmParametersArrayInput` via:
//
//          ApplicationOperationSyncSourceHelmParametersArray{ ApplicationOperationSyncSourceHelmParametersArgs{...} }
type ApplicationOperationSyncSourceHelmParametersArrayInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceHelmParametersArrayOutput() ApplicationOperationSyncSourceHelmParametersArrayOutput
	ToApplicationOperationSyncSourceHelmParametersArrayOutputWithContext(context.Context) ApplicationOperationSyncSourceHelmParametersArrayOutput
}

type ApplicationOperationSyncSourceHelmParametersArray []ApplicationOperationSyncSourceHelmParametersInput

func (ApplicationOperationSyncSourceHelmParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOperationSyncSourceHelmParameters)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceHelmParametersArray) ToApplicationOperationSyncSourceHelmParametersArrayOutput() ApplicationOperationSyncSourceHelmParametersArrayOutput {
	return i.ToApplicationOperationSyncSourceHelmParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceHelmParametersArray) ToApplicationOperationSyncSourceHelmParametersArrayOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceHelmParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceHelmParametersArrayOutput)
}

// HelmParameter is a parameter to a helm template
type ApplicationOperationSyncSourceHelmParametersOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceHelmParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceHelmParameters)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceHelmParametersOutput) ToApplicationOperationSyncSourceHelmParametersOutput() ApplicationOperationSyncSourceHelmParametersOutput {
	return o
}

func (o ApplicationOperationSyncSourceHelmParametersOutput) ToApplicationOperationSyncSourceHelmParametersOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceHelmParametersOutput {
	return o
}

// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
func (o ApplicationOperationSyncSourceHelmParametersOutput) ForceString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceHelmParameters) *bool { return v.ForceString }).(pulumi.BoolPtrOutput)
}

// Name is the name of the helm parameter
func (o ApplicationOperationSyncSourceHelmParametersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceHelmParameters) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value for the helm parameter
func (o ApplicationOperationSyncSourceHelmParametersOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceHelmParameters) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationOperationSyncSourceHelmParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceHelmParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOperationSyncSourceHelmParameters)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceHelmParametersArrayOutput) ToApplicationOperationSyncSourceHelmParametersArrayOutput() ApplicationOperationSyncSourceHelmParametersArrayOutput {
	return o
}

func (o ApplicationOperationSyncSourceHelmParametersArrayOutput) ToApplicationOperationSyncSourceHelmParametersArrayOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceHelmParametersArrayOutput {
	return o
}

func (o ApplicationOperationSyncSourceHelmParametersArrayOutput) Index(i pulumi.IntInput) ApplicationOperationSyncSourceHelmParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOperationSyncSourceHelmParameters {
		return vs[0].([]ApplicationOperationSyncSourceHelmParameters)[vs[1].(int)]
	}).(ApplicationOperationSyncSourceHelmParametersOutput)
}

// Ksonnet holds ksonnet specific options
type ApplicationOperationSyncSourceKsonnet struct {
	// Environment is a ksonnet application environment name
	Environment *string `pulumi:"environment"`
	// Parameters are a list of ksonnet component parameter override values
	Parameters []ApplicationOperationSyncSourceKsonnetParameters `pulumi:"parameters"`
}

// ApplicationOperationSyncSourceKsonnetInput is an input type that accepts ApplicationOperationSyncSourceKsonnetArgs and ApplicationOperationSyncSourceKsonnetOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceKsonnetInput` via:
//
//          ApplicationOperationSyncSourceKsonnetArgs{...}
type ApplicationOperationSyncSourceKsonnetInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceKsonnetOutput() ApplicationOperationSyncSourceKsonnetOutput
	ToApplicationOperationSyncSourceKsonnetOutputWithContext(context.Context) ApplicationOperationSyncSourceKsonnetOutput
}

// Ksonnet holds ksonnet specific options
type ApplicationOperationSyncSourceKsonnetArgs struct {
	// Environment is a ksonnet application environment name
	Environment pulumi.StringPtrInput `pulumi:"environment"`
	// Parameters are a list of ksonnet component parameter override values
	Parameters ApplicationOperationSyncSourceKsonnetParametersArrayInput `pulumi:"parameters"`
}

func (ApplicationOperationSyncSourceKsonnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceKsonnet)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceKsonnetArgs) ToApplicationOperationSyncSourceKsonnetOutput() ApplicationOperationSyncSourceKsonnetOutput {
	return i.ToApplicationOperationSyncSourceKsonnetOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceKsonnetArgs) ToApplicationOperationSyncSourceKsonnetOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKsonnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceKsonnetOutput)
}

func (i ApplicationOperationSyncSourceKsonnetArgs) ToApplicationOperationSyncSourceKsonnetPtrOutput() ApplicationOperationSyncSourceKsonnetPtrOutput {
	return i.ToApplicationOperationSyncSourceKsonnetPtrOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceKsonnetArgs) ToApplicationOperationSyncSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceKsonnetOutput).ToApplicationOperationSyncSourceKsonnetPtrOutputWithContext(ctx)
}

// ApplicationOperationSyncSourceKsonnetPtrInput is an input type that accepts ApplicationOperationSyncSourceKsonnetArgs, ApplicationOperationSyncSourceKsonnetPtr and ApplicationOperationSyncSourceKsonnetPtrOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceKsonnetPtrInput` via:
//
//          ApplicationOperationSyncSourceKsonnetArgs{...}
//
//  or:
//
//          nil
type ApplicationOperationSyncSourceKsonnetPtrInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceKsonnetPtrOutput() ApplicationOperationSyncSourceKsonnetPtrOutput
	ToApplicationOperationSyncSourceKsonnetPtrOutputWithContext(context.Context) ApplicationOperationSyncSourceKsonnetPtrOutput
}

type applicationOperationSyncSourceKsonnetPtrType ApplicationOperationSyncSourceKsonnetArgs

func ApplicationOperationSyncSourceKsonnetPtr(v *ApplicationOperationSyncSourceKsonnetArgs) ApplicationOperationSyncSourceKsonnetPtrInput {
	return (*applicationOperationSyncSourceKsonnetPtrType)(v)
}

func (*applicationOperationSyncSourceKsonnetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSourceKsonnet)(nil)).Elem()
}

func (i *applicationOperationSyncSourceKsonnetPtrType) ToApplicationOperationSyncSourceKsonnetPtrOutput() ApplicationOperationSyncSourceKsonnetPtrOutput {
	return i.ToApplicationOperationSyncSourceKsonnetPtrOutputWithContext(context.Background())
}

func (i *applicationOperationSyncSourceKsonnetPtrType) ToApplicationOperationSyncSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceKsonnetPtrOutput)
}

// Ksonnet holds ksonnet specific options
type ApplicationOperationSyncSourceKsonnetOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceKsonnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceKsonnet)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceKsonnetOutput) ToApplicationOperationSyncSourceKsonnetOutput() ApplicationOperationSyncSourceKsonnetOutput {
	return o
}

func (o ApplicationOperationSyncSourceKsonnetOutput) ToApplicationOperationSyncSourceKsonnetOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKsonnetOutput {
	return o
}

func (o ApplicationOperationSyncSourceKsonnetOutput) ToApplicationOperationSyncSourceKsonnetPtrOutput() ApplicationOperationSyncSourceKsonnetPtrOutput {
	return o.ToApplicationOperationSyncSourceKsonnetPtrOutputWithContext(context.Background())
}

func (o ApplicationOperationSyncSourceKsonnetOutput) ToApplicationOperationSyncSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceKsonnet) *ApplicationOperationSyncSourceKsonnet {
		return &v
	}).(ApplicationOperationSyncSourceKsonnetPtrOutput)
}

// Environment is a ksonnet application environment name
func (o ApplicationOperationSyncSourceKsonnetOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceKsonnet) *string { return v.Environment }).(pulumi.StringPtrOutput)
}

// Parameters are a list of ksonnet component parameter override values
func (o ApplicationOperationSyncSourceKsonnetOutput) Parameters() ApplicationOperationSyncSourceKsonnetParametersArrayOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceKsonnet) []ApplicationOperationSyncSourceKsonnetParameters {
		return v.Parameters
	}).(ApplicationOperationSyncSourceKsonnetParametersArrayOutput)
}

type ApplicationOperationSyncSourceKsonnetPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceKsonnetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSourceKsonnet)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceKsonnetPtrOutput) ToApplicationOperationSyncSourceKsonnetPtrOutput() ApplicationOperationSyncSourceKsonnetPtrOutput {
	return o
}

func (o ApplicationOperationSyncSourceKsonnetPtrOutput) ToApplicationOperationSyncSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKsonnetPtrOutput {
	return o
}

func (o ApplicationOperationSyncSourceKsonnetPtrOutput) Elem() ApplicationOperationSyncSourceKsonnetOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceKsonnet) ApplicationOperationSyncSourceKsonnet { return *v }).(ApplicationOperationSyncSourceKsonnetOutput)
}

// Environment is a ksonnet application environment name
func (o ApplicationOperationSyncSourceKsonnetPtrOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceKsonnet) *string {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.StringPtrOutput)
}

// Parameters are a list of ksonnet component parameter override values
func (o ApplicationOperationSyncSourceKsonnetPtrOutput) Parameters() ApplicationOperationSyncSourceKsonnetParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceKsonnet) []ApplicationOperationSyncSourceKsonnetParameters {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ApplicationOperationSyncSourceKsonnetParametersArrayOutput)
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationOperationSyncSourceKsonnetParameters struct {
	Component *string `pulumi:"component"`
	Name      string  `pulumi:"name"`
	Value     string  `pulumi:"value"`
}

// ApplicationOperationSyncSourceKsonnetParametersInput is an input type that accepts ApplicationOperationSyncSourceKsonnetParametersArgs and ApplicationOperationSyncSourceKsonnetParametersOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceKsonnetParametersInput` via:
//
//          ApplicationOperationSyncSourceKsonnetParametersArgs{...}
type ApplicationOperationSyncSourceKsonnetParametersInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceKsonnetParametersOutput() ApplicationOperationSyncSourceKsonnetParametersOutput
	ToApplicationOperationSyncSourceKsonnetParametersOutputWithContext(context.Context) ApplicationOperationSyncSourceKsonnetParametersOutput
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationOperationSyncSourceKsonnetParametersArgs struct {
	Component pulumi.StringPtrInput `pulumi:"component"`
	Name      pulumi.StringInput    `pulumi:"name"`
	Value     pulumi.StringInput    `pulumi:"value"`
}

func (ApplicationOperationSyncSourceKsonnetParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceKsonnetParameters)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceKsonnetParametersArgs) ToApplicationOperationSyncSourceKsonnetParametersOutput() ApplicationOperationSyncSourceKsonnetParametersOutput {
	return i.ToApplicationOperationSyncSourceKsonnetParametersOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceKsonnetParametersArgs) ToApplicationOperationSyncSourceKsonnetParametersOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKsonnetParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceKsonnetParametersOutput)
}

// ApplicationOperationSyncSourceKsonnetParametersArrayInput is an input type that accepts ApplicationOperationSyncSourceKsonnetParametersArray and ApplicationOperationSyncSourceKsonnetParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceKsonnetParametersArrayInput` via:
//
//          ApplicationOperationSyncSourceKsonnetParametersArray{ ApplicationOperationSyncSourceKsonnetParametersArgs{...} }
type ApplicationOperationSyncSourceKsonnetParametersArrayInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceKsonnetParametersArrayOutput() ApplicationOperationSyncSourceKsonnetParametersArrayOutput
	ToApplicationOperationSyncSourceKsonnetParametersArrayOutputWithContext(context.Context) ApplicationOperationSyncSourceKsonnetParametersArrayOutput
}

type ApplicationOperationSyncSourceKsonnetParametersArray []ApplicationOperationSyncSourceKsonnetParametersInput

func (ApplicationOperationSyncSourceKsonnetParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOperationSyncSourceKsonnetParameters)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceKsonnetParametersArray) ToApplicationOperationSyncSourceKsonnetParametersArrayOutput() ApplicationOperationSyncSourceKsonnetParametersArrayOutput {
	return i.ToApplicationOperationSyncSourceKsonnetParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceKsonnetParametersArray) ToApplicationOperationSyncSourceKsonnetParametersArrayOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKsonnetParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceKsonnetParametersArrayOutput)
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationOperationSyncSourceKsonnetParametersOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceKsonnetParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceKsonnetParameters)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceKsonnetParametersOutput) ToApplicationOperationSyncSourceKsonnetParametersOutput() ApplicationOperationSyncSourceKsonnetParametersOutput {
	return o
}

func (o ApplicationOperationSyncSourceKsonnetParametersOutput) ToApplicationOperationSyncSourceKsonnetParametersOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKsonnetParametersOutput {
	return o
}

func (o ApplicationOperationSyncSourceKsonnetParametersOutput) Component() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceKsonnetParameters) *string { return v.Component }).(pulumi.StringPtrOutput)
}

func (o ApplicationOperationSyncSourceKsonnetParametersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceKsonnetParameters) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationOperationSyncSourceKsonnetParametersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceKsonnetParameters) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationOperationSyncSourceKsonnetParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceKsonnetParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOperationSyncSourceKsonnetParameters)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceKsonnetParametersArrayOutput) ToApplicationOperationSyncSourceKsonnetParametersArrayOutput() ApplicationOperationSyncSourceKsonnetParametersArrayOutput {
	return o
}

func (o ApplicationOperationSyncSourceKsonnetParametersArrayOutput) ToApplicationOperationSyncSourceKsonnetParametersArrayOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKsonnetParametersArrayOutput {
	return o
}

func (o ApplicationOperationSyncSourceKsonnetParametersArrayOutput) Index(i pulumi.IntInput) ApplicationOperationSyncSourceKsonnetParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOperationSyncSourceKsonnetParameters {
		return vs[0].([]ApplicationOperationSyncSourceKsonnetParameters)[vs[1].(int)]
	}).(ApplicationOperationSyncSourceKsonnetParametersOutput)
}

// Kustomize holds kustomize specific options
type ApplicationOperationSyncSourceKustomize struct {
	// CommonLabels adds additional kustomize commonLabels
	CommonLabels map[string]string `pulumi:"commonLabels"`
	// Images are kustomize image overrides
	Images []string `pulumi:"images"`
	// NamePrefix is a prefix appended to resources for kustomize apps
	NamePrefix *string `pulumi:"namePrefix"`
	// NameSuffix is a suffix appended to resources for kustomize apps
	NameSuffix *string `pulumi:"nameSuffix"`
	// Version contains optional Kustomize version
	Version *string `pulumi:"version"`
}

// ApplicationOperationSyncSourceKustomizeInput is an input type that accepts ApplicationOperationSyncSourceKustomizeArgs and ApplicationOperationSyncSourceKustomizeOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceKustomizeInput` via:
//
//          ApplicationOperationSyncSourceKustomizeArgs{...}
type ApplicationOperationSyncSourceKustomizeInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceKustomizeOutput() ApplicationOperationSyncSourceKustomizeOutput
	ToApplicationOperationSyncSourceKustomizeOutputWithContext(context.Context) ApplicationOperationSyncSourceKustomizeOutput
}

// Kustomize holds kustomize specific options
type ApplicationOperationSyncSourceKustomizeArgs struct {
	// CommonLabels adds additional kustomize commonLabels
	CommonLabels pulumi.StringMapInput `pulumi:"commonLabels"`
	// Images are kustomize image overrides
	Images pulumi.StringArrayInput `pulumi:"images"`
	// NamePrefix is a prefix appended to resources for kustomize apps
	NamePrefix pulumi.StringPtrInput `pulumi:"namePrefix"`
	// NameSuffix is a suffix appended to resources for kustomize apps
	NameSuffix pulumi.StringPtrInput `pulumi:"nameSuffix"`
	// Version contains optional Kustomize version
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApplicationOperationSyncSourceKustomizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceKustomize)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceKustomizeArgs) ToApplicationOperationSyncSourceKustomizeOutput() ApplicationOperationSyncSourceKustomizeOutput {
	return i.ToApplicationOperationSyncSourceKustomizeOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceKustomizeArgs) ToApplicationOperationSyncSourceKustomizeOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKustomizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceKustomizeOutput)
}

func (i ApplicationOperationSyncSourceKustomizeArgs) ToApplicationOperationSyncSourceKustomizePtrOutput() ApplicationOperationSyncSourceKustomizePtrOutput {
	return i.ToApplicationOperationSyncSourceKustomizePtrOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceKustomizeArgs) ToApplicationOperationSyncSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceKustomizeOutput).ToApplicationOperationSyncSourceKustomizePtrOutputWithContext(ctx)
}

// ApplicationOperationSyncSourceKustomizePtrInput is an input type that accepts ApplicationOperationSyncSourceKustomizeArgs, ApplicationOperationSyncSourceKustomizePtr and ApplicationOperationSyncSourceKustomizePtrOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceKustomizePtrInput` via:
//
//          ApplicationOperationSyncSourceKustomizeArgs{...}
//
//  or:
//
//          nil
type ApplicationOperationSyncSourceKustomizePtrInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceKustomizePtrOutput() ApplicationOperationSyncSourceKustomizePtrOutput
	ToApplicationOperationSyncSourceKustomizePtrOutputWithContext(context.Context) ApplicationOperationSyncSourceKustomizePtrOutput
}

type applicationOperationSyncSourceKustomizePtrType ApplicationOperationSyncSourceKustomizeArgs

func ApplicationOperationSyncSourceKustomizePtr(v *ApplicationOperationSyncSourceKustomizeArgs) ApplicationOperationSyncSourceKustomizePtrInput {
	return (*applicationOperationSyncSourceKustomizePtrType)(v)
}

func (*applicationOperationSyncSourceKustomizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSourceKustomize)(nil)).Elem()
}

func (i *applicationOperationSyncSourceKustomizePtrType) ToApplicationOperationSyncSourceKustomizePtrOutput() ApplicationOperationSyncSourceKustomizePtrOutput {
	return i.ToApplicationOperationSyncSourceKustomizePtrOutputWithContext(context.Background())
}

func (i *applicationOperationSyncSourceKustomizePtrType) ToApplicationOperationSyncSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceKustomizePtrOutput)
}

// Kustomize holds kustomize specific options
type ApplicationOperationSyncSourceKustomizeOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceKustomizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceKustomize)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceKustomizeOutput) ToApplicationOperationSyncSourceKustomizeOutput() ApplicationOperationSyncSourceKustomizeOutput {
	return o
}

func (o ApplicationOperationSyncSourceKustomizeOutput) ToApplicationOperationSyncSourceKustomizeOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKustomizeOutput {
	return o
}

func (o ApplicationOperationSyncSourceKustomizeOutput) ToApplicationOperationSyncSourceKustomizePtrOutput() ApplicationOperationSyncSourceKustomizePtrOutput {
	return o.ToApplicationOperationSyncSourceKustomizePtrOutputWithContext(context.Background())
}

func (o ApplicationOperationSyncSourceKustomizeOutput) ToApplicationOperationSyncSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKustomizePtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceKustomize) *ApplicationOperationSyncSourceKustomize {
		return &v
	}).(ApplicationOperationSyncSourceKustomizePtrOutput)
}

// CommonLabels adds additional kustomize commonLabels
func (o ApplicationOperationSyncSourceKustomizeOutput) CommonLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceKustomize) map[string]string { return v.CommonLabels }).(pulumi.StringMapOutput)
}

// Images are kustomize image overrides
func (o ApplicationOperationSyncSourceKustomizeOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceKustomize) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// NamePrefix is a prefix appended to resources for kustomize apps
func (o ApplicationOperationSyncSourceKustomizeOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceKustomize) *string { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

// NameSuffix is a suffix appended to resources for kustomize apps
func (o ApplicationOperationSyncSourceKustomizeOutput) NameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceKustomize) *string { return v.NameSuffix }).(pulumi.StringPtrOutput)
}

// Version contains optional Kustomize version
func (o ApplicationOperationSyncSourceKustomizeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourceKustomize) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApplicationOperationSyncSourceKustomizePtrOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceKustomizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSourceKustomize)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceKustomizePtrOutput) ToApplicationOperationSyncSourceKustomizePtrOutput() ApplicationOperationSyncSourceKustomizePtrOutput {
	return o
}

func (o ApplicationOperationSyncSourceKustomizePtrOutput) ToApplicationOperationSyncSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKustomizePtrOutput {
	return o
}

func (o ApplicationOperationSyncSourceKustomizePtrOutput) Elem() ApplicationOperationSyncSourceKustomizeOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceKustomize) ApplicationOperationSyncSourceKustomize { return *v }).(ApplicationOperationSyncSourceKustomizeOutput)
}

// CommonLabels adds additional kustomize commonLabels
func (o ApplicationOperationSyncSourceKustomizePtrOutput) CommonLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceKustomize) map[string]string {
		if v == nil {
			return nil
		}
		return v.CommonLabels
	}).(pulumi.StringMapOutput)
}

// Images are kustomize image overrides
func (o ApplicationOperationSyncSourceKustomizePtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceKustomize) []string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringArrayOutput)
}

// NamePrefix is a prefix appended to resources for kustomize apps
func (o ApplicationOperationSyncSourceKustomizePtrOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.NamePrefix
	}).(pulumi.StringPtrOutput)
}

// NameSuffix is a suffix appended to resources for kustomize apps
func (o ApplicationOperationSyncSourceKustomizePtrOutput) NameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.NameSuffix
	}).(pulumi.StringPtrOutput)
}

// Version contains optional Kustomize version
func (o ApplicationOperationSyncSourceKustomizePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationOperationSyncSourceKustomizeCommonLabels struct {
}

// ApplicationOperationSyncSourceKustomizeCommonLabelsInput is an input type that accepts ApplicationOperationSyncSourceKustomizeCommonLabelsArgs and ApplicationOperationSyncSourceKustomizeCommonLabelsOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourceKustomizeCommonLabelsInput` via:
//
//          ApplicationOperationSyncSourceKustomizeCommonLabelsArgs{...}
type ApplicationOperationSyncSourceKustomizeCommonLabelsInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourceKustomizeCommonLabelsOutput() ApplicationOperationSyncSourceKustomizeCommonLabelsOutput
	ToApplicationOperationSyncSourceKustomizeCommonLabelsOutputWithContext(context.Context) ApplicationOperationSyncSourceKustomizeCommonLabelsOutput
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationOperationSyncSourceKustomizeCommonLabelsArgs struct {
}

func (ApplicationOperationSyncSourceKustomizeCommonLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceKustomizeCommonLabels)(nil)).Elem()
}

func (i ApplicationOperationSyncSourceKustomizeCommonLabelsArgs) ToApplicationOperationSyncSourceKustomizeCommonLabelsOutput() ApplicationOperationSyncSourceKustomizeCommonLabelsOutput {
	return i.ToApplicationOperationSyncSourceKustomizeCommonLabelsOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourceKustomizeCommonLabelsArgs) ToApplicationOperationSyncSourceKustomizeCommonLabelsOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKustomizeCommonLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourceKustomizeCommonLabelsOutput)
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationOperationSyncSourceKustomizeCommonLabelsOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourceKustomizeCommonLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourceKustomizeCommonLabels)(nil)).Elem()
}

func (o ApplicationOperationSyncSourceKustomizeCommonLabelsOutput) ToApplicationOperationSyncSourceKustomizeCommonLabelsOutput() ApplicationOperationSyncSourceKustomizeCommonLabelsOutput {
	return o
}

func (o ApplicationOperationSyncSourceKustomizeCommonLabelsOutput) ToApplicationOperationSyncSourceKustomizeCommonLabelsOutputWithContext(ctx context.Context) ApplicationOperationSyncSourceKustomizeCommonLabelsOutput {
	return o
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationOperationSyncSourcePlugin struct {
	Env  []ApplicationOperationSyncSourcePluginEnv `pulumi:"env"`
	Name *string                                   `pulumi:"name"`
}

// ApplicationOperationSyncSourcePluginInput is an input type that accepts ApplicationOperationSyncSourcePluginArgs and ApplicationOperationSyncSourcePluginOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourcePluginInput` via:
//
//          ApplicationOperationSyncSourcePluginArgs{...}
type ApplicationOperationSyncSourcePluginInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourcePluginOutput() ApplicationOperationSyncSourcePluginOutput
	ToApplicationOperationSyncSourcePluginOutputWithContext(context.Context) ApplicationOperationSyncSourcePluginOutput
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationOperationSyncSourcePluginArgs struct {
	Env  ApplicationOperationSyncSourcePluginEnvArrayInput `pulumi:"env"`
	Name pulumi.StringPtrInput                             `pulumi:"name"`
}

func (ApplicationOperationSyncSourcePluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourcePlugin)(nil)).Elem()
}

func (i ApplicationOperationSyncSourcePluginArgs) ToApplicationOperationSyncSourcePluginOutput() ApplicationOperationSyncSourcePluginOutput {
	return i.ToApplicationOperationSyncSourcePluginOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourcePluginArgs) ToApplicationOperationSyncSourcePluginOutputWithContext(ctx context.Context) ApplicationOperationSyncSourcePluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourcePluginOutput)
}

func (i ApplicationOperationSyncSourcePluginArgs) ToApplicationOperationSyncSourcePluginPtrOutput() ApplicationOperationSyncSourcePluginPtrOutput {
	return i.ToApplicationOperationSyncSourcePluginPtrOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourcePluginArgs) ToApplicationOperationSyncSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourcePluginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourcePluginOutput).ToApplicationOperationSyncSourcePluginPtrOutputWithContext(ctx)
}

// ApplicationOperationSyncSourcePluginPtrInput is an input type that accepts ApplicationOperationSyncSourcePluginArgs, ApplicationOperationSyncSourcePluginPtr and ApplicationOperationSyncSourcePluginPtrOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourcePluginPtrInput` via:
//
//          ApplicationOperationSyncSourcePluginArgs{...}
//
//  or:
//
//          nil
type ApplicationOperationSyncSourcePluginPtrInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourcePluginPtrOutput() ApplicationOperationSyncSourcePluginPtrOutput
	ToApplicationOperationSyncSourcePluginPtrOutputWithContext(context.Context) ApplicationOperationSyncSourcePluginPtrOutput
}

type applicationOperationSyncSourcePluginPtrType ApplicationOperationSyncSourcePluginArgs

func ApplicationOperationSyncSourcePluginPtr(v *ApplicationOperationSyncSourcePluginArgs) ApplicationOperationSyncSourcePluginPtrInput {
	return (*applicationOperationSyncSourcePluginPtrType)(v)
}

func (*applicationOperationSyncSourcePluginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSourcePlugin)(nil)).Elem()
}

func (i *applicationOperationSyncSourcePluginPtrType) ToApplicationOperationSyncSourcePluginPtrOutput() ApplicationOperationSyncSourcePluginPtrOutput {
	return i.ToApplicationOperationSyncSourcePluginPtrOutputWithContext(context.Background())
}

func (i *applicationOperationSyncSourcePluginPtrType) ToApplicationOperationSyncSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourcePluginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourcePluginPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationOperationSyncSourcePluginOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourcePluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourcePlugin)(nil)).Elem()
}

func (o ApplicationOperationSyncSourcePluginOutput) ToApplicationOperationSyncSourcePluginOutput() ApplicationOperationSyncSourcePluginOutput {
	return o
}

func (o ApplicationOperationSyncSourcePluginOutput) ToApplicationOperationSyncSourcePluginOutputWithContext(ctx context.Context) ApplicationOperationSyncSourcePluginOutput {
	return o
}

func (o ApplicationOperationSyncSourcePluginOutput) ToApplicationOperationSyncSourcePluginPtrOutput() ApplicationOperationSyncSourcePluginPtrOutput {
	return o.ToApplicationOperationSyncSourcePluginPtrOutputWithContext(context.Background())
}

func (o ApplicationOperationSyncSourcePluginOutput) ToApplicationOperationSyncSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourcePluginPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourcePlugin) *ApplicationOperationSyncSourcePlugin {
		return &v
	}).(ApplicationOperationSyncSourcePluginPtrOutput)
}
func (o ApplicationOperationSyncSourcePluginOutput) Env() ApplicationOperationSyncSourcePluginEnvArrayOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourcePlugin) []ApplicationOperationSyncSourcePluginEnv { return v.Env }).(ApplicationOperationSyncSourcePluginEnvArrayOutput)
}

func (o ApplicationOperationSyncSourcePluginOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourcePlugin) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ApplicationOperationSyncSourcePluginPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourcePluginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSourcePlugin)(nil)).Elem()
}

func (o ApplicationOperationSyncSourcePluginPtrOutput) ToApplicationOperationSyncSourcePluginPtrOutput() ApplicationOperationSyncSourcePluginPtrOutput {
	return o
}

func (o ApplicationOperationSyncSourcePluginPtrOutput) ToApplicationOperationSyncSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSourcePluginPtrOutput {
	return o
}

func (o ApplicationOperationSyncSourcePluginPtrOutput) Elem() ApplicationOperationSyncSourcePluginOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourcePlugin) ApplicationOperationSyncSourcePlugin { return *v }).(ApplicationOperationSyncSourcePluginOutput)
}

func (o ApplicationOperationSyncSourcePluginPtrOutput) Env() ApplicationOperationSyncSourcePluginEnvArrayOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourcePlugin) []ApplicationOperationSyncSourcePluginEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(ApplicationOperationSyncSourcePluginEnvArrayOutput)
}

func (o ApplicationOperationSyncSourcePluginPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSourcePlugin) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type ApplicationOperationSyncSourcePluginEnv struct {
	// the name, usually uppercase
	Name string `pulumi:"name"`
	// the value
	Value string `pulumi:"value"`
}

// ApplicationOperationSyncSourcePluginEnvInput is an input type that accepts ApplicationOperationSyncSourcePluginEnvArgs and ApplicationOperationSyncSourcePluginEnvOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourcePluginEnvInput` via:
//
//          ApplicationOperationSyncSourcePluginEnvArgs{...}
type ApplicationOperationSyncSourcePluginEnvInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourcePluginEnvOutput() ApplicationOperationSyncSourcePluginEnvOutput
	ToApplicationOperationSyncSourcePluginEnvOutputWithContext(context.Context) ApplicationOperationSyncSourcePluginEnvOutput
}

type ApplicationOperationSyncSourcePluginEnvArgs struct {
	// the name, usually uppercase
	Name pulumi.StringInput `pulumi:"name"`
	// the value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApplicationOperationSyncSourcePluginEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourcePluginEnv)(nil)).Elem()
}

func (i ApplicationOperationSyncSourcePluginEnvArgs) ToApplicationOperationSyncSourcePluginEnvOutput() ApplicationOperationSyncSourcePluginEnvOutput {
	return i.ToApplicationOperationSyncSourcePluginEnvOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourcePluginEnvArgs) ToApplicationOperationSyncSourcePluginEnvOutputWithContext(ctx context.Context) ApplicationOperationSyncSourcePluginEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourcePluginEnvOutput)
}

// ApplicationOperationSyncSourcePluginEnvArrayInput is an input type that accepts ApplicationOperationSyncSourcePluginEnvArray and ApplicationOperationSyncSourcePluginEnvArrayOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSourcePluginEnvArrayInput` via:
//
//          ApplicationOperationSyncSourcePluginEnvArray{ ApplicationOperationSyncSourcePluginEnvArgs{...} }
type ApplicationOperationSyncSourcePluginEnvArrayInput interface {
	pulumi.Input

	ToApplicationOperationSyncSourcePluginEnvArrayOutput() ApplicationOperationSyncSourcePluginEnvArrayOutput
	ToApplicationOperationSyncSourcePluginEnvArrayOutputWithContext(context.Context) ApplicationOperationSyncSourcePluginEnvArrayOutput
}

type ApplicationOperationSyncSourcePluginEnvArray []ApplicationOperationSyncSourcePluginEnvInput

func (ApplicationOperationSyncSourcePluginEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOperationSyncSourcePluginEnv)(nil)).Elem()
}

func (i ApplicationOperationSyncSourcePluginEnvArray) ToApplicationOperationSyncSourcePluginEnvArrayOutput() ApplicationOperationSyncSourcePluginEnvArrayOutput {
	return i.ToApplicationOperationSyncSourcePluginEnvArrayOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSourcePluginEnvArray) ToApplicationOperationSyncSourcePluginEnvArrayOutputWithContext(ctx context.Context) ApplicationOperationSyncSourcePluginEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSourcePluginEnvArrayOutput)
}

type ApplicationOperationSyncSourcePluginEnvOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourcePluginEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSourcePluginEnv)(nil)).Elem()
}

func (o ApplicationOperationSyncSourcePluginEnvOutput) ToApplicationOperationSyncSourcePluginEnvOutput() ApplicationOperationSyncSourcePluginEnvOutput {
	return o
}

func (o ApplicationOperationSyncSourcePluginEnvOutput) ToApplicationOperationSyncSourcePluginEnvOutputWithContext(ctx context.Context) ApplicationOperationSyncSourcePluginEnvOutput {
	return o
}

// the name, usually uppercase
func (o ApplicationOperationSyncSourcePluginEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourcePluginEnv) string { return v.Name }).(pulumi.StringOutput)
}

// the value
func (o ApplicationOperationSyncSourcePluginEnvOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSourcePluginEnv) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationOperationSyncSourcePluginEnvArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSourcePluginEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOperationSyncSourcePluginEnv)(nil)).Elem()
}

func (o ApplicationOperationSyncSourcePluginEnvArrayOutput) ToApplicationOperationSyncSourcePluginEnvArrayOutput() ApplicationOperationSyncSourcePluginEnvArrayOutput {
	return o
}

func (o ApplicationOperationSyncSourcePluginEnvArrayOutput) ToApplicationOperationSyncSourcePluginEnvArrayOutputWithContext(ctx context.Context) ApplicationOperationSyncSourcePluginEnvArrayOutput {
	return o
}

func (o ApplicationOperationSyncSourcePluginEnvArrayOutput) Index(i pulumi.IntInput) ApplicationOperationSyncSourcePluginEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOperationSyncSourcePluginEnv {
		return vs[0].([]ApplicationOperationSyncSourcePluginEnv)[vs[1].(int)]
	}).(ApplicationOperationSyncSourcePluginEnvOutput)
}

// SyncStrategy describes how to perform the sync
type ApplicationOperationSyncSyncStrategy struct {
	// Apply wil perform a `kubectl apply` to perform the sync.
	Apply *ApplicationOperationSyncSyncStrategyApply `pulumi:"apply"`
	// Hook will submit any referenced resources to perform the sync. This is the default strategy
	Hook *ApplicationOperationSyncSyncStrategyHook `pulumi:"hook"`
}

// ApplicationOperationSyncSyncStrategyInput is an input type that accepts ApplicationOperationSyncSyncStrategyArgs and ApplicationOperationSyncSyncStrategyOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSyncStrategyInput` via:
//
//          ApplicationOperationSyncSyncStrategyArgs{...}
type ApplicationOperationSyncSyncStrategyInput interface {
	pulumi.Input

	ToApplicationOperationSyncSyncStrategyOutput() ApplicationOperationSyncSyncStrategyOutput
	ToApplicationOperationSyncSyncStrategyOutputWithContext(context.Context) ApplicationOperationSyncSyncStrategyOutput
}

// SyncStrategy describes how to perform the sync
type ApplicationOperationSyncSyncStrategyArgs struct {
	// Apply wil perform a `kubectl apply` to perform the sync.
	Apply ApplicationOperationSyncSyncStrategyApplyPtrInput `pulumi:"apply"`
	// Hook will submit any referenced resources to perform the sync. This is the default strategy
	Hook ApplicationOperationSyncSyncStrategyHookPtrInput `pulumi:"hook"`
}

func (ApplicationOperationSyncSyncStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSyncStrategy)(nil)).Elem()
}

func (i ApplicationOperationSyncSyncStrategyArgs) ToApplicationOperationSyncSyncStrategyOutput() ApplicationOperationSyncSyncStrategyOutput {
	return i.ToApplicationOperationSyncSyncStrategyOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSyncStrategyArgs) ToApplicationOperationSyncSyncStrategyOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSyncStrategyOutput)
}

func (i ApplicationOperationSyncSyncStrategyArgs) ToApplicationOperationSyncSyncStrategyPtrOutput() ApplicationOperationSyncSyncStrategyPtrOutput {
	return i.ToApplicationOperationSyncSyncStrategyPtrOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSyncStrategyArgs) ToApplicationOperationSyncSyncStrategyPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSyncStrategyOutput).ToApplicationOperationSyncSyncStrategyPtrOutputWithContext(ctx)
}

// ApplicationOperationSyncSyncStrategyPtrInput is an input type that accepts ApplicationOperationSyncSyncStrategyArgs, ApplicationOperationSyncSyncStrategyPtr and ApplicationOperationSyncSyncStrategyPtrOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSyncStrategyPtrInput` via:
//
//          ApplicationOperationSyncSyncStrategyArgs{...}
//
//  or:
//
//          nil
type ApplicationOperationSyncSyncStrategyPtrInput interface {
	pulumi.Input

	ToApplicationOperationSyncSyncStrategyPtrOutput() ApplicationOperationSyncSyncStrategyPtrOutput
	ToApplicationOperationSyncSyncStrategyPtrOutputWithContext(context.Context) ApplicationOperationSyncSyncStrategyPtrOutput
}

type applicationOperationSyncSyncStrategyPtrType ApplicationOperationSyncSyncStrategyArgs

func ApplicationOperationSyncSyncStrategyPtr(v *ApplicationOperationSyncSyncStrategyArgs) ApplicationOperationSyncSyncStrategyPtrInput {
	return (*applicationOperationSyncSyncStrategyPtrType)(v)
}

func (*applicationOperationSyncSyncStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSyncStrategy)(nil)).Elem()
}

func (i *applicationOperationSyncSyncStrategyPtrType) ToApplicationOperationSyncSyncStrategyPtrOutput() ApplicationOperationSyncSyncStrategyPtrOutput {
	return i.ToApplicationOperationSyncSyncStrategyPtrOutputWithContext(context.Background())
}

func (i *applicationOperationSyncSyncStrategyPtrType) ToApplicationOperationSyncSyncStrategyPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSyncStrategyPtrOutput)
}

// SyncStrategy describes how to perform the sync
type ApplicationOperationSyncSyncStrategyOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSyncStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSyncStrategy)(nil)).Elem()
}

func (o ApplicationOperationSyncSyncStrategyOutput) ToApplicationOperationSyncSyncStrategyOutput() ApplicationOperationSyncSyncStrategyOutput {
	return o
}

func (o ApplicationOperationSyncSyncStrategyOutput) ToApplicationOperationSyncSyncStrategyOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyOutput {
	return o
}

func (o ApplicationOperationSyncSyncStrategyOutput) ToApplicationOperationSyncSyncStrategyPtrOutput() ApplicationOperationSyncSyncStrategyPtrOutput {
	return o.ToApplicationOperationSyncSyncStrategyPtrOutputWithContext(context.Background())
}

func (o ApplicationOperationSyncSyncStrategyOutput) ToApplicationOperationSyncSyncStrategyPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSyncStrategy) *ApplicationOperationSyncSyncStrategy {
		return &v
	}).(ApplicationOperationSyncSyncStrategyPtrOutput)
}

// Apply wil perform a `kubectl apply` to perform the sync.
func (o ApplicationOperationSyncSyncStrategyOutput) Apply() ApplicationOperationSyncSyncStrategyApplyPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSyncStrategy) *ApplicationOperationSyncSyncStrategyApply {
		return v.Apply
	}).(ApplicationOperationSyncSyncStrategyApplyPtrOutput)
}

// Hook will submit any referenced resources to perform the sync. This is the default strategy
func (o ApplicationOperationSyncSyncStrategyOutput) Hook() ApplicationOperationSyncSyncStrategyHookPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSyncStrategy) *ApplicationOperationSyncSyncStrategyHook { return v.Hook }).(ApplicationOperationSyncSyncStrategyHookPtrOutput)
}

type ApplicationOperationSyncSyncStrategyPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSyncStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSyncStrategy)(nil)).Elem()
}

func (o ApplicationOperationSyncSyncStrategyPtrOutput) ToApplicationOperationSyncSyncStrategyPtrOutput() ApplicationOperationSyncSyncStrategyPtrOutput {
	return o
}

func (o ApplicationOperationSyncSyncStrategyPtrOutput) ToApplicationOperationSyncSyncStrategyPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyPtrOutput {
	return o
}

func (o ApplicationOperationSyncSyncStrategyPtrOutput) Elem() ApplicationOperationSyncSyncStrategyOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSyncStrategy) ApplicationOperationSyncSyncStrategy { return *v }).(ApplicationOperationSyncSyncStrategyOutput)
}

// Apply wil perform a `kubectl apply` to perform the sync.
func (o ApplicationOperationSyncSyncStrategyPtrOutput) Apply() ApplicationOperationSyncSyncStrategyApplyPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSyncStrategy) *ApplicationOperationSyncSyncStrategyApply {
		if v == nil {
			return nil
		}
		return v.Apply
	}).(ApplicationOperationSyncSyncStrategyApplyPtrOutput)
}

// Hook will submit any referenced resources to perform the sync. This is the default strategy
func (o ApplicationOperationSyncSyncStrategyPtrOutput) Hook() ApplicationOperationSyncSyncStrategyHookPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSyncStrategy) *ApplicationOperationSyncSyncStrategyHook {
		if v == nil {
			return nil
		}
		return v.Hook
	}).(ApplicationOperationSyncSyncStrategyHookPtrOutput)
}

// Apply wil perform a `kubectl apply` to perform the sync.
type ApplicationOperationSyncSyncStrategyApply struct {
	// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
	Force *bool `pulumi:"force"`
}

// ApplicationOperationSyncSyncStrategyApplyInput is an input type that accepts ApplicationOperationSyncSyncStrategyApplyArgs and ApplicationOperationSyncSyncStrategyApplyOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSyncStrategyApplyInput` via:
//
//          ApplicationOperationSyncSyncStrategyApplyArgs{...}
type ApplicationOperationSyncSyncStrategyApplyInput interface {
	pulumi.Input

	ToApplicationOperationSyncSyncStrategyApplyOutput() ApplicationOperationSyncSyncStrategyApplyOutput
	ToApplicationOperationSyncSyncStrategyApplyOutputWithContext(context.Context) ApplicationOperationSyncSyncStrategyApplyOutput
}

// Apply wil perform a `kubectl apply` to perform the sync.
type ApplicationOperationSyncSyncStrategyApplyArgs struct {
	// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
	Force pulumi.BoolPtrInput `pulumi:"force"`
}

func (ApplicationOperationSyncSyncStrategyApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSyncStrategyApply)(nil)).Elem()
}

func (i ApplicationOperationSyncSyncStrategyApplyArgs) ToApplicationOperationSyncSyncStrategyApplyOutput() ApplicationOperationSyncSyncStrategyApplyOutput {
	return i.ToApplicationOperationSyncSyncStrategyApplyOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSyncStrategyApplyArgs) ToApplicationOperationSyncSyncStrategyApplyOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSyncStrategyApplyOutput)
}

func (i ApplicationOperationSyncSyncStrategyApplyArgs) ToApplicationOperationSyncSyncStrategyApplyPtrOutput() ApplicationOperationSyncSyncStrategyApplyPtrOutput {
	return i.ToApplicationOperationSyncSyncStrategyApplyPtrOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSyncStrategyApplyArgs) ToApplicationOperationSyncSyncStrategyApplyPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyApplyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSyncStrategyApplyOutput).ToApplicationOperationSyncSyncStrategyApplyPtrOutputWithContext(ctx)
}

// ApplicationOperationSyncSyncStrategyApplyPtrInput is an input type that accepts ApplicationOperationSyncSyncStrategyApplyArgs, ApplicationOperationSyncSyncStrategyApplyPtr and ApplicationOperationSyncSyncStrategyApplyPtrOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSyncStrategyApplyPtrInput` via:
//
//          ApplicationOperationSyncSyncStrategyApplyArgs{...}
//
//  or:
//
//          nil
type ApplicationOperationSyncSyncStrategyApplyPtrInput interface {
	pulumi.Input

	ToApplicationOperationSyncSyncStrategyApplyPtrOutput() ApplicationOperationSyncSyncStrategyApplyPtrOutput
	ToApplicationOperationSyncSyncStrategyApplyPtrOutputWithContext(context.Context) ApplicationOperationSyncSyncStrategyApplyPtrOutput
}

type applicationOperationSyncSyncStrategyApplyPtrType ApplicationOperationSyncSyncStrategyApplyArgs

func ApplicationOperationSyncSyncStrategyApplyPtr(v *ApplicationOperationSyncSyncStrategyApplyArgs) ApplicationOperationSyncSyncStrategyApplyPtrInput {
	return (*applicationOperationSyncSyncStrategyApplyPtrType)(v)
}

func (*applicationOperationSyncSyncStrategyApplyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSyncStrategyApply)(nil)).Elem()
}

func (i *applicationOperationSyncSyncStrategyApplyPtrType) ToApplicationOperationSyncSyncStrategyApplyPtrOutput() ApplicationOperationSyncSyncStrategyApplyPtrOutput {
	return i.ToApplicationOperationSyncSyncStrategyApplyPtrOutputWithContext(context.Background())
}

func (i *applicationOperationSyncSyncStrategyApplyPtrType) ToApplicationOperationSyncSyncStrategyApplyPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyApplyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSyncStrategyApplyPtrOutput)
}

// Apply wil perform a `kubectl apply` to perform the sync.
type ApplicationOperationSyncSyncStrategyApplyOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSyncStrategyApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSyncStrategyApply)(nil)).Elem()
}

func (o ApplicationOperationSyncSyncStrategyApplyOutput) ToApplicationOperationSyncSyncStrategyApplyOutput() ApplicationOperationSyncSyncStrategyApplyOutput {
	return o
}

func (o ApplicationOperationSyncSyncStrategyApplyOutput) ToApplicationOperationSyncSyncStrategyApplyOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyApplyOutput {
	return o
}

func (o ApplicationOperationSyncSyncStrategyApplyOutput) ToApplicationOperationSyncSyncStrategyApplyPtrOutput() ApplicationOperationSyncSyncStrategyApplyPtrOutput {
	return o.ToApplicationOperationSyncSyncStrategyApplyPtrOutputWithContext(context.Background())
}

func (o ApplicationOperationSyncSyncStrategyApplyOutput) ToApplicationOperationSyncSyncStrategyApplyPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyApplyPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSyncStrategyApply) *ApplicationOperationSyncSyncStrategyApply {
		return &v
	}).(ApplicationOperationSyncSyncStrategyApplyPtrOutput)
}

// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
func (o ApplicationOperationSyncSyncStrategyApplyOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSyncStrategyApply) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

type ApplicationOperationSyncSyncStrategyApplyPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSyncStrategyApplyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSyncStrategyApply)(nil)).Elem()
}

func (o ApplicationOperationSyncSyncStrategyApplyPtrOutput) ToApplicationOperationSyncSyncStrategyApplyPtrOutput() ApplicationOperationSyncSyncStrategyApplyPtrOutput {
	return o
}

func (o ApplicationOperationSyncSyncStrategyApplyPtrOutput) ToApplicationOperationSyncSyncStrategyApplyPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyApplyPtrOutput {
	return o
}

func (o ApplicationOperationSyncSyncStrategyApplyPtrOutput) Elem() ApplicationOperationSyncSyncStrategyApplyOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSyncStrategyApply) ApplicationOperationSyncSyncStrategyApply {
		return *v
	}).(ApplicationOperationSyncSyncStrategyApplyOutput)
}

// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
func (o ApplicationOperationSyncSyncStrategyApplyPtrOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSyncStrategyApply) *bool {
		if v == nil {
			return nil
		}
		return v.Force
	}).(pulumi.BoolPtrOutput)
}

// Hook will submit any referenced resources to perform the sync. This is the default strategy
type ApplicationOperationSyncSyncStrategyHook struct {
	// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
	Force *bool `pulumi:"force"`
}

// ApplicationOperationSyncSyncStrategyHookInput is an input type that accepts ApplicationOperationSyncSyncStrategyHookArgs and ApplicationOperationSyncSyncStrategyHookOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSyncStrategyHookInput` via:
//
//          ApplicationOperationSyncSyncStrategyHookArgs{...}
type ApplicationOperationSyncSyncStrategyHookInput interface {
	pulumi.Input

	ToApplicationOperationSyncSyncStrategyHookOutput() ApplicationOperationSyncSyncStrategyHookOutput
	ToApplicationOperationSyncSyncStrategyHookOutputWithContext(context.Context) ApplicationOperationSyncSyncStrategyHookOutput
}

// Hook will submit any referenced resources to perform the sync. This is the default strategy
type ApplicationOperationSyncSyncStrategyHookArgs struct {
	// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
	Force pulumi.BoolPtrInput `pulumi:"force"`
}

func (ApplicationOperationSyncSyncStrategyHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSyncStrategyHook)(nil)).Elem()
}

func (i ApplicationOperationSyncSyncStrategyHookArgs) ToApplicationOperationSyncSyncStrategyHookOutput() ApplicationOperationSyncSyncStrategyHookOutput {
	return i.ToApplicationOperationSyncSyncStrategyHookOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSyncStrategyHookArgs) ToApplicationOperationSyncSyncStrategyHookOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSyncStrategyHookOutput)
}

func (i ApplicationOperationSyncSyncStrategyHookArgs) ToApplicationOperationSyncSyncStrategyHookPtrOutput() ApplicationOperationSyncSyncStrategyHookPtrOutput {
	return i.ToApplicationOperationSyncSyncStrategyHookPtrOutputWithContext(context.Background())
}

func (i ApplicationOperationSyncSyncStrategyHookArgs) ToApplicationOperationSyncSyncStrategyHookPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyHookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSyncStrategyHookOutput).ToApplicationOperationSyncSyncStrategyHookPtrOutputWithContext(ctx)
}

// ApplicationOperationSyncSyncStrategyHookPtrInput is an input type that accepts ApplicationOperationSyncSyncStrategyHookArgs, ApplicationOperationSyncSyncStrategyHookPtr and ApplicationOperationSyncSyncStrategyHookPtrOutput values.
// You can construct a concrete instance of `ApplicationOperationSyncSyncStrategyHookPtrInput` via:
//
//          ApplicationOperationSyncSyncStrategyHookArgs{...}
//
//  or:
//
//          nil
type ApplicationOperationSyncSyncStrategyHookPtrInput interface {
	pulumi.Input

	ToApplicationOperationSyncSyncStrategyHookPtrOutput() ApplicationOperationSyncSyncStrategyHookPtrOutput
	ToApplicationOperationSyncSyncStrategyHookPtrOutputWithContext(context.Context) ApplicationOperationSyncSyncStrategyHookPtrOutput
}

type applicationOperationSyncSyncStrategyHookPtrType ApplicationOperationSyncSyncStrategyHookArgs

func ApplicationOperationSyncSyncStrategyHookPtr(v *ApplicationOperationSyncSyncStrategyHookArgs) ApplicationOperationSyncSyncStrategyHookPtrInput {
	return (*applicationOperationSyncSyncStrategyHookPtrType)(v)
}

func (*applicationOperationSyncSyncStrategyHookPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSyncStrategyHook)(nil)).Elem()
}

func (i *applicationOperationSyncSyncStrategyHookPtrType) ToApplicationOperationSyncSyncStrategyHookPtrOutput() ApplicationOperationSyncSyncStrategyHookPtrOutput {
	return i.ToApplicationOperationSyncSyncStrategyHookPtrOutputWithContext(context.Background())
}

func (i *applicationOperationSyncSyncStrategyHookPtrType) ToApplicationOperationSyncSyncStrategyHookPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyHookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOperationSyncSyncStrategyHookPtrOutput)
}

// Hook will submit any referenced resources to perform the sync. This is the default strategy
type ApplicationOperationSyncSyncStrategyHookOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSyncStrategyHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOperationSyncSyncStrategyHook)(nil)).Elem()
}

func (o ApplicationOperationSyncSyncStrategyHookOutput) ToApplicationOperationSyncSyncStrategyHookOutput() ApplicationOperationSyncSyncStrategyHookOutput {
	return o
}

func (o ApplicationOperationSyncSyncStrategyHookOutput) ToApplicationOperationSyncSyncStrategyHookOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyHookOutput {
	return o
}

func (o ApplicationOperationSyncSyncStrategyHookOutput) ToApplicationOperationSyncSyncStrategyHookPtrOutput() ApplicationOperationSyncSyncStrategyHookPtrOutput {
	return o.ToApplicationOperationSyncSyncStrategyHookPtrOutputWithContext(context.Background())
}

func (o ApplicationOperationSyncSyncStrategyHookOutput) ToApplicationOperationSyncSyncStrategyHookPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyHookPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSyncStrategyHook) *ApplicationOperationSyncSyncStrategyHook {
		return &v
	}).(ApplicationOperationSyncSyncStrategyHookPtrOutput)
}

// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
func (o ApplicationOperationSyncSyncStrategyHookOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOperationSyncSyncStrategyHook) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

type ApplicationOperationSyncSyncStrategyHookPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOperationSyncSyncStrategyHookPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOperationSyncSyncStrategyHook)(nil)).Elem()
}

func (o ApplicationOperationSyncSyncStrategyHookPtrOutput) ToApplicationOperationSyncSyncStrategyHookPtrOutput() ApplicationOperationSyncSyncStrategyHookPtrOutput {
	return o
}

func (o ApplicationOperationSyncSyncStrategyHookPtrOutput) ToApplicationOperationSyncSyncStrategyHookPtrOutputWithContext(ctx context.Context) ApplicationOperationSyncSyncStrategyHookPtrOutput {
	return o
}

func (o ApplicationOperationSyncSyncStrategyHookPtrOutput) Elem() ApplicationOperationSyncSyncStrategyHookOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSyncStrategyHook) ApplicationOperationSyncSyncStrategyHook { return *v }).(ApplicationOperationSyncSyncStrategyHookOutput)
}

// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
func (o ApplicationOperationSyncSyncStrategyHookPtrOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationOperationSyncSyncStrategyHook) *bool {
		if v == nil {
			return nil
		}
		return v.Force
	}).(pulumi.BoolPtrOutput)
}

// ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
type ApplicationSpec struct {
	// Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
	Destination ApplicationSpecDestination `pulumi:"destination"`
	// IgnoreDifferences controls resources fields which should be ignored during comparison
	IgnoreDifferences []ApplicationSpecIgnoreDifferences `pulumi:"ignoreDifferences"`
	// Infos contains a list of useful information (URLs, email addresses, and plain text) that relates to the application
	Info []ApplicationSpecInfo `pulumi:"info"`
	// Project is a application project name. Empty name means that application belongs to 'default' project.
	Project string `pulumi:"project"`
	// This limits this number of items kept in the apps revision history. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
	RevisionHistoryLimit *int `pulumi:"revisionHistoryLimit"`
	// Source is a reference to the location ksonnet application definition
	Source ApplicationSpecSource `pulumi:"source"`
	// SyncPolicy controls when a sync will be performed
	SyncPolicy *ApplicationSpecSyncPolicy `pulumi:"syncPolicy"`
}

// ApplicationSpecInput is an input type that accepts ApplicationSpecArgs and ApplicationSpecOutput values.
// You can construct a concrete instance of `ApplicationSpecInput` via:
//
//          ApplicationSpecArgs{...}
type ApplicationSpecInput interface {
	pulumi.Input

	ToApplicationSpecOutput() ApplicationSpecOutput
	ToApplicationSpecOutputWithContext(context.Context) ApplicationSpecOutput
}

// ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
type ApplicationSpecArgs struct {
	// Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
	Destination ApplicationSpecDestinationInput `pulumi:"destination"`
	// IgnoreDifferences controls resources fields which should be ignored during comparison
	IgnoreDifferences ApplicationSpecIgnoreDifferencesArrayInput `pulumi:"ignoreDifferences"`
	// Infos contains a list of useful information (URLs, email addresses, and plain text) that relates to the application
	Info ApplicationSpecInfoArrayInput `pulumi:"info"`
	// Project is a application project name. Empty name means that application belongs to 'default' project.
	Project pulumi.StringInput `pulumi:"project"`
	// This limits this number of items kept in the apps revision history. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
	RevisionHistoryLimit pulumi.IntPtrInput `pulumi:"revisionHistoryLimit"`
	// Source is a reference to the location ksonnet application definition
	Source ApplicationSpecSourceInput `pulumi:"source"`
	// SyncPolicy controls when a sync will be performed
	SyncPolicy ApplicationSpecSyncPolicyPtrInput `pulumi:"syncPolicy"`
}

func (ApplicationSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpec)(nil)).Elem()
}

func (i ApplicationSpecArgs) ToApplicationSpecOutput() ApplicationSpecOutput {
	return i.ToApplicationSpecOutputWithContext(context.Background())
}

func (i ApplicationSpecArgs) ToApplicationSpecOutputWithContext(ctx context.Context) ApplicationSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecOutput)
}

func (i ApplicationSpecArgs) ToApplicationSpecPtrOutput() ApplicationSpecPtrOutput {
	return i.ToApplicationSpecPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecArgs) ToApplicationSpecPtrOutputWithContext(ctx context.Context) ApplicationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecOutput).ToApplicationSpecPtrOutputWithContext(ctx)
}

// ApplicationSpecPtrInput is an input type that accepts ApplicationSpecArgs, ApplicationSpecPtr and ApplicationSpecPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecPtrInput` via:
//
//          ApplicationSpecArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecPtrInput interface {
	pulumi.Input

	ToApplicationSpecPtrOutput() ApplicationSpecPtrOutput
	ToApplicationSpecPtrOutputWithContext(context.Context) ApplicationSpecPtrOutput
}

type applicationSpecPtrType ApplicationSpecArgs

func ApplicationSpecPtr(v *ApplicationSpecArgs) ApplicationSpecPtrInput {
	return (*applicationSpecPtrType)(v)
}

func (*applicationSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpec)(nil)).Elem()
}

func (i *applicationSpecPtrType) ToApplicationSpecPtrOutput() ApplicationSpecPtrOutput {
	return i.ToApplicationSpecPtrOutputWithContext(context.Background())
}

func (i *applicationSpecPtrType) ToApplicationSpecPtrOutputWithContext(ctx context.Context) ApplicationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecPtrOutput)
}

// ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
type ApplicationSpecOutput struct{ *pulumi.OutputState }

func (ApplicationSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpec)(nil)).Elem()
}

func (o ApplicationSpecOutput) ToApplicationSpecOutput() ApplicationSpecOutput {
	return o
}

func (o ApplicationSpecOutput) ToApplicationSpecOutputWithContext(ctx context.Context) ApplicationSpecOutput {
	return o
}

func (o ApplicationSpecOutput) ToApplicationSpecPtrOutput() ApplicationSpecPtrOutput {
	return o.ToApplicationSpecPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecOutput) ToApplicationSpecPtrOutputWithContext(ctx context.Context) ApplicationSpecPtrOutput {
	return o.ApplyT(func(v ApplicationSpec) *ApplicationSpec {
		return &v
	}).(ApplicationSpecPtrOutput)
}

// Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
func (o ApplicationSpecOutput) Destination() ApplicationSpecDestinationOutput {
	return o.ApplyT(func(v ApplicationSpec) ApplicationSpecDestination { return v.Destination }).(ApplicationSpecDestinationOutput)
}

// IgnoreDifferences controls resources fields which should be ignored during comparison
func (o ApplicationSpecOutput) IgnoreDifferences() ApplicationSpecIgnoreDifferencesArrayOutput {
	return o.ApplyT(func(v ApplicationSpec) []ApplicationSpecIgnoreDifferences { return v.IgnoreDifferences }).(ApplicationSpecIgnoreDifferencesArrayOutput)
}

// Infos contains a list of useful information (URLs, email addresses, and plain text) that relates to the application
func (o ApplicationSpecOutput) Info() ApplicationSpecInfoArrayOutput {
	return o.ApplyT(func(v ApplicationSpec) []ApplicationSpecInfo { return v.Info }).(ApplicationSpecInfoArrayOutput)
}

// Project is a application project name. Empty name means that application belongs to 'default' project.
func (o ApplicationSpecOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpec) string { return v.Project }).(pulumi.StringOutput)
}

// This limits this number of items kept in the apps revision history. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
func (o ApplicationSpecOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationSpec) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// Source is a reference to the location ksonnet application definition
func (o ApplicationSpecOutput) Source() ApplicationSpecSourceOutput {
	return o.ApplyT(func(v ApplicationSpec) ApplicationSpecSource { return v.Source }).(ApplicationSpecSourceOutput)
}

// SyncPolicy controls when a sync will be performed
func (o ApplicationSpecOutput) SyncPolicy() ApplicationSpecSyncPolicyPtrOutput {
	return o.ApplyT(func(v ApplicationSpec) *ApplicationSpecSyncPolicy { return v.SyncPolicy }).(ApplicationSpecSyncPolicyPtrOutput)
}

type ApplicationSpecPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpec)(nil)).Elem()
}

func (o ApplicationSpecPtrOutput) ToApplicationSpecPtrOutput() ApplicationSpecPtrOutput {
	return o
}

func (o ApplicationSpecPtrOutput) ToApplicationSpecPtrOutputWithContext(ctx context.Context) ApplicationSpecPtrOutput {
	return o
}

func (o ApplicationSpecPtrOutput) Elem() ApplicationSpecOutput {
	return o.ApplyT(func(v *ApplicationSpec) ApplicationSpec { return *v }).(ApplicationSpecOutput)
}

// Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
func (o ApplicationSpecPtrOutput) Destination() ApplicationSpecDestinationPtrOutput {
	return o.ApplyT(func(v *ApplicationSpec) *ApplicationSpecDestination {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(ApplicationSpecDestinationPtrOutput)
}

// IgnoreDifferences controls resources fields which should be ignored during comparison
func (o ApplicationSpecPtrOutput) IgnoreDifferences() ApplicationSpecIgnoreDifferencesArrayOutput {
	return o.ApplyT(func(v *ApplicationSpec) []ApplicationSpecIgnoreDifferences {
		if v == nil {
			return nil
		}
		return v.IgnoreDifferences
	}).(ApplicationSpecIgnoreDifferencesArrayOutput)
}

// Infos contains a list of useful information (URLs, email addresses, and plain text) that relates to the application
func (o ApplicationSpecPtrOutput) Info() ApplicationSpecInfoArrayOutput {
	return o.ApplyT(func(v *ApplicationSpec) []ApplicationSpecInfo {
		if v == nil {
			return nil
		}
		return v.Info
	}).(ApplicationSpecInfoArrayOutput)
}

// Project is a application project name. Empty name means that application belongs to 'default' project.
func (o ApplicationSpecPtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Project
	}).(pulumi.StringPtrOutput)
}

// This limits this number of items kept in the apps revision history. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
func (o ApplicationSpecPtrOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationSpec) *int {
		if v == nil {
			return nil
		}
		return v.RevisionHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// Source is a reference to the location ksonnet application definition
func (o ApplicationSpecPtrOutput) Source() ApplicationSpecSourcePtrOutput {
	return o.ApplyT(func(v *ApplicationSpec) *ApplicationSpecSource {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(ApplicationSpecSourcePtrOutput)
}

// SyncPolicy controls when a sync will be performed
func (o ApplicationSpecPtrOutput) SyncPolicy() ApplicationSpecSyncPolicyPtrOutput {
	return o.ApplyT(func(v *ApplicationSpec) *ApplicationSpecSyncPolicy {
		if v == nil {
			return nil
		}
		return v.SyncPolicy
	}).(ApplicationSpecSyncPolicyPtrOutput)
}

// Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
type ApplicationSpecDestination struct {
	// Name of the destination cluster which can be used instead of server (url) field
	Name *string `pulumi:"name"`
	// Namespace overrides the environment namespace value in the ksonnet app.yaml
	Namespace *string `pulumi:"namespace"`
	// Server overrides the environment server value in the ksonnet app.yaml
	Server *string `pulumi:"server"`
}

// ApplicationSpecDestinationInput is an input type that accepts ApplicationSpecDestinationArgs and ApplicationSpecDestinationOutput values.
// You can construct a concrete instance of `ApplicationSpecDestinationInput` via:
//
//          ApplicationSpecDestinationArgs{...}
type ApplicationSpecDestinationInput interface {
	pulumi.Input

	ToApplicationSpecDestinationOutput() ApplicationSpecDestinationOutput
	ToApplicationSpecDestinationOutputWithContext(context.Context) ApplicationSpecDestinationOutput
}

// Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
type ApplicationSpecDestinationArgs struct {
	// Name of the destination cluster which can be used instead of server (url) field
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace overrides the environment namespace value in the ksonnet app.yaml
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Server overrides the environment server value in the ksonnet app.yaml
	Server pulumi.StringPtrInput `pulumi:"server"`
}

func (ApplicationSpecDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecDestination)(nil)).Elem()
}

func (i ApplicationSpecDestinationArgs) ToApplicationSpecDestinationOutput() ApplicationSpecDestinationOutput {
	return i.ToApplicationSpecDestinationOutputWithContext(context.Background())
}

func (i ApplicationSpecDestinationArgs) ToApplicationSpecDestinationOutputWithContext(ctx context.Context) ApplicationSpecDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecDestinationOutput)
}

func (i ApplicationSpecDestinationArgs) ToApplicationSpecDestinationPtrOutput() ApplicationSpecDestinationPtrOutput {
	return i.ToApplicationSpecDestinationPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecDestinationArgs) ToApplicationSpecDestinationPtrOutputWithContext(ctx context.Context) ApplicationSpecDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecDestinationOutput).ToApplicationSpecDestinationPtrOutputWithContext(ctx)
}

// ApplicationSpecDestinationPtrInput is an input type that accepts ApplicationSpecDestinationArgs, ApplicationSpecDestinationPtr and ApplicationSpecDestinationPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecDestinationPtrInput` via:
//
//          ApplicationSpecDestinationArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecDestinationPtrInput interface {
	pulumi.Input

	ToApplicationSpecDestinationPtrOutput() ApplicationSpecDestinationPtrOutput
	ToApplicationSpecDestinationPtrOutputWithContext(context.Context) ApplicationSpecDestinationPtrOutput
}

type applicationSpecDestinationPtrType ApplicationSpecDestinationArgs

func ApplicationSpecDestinationPtr(v *ApplicationSpecDestinationArgs) ApplicationSpecDestinationPtrInput {
	return (*applicationSpecDestinationPtrType)(v)
}

func (*applicationSpecDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecDestination)(nil)).Elem()
}

func (i *applicationSpecDestinationPtrType) ToApplicationSpecDestinationPtrOutput() ApplicationSpecDestinationPtrOutput {
	return i.ToApplicationSpecDestinationPtrOutputWithContext(context.Background())
}

func (i *applicationSpecDestinationPtrType) ToApplicationSpecDestinationPtrOutputWithContext(ctx context.Context) ApplicationSpecDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecDestinationPtrOutput)
}

// Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
type ApplicationSpecDestinationOutput struct{ *pulumi.OutputState }

func (ApplicationSpecDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecDestination)(nil)).Elem()
}

func (o ApplicationSpecDestinationOutput) ToApplicationSpecDestinationOutput() ApplicationSpecDestinationOutput {
	return o
}

func (o ApplicationSpecDestinationOutput) ToApplicationSpecDestinationOutputWithContext(ctx context.Context) ApplicationSpecDestinationOutput {
	return o
}

func (o ApplicationSpecDestinationOutput) ToApplicationSpecDestinationPtrOutput() ApplicationSpecDestinationPtrOutput {
	return o.ToApplicationSpecDestinationPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecDestinationOutput) ToApplicationSpecDestinationPtrOutputWithContext(ctx context.Context) ApplicationSpecDestinationPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDestination) *ApplicationSpecDestination {
		return &v
	}).(ApplicationSpecDestinationPtrOutput)
}

// Name of the destination cluster which can be used instead of server (url) field
func (o ApplicationSpecDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace overrides the environment namespace value in the ksonnet app.yaml
func (o ApplicationSpecDestinationOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDestination) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Server overrides the environment server value in the ksonnet app.yaml
func (o ApplicationSpecDestinationOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDestination) *string { return v.Server }).(pulumi.StringPtrOutput)
}

type ApplicationSpecDestinationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecDestination)(nil)).Elem()
}

func (o ApplicationSpecDestinationPtrOutput) ToApplicationSpecDestinationPtrOutput() ApplicationSpecDestinationPtrOutput {
	return o
}

func (o ApplicationSpecDestinationPtrOutput) ToApplicationSpecDestinationPtrOutputWithContext(ctx context.Context) ApplicationSpecDestinationPtrOutput {
	return o
}

func (o ApplicationSpecDestinationPtrOutput) Elem() ApplicationSpecDestinationOutput {
	return o.ApplyT(func(v *ApplicationSpecDestination) ApplicationSpecDestination { return *v }).(ApplicationSpecDestinationOutput)
}

// Name of the destination cluster which can be used instead of server (url) field
func (o ApplicationSpecDestinationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecDestination) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace overrides the environment namespace value in the ksonnet app.yaml
func (o ApplicationSpecDestinationPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecDestination) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Server overrides the environment server value in the ksonnet app.yaml
func (o ApplicationSpecDestinationPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecDestination) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

// ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
type ApplicationSpecIgnoreDifferences struct {
	Group        *string  `pulumi:"group"`
	JsonPointers []string `pulumi:"jsonPointers"`
	Kind         string   `pulumi:"kind"`
	Name         *string  `pulumi:"name"`
	Namespace    *string  `pulumi:"namespace"`
}

// ApplicationSpecIgnoreDifferencesInput is an input type that accepts ApplicationSpecIgnoreDifferencesArgs and ApplicationSpecIgnoreDifferencesOutput values.
// You can construct a concrete instance of `ApplicationSpecIgnoreDifferencesInput` via:
//
//          ApplicationSpecIgnoreDifferencesArgs{...}
type ApplicationSpecIgnoreDifferencesInput interface {
	pulumi.Input

	ToApplicationSpecIgnoreDifferencesOutput() ApplicationSpecIgnoreDifferencesOutput
	ToApplicationSpecIgnoreDifferencesOutputWithContext(context.Context) ApplicationSpecIgnoreDifferencesOutput
}

// ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
type ApplicationSpecIgnoreDifferencesArgs struct {
	Group        pulumi.StringPtrInput   `pulumi:"group"`
	JsonPointers pulumi.StringArrayInput `pulumi:"jsonPointers"`
	Kind         pulumi.StringInput      `pulumi:"kind"`
	Name         pulumi.StringPtrInput   `pulumi:"name"`
	Namespace    pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (ApplicationSpecIgnoreDifferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecIgnoreDifferences)(nil)).Elem()
}

func (i ApplicationSpecIgnoreDifferencesArgs) ToApplicationSpecIgnoreDifferencesOutput() ApplicationSpecIgnoreDifferencesOutput {
	return i.ToApplicationSpecIgnoreDifferencesOutputWithContext(context.Background())
}

func (i ApplicationSpecIgnoreDifferencesArgs) ToApplicationSpecIgnoreDifferencesOutputWithContext(ctx context.Context) ApplicationSpecIgnoreDifferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecIgnoreDifferencesOutput)
}

// ApplicationSpecIgnoreDifferencesArrayInput is an input type that accepts ApplicationSpecIgnoreDifferencesArray and ApplicationSpecIgnoreDifferencesArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecIgnoreDifferencesArrayInput` via:
//
//          ApplicationSpecIgnoreDifferencesArray{ ApplicationSpecIgnoreDifferencesArgs{...} }
type ApplicationSpecIgnoreDifferencesArrayInput interface {
	pulumi.Input

	ToApplicationSpecIgnoreDifferencesArrayOutput() ApplicationSpecIgnoreDifferencesArrayOutput
	ToApplicationSpecIgnoreDifferencesArrayOutputWithContext(context.Context) ApplicationSpecIgnoreDifferencesArrayOutput
}

type ApplicationSpecIgnoreDifferencesArray []ApplicationSpecIgnoreDifferencesInput

func (ApplicationSpecIgnoreDifferencesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecIgnoreDifferences)(nil)).Elem()
}

func (i ApplicationSpecIgnoreDifferencesArray) ToApplicationSpecIgnoreDifferencesArrayOutput() ApplicationSpecIgnoreDifferencesArrayOutput {
	return i.ToApplicationSpecIgnoreDifferencesArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecIgnoreDifferencesArray) ToApplicationSpecIgnoreDifferencesArrayOutputWithContext(ctx context.Context) ApplicationSpecIgnoreDifferencesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecIgnoreDifferencesArrayOutput)
}

// ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
type ApplicationSpecIgnoreDifferencesOutput struct{ *pulumi.OutputState }

func (ApplicationSpecIgnoreDifferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecIgnoreDifferences)(nil)).Elem()
}

func (o ApplicationSpecIgnoreDifferencesOutput) ToApplicationSpecIgnoreDifferencesOutput() ApplicationSpecIgnoreDifferencesOutput {
	return o
}

func (o ApplicationSpecIgnoreDifferencesOutput) ToApplicationSpecIgnoreDifferencesOutputWithContext(ctx context.Context) ApplicationSpecIgnoreDifferencesOutput {
	return o
}

func (o ApplicationSpecIgnoreDifferencesOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecIgnoreDifferences) *string { return v.Group }).(pulumi.StringPtrOutput)
}

func (o ApplicationSpecIgnoreDifferencesOutput) JsonPointers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationSpecIgnoreDifferences) []string { return v.JsonPointers }).(pulumi.StringArrayOutput)
}

func (o ApplicationSpecIgnoreDifferencesOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecIgnoreDifferences) string { return v.Kind }).(pulumi.StringOutput)
}

func (o ApplicationSpecIgnoreDifferencesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecIgnoreDifferences) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ApplicationSpecIgnoreDifferencesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecIgnoreDifferences) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ApplicationSpecIgnoreDifferencesArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecIgnoreDifferencesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecIgnoreDifferences)(nil)).Elem()
}

func (o ApplicationSpecIgnoreDifferencesArrayOutput) ToApplicationSpecIgnoreDifferencesArrayOutput() ApplicationSpecIgnoreDifferencesArrayOutput {
	return o
}

func (o ApplicationSpecIgnoreDifferencesArrayOutput) ToApplicationSpecIgnoreDifferencesArrayOutputWithContext(ctx context.Context) ApplicationSpecIgnoreDifferencesArrayOutput {
	return o
}

func (o ApplicationSpecIgnoreDifferencesArrayOutput) Index(i pulumi.IntInput) ApplicationSpecIgnoreDifferencesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecIgnoreDifferences {
		return vs[0].([]ApplicationSpecIgnoreDifferences)[vs[1].(int)]
	}).(ApplicationSpecIgnoreDifferencesOutput)
}

type ApplicationSpecInfo struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ApplicationSpecInfoInput is an input type that accepts ApplicationSpecInfoArgs and ApplicationSpecInfoOutput values.
// You can construct a concrete instance of `ApplicationSpecInfoInput` via:
//
//          ApplicationSpecInfoArgs{...}
type ApplicationSpecInfoInput interface {
	pulumi.Input

	ToApplicationSpecInfoOutput() ApplicationSpecInfoOutput
	ToApplicationSpecInfoOutputWithContext(context.Context) ApplicationSpecInfoOutput
}

type ApplicationSpecInfoArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApplicationSpecInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecInfo)(nil)).Elem()
}

func (i ApplicationSpecInfoArgs) ToApplicationSpecInfoOutput() ApplicationSpecInfoOutput {
	return i.ToApplicationSpecInfoOutputWithContext(context.Background())
}

func (i ApplicationSpecInfoArgs) ToApplicationSpecInfoOutputWithContext(ctx context.Context) ApplicationSpecInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoOutput)
}

// ApplicationSpecInfoArrayInput is an input type that accepts ApplicationSpecInfoArray and ApplicationSpecInfoArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecInfoArrayInput` via:
//
//          ApplicationSpecInfoArray{ ApplicationSpecInfoArgs{...} }
type ApplicationSpecInfoArrayInput interface {
	pulumi.Input

	ToApplicationSpecInfoArrayOutput() ApplicationSpecInfoArrayOutput
	ToApplicationSpecInfoArrayOutputWithContext(context.Context) ApplicationSpecInfoArrayOutput
}

type ApplicationSpecInfoArray []ApplicationSpecInfoInput

func (ApplicationSpecInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecInfo)(nil)).Elem()
}

func (i ApplicationSpecInfoArray) ToApplicationSpecInfoArrayOutput() ApplicationSpecInfoArrayOutput {
	return i.ToApplicationSpecInfoArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecInfoArray) ToApplicationSpecInfoArrayOutputWithContext(ctx context.Context) ApplicationSpecInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoArrayOutput)
}

type ApplicationSpecInfoOutput struct{ *pulumi.OutputState }

func (ApplicationSpecInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecInfo)(nil)).Elem()
}

func (o ApplicationSpecInfoOutput) ToApplicationSpecInfoOutput() ApplicationSpecInfoOutput {
	return o
}

func (o ApplicationSpecInfoOutput) ToApplicationSpecInfoOutputWithContext(ctx context.Context) ApplicationSpecInfoOutput {
	return o
}

func (o ApplicationSpecInfoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecInfo) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationSpecInfoOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecInfo) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationSpecInfoArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecInfo)(nil)).Elem()
}

func (o ApplicationSpecInfoArrayOutput) ToApplicationSpecInfoArrayOutput() ApplicationSpecInfoArrayOutput {
	return o
}

func (o ApplicationSpecInfoArrayOutput) ToApplicationSpecInfoArrayOutputWithContext(ctx context.Context) ApplicationSpecInfoArrayOutput {
	return o
}

func (o ApplicationSpecInfoArrayOutput) Index(i pulumi.IntInput) ApplicationSpecInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecInfo {
		return vs[0].([]ApplicationSpecInfo)[vs[1].(int)]
	}).(ApplicationSpecInfoOutput)
}

// Source is a reference to the location ksonnet application definition
type ApplicationSpecSource struct {
	// Chart is a Helm chart name
	Chart *string `pulumi:"chart"`
	// Directory holds path/directory specific options
	Directory *ApplicationSpecSourceDirectory `pulumi:"directory"`
	// Helm holds helm specific options
	Helm *ApplicationSpecSourceHelm `pulumi:"helm"`
	// Ksonnet holds ksonnet specific options
	Ksonnet *ApplicationSpecSourceKsonnet `pulumi:"ksonnet"`
	// Kustomize holds kustomize specific options
	Kustomize *ApplicationSpecSourceKustomize `pulumi:"kustomize"`
	// Path is a directory path within the Git repository
	Path *string `pulumi:"path"`
	// ConfigManagementPlugin holds config management plugin specific options
	Plugin *ApplicationSpecSourcePlugin `pulumi:"plugin"`
	// RepoURL is the repository URL of the application manifests
	RepoURL string `pulumi:"repoURL"`
	// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
	TargetRevision *string `pulumi:"targetRevision"`
}

// ApplicationSpecSourceInput is an input type that accepts ApplicationSpecSourceArgs and ApplicationSpecSourceOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceInput` via:
//
//          ApplicationSpecSourceArgs{...}
type ApplicationSpecSourceInput interface {
	pulumi.Input

	ToApplicationSpecSourceOutput() ApplicationSpecSourceOutput
	ToApplicationSpecSourceOutputWithContext(context.Context) ApplicationSpecSourceOutput
}

// Source is a reference to the location ksonnet application definition
type ApplicationSpecSourceArgs struct {
	// Chart is a Helm chart name
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// Directory holds path/directory specific options
	Directory ApplicationSpecSourceDirectoryPtrInput `pulumi:"directory"`
	// Helm holds helm specific options
	Helm ApplicationSpecSourceHelmPtrInput `pulumi:"helm"`
	// Ksonnet holds ksonnet specific options
	Ksonnet ApplicationSpecSourceKsonnetPtrInput `pulumi:"ksonnet"`
	// Kustomize holds kustomize specific options
	Kustomize ApplicationSpecSourceKustomizePtrInput `pulumi:"kustomize"`
	// Path is a directory path within the Git repository
	Path pulumi.StringPtrInput `pulumi:"path"`
	// ConfigManagementPlugin holds config management plugin specific options
	Plugin ApplicationSpecSourcePluginPtrInput `pulumi:"plugin"`
	// RepoURL is the repository URL of the application manifests
	RepoURL pulumi.StringInput `pulumi:"repoURL"`
	// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
	TargetRevision pulumi.StringPtrInput `pulumi:"targetRevision"`
}

func (ApplicationSpecSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSource)(nil)).Elem()
}

func (i ApplicationSpecSourceArgs) ToApplicationSpecSourceOutput() ApplicationSpecSourceOutput {
	return i.ToApplicationSpecSourceOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceArgs) ToApplicationSpecSourceOutputWithContext(ctx context.Context) ApplicationSpecSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceOutput)
}

func (i ApplicationSpecSourceArgs) ToApplicationSpecSourcePtrOutput() ApplicationSpecSourcePtrOutput {
	return i.ToApplicationSpecSourcePtrOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceArgs) ToApplicationSpecSourcePtrOutputWithContext(ctx context.Context) ApplicationSpecSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceOutput).ToApplicationSpecSourcePtrOutputWithContext(ctx)
}

// ApplicationSpecSourcePtrInput is an input type that accepts ApplicationSpecSourceArgs, ApplicationSpecSourcePtr and ApplicationSpecSourcePtrOutput values.
// You can construct a concrete instance of `ApplicationSpecSourcePtrInput` via:
//
//          ApplicationSpecSourceArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecSourcePtrInput interface {
	pulumi.Input

	ToApplicationSpecSourcePtrOutput() ApplicationSpecSourcePtrOutput
	ToApplicationSpecSourcePtrOutputWithContext(context.Context) ApplicationSpecSourcePtrOutput
}

type applicationSpecSourcePtrType ApplicationSpecSourceArgs

func ApplicationSpecSourcePtr(v *ApplicationSpecSourceArgs) ApplicationSpecSourcePtrInput {
	return (*applicationSpecSourcePtrType)(v)
}

func (*applicationSpecSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSource)(nil)).Elem()
}

func (i *applicationSpecSourcePtrType) ToApplicationSpecSourcePtrOutput() ApplicationSpecSourcePtrOutput {
	return i.ToApplicationSpecSourcePtrOutputWithContext(context.Background())
}

func (i *applicationSpecSourcePtrType) ToApplicationSpecSourcePtrOutputWithContext(ctx context.Context) ApplicationSpecSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourcePtrOutput)
}

// Source is a reference to the location ksonnet application definition
type ApplicationSpecSourceOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSource)(nil)).Elem()
}

func (o ApplicationSpecSourceOutput) ToApplicationSpecSourceOutput() ApplicationSpecSourceOutput {
	return o
}

func (o ApplicationSpecSourceOutput) ToApplicationSpecSourceOutputWithContext(ctx context.Context) ApplicationSpecSourceOutput {
	return o
}

func (o ApplicationSpecSourceOutput) ToApplicationSpecSourcePtrOutput() ApplicationSpecSourcePtrOutput {
	return o.ToApplicationSpecSourcePtrOutputWithContext(context.Background())
}

func (o ApplicationSpecSourceOutput) ToApplicationSpecSourcePtrOutputWithContext(ctx context.Context) ApplicationSpecSourcePtrOutput {
	return o.ApplyT(func(v ApplicationSpecSource) *ApplicationSpecSource {
		return &v
	}).(ApplicationSpecSourcePtrOutput)
}

// Chart is a Helm chart name
func (o ApplicationSpecSourceOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSource) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
func (o ApplicationSpecSourceOutput) Directory() ApplicationSpecSourceDirectoryPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSource) *ApplicationSpecSourceDirectory { return v.Directory }).(ApplicationSpecSourceDirectoryPtrOutput)
}

// Helm holds helm specific options
func (o ApplicationSpecSourceOutput) Helm() ApplicationSpecSourceHelmPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSource) *ApplicationSpecSourceHelm { return v.Helm }).(ApplicationSpecSourceHelmPtrOutput)
}

// Ksonnet holds ksonnet specific options
func (o ApplicationSpecSourceOutput) Ksonnet() ApplicationSpecSourceKsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSource) *ApplicationSpecSourceKsonnet { return v.Ksonnet }).(ApplicationSpecSourceKsonnetPtrOutput)
}

// Kustomize holds kustomize specific options
func (o ApplicationSpecSourceOutput) Kustomize() ApplicationSpecSourceKustomizePtrOutput {
	return o.ApplyT(func(v ApplicationSpecSource) *ApplicationSpecSourceKustomize { return v.Kustomize }).(ApplicationSpecSourceKustomizePtrOutput)
}

// Path is a directory path within the Git repository
func (o ApplicationSpecSourceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSource) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
func (o ApplicationSpecSourceOutput) Plugin() ApplicationSpecSourcePluginPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSource) *ApplicationSpecSourcePlugin { return v.Plugin }).(ApplicationSpecSourcePluginPtrOutput)
}

// RepoURL is the repository URL of the application manifests
func (o ApplicationSpecSourceOutput) RepoURL() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecSource) string { return v.RepoURL }).(pulumi.StringOutput)
}

// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
func (o ApplicationSpecSourceOutput) TargetRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSource) *string { return v.TargetRevision }).(pulumi.StringPtrOutput)
}

type ApplicationSpecSourcePtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSource)(nil)).Elem()
}

func (o ApplicationSpecSourcePtrOutput) ToApplicationSpecSourcePtrOutput() ApplicationSpecSourcePtrOutput {
	return o
}

func (o ApplicationSpecSourcePtrOutput) ToApplicationSpecSourcePtrOutputWithContext(ctx context.Context) ApplicationSpecSourcePtrOutput {
	return o
}

func (o ApplicationSpecSourcePtrOutput) Elem() ApplicationSpecSourceOutput {
	return o.ApplyT(func(v *ApplicationSpecSource) ApplicationSpecSource { return *v }).(ApplicationSpecSourceOutput)
}

// Chart is a Helm chart name
func (o ApplicationSpecSourcePtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSource) *string {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
func (o ApplicationSpecSourcePtrOutput) Directory() ApplicationSpecSourceDirectoryPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSource) *ApplicationSpecSourceDirectory {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(ApplicationSpecSourceDirectoryPtrOutput)
}

// Helm holds helm specific options
func (o ApplicationSpecSourcePtrOutput) Helm() ApplicationSpecSourceHelmPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSource) *ApplicationSpecSourceHelm {
		if v == nil {
			return nil
		}
		return v.Helm
	}).(ApplicationSpecSourceHelmPtrOutput)
}

// Ksonnet holds ksonnet specific options
func (o ApplicationSpecSourcePtrOutput) Ksonnet() ApplicationSpecSourceKsonnetPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSource) *ApplicationSpecSourceKsonnet {
		if v == nil {
			return nil
		}
		return v.Ksonnet
	}).(ApplicationSpecSourceKsonnetPtrOutput)
}

// Kustomize holds kustomize specific options
func (o ApplicationSpecSourcePtrOutput) Kustomize() ApplicationSpecSourceKustomizePtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSource) *ApplicationSpecSourceKustomize {
		if v == nil {
			return nil
		}
		return v.Kustomize
	}).(ApplicationSpecSourceKustomizePtrOutput)
}

// Path is a directory path within the Git repository
func (o ApplicationSpecSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSource) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
func (o ApplicationSpecSourcePtrOutput) Plugin() ApplicationSpecSourcePluginPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSource) *ApplicationSpecSourcePlugin {
		if v == nil {
			return nil
		}
		return v.Plugin
	}).(ApplicationSpecSourcePluginPtrOutput)
}

// RepoURL is the repository URL of the application manifests
func (o ApplicationSpecSourcePtrOutput) RepoURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSource) *string {
		if v == nil {
			return nil
		}
		return &v.RepoURL
	}).(pulumi.StringPtrOutput)
}

// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
func (o ApplicationSpecSourcePtrOutput) TargetRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSource) *string {
		if v == nil {
			return nil
		}
		return v.TargetRevision
	}).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
type ApplicationSpecSourceDirectory struct {
	// ApplicationSourceJsonnet holds jsonnet specific options
	Jsonnet *ApplicationSpecSourceDirectoryJsonnet `pulumi:"jsonnet"`
	Recurse *bool                                  `pulumi:"recurse"`
}

// ApplicationSpecSourceDirectoryInput is an input type that accepts ApplicationSpecSourceDirectoryArgs and ApplicationSpecSourceDirectoryOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceDirectoryInput` via:
//
//          ApplicationSpecSourceDirectoryArgs{...}
type ApplicationSpecSourceDirectoryInput interface {
	pulumi.Input

	ToApplicationSpecSourceDirectoryOutput() ApplicationSpecSourceDirectoryOutput
	ToApplicationSpecSourceDirectoryOutputWithContext(context.Context) ApplicationSpecSourceDirectoryOutput
}

// Directory holds path/directory specific options
type ApplicationSpecSourceDirectoryArgs struct {
	// ApplicationSourceJsonnet holds jsonnet specific options
	Jsonnet ApplicationSpecSourceDirectoryJsonnetPtrInput `pulumi:"jsonnet"`
	Recurse pulumi.BoolPtrInput                           `pulumi:"recurse"`
}

func (ApplicationSpecSourceDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceDirectory)(nil)).Elem()
}

func (i ApplicationSpecSourceDirectoryArgs) ToApplicationSpecSourceDirectoryOutput() ApplicationSpecSourceDirectoryOutput {
	return i.ToApplicationSpecSourceDirectoryOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceDirectoryArgs) ToApplicationSpecSourceDirectoryOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceDirectoryOutput)
}

func (i ApplicationSpecSourceDirectoryArgs) ToApplicationSpecSourceDirectoryPtrOutput() ApplicationSpecSourceDirectoryPtrOutput {
	return i.ToApplicationSpecSourceDirectoryPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceDirectoryArgs) ToApplicationSpecSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceDirectoryOutput).ToApplicationSpecSourceDirectoryPtrOutputWithContext(ctx)
}

// ApplicationSpecSourceDirectoryPtrInput is an input type that accepts ApplicationSpecSourceDirectoryArgs, ApplicationSpecSourceDirectoryPtr and ApplicationSpecSourceDirectoryPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceDirectoryPtrInput` via:
//
//          ApplicationSpecSourceDirectoryArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecSourceDirectoryPtrInput interface {
	pulumi.Input

	ToApplicationSpecSourceDirectoryPtrOutput() ApplicationSpecSourceDirectoryPtrOutput
	ToApplicationSpecSourceDirectoryPtrOutputWithContext(context.Context) ApplicationSpecSourceDirectoryPtrOutput
}

type applicationSpecSourceDirectoryPtrType ApplicationSpecSourceDirectoryArgs

func ApplicationSpecSourceDirectoryPtr(v *ApplicationSpecSourceDirectoryArgs) ApplicationSpecSourceDirectoryPtrInput {
	return (*applicationSpecSourceDirectoryPtrType)(v)
}

func (*applicationSpecSourceDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSourceDirectory)(nil)).Elem()
}

func (i *applicationSpecSourceDirectoryPtrType) ToApplicationSpecSourceDirectoryPtrOutput() ApplicationSpecSourceDirectoryPtrOutput {
	return i.ToApplicationSpecSourceDirectoryPtrOutputWithContext(context.Background())
}

func (i *applicationSpecSourceDirectoryPtrType) ToApplicationSpecSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceDirectoryPtrOutput)
}

// Directory holds path/directory specific options
type ApplicationSpecSourceDirectoryOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceDirectory)(nil)).Elem()
}

func (o ApplicationSpecSourceDirectoryOutput) ToApplicationSpecSourceDirectoryOutput() ApplicationSpecSourceDirectoryOutput {
	return o
}

func (o ApplicationSpecSourceDirectoryOutput) ToApplicationSpecSourceDirectoryOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryOutput {
	return o
}

func (o ApplicationSpecSourceDirectoryOutput) ToApplicationSpecSourceDirectoryPtrOutput() ApplicationSpecSourceDirectoryPtrOutput {
	return o.ToApplicationSpecSourceDirectoryPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecSourceDirectoryOutput) ToApplicationSpecSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceDirectory) *ApplicationSpecSourceDirectory {
		return &v
	}).(ApplicationSpecSourceDirectoryPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
func (o ApplicationSpecSourceDirectoryOutput) Jsonnet() ApplicationSpecSourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceDirectory) *ApplicationSpecSourceDirectoryJsonnet { return v.Jsonnet }).(ApplicationSpecSourceDirectoryJsonnetPtrOutput)
}

func (o ApplicationSpecSourceDirectoryOutput) Recurse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceDirectory) *bool { return v.Recurse }).(pulumi.BoolPtrOutput)
}

type ApplicationSpecSourceDirectoryPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSourceDirectory)(nil)).Elem()
}

func (o ApplicationSpecSourceDirectoryPtrOutput) ToApplicationSpecSourceDirectoryPtrOutput() ApplicationSpecSourceDirectoryPtrOutput {
	return o
}

func (o ApplicationSpecSourceDirectoryPtrOutput) ToApplicationSpecSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryPtrOutput {
	return o
}

func (o ApplicationSpecSourceDirectoryPtrOutput) Elem() ApplicationSpecSourceDirectoryOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceDirectory) ApplicationSpecSourceDirectory { return *v }).(ApplicationSpecSourceDirectoryOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
func (o ApplicationSpecSourceDirectoryPtrOutput) Jsonnet() ApplicationSpecSourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceDirectory) *ApplicationSpecSourceDirectoryJsonnet {
		if v == nil {
			return nil
		}
		return v.Jsonnet
	}).(ApplicationSpecSourceDirectoryJsonnetPtrOutput)
}

func (o ApplicationSpecSourceDirectoryPtrOutput) Recurse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceDirectory) *bool {
		if v == nil {
			return nil
		}
		return v.Recurse
	}).(pulumi.BoolPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationSpecSourceDirectoryJsonnet struct {
	// ExtVars is a list of Jsonnet External Variables
	ExtVars []ApplicationSpecSourceDirectoryJsonnetExtVars `pulumi:"extVars"`
	// Additional library search dirs
	Libs []string `pulumi:"libs"`
	// TLAS is a list of Jsonnet Top-level Arguments
	Tlas []ApplicationSpecSourceDirectoryJsonnetTlas `pulumi:"tlas"`
}

// ApplicationSpecSourceDirectoryJsonnetInput is an input type that accepts ApplicationSpecSourceDirectoryJsonnetArgs and ApplicationSpecSourceDirectoryJsonnetOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceDirectoryJsonnetInput` via:
//
//          ApplicationSpecSourceDirectoryJsonnetArgs{...}
type ApplicationSpecSourceDirectoryJsonnetInput interface {
	pulumi.Input

	ToApplicationSpecSourceDirectoryJsonnetOutput() ApplicationSpecSourceDirectoryJsonnetOutput
	ToApplicationSpecSourceDirectoryJsonnetOutputWithContext(context.Context) ApplicationSpecSourceDirectoryJsonnetOutput
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationSpecSourceDirectoryJsonnetArgs struct {
	// ExtVars is a list of Jsonnet External Variables
	ExtVars ApplicationSpecSourceDirectoryJsonnetExtVarsArrayInput `pulumi:"extVars"`
	// Additional library search dirs
	Libs pulumi.StringArrayInput `pulumi:"libs"`
	// TLAS is a list of Jsonnet Top-level Arguments
	Tlas ApplicationSpecSourceDirectoryJsonnetTlasArrayInput `pulumi:"tlas"`
}

func (ApplicationSpecSourceDirectoryJsonnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceDirectoryJsonnet)(nil)).Elem()
}

func (i ApplicationSpecSourceDirectoryJsonnetArgs) ToApplicationSpecSourceDirectoryJsonnetOutput() ApplicationSpecSourceDirectoryJsonnetOutput {
	return i.ToApplicationSpecSourceDirectoryJsonnetOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceDirectoryJsonnetArgs) ToApplicationSpecSourceDirectoryJsonnetOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryJsonnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceDirectoryJsonnetOutput)
}

func (i ApplicationSpecSourceDirectoryJsonnetArgs) ToApplicationSpecSourceDirectoryJsonnetPtrOutput() ApplicationSpecSourceDirectoryJsonnetPtrOutput {
	return i.ToApplicationSpecSourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceDirectoryJsonnetArgs) ToApplicationSpecSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryJsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceDirectoryJsonnetOutput).ToApplicationSpecSourceDirectoryJsonnetPtrOutputWithContext(ctx)
}

// ApplicationSpecSourceDirectoryJsonnetPtrInput is an input type that accepts ApplicationSpecSourceDirectoryJsonnetArgs, ApplicationSpecSourceDirectoryJsonnetPtr and ApplicationSpecSourceDirectoryJsonnetPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceDirectoryJsonnetPtrInput` via:
//
//          ApplicationSpecSourceDirectoryJsonnetArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecSourceDirectoryJsonnetPtrInput interface {
	pulumi.Input

	ToApplicationSpecSourceDirectoryJsonnetPtrOutput() ApplicationSpecSourceDirectoryJsonnetPtrOutput
	ToApplicationSpecSourceDirectoryJsonnetPtrOutputWithContext(context.Context) ApplicationSpecSourceDirectoryJsonnetPtrOutput
}

type applicationSpecSourceDirectoryJsonnetPtrType ApplicationSpecSourceDirectoryJsonnetArgs

func ApplicationSpecSourceDirectoryJsonnetPtr(v *ApplicationSpecSourceDirectoryJsonnetArgs) ApplicationSpecSourceDirectoryJsonnetPtrInput {
	return (*applicationSpecSourceDirectoryJsonnetPtrType)(v)
}

func (*applicationSpecSourceDirectoryJsonnetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSourceDirectoryJsonnet)(nil)).Elem()
}

func (i *applicationSpecSourceDirectoryJsonnetPtrType) ToApplicationSpecSourceDirectoryJsonnetPtrOutput() ApplicationSpecSourceDirectoryJsonnetPtrOutput {
	return i.ToApplicationSpecSourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (i *applicationSpecSourceDirectoryJsonnetPtrType) ToApplicationSpecSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryJsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceDirectoryJsonnetPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationSpecSourceDirectoryJsonnetOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceDirectoryJsonnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceDirectoryJsonnet)(nil)).Elem()
}

func (o ApplicationSpecSourceDirectoryJsonnetOutput) ToApplicationSpecSourceDirectoryJsonnetOutput() ApplicationSpecSourceDirectoryJsonnetOutput {
	return o
}

func (o ApplicationSpecSourceDirectoryJsonnetOutput) ToApplicationSpecSourceDirectoryJsonnetOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryJsonnetOutput {
	return o
}

func (o ApplicationSpecSourceDirectoryJsonnetOutput) ToApplicationSpecSourceDirectoryJsonnetPtrOutput() ApplicationSpecSourceDirectoryJsonnetPtrOutput {
	return o.ToApplicationSpecSourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecSourceDirectoryJsonnetOutput) ToApplicationSpecSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceDirectoryJsonnet) *ApplicationSpecSourceDirectoryJsonnet {
		return &v
	}).(ApplicationSpecSourceDirectoryJsonnetPtrOutput)
}

// ExtVars is a list of Jsonnet External Variables
func (o ApplicationSpecSourceDirectoryJsonnetOutput) ExtVars() ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput {
	return o.ApplyT(func(v ApplicationSpecSourceDirectoryJsonnet) []ApplicationSpecSourceDirectoryJsonnetExtVars {
		return v.ExtVars
	}).(ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput)
}

// Additional library search dirs
func (o ApplicationSpecSourceDirectoryJsonnetOutput) Libs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationSpecSourceDirectoryJsonnet) []string { return v.Libs }).(pulumi.StringArrayOutput)
}

// TLAS is a list of Jsonnet Top-level Arguments
func (o ApplicationSpecSourceDirectoryJsonnetOutput) Tlas() ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput {
	return o.ApplyT(func(v ApplicationSpecSourceDirectoryJsonnet) []ApplicationSpecSourceDirectoryJsonnetTlas {
		return v.Tlas
	}).(ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput)
}

type ApplicationSpecSourceDirectoryJsonnetPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceDirectoryJsonnetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSourceDirectoryJsonnet)(nil)).Elem()
}

func (o ApplicationSpecSourceDirectoryJsonnetPtrOutput) ToApplicationSpecSourceDirectoryJsonnetPtrOutput() ApplicationSpecSourceDirectoryJsonnetPtrOutput {
	return o
}

func (o ApplicationSpecSourceDirectoryJsonnetPtrOutput) ToApplicationSpecSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryJsonnetPtrOutput {
	return o
}

func (o ApplicationSpecSourceDirectoryJsonnetPtrOutput) Elem() ApplicationSpecSourceDirectoryJsonnetOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceDirectoryJsonnet) ApplicationSpecSourceDirectoryJsonnet { return *v }).(ApplicationSpecSourceDirectoryJsonnetOutput)
}

// ExtVars is a list of Jsonnet External Variables
func (o ApplicationSpecSourceDirectoryJsonnetPtrOutput) ExtVars() ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceDirectoryJsonnet) []ApplicationSpecSourceDirectoryJsonnetExtVars {
		if v == nil {
			return nil
		}
		return v.ExtVars
	}).(ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput)
}

// Additional library search dirs
func (o ApplicationSpecSourceDirectoryJsonnetPtrOutput) Libs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceDirectoryJsonnet) []string {
		if v == nil {
			return nil
		}
		return v.Libs
	}).(pulumi.StringArrayOutput)
}

// TLAS is a list of Jsonnet Top-level Arguments
func (o ApplicationSpecSourceDirectoryJsonnetPtrOutput) Tlas() ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceDirectoryJsonnet) []ApplicationSpecSourceDirectoryJsonnetTlas {
		if v == nil {
			return nil
		}
		return v.Tlas
	}).(ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationSpecSourceDirectoryJsonnetExtVars struct {
	Code  *bool  `pulumi:"code"`
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ApplicationSpecSourceDirectoryJsonnetExtVarsInput is an input type that accepts ApplicationSpecSourceDirectoryJsonnetExtVarsArgs and ApplicationSpecSourceDirectoryJsonnetExtVarsOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceDirectoryJsonnetExtVarsInput` via:
//
//          ApplicationSpecSourceDirectoryJsonnetExtVarsArgs{...}
type ApplicationSpecSourceDirectoryJsonnetExtVarsInput interface {
	pulumi.Input

	ToApplicationSpecSourceDirectoryJsonnetExtVarsOutput() ApplicationSpecSourceDirectoryJsonnetExtVarsOutput
	ToApplicationSpecSourceDirectoryJsonnetExtVarsOutputWithContext(context.Context) ApplicationSpecSourceDirectoryJsonnetExtVarsOutput
}

// JsonnetVar is a jsonnet variable
type ApplicationSpecSourceDirectoryJsonnetExtVarsArgs struct {
	Code  pulumi.BoolPtrInput `pulumi:"code"`
	Name  pulumi.StringInput  `pulumi:"name"`
	Value pulumi.StringInput  `pulumi:"value"`
}

func (ApplicationSpecSourceDirectoryJsonnetExtVarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (i ApplicationSpecSourceDirectoryJsonnetExtVarsArgs) ToApplicationSpecSourceDirectoryJsonnetExtVarsOutput() ApplicationSpecSourceDirectoryJsonnetExtVarsOutput {
	return i.ToApplicationSpecSourceDirectoryJsonnetExtVarsOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceDirectoryJsonnetExtVarsArgs) ToApplicationSpecSourceDirectoryJsonnetExtVarsOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryJsonnetExtVarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceDirectoryJsonnetExtVarsOutput)
}

// ApplicationSpecSourceDirectoryJsonnetExtVarsArrayInput is an input type that accepts ApplicationSpecSourceDirectoryJsonnetExtVarsArray and ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceDirectoryJsonnetExtVarsArrayInput` via:
//
//          ApplicationSpecSourceDirectoryJsonnetExtVarsArray{ ApplicationSpecSourceDirectoryJsonnetExtVarsArgs{...} }
type ApplicationSpecSourceDirectoryJsonnetExtVarsArrayInput interface {
	pulumi.Input

	ToApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput() ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput
	ToApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutputWithContext(context.Context) ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput
}

type ApplicationSpecSourceDirectoryJsonnetExtVarsArray []ApplicationSpecSourceDirectoryJsonnetExtVarsInput

func (ApplicationSpecSourceDirectoryJsonnetExtVarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (i ApplicationSpecSourceDirectoryJsonnetExtVarsArray) ToApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput() ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput {
	return i.ToApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceDirectoryJsonnetExtVarsArray) ToApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationSpecSourceDirectoryJsonnetExtVarsOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceDirectoryJsonnetExtVarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (o ApplicationSpecSourceDirectoryJsonnetExtVarsOutput) ToApplicationSpecSourceDirectoryJsonnetExtVarsOutput() ApplicationSpecSourceDirectoryJsonnetExtVarsOutput {
	return o
}

func (o ApplicationSpecSourceDirectoryJsonnetExtVarsOutput) ToApplicationSpecSourceDirectoryJsonnetExtVarsOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryJsonnetExtVarsOutput {
	return o
}

func (o ApplicationSpecSourceDirectoryJsonnetExtVarsOutput) Code() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceDirectoryJsonnetExtVars) *bool { return v.Code }).(pulumi.BoolPtrOutput)
}

func (o ApplicationSpecSourceDirectoryJsonnetExtVarsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecSourceDirectoryJsonnetExtVars) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationSpecSourceDirectoryJsonnetExtVarsOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecSourceDirectoryJsonnetExtVars) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (o ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput) ToApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput() ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput {
	return o
}

func (o ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput) ToApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput {
	return o
}

func (o ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput) Index(i pulumi.IntInput) ApplicationSpecSourceDirectoryJsonnetExtVarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecSourceDirectoryJsonnetExtVars {
		return vs[0].([]ApplicationSpecSourceDirectoryJsonnetExtVars)[vs[1].(int)]
	}).(ApplicationSpecSourceDirectoryJsonnetExtVarsOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationSpecSourceDirectoryJsonnetTlas struct {
	Code  *bool  `pulumi:"code"`
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ApplicationSpecSourceDirectoryJsonnetTlasInput is an input type that accepts ApplicationSpecSourceDirectoryJsonnetTlasArgs and ApplicationSpecSourceDirectoryJsonnetTlasOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceDirectoryJsonnetTlasInput` via:
//
//          ApplicationSpecSourceDirectoryJsonnetTlasArgs{...}
type ApplicationSpecSourceDirectoryJsonnetTlasInput interface {
	pulumi.Input

	ToApplicationSpecSourceDirectoryJsonnetTlasOutput() ApplicationSpecSourceDirectoryJsonnetTlasOutput
	ToApplicationSpecSourceDirectoryJsonnetTlasOutputWithContext(context.Context) ApplicationSpecSourceDirectoryJsonnetTlasOutput
}

// JsonnetVar is a jsonnet variable
type ApplicationSpecSourceDirectoryJsonnetTlasArgs struct {
	Code  pulumi.BoolPtrInput `pulumi:"code"`
	Name  pulumi.StringInput  `pulumi:"name"`
	Value pulumi.StringInput  `pulumi:"value"`
}

func (ApplicationSpecSourceDirectoryJsonnetTlasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (i ApplicationSpecSourceDirectoryJsonnetTlasArgs) ToApplicationSpecSourceDirectoryJsonnetTlasOutput() ApplicationSpecSourceDirectoryJsonnetTlasOutput {
	return i.ToApplicationSpecSourceDirectoryJsonnetTlasOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceDirectoryJsonnetTlasArgs) ToApplicationSpecSourceDirectoryJsonnetTlasOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryJsonnetTlasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceDirectoryJsonnetTlasOutput)
}

// ApplicationSpecSourceDirectoryJsonnetTlasArrayInput is an input type that accepts ApplicationSpecSourceDirectoryJsonnetTlasArray and ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceDirectoryJsonnetTlasArrayInput` via:
//
//          ApplicationSpecSourceDirectoryJsonnetTlasArray{ ApplicationSpecSourceDirectoryJsonnetTlasArgs{...} }
type ApplicationSpecSourceDirectoryJsonnetTlasArrayInput interface {
	pulumi.Input

	ToApplicationSpecSourceDirectoryJsonnetTlasArrayOutput() ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput
	ToApplicationSpecSourceDirectoryJsonnetTlasArrayOutputWithContext(context.Context) ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput
}

type ApplicationSpecSourceDirectoryJsonnetTlasArray []ApplicationSpecSourceDirectoryJsonnetTlasInput

func (ApplicationSpecSourceDirectoryJsonnetTlasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (i ApplicationSpecSourceDirectoryJsonnetTlasArray) ToApplicationSpecSourceDirectoryJsonnetTlasArrayOutput() ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput {
	return i.ToApplicationSpecSourceDirectoryJsonnetTlasArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceDirectoryJsonnetTlasArray) ToApplicationSpecSourceDirectoryJsonnetTlasArrayOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationSpecSourceDirectoryJsonnetTlasOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceDirectoryJsonnetTlasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (o ApplicationSpecSourceDirectoryJsonnetTlasOutput) ToApplicationSpecSourceDirectoryJsonnetTlasOutput() ApplicationSpecSourceDirectoryJsonnetTlasOutput {
	return o
}

func (o ApplicationSpecSourceDirectoryJsonnetTlasOutput) ToApplicationSpecSourceDirectoryJsonnetTlasOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryJsonnetTlasOutput {
	return o
}

func (o ApplicationSpecSourceDirectoryJsonnetTlasOutput) Code() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceDirectoryJsonnetTlas) *bool { return v.Code }).(pulumi.BoolPtrOutput)
}

func (o ApplicationSpecSourceDirectoryJsonnetTlasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecSourceDirectoryJsonnetTlas) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationSpecSourceDirectoryJsonnetTlasOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecSourceDirectoryJsonnetTlas) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (o ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput) ToApplicationSpecSourceDirectoryJsonnetTlasArrayOutput() ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput {
	return o
}

func (o ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput) ToApplicationSpecSourceDirectoryJsonnetTlasArrayOutputWithContext(ctx context.Context) ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput {
	return o
}

func (o ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput) Index(i pulumi.IntInput) ApplicationSpecSourceDirectoryJsonnetTlasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecSourceDirectoryJsonnetTlas {
		return vs[0].([]ApplicationSpecSourceDirectoryJsonnetTlas)[vs[1].(int)]
	}).(ApplicationSpecSourceDirectoryJsonnetTlasOutput)
}

// Helm holds helm specific options
type ApplicationSpecSourceHelm struct {
	// FileParameters are file parameters to the helm template
	FileParameters []ApplicationSpecSourceHelmFileParameters `pulumi:"fileParameters"`
	// Parameters are parameters to the helm template
	Parameters []ApplicationSpecSourceHelmParameters `pulumi:"parameters"`
	// The Helm release name. If omitted it will use the application name
	ReleaseName *string `pulumi:"releaseName"`
	// ValuesFiles is a list of Helm value files to use when generating a template
	ValueFiles []string `pulumi:"valueFiles"`
	// Values is Helm values, typically defined as a block
	Values *string `pulumi:"values"`
}

// ApplicationSpecSourceHelmInput is an input type that accepts ApplicationSpecSourceHelmArgs and ApplicationSpecSourceHelmOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceHelmInput` via:
//
//          ApplicationSpecSourceHelmArgs{...}
type ApplicationSpecSourceHelmInput interface {
	pulumi.Input

	ToApplicationSpecSourceHelmOutput() ApplicationSpecSourceHelmOutput
	ToApplicationSpecSourceHelmOutputWithContext(context.Context) ApplicationSpecSourceHelmOutput
}

// Helm holds helm specific options
type ApplicationSpecSourceHelmArgs struct {
	// FileParameters are file parameters to the helm template
	FileParameters ApplicationSpecSourceHelmFileParametersArrayInput `pulumi:"fileParameters"`
	// Parameters are parameters to the helm template
	Parameters ApplicationSpecSourceHelmParametersArrayInput `pulumi:"parameters"`
	// The Helm release name. If omitted it will use the application name
	ReleaseName pulumi.StringPtrInput `pulumi:"releaseName"`
	// ValuesFiles is a list of Helm value files to use when generating a template
	ValueFiles pulumi.StringArrayInput `pulumi:"valueFiles"`
	// Values is Helm values, typically defined as a block
	Values pulumi.StringPtrInput `pulumi:"values"`
}

func (ApplicationSpecSourceHelmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceHelm)(nil)).Elem()
}

func (i ApplicationSpecSourceHelmArgs) ToApplicationSpecSourceHelmOutput() ApplicationSpecSourceHelmOutput {
	return i.ToApplicationSpecSourceHelmOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceHelmArgs) ToApplicationSpecSourceHelmOutputWithContext(ctx context.Context) ApplicationSpecSourceHelmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceHelmOutput)
}

func (i ApplicationSpecSourceHelmArgs) ToApplicationSpecSourceHelmPtrOutput() ApplicationSpecSourceHelmPtrOutput {
	return i.ToApplicationSpecSourceHelmPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceHelmArgs) ToApplicationSpecSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationSpecSourceHelmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceHelmOutput).ToApplicationSpecSourceHelmPtrOutputWithContext(ctx)
}

// ApplicationSpecSourceHelmPtrInput is an input type that accepts ApplicationSpecSourceHelmArgs, ApplicationSpecSourceHelmPtr and ApplicationSpecSourceHelmPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceHelmPtrInput` via:
//
//          ApplicationSpecSourceHelmArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecSourceHelmPtrInput interface {
	pulumi.Input

	ToApplicationSpecSourceHelmPtrOutput() ApplicationSpecSourceHelmPtrOutput
	ToApplicationSpecSourceHelmPtrOutputWithContext(context.Context) ApplicationSpecSourceHelmPtrOutput
}

type applicationSpecSourceHelmPtrType ApplicationSpecSourceHelmArgs

func ApplicationSpecSourceHelmPtr(v *ApplicationSpecSourceHelmArgs) ApplicationSpecSourceHelmPtrInput {
	return (*applicationSpecSourceHelmPtrType)(v)
}

func (*applicationSpecSourceHelmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSourceHelm)(nil)).Elem()
}

func (i *applicationSpecSourceHelmPtrType) ToApplicationSpecSourceHelmPtrOutput() ApplicationSpecSourceHelmPtrOutput {
	return i.ToApplicationSpecSourceHelmPtrOutputWithContext(context.Background())
}

func (i *applicationSpecSourceHelmPtrType) ToApplicationSpecSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationSpecSourceHelmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceHelmPtrOutput)
}

// Helm holds helm specific options
type ApplicationSpecSourceHelmOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceHelmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceHelm)(nil)).Elem()
}

func (o ApplicationSpecSourceHelmOutput) ToApplicationSpecSourceHelmOutput() ApplicationSpecSourceHelmOutput {
	return o
}

func (o ApplicationSpecSourceHelmOutput) ToApplicationSpecSourceHelmOutputWithContext(ctx context.Context) ApplicationSpecSourceHelmOutput {
	return o
}

func (o ApplicationSpecSourceHelmOutput) ToApplicationSpecSourceHelmPtrOutput() ApplicationSpecSourceHelmPtrOutput {
	return o.ToApplicationSpecSourceHelmPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecSourceHelmOutput) ToApplicationSpecSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationSpecSourceHelmPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceHelm) *ApplicationSpecSourceHelm {
		return &v
	}).(ApplicationSpecSourceHelmPtrOutput)
}

// FileParameters are file parameters to the helm template
func (o ApplicationSpecSourceHelmOutput) FileParameters() ApplicationSpecSourceHelmFileParametersArrayOutput {
	return o.ApplyT(func(v ApplicationSpecSourceHelm) []ApplicationSpecSourceHelmFileParameters { return v.FileParameters }).(ApplicationSpecSourceHelmFileParametersArrayOutput)
}

// Parameters are parameters to the helm template
func (o ApplicationSpecSourceHelmOutput) Parameters() ApplicationSpecSourceHelmParametersArrayOutput {
	return o.ApplyT(func(v ApplicationSpecSourceHelm) []ApplicationSpecSourceHelmParameters { return v.Parameters }).(ApplicationSpecSourceHelmParametersArrayOutput)
}

// The Helm release name. If omitted it will use the application name
func (o ApplicationSpecSourceHelmOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceHelm) *string { return v.ReleaseName }).(pulumi.StringPtrOutput)
}

// ValuesFiles is a list of Helm value files to use when generating a template
func (o ApplicationSpecSourceHelmOutput) ValueFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationSpecSourceHelm) []string { return v.ValueFiles }).(pulumi.StringArrayOutput)
}

// Values is Helm values, typically defined as a block
func (o ApplicationSpecSourceHelmOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceHelm) *string { return v.Values }).(pulumi.StringPtrOutput)
}

type ApplicationSpecSourceHelmPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceHelmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSourceHelm)(nil)).Elem()
}

func (o ApplicationSpecSourceHelmPtrOutput) ToApplicationSpecSourceHelmPtrOutput() ApplicationSpecSourceHelmPtrOutput {
	return o
}

func (o ApplicationSpecSourceHelmPtrOutput) ToApplicationSpecSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationSpecSourceHelmPtrOutput {
	return o
}

func (o ApplicationSpecSourceHelmPtrOutput) Elem() ApplicationSpecSourceHelmOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceHelm) ApplicationSpecSourceHelm { return *v }).(ApplicationSpecSourceHelmOutput)
}

// FileParameters are file parameters to the helm template
func (o ApplicationSpecSourceHelmPtrOutput) FileParameters() ApplicationSpecSourceHelmFileParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceHelm) []ApplicationSpecSourceHelmFileParameters {
		if v == nil {
			return nil
		}
		return v.FileParameters
	}).(ApplicationSpecSourceHelmFileParametersArrayOutput)
}

// Parameters are parameters to the helm template
func (o ApplicationSpecSourceHelmPtrOutput) Parameters() ApplicationSpecSourceHelmParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceHelm) []ApplicationSpecSourceHelmParameters {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ApplicationSpecSourceHelmParametersArrayOutput)
}

// The Helm release name. If omitted it will use the application name
func (o ApplicationSpecSourceHelmPtrOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceHelm) *string {
		if v == nil {
			return nil
		}
		return v.ReleaseName
	}).(pulumi.StringPtrOutput)
}

// ValuesFiles is a list of Helm value files to use when generating a template
func (o ApplicationSpecSourceHelmPtrOutput) ValueFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceHelm) []string {
		if v == nil {
			return nil
		}
		return v.ValueFiles
	}).(pulumi.StringArrayOutput)
}

// Values is Helm values, typically defined as a block
func (o ApplicationSpecSourceHelmPtrOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceHelm) *string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringPtrOutput)
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationSpecSourceHelmFileParameters struct {
	// Name is the name of the helm parameter
	Name *string `pulumi:"name"`
	// Path is the path value for the helm parameter
	Path *string `pulumi:"path"`
}

// ApplicationSpecSourceHelmFileParametersInput is an input type that accepts ApplicationSpecSourceHelmFileParametersArgs and ApplicationSpecSourceHelmFileParametersOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceHelmFileParametersInput` via:
//
//          ApplicationSpecSourceHelmFileParametersArgs{...}
type ApplicationSpecSourceHelmFileParametersInput interface {
	pulumi.Input

	ToApplicationSpecSourceHelmFileParametersOutput() ApplicationSpecSourceHelmFileParametersOutput
	ToApplicationSpecSourceHelmFileParametersOutputWithContext(context.Context) ApplicationSpecSourceHelmFileParametersOutput
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationSpecSourceHelmFileParametersArgs struct {
	// Name is the name of the helm parameter
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path is the path value for the helm parameter
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ApplicationSpecSourceHelmFileParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceHelmFileParameters)(nil)).Elem()
}

func (i ApplicationSpecSourceHelmFileParametersArgs) ToApplicationSpecSourceHelmFileParametersOutput() ApplicationSpecSourceHelmFileParametersOutput {
	return i.ToApplicationSpecSourceHelmFileParametersOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceHelmFileParametersArgs) ToApplicationSpecSourceHelmFileParametersOutputWithContext(ctx context.Context) ApplicationSpecSourceHelmFileParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceHelmFileParametersOutput)
}

// ApplicationSpecSourceHelmFileParametersArrayInput is an input type that accepts ApplicationSpecSourceHelmFileParametersArray and ApplicationSpecSourceHelmFileParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceHelmFileParametersArrayInput` via:
//
//          ApplicationSpecSourceHelmFileParametersArray{ ApplicationSpecSourceHelmFileParametersArgs{...} }
type ApplicationSpecSourceHelmFileParametersArrayInput interface {
	pulumi.Input

	ToApplicationSpecSourceHelmFileParametersArrayOutput() ApplicationSpecSourceHelmFileParametersArrayOutput
	ToApplicationSpecSourceHelmFileParametersArrayOutputWithContext(context.Context) ApplicationSpecSourceHelmFileParametersArrayOutput
}

type ApplicationSpecSourceHelmFileParametersArray []ApplicationSpecSourceHelmFileParametersInput

func (ApplicationSpecSourceHelmFileParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecSourceHelmFileParameters)(nil)).Elem()
}

func (i ApplicationSpecSourceHelmFileParametersArray) ToApplicationSpecSourceHelmFileParametersArrayOutput() ApplicationSpecSourceHelmFileParametersArrayOutput {
	return i.ToApplicationSpecSourceHelmFileParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceHelmFileParametersArray) ToApplicationSpecSourceHelmFileParametersArrayOutputWithContext(ctx context.Context) ApplicationSpecSourceHelmFileParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceHelmFileParametersArrayOutput)
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationSpecSourceHelmFileParametersOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceHelmFileParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceHelmFileParameters)(nil)).Elem()
}

func (o ApplicationSpecSourceHelmFileParametersOutput) ToApplicationSpecSourceHelmFileParametersOutput() ApplicationSpecSourceHelmFileParametersOutput {
	return o
}

func (o ApplicationSpecSourceHelmFileParametersOutput) ToApplicationSpecSourceHelmFileParametersOutputWithContext(ctx context.Context) ApplicationSpecSourceHelmFileParametersOutput {
	return o
}

// Name is the name of the helm parameter
func (o ApplicationSpecSourceHelmFileParametersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceHelmFileParameters) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path is the path value for the helm parameter
func (o ApplicationSpecSourceHelmFileParametersOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceHelmFileParameters) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ApplicationSpecSourceHelmFileParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceHelmFileParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecSourceHelmFileParameters)(nil)).Elem()
}

func (o ApplicationSpecSourceHelmFileParametersArrayOutput) ToApplicationSpecSourceHelmFileParametersArrayOutput() ApplicationSpecSourceHelmFileParametersArrayOutput {
	return o
}

func (o ApplicationSpecSourceHelmFileParametersArrayOutput) ToApplicationSpecSourceHelmFileParametersArrayOutputWithContext(ctx context.Context) ApplicationSpecSourceHelmFileParametersArrayOutput {
	return o
}

func (o ApplicationSpecSourceHelmFileParametersArrayOutput) Index(i pulumi.IntInput) ApplicationSpecSourceHelmFileParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecSourceHelmFileParameters {
		return vs[0].([]ApplicationSpecSourceHelmFileParameters)[vs[1].(int)]
	}).(ApplicationSpecSourceHelmFileParametersOutput)
}

// HelmParameter is a parameter to a helm template
type ApplicationSpecSourceHelmParameters struct {
	// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
	ForceString *bool `pulumi:"forceString"`
	// Name is the name of the helm parameter
	Name *string `pulumi:"name"`
	// Value is the value for the helm parameter
	Value *string `pulumi:"value"`
}

// ApplicationSpecSourceHelmParametersInput is an input type that accepts ApplicationSpecSourceHelmParametersArgs and ApplicationSpecSourceHelmParametersOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceHelmParametersInput` via:
//
//          ApplicationSpecSourceHelmParametersArgs{...}
type ApplicationSpecSourceHelmParametersInput interface {
	pulumi.Input

	ToApplicationSpecSourceHelmParametersOutput() ApplicationSpecSourceHelmParametersOutput
	ToApplicationSpecSourceHelmParametersOutputWithContext(context.Context) ApplicationSpecSourceHelmParametersOutput
}

// HelmParameter is a parameter to a helm template
type ApplicationSpecSourceHelmParametersArgs struct {
	// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
	ForceString pulumi.BoolPtrInput `pulumi:"forceString"`
	// Name is the name of the helm parameter
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value for the helm parameter
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApplicationSpecSourceHelmParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceHelmParameters)(nil)).Elem()
}

func (i ApplicationSpecSourceHelmParametersArgs) ToApplicationSpecSourceHelmParametersOutput() ApplicationSpecSourceHelmParametersOutput {
	return i.ToApplicationSpecSourceHelmParametersOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceHelmParametersArgs) ToApplicationSpecSourceHelmParametersOutputWithContext(ctx context.Context) ApplicationSpecSourceHelmParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceHelmParametersOutput)
}

// ApplicationSpecSourceHelmParametersArrayInput is an input type that accepts ApplicationSpecSourceHelmParametersArray and ApplicationSpecSourceHelmParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceHelmParametersArrayInput` via:
//
//          ApplicationSpecSourceHelmParametersArray{ ApplicationSpecSourceHelmParametersArgs{...} }
type ApplicationSpecSourceHelmParametersArrayInput interface {
	pulumi.Input

	ToApplicationSpecSourceHelmParametersArrayOutput() ApplicationSpecSourceHelmParametersArrayOutput
	ToApplicationSpecSourceHelmParametersArrayOutputWithContext(context.Context) ApplicationSpecSourceHelmParametersArrayOutput
}

type ApplicationSpecSourceHelmParametersArray []ApplicationSpecSourceHelmParametersInput

func (ApplicationSpecSourceHelmParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecSourceHelmParameters)(nil)).Elem()
}

func (i ApplicationSpecSourceHelmParametersArray) ToApplicationSpecSourceHelmParametersArrayOutput() ApplicationSpecSourceHelmParametersArrayOutput {
	return i.ToApplicationSpecSourceHelmParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceHelmParametersArray) ToApplicationSpecSourceHelmParametersArrayOutputWithContext(ctx context.Context) ApplicationSpecSourceHelmParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceHelmParametersArrayOutput)
}

// HelmParameter is a parameter to a helm template
type ApplicationSpecSourceHelmParametersOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceHelmParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceHelmParameters)(nil)).Elem()
}

func (o ApplicationSpecSourceHelmParametersOutput) ToApplicationSpecSourceHelmParametersOutput() ApplicationSpecSourceHelmParametersOutput {
	return o
}

func (o ApplicationSpecSourceHelmParametersOutput) ToApplicationSpecSourceHelmParametersOutputWithContext(ctx context.Context) ApplicationSpecSourceHelmParametersOutput {
	return o
}

// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
func (o ApplicationSpecSourceHelmParametersOutput) ForceString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceHelmParameters) *bool { return v.ForceString }).(pulumi.BoolPtrOutput)
}

// Name is the name of the helm parameter
func (o ApplicationSpecSourceHelmParametersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceHelmParameters) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value for the helm parameter
func (o ApplicationSpecSourceHelmParametersOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceHelmParameters) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationSpecSourceHelmParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceHelmParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecSourceHelmParameters)(nil)).Elem()
}

func (o ApplicationSpecSourceHelmParametersArrayOutput) ToApplicationSpecSourceHelmParametersArrayOutput() ApplicationSpecSourceHelmParametersArrayOutput {
	return o
}

func (o ApplicationSpecSourceHelmParametersArrayOutput) ToApplicationSpecSourceHelmParametersArrayOutputWithContext(ctx context.Context) ApplicationSpecSourceHelmParametersArrayOutput {
	return o
}

func (o ApplicationSpecSourceHelmParametersArrayOutput) Index(i pulumi.IntInput) ApplicationSpecSourceHelmParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecSourceHelmParameters {
		return vs[0].([]ApplicationSpecSourceHelmParameters)[vs[1].(int)]
	}).(ApplicationSpecSourceHelmParametersOutput)
}

// Ksonnet holds ksonnet specific options
type ApplicationSpecSourceKsonnet struct {
	// Environment is a ksonnet application environment name
	Environment *string `pulumi:"environment"`
	// Parameters are a list of ksonnet component parameter override values
	Parameters []ApplicationSpecSourceKsonnetParameters `pulumi:"parameters"`
}

// ApplicationSpecSourceKsonnetInput is an input type that accepts ApplicationSpecSourceKsonnetArgs and ApplicationSpecSourceKsonnetOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceKsonnetInput` via:
//
//          ApplicationSpecSourceKsonnetArgs{...}
type ApplicationSpecSourceKsonnetInput interface {
	pulumi.Input

	ToApplicationSpecSourceKsonnetOutput() ApplicationSpecSourceKsonnetOutput
	ToApplicationSpecSourceKsonnetOutputWithContext(context.Context) ApplicationSpecSourceKsonnetOutput
}

// Ksonnet holds ksonnet specific options
type ApplicationSpecSourceKsonnetArgs struct {
	// Environment is a ksonnet application environment name
	Environment pulumi.StringPtrInput `pulumi:"environment"`
	// Parameters are a list of ksonnet component parameter override values
	Parameters ApplicationSpecSourceKsonnetParametersArrayInput `pulumi:"parameters"`
}

func (ApplicationSpecSourceKsonnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceKsonnet)(nil)).Elem()
}

func (i ApplicationSpecSourceKsonnetArgs) ToApplicationSpecSourceKsonnetOutput() ApplicationSpecSourceKsonnetOutput {
	return i.ToApplicationSpecSourceKsonnetOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceKsonnetArgs) ToApplicationSpecSourceKsonnetOutputWithContext(ctx context.Context) ApplicationSpecSourceKsonnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceKsonnetOutput)
}

func (i ApplicationSpecSourceKsonnetArgs) ToApplicationSpecSourceKsonnetPtrOutput() ApplicationSpecSourceKsonnetPtrOutput {
	return i.ToApplicationSpecSourceKsonnetPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceKsonnetArgs) ToApplicationSpecSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationSpecSourceKsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceKsonnetOutput).ToApplicationSpecSourceKsonnetPtrOutputWithContext(ctx)
}

// ApplicationSpecSourceKsonnetPtrInput is an input type that accepts ApplicationSpecSourceKsonnetArgs, ApplicationSpecSourceKsonnetPtr and ApplicationSpecSourceKsonnetPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceKsonnetPtrInput` via:
//
//          ApplicationSpecSourceKsonnetArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecSourceKsonnetPtrInput interface {
	pulumi.Input

	ToApplicationSpecSourceKsonnetPtrOutput() ApplicationSpecSourceKsonnetPtrOutput
	ToApplicationSpecSourceKsonnetPtrOutputWithContext(context.Context) ApplicationSpecSourceKsonnetPtrOutput
}

type applicationSpecSourceKsonnetPtrType ApplicationSpecSourceKsonnetArgs

func ApplicationSpecSourceKsonnetPtr(v *ApplicationSpecSourceKsonnetArgs) ApplicationSpecSourceKsonnetPtrInput {
	return (*applicationSpecSourceKsonnetPtrType)(v)
}

func (*applicationSpecSourceKsonnetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSourceKsonnet)(nil)).Elem()
}

func (i *applicationSpecSourceKsonnetPtrType) ToApplicationSpecSourceKsonnetPtrOutput() ApplicationSpecSourceKsonnetPtrOutput {
	return i.ToApplicationSpecSourceKsonnetPtrOutputWithContext(context.Background())
}

func (i *applicationSpecSourceKsonnetPtrType) ToApplicationSpecSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationSpecSourceKsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceKsonnetPtrOutput)
}

// Ksonnet holds ksonnet specific options
type ApplicationSpecSourceKsonnetOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceKsonnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceKsonnet)(nil)).Elem()
}

func (o ApplicationSpecSourceKsonnetOutput) ToApplicationSpecSourceKsonnetOutput() ApplicationSpecSourceKsonnetOutput {
	return o
}

func (o ApplicationSpecSourceKsonnetOutput) ToApplicationSpecSourceKsonnetOutputWithContext(ctx context.Context) ApplicationSpecSourceKsonnetOutput {
	return o
}

func (o ApplicationSpecSourceKsonnetOutput) ToApplicationSpecSourceKsonnetPtrOutput() ApplicationSpecSourceKsonnetPtrOutput {
	return o.ToApplicationSpecSourceKsonnetPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecSourceKsonnetOutput) ToApplicationSpecSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationSpecSourceKsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceKsonnet) *ApplicationSpecSourceKsonnet {
		return &v
	}).(ApplicationSpecSourceKsonnetPtrOutput)
}

// Environment is a ksonnet application environment name
func (o ApplicationSpecSourceKsonnetOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceKsonnet) *string { return v.Environment }).(pulumi.StringPtrOutput)
}

// Parameters are a list of ksonnet component parameter override values
func (o ApplicationSpecSourceKsonnetOutput) Parameters() ApplicationSpecSourceKsonnetParametersArrayOutput {
	return o.ApplyT(func(v ApplicationSpecSourceKsonnet) []ApplicationSpecSourceKsonnetParameters { return v.Parameters }).(ApplicationSpecSourceKsonnetParametersArrayOutput)
}

type ApplicationSpecSourceKsonnetPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceKsonnetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSourceKsonnet)(nil)).Elem()
}

func (o ApplicationSpecSourceKsonnetPtrOutput) ToApplicationSpecSourceKsonnetPtrOutput() ApplicationSpecSourceKsonnetPtrOutput {
	return o
}

func (o ApplicationSpecSourceKsonnetPtrOutput) ToApplicationSpecSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationSpecSourceKsonnetPtrOutput {
	return o
}

func (o ApplicationSpecSourceKsonnetPtrOutput) Elem() ApplicationSpecSourceKsonnetOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceKsonnet) ApplicationSpecSourceKsonnet { return *v }).(ApplicationSpecSourceKsonnetOutput)
}

// Environment is a ksonnet application environment name
func (o ApplicationSpecSourceKsonnetPtrOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceKsonnet) *string {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.StringPtrOutput)
}

// Parameters are a list of ksonnet component parameter override values
func (o ApplicationSpecSourceKsonnetPtrOutput) Parameters() ApplicationSpecSourceKsonnetParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceKsonnet) []ApplicationSpecSourceKsonnetParameters {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ApplicationSpecSourceKsonnetParametersArrayOutput)
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationSpecSourceKsonnetParameters struct {
	Component *string `pulumi:"component"`
	Name      string  `pulumi:"name"`
	Value     string  `pulumi:"value"`
}

// ApplicationSpecSourceKsonnetParametersInput is an input type that accepts ApplicationSpecSourceKsonnetParametersArgs and ApplicationSpecSourceKsonnetParametersOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceKsonnetParametersInput` via:
//
//          ApplicationSpecSourceKsonnetParametersArgs{...}
type ApplicationSpecSourceKsonnetParametersInput interface {
	pulumi.Input

	ToApplicationSpecSourceKsonnetParametersOutput() ApplicationSpecSourceKsonnetParametersOutput
	ToApplicationSpecSourceKsonnetParametersOutputWithContext(context.Context) ApplicationSpecSourceKsonnetParametersOutput
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationSpecSourceKsonnetParametersArgs struct {
	Component pulumi.StringPtrInput `pulumi:"component"`
	Name      pulumi.StringInput    `pulumi:"name"`
	Value     pulumi.StringInput    `pulumi:"value"`
}

func (ApplicationSpecSourceKsonnetParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceKsonnetParameters)(nil)).Elem()
}

func (i ApplicationSpecSourceKsonnetParametersArgs) ToApplicationSpecSourceKsonnetParametersOutput() ApplicationSpecSourceKsonnetParametersOutput {
	return i.ToApplicationSpecSourceKsonnetParametersOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceKsonnetParametersArgs) ToApplicationSpecSourceKsonnetParametersOutputWithContext(ctx context.Context) ApplicationSpecSourceKsonnetParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceKsonnetParametersOutput)
}

// ApplicationSpecSourceKsonnetParametersArrayInput is an input type that accepts ApplicationSpecSourceKsonnetParametersArray and ApplicationSpecSourceKsonnetParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceKsonnetParametersArrayInput` via:
//
//          ApplicationSpecSourceKsonnetParametersArray{ ApplicationSpecSourceKsonnetParametersArgs{...} }
type ApplicationSpecSourceKsonnetParametersArrayInput interface {
	pulumi.Input

	ToApplicationSpecSourceKsonnetParametersArrayOutput() ApplicationSpecSourceKsonnetParametersArrayOutput
	ToApplicationSpecSourceKsonnetParametersArrayOutputWithContext(context.Context) ApplicationSpecSourceKsonnetParametersArrayOutput
}

type ApplicationSpecSourceKsonnetParametersArray []ApplicationSpecSourceKsonnetParametersInput

func (ApplicationSpecSourceKsonnetParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecSourceKsonnetParameters)(nil)).Elem()
}

func (i ApplicationSpecSourceKsonnetParametersArray) ToApplicationSpecSourceKsonnetParametersArrayOutput() ApplicationSpecSourceKsonnetParametersArrayOutput {
	return i.ToApplicationSpecSourceKsonnetParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceKsonnetParametersArray) ToApplicationSpecSourceKsonnetParametersArrayOutputWithContext(ctx context.Context) ApplicationSpecSourceKsonnetParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceKsonnetParametersArrayOutput)
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationSpecSourceKsonnetParametersOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceKsonnetParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceKsonnetParameters)(nil)).Elem()
}

func (o ApplicationSpecSourceKsonnetParametersOutput) ToApplicationSpecSourceKsonnetParametersOutput() ApplicationSpecSourceKsonnetParametersOutput {
	return o
}

func (o ApplicationSpecSourceKsonnetParametersOutput) ToApplicationSpecSourceKsonnetParametersOutputWithContext(ctx context.Context) ApplicationSpecSourceKsonnetParametersOutput {
	return o
}

func (o ApplicationSpecSourceKsonnetParametersOutput) Component() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceKsonnetParameters) *string { return v.Component }).(pulumi.StringPtrOutput)
}

func (o ApplicationSpecSourceKsonnetParametersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecSourceKsonnetParameters) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationSpecSourceKsonnetParametersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecSourceKsonnetParameters) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationSpecSourceKsonnetParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceKsonnetParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecSourceKsonnetParameters)(nil)).Elem()
}

func (o ApplicationSpecSourceKsonnetParametersArrayOutput) ToApplicationSpecSourceKsonnetParametersArrayOutput() ApplicationSpecSourceKsonnetParametersArrayOutput {
	return o
}

func (o ApplicationSpecSourceKsonnetParametersArrayOutput) ToApplicationSpecSourceKsonnetParametersArrayOutputWithContext(ctx context.Context) ApplicationSpecSourceKsonnetParametersArrayOutput {
	return o
}

func (o ApplicationSpecSourceKsonnetParametersArrayOutput) Index(i pulumi.IntInput) ApplicationSpecSourceKsonnetParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecSourceKsonnetParameters {
		return vs[0].([]ApplicationSpecSourceKsonnetParameters)[vs[1].(int)]
	}).(ApplicationSpecSourceKsonnetParametersOutput)
}

// Kustomize holds kustomize specific options
type ApplicationSpecSourceKustomize struct {
	// CommonLabels adds additional kustomize commonLabels
	CommonLabels map[string]string `pulumi:"commonLabels"`
	// Images are kustomize image overrides
	Images []string `pulumi:"images"`
	// NamePrefix is a prefix appended to resources for kustomize apps
	NamePrefix *string `pulumi:"namePrefix"`
	// NameSuffix is a suffix appended to resources for kustomize apps
	NameSuffix *string `pulumi:"nameSuffix"`
	// Version contains optional Kustomize version
	Version *string `pulumi:"version"`
}

// ApplicationSpecSourceKustomizeInput is an input type that accepts ApplicationSpecSourceKustomizeArgs and ApplicationSpecSourceKustomizeOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceKustomizeInput` via:
//
//          ApplicationSpecSourceKustomizeArgs{...}
type ApplicationSpecSourceKustomizeInput interface {
	pulumi.Input

	ToApplicationSpecSourceKustomizeOutput() ApplicationSpecSourceKustomizeOutput
	ToApplicationSpecSourceKustomizeOutputWithContext(context.Context) ApplicationSpecSourceKustomizeOutput
}

// Kustomize holds kustomize specific options
type ApplicationSpecSourceKustomizeArgs struct {
	// CommonLabels adds additional kustomize commonLabels
	CommonLabels pulumi.StringMapInput `pulumi:"commonLabels"`
	// Images are kustomize image overrides
	Images pulumi.StringArrayInput `pulumi:"images"`
	// NamePrefix is a prefix appended to resources for kustomize apps
	NamePrefix pulumi.StringPtrInput `pulumi:"namePrefix"`
	// NameSuffix is a suffix appended to resources for kustomize apps
	NameSuffix pulumi.StringPtrInput `pulumi:"nameSuffix"`
	// Version contains optional Kustomize version
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApplicationSpecSourceKustomizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceKustomize)(nil)).Elem()
}

func (i ApplicationSpecSourceKustomizeArgs) ToApplicationSpecSourceKustomizeOutput() ApplicationSpecSourceKustomizeOutput {
	return i.ToApplicationSpecSourceKustomizeOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceKustomizeArgs) ToApplicationSpecSourceKustomizeOutputWithContext(ctx context.Context) ApplicationSpecSourceKustomizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceKustomizeOutput)
}

func (i ApplicationSpecSourceKustomizeArgs) ToApplicationSpecSourceKustomizePtrOutput() ApplicationSpecSourceKustomizePtrOutput {
	return i.ToApplicationSpecSourceKustomizePtrOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceKustomizeArgs) ToApplicationSpecSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationSpecSourceKustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceKustomizeOutput).ToApplicationSpecSourceKustomizePtrOutputWithContext(ctx)
}

// ApplicationSpecSourceKustomizePtrInput is an input type that accepts ApplicationSpecSourceKustomizeArgs, ApplicationSpecSourceKustomizePtr and ApplicationSpecSourceKustomizePtrOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceKustomizePtrInput` via:
//
//          ApplicationSpecSourceKustomizeArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecSourceKustomizePtrInput interface {
	pulumi.Input

	ToApplicationSpecSourceKustomizePtrOutput() ApplicationSpecSourceKustomizePtrOutput
	ToApplicationSpecSourceKustomizePtrOutputWithContext(context.Context) ApplicationSpecSourceKustomizePtrOutput
}

type applicationSpecSourceKustomizePtrType ApplicationSpecSourceKustomizeArgs

func ApplicationSpecSourceKustomizePtr(v *ApplicationSpecSourceKustomizeArgs) ApplicationSpecSourceKustomizePtrInput {
	return (*applicationSpecSourceKustomizePtrType)(v)
}

func (*applicationSpecSourceKustomizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSourceKustomize)(nil)).Elem()
}

func (i *applicationSpecSourceKustomizePtrType) ToApplicationSpecSourceKustomizePtrOutput() ApplicationSpecSourceKustomizePtrOutput {
	return i.ToApplicationSpecSourceKustomizePtrOutputWithContext(context.Background())
}

func (i *applicationSpecSourceKustomizePtrType) ToApplicationSpecSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationSpecSourceKustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceKustomizePtrOutput)
}

// Kustomize holds kustomize specific options
type ApplicationSpecSourceKustomizeOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceKustomizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceKustomize)(nil)).Elem()
}

func (o ApplicationSpecSourceKustomizeOutput) ToApplicationSpecSourceKustomizeOutput() ApplicationSpecSourceKustomizeOutput {
	return o
}

func (o ApplicationSpecSourceKustomizeOutput) ToApplicationSpecSourceKustomizeOutputWithContext(ctx context.Context) ApplicationSpecSourceKustomizeOutput {
	return o
}

func (o ApplicationSpecSourceKustomizeOutput) ToApplicationSpecSourceKustomizePtrOutput() ApplicationSpecSourceKustomizePtrOutput {
	return o.ToApplicationSpecSourceKustomizePtrOutputWithContext(context.Background())
}

func (o ApplicationSpecSourceKustomizeOutput) ToApplicationSpecSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationSpecSourceKustomizePtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceKustomize) *ApplicationSpecSourceKustomize {
		return &v
	}).(ApplicationSpecSourceKustomizePtrOutput)
}

// CommonLabels adds additional kustomize commonLabels
func (o ApplicationSpecSourceKustomizeOutput) CommonLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ApplicationSpecSourceKustomize) map[string]string { return v.CommonLabels }).(pulumi.StringMapOutput)
}

// Images are kustomize image overrides
func (o ApplicationSpecSourceKustomizeOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationSpecSourceKustomize) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// NamePrefix is a prefix appended to resources for kustomize apps
func (o ApplicationSpecSourceKustomizeOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceKustomize) *string { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

// NameSuffix is a suffix appended to resources for kustomize apps
func (o ApplicationSpecSourceKustomizeOutput) NameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceKustomize) *string { return v.NameSuffix }).(pulumi.StringPtrOutput)
}

// Version contains optional Kustomize version
func (o ApplicationSpecSourceKustomizeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourceKustomize) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApplicationSpecSourceKustomizePtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceKustomizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSourceKustomize)(nil)).Elem()
}

func (o ApplicationSpecSourceKustomizePtrOutput) ToApplicationSpecSourceKustomizePtrOutput() ApplicationSpecSourceKustomizePtrOutput {
	return o
}

func (o ApplicationSpecSourceKustomizePtrOutput) ToApplicationSpecSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationSpecSourceKustomizePtrOutput {
	return o
}

func (o ApplicationSpecSourceKustomizePtrOutput) Elem() ApplicationSpecSourceKustomizeOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceKustomize) ApplicationSpecSourceKustomize { return *v }).(ApplicationSpecSourceKustomizeOutput)
}

// CommonLabels adds additional kustomize commonLabels
func (o ApplicationSpecSourceKustomizePtrOutput) CommonLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceKustomize) map[string]string {
		if v == nil {
			return nil
		}
		return v.CommonLabels
	}).(pulumi.StringMapOutput)
}

// Images are kustomize image overrides
func (o ApplicationSpecSourceKustomizePtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceKustomize) []string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringArrayOutput)
}

// NamePrefix is a prefix appended to resources for kustomize apps
func (o ApplicationSpecSourceKustomizePtrOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.NamePrefix
	}).(pulumi.StringPtrOutput)
}

// NameSuffix is a suffix appended to resources for kustomize apps
func (o ApplicationSpecSourceKustomizePtrOutput) NameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.NameSuffix
	}).(pulumi.StringPtrOutput)
}

// Version contains optional Kustomize version
func (o ApplicationSpecSourceKustomizePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationSpecSourceKustomizeCommonLabels struct {
}

// ApplicationSpecSourceKustomizeCommonLabelsInput is an input type that accepts ApplicationSpecSourceKustomizeCommonLabelsArgs and ApplicationSpecSourceKustomizeCommonLabelsOutput values.
// You can construct a concrete instance of `ApplicationSpecSourceKustomizeCommonLabelsInput` via:
//
//          ApplicationSpecSourceKustomizeCommonLabelsArgs{...}
type ApplicationSpecSourceKustomizeCommonLabelsInput interface {
	pulumi.Input

	ToApplicationSpecSourceKustomizeCommonLabelsOutput() ApplicationSpecSourceKustomizeCommonLabelsOutput
	ToApplicationSpecSourceKustomizeCommonLabelsOutputWithContext(context.Context) ApplicationSpecSourceKustomizeCommonLabelsOutput
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationSpecSourceKustomizeCommonLabelsArgs struct {
}

func (ApplicationSpecSourceKustomizeCommonLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceKustomizeCommonLabels)(nil)).Elem()
}

func (i ApplicationSpecSourceKustomizeCommonLabelsArgs) ToApplicationSpecSourceKustomizeCommonLabelsOutput() ApplicationSpecSourceKustomizeCommonLabelsOutput {
	return i.ToApplicationSpecSourceKustomizeCommonLabelsOutputWithContext(context.Background())
}

func (i ApplicationSpecSourceKustomizeCommonLabelsArgs) ToApplicationSpecSourceKustomizeCommonLabelsOutputWithContext(ctx context.Context) ApplicationSpecSourceKustomizeCommonLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourceKustomizeCommonLabelsOutput)
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationSpecSourceKustomizeCommonLabelsOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourceKustomizeCommonLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourceKustomizeCommonLabels)(nil)).Elem()
}

func (o ApplicationSpecSourceKustomizeCommonLabelsOutput) ToApplicationSpecSourceKustomizeCommonLabelsOutput() ApplicationSpecSourceKustomizeCommonLabelsOutput {
	return o
}

func (o ApplicationSpecSourceKustomizeCommonLabelsOutput) ToApplicationSpecSourceKustomizeCommonLabelsOutputWithContext(ctx context.Context) ApplicationSpecSourceKustomizeCommonLabelsOutput {
	return o
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationSpecSourcePlugin struct {
	Env  []ApplicationSpecSourcePluginEnv `pulumi:"env"`
	Name *string                          `pulumi:"name"`
}

// ApplicationSpecSourcePluginInput is an input type that accepts ApplicationSpecSourcePluginArgs and ApplicationSpecSourcePluginOutput values.
// You can construct a concrete instance of `ApplicationSpecSourcePluginInput` via:
//
//          ApplicationSpecSourcePluginArgs{...}
type ApplicationSpecSourcePluginInput interface {
	pulumi.Input

	ToApplicationSpecSourcePluginOutput() ApplicationSpecSourcePluginOutput
	ToApplicationSpecSourcePluginOutputWithContext(context.Context) ApplicationSpecSourcePluginOutput
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationSpecSourcePluginArgs struct {
	Env  ApplicationSpecSourcePluginEnvArrayInput `pulumi:"env"`
	Name pulumi.StringPtrInput                    `pulumi:"name"`
}

func (ApplicationSpecSourcePluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourcePlugin)(nil)).Elem()
}

func (i ApplicationSpecSourcePluginArgs) ToApplicationSpecSourcePluginOutput() ApplicationSpecSourcePluginOutput {
	return i.ToApplicationSpecSourcePluginOutputWithContext(context.Background())
}

func (i ApplicationSpecSourcePluginArgs) ToApplicationSpecSourcePluginOutputWithContext(ctx context.Context) ApplicationSpecSourcePluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourcePluginOutput)
}

func (i ApplicationSpecSourcePluginArgs) ToApplicationSpecSourcePluginPtrOutput() ApplicationSpecSourcePluginPtrOutput {
	return i.ToApplicationSpecSourcePluginPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecSourcePluginArgs) ToApplicationSpecSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationSpecSourcePluginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourcePluginOutput).ToApplicationSpecSourcePluginPtrOutputWithContext(ctx)
}

// ApplicationSpecSourcePluginPtrInput is an input type that accepts ApplicationSpecSourcePluginArgs, ApplicationSpecSourcePluginPtr and ApplicationSpecSourcePluginPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecSourcePluginPtrInput` via:
//
//          ApplicationSpecSourcePluginArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecSourcePluginPtrInput interface {
	pulumi.Input

	ToApplicationSpecSourcePluginPtrOutput() ApplicationSpecSourcePluginPtrOutput
	ToApplicationSpecSourcePluginPtrOutputWithContext(context.Context) ApplicationSpecSourcePluginPtrOutput
}

type applicationSpecSourcePluginPtrType ApplicationSpecSourcePluginArgs

func ApplicationSpecSourcePluginPtr(v *ApplicationSpecSourcePluginArgs) ApplicationSpecSourcePluginPtrInput {
	return (*applicationSpecSourcePluginPtrType)(v)
}

func (*applicationSpecSourcePluginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSourcePlugin)(nil)).Elem()
}

func (i *applicationSpecSourcePluginPtrType) ToApplicationSpecSourcePluginPtrOutput() ApplicationSpecSourcePluginPtrOutput {
	return i.ToApplicationSpecSourcePluginPtrOutputWithContext(context.Background())
}

func (i *applicationSpecSourcePluginPtrType) ToApplicationSpecSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationSpecSourcePluginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourcePluginPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationSpecSourcePluginOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourcePluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourcePlugin)(nil)).Elem()
}

func (o ApplicationSpecSourcePluginOutput) ToApplicationSpecSourcePluginOutput() ApplicationSpecSourcePluginOutput {
	return o
}

func (o ApplicationSpecSourcePluginOutput) ToApplicationSpecSourcePluginOutputWithContext(ctx context.Context) ApplicationSpecSourcePluginOutput {
	return o
}

func (o ApplicationSpecSourcePluginOutput) ToApplicationSpecSourcePluginPtrOutput() ApplicationSpecSourcePluginPtrOutput {
	return o.ToApplicationSpecSourcePluginPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecSourcePluginOutput) ToApplicationSpecSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationSpecSourcePluginPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourcePlugin) *ApplicationSpecSourcePlugin {
		return &v
	}).(ApplicationSpecSourcePluginPtrOutput)
}
func (o ApplicationSpecSourcePluginOutput) Env() ApplicationSpecSourcePluginEnvArrayOutput {
	return o.ApplyT(func(v ApplicationSpecSourcePlugin) []ApplicationSpecSourcePluginEnv { return v.Env }).(ApplicationSpecSourcePluginEnvArrayOutput)
}

func (o ApplicationSpecSourcePluginOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSourcePlugin) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ApplicationSpecSourcePluginPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourcePluginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSourcePlugin)(nil)).Elem()
}

func (o ApplicationSpecSourcePluginPtrOutput) ToApplicationSpecSourcePluginPtrOutput() ApplicationSpecSourcePluginPtrOutput {
	return o
}

func (o ApplicationSpecSourcePluginPtrOutput) ToApplicationSpecSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationSpecSourcePluginPtrOutput {
	return o
}

func (o ApplicationSpecSourcePluginPtrOutput) Elem() ApplicationSpecSourcePluginOutput {
	return o.ApplyT(func(v *ApplicationSpecSourcePlugin) ApplicationSpecSourcePlugin { return *v }).(ApplicationSpecSourcePluginOutput)
}

func (o ApplicationSpecSourcePluginPtrOutput) Env() ApplicationSpecSourcePluginEnvArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecSourcePlugin) []ApplicationSpecSourcePluginEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(ApplicationSpecSourcePluginEnvArrayOutput)
}

func (o ApplicationSpecSourcePluginPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSourcePlugin) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type ApplicationSpecSourcePluginEnv struct {
	// the name, usually uppercase
	Name string `pulumi:"name"`
	// the value
	Value string `pulumi:"value"`
}

// ApplicationSpecSourcePluginEnvInput is an input type that accepts ApplicationSpecSourcePluginEnvArgs and ApplicationSpecSourcePluginEnvOutput values.
// You can construct a concrete instance of `ApplicationSpecSourcePluginEnvInput` via:
//
//          ApplicationSpecSourcePluginEnvArgs{...}
type ApplicationSpecSourcePluginEnvInput interface {
	pulumi.Input

	ToApplicationSpecSourcePluginEnvOutput() ApplicationSpecSourcePluginEnvOutput
	ToApplicationSpecSourcePluginEnvOutputWithContext(context.Context) ApplicationSpecSourcePluginEnvOutput
}

type ApplicationSpecSourcePluginEnvArgs struct {
	// the name, usually uppercase
	Name pulumi.StringInput `pulumi:"name"`
	// the value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApplicationSpecSourcePluginEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourcePluginEnv)(nil)).Elem()
}

func (i ApplicationSpecSourcePluginEnvArgs) ToApplicationSpecSourcePluginEnvOutput() ApplicationSpecSourcePluginEnvOutput {
	return i.ToApplicationSpecSourcePluginEnvOutputWithContext(context.Background())
}

func (i ApplicationSpecSourcePluginEnvArgs) ToApplicationSpecSourcePluginEnvOutputWithContext(ctx context.Context) ApplicationSpecSourcePluginEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourcePluginEnvOutput)
}

// ApplicationSpecSourcePluginEnvArrayInput is an input type that accepts ApplicationSpecSourcePluginEnvArray and ApplicationSpecSourcePluginEnvArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecSourcePluginEnvArrayInput` via:
//
//          ApplicationSpecSourcePluginEnvArray{ ApplicationSpecSourcePluginEnvArgs{...} }
type ApplicationSpecSourcePluginEnvArrayInput interface {
	pulumi.Input

	ToApplicationSpecSourcePluginEnvArrayOutput() ApplicationSpecSourcePluginEnvArrayOutput
	ToApplicationSpecSourcePluginEnvArrayOutputWithContext(context.Context) ApplicationSpecSourcePluginEnvArrayOutput
}

type ApplicationSpecSourcePluginEnvArray []ApplicationSpecSourcePluginEnvInput

func (ApplicationSpecSourcePluginEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecSourcePluginEnv)(nil)).Elem()
}

func (i ApplicationSpecSourcePluginEnvArray) ToApplicationSpecSourcePluginEnvArrayOutput() ApplicationSpecSourcePluginEnvArrayOutput {
	return i.ToApplicationSpecSourcePluginEnvArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecSourcePluginEnvArray) ToApplicationSpecSourcePluginEnvArrayOutputWithContext(ctx context.Context) ApplicationSpecSourcePluginEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSourcePluginEnvArrayOutput)
}

type ApplicationSpecSourcePluginEnvOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourcePluginEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSourcePluginEnv)(nil)).Elem()
}

func (o ApplicationSpecSourcePluginEnvOutput) ToApplicationSpecSourcePluginEnvOutput() ApplicationSpecSourcePluginEnvOutput {
	return o
}

func (o ApplicationSpecSourcePluginEnvOutput) ToApplicationSpecSourcePluginEnvOutputWithContext(ctx context.Context) ApplicationSpecSourcePluginEnvOutput {
	return o
}

// the name, usually uppercase
func (o ApplicationSpecSourcePluginEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecSourcePluginEnv) string { return v.Name }).(pulumi.StringOutput)
}

// the value
func (o ApplicationSpecSourcePluginEnvOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecSourcePluginEnv) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationSpecSourcePluginEnvArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSourcePluginEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecSourcePluginEnv)(nil)).Elem()
}

func (o ApplicationSpecSourcePluginEnvArrayOutput) ToApplicationSpecSourcePluginEnvArrayOutput() ApplicationSpecSourcePluginEnvArrayOutput {
	return o
}

func (o ApplicationSpecSourcePluginEnvArrayOutput) ToApplicationSpecSourcePluginEnvArrayOutputWithContext(ctx context.Context) ApplicationSpecSourcePluginEnvArrayOutput {
	return o
}

func (o ApplicationSpecSourcePluginEnvArrayOutput) Index(i pulumi.IntInput) ApplicationSpecSourcePluginEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecSourcePluginEnv {
		return vs[0].([]ApplicationSpecSourcePluginEnv)[vs[1].(int)]
	}).(ApplicationSpecSourcePluginEnvOutput)
}

// SyncPolicy controls when a sync will be performed
type ApplicationSpecSyncPolicy struct {
	// Automated will keep an application synced to the target revision
	Automated *ApplicationSpecSyncPolicyAutomated `pulumi:"automated"`
	// Retry controls failed sync retry behavior
	Retry *ApplicationSpecSyncPolicyRetry `pulumi:"retry"`
	// Options allow you to specify whole app sync-options
	SyncOptions []string `pulumi:"syncOptions"`
}

// ApplicationSpecSyncPolicyInput is an input type that accepts ApplicationSpecSyncPolicyArgs and ApplicationSpecSyncPolicyOutput values.
// You can construct a concrete instance of `ApplicationSpecSyncPolicyInput` via:
//
//          ApplicationSpecSyncPolicyArgs{...}
type ApplicationSpecSyncPolicyInput interface {
	pulumi.Input

	ToApplicationSpecSyncPolicyOutput() ApplicationSpecSyncPolicyOutput
	ToApplicationSpecSyncPolicyOutputWithContext(context.Context) ApplicationSpecSyncPolicyOutput
}

// SyncPolicy controls when a sync will be performed
type ApplicationSpecSyncPolicyArgs struct {
	// Automated will keep an application synced to the target revision
	Automated ApplicationSpecSyncPolicyAutomatedPtrInput `pulumi:"automated"`
	// Retry controls failed sync retry behavior
	Retry ApplicationSpecSyncPolicyRetryPtrInput `pulumi:"retry"`
	// Options allow you to specify whole app sync-options
	SyncOptions pulumi.StringArrayInput `pulumi:"syncOptions"`
}

func (ApplicationSpecSyncPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSyncPolicy)(nil)).Elem()
}

func (i ApplicationSpecSyncPolicyArgs) ToApplicationSpecSyncPolicyOutput() ApplicationSpecSyncPolicyOutput {
	return i.ToApplicationSpecSyncPolicyOutputWithContext(context.Background())
}

func (i ApplicationSpecSyncPolicyArgs) ToApplicationSpecSyncPolicyOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSyncPolicyOutput)
}

func (i ApplicationSpecSyncPolicyArgs) ToApplicationSpecSyncPolicyPtrOutput() ApplicationSpecSyncPolicyPtrOutput {
	return i.ToApplicationSpecSyncPolicyPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecSyncPolicyArgs) ToApplicationSpecSyncPolicyPtrOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSyncPolicyOutput).ToApplicationSpecSyncPolicyPtrOutputWithContext(ctx)
}

// ApplicationSpecSyncPolicyPtrInput is an input type that accepts ApplicationSpecSyncPolicyArgs, ApplicationSpecSyncPolicyPtr and ApplicationSpecSyncPolicyPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecSyncPolicyPtrInput` via:
//
//          ApplicationSpecSyncPolicyArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecSyncPolicyPtrInput interface {
	pulumi.Input

	ToApplicationSpecSyncPolicyPtrOutput() ApplicationSpecSyncPolicyPtrOutput
	ToApplicationSpecSyncPolicyPtrOutputWithContext(context.Context) ApplicationSpecSyncPolicyPtrOutput
}

type applicationSpecSyncPolicyPtrType ApplicationSpecSyncPolicyArgs

func ApplicationSpecSyncPolicyPtr(v *ApplicationSpecSyncPolicyArgs) ApplicationSpecSyncPolicyPtrInput {
	return (*applicationSpecSyncPolicyPtrType)(v)
}

func (*applicationSpecSyncPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSyncPolicy)(nil)).Elem()
}

func (i *applicationSpecSyncPolicyPtrType) ToApplicationSpecSyncPolicyPtrOutput() ApplicationSpecSyncPolicyPtrOutput {
	return i.ToApplicationSpecSyncPolicyPtrOutputWithContext(context.Background())
}

func (i *applicationSpecSyncPolicyPtrType) ToApplicationSpecSyncPolicyPtrOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSyncPolicyPtrOutput)
}

// SyncPolicy controls when a sync will be performed
type ApplicationSpecSyncPolicyOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSyncPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSyncPolicy)(nil)).Elem()
}

func (o ApplicationSpecSyncPolicyOutput) ToApplicationSpecSyncPolicyOutput() ApplicationSpecSyncPolicyOutput {
	return o
}

func (o ApplicationSpecSyncPolicyOutput) ToApplicationSpecSyncPolicyOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyOutput {
	return o
}

func (o ApplicationSpecSyncPolicyOutput) ToApplicationSpecSyncPolicyPtrOutput() ApplicationSpecSyncPolicyPtrOutput {
	return o.ToApplicationSpecSyncPolicyPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecSyncPolicyOutput) ToApplicationSpecSyncPolicyPtrOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSyncPolicy) *ApplicationSpecSyncPolicy {
		return &v
	}).(ApplicationSpecSyncPolicyPtrOutput)
}

// Automated will keep an application synced to the target revision
func (o ApplicationSpecSyncPolicyOutput) Automated() ApplicationSpecSyncPolicyAutomatedPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSyncPolicy) *ApplicationSpecSyncPolicyAutomated { return v.Automated }).(ApplicationSpecSyncPolicyAutomatedPtrOutput)
}

// Retry controls failed sync retry behavior
func (o ApplicationSpecSyncPolicyOutput) Retry() ApplicationSpecSyncPolicyRetryPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSyncPolicy) *ApplicationSpecSyncPolicyRetry { return v.Retry }).(ApplicationSpecSyncPolicyRetryPtrOutput)
}

// Options allow you to specify whole app sync-options
func (o ApplicationSpecSyncPolicyOutput) SyncOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationSpecSyncPolicy) []string { return v.SyncOptions }).(pulumi.StringArrayOutput)
}

type ApplicationSpecSyncPolicyPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSyncPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSyncPolicy)(nil)).Elem()
}

func (o ApplicationSpecSyncPolicyPtrOutput) ToApplicationSpecSyncPolicyPtrOutput() ApplicationSpecSyncPolicyPtrOutput {
	return o
}

func (o ApplicationSpecSyncPolicyPtrOutput) ToApplicationSpecSyncPolicyPtrOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyPtrOutput {
	return o
}

func (o ApplicationSpecSyncPolicyPtrOutput) Elem() ApplicationSpecSyncPolicyOutput {
	return o.ApplyT(func(v *ApplicationSpecSyncPolicy) ApplicationSpecSyncPolicy { return *v }).(ApplicationSpecSyncPolicyOutput)
}

// Automated will keep an application synced to the target revision
func (o ApplicationSpecSyncPolicyPtrOutput) Automated() ApplicationSpecSyncPolicyAutomatedPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSyncPolicy) *ApplicationSpecSyncPolicyAutomated {
		if v == nil {
			return nil
		}
		return v.Automated
	}).(ApplicationSpecSyncPolicyAutomatedPtrOutput)
}

// Retry controls failed sync retry behavior
func (o ApplicationSpecSyncPolicyPtrOutput) Retry() ApplicationSpecSyncPolicyRetryPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSyncPolicy) *ApplicationSpecSyncPolicyRetry {
		if v == nil {
			return nil
		}
		return v.Retry
	}).(ApplicationSpecSyncPolicyRetryPtrOutput)
}

// Options allow you to specify whole app sync-options
func (o ApplicationSpecSyncPolicyPtrOutput) SyncOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecSyncPolicy) []string {
		if v == nil {
			return nil
		}
		return v.SyncOptions
	}).(pulumi.StringArrayOutput)
}

// Automated will keep an application synced to the target revision
type ApplicationSpecSyncPolicyAutomated struct {
	// Prune will prune resources automatically as part of automated sync (default: false)
	Prune *bool `pulumi:"prune"`
	// SelfHeal enables auto-syncing if  (default: false)
	SelfHeal *bool `pulumi:"selfHeal"`
}

// ApplicationSpecSyncPolicyAutomatedInput is an input type that accepts ApplicationSpecSyncPolicyAutomatedArgs and ApplicationSpecSyncPolicyAutomatedOutput values.
// You can construct a concrete instance of `ApplicationSpecSyncPolicyAutomatedInput` via:
//
//          ApplicationSpecSyncPolicyAutomatedArgs{...}
type ApplicationSpecSyncPolicyAutomatedInput interface {
	pulumi.Input

	ToApplicationSpecSyncPolicyAutomatedOutput() ApplicationSpecSyncPolicyAutomatedOutput
	ToApplicationSpecSyncPolicyAutomatedOutputWithContext(context.Context) ApplicationSpecSyncPolicyAutomatedOutput
}

// Automated will keep an application synced to the target revision
type ApplicationSpecSyncPolicyAutomatedArgs struct {
	// Prune will prune resources automatically as part of automated sync (default: false)
	Prune pulumi.BoolPtrInput `pulumi:"prune"`
	// SelfHeal enables auto-syncing if  (default: false)
	SelfHeal pulumi.BoolPtrInput `pulumi:"selfHeal"`
}

func (ApplicationSpecSyncPolicyAutomatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSyncPolicyAutomated)(nil)).Elem()
}

func (i ApplicationSpecSyncPolicyAutomatedArgs) ToApplicationSpecSyncPolicyAutomatedOutput() ApplicationSpecSyncPolicyAutomatedOutput {
	return i.ToApplicationSpecSyncPolicyAutomatedOutputWithContext(context.Background())
}

func (i ApplicationSpecSyncPolicyAutomatedArgs) ToApplicationSpecSyncPolicyAutomatedOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyAutomatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSyncPolicyAutomatedOutput)
}

func (i ApplicationSpecSyncPolicyAutomatedArgs) ToApplicationSpecSyncPolicyAutomatedPtrOutput() ApplicationSpecSyncPolicyAutomatedPtrOutput {
	return i.ToApplicationSpecSyncPolicyAutomatedPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecSyncPolicyAutomatedArgs) ToApplicationSpecSyncPolicyAutomatedPtrOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyAutomatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSyncPolicyAutomatedOutput).ToApplicationSpecSyncPolicyAutomatedPtrOutputWithContext(ctx)
}

// ApplicationSpecSyncPolicyAutomatedPtrInput is an input type that accepts ApplicationSpecSyncPolicyAutomatedArgs, ApplicationSpecSyncPolicyAutomatedPtr and ApplicationSpecSyncPolicyAutomatedPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecSyncPolicyAutomatedPtrInput` via:
//
//          ApplicationSpecSyncPolicyAutomatedArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecSyncPolicyAutomatedPtrInput interface {
	pulumi.Input

	ToApplicationSpecSyncPolicyAutomatedPtrOutput() ApplicationSpecSyncPolicyAutomatedPtrOutput
	ToApplicationSpecSyncPolicyAutomatedPtrOutputWithContext(context.Context) ApplicationSpecSyncPolicyAutomatedPtrOutput
}

type applicationSpecSyncPolicyAutomatedPtrType ApplicationSpecSyncPolicyAutomatedArgs

func ApplicationSpecSyncPolicyAutomatedPtr(v *ApplicationSpecSyncPolicyAutomatedArgs) ApplicationSpecSyncPolicyAutomatedPtrInput {
	return (*applicationSpecSyncPolicyAutomatedPtrType)(v)
}

func (*applicationSpecSyncPolicyAutomatedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSyncPolicyAutomated)(nil)).Elem()
}

func (i *applicationSpecSyncPolicyAutomatedPtrType) ToApplicationSpecSyncPolicyAutomatedPtrOutput() ApplicationSpecSyncPolicyAutomatedPtrOutput {
	return i.ToApplicationSpecSyncPolicyAutomatedPtrOutputWithContext(context.Background())
}

func (i *applicationSpecSyncPolicyAutomatedPtrType) ToApplicationSpecSyncPolicyAutomatedPtrOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyAutomatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSyncPolicyAutomatedPtrOutput)
}

// Automated will keep an application synced to the target revision
type ApplicationSpecSyncPolicyAutomatedOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSyncPolicyAutomatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSyncPolicyAutomated)(nil)).Elem()
}

func (o ApplicationSpecSyncPolicyAutomatedOutput) ToApplicationSpecSyncPolicyAutomatedOutput() ApplicationSpecSyncPolicyAutomatedOutput {
	return o
}

func (o ApplicationSpecSyncPolicyAutomatedOutput) ToApplicationSpecSyncPolicyAutomatedOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyAutomatedOutput {
	return o
}

func (o ApplicationSpecSyncPolicyAutomatedOutput) ToApplicationSpecSyncPolicyAutomatedPtrOutput() ApplicationSpecSyncPolicyAutomatedPtrOutput {
	return o.ToApplicationSpecSyncPolicyAutomatedPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecSyncPolicyAutomatedOutput) ToApplicationSpecSyncPolicyAutomatedPtrOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyAutomatedPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSyncPolicyAutomated) *ApplicationSpecSyncPolicyAutomated {
		return &v
	}).(ApplicationSpecSyncPolicyAutomatedPtrOutput)
}

// Prune will prune resources automatically as part of automated sync (default: false)
func (o ApplicationSpecSyncPolicyAutomatedOutput) Prune() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSyncPolicyAutomated) *bool { return v.Prune }).(pulumi.BoolPtrOutput)
}

// SelfHeal enables auto-syncing if  (default: false)
func (o ApplicationSpecSyncPolicyAutomatedOutput) SelfHeal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSyncPolicyAutomated) *bool { return v.SelfHeal }).(pulumi.BoolPtrOutput)
}

type ApplicationSpecSyncPolicyAutomatedPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSyncPolicyAutomatedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSyncPolicyAutomated)(nil)).Elem()
}

func (o ApplicationSpecSyncPolicyAutomatedPtrOutput) ToApplicationSpecSyncPolicyAutomatedPtrOutput() ApplicationSpecSyncPolicyAutomatedPtrOutput {
	return o
}

func (o ApplicationSpecSyncPolicyAutomatedPtrOutput) ToApplicationSpecSyncPolicyAutomatedPtrOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyAutomatedPtrOutput {
	return o
}

func (o ApplicationSpecSyncPolicyAutomatedPtrOutput) Elem() ApplicationSpecSyncPolicyAutomatedOutput {
	return o.ApplyT(func(v *ApplicationSpecSyncPolicyAutomated) ApplicationSpecSyncPolicyAutomated { return *v }).(ApplicationSpecSyncPolicyAutomatedOutput)
}

// Prune will prune resources automatically as part of automated sync (default: false)
func (o ApplicationSpecSyncPolicyAutomatedPtrOutput) Prune() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSyncPolicyAutomated) *bool {
		if v == nil {
			return nil
		}
		return v.Prune
	}).(pulumi.BoolPtrOutput)
}

// SelfHeal enables auto-syncing if  (default: false)
func (o ApplicationSpecSyncPolicyAutomatedPtrOutput) SelfHeal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSyncPolicyAutomated) *bool {
		if v == nil {
			return nil
		}
		return v.SelfHeal
	}).(pulumi.BoolPtrOutput)
}

// Retry controls failed sync retry behavior
type ApplicationSpecSyncPolicyRetry struct {
	// Backoff is a backoff strategy
	Backoff *ApplicationSpecSyncPolicyRetryBackoff `pulumi:"backoff"`
	// Limit is the maximum number of attempts when retrying a container
	Limit *int `pulumi:"limit"`
}

// ApplicationSpecSyncPolicyRetryInput is an input type that accepts ApplicationSpecSyncPolicyRetryArgs and ApplicationSpecSyncPolicyRetryOutput values.
// You can construct a concrete instance of `ApplicationSpecSyncPolicyRetryInput` via:
//
//          ApplicationSpecSyncPolicyRetryArgs{...}
type ApplicationSpecSyncPolicyRetryInput interface {
	pulumi.Input

	ToApplicationSpecSyncPolicyRetryOutput() ApplicationSpecSyncPolicyRetryOutput
	ToApplicationSpecSyncPolicyRetryOutputWithContext(context.Context) ApplicationSpecSyncPolicyRetryOutput
}

// Retry controls failed sync retry behavior
type ApplicationSpecSyncPolicyRetryArgs struct {
	// Backoff is a backoff strategy
	Backoff ApplicationSpecSyncPolicyRetryBackoffPtrInput `pulumi:"backoff"`
	// Limit is the maximum number of attempts when retrying a container
	Limit pulumi.IntPtrInput `pulumi:"limit"`
}

func (ApplicationSpecSyncPolicyRetryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSyncPolicyRetry)(nil)).Elem()
}

func (i ApplicationSpecSyncPolicyRetryArgs) ToApplicationSpecSyncPolicyRetryOutput() ApplicationSpecSyncPolicyRetryOutput {
	return i.ToApplicationSpecSyncPolicyRetryOutputWithContext(context.Background())
}

func (i ApplicationSpecSyncPolicyRetryArgs) ToApplicationSpecSyncPolicyRetryOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyRetryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSyncPolicyRetryOutput)
}

func (i ApplicationSpecSyncPolicyRetryArgs) ToApplicationSpecSyncPolicyRetryPtrOutput() ApplicationSpecSyncPolicyRetryPtrOutput {
	return i.ToApplicationSpecSyncPolicyRetryPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecSyncPolicyRetryArgs) ToApplicationSpecSyncPolicyRetryPtrOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyRetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSyncPolicyRetryOutput).ToApplicationSpecSyncPolicyRetryPtrOutputWithContext(ctx)
}

// ApplicationSpecSyncPolicyRetryPtrInput is an input type that accepts ApplicationSpecSyncPolicyRetryArgs, ApplicationSpecSyncPolicyRetryPtr and ApplicationSpecSyncPolicyRetryPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecSyncPolicyRetryPtrInput` via:
//
//          ApplicationSpecSyncPolicyRetryArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecSyncPolicyRetryPtrInput interface {
	pulumi.Input

	ToApplicationSpecSyncPolicyRetryPtrOutput() ApplicationSpecSyncPolicyRetryPtrOutput
	ToApplicationSpecSyncPolicyRetryPtrOutputWithContext(context.Context) ApplicationSpecSyncPolicyRetryPtrOutput
}

type applicationSpecSyncPolicyRetryPtrType ApplicationSpecSyncPolicyRetryArgs

func ApplicationSpecSyncPolicyRetryPtr(v *ApplicationSpecSyncPolicyRetryArgs) ApplicationSpecSyncPolicyRetryPtrInput {
	return (*applicationSpecSyncPolicyRetryPtrType)(v)
}

func (*applicationSpecSyncPolicyRetryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSyncPolicyRetry)(nil)).Elem()
}

func (i *applicationSpecSyncPolicyRetryPtrType) ToApplicationSpecSyncPolicyRetryPtrOutput() ApplicationSpecSyncPolicyRetryPtrOutput {
	return i.ToApplicationSpecSyncPolicyRetryPtrOutputWithContext(context.Background())
}

func (i *applicationSpecSyncPolicyRetryPtrType) ToApplicationSpecSyncPolicyRetryPtrOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyRetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSyncPolicyRetryPtrOutput)
}

// Retry controls failed sync retry behavior
type ApplicationSpecSyncPolicyRetryOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSyncPolicyRetryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSyncPolicyRetry)(nil)).Elem()
}

func (o ApplicationSpecSyncPolicyRetryOutput) ToApplicationSpecSyncPolicyRetryOutput() ApplicationSpecSyncPolicyRetryOutput {
	return o
}

func (o ApplicationSpecSyncPolicyRetryOutput) ToApplicationSpecSyncPolicyRetryOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyRetryOutput {
	return o
}

func (o ApplicationSpecSyncPolicyRetryOutput) ToApplicationSpecSyncPolicyRetryPtrOutput() ApplicationSpecSyncPolicyRetryPtrOutput {
	return o.ToApplicationSpecSyncPolicyRetryPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecSyncPolicyRetryOutput) ToApplicationSpecSyncPolicyRetryPtrOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyRetryPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSyncPolicyRetry) *ApplicationSpecSyncPolicyRetry {
		return &v
	}).(ApplicationSpecSyncPolicyRetryPtrOutput)
}

// Backoff is a backoff strategy
func (o ApplicationSpecSyncPolicyRetryOutput) Backoff() ApplicationSpecSyncPolicyRetryBackoffPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSyncPolicyRetry) *ApplicationSpecSyncPolicyRetryBackoff { return v.Backoff }).(ApplicationSpecSyncPolicyRetryBackoffPtrOutput)
}

// Limit is the maximum number of attempts when retrying a container
func (o ApplicationSpecSyncPolicyRetryOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSyncPolicyRetry) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

type ApplicationSpecSyncPolicyRetryPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSyncPolicyRetryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSyncPolicyRetry)(nil)).Elem()
}

func (o ApplicationSpecSyncPolicyRetryPtrOutput) ToApplicationSpecSyncPolicyRetryPtrOutput() ApplicationSpecSyncPolicyRetryPtrOutput {
	return o
}

func (o ApplicationSpecSyncPolicyRetryPtrOutput) ToApplicationSpecSyncPolicyRetryPtrOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyRetryPtrOutput {
	return o
}

func (o ApplicationSpecSyncPolicyRetryPtrOutput) Elem() ApplicationSpecSyncPolicyRetryOutput {
	return o.ApplyT(func(v *ApplicationSpecSyncPolicyRetry) ApplicationSpecSyncPolicyRetry { return *v }).(ApplicationSpecSyncPolicyRetryOutput)
}

// Backoff is a backoff strategy
func (o ApplicationSpecSyncPolicyRetryPtrOutput) Backoff() ApplicationSpecSyncPolicyRetryBackoffPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSyncPolicyRetry) *ApplicationSpecSyncPolicyRetryBackoff {
		if v == nil {
			return nil
		}
		return v.Backoff
	}).(ApplicationSpecSyncPolicyRetryBackoffPtrOutput)
}

// Limit is the maximum number of attempts when retrying a container
func (o ApplicationSpecSyncPolicyRetryPtrOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSyncPolicyRetry) *int {
		if v == nil {
			return nil
		}
		return v.Limit
	}).(pulumi.IntPtrOutput)
}

// Backoff is a backoff strategy
type ApplicationSpecSyncPolicyRetryBackoff struct {
	// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
	Duration *string `pulumi:"duration"`
	// Factor is a factor to multiply the base duration after each failed retry
	Factor *int `pulumi:"factor"`
	// MaxDuration is the maximum amount of time allowed for the backoff strategy
	MaxDuration *string `pulumi:"maxDuration"`
}

// ApplicationSpecSyncPolicyRetryBackoffInput is an input type that accepts ApplicationSpecSyncPolicyRetryBackoffArgs and ApplicationSpecSyncPolicyRetryBackoffOutput values.
// You can construct a concrete instance of `ApplicationSpecSyncPolicyRetryBackoffInput` via:
//
//          ApplicationSpecSyncPolicyRetryBackoffArgs{...}
type ApplicationSpecSyncPolicyRetryBackoffInput interface {
	pulumi.Input

	ToApplicationSpecSyncPolicyRetryBackoffOutput() ApplicationSpecSyncPolicyRetryBackoffOutput
	ToApplicationSpecSyncPolicyRetryBackoffOutputWithContext(context.Context) ApplicationSpecSyncPolicyRetryBackoffOutput
}

// Backoff is a backoff strategy
type ApplicationSpecSyncPolicyRetryBackoffArgs struct {
	// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// Factor is a factor to multiply the base duration after each failed retry
	Factor pulumi.IntPtrInput `pulumi:"factor"`
	// MaxDuration is the maximum amount of time allowed for the backoff strategy
	MaxDuration pulumi.StringPtrInput `pulumi:"maxDuration"`
}

func (ApplicationSpecSyncPolicyRetryBackoffArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSyncPolicyRetryBackoff)(nil)).Elem()
}

func (i ApplicationSpecSyncPolicyRetryBackoffArgs) ToApplicationSpecSyncPolicyRetryBackoffOutput() ApplicationSpecSyncPolicyRetryBackoffOutput {
	return i.ToApplicationSpecSyncPolicyRetryBackoffOutputWithContext(context.Background())
}

func (i ApplicationSpecSyncPolicyRetryBackoffArgs) ToApplicationSpecSyncPolicyRetryBackoffOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyRetryBackoffOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSyncPolicyRetryBackoffOutput)
}

func (i ApplicationSpecSyncPolicyRetryBackoffArgs) ToApplicationSpecSyncPolicyRetryBackoffPtrOutput() ApplicationSpecSyncPolicyRetryBackoffPtrOutput {
	return i.ToApplicationSpecSyncPolicyRetryBackoffPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecSyncPolicyRetryBackoffArgs) ToApplicationSpecSyncPolicyRetryBackoffPtrOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyRetryBackoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSyncPolicyRetryBackoffOutput).ToApplicationSpecSyncPolicyRetryBackoffPtrOutputWithContext(ctx)
}

// ApplicationSpecSyncPolicyRetryBackoffPtrInput is an input type that accepts ApplicationSpecSyncPolicyRetryBackoffArgs, ApplicationSpecSyncPolicyRetryBackoffPtr and ApplicationSpecSyncPolicyRetryBackoffPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecSyncPolicyRetryBackoffPtrInput` via:
//
//          ApplicationSpecSyncPolicyRetryBackoffArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecSyncPolicyRetryBackoffPtrInput interface {
	pulumi.Input

	ToApplicationSpecSyncPolicyRetryBackoffPtrOutput() ApplicationSpecSyncPolicyRetryBackoffPtrOutput
	ToApplicationSpecSyncPolicyRetryBackoffPtrOutputWithContext(context.Context) ApplicationSpecSyncPolicyRetryBackoffPtrOutput
}

type applicationSpecSyncPolicyRetryBackoffPtrType ApplicationSpecSyncPolicyRetryBackoffArgs

func ApplicationSpecSyncPolicyRetryBackoffPtr(v *ApplicationSpecSyncPolicyRetryBackoffArgs) ApplicationSpecSyncPolicyRetryBackoffPtrInput {
	return (*applicationSpecSyncPolicyRetryBackoffPtrType)(v)
}

func (*applicationSpecSyncPolicyRetryBackoffPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSyncPolicyRetryBackoff)(nil)).Elem()
}

func (i *applicationSpecSyncPolicyRetryBackoffPtrType) ToApplicationSpecSyncPolicyRetryBackoffPtrOutput() ApplicationSpecSyncPolicyRetryBackoffPtrOutput {
	return i.ToApplicationSpecSyncPolicyRetryBackoffPtrOutputWithContext(context.Background())
}

func (i *applicationSpecSyncPolicyRetryBackoffPtrType) ToApplicationSpecSyncPolicyRetryBackoffPtrOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyRetryBackoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSyncPolicyRetryBackoffPtrOutput)
}

// Backoff is a backoff strategy
type ApplicationSpecSyncPolicyRetryBackoffOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSyncPolicyRetryBackoffOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSyncPolicyRetryBackoff)(nil)).Elem()
}

func (o ApplicationSpecSyncPolicyRetryBackoffOutput) ToApplicationSpecSyncPolicyRetryBackoffOutput() ApplicationSpecSyncPolicyRetryBackoffOutput {
	return o
}

func (o ApplicationSpecSyncPolicyRetryBackoffOutput) ToApplicationSpecSyncPolicyRetryBackoffOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyRetryBackoffOutput {
	return o
}

func (o ApplicationSpecSyncPolicyRetryBackoffOutput) ToApplicationSpecSyncPolicyRetryBackoffPtrOutput() ApplicationSpecSyncPolicyRetryBackoffPtrOutput {
	return o.ToApplicationSpecSyncPolicyRetryBackoffPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecSyncPolicyRetryBackoffOutput) ToApplicationSpecSyncPolicyRetryBackoffPtrOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyRetryBackoffPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSyncPolicyRetryBackoff) *ApplicationSpecSyncPolicyRetryBackoff {
		return &v
	}).(ApplicationSpecSyncPolicyRetryBackoffPtrOutput)
}

// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
func (o ApplicationSpecSyncPolicyRetryBackoffOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSyncPolicyRetryBackoff) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// Factor is a factor to multiply the base duration after each failed retry
func (o ApplicationSpecSyncPolicyRetryBackoffOutput) Factor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSyncPolicyRetryBackoff) *int { return v.Factor }).(pulumi.IntPtrOutput)
}

// MaxDuration is the maximum amount of time allowed for the backoff strategy
func (o ApplicationSpecSyncPolicyRetryBackoffOutput) MaxDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSyncPolicyRetryBackoff) *string { return v.MaxDuration }).(pulumi.StringPtrOutput)
}

type ApplicationSpecSyncPolicyRetryBackoffPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSyncPolicyRetryBackoffPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSyncPolicyRetryBackoff)(nil)).Elem()
}

func (o ApplicationSpecSyncPolicyRetryBackoffPtrOutput) ToApplicationSpecSyncPolicyRetryBackoffPtrOutput() ApplicationSpecSyncPolicyRetryBackoffPtrOutput {
	return o
}

func (o ApplicationSpecSyncPolicyRetryBackoffPtrOutput) ToApplicationSpecSyncPolicyRetryBackoffPtrOutputWithContext(ctx context.Context) ApplicationSpecSyncPolicyRetryBackoffPtrOutput {
	return o
}

func (o ApplicationSpecSyncPolicyRetryBackoffPtrOutput) Elem() ApplicationSpecSyncPolicyRetryBackoffOutput {
	return o.ApplyT(func(v *ApplicationSpecSyncPolicyRetryBackoff) ApplicationSpecSyncPolicyRetryBackoff { return *v }).(ApplicationSpecSyncPolicyRetryBackoffOutput)
}

// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
func (o ApplicationSpecSyncPolicyRetryBackoffPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSyncPolicyRetryBackoff) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// Factor is a factor to multiply the base duration after each failed retry
func (o ApplicationSpecSyncPolicyRetryBackoffPtrOutput) Factor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSyncPolicyRetryBackoff) *int {
		if v == nil {
			return nil
		}
		return v.Factor
	}).(pulumi.IntPtrOutput)
}

// MaxDuration is the maximum amount of time allowed for the backoff strategy
func (o ApplicationSpecSyncPolicyRetryBackoffPtrOutput) MaxDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecSyncPolicyRetryBackoff) *string {
		if v == nil {
			return nil
		}
		return v.MaxDuration
	}).(pulumi.StringPtrOutput)
}

// ApplicationStatus contains information about application sync, health status
type ApplicationStatus struct {
	Conditions []ApplicationStatusConditions `pulumi:"conditions"`
	Health     *ApplicationStatusHealth      `pulumi:"health"`
	// RevisionHistories is a array of history, oldest first and newest last
	History []ApplicationStatusHistory `pulumi:"history"`
	// ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field
	ObservedAt *string `pulumi:"observedAt"`
	// OperationState contains information about state of currently performing operation on application.
	OperationState *ApplicationStatusOperationState `pulumi:"operationState"`
	// ReconciledAt indicates when the application state was reconciled using the latest git version
	ReconciledAt *string                      `pulumi:"reconciledAt"`
	Resources    []ApplicationStatusResources `pulumi:"resources"`
	SourceType   *string                      `pulumi:"sourceType"`
	Summary      *ApplicationStatusSummary    `pulumi:"summary"`
	// SyncStatus is a comparison result of application spec and deployed application.
	Sync *ApplicationStatusSync `pulumi:"sync"`
}

// ApplicationStatusInput is an input type that accepts ApplicationStatusArgs and ApplicationStatusOutput values.
// You can construct a concrete instance of `ApplicationStatusInput` via:
//
//          ApplicationStatusArgs{...}
type ApplicationStatusInput interface {
	pulumi.Input

	ToApplicationStatusOutput() ApplicationStatusOutput
	ToApplicationStatusOutputWithContext(context.Context) ApplicationStatusOutput
}

// ApplicationStatus contains information about application sync, health status
type ApplicationStatusArgs struct {
	Conditions ApplicationStatusConditionsArrayInput `pulumi:"conditions"`
	Health     ApplicationStatusHealthPtrInput       `pulumi:"health"`
	// RevisionHistories is a array of history, oldest first and newest last
	History ApplicationStatusHistoryArrayInput `pulumi:"history"`
	// ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field
	ObservedAt pulumi.StringPtrInput `pulumi:"observedAt"`
	// OperationState contains information about state of currently performing operation on application.
	OperationState ApplicationStatusOperationStatePtrInput `pulumi:"operationState"`
	// ReconciledAt indicates when the application state was reconciled using the latest git version
	ReconciledAt pulumi.StringPtrInput                `pulumi:"reconciledAt"`
	Resources    ApplicationStatusResourcesArrayInput `pulumi:"resources"`
	SourceType   pulumi.StringPtrInput                `pulumi:"sourceType"`
	Summary      ApplicationStatusSummaryPtrInput     `pulumi:"summary"`
	// SyncStatus is a comparison result of application spec and deployed application.
	Sync ApplicationStatusSyncPtrInput `pulumi:"sync"`
}

func (ApplicationStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatus)(nil)).Elem()
}

func (i ApplicationStatusArgs) ToApplicationStatusOutput() ApplicationStatusOutput {
	return i.ToApplicationStatusOutputWithContext(context.Background())
}

func (i ApplicationStatusArgs) ToApplicationStatusOutputWithContext(ctx context.Context) ApplicationStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOutput)
}

func (i ApplicationStatusArgs) ToApplicationStatusPtrOutput() ApplicationStatusPtrOutput {
	return i.ToApplicationStatusPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusArgs) ToApplicationStatusPtrOutputWithContext(ctx context.Context) ApplicationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOutput).ToApplicationStatusPtrOutputWithContext(ctx)
}

// ApplicationStatusPtrInput is an input type that accepts ApplicationStatusArgs, ApplicationStatusPtr and ApplicationStatusPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusPtrInput` via:
//
//          ApplicationStatusArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusPtrInput interface {
	pulumi.Input

	ToApplicationStatusPtrOutput() ApplicationStatusPtrOutput
	ToApplicationStatusPtrOutputWithContext(context.Context) ApplicationStatusPtrOutput
}

type applicationStatusPtrType ApplicationStatusArgs

func ApplicationStatusPtr(v *ApplicationStatusArgs) ApplicationStatusPtrInput {
	return (*applicationStatusPtrType)(v)
}

func (*applicationStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatus)(nil)).Elem()
}

func (i *applicationStatusPtrType) ToApplicationStatusPtrOutput() ApplicationStatusPtrOutput {
	return i.ToApplicationStatusPtrOutputWithContext(context.Background())
}

func (i *applicationStatusPtrType) ToApplicationStatusPtrOutputWithContext(ctx context.Context) ApplicationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusPtrOutput)
}

// ApplicationStatus contains information about application sync, health status
type ApplicationStatusOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatus)(nil)).Elem()
}

func (o ApplicationStatusOutput) ToApplicationStatusOutput() ApplicationStatusOutput {
	return o
}

func (o ApplicationStatusOutput) ToApplicationStatusOutputWithContext(ctx context.Context) ApplicationStatusOutput {
	return o
}

func (o ApplicationStatusOutput) ToApplicationStatusPtrOutput() ApplicationStatusPtrOutput {
	return o.ToApplicationStatusPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOutput) ToApplicationStatusPtrOutputWithContext(ctx context.Context) ApplicationStatusPtrOutput {
	return o.ApplyT(func(v ApplicationStatus) *ApplicationStatus {
		return &v
	}).(ApplicationStatusPtrOutput)
}
func (o ApplicationStatusOutput) Conditions() ApplicationStatusConditionsArrayOutput {
	return o.ApplyT(func(v ApplicationStatus) []ApplicationStatusConditions { return v.Conditions }).(ApplicationStatusConditionsArrayOutput)
}

func (o ApplicationStatusOutput) Health() ApplicationStatusHealthPtrOutput {
	return o.ApplyT(func(v ApplicationStatus) *ApplicationStatusHealth { return v.Health }).(ApplicationStatusHealthPtrOutput)
}

// RevisionHistories is a array of history, oldest first and newest last
func (o ApplicationStatusOutput) History() ApplicationStatusHistoryArrayOutput {
	return o.ApplyT(func(v ApplicationStatus) []ApplicationStatusHistory { return v.History }).(ApplicationStatusHistoryArrayOutput)
}

// ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field
func (o ApplicationStatusOutput) ObservedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatus) *string { return v.ObservedAt }).(pulumi.StringPtrOutput)
}

// OperationState contains information about state of currently performing operation on application.
func (o ApplicationStatusOutput) OperationState() ApplicationStatusOperationStatePtrOutput {
	return o.ApplyT(func(v ApplicationStatus) *ApplicationStatusOperationState { return v.OperationState }).(ApplicationStatusOperationStatePtrOutput)
}

// ReconciledAt indicates when the application state was reconciled using the latest git version
func (o ApplicationStatusOutput) ReconciledAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatus) *string { return v.ReconciledAt }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusOutput) Resources() ApplicationStatusResourcesArrayOutput {
	return o.ApplyT(func(v ApplicationStatus) []ApplicationStatusResources { return v.Resources }).(ApplicationStatusResourcesArrayOutput)
}

func (o ApplicationStatusOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatus) *string { return v.SourceType }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusOutput) Summary() ApplicationStatusSummaryPtrOutput {
	return o.ApplyT(func(v ApplicationStatus) *ApplicationStatusSummary { return v.Summary }).(ApplicationStatusSummaryPtrOutput)
}

// SyncStatus is a comparison result of application spec and deployed application.
func (o ApplicationStatusOutput) Sync() ApplicationStatusSyncPtrOutput {
	return o.ApplyT(func(v ApplicationStatus) *ApplicationStatusSync { return v.Sync }).(ApplicationStatusSyncPtrOutput)
}

type ApplicationStatusPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatus)(nil)).Elem()
}

func (o ApplicationStatusPtrOutput) ToApplicationStatusPtrOutput() ApplicationStatusPtrOutput {
	return o
}

func (o ApplicationStatusPtrOutput) ToApplicationStatusPtrOutputWithContext(ctx context.Context) ApplicationStatusPtrOutput {
	return o
}

func (o ApplicationStatusPtrOutput) Elem() ApplicationStatusOutput {
	return o.ApplyT(func(v *ApplicationStatus) ApplicationStatus { return *v }).(ApplicationStatusOutput)
}

func (o ApplicationStatusPtrOutput) Conditions() ApplicationStatusConditionsArrayOutput {
	return o.ApplyT(func(v *ApplicationStatus) []ApplicationStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ApplicationStatusConditionsArrayOutput)
}

func (o ApplicationStatusPtrOutput) Health() ApplicationStatusHealthPtrOutput {
	return o.ApplyT(func(v *ApplicationStatus) *ApplicationStatusHealth {
		if v == nil {
			return nil
		}
		return v.Health
	}).(ApplicationStatusHealthPtrOutput)
}

// RevisionHistories is a array of history, oldest first and newest last
func (o ApplicationStatusPtrOutput) History() ApplicationStatusHistoryArrayOutput {
	return o.ApplyT(func(v *ApplicationStatus) []ApplicationStatusHistory {
		if v == nil {
			return nil
		}
		return v.History
	}).(ApplicationStatusHistoryArrayOutput)
}

// ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field
func (o ApplicationStatusPtrOutput) ObservedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatus) *string {
		if v == nil {
			return nil
		}
		return v.ObservedAt
	}).(pulumi.StringPtrOutput)
}

// OperationState contains information about state of currently performing operation on application.
func (o ApplicationStatusPtrOutput) OperationState() ApplicationStatusOperationStatePtrOutput {
	return o.ApplyT(func(v *ApplicationStatus) *ApplicationStatusOperationState {
		if v == nil {
			return nil
		}
		return v.OperationState
	}).(ApplicationStatusOperationStatePtrOutput)
}

// ReconciledAt indicates when the application state was reconciled using the latest git version
func (o ApplicationStatusPtrOutput) ReconciledAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatus) *string {
		if v == nil {
			return nil
		}
		return v.ReconciledAt
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusPtrOutput) Resources() ApplicationStatusResourcesArrayOutput {
	return o.ApplyT(func(v *ApplicationStatus) []ApplicationStatusResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ApplicationStatusResourcesArrayOutput)
}

func (o ApplicationStatusPtrOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatus) *string {
		if v == nil {
			return nil
		}
		return v.SourceType
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusPtrOutput) Summary() ApplicationStatusSummaryPtrOutput {
	return o.ApplyT(func(v *ApplicationStatus) *ApplicationStatusSummary {
		if v == nil {
			return nil
		}
		return v.Summary
	}).(ApplicationStatusSummaryPtrOutput)
}

// SyncStatus is a comparison result of application spec and deployed application.
func (o ApplicationStatusPtrOutput) Sync() ApplicationStatusSyncPtrOutput {
	return o.ApplyT(func(v *ApplicationStatus) *ApplicationStatusSync {
		if v == nil {
			return nil
		}
		return v.Sync
	}).(ApplicationStatusSyncPtrOutput)
}

// ApplicationCondition contains details about current application condition
type ApplicationStatusConditions struct {
	// LastTransitionTime is the time the condition was first observed.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Message contains human-readable message indicating details about condition
	Message string `pulumi:"message"`
	// Type is an application condition type
	Type string `pulumi:"type"`
}

// ApplicationStatusConditionsInput is an input type that accepts ApplicationStatusConditionsArgs and ApplicationStatusConditionsOutput values.
// You can construct a concrete instance of `ApplicationStatusConditionsInput` via:
//
//          ApplicationStatusConditionsArgs{...}
type ApplicationStatusConditionsInput interface {
	pulumi.Input

	ToApplicationStatusConditionsOutput() ApplicationStatusConditionsOutput
	ToApplicationStatusConditionsOutputWithContext(context.Context) ApplicationStatusConditionsOutput
}

// ApplicationCondition contains details about current application condition
type ApplicationStatusConditionsArgs struct {
	// LastTransitionTime is the time the condition was first observed.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Message contains human-readable message indicating details about condition
	Message pulumi.StringInput `pulumi:"message"`
	// Type is an application condition type
	Type pulumi.StringInput `pulumi:"type"`
}

func (ApplicationStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusConditions)(nil)).Elem()
}

func (i ApplicationStatusConditionsArgs) ToApplicationStatusConditionsOutput() ApplicationStatusConditionsOutput {
	return i.ToApplicationStatusConditionsOutputWithContext(context.Background())
}

func (i ApplicationStatusConditionsArgs) ToApplicationStatusConditionsOutputWithContext(ctx context.Context) ApplicationStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusConditionsOutput)
}

// ApplicationStatusConditionsArrayInput is an input type that accepts ApplicationStatusConditionsArray and ApplicationStatusConditionsArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusConditionsArrayInput` via:
//
//          ApplicationStatusConditionsArray{ ApplicationStatusConditionsArgs{...} }
type ApplicationStatusConditionsArrayInput interface {
	pulumi.Input

	ToApplicationStatusConditionsArrayOutput() ApplicationStatusConditionsArrayOutput
	ToApplicationStatusConditionsArrayOutputWithContext(context.Context) ApplicationStatusConditionsArrayOutput
}

type ApplicationStatusConditionsArray []ApplicationStatusConditionsInput

func (ApplicationStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusConditions)(nil)).Elem()
}

func (i ApplicationStatusConditionsArray) ToApplicationStatusConditionsArrayOutput() ApplicationStatusConditionsArrayOutput {
	return i.ToApplicationStatusConditionsArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusConditionsArray) ToApplicationStatusConditionsArrayOutputWithContext(ctx context.Context) ApplicationStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusConditionsArrayOutput)
}

// ApplicationCondition contains details about current application condition
type ApplicationStatusConditionsOutput struct{ *pulumi.OutputState }

func (ApplicationStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusConditions)(nil)).Elem()
}

func (o ApplicationStatusConditionsOutput) ToApplicationStatusConditionsOutput() ApplicationStatusConditionsOutput {
	return o
}

func (o ApplicationStatusConditionsOutput) ToApplicationStatusConditionsOutputWithContext(ctx context.Context) ApplicationStatusConditionsOutput {
	return o
}

// LastTransitionTime is the time the condition was first observed.
func (o ApplicationStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Message contains human-readable message indicating details about condition
func (o ApplicationStatusConditionsOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusConditions) string { return v.Message }).(pulumi.StringOutput)
}

// Type is an application condition type
func (o ApplicationStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type ApplicationStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusConditions)(nil)).Elem()
}

func (o ApplicationStatusConditionsArrayOutput) ToApplicationStatusConditionsArrayOutput() ApplicationStatusConditionsArrayOutput {
	return o
}

func (o ApplicationStatusConditionsArrayOutput) ToApplicationStatusConditionsArrayOutputWithContext(ctx context.Context) ApplicationStatusConditionsArrayOutput {
	return o
}

func (o ApplicationStatusConditionsArrayOutput) Index(i pulumi.IntInput) ApplicationStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusConditions {
		return vs[0].([]ApplicationStatusConditions)[vs[1].(int)]
	}).(ApplicationStatusConditionsOutput)
}

type ApplicationStatusHealth struct {
	Message *string `pulumi:"message"`
	// Represents resource health status
	Status *string `pulumi:"status"`
}

// ApplicationStatusHealthInput is an input type that accepts ApplicationStatusHealthArgs and ApplicationStatusHealthOutput values.
// You can construct a concrete instance of `ApplicationStatusHealthInput` via:
//
//          ApplicationStatusHealthArgs{...}
type ApplicationStatusHealthInput interface {
	pulumi.Input

	ToApplicationStatusHealthOutput() ApplicationStatusHealthOutput
	ToApplicationStatusHealthOutputWithContext(context.Context) ApplicationStatusHealthOutput
}

type ApplicationStatusHealthArgs struct {
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Represents resource health status
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ApplicationStatusHealthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHealth)(nil)).Elem()
}

func (i ApplicationStatusHealthArgs) ToApplicationStatusHealthOutput() ApplicationStatusHealthOutput {
	return i.ToApplicationStatusHealthOutputWithContext(context.Background())
}

func (i ApplicationStatusHealthArgs) ToApplicationStatusHealthOutputWithContext(ctx context.Context) ApplicationStatusHealthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHealthOutput)
}

func (i ApplicationStatusHealthArgs) ToApplicationStatusHealthPtrOutput() ApplicationStatusHealthPtrOutput {
	return i.ToApplicationStatusHealthPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusHealthArgs) ToApplicationStatusHealthPtrOutputWithContext(ctx context.Context) ApplicationStatusHealthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHealthOutput).ToApplicationStatusHealthPtrOutputWithContext(ctx)
}

// ApplicationStatusHealthPtrInput is an input type that accepts ApplicationStatusHealthArgs, ApplicationStatusHealthPtr and ApplicationStatusHealthPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusHealthPtrInput` via:
//
//          ApplicationStatusHealthArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusHealthPtrInput interface {
	pulumi.Input

	ToApplicationStatusHealthPtrOutput() ApplicationStatusHealthPtrOutput
	ToApplicationStatusHealthPtrOutputWithContext(context.Context) ApplicationStatusHealthPtrOutput
}

type applicationStatusHealthPtrType ApplicationStatusHealthArgs

func ApplicationStatusHealthPtr(v *ApplicationStatusHealthArgs) ApplicationStatusHealthPtrInput {
	return (*applicationStatusHealthPtrType)(v)
}

func (*applicationStatusHealthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusHealth)(nil)).Elem()
}

func (i *applicationStatusHealthPtrType) ToApplicationStatusHealthPtrOutput() ApplicationStatusHealthPtrOutput {
	return i.ToApplicationStatusHealthPtrOutputWithContext(context.Background())
}

func (i *applicationStatusHealthPtrType) ToApplicationStatusHealthPtrOutputWithContext(ctx context.Context) ApplicationStatusHealthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHealthPtrOutput)
}

type ApplicationStatusHealthOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHealthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHealth)(nil)).Elem()
}

func (o ApplicationStatusHealthOutput) ToApplicationStatusHealthOutput() ApplicationStatusHealthOutput {
	return o
}

func (o ApplicationStatusHealthOutput) ToApplicationStatusHealthOutputWithContext(ctx context.Context) ApplicationStatusHealthOutput {
	return o
}

func (o ApplicationStatusHealthOutput) ToApplicationStatusHealthPtrOutput() ApplicationStatusHealthPtrOutput {
	return o.ToApplicationStatusHealthPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusHealthOutput) ToApplicationStatusHealthPtrOutputWithContext(ctx context.Context) ApplicationStatusHealthPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHealth) *ApplicationStatusHealth {
		return &v
	}).(ApplicationStatusHealthPtrOutput)
}
func (o ApplicationStatusHealthOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHealth) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Represents resource health status
func (o ApplicationStatusHealthOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHealth) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ApplicationStatusHealthPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHealthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusHealth)(nil)).Elem()
}

func (o ApplicationStatusHealthPtrOutput) ToApplicationStatusHealthPtrOutput() ApplicationStatusHealthPtrOutput {
	return o
}

func (o ApplicationStatusHealthPtrOutput) ToApplicationStatusHealthPtrOutputWithContext(ctx context.Context) ApplicationStatusHealthPtrOutput {
	return o
}

func (o ApplicationStatusHealthPtrOutput) Elem() ApplicationStatusHealthOutput {
	return o.ApplyT(func(v *ApplicationStatusHealth) ApplicationStatusHealth { return *v }).(ApplicationStatusHealthOutput)
}

func (o ApplicationStatusHealthPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHealth) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Represents resource health status
func (o ApplicationStatusHealthPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHealth) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// RevisionHistory contains information relevant to an application deployment
type ApplicationStatusHistory struct {
	// DeployStartedAt holds the time the deployment started
	DeployStartedAt *string `pulumi:"deployStartedAt"`
	// DeployedAt holds the time the deployment completed
	DeployedAt string `pulumi:"deployedAt"`
	// ID is an auto incrementing identifier of the RevisionHistory
	Id int `pulumi:"id"`
	// Revision holds the revision of the sync
	Revision string `pulumi:"revision"`
	// ApplicationSource contains information about github repository, path within repository and target application environment.
	Source *ApplicationStatusHistorySource `pulumi:"source"`
}

// ApplicationStatusHistoryInput is an input type that accepts ApplicationStatusHistoryArgs and ApplicationStatusHistoryOutput values.
// You can construct a concrete instance of `ApplicationStatusHistoryInput` via:
//
//          ApplicationStatusHistoryArgs{...}
type ApplicationStatusHistoryInput interface {
	pulumi.Input

	ToApplicationStatusHistoryOutput() ApplicationStatusHistoryOutput
	ToApplicationStatusHistoryOutputWithContext(context.Context) ApplicationStatusHistoryOutput
}

// RevisionHistory contains information relevant to an application deployment
type ApplicationStatusHistoryArgs struct {
	// DeployStartedAt holds the time the deployment started
	DeployStartedAt pulumi.StringPtrInput `pulumi:"deployStartedAt"`
	// DeployedAt holds the time the deployment completed
	DeployedAt pulumi.StringInput `pulumi:"deployedAt"`
	// ID is an auto incrementing identifier of the RevisionHistory
	Id pulumi.IntInput `pulumi:"id"`
	// Revision holds the revision of the sync
	Revision pulumi.StringInput `pulumi:"revision"`
	// ApplicationSource contains information about github repository, path within repository and target application environment.
	Source ApplicationStatusHistorySourcePtrInput `pulumi:"source"`
}

func (ApplicationStatusHistoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistory)(nil)).Elem()
}

func (i ApplicationStatusHistoryArgs) ToApplicationStatusHistoryOutput() ApplicationStatusHistoryOutput {
	return i.ToApplicationStatusHistoryOutputWithContext(context.Background())
}

func (i ApplicationStatusHistoryArgs) ToApplicationStatusHistoryOutputWithContext(ctx context.Context) ApplicationStatusHistoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistoryOutput)
}

// ApplicationStatusHistoryArrayInput is an input type that accepts ApplicationStatusHistoryArray and ApplicationStatusHistoryArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusHistoryArrayInput` via:
//
//          ApplicationStatusHistoryArray{ ApplicationStatusHistoryArgs{...} }
type ApplicationStatusHistoryArrayInput interface {
	pulumi.Input

	ToApplicationStatusHistoryArrayOutput() ApplicationStatusHistoryArrayOutput
	ToApplicationStatusHistoryArrayOutputWithContext(context.Context) ApplicationStatusHistoryArrayOutput
}

type ApplicationStatusHistoryArray []ApplicationStatusHistoryInput

func (ApplicationStatusHistoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusHistory)(nil)).Elem()
}

func (i ApplicationStatusHistoryArray) ToApplicationStatusHistoryArrayOutput() ApplicationStatusHistoryArrayOutput {
	return i.ToApplicationStatusHistoryArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusHistoryArray) ToApplicationStatusHistoryArrayOutputWithContext(ctx context.Context) ApplicationStatusHistoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistoryArrayOutput)
}

// RevisionHistory contains information relevant to an application deployment
type ApplicationStatusHistoryOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistory)(nil)).Elem()
}

func (o ApplicationStatusHistoryOutput) ToApplicationStatusHistoryOutput() ApplicationStatusHistoryOutput {
	return o
}

func (o ApplicationStatusHistoryOutput) ToApplicationStatusHistoryOutputWithContext(ctx context.Context) ApplicationStatusHistoryOutput {
	return o
}

// DeployStartedAt holds the time the deployment started
func (o ApplicationStatusHistoryOutput) DeployStartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistory) *string { return v.DeployStartedAt }).(pulumi.StringPtrOutput)
}

// DeployedAt holds the time the deployment completed
func (o ApplicationStatusHistoryOutput) DeployedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusHistory) string { return v.DeployedAt }).(pulumi.StringOutput)
}

// ID is an auto incrementing identifier of the RevisionHistory
func (o ApplicationStatusHistoryOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v ApplicationStatusHistory) int { return v.Id }).(pulumi.IntOutput)
}

// Revision holds the revision of the sync
func (o ApplicationStatusHistoryOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusHistory) string { return v.Revision }).(pulumi.StringOutput)
}

// ApplicationSource contains information about github repository, path within repository and target application environment.
func (o ApplicationStatusHistoryOutput) Source() ApplicationStatusHistorySourcePtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistory) *ApplicationStatusHistorySource { return v.Source }).(ApplicationStatusHistorySourcePtrOutput)
}

type ApplicationStatusHistoryArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusHistory)(nil)).Elem()
}

func (o ApplicationStatusHistoryArrayOutput) ToApplicationStatusHistoryArrayOutput() ApplicationStatusHistoryArrayOutput {
	return o
}

func (o ApplicationStatusHistoryArrayOutput) ToApplicationStatusHistoryArrayOutputWithContext(ctx context.Context) ApplicationStatusHistoryArrayOutput {
	return o
}

func (o ApplicationStatusHistoryArrayOutput) Index(i pulumi.IntInput) ApplicationStatusHistoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusHistory {
		return vs[0].([]ApplicationStatusHistory)[vs[1].(int)]
	}).(ApplicationStatusHistoryOutput)
}

// ApplicationSource contains information about github repository, path within repository and target application environment.
type ApplicationStatusHistorySource struct {
	// Chart is a Helm chart name
	Chart *string `pulumi:"chart"`
	// Directory holds path/directory specific options
	Directory *ApplicationStatusHistorySourceDirectory `pulumi:"directory"`
	// Helm holds helm specific options
	Helm *ApplicationStatusHistorySourceHelm `pulumi:"helm"`
	// Ksonnet holds ksonnet specific options
	Ksonnet *ApplicationStatusHistorySourceKsonnet `pulumi:"ksonnet"`
	// Kustomize holds kustomize specific options
	Kustomize *ApplicationStatusHistorySourceKustomize `pulumi:"kustomize"`
	// Path is a directory path within the Git repository
	Path *string `pulumi:"path"`
	// ConfigManagementPlugin holds config management plugin specific options
	Plugin *ApplicationStatusHistorySourcePlugin `pulumi:"plugin"`
	// RepoURL is the repository URL of the application manifests
	RepoURL string `pulumi:"repoURL"`
	// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
	TargetRevision *string `pulumi:"targetRevision"`
}

// ApplicationStatusHistorySourceInput is an input type that accepts ApplicationStatusHistorySourceArgs and ApplicationStatusHistorySourceOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceInput` via:
//
//          ApplicationStatusHistorySourceArgs{...}
type ApplicationStatusHistorySourceInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceOutput() ApplicationStatusHistorySourceOutput
	ToApplicationStatusHistorySourceOutputWithContext(context.Context) ApplicationStatusHistorySourceOutput
}

// ApplicationSource contains information about github repository, path within repository and target application environment.
type ApplicationStatusHistorySourceArgs struct {
	// Chart is a Helm chart name
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// Directory holds path/directory specific options
	Directory ApplicationStatusHistorySourceDirectoryPtrInput `pulumi:"directory"`
	// Helm holds helm specific options
	Helm ApplicationStatusHistorySourceHelmPtrInput `pulumi:"helm"`
	// Ksonnet holds ksonnet specific options
	Ksonnet ApplicationStatusHistorySourceKsonnetPtrInput `pulumi:"ksonnet"`
	// Kustomize holds kustomize specific options
	Kustomize ApplicationStatusHistorySourceKustomizePtrInput `pulumi:"kustomize"`
	// Path is a directory path within the Git repository
	Path pulumi.StringPtrInput `pulumi:"path"`
	// ConfigManagementPlugin holds config management plugin specific options
	Plugin ApplicationStatusHistorySourcePluginPtrInput `pulumi:"plugin"`
	// RepoURL is the repository URL of the application manifests
	RepoURL pulumi.StringInput `pulumi:"repoURL"`
	// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
	TargetRevision pulumi.StringPtrInput `pulumi:"targetRevision"`
}

func (ApplicationStatusHistorySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySource)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceArgs) ToApplicationStatusHistorySourceOutput() ApplicationStatusHistorySourceOutput {
	return i.ToApplicationStatusHistorySourceOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceArgs) ToApplicationStatusHistorySourceOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceOutput)
}

func (i ApplicationStatusHistorySourceArgs) ToApplicationStatusHistorySourcePtrOutput() ApplicationStatusHistorySourcePtrOutput {
	return i.ToApplicationStatusHistorySourcePtrOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceArgs) ToApplicationStatusHistorySourcePtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceOutput).ToApplicationStatusHistorySourcePtrOutputWithContext(ctx)
}

// ApplicationStatusHistorySourcePtrInput is an input type that accepts ApplicationStatusHistorySourceArgs, ApplicationStatusHistorySourcePtr and ApplicationStatusHistorySourcePtrOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourcePtrInput` via:
//
//          ApplicationStatusHistorySourceArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusHistorySourcePtrInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourcePtrOutput() ApplicationStatusHistorySourcePtrOutput
	ToApplicationStatusHistorySourcePtrOutputWithContext(context.Context) ApplicationStatusHistorySourcePtrOutput
}

type applicationStatusHistorySourcePtrType ApplicationStatusHistorySourceArgs

func ApplicationStatusHistorySourcePtr(v *ApplicationStatusHistorySourceArgs) ApplicationStatusHistorySourcePtrInput {
	return (*applicationStatusHistorySourcePtrType)(v)
}

func (*applicationStatusHistorySourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusHistorySource)(nil)).Elem()
}

func (i *applicationStatusHistorySourcePtrType) ToApplicationStatusHistorySourcePtrOutput() ApplicationStatusHistorySourcePtrOutput {
	return i.ToApplicationStatusHistorySourcePtrOutputWithContext(context.Background())
}

func (i *applicationStatusHistorySourcePtrType) ToApplicationStatusHistorySourcePtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourcePtrOutput)
}

// ApplicationSource contains information about github repository, path within repository and target application environment.
type ApplicationStatusHistorySourceOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySource)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceOutput) ToApplicationStatusHistorySourceOutput() ApplicationStatusHistorySourceOutput {
	return o
}

func (o ApplicationStatusHistorySourceOutput) ToApplicationStatusHistorySourceOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceOutput {
	return o
}

func (o ApplicationStatusHistorySourceOutput) ToApplicationStatusHistorySourcePtrOutput() ApplicationStatusHistorySourcePtrOutput {
	return o.ToApplicationStatusHistorySourcePtrOutputWithContext(context.Background())
}

func (o ApplicationStatusHistorySourceOutput) ToApplicationStatusHistorySourcePtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourcePtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySource) *ApplicationStatusHistorySource {
		return &v
	}).(ApplicationStatusHistorySourcePtrOutput)
}

// Chart is a Helm chart name
func (o ApplicationStatusHistorySourceOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySource) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
func (o ApplicationStatusHistorySourceOutput) Directory() ApplicationStatusHistorySourceDirectoryPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySource) *ApplicationStatusHistorySourceDirectory { return v.Directory }).(ApplicationStatusHistorySourceDirectoryPtrOutput)
}

// Helm holds helm specific options
func (o ApplicationStatusHistorySourceOutput) Helm() ApplicationStatusHistorySourceHelmPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySource) *ApplicationStatusHistorySourceHelm { return v.Helm }).(ApplicationStatusHistorySourceHelmPtrOutput)
}

// Ksonnet holds ksonnet specific options
func (o ApplicationStatusHistorySourceOutput) Ksonnet() ApplicationStatusHistorySourceKsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySource) *ApplicationStatusHistorySourceKsonnet { return v.Ksonnet }).(ApplicationStatusHistorySourceKsonnetPtrOutput)
}

// Kustomize holds kustomize specific options
func (o ApplicationStatusHistorySourceOutput) Kustomize() ApplicationStatusHistorySourceKustomizePtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySource) *ApplicationStatusHistorySourceKustomize { return v.Kustomize }).(ApplicationStatusHistorySourceKustomizePtrOutput)
}

// Path is a directory path within the Git repository
func (o ApplicationStatusHistorySourceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySource) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
func (o ApplicationStatusHistorySourceOutput) Plugin() ApplicationStatusHistorySourcePluginPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySource) *ApplicationStatusHistorySourcePlugin { return v.Plugin }).(ApplicationStatusHistorySourcePluginPtrOutput)
}

// RepoURL is the repository URL of the application manifests
func (o ApplicationStatusHistorySourceOutput) RepoURL() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySource) string { return v.RepoURL }).(pulumi.StringOutput)
}

// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
func (o ApplicationStatusHistorySourceOutput) TargetRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySource) *string { return v.TargetRevision }).(pulumi.StringPtrOutput)
}

type ApplicationStatusHistorySourcePtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusHistorySource)(nil)).Elem()
}

func (o ApplicationStatusHistorySourcePtrOutput) ToApplicationStatusHistorySourcePtrOutput() ApplicationStatusHistorySourcePtrOutput {
	return o
}

func (o ApplicationStatusHistorySourcePtrOutput) ToApplicationStatusHistorySourcePtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourcePtrOutput {
	return o
}

func (o ApplicationStatusHistorySourcePtrOutput) Elem() ApplicationStatusHistorySourceOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySource) ApplicationStatusHistorySource { return *v }).(ApplicationStatusHistorySourceOutput)
}

// Chart is a Helm chart name
func (o ApplicationStatusHistorySourcePtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySource) *string {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
func (o ApplicationStatusHistorySourcePtrOutput) Directory() ApplicationStatusHistorySourceDirectoryPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySource) *ApplicationStatusHistorySourceDirectory {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(ApplicationStatusHistorySourceDirectoryPtrOutput)
}

// Helm holds helm specific options
func (o ApplicationStatusHistorySourcePtrOutput) Helm() ApplicationStatusHistorySourceHelmPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySource) *ApplicationStatusHistorySourceHelm {
		if v == nil {
			return nil
		}
		return v.Helm
	}).(ApplicationStatusHistorySourceHelmPtrOutput)
}

// Ksonnet holds ksonnet specific options
func (o ApplicationStatusHistorySourcePtrOutput) Ksonnet() ApplicationStatusHistorySourceKsonnetPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySource) *ApplicationStatusHistorySourceKsonnet {
		if v == nil {
			return nil
		}
		return v.Ksonnet
	}).(ApplicationStatusHistorySourceKsonnetPtrOutput)
}

// Kustomize holds kustomize specific options
func (o ApplicationStatusHistorySourcePtrOutput) Kustomize() ApplicationStatusHistorySourceKustomizePtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySource) *ApplicationStatusHistorySourceKustomize {
		if v == nil {
			return nil
		}
		return v.Kustomize
	}).(ApplicationStatusHistorySourceKustomizePtrOutput)
}

// Path is a directory path within the Git repository
func (o ApplicationStatusHistorySourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySource) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
func (o ApplicationStatusHistorySourcePtrOutput) Plugin() ApplicationStatusHistorySourcePluginPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySource) *ApplicationStatusHistorySourcePlugin {
		if v == nil {
			return nil
		}
		return v.Plugin
	}).(ApplicationStatusHistorySourcePluginPtrOutput)
}

// RepoURL is the repository URL of the application manifests
func (o ApplicationStatusHistorySourcePtrOutput) RepoURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySource) *string {
		if v == nil {
			return nil
		}
		return &v.RepoURL
	}).(pulumi.StringPtrOutput)
}

// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
func (o ApplicationStatusHistorySourcePtrOutput) TargetRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySource) *string {
		if v == nil {
			return nil
		}
		return v.TargetRevision
	}).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
type ApplicationStatusHistorySourceDirectory struct {
	// ApplicationSourceJsonnet holds jsonnet specific options
	Jsonnet *ApplicationStatusHistorySourceDirectoryJsonnet `pulumi:"jsonnet"`
	Recurse *bool                                           `pulumi:"recurse"`
}

// ApplicationStatusHistorySourceDirectoryInput is an input type that accepts ApplicationStatusHistorySourceDirectoryArgs and ApplicationStatusHistorySourceDirectoryOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceDirectoryInput` via:
//
//          ApplicationStatusHistorySourceDirectoryArgs{...}
type ApplicationStatusHistorySourceDirectoryInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceDirectoryOutput() ApplicationStatusHistorySourceDirectoryOutput
	ToApplicationStatusHistorySourceDirectoryOutputWithContext(context.Context) ApplicationStatusHistorySourceDirectoryOutput
}

// Directory holds path/directory specific options
type ApplicationStatusHistorySourceDirectoryArgs struct {
	// ApplicationSourceJsonnet holds jsonnet specific options
	Jsonnet ApplicationStatusHistorySourceDirectoryJsonnetPtrInput `pulumi:"jsonnet"`
	Recurse pulumi.BoolPtrInput                                    `pulumi:"recurse"`
}

func (ApplicationStatusHistorySourceDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceDirectory)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceDirectoryArgs) ToApplicationStatusHistorySourceDirectoryOutput() ApplicationStatusHistorySourceDirectoryOutput {
	return i.ToApplicationStatusHistorySourceDirectoryOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceDirectoryArgs) ToApplicationStatusHistorySourceDirectoryOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceDirectoryOutput)
}

func (i ApplicationStatusHistorySourceDirectoryArgs) ToApplicationStatusHistorySourceDirectoryPtrOutput() ApplicationStatusHistorySourceDirectoryPtrOutput {
	return i.ToApplicationStatusHistorySourceDirectoryPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceDirectoryArgs) ToApplicationStatusHistorySourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceDirectoryOutput).ToApplicationStatusHistorySourceDirectoryPtrOutputWithContext(ctx)
}

// ApplicationStatusHistorySourceDirectoryPtrInput is an input type that accepts ApplicationStatusHistorySourceDirectoryArgs, ApplicationStatusHistorySourceDirectoryPtr and ApplicationStatusHistorySourceDirectoryPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceDirectoryPtrInput` via:
//
//          ApplicationStatusHistorySourceDirectoryArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusHistorySourceDirectoryPtrInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceDirectoryPtrOutput() ApplicationStatusHistorySourceDirectoryPtrOutput
	ToApplicationStatusHistorySourceDirectoryPtrOutputWithContext(context.Context) ApplicationStatusHistorySourceDirectoryPtrOutput
}

type applicationStatusHistorySourceDirectoryPtrType ApplicationStatusHistorySourceDirectoryArgs

func ApplicationStatusHistorySourceDirectoryPtr(v *ApplicationStatusHistorySourceDirectoryArgs) ApplicationStatusHistorySourceDirectoryPtrInput {
	return (*applicationStatusHistorySourceDirectoryPtrType)(v)
}

func (*applicationStatusHistorySourceDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusHistorySourceDirectory)(nil)).Elem()
}

func (i *applicationStatusHistorySourceDirectoryPtrType) ToApplicationStatusHistorySourceDirectoryPtrOutput() ApplicationStatusHistorySourceDirectoryPtrOutput {
	return i.ToApplicationStatusHistorySourceDirectoryPtrOutputWithContext(context.Background())
}

func (i *applicationStatusHistorySourceDirectoryPtrType) ToApplicationStatusHistorySourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceDirectoryPtrOutput)
}

// Directory holds path/directory specific options
type ApplicationStatusHistorySourceDirectoryOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceDirectory)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceDirectoryOutput) ToApplicationStatusHistorySourceDirectoryOutput() ApplicationStatusHistorySourceDirectoryOutput {
	return o
}

func (o ApplicationStatusHistorySourceDirectoryOutput) ToApplicationStatusHistorySourceDirectoryOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryOutput {
	return o
}

func (o ApplicationStatusHistorySourceDirectoryOutput) ToApplicationStatusHistorySourceDirectoryPtrOutput() ApplicationStatusHistorySourceDirectoryPtrOutput {
	return o.ToApplicationStatusHistorySourceDirectoryPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusHistorySourceDirectoryOutput) ToApplicationStatusHistorySourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceDirectory) *ApplicationStatusHistorySourceDirectory {
		return &v
	}).(ApplicationStatusHistorySourceDirectoryPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
func (o ApplicationStatusHistorySourceDirectoryOutput) Jsonnet() ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceDirectory) *ApplicationStatusHistorySourceDirectoryJsonnet {
		return v.Jsonnet
	}).(ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput)
}

func (o ApplicationStatusHistorySourceDirectoryOutput) Recurse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceDirectory) *bool { return v.Recurse }).(pulumi.BoolPtrOutput)
}

type ApplicationStatusHistorySourceDirectoryPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusHistorySourceDirectory)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceDirectoryPtrOutput) ToApplicationStatusHistorySourceDirectoryPtrOutput() ApplicationStatusHistorySourceDirectoryPtrOutput {
	return o
}

func (o ApplicationStatusHistorySourceDirectoryPtrOutput) ToApplicationStatusHistorySourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryPtrOutput {
	return o
}

func (o ApplicationStatusHistorySourceDirectoryPtrOutput) Elem() ApplicationStatusHistorySourceDirectoryOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceDirectory) ApplicationStatusHistorySourceDirectory { return *v }).(ApplicationStatusHistorySourceDirectoryOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
func (o ApplicationStatusHistorySourceDirectoryPtrOutput) Jsonnet() ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceDirectory) *ApplicationStatusHistorySourceDirectoryJsonnet {
		if v == nil {
			return nil
		}
		return v.Jsonnet
	}).(ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput)
}

func (o ApplicationStatusHistorySourceDirectoryPtrOutput) Recurse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceDirectory) *bool {
		if v == nil {
			return nil
		}
		return v.Recurse
	}).(pulumi.BoolPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationStatusHistorySourceDirectoryJsonnet struct {
	// ExtVars is a list of Jsonnet External Variables
	ExtVars []ApplicationStatusHistorySourceDirectoryJsonnetExtVars `pulumi:"extVars"`
	// Additional library search dirs
	Libs []string `pulumi:"libs"`
	// TLAS is a list of Jsonnet Top-level Arguments
	Tlas []ApplicationStatusHistorySourceDirectoryJsonnetTlas `pulumi:"tlas"`
}

// ApplicationStatusHistorySourceDirectoryJsonnetInput is an input type that accepts ApplicationStatusHistorySourceDirectoryJsonnetArgs and ApplicationStatusHistorySourceDirectoryJsonnetOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceDirectoryJsonnetInput` via:
//
//          ApplicationStatusHistorySourceDirectoryJsonnetArgs{...}
type ApplicationStatusHistorySourceDirectoryJsonnetInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceDirectoryJsonnetOutput() ApplicationStatusHistorySourceDirectoryJsonnetOutput
	ToApplicationStatusHistorySourceDirectoryJsonnetOutputWithContext(context.Context) ApplicationStatusHistorySourceDirectoryJsonnetOutput
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationStatusHistorySourceDirectoryJsonnetArgs struct {
	// ExtVars is a list of Jsonnet External Variables
	ExtVars ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayInput `pulumi:"extVars"`
	// Additional library search dirs
	Libs pulumi.StringArrayInput `pulumi:"libs"`
	// TLAS is a list of Jsonnet Top-level Arguments
	Tlas ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayInput `pulumi:"tlas"`
}

func (ApplicationStatusHistorySourceDirectoryJsonnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceDirectoryJsonnet)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceDirectoryJsonnetArgs) ToApplicationStatusHistorySourceDirectoryJsonnetOutput() ApplicationStatusHistorySourceDirectoryJsonnetOutput {
	return i.ToApplicationStatusHistorySourceDirectoryJsonnetOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceDirectoryJsonnetArgs) ToApplicationStatusHistorySourceDirectoryJsonnetOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryJsonnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceDirectoryJsonnetOutput)
}

func (i ApplicationStatusHistorySourceDirectoryJsonnetArgs) ToApplicationStatusHistorySourceDirectoryJsonnetPtrOutput() ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput {
	return i.ToApplicationStatusHistorySourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceDirectoryJsonnetArgs) ToApplicationStatusHistorySourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceDirectoryJsonnetOutput).ToApplicationStatusHistorySourceDirectoryJsonnetPtrOutputWithContext(ctx)
}

// ApplicationStatusHistorySourceDirectoryJsonnetPtrInput is an input type that accepts ApplicationStatusHistorySourceDirectoryJsonnetArgs, ApplicationStatusHistorySourceDirectoryJsonnetPtr and ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceDirectoryJsonnetPtrInput` via:
//
//          ApplicationStatusHistorySourceDirectoryJsonnetArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusHistorySourceDirectoryJsonnetPtrInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceDirectoryJsonnetPtrOutput() ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput
	ToApplicationStatusHistorySourceDirectoryJsonnetPtrOutputWithContext(context.Context) ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput
}

type applicationStatusHistorySourceDirectoryJsonnetPtrType ApplicationStatusHistorySourceDirectoryJsonnetArgs

func ApplicationStatusHistorySourceDirectoryJsonnetPtr(v *ApplicationStatusHistorySourceDirectoryJsonnetArgs) ApplicationStatusHistorySourceDirectoryJsonnetPtrInput {
	return (*applicationStatusHistorySourceDirectoryJsonnetPtrType)(v)
}

func (*applicationStatusHistorySourceDirectoryJsonnetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusHistorySourceDirectoryJsonnet)(nil)).Elem()
}

func (i *applicationStatusHistorySourceDirectoryJsonnetPtrType) ToApplicationStatusHistorySourceDirectoryJsonnetPtrOutput() ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput {
	return i.ToApplicationStatusHistorySourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (i *applicationStatusHistorySourceDirectoryJsonnetPtrType) ToApplicationStatusHistorySourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationStatusHistorySourceDirectoryJsonnetOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceDirectoryJsonnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceDirectoryJsonnet)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetOutput) ToApplicationStatusHistorySourceDirectoryJsonnetOutput() ApplicationStatusHistorySourceDirectoryJsonnetOutput {
	return o
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetOutput) ToApplicationStatusHistorySourceDirectoryJsonnetOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryJsonnetOutput {
	return o
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetOutput) ToApplicationStatusHistorySourceDirectoryJsonnetPtrOutput() ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput {
	return o.ToApplicationStatusHistorySourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetOutput) ToApplicationStatusHistorySourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceDirectoryJsonnet) *ApplicationStatusHistorySourceDirectoryJsonnet {
		return &v
	}).(ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput)
}

// ExtVars is a list of Jsonnet External Variables
func (o ApplicationStatusHistorySourceDirectoryJsonnetOutput) ExtVars() ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceDirectoryJsonnet) []ApplicationStatusHistorySourceDirectoryJsonnetExtVars {
		return v.ExtVars
	}).(ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput)
}

// Additional library search dirs
func (o ApplicationStatusHistorySourceDirectoryJsonnetOutput) Libs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceDirectoryJsonnet) []string { return v.Libs }).(pulumi.StringArrayOutput)
}

// TLAS is a list of Jsonnet Top-level Arguments
func (o ApplicationStatusHistorySourceDirectoryJsonnetOutput) Tlas() ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceDirectoryJsonnet) []ApplicationStatusHistorySourceDirectoryJsonnetTlas {
		return v.Tlas
	}).(ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput)
}

type ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusHistorySourceDirectoryJsonnet)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput) ToApplicationStatusHistorySourceDirectoryJsonnetPtrOutput() ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput {
	return o
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput) ToApplicationStatusHistorySourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput {
	return o
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput) Elem() ApplicationStatusHistorySourceDirectoryJsonnetOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceDirectoryJsonnet) ApplicationStatusHistorySourceDirectoryJsonnet {
		return *v
	}).(ApplicationStatusHistorySourceDirectoryJsonnetOutput)
}

// ExtVars is a list of Jsonnet External Variables
func (o ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput) ExtVars() ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceDirectoryJsonnet) []ApplicationStatusHistorySourceDirectoryJsonnetExtVars {
		if v == nil {
			return nil
		}
		return v.ExtVars
	}).(ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput)
}

// Additional library search dirs
func (o ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput) Libs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceDirectoryJsonnet) []string {
		if v == nil {
			return nil
		}
		return v.Libs
	}).(pulumi.StringArrayOutput)
}

// TLAS is a list of Jsonnet Top-level Arguments
func (o ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput) Tlas() ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceDirectoryJsonnet) []ApplicationStatusHistorySourceDirectoryJsonnetTlas {
		if v == nil {
			return nil
		}
		return v.Tlas
	}).(ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusHistorySourceDirectoryJsonnetExtVars struct {
	Code  *bool  `pulumi:"code"`
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ApplicationStatusHistorySourceDirectoryJsonnetExtVarsInput is an input type that accepts ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArgs and ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceDirectoryJsonnetExtVarsInput` via:
//
//          ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArgs{...}
type ApplicationStatusHistorySourceDirectoryJsonnetExtVarsInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput() ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput
	ToApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutputWithContext(context.Context) ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArgs struct {
	Code  pulumi.BoolPtrInput `pulumi:"code"`
	Name  pulumi.StringInput  `pulumi:"name"`
	Value pulumi.StringInput  `pulumi:"value"`
}

func (ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArgs) ToApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput() ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput {
	return i.ToApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArgs) ToApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput)
}

// ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayInput is an input type that accepts ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArray and ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayInput` via:
//
//          ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArray{ ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArgs{...} }
type ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput() ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput
	ToApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutputWithContext(context.Context) ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput
}

type ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArray []ApplicationStatusHistorySourceDirectoryJsonnetExtVarsInput

func (ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusHistorySourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArray) ToApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput() ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput {
	return i.ToApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArray) ToApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput) ToApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput() ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput {
	return o
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput) ToApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput {
	return o
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput) Code() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceDirectoryJsonnetExtVars) *bool { return v.Code }).(pulumi.BoolPtrOutput)
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceDirectoryJsonnetExtVars) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceDirectoryJsonnetExtVars) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusHistorySourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput) ToApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput() ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput {
	return o
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput) ToApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput {
	return o
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput) Index(i pulumi.IntInput) ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusHistorySourceDirectoryJsonnetExtVars {
		return vs[0].([]ApplicationStatusHistorySourceDirectoryJsonnetExtVars)[vs[1].(int)]
	}).(ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusHistorySourceDirectoryJsonnetTlas struct {
	Code  *bool  `pulumi:"code"`
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ApplicationStatusHistorySourceDirectoryJsonnetTlasInput is an input type that accepts ApplicationStatusHistorySourceDirectoryJsonnetTlasArgs and ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceDirectoryJsonnetTlasInput` via:
//
//          ApplicationStatusHistorySourceDirectoryJsonnetTlasArgs{...}
type ApplicationStatusHistorySourceDirectoryJsonnetTlasInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceDirectoryJsonnetTlasOutput() ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput
	ToApplicationStatusHistorySourceDirectoryJsonnetTlasOutputWithContext(context.Context) ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusHistorySourceDirectoryJsonnetTlasArgs struct {
	Code  pulumi.BoolPtrInput `pulumi:"code"`
	Name  pulumi.StringInput  `pulumi:"name"`
	Value pulumi.StringInput  `pulumi:"value"`
}

func (ApplicationStatusHistorySourceDirectoryJsonnetTlasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceDirectoryJsonnetTlasArgs) ToApplicationStatusHistorySourceDirectoryJsonnetTlasOutput() ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput {
	return i.ToApplicationStatusHistorySourceDirectoryJsonnetTlasOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceDirectoryJsonnetTlasArgs) ToApplicationStatusHistorySourceDirectoryJsonnetTlasOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput)
}

// ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayInput is an input type that accepts ApplicationStatusHistorySourceDirectoryJsonnetTlasArray and ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayInput` via:
//
//          ApplicationStatusHistorySourceDirectoryJsonnetTlasArray{ ApplicationStatusHistorySourceDirectoryJsonnetTlasArgs{...} }
type ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput() ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput
	ToApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutputWithContext(context.Context) ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput
}

type ApplicationStatusHistorySourceDirectoryJsonnetTlasArray []ApplicationStatusHistorySourceDirectoryJsonnetTlasInput

func (ApplicationStatusHistorySourceDirectoryJsonnetTlasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusHistorySourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceDirectoryJsonnetTlasArray) ToApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput() ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput {
	return i.ToApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceDirectoryJsonnetTlasArray) ToApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput) ToApplicationStatusHistorySourceDirectoryJsonnetTlasOutput() ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput {
	return o
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput) ToApplicationStatusHistorySourceDirectoryJsonnetTlasOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput {
	return o
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput) Code() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceDirectoryJsonnetTlas) *bool { return v.Code }).(pulumi.BoolPtrOutput)
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceDirectoryJsonnetTlas) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceDirectoryJsonnetTlas) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusHistorySourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput) ToApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput() ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput {
	return o
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput) ToApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput {
	return o
}

func (o ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput) Index(i pulumi.IntInput) ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusHistorySourceDirectoryJsonnetTlas {
		return vs[0].([]ApplicationStatusHistorySourceDirectoryJsonnetTlas)[vs[1].(int)]
	}).(ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput)
}

// Helm holds helm specific options
type ApplicationStatusHistorySourceHelm struct {
	// FileParameters are file parameters to the helm template
	FileParameters []ApplicationStatusHistorySourceHelmFileParameters `pulumi:"fileParameters"`
	// Parameters are parameters to the helm template
	Parameters []ApplicationStatusHistorySourceHelmParameters `pulumi:"parameters"`
	// The Helm release name. If omitted it will use the application name
	ReleaseName *string `pulumi:"releaseName"`
	// ValuesFiles is a list of Helm value files to use when generating a template
	ValueFiles []string `pulumi:"valueFiles"`
	// Values is Helm values, typically defined as a block
	Values *string `pulumi:"values"`
}

// ApplicationStatusHistorySourceHelmInput is an input type that accepts ApplicationStatusHistorySourceHelmArgs and ApplicationStatusHistorySourceHelmOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceHelmInput` via:
//
//          ApplicationStatusHistorySourceHelmArgs{...}
type ApplicationStatusHistorySourceHelmInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceHelmOutput() ApplicationStatusHistorySourceHelmOutput
	ToApplicationStatusHistorySourceHelmOutputWithContext(context.Context) ApplicationStatusHistorySourceHelmOutput
}

// Helm holds helm specific options
type ApplicationStatusHistorySourceHelmArgs struct {
	// FileParameters are file parameters to the helm template
	FileParameters ApplicationStatusHistorySourceHelmFileParametersArrayInput `pulumi:"fileParameters"`
	// Parameters are parameters to the helm template
	Parameters ApplicationStatusHistorySourceHelmParametersArrayInput `pulumi:"parameters"`
	// The Helm release name. If omitted it will use the application name
	ReleaseName pulumi.StringPtrInput `pulumi:"releaseName"`
	// ValuesFiles is a list of Helm value files to use when generating a template
	ValueFiles pulumi.StringArrayInput `pulumi:"valueFiles"`
	// Values is Helm values, typically defined as a block
	Values pulumi.StringPtrInput `pulumi:"values"`
}

func (ApplicationStatusHistorySourceHelmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceHelm)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceHelmArgs) ToApplicationStatusHistorySourceHelmOutput() ApplicationStatusHistorySourceHelmOutput {
	return i.ToApplicationStatusHistorySourceHelmOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceHelmArgs) ToApplicationStatusHistorySourceHelmOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceHelmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceHelmOutput)
}

func (i ApplicationStatusHistorySourceHelmArgs) ToApplicationStatusHistorySourceHelmPtrOutput() ApplicationStatusHistorySourceHelmPtrOutput {
	return i.ToApplicationStatusHistorySourceHelmPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceHelmArgs) ToApplicationStatusHistorySourceHelmPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceHelmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceHelmOutput).ToApplicationStatusHistorySourceHelmPtrOutputWithContext(ctx)
}

// ApplicationStatusHistorySourceHelmPtrInput is an input type that accepts ApplicationStatusHistorySourceHelmArgs, ApplicationStatusHistorySourceHelmPtr and ApplicationStatusHistorySourceHelmPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceHelmPtrInput` via:
//
//          ApplicationStatusHistorySourceHelmArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusHistorySourceHelmPtrInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceHelmPtrOutput() ApplicationStatusHistorySourceHelmPtrOutput
	ToApplicationStatusHistorySourceHelmPtrOutputWithContext(context.Context) ApplicationStatusHistorySourceHelmPtrOutput
}

type applicationStatusHistorySourceHelmPtrType ApplicationStatusHistorySourceHelmArgs

func ApplicationStatusHistorySourceHelmPtr(v *ApplicationStatusHistorySourceHelmArgs) ApplicationStatusHistorySourceHelmPtrInput {
	return (*applicationStatusHistorySourceHelmPtrType)(v)
}

func (*applicationStatusHistorySourceHelmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusHistorySourceHelm)(nil)).Elem()
}

func (i *applicationStatusHistorySourceHelmPtrType) ToApplicationStatusHistorySourceHelmPtrOutput() ApplicationStatusHistorySourceHelmPtrOutput {
	return i.ToApplicationStatusHistorySourceHelmPtrOutputWithContext(context.Background())
}

func (i *applicationStatusHistorySourceHelmPtrType) ToApplicationStatusHistorySourceHelmPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceHelmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceHelmPtrOutput)
}

// Helm holds helm specific options
type ApplicationStatusHistorySourceHelmOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceHelmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceHelm)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceHelmOutput) ToApplicationStatusHistorySourceHelmOutput() ApplicationStatusHistorySourceHelmOutput {
	return o
}

func (o ApplicationStatusHistorySourceHelmOutput) ToApplicationStatusHistorySourceHelmOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceHelmOutput {
	return o
}

func (o ApplicationStatusHistorySourceHelmOutput) ToApplicationStatusHistorySourceHelmPtrOutput() ApplicationStatusHistorySourceHelmPtrOutput {
	return o.ToApplicationStatusHistorySourceHelmPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusHistorySourceHelmOutput) ToApplicationStatusHistorySourceHelmPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceHelmPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceHelm) *ApplicationStatusHistorySourceHelm {
		return &v
	}).(ApplicationStatusHistorySourceHelmPtrOutput)
}

// FileParameters are file parameters to the helm template
func (o ApplicationStatusHistorySourceHelmOutput) FileParameters() ApplicationStatusHistorySourceHelmFileParametersArrayOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceHelm) []ApplicationStatusHistorySourceHelmFileParameters {
		return v.FileParameters
	}).(ApplicationStatusHistorySourceHelmFileParametersArrayOutput)
}

// Parameters are parameters to the helm template
func (o ApplicationStatusHistorySourceHelmOutput) Parameters() ApplicationStatusHistorySourceHelmParametersArrayOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceHelm) []ApplicationStatusHistorySourceHelmParameters {
		return v.Parameters
	}).(ApplicationStatusHistorySourceHelmParametersArrayOutput)
}

// The Helm release name. If omitted it will use the application name
func (o ApplicationStatusHistorySourceHelmOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceHelm) *string { return v.ReleaseName }).(pulumi.StringPtrOutput)
}

// ValuesFiles is a list of Helm value files to use when generating a template
func (o ApplicationStatusHistorySourceHelmOutput) ValueFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceHelm) []string { return v.ValueFiles }).(pulumi.StringArrayOutput)
}

// Values is Helm values, typically defined as a block
func (o ApplicationStatusHistorySourceHelmOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceHelm) *string { return v.Values }).(pulumi.StringPtrOutput)
}

type ApplicationStatusHistorySourceHelmPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceHelmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusHistorySourceHelm)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceHelmPtrOutput) ToApplicationStatusHistorySourceHelmPtrOutput() ApplicationStatusHistorySourceHelmPtrOutput {
	return o
}

func (o ApplicationStatusHistorySourceHelmPtrOutput) ToApplicationStatusHistorySourceHelmPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceHelmPtrOutput {
	return o
}

func (o ApplicationStatusHistorySourceHelmPtrOutput) Elem() ApplicationStatusHistorySourceHelmOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceHelm) ApplicationStatusHistorySourceHelm { return *v }).(ApplicationStatusHistorySourceHelmOutput)
}

// FileParameters are file parameters to the helm template
func (o ApplicationStatusHistorySourceHelmPtrOutput) FileParameters() ApplicationStatusHistorySourceHelmFileParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceHelm) []ApplicationStatusHistorySourceHelmFileParameters {
		if v == nil {
			return nil
		}
		return v.FileParameters
	}).(ApplicationStatusHistorySourceHelmFileParametersArrayOutput)
}

// Parameters are parameters to the helm template
func (o ApplicationStatusHistorySourceHelmPtrOutput) Parameters() ApplicationStatusHistorySourceHelmParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceHelm) []ApplicationStatusHistorySourceHelmParameters {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ApplicationStatusHistorySourceHelmParametersArrayOutput)
}

// The Helm release name. If omitted it will use the application name
func (o ApplicationStatusHistorySourceHelmPtrOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceHelm) *string {
		if v == nil {
			return nil
		}
		return v.ReleaseName
	}).(pulumi.StringPtrOutput)
}

// ValuesFiles is a list of Helm value files to use when generating a template
func (o ApplicationStatusHistorySourceHelmPtrOutput) ValueFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceHelm) []string {
		if v == nil {
			return nil
		}
		return v.ValueFiles
	}).(pulumi.StringArrayOutput)
}

// Values is Helm values, typically defined as a block
func (o ApplicationStatusHistorySourceHelmPtrOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceHelm) *string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringPtrOutput)
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationStatusHistorySourceHelmFileParameters struct {
	// Name is the name of the helm parameter
	Name *string `pulumi:"name"`
	// Path is the path value for the helm parameter
	Path *string `pulumi:"path"`
}

// ApplicationStatusHistorySourceHelmFileParametersInput is an input type that accepts ApplicationStatusHistorySourceHelmFileParametersArgs and ApplicationStatusHistorySourceHelmFileParametersOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceHelmFileParametersInput` via:
//
//          ApplicationStatusHistorySourceHelmFileParametersArgs{...}
type ApplicationStatusHistorySourceHelmFileParametersInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceHelmFileParametersOutput() ApplicationStatusHistorySourceHelmFileParametersOutput
	ToApplicationStatusHistorySourceHelmFileParametersOutputWithContext(context.Context) ApplicationStatusHistorySourceHelmFileParametersOutput
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationStatusHistorySourceHelmFileParametersArgs struct {
	// Name is the name of the helm parameter
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path is the path value for the helm parameter
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ApplicationStatusHistorySourceHelmFileParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceHelmFileParameters)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceHelmFileParametersArgs) ToApplicationStatusHistorySourceHelmFileParametersOutput() ApplicationStatusHistorySourceHelmFileParametersOutput {
	return i.ToApplicationStatusHistorySourceHelmFileParametersOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceHelmFileParametersArgs) ToApplicationStatusHistorySourceHelmFileParametersOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceHelmFileParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceHelmFileParametersOutput)
}

// ApplicationStatusHistorySourceHelmFileParametersArrayInput is an input type that accepts ApplicationStatusHistorySourceHelmFileParametersArray and ApplicationStatusHistorySourceHelmFileParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceHelmFileParametersArrayInput` via:
//
//          ApplicationStatusHistorySourceHelmFileParametersArray{ ApplicationStatusHistorySourceHelmFileParametersArgs{...} }
type ApplicationStatusHistorySourceHelmFileParametersArrayInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceHelmFileParametersArrayOutput() ApplicationStatusHistorySourceHelmFileParametersArrayOutput
	ToApplicationStatusHistorySourceHelmFileParametersArrayOutputWithContext(context.Context) ApplicationStatusHistorySourceHelmFileParametersArrayOutput
}

type ApplicationStatusHistorySourceHelmFileParametersArray []ApplicationStatusHistorySourceHelmFileParametersInput

func (ApplicationStatusHistorySourceHelmFileParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusHistorySourceHelmFileParameters)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceHelmFileParametersArray) ToApplicationStatusHistorySourceHelmFileParametersArrayOutput() ApplicationStatusHistorySourceHelmFileParametersArrayOutput {
	return i.ToApplicationStatusHistorySourceHelmFileParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceHelmFileParametersArray) ToApplicationStatusHistorySourceHelmFileParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceHelmFileParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceHelmFileParametersArrayOutput)
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationStatusHistorySourceHelmFileParametersOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceHelmFileParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceHelmFileParameters)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceHelmFileParametersOutput) ToApplicationStatusHistorySourceHelmFileParametersOutput() ApplicationStatusHistorySourceHelmFileParametersOutput {
	return o
}

func (o ApplicationStatusHistorySourceHelmFileParametersOutput) ToApplicationStatusHistorySourceHelmFileParametersOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceHelmFileParametersOutput {
	return o
}

// Name is the name of the helm parameter
func (o ApplicationStatusHistorySourceHelmFileParametersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceHelmFileParameters) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path is the path value for the helm parameter
func (o ApplicationStatusHistorySourceHelmFileParametersOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceHelmFileParameters) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ApplicationStatusHistorySourceHelmFileParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceHelmFileParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusHistorySourceHelmFileParameters)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceHelmFileParametersArrayOutput) ToApplicationStatusHistorySourceHelmFileParametersArrayOutput() ApplicationStatusHistorySourceHelmFileParametersArrayOutput {
	return o
}

func (o ApplicationStatusHistorySourceHelmFileParametersArrayOutput) ToApplicationStatusHistorySourceHelmFileParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceHelmFileParametersArrayOutput {
	return o
}

func (o ApplicationStatusHistorySourceHelmFileParametersArrayOutput) Index(i pulumi.IntInput) ApplicationStatusHistorySourceHelmFileParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusHistorySourceHelmFileParameters {
		return vs[0].([]ApplicationStatusHistorySourceHelmFileParameters)[vs[1].(int)]
	}).(ApplicationStatusHistorySourceHelmFileParametersOutput)
}

// HelmParameter is a parameter to a helm template
type ApplicationStatusHistorySourceHelmParameters struct {
	// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
	ForceString *bool `pulumi:"forceString"`
	// Name is the name of the helm parameter
	Name *string `pulumi:"name"`
	// Value is the value for the helm parameter
	Value *string `pulumi:"value"`
}

// ApplicationStatusHistorySourceHelmParametersInput is an input type that accepts ApplicationStatusHistorySourceHelmParametersArgs and ApplicationStatusHistorySourceHelmParametersOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceHelmParametersInput` via:
//
//          ApplicationStatusHistorySourceHelmParametersArgs{...}
type ApplicationStatusHistorySourceHelmParametersInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceHelmParametersOutput() ApplicationStatusHistorySourceHelmParametersOutput
	ToApplicationStatusHistorySourceHelmParametersOutputWithContext(context.Context) ApplicationStatusHistorySourceHelmParametersOutput
}

// HelmParameter is a parameter to a helm template
type ApplicationStatusHistorySourceHelmParametersArgs struct {
	// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
	ForceString pulumi.BoolPtrInput `pulumi:"forceString"`
	// Name is the name of the helm parameter
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value for the helm parameter
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApplicationStatusHistorySourceHelmParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceHelmParameters)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceHelmParametersArgs) ToApplicationStatusHistorySourceHelmParametersOutput() ApplicationStatusHistorySourceHelmParametersOutput {
	return i.ToApplicationStatusHistorySourceHelmParametersOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceHelmParametersArgs) ToApplicationStatusHistorySourceHelmParametersOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceHelmParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceHelmParametersOutput)
}

// ApplicationStatusHistorySourceHelmParametersArrayInput is an input type that accepts ApplicationStatusHistorySourceHelmParametersArray and ApplicationStatusHistorySourceHelmParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceHelmParametersArrayInput` via:
//
//          ApplicationStatusHistorySourceHelmParametersArray{ ApplicationStatusHistorySourceHelmParametersArgs{...} }
type ApplicationStatusHistorySourceHelmParametersArrayInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceHelmParametersArrayOutput() ApplicationStatusHistorySourceHelmParametersArrayOutput
	ToApplicationStatusHistorySourceHelmParametersArrayOutputWithContext(context.Context) ApplicationStatusHistorySourceHelmParametersArrayOutput
}

type ApplicationStatusHistorySourceHelmParametersArray []ApplicationStatusHistorySourceHelmParametersInput

func (ApplicationStatusHistorySourceHelmParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusHistorySourceHelmParameters)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceHelmParametersArray) ToApplicationStatusHistorySourceHelmParametersArrayOutput() ApplicationStatusHistorySourceHelmParametersArrayOutput {
	return i.ToApplicationStatusHistorySourceHelmParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceHelmParametersArray) ToApplicationStatusHistorySourceHelmParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceHelmParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceHelmParametersArrayOutput)
}

// HelmParameter is a parameter to a helm template
type ApplicationStatusHistorySourceHelmParametersOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceHelmParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceHelmParameters)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceHelmParametersOutput) ToApplicationStatusHistorySourceHelmParametersOutput() ApplicationStatusHistorySourceHelmParametersOutput {
	return o
}

func (o ApplicationStatusHistorySourceHelmParametersOutput) ToApplicationStatusHistorySourceHelmParametersOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceHelmParametersOutput {
	return o
}

// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
func (o ApplicationStatusHistorySourceHelmParametersOutput) ForceString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceHelmParameters) *bool { return v.ForceString }).(pulumi.BoolPtrOutput)
}

// Name is the name of the helm parameter
func (o ApplicationStatusHistorySourceHelmParametersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceHelmParameters) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value for the helm parameter
func (o ApplicationStatusHistorySourceHelmParametersOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceHelmParameters) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationStatusHistorySourceHelmParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceHelmParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusHistorySourceHelmParameters)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceHelmParametersArrayOutput) ToApplicationStatusHistorySourceHelmParametersArrayOutput() ApplicationStatusHistorySourceHelmParametersArrayOutput {
	return o
}

func (o ApplicationStatusHistorySourceHelmParametersArrayOutput) ToApplicationStatusHistorySourceHelmParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceHelmParametersArrayOutput {
	return o
}

func (o ApplicationStatusHistorySourceHelmParametersArrayOutput) Index(i pulumi.IntInput) ApplicationStatusHistorySourceHelmParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusHistorySourceHelmParameters {
		return vs[0].([]ApplicationStatusHistorySourceHelmParameters)[vs[1].(int)]
	}).(ApplicationStatusHistorySourceHelmParametersOutput)
}

// Ksonnet holds ksonnet specific options
type ApplicationStatusHistorySourceKsonnet struct {
	// Environment is a ksonnet application environment name
	Environment *string `pulumi:"environment"`
	// Parameters are a list of ksonnet component parameter override values
	Parameters []ApplicationStatusHistorySourceKsonnetParameters `pulumi:"parameters"`
}

// ApplicationStatusHistorySourceKsonnetInput is an input type that accepts ApplicationStatusHistorySourceKsonnetArgs and ApplicationStatusHistorySourceKsonnetOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceKsonnetInput` via:
//
//          ApplicationStatusHistorySourceKsonnetArgs{...}
type ApplicationStatusHistorySourceKsonnetInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceKsonnetOutput() ApplicationStatusHistorySourceKsonnetOutput
	ToApplicationStatusHistorySourceKsonnetOutputWithContext(context.Context) ApplicationStatusHistorySourceKsonnetOutput
}

// Ksonnet holds ksonnet specific options
type ApplicationStatusHistorySourceKsonnetArgs struct {
	// Environment is a ksonnet application environment name
	Environment pulumi.StringPtrInput `pulumi:"environment"`
	// Parameters are a list of ksonnet component parameter override values
	Parameters ApplicationStatusHistorySourceKsonnetParametersArrayInput `pulumi:"parameters"`
}

func (ApplicationStatusHistorySourceKsonnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceKsonnet)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceKsonnetArgs) ToApplicationStatusHistorySourceKsonnetOutput() ApplicationStatusHistorySourceKsonnetOutput {
	return i.ToApplicationStatusHistorySourceKsonnetOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceKsonnetArgs) ToApplicationStatusHistorySourceKsonnetOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKsonnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceKsonnetOutput)
}

func (i ApplicationStatusHistorySourceKsonnetArgs) ToApplicationStatusHistorySourceKsonnetPtrOutput() ApplicationStatusHistorySourceKsonnetPtrOutput {
	return i.ToApplicationStatusHistorySourceKsonnetPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceKsonnetArgs) ToApplicationStatusHistorySourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceKsonnetOutput).ToApplicationStatusHistorySourceKsonnetPtrOutputWithContext(ctx)
}

// ApplicationStatusHistorySourceKsonnetPtrInput is an input type that accepts ApplicationStatusHistorySourceKsonnetArgs, ApplicationStatusHistorySourceKsonnetPtr and ApplicationStatusHistorySourceKsonnetPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceKsonnetPtrInput` via:
//
//          ApplicationStatusHistorySourceKsonnetArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusHistorySourceKsonnetPtrInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceKsonnetPtrOutput() ApplicationStatusHistorySourceKsonnetPtrOutput
	ToApplicationStatusHistorySourceKsonnetPtrOutputWithContext(context.Context) ApplicationStatusHistorySourceKsonnetPtrOutput
}

type applicationStatusHistorySourceKsonnetPtrType ApplicationStatusHistorySourceKsonnetArgs

func ApplicationStatusHistorySourceKsonnetPtr(v *ApplicationStatusHistorySourceKsonnetArgs) ApplicationStatusHistorySourceKsonnetPtrInput {
	return (*applicationStatusHistorySourceKsonnetPtrType)(v)
}

func (*applicationStatusHistorySourceKsonnetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusHistorySourceKsonnet)(nil)).Elem()
}

func (i *applicationStatusHistorySourceKsonnetPtrType) ToApplicationStatusHistorySourceKsonnetPtrOutput() ApplicationStatusHistorySourceKsonnetPtrOutput {
	return i.ToApplicationStatusHistorySourceKsonnetPtrOutputWithContext(context.Background())
}

func (i *applicationStatusHistorySourceKsonnetPtrType) ToApplicationStatusHistorySourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceKsonnetPtrOutput)
}

// Ksonnet holds ksonnet specific options
type ApplicationStatusHistorySourceKsonnetOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceKsonnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceKsonnet)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceKsonnetOutput) ToApplicationStatusHistorySourceKsonnetOutput() ApplicationStatusHistorySourceKsonnetOutput {
	return o
}

func (o ApplicationStatusHistorySourceKsonnetOutput) ToApplicationStatusHistorySourceKsonnetOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKsonnetOutput {
	return o
}

func (o ApplicationStatusHistorySourceKsonnetOutput) ToApplicationStatusHistorySourceKsonnetPtrOutput() ApplicationStatusHistorySourceKsonnetPtrOutput {
	return o.ToApplicationStatusHistorySourceKsonnetPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusHistorySourceKsonnetOutput) ToApplicationStatusHistorySourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceKsonnet) *ApplicationStatusHistorySourceKsonnet {
		return &v
	}).(ApplicationStatusHistorySourceKsonnetPtrOutput)
}

// Environment is a ksonnet application environment name
func (o ApplicationStatusHistorySourceKsonnetOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceKsonnet) *string { return v.Environment }).(pulumi.StringPtrOutput)
}

// Parameters are a list of ksonnet component parameter override values
func (o ApplicationStatusHistorySourceKsonnetOutput) Parameters() ApplicationStatusHistorySourceKsonnetParametersArrayOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceKsonnet) []ApplicationStatusHistorySourceKsonnetParameters {
		return v.Parameters
	}).(ApplicationStatusHistorySourceKsonnetParametersArrayOutput)
}

type ApplicationStatusHistorySourceKsonnetPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceKsonnetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusHistorySourceKsonnet)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceKsonnetPtrOutput) ToApplicationStatusHistorySourceKsonnetPtrOutput() ApplicationStatusHistorySourceKsonnetPtrOutput {
	return o
}

func (o ApplicationStatusHistorySourceKsonnetPtrOutput) ToApplicationStatusHistorySourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKsonnetPtrOutput {
	return o
}

func (o ApplicationStatusHistorySourceKsonnetPtrOutput) Elem() ApplicationStatusHistorySourceKsonnetOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceKsonnet) ApplicationStatusHistorySourceKsonnet { return *v }).(ApplicationStatusHistorySourceKsonnetOutput)
}

// Environment is a ksonnet application environment name
func (o ApplicationStatusHistorySourceKsonnetPtrOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceKsonnet) *string {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.StringPtrOutput)
}

// Parameters are a list of ksonnet component parameter override values
func (o ApplicationStatusHistorySourceKsonnetPtrOutput) Parameters() ApplicationStatusHistorySourceKsonnetParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceKsonnet) []ApplicationStatusHistorySourceKsonnetParameters {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ApplicationStatusHistorySourceKsonnetParametersArrayOutput)
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationStatusHistorySourceKsonnetParameters struct {
	Component *string `pulumi:"component"`
	Name      string  `pulumi:"name"`
	Value     string  `pulumi:"value"`
}

// ApplicationStatusHistorySourceKsonnetParametersInput is an input type that accepts ApplicationStatusHistorySourceKsonnetParametersArgs and ApplicationStatusHistorySourceKsonnetParametersOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceKsonnetParametersInput` via:
//
//          ApplicationStatusHistorySourceKsonnetParametersArgs{...}
type ApplicationStatusHistorySourceKsonnetParametersInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceKsonnetParametersOutput() ApplicationStatusHistorySourceKsonnetParametersOutput
	ToApplicationStatusHistorySourceKsonnetParametersOutputWithContext(context.Context) ApplicationStatusHistorySourceKsonnetParametersOutput
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationStatusHistorySourceKsonnetParametersArgs struct {
	Component pulumi.StringPtrInput `pulumi:"component"`
	Name      pulumi.StringInput    `pulumi:"name"`
	Value     pulumi.StringInput    `pulumi:"value"`
}

func (ApplicationStatusHistorySourceKsonnetParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceKsonnetParameters)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceKsonnetParametersArgs) ToApplicationStatusHistorySourceKsonnetParametersOutput() ApplicationStatusHistorySourceKsonnetParametersOutput {
	return i.ToApplicationStatusHistorySourceKsonnetParametersOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceKsonnetParametersArgs) ToApplicationStatusHistorySourceKsonnetParametersOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKsonnetParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceKsonnetParametersOutput)
}

// ApplicationStatusHistorySourceKsonnetParametersArrayInput is an input type that accepts ApplicationStatusHistorySourceKsonnetParametersArray and ApplicationStatusHistorySourceKsonnetParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceKsonnetParametersArrayInput` via:
//
//          ApplicationStatusHistorySourceKsonnetParametersArray{ ApplicationStatusHistorySourceKsonnetParametersArgs{...} }
type ApplicationStatusHistorySourceKsonnetParametersArrayInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceKsonnetParametersArrayOutput() ApplicationStatusHistorySourceKsonnetParametersArrayOutput
	ToApplicationStatusHistorySourceKsonnetParametersArrayOutputWithContext(context.Context) ApplicationStatusHistorySourceKsonnetParametersArrayOutput
}

type ApplicationStatusHistorySourceKsonnetParametersArray []ApplicationStatusHistorySourceKsonnetParametersInput

func (ApplicationStatusHistorySourceKsonnetParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusHistorySourceKsonnetParameters)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceKsonnetParametersArray) ToApplicationStatusHistorySourceKsonnetParametersArrayOutput() ApplicationStatusHistorySourceKsonnetParametersArrayOutput {
	return i.ToApplicationStatusHistorySourceKsonnetParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceKsonnetParametersArray) ToApplicationStatusHistorySourceKsonnetParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKsonnetParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceKsonnetParametersArrayOutput)
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationStatusHistorySourceKsonnetParametersOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceKsonnetParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceKsonnetParameters)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceKsonnetParametersOutput) ToApplicationStatusHistorySourceKsonnetParametersOutput() ApplicationStatusHistorySourceKsonnetParametersOutput {
	return o
}

func (o ApplicationStatusHistorySourceKsonnetParametersOutput) ToApplicationStatusHistorySourceKsonnetParametersOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKsonnetParametersOutput {
	return o
}

func (o ApplicationStatusHistorySourceKsonnetParametersOutput) Component() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceKsonnetParameters) *string { return v.Component }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusHistorySourceKsonnetParametersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceKsonnetParameters) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusHistorySourceKsonnetParametersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceKsonnetParameters) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationStatusHistorySourceKsonnetParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceKsonnetParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusHistorySourceKsonnetParameters)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceKsonnetParametersArrayOutput) ToApplicationStatusHistorySourceKsonnetParametersArrayOutput() ApplicationStatusHistorySourceKsonnetParametersArrayOutput {
	return o
}

func (o ApplicationStatusHistorySourceKsonnetParametersArrayOutput) ToApplicationStatusHistorySourceKsonnetParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKsonnetParametersArrayOutput {
	return o
}

func (o ApplicationStatusHistorySourceKsonnetParametersArrayOutput) Index(i pulumi.IntInput) ApplicationStatusHistorySourceKsonnetParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusHistorySourceKsonnetParameters {
		return vs[0].([]ApplicationStatusHistorySourceKsonnetParameters)[vs[1].(int)]
	}).(ApplicationStatusHistorySourceKsonnetParametersOutput)
}

// Kustomize holds kustomize specific options
type ApplicationStatusHistorySourceKustomize struct {
	// CommonLabels adds additional kustomize commonLabels
	CommonLabels map[string]string `pulumi:"commonLabels"`
	// Images are kustomize image overrides
	Images []string `pulumi:"images"`
	// NamePrefix is a prefix appended to resources for kustomize apps
	NamePrefix *string `pulumi:"namePrefix"`
	// NameSuffix is a suffix appended to resources for kustomize apps
	NameSuffix *string `pulumi:"nameSuffix"`
	// Version contains optional Kustomize version
	Version *string `pulumi:"version"`
}

// ApplicationStatusHistorySourceKustomizeInput is an input type that accepts ApplicationStatusHistorySourceKustomizeArgs and ApplicationStatusHistorySourceKustomizeOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceKustomizeInput` via:
//
//          ApplicationStatusHistorySourceKustomizeArgs{...}
type ApplicationStatusHistorySourceKustomizeInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceKustomizeOutput() ApplicationStatusHistorySourceKustomizeOutput
	ToApplicationStatusHistorySourceKustomizeOutputWithContext(context.Context) ApplicationStatusHistorySourceKustomizeOutput
}

// Kustomize holds kustomize specific options
type ApplicationStatusHistorySourceKustomizeArgs struct {
	// CommonLabels adds additional kustomize commonLabels
	CommonLabels pulumi.StringMapInput `pulumi:"commonLabels"`
	// Images are kustomize image overrides
	Images pulumi.StringArrayInput `pulumi:"images"`
	// NamePrefix is a prefix appended to resources for kustomize apps
	NamePrefix pulumi.StringPtrInput `pulumi:"namePrefix"`
	// NameSuffix is a suffix appended to resources for kustomize apps
	NameSuffix pulumi.StringPtrInput `pulumi:"nameSuffix"`
	// Version contains optional Kustomize version
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApplicationStatusHistorySourceKustomizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceKustomize)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceKustomizeArgs) ToApplicationStatusHistorySourceKustomizeOutput() ApplicationStatusHistorySourceKustomizeOutput {
	return i.ToApplicationStatusHistorySourceKustomizeOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceKustomizeArgs) ToApplicationStatusHistorySourceKustomizeOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKustomizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceKustomizeOutput)
}

func (i ApplicationStatusHistorySourceKustomizeArgs) ToApplicationStatusHistorySourceKustomizePtrOutput() ApplicationStatusHistorySourceKustomizePtrOutput {
	return i.ToApplicationStatusHistorySourceKustomizePtrOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceKustomizeArgs) ToApplicationStatusHistorySourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceKustomizeOutput).ToApplicationStatusHistorySourceKustomizePtrOutputWithContext(ctx)
}

// ApplicationStatusHistorySourceKustomizePtrInput is an input type that accepts ApplicationStatusHistorySourceKustomizeArgs, ApplicationStatusHistorySourceKustomizePtr and ApplicationStatusHistorySourceKustomizePtrOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceKustomizePtrInput` via:
//
//          ApplicationStatusHistorySourceKustomizeArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusHistorySourceKustomizePtrInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceKustomizePtrOutput() ApplicationStatusHistorySourceKustomizePtrOutput
	ToApplicationStatusHistorySourceKustomizePtrOutputWithContext(context.Context) ApplicationStatusHistorySourceKustomizePtrOutput
}

type applicationStatusHistorySourceKustomizePtrType ApplicationStatusHistorySourceKustomizeArgs

func ApplicationStatusHistorySourceKustomizePtr(v *ApplicationStatusHistorySourceKustomizeArgs) ApplicationStatusHistorySourceKustomizePtrInput {
	return (*applicationStatusHistorySourceKustomizePtrType)(v)
}

func (*applicationStatusHistorySourceKustomizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusHistorySourceKustomize)(nil)).Elem()
}

func (i *applicationStatusHistorySourceKustomizePtrType) ToApplicationStatusHistorySourceKustomizePtrOutput() ApplicationStatusHistorySourceKustomizePtrOutput {
	return i.ToApplicationStatusHistorySourceKustomizePtrOutputWithContext(context.Background())
}

func (i *applicationStatusHistorySourceKustomizePtrType) ToApplicationStatusHistorySourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceKustomizePtrOutput)
}

// Kustomize holds kustomize specific options
type ApplicationStatusHistorySourceKustomizeOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceKustomizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceKustomize)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceKustomizeOutput) ToApplicationStatusHistorySourceKustomizeOutput() ApplicationStatusHistorySourceKustomizeOutput {
	return o
}

func (o ApplicationStatusHistorySourceKustomizeOutput) ToApplicationStatusHistorySourceKustomizeOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKustomizeOutput {
	return o
}

func (o ApplicationStatusHistorySourceKustomizeOutput) ToApplicationStatusHistorySourceKustomizePtrOutput() ApplicationStatusHistorySourceKustomizePtrOutput {
	return o.ToApplicationStatusHistorySourceKustomizePtrOutputWithContext(context.Background())
}

func (o ApplicationStatusHistorySourceKustomizeOutput) ToApplicationStatusHistorySourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKustomizePtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceKustomize) *ApplicationStatusHistorySourceKustomize {
		return &v
	}).(ApplicationStatusHistorySourceKustomizePtrOutput)
}

// CommonLabels adds additional kustomize commonLabels
func (o ApplicationStatusHistorySourceKustomizeOutput) CommonLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceKustomize) map[string]string { return v.CommonLabels }).(pulumi.StringMapOutput)
}

// Images are kustomize image overrides
func (o ApplicationStatusHistorySourceKustomizeOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceKustomize) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// NamePrefix is a prefix appended to resources for kustomize apps
func (o ApplicationStatusHistorySourceKustomizeOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceKustomize) *string { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

// NameSuffix is a suffix appended to resources for kustomize apps
func (o ApplicationStatusHistorySourceKustomizeOutput) NameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceKustomize) *string { return v.NameSuffix }).(pulumi.StringPtrOutput)
}

// Version contains optional Kustomize version
func (o ApplicationStatusHistorySourceKustomizeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourceKustomize) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApplicationStatusHistorySourceKustomizePtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceKustomizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusHistorySourceKustomize)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceKustomizePtrOutput) ToApplicationStatusHistorySourceKustomizePtrOutput() ApplicationStatusHistorySourceKustomizePtrOutput {
	return o
}

func (o ApplicationStatusHistorySourceKustomizePtrOutput) ToApplicationStatusHistorySourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKustomizePtrOutput {
	return o
}

func (o ApplicationStatusHistorySourceKustomizePtrOutput) Elem() ApplicationStatusHistorySourceKustomizeOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceKustomize) ApplicationStatusHistorySourceKustomize { return *v }).(ApplicationStatusHistorySourceKustomizeOutput)
}

// CommonLabels adds additional kustomize commonLabels
func (o ApplicationStatusHistorySourceKustomizePtrOutput) CommonLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceKustomize) map[string]string {
		if v == nil {
			return nil
		}
		return v.CommonLabels
	}).(pulumi.StringMapOutput)
}

// Images are kustomize image overrides
func (o ApplicationStatusHistorySourceKustomizePtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceKustomize) []string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringArrayOutput)
}

// NamePrefix is a prefix appended to resources for kustomize apps
func (o ApplicationStatusHistorySourceKustomizePtrOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.NamePrefix
	}).(pulumi.StringPtrOutput)
}

// NameSuffix is a suffix appended to resources for kustomize apps
func (o ApplicationStatusHistorySourceKustomizePtrOutput) NameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.NameSuffix
	}).(pulumi.StringPtrOutput)
}

// Version contains optional Kustomize version
func (o ApplicationStatusHistorySourceKustomizePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationStatusHistorySourceKustomizeCommonLabels struct {
}

// ApplicationStatusHistorySourceKustomizeCommonLabelsInput is an input type that accepts ApplicationStatusHistorySourceKustomizeCommonLabelsArgs and ApplicationStatusHistorySourceKustomizeCommonLabelsOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourceKustomizeCommonLabelsInput` via:
//
//          ApplicationStatusHistorySourceKustomizeCommonLabelsArgs{...}
type ApplicationStatusHistorySourceKustomizeCommonLabelsInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourceKustomizeCommonLabelsOutput() ApplicationStatusHistorySourceKustomizeCommonLabelsOutput
	ToApplicationStatusHistorySourceKustomizeCommonLabelsOutputWithContext(context.Context) ApplicationStatusHistorySourceKustomizeCommonLabelsOutput
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationStatusHistorySourceKustomizeCommonLabelsArgs struct {
}

func (ApplicationStatusHistorySourceKustomizeCommonLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceKustomizeCommonLabels)(nil)).Elem()
}

func (i ApplicationStatusHistorySourceKustomizeCommonLabelsArgs) ToApplicationStatusHistorySourceKustomizeCommonLabelsOutput() ApplicationStatusHistorySourceKustomizeCommonLabelsOutput {
	return i.ToApplicationStatusHistorySourceKustomizeCommonLabelsOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourceKustomizeCommonLabelsArgs) ToApplicationStatusHistorySourceKustomizeCommonLabelsOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKustomizeCommonLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourceKustomizeCommonLabelsOutput)
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationStatusHistorySourceKustomizeCommonLabelsOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourceKustomizeCommonLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourceKustomizeCommonLabels)(nil)).Elem()
}

func (o ApplicationStatusHistorySourceKustomizeCommonLabelsOutput) ToApplicationStatusHistorySourceKustomizeCommonLabelsOutput() ApplicationStatusHistorySourceKustomizeCommonLabelsOutput {
	return o
}

func (o ApplicationStatusHistorySourceKustomizeCommonLabelsOutput) ToApplicationStatusHistorySourceKustomizeCommonLabelsOutputWithContext(ctx context.Context) ApplicationStatusHistorySourceKustomizeCommonLabelsOutput {
	return o
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationStatusHistorySourcePlugin struct {
	Env  []ApplicationStatusHistorySourcePluginEnv `pulumi:"env"`
	Name *string                                   `pulumi:"name"`
}

// ApplicationStatusHistorySourcePluginInput is an input type that accepts ApplicationStatusHistorySourcePluginArgs and ApplicationStatusHistorySourcePluginOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourcePluginInput` via:
//
//          ApplicationStatusHistorySourcePluginArgs{...}
type ApplicationStatusHistorySourcePluginInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourcePluginOutput() ApplicationStatusHistorySourcePluginOutput
	ToApplicationStatusHistorySourcePluginOutputWithContext(context.Context) ApplicationStatusHistorySourcePluginOutput
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationStatusHistorySourcePluginArgs struct {
	Env  ApplicationStatusHistorySourcePluginEnvArrayInput `pulumi:"env"`
	Name pulumi.StringPtrInput                             `pulumi:"name"`
}

func (ApplicationStatusHistorySourcePluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourcePlugin)(nil)).Elem()
}

func (i ApplicationStatusHistorySourcePluginArgs) ToApplicationStatusHistorySourcePluginOutput() ApplicationStatusHistorySourcePluginOutput {
	return i.ToApplicationStatusHistorySourcePluginOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourcePluginArgs) ToApplicationStatusHistorySourcePluginOutputWithContext(ctx context.Context) ApplicationStatusHistorySourcePluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourcePluginOutput)
}

func (i ApplicationStatusHistorySourcePluginArgs) ToApplicationStatusHistorySourcePluginPtrOutput() ApplicationStatusHistorySourcePluginPtrOutput {
	return i.ToApplicationStatusHistorySourcePluginPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourcePluginArgs) ToApplicationStatusHistorySourcePluginPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourcePluginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourcePluginOutput).ToApplicationStatusHistorySourcePluginPtrOutputWithContext(ctx)
}

// ApplicationStatusHistorySourcePluginPtrInput is an input type that accepts ApplicationStatusHistorySourcePluginArgs, ApplicationStatusHistorySourcePluginPtr and ApplicationStatusHistorySourcePluginPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourcePluginPtrInput` via:
//
//          ApplicationStatusHistorySourcePluginArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusHistorySourcePluginPtrInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourcePluginPtrOutput() ApplicationStatusHistorySourcePluginPtrOutput
	ToApplicationStatusHistorySourcePluginPtrOutputWithContext(context.Context) ApplicationStatusHistorySourcePluginPtrOutput
}

type applicationStatusHistorySourcePluginPtrType ApplicationStatusHistorySourcePluginArgs

func ApplicationStatusHistorySourcePluginPtr(v *ApplicationStatusHistorySourcePluginArgs) ApplicationStatusHistorySourcePluginPtrInput {
	return (*applicationStatusHistorySourcePluginPtrType)(v)
}

func (*applicationStatusHistorySourcePluginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusHistorySourcePlugin)(nil)).Elem()
}

func (i *applicationStatusHistorySourcePluginPtrType) ToApplicationStatusHistorySourcePluginPtrOutput() ApplicationStatusHistorySourcePluginPtrOutput {
	return i.ToApplicationStatusHistorySourcePluginPtrOutputWithContext(context.Background())
}

func (i *applicationStatusHistorySourcePluginPtrType) ToApplicationStatusHistorySourcePluginPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourcePluginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourcePluginPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationStatusHistorySourcePluginOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourcePluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourcePlugin)(nil)).Elem()
}

func (o ApplicationStatusHistorySourcePluginOutput) ToApplicationStatusHistorySourcePluginOutput() ApplicationStatusHistorySourcePluginOutput {
	return o
}

func (o ApplicationStatusHistorySourcePluginOutput) ToApplicationStatusHistorySourcePluginOutputWithContext(ctx context.Context) ApplicationStatusHistorySourcePluginOutput {
	return o
}

func (o ApplicationStatusHistorySourcePluginOutput) ToApplicationStatusHistorySourcePluginPtrOutput() ApplicationStatusHistorySourcePluginPtrOutput {
	return o.ToApplicationStatusHistorySourcePluginPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusHistorySourcePluginOutput) ToApplicationStatusHistorySourcePluginPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourcePluginPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourcePlugin) *ApplicationStatusHistorySourcePlugin {
		return &v
	}).(ApplicationStatusHistorySourcePluginPtrOutput)
}
func (o ApplicationStatusHistorySourcePluginOutput) Env() ApplicationStatusHistorySourcePluginEnvArrayOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourcePlugin) []ApplicationStatusHistorySourcePluginEnv { return v.Env }).(ApplicationStatusHistorySourcePluginEnvArrayOutput)
}

func (o ApplicationStatusHistorySourcePluginOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourcePlugin) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ApplicationStatusHistorySourcePluginPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourcePluginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusHistorySourcePlugin)(nil)).Elem()
}

func (o ApplicationStatusHistorySourcePluginPtrOutput) ToApplicationStatusHistorySourcePluginPtrOutput() ApplicationStatusHistorySourcePluginPtrOutput {
	return o
}

func (o ApplicationStatusHistorySourcePluginPtrOutput) ToApplicationStatusHistorySourcePluginPtrOutputWithContext(ctx context.Context) ApplicationStatusHistorySourcePluginPtrOutput {
	return o
}

func (o ApplicationStatusHistorySourcePluginPtrOutput) Elem() ApplicationStatusHistorySourcePluginOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourcePlugin) ApplicationStatusHistorySourcePlugin { return *v }).(ApplicationStatusHistorySourcePluginOutput)
}

func (o ApplicationStatusHistorySourcePluginPtrOutput) Env() ApplicationStatusHistorySourcePluginEnvArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourcePlugin) []ApplicationStatusHistorySourcePluginEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(ApplicationStatusHistorySourcePluginEnvArrayOutput)
}

func (o ApplicationStatusHistorySourcePluginPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusHistorySourcePlugin) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type ApplicationStatusHistorySourcePluginEnv struct {
	// the name, usually uppercase
	Name string `pulumi:"name"`
	// the value
	Value string `pulumi:"value"`
}

// ApplicationStatusHistorySourcePluginEnvInput is an input type that accepts ApplicationStatusHistorySourcePluginEnvArgs and ApplicationStatusHistorySourcePluginEnvOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourcePluginEnvInput` via:
//
//          ApplicationStatusHistorySourcePluginEnvArgs{...}
type ApplicationStatusHistorySourcePluginEnvInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourcePluginEnvOutput() ApplicationStatusHistorySourcePluginEnvOutput
	ToApplicationStatusHistorySourcePluginEnvOutputWithContext(context.Context) ApplicationStatusHistorySourcePluginEnvOutput
}

type ApplicationStatusHistorySourcePluginEnvArgs struct {
	// the name, usually uppercase
	Name pulumi.StringInput `pulumi:"name"`
	// the value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApplicationStatusHistorySourcePluginEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourcePluginEnv)(nil)).Elem()
}

func (i ApplicationStatusHistorySourcePluginEnvArgs) ToApplicationStatusHistorySourcePluginEnvOutput() ApplicationStatusHistorySourcePluginEnvOutput {
	return i.ToApplicationStatusHistorySourcePluginEnvOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourcePluginEnvArgs) ToApplicationStatusHistorySourcePluginEnvOutputWithContext(ctx context.Context) ApplicationStatusHistorySourcePluginEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourcePluginEnvOutput)
}

// ApplicationStatusHistorySourcePluginEnvArrayInput is an input type that accepts ApplicationStatusHistorySourcePluginEnvArray and ApplicationStatusHistorySourcePluginEnvArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusHistorySourcePluginEnvArrayInput` via:
//
//          ApplicationStatusHistorySourcePluginEnvArray{ ApplicationStatusHistorySourcePluginEnvArgs{...} }
type ApplicationStatusHistorySourcePluginEnvArrayInput interface {
	pulumi.Input

	ToApplicationStatusHistorySourcePluginEnvArrayOutput() ApplicationStatusHistorySourcePluginEnvArrayOutput
	ToApplicationStatusHistorySourcePluginEnvArrayOutputWithContext(context.Context) ApplicationStatusHistorySourcePluginEnvArrayOutput
}

type ApplicationStatusHistorySourcePluginEnvArray []ApplicationStatusHistorySourcePluginEnvInput

func (ApplicationStatusHistorySourcePluginEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusHistorySourcePluginEnv)(nil)).Elem()
}

func (i ApplicationStatusHistorySourcePluginEnvArray) ToApplicationStatusHistorySourcePluginEnvArrayOutput() ApplicationStatusHistorySourcePluginEnvArrayOutput {
	return i.ToApplicationStatusHistorySourcePluginEnvArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusHistorySourcePluginEnvArray) ToApplicationStatusHistorySourcePluginEnvArrayOutputWithContext(ctx context.Context) ApplicationStatusHistorySourcePluginEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusHistorySourcePluginEnvArrayOutput)
}

type ApplicationStatusHistorySourcePluginEnvOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourcePluginEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusHistorySourcePluginEnv)(nil)).Elem()
}

func (o ApplicationStatusHistorySourcePluginEnvOutput) ToApplicationStatusHistorySourcePluginEnvOutput() ApplicationStatusHistorySourcePluginEnvOutput {
	return o
}

func (o ApplicationStatusHistorySourcePluginEnvOutput) ToApplicationStatusHistorySourcePluginEnvOutputWithContext(ctx context.Context) ApplicationStatusHistorySourcePluginEnvOutput {
	return o
}

// the name, usually uppercase
func (o ApplicationStatusHistorySourcePluginEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourcePluginEnv) string { return v.Name }).(pulumi.StringOutput)
}

// the value
func (o ApplicationStatusHistorySourcePluginEnvOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusHistorySourcePluginEnv) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationStatusHistorySourcePluginEnvArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusHistorySourcePluginEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusHistorySourcePluginEnv)(nil)).Elem()
}

func (o ApplicationStatusHistorySourcePluginEnvArrayOutput) ToApplicationStatusHistorySourcePluginEnvArrayOutput() ApplicationStatusHistorySourcePluginEnvArrayOutput {
	return o
}

func (o ApplicationStatusHistorySourcePluginEnvArrayOutput) ToApplicationStatusHistorySourcePluginEnvArrayOutputWithContext(ctx context.Context) ApplicationStatusHistorySourcePluginEnvArrayOutput {
	return o
}

func (o ApplicationStatusHistorySourcePluginEnvArrayOutput) Index(i pulumi.IntInput) ApplicationStatusHistorySourcePluginEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusHistorySourcePluginEnv {
		return vs[0].([]ApplicationStatusHistorySourcePluginEnv)[vs[1].(int)]
	}).(ApplicationStatusHistorySourcePluginEnvOutput)
}

// OperationState contains information about state of currently performing operation on application.
type ApplicationStatusOperationState struct {
	// FinishedAt contains time of operation completion
	FinishedAt *string `pulumi:"finishedAt"`
	// Message hold any pertinent messages when attempting to perform operation (typically errors).
	Message *string `pulumi:"message"`
	// Operation is the original requested operation
	Operation ApplicationStatusOperationStateOperation `pulumi:"operation"`
	// Phase is the current phase of the operation
	Phase string `pulumi:"phase"`
	// RetryCount contains time of operation retries
	RetryCount *int `pulumi:"retryCount"`
	// StartedAt contains time of operation start
	StartedAt string `pulumi:"startedAt"`
	// SyncResult is the result of a Sync operation
	SyncResult *ApplicationStatusOperationStateSyncResult `pulumi:"syncResult"`
}

// ApplicationStatusOperationStateInput is an input type that accepts ApplicationStatusOperationStateArgs and ApplicationStatusOperationStateOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateInput` via:
//
//          ApplicationStatusOperationStateArgs{...}
type ApplicationStatusOperationStateInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOutput() ApplicationStatusOperationStateOutput
	ToApplicationStatusOperationStateOutputWithContext(context.Context) ApplicationStatusOperationStateOutput
}

// OperationState contains information about state of currently performing operation on application.
type ApplicationStatusOperationStateArgs struct {
	// FinishedAt contains time of operation completion
	FinishedAt pulumi.StringPtrInput `pulumi:"finishedAt"`
	// Message hold any pertinent messages when attempting to perform operation (typically errors).
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Operation is the original requested operation
	Operation ApplicationStatusOperationStateOperationInput `pulumi:"operation"`
	// Phase is the current phase of the operation
	Phase pulumi.StringInput `pulumi:"phase"`
	// RetryCount contains time of operation retries
	RetryCount pulumi.IntPtrInput `pulumi:"retryCount"`
	// StartedAt contains time of operation start
	StartedAt pulumi.StringInput `pulumi:"startedAt"`
	// SyncResult is the result of a Sync operation
	SyncResult ApplicationStatusOperationStateSyncResultPtrInput `pulumi:"syncResult"`
}

func (ApplicationStatusOperationStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationState)(nil)).Elem()
}

func (i ApplicationStatusOperationStateArgs) ToApplicationStatusOperationStateOutput() ApplicationStatusOperationStateOutput {
	return i.ToApplicationStatusOperationStateOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateArgs) ToApplicationStatusOperationStateOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOutput)
}

func (i ApplicationStatusOperationStateArgs) ToApplicationStatusOperationStatePtrOutput() ApplicationStatusOperationStatePtrOutput {
	return i.ToApplicationStatusOperationStatePtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateArgs) ToApplicationStatusOperationStatePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOutput).ToApplicationStatusOperationStatePtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStatePtrInput is an input type that accepts ApplicationStatusOperationStateArgs, ApplicationStatusOperationStatePtr and ApplicationStatusOperationStatePtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStatePtrInput` via:
//
//          ApplicationStatusOperationStateArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStatePtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStatePtrOutput() ApplicationStatusOperationStatePtrOutput
	ToApplicationStatusOperationStatePtrOutputWithContext(context.Context) ApplicationStatusOperationStatePtrOutput
}

type applicationStatusOperationStatePtrType ApplicationStatusOperationStateArgs

func ApplicationStatusOperationStatePtr(v *ApplicationStatusOperationStateArgs) ApplicationStatusOperationStatePtrInput {
	return (*applicationStatusOperationStatePtrType)(v)
}

func (*applicationStatusOperationStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationState)(nil)).Elem()
}

func (i *applicationStatusOperationStatePtrType) ToApplicationStatusOperationStatePtrOutput() ApplicationStatusOperationStatePtrOutput {
	return i.ToApplicationStatusOperationStatePtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStatePtrType) ToApplicationStatusOperationStatePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStatePtrOutput)
}

// OperationState contains information about state of currently performing operation on application.
type ApplicationStatusOperationStateOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationState)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOutput) ToApplicationStatusOperationStateOutput() ApplicationStatusOperationStateOutput {
	return o
}

func (o ApplicationStatusOperationStateOutput) ToApplicationStatusOperationStateOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOutput {
	return o
}

func (o ApplicationStatusOperationStateOutput) ToApplicationStatusOperationStatePtrOutput() ApplicationStatusOperationStatePtrOutput {
	return o.ToApplicationStatusOperationStatePtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateOutput) ToApplicationStatusOperationStatePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStatePtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationState) *ApplicationStatusOperationState {
		return &v
	}).(ApplicationStatusOperationStatePtrOutput)
}

// FinishedAt contains time of operation completion
func (o ApplicationStatusOperationStateOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationState) *string { return v.FinishedAt }).(pulumi.StringPtrOutput)
}

// Message hold any pertinent messages when attempting to perform operation (typically errors).
func (o ApplicationStatusOperationStateOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationState) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Operation is the original requested operation
func (o ApplicationStatusOperationStateOutput) Operation() ApplicationStatusOperationStateOperationOutput {
	return o.ApplyT(func(v ApplicationStatusOperationState) ApplicationStatusOperationStateOperation { return v.Operation }).(ApplicationStatusOperationStateOperationOutput)
}

// Phase is the current phase of the operation
func (o ApplicationStatusOperationStateOutput) Phase() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationState) string { return v.Phase }).(pulumi.StringOutput)
}

// RetryCount contains time of operation retries
func (o ApplicationStatusOperationStateOutput) RetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationState) *int { return v.RetryCount }).(pulumi.IntPtrOutput)
}

// StartedAt contains time of operation start
func (o ApplicationStatusOperationStateOutput) StartedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationState) string { return v.StartedAt }).(pulumi.StringOutput)
}

// SyncResult is the result of a Sync operation
func (o ApplicationStatusOperationStateOutput) SyncResult() ApplicationStatusOperationStateSyncResultPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationState) *ApplicationStatusOperationStateSyncResult {
		return v.SyncResult
	}).(ApplicationStatusOperationStateSyncResultPtrOutput)
}

type ApplicationStatusOperationStatePtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationState)(nil)).Elem()
}

func (o ApplicationStatusOperationStatePtrOutput) ToApplicationStatusOperationStatePtrOutput() ApplicationStatusOperationStatePtrOutput {
	return o
}

func (o ApplicationStatusOperationStatePtrOutput) ToApplicationStatusOperationStatePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStatePtrOutput {
	return o
}

func (o ApplicationStatusOperationStatePtrOutput) Elem() ApplicationStatusOperationStateOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationState) ApplicationStatusOperationState { return *v }).(ApplicationStatusOperationStateOutput)
}

// FinishedAt contains time of operation completion
func (o ApplicationStatusOperationStatePtrOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationState) *string {
		if v == nil {
			return nil
		}
		return v.FinishedAt
	}).(pulumi.StringPtrOutput)
}

// Message hold any pertinent messages when attempting to perform operation (typically errors).
func (o ApplicationStatusOperationStatePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationState) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Operation is the original requested operation
func (o ApplicationStatusOperationStatePtrOutput) Operation() ApplicationStatusOperationStateOperationPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationState) *ApplicationStatusOperationStateOperation {
		if v == nil {
			return nil
		}
		return &v.Operation
	}).(ApplicationStatusOperationStateOperationPtrOutput)
}

// Phase is the current phase of the operation
func (o ApplicationStatusOperationStatePtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationState) *string {
		if v == nil {
			return nil
		}
		return &v.Phase
	}).(pulumi.StringPtrOutput)
}

// RetryCount contains time of operation retries
func (o ApplicationStatusOperationStatePtrOutput) RetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationState) *int {
		if v == nil {
			return nil
		}
		return v.RetryCount
	}).(pulumi.IntPtrOutput)
}

// StartedAt contains time of operation start
func (o ApplicationStatusOperationStatePtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationState) *string {
		if v == nil {
			return nil
		}
		return &v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// SyncResult is the result of a Sync operation
func (o ApplicationStatusOperationStatePtrOutput) SyncResult() ApplicationStatusOperationStateSyncResultPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationState) *ApplicationStatusOperationStateSyncResult {
		if v == nil {
			return nil
		}
		return v.SyncResult
	}).(ApplicationStatusOperationStateSyncResultPtrOutput)
}

// Operation is the original requested operation
type ApplicationStatusOperationStateOperation struct {
	Info []ApplicationStatusOperationStateOperationInfo `pulumi:"info"`
	// OperationInitiator holds information about the operation initiator
	InitiatedBy *ApplicationStatusOperationStateOperationInitiatedBy `pulumi:"initiatedBy"`
	// Retry controls failed sync retry behavior
	Retry *ApplicationStatusOperationStateOperationRetry `pulumi:"retry"`
	// SyncOperation contains sync operation details.
	Sync *ApplicationStatusOperationStateOperationSync `pulumi:"sync"`
}

// ApplicationStatusOperationStateOperationInput is an input type that accepts ApplicationStatusOperationStateOperationArgs and ApplicationStatusOperationStateOperationOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationInput` via:
//
//          ApplicationStatusOperationStateOperationArgs{...}
type ApplicationStatusOperationStateOperationInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationOutput() ApplicationStatusOperationStateOperationOutput
	ToApplicationStatusOperationStateOperationOutputWithContext(context.Context) ApplicationStatusOperationStateOperationOutput
}

// Operation is the original requested operation
type ApplicationStatusOperationStateOperationArgs struct {
	Info ApplicationStatusOperationStateOperationInfoArrayInput `pulumi:"info"`
	// OperationInitiator holds information about the operation initiator
	InitiatedBy ApplicationStatusOperationStateOperationInitiatedByPtrInput `pulumi:"initiatedBy"`
	// Retry controls failed sync retry behavior
	Retry ApplicationStatusOperationStateOperationRetryPtrInput `pulumi:"retry"`
	// SyncOperation contains sync operation details.
	Sync ApplicationStatusOperationStateOperationSyncPtrInput `pulumi:"sync"`
}

func (ApplicationStatusOperationStateOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperation)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationArgs) ToApplicationStatusOperationStateOperationOutput() ApplicationStatusOperationStateOperationOutput {
	return i.ToApplicationStatusOperationStateOperationOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationArgs) ToApplicationStatusOperationStateOperationOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationOutput)
}

func (i ApplicationStatusOperationStateOperationArgs) ToApplicationStatusOperationStateOperationPtrOutput() ApplicationStatusOperationStateOperationPtrOutput {
	return i.ToApplicationStatusOperationStateOperationPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationArgs) ToApplicationStatusOperationStateOperationPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationOutput).ToApplicationStatusOperationStateOperationPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateOperationPtrInput is an input type that accepts ApplicationStatusOperationStateOperationArgs, ApplicationStatusOperationStateOperationPtr and ApplicationStatusOperationStateOperationPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationPtrInput` via:
//
//          ApplicationStatusOperationStateOperationArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateOperationPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationPtrOutput() ApplicationStatusOperationStateOperationPtrOutput
	ToApplicationStatusOperationStateOperationPtrOutputWithContext(context.Context) ApplicationStatusOperationStateOperationPtrOutput
}

type applicationStatusOperationStateOperationPtrType ApplicationStatusOperationStateOperationArgs

func ApplicationStatusOperationStateOperationPtr(v *ApplicationStatusOperationStateOperationArgs) ApplicationStatusOperationStateOperationPtrInput {
	return (*applicationStatusOperationStateOperationPtrType)(v)
}

func (*applicationStatusOperationStateOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperation)(nil)).Elem()
}

func (i *applicationStatusOperationStateOperationPtrType) ToApplicationStatusOperationStateOperationPtrOutput() ApplicationStatusOperationStateOperationPtrOutput {
	return i.ToApplicationStatusOperationStateOperationPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateOperationPtrType) ToApplicationStatusOperationStateOperationPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationPtrOutput)
}

// Operation is the original requested operation
type ApplicationStatusOperationStateOperationOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperation)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationOutput) ToApplicationStatusOperationStateOperationOutput() ApplicationStatusOperationStateOperationOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationOutput) ToApplicationStatusOperationStateOperationOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationOutput) ToApplicationStatusOperationStateOperationPtrOutput() ApplicationStatusOperationStateOperationPtrOutput {
	return o.ToApplicationStatusOperationStateOperationPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateOperationOutput) ToApplicationStatusOperationStateOperationPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperation) *ApplicationStatusOperationStateOperation {
		return &v
	}).(ApplicationStatusOperationStateOperationPtrOutput)
}
func (o ApplicationStatusOperationStateOperationOutput) Info() ApplicationStatusOperationStateOperationInfoArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperation) []ApplicationStatusOperationStateOperationInfo {
		return v.Info
	}).(ApplicationStatusOperationStateOperationInfoArrayOutput)
}

// OperationInitiator holds information about the operation initiator
func (o ApplicationStatusOperationStateOperationOutput) InitiatedBy() ApplicationStatusOperationStateOperationInitiatedByPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperation) *ApplicationStatusOperationStateOperationInitiatedBy {
		return v.InitiatedBy
	}).(ApplicationStatusOperationStateOperationInitiatedByPtrOutput)
}

// Retry controls failed sync retry behavior
func (o ApplicationStatusOperationStateOperationOutput) Retry() ApplicationStatusOperationStateOperationRetryPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperation) *ApplicationStatusOperationStateOperationRetry {
		return v.Retry
	}).(ApplicationStatusOperationStateOperationRetryPtrOutput)
}

// SyncOperation contains sync operation details.
func (o ApplicationStatusOperationStateOperationOutput) Sync() ApplicationStatusOperationStateOperationSyncPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperation) *ApplicationStatusOperationStateOperationSync {
		return v.Sync
	}).(ApplicationStatusOperationStateOperationSyncPtrOutput)
}

type ApplicationStatusOperationStateOperationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperation)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationPtrOutput) ToApplicationStatusOperationStateOperationPtrOutput() ApplicationStatusOperationStateOperationPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationPtrOutput) ToApplicationStatusOperationStateOperationPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationPtrOutput) Elem() ApplicationStatusOperationStateOperationOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperation) ApplicationStatusOperationStateOperation { return *v }).(ApplicationStatusOperationStateOperationOutput)
}

func (o ApplicationStatusOperationStateOperationPtrOutput) Info() ApplicationStatusOperationStateOperationInfoArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperation) []ApplicationStatusOperationStateOperationInfo {
		if v == nil {
			return nil
		}
		return v.Info
	}).(ApplicationStatusOperationStateOperationInfoArrayOutput)
}

// OperationInitiator holds information about the operation initiator
func (o ApplicationStatusOperationStateOperationPtrOutput) InitiatedBy() ApplicationStatusOperationStateOperationInitiatedByPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperation) *ApplicationStatusOperationStateOperationInitiatedBy {
		if v == nil {
			return nil
		}
		return v.InitiatedBy
	}).(ApplicationStatusOperationStateOperationInitiatedByPtrOutput)
}

// Retry controls failed sync retry behavior
func (o ApplicationStatusOperationStateOperationPtrOutput) Retry() ApplicationStatusOperationStateOperationRetryPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperation) *ApplicationStatusOperationStateOperationRetry {
		if v == nil {
			return nil
		}
		return v.Retry
	}).(ApplicationStatusOperationStateOperationRetryPtrOutput)
}

// SyncOperation contains sync operation details.
func (o ApplicationStatusOperationStateOperationPtrOutput) Sync() ApplicationStatusOperationStateOperationSyncPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperation) *ApplicationStatusOperationStateOperationSync {
		if v == nil {
			return nil
		}
		return v.Sync
	}).(ApplicationStatusOperationStateOperationSyncPtrOutput)
}

type ApplicationStatusOperationStateOperationInfo struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ApplicationStatusOperationStateOperationInfoInput is an input type that accepts ApplicationStatusOperationStateOperationInfoArgs and ApplicationStatusOperationStateOperationInfoOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationInfoInput` via:
//
//          ApplicationStatusOperationStateOperationInfoArgs{...}
type ApplicationStatusOperationStateOperationInfoInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationInfoOutput() ApplicationStatusOperationStateOperationInfoOutput
	ToApplicationStatusOperationStateOperationInfoOutputWithContext(context.Context) ApplicationStatusOperationStateOperationInfoOutput
}

type ApplicationStatusOperationStateOperationInfoArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApplicationStatusOperationStateOperationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationInfo)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationInfoArgs) ToApplicationStatusOperationStateOperationInfoOutput() ApplicationStatusOperationStateOperationInfoOutput {
	return i.ToApplicationStatusOperationStateOperationInfoOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationInfoArgs) ToApplicationStatusOperationStateOperationInfoOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationInfoOutput)
}

// ApplicationStatusOperationStateOperationInfoArrayInput is an input type that accepts ApplicationStatusOperationStateOperationInfoArray and ApplicationStatusOperationStateOperationInfoArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationInfoArrayInput` via:
//
//          ApplicationStatusOperationStateOperationInfoArray{ ApplicationStatusOperationStateOperationInfoArgs{...} }
type ApplicationStatusOperationStateOperationInfoArrayInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationInfoArrayOutput() ApplicationStatusOperationStateOperationInfoArrayOutput
	ToApplicationStatusOperationStateOperationInfoArrayOutputWithContext(context.Context) ApplicationStatusOperationStateOperationInfoArrayOutput
}

type ApplicationStatusOperationStateOperationInfoArray []ApplicationStatusOperationStateOperationInfoInput

func (ApplicationStatusOperationStateOperationInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateOperationInfo)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationInfoArray) ToApplicationStatusOperationStateOperationInfoArrayOutput() ApplicationStatusOperationStateOperationInfoArrayOutput {
	return i.ToApplicationStatusOperationStateOperationInfoArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationInfoArray) ToApplicationStatusOperationStateOperationInfoArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationInfoArrayOutput)
}

type ApplicationStatusOperationStateOperationInfoOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationInfo)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationInfoOutput) ToApplicationStatusOperationStateOperationInfoOutput() ApplicationStatusOperationStateOperationInfoOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationInfoOutput) ToApplicationStatusOperationStateOperationInfoOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationInfoOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationInfoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationInfo) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusOperationStateOperationInfoOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationInfo) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationStatusOperationStateOperationInfoArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateOperationInfo)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationInfoArrayOutput) ToApplicationStatusOperationStateOperationInfoArrayOutput() ApplicationStatusOperationStateOperationInfoArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationInfoArrayOutput) ToApplicationStatusOperationStateOperationInfoArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationInfoArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationInfoArrayOutput) Index(i pulumi.IntInput) ApplicationStatusOperationStateOperationInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusOperationStateOperationInfo {
		return vs[0].([]ApplicationStatusOperationStateOperationInfo)[vs[1].(int)]
	}).(ApplicationStatusOperationStateOperationInfoOutput)
}

// OperationInitiator holds information about the operation initiator
type ApplicationStatusOperationStateOperationInitiatedBy struct {
	// Automated is set to true if operation was initiated automatically by the application controller.
	Automated *bool `pulumi:"automated"`
	// Name of a user who started operation.
	Username *string `pulumi:"username"`
}

// ApplicationStatusOperationStateOperationInitiatedByInput is an input type that accepts ApplicationStatusOperationStateOperationInitiatedByArgs and ApplicationStatusOperationStateOperationInitiatedByOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationInitiatedByInput` via:
//
//          ApplicationStatusOperationStateOperationInitiatedByArgs{...}
type ApplicationStatusOperationStateOperationInitiatedByInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationInitiatedByOutput() ApplicationStatusOperationStateOperationInitiatedByOutput
	ToApplicationStatusOperationStateOperationInitiatedByOutputWithContext(context.Context) ApplicationStatusOperationStateOperationInitiatedByOutput
}

// OperationInitiator holds information about the operation initiator
type ApplicationStatusOperationStateOperationInitiatedByArgs struct {
	// Automated is set to true if operation was initiated automatically by the application controller.
	Automated pulumi.BoolPtrInput `pulumi:"automated"`
	// Name of a user who started operation.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ApplicationStatusOperationStateOperationInitiatedByArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationInitiatedBy)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationInitiatedByArgs) ToApplicationStatusOperationStateOperationInitiatedByOutput() ApplicationStatusOperationStateOperationInitiatedByOutput {
	return i.ToApplicationStatusOperationStateOperationInitiatedByOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationInitiatedByArgs) ToApplicationStatusOperationStateOperationInitiatedByOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationInitiatedByOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationInitiatedByOutput)
}

func (i ApplicationStatusOperationStateOperationInitiatedByArgs) ToApplicationStatusOperationStateOperationInitiatedByPtrOutput() ApplicationStatusOperationStateOperationInitiatedByPtrOutput {
	return i.ToApplicationStatusOperationStateOperationInitiatedByPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationInitiatedByArgs) ToApplicationStatusOperationStateOperationInitiatedByPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationInitiatedByPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationInitiatedByOutput).ToApplicationStatusOperationStateOperationInitiatedByPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateOperationInitiatedByPtrInput is an input type that accepts ApplicationStatusOperationStateOperationInitiatedByArgs, ApplicationStatusOperationStateOperationInitiatedByPtr and ApplicationStatusOperationStateOperationInitiatedByPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationInitiatedByPtrInput` via:
//
//          ApplicationStatusOperationStateOperationInitiatedByArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateOperationInitiatedByPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationInitiatedByPtrOutput() ApplicationStatusOperationStateOperationInitiatedByPtrOutput
	ToApplicationStatusOperationStateOperationInitiatedByPtrOutputWithContext(context.Context) ApplicationStatusOperationStateOperationInitiatedByPtrOutput
}

type applicationStatusOperationStateOperationInitiatedByPtrType ApplicationStatusOperationStateOperationInitiatedByArgs

func ApplicationStatusOperationStateOperationInitiatedByPtr(v *ApplicationStatusOperationStateOperationInitiatedByArgs) ApplicationStatusOperationStateOperationInitiatedByPtrInput {
	return (*applicationStatusOperationStateOperationInitiatedByPtrType)(v)
}

func (*applicationStatusOperationStateOperationInitiatedByPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationInitiatedBy)(nil)).Elem()
}

func (i *applicationStatusOperationStateOperationInitiatedByPtrType) ToApplicationStatusOperationStateOperationInitiatedByPtrOutput() ApplicationStatusOperationStateOperationInitiatedByPtrOutput {
	return i.ToApplicationStatusOperationStateOperationInitiatedByPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateOperationInitiatedByPtrType) ToApplicationStatusOperationStateOperationInitiatedByPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationInitiatedByPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationInitiatedByPtrOutput)
}

// OperationInitiator holds information about the operation initiator
type ApplicationStatusOperationStateOperationInitiatedByOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationInitiatedByOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationInitiatedBy)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationInitiatedByOutput) ToApplicationStatusOperationStateOperationInitiatedByOutput() ApplicationStatusOperationStateOperationInitiatedByOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationInitiatedByOutput) ToApplicationStatusOperationStateOperationInitiatedByOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationInitiatedByOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationInitiatedByOutput) ToApplicationStatusOperationStateOperationInitiatedByPtrOutput() ApplicationStatusOperationStateOperationInitiatedByPtrOutput {
	return o.ToApplicationStatusOperationStateOperationInitiatedByPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateOperationInitiatedByOutput) ToApplicationStatusOperationStateOperationInitiatedByPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationInitiatedByPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationInitiatedBy) *ApplicationStatusOperationStateOperationInitiatedBy {
		return &v
	}).(ApplicationStatusOperationStateOperationInitiatedByPtrOutput)
}

// Automated is set to true if operation was initiated automatically by the application controller.
func (o ApplicationStatusOperationStateOperationInitiatedByOutput) Automated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationInitiatedBy) *bool { return v.Automated }).(pulumi.BoolPtrOutput)
}

// Name of a user who started operation.
func (o ApplicationStatusOperationStateOperationInitiatedByOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationInitiatedBy) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateOperationInitiatedByPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationInitiatedByPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationInitiatedBy)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationInitiatedByPtrOutput) ToApplicationStatusOperationStateOperationInitiatedByPtrOutput() ApplicationStatusOperationStateOperationInitiatedByPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationInitiatedByPtrOutput) ToApplicationStatusOperationStateOperationInitiatedByPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationInitiatedByPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationInitiatedByPtrOutput) Elem() ApplicationStatusOperationStateOperationInitiatedByOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationInitiatedBy) ApplicationStatusOperationStateOperationInitiatedBy {
		return *v
	}).(ApplicationStatusOperationStateOperationInitiatedByOutput)
}

// Automated is set to true if operation was initiated automatically by the application controller.
func (o ApplicationStatusOperationStateOperationInitiatedByPtrOutput) Automated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationInitiatedBy) *bool {
		if v == nil {
			return nil
		}
		return v.Automated
	}).(pulumi.BoolPtrOutput)
}

// Name of a user who started operation.
func (o ApplicationStatusOperationStateOperationInitiatedByPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationInitiatedBy) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Retry controls failed sync retry behavior
type ApplicationStatusOperationStateOperationRetry struct {
	// Backoff is a backoff strategy
	Backoff *ApplicationStatusOperationStateOperationRetryBackoff `pulumi:"backoff"`
	// Limit is the maximum number of attempts when retrying a container
	Limit *int `pulumi:"limit"`
}

// ApplicationStatusOperationStateOperationRetryInput is an input type that accepts ApplicationStatusOperationStateOperationRetryArgs and ApplicationStatusOperationStateOperationRetryOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationRetryInput` via:
//
//          ApplicationStatusOperationStateOperationRetryArgs{...}
type ApplicationStatusOperationStateOperationRetryInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationRetryOutput() ApplicationStatusOperationStateOperationRetryOutput
	ToApplicationStatusOperationStateOperationRetryOutputWithContext(context.Context) ApplicationStatusOperationStateOperationRetryOutput
}

// Retry controls failed sync retry behavior
type ApplicationStatusOperationStateOperationRetryArgs struct {
	// Backoff is a backoff strategy
	Backoff ApplicationStatusOperationStateOperationRetryBackoffPtrInput `pulumi:"backoff"`
	// Limit is the maximum number of attempts when retrying a container
	Limit pulumi.IntPtrInput `pulumi:"limit"`
}

func (ApplicationStatusOperationStateOperationRetryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationRetry)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationRetryArgs) ToApplicationStatusOperationStateOperationRetryOutput() ApplicationStatusOperationStateOperationRetryOutput {
	return i.ToApplicationStatusOperationStateOperationRetryOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationRetryArgs) ToApplicationStatusOperationStateOperationRetryOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationRetryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationRetryOutput)
}

func (i ApplicationStatusOperationStateOperationRetryArgs) ToApplicationStatusOperationStateOperationRetryPtrOutput() ApplicationStatusOperationStateOperationRetryPtrOutput {
	return i.ToApplicationStatusOperationStateOperationRetryPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationRetryArgs) ToApplicationStatusOperationStateOperationRetryPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationRetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationRetryOutput).ToApplicationStatusOperationStateOperationRetryPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateOperationRetryPtrInput is an input type that accepts ApplicationStatusOperationStateOperationRetryArgs, ApplicationStatusOperationStateOperationRetryPtr and ApplicationStatusOperationStateOperationRetryPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationRetryPtrInput` via:
//
//          ApplicationStatusOperationStateOperationRetryArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateOperationRetryPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationRetryPtrOutput() ApplicationStatusOperationStateOperationRetryPtrOutput
	ToApplicationStatusOperationStateOperationRetryPtrOutputWithContext(context.Context) ApplicationStatusOperationStateOperationRetryPtrOutput
}

type applicationStatusOperationStateOperationRetryPtrType ApplicationStatusOperationStateOperationRetryArgs

func ApplicationStatusOperationStateOperationRetryPtr(v *ApplicationStatusOperationStateOperationRetryArgs) ApplicationStatusOperationStateOperationRetryPtrInput {
	return (*applicationStatusOperationStateOperationRetryPtrType)(v)
}

func (*applicationStatusOperationStateOperationRetryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationRetry)(nil)).Elem()
}

func (i *applicationStatusOperationStateOperationRetryPtrType) ToApplicationStatusOperationStateOperationRetryPtrOutput() ApplicationStatusOperationStateOperationRetryPtrOutput {
	return i.ToApplicationStatusOperationStateOperationRetryPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateOperationRetryPtrType) ToApplicationStatusOperationStateOperationRetryPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationRetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationRetryPtrOutput)
}

// Retry controls failed sync retry behavior
type ApplicationStatusOperationStateOperationRetryOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationRetryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationRetry)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationRetryOutput) ToApplicationStatusOperationStateOperationRetryOutput() ApplicationStatusOperationStateOperationRetryOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationRetryOutput) ToApplicationStatusOperationStateOperationRetryOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationRetryOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationRetryOutput) ToApplicationStatusOperationStateOperationRetryPtrOutput() ApplicationStatusOperationStateOperationRetryPtrOutput {
	return o.ToApplicationStatusOperationStateOperationRetryPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateOperationRetryOutput) ToApplicationStatusOperationStateOperationRetryPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationRetryPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationRetry) *ApplicationStatusOperationStateOperationRetry {
		return &v
	}).(ApplicationStatusOperationStateOperationRetryPtrOutput)
}

// Backoff is a backoff strategy
func (o ApplicationStatusOperationStateOperationRetryOutput) Backoff() ApplicationStatusOperationStateOperationRetryBackoffPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationRetry) *ApplicationStatusOperationStateOperationRetryBackoff {
		return v.Backoff
	}).(ApplicationStatusOperationStateOperationRetryBackoffPtrOutput)
}

// Limit is the maximum number of attempts when retrying a container
func (o ApplicationStatusOperationStateOperationRetryOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationRetry) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

type ApplicationStatusOperationStateOperationRetryPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationRetryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationRetry)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationRetryPtrOutput) ToApplicationStatusOperationStateOperationRetryPtrOutput() ApplicationStatusOperationStateOperationRetryPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationRetryPtrOutput) ToApplicationStatusOperationStateOperationRetryPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationRetryPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationRetryPtrOutput) Elem() ApplicationStatusOperationStateOperationRetryOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationRetry) ApplicationStatusOperationStateOperationRetry {
		return *v
	}).(ApplicationStatusOperationStateOperationRetryOutput)
}

// Backoff is a backoff strategy
func (o ApplicationStatusOperationStateOperationRetryPtrOutput) Backoff() ApplicationStatusOperationStateOperationRetryBackoffPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationRetry) *ApplicationStatusOperationStateOperationRetryBackoff {
		if v == nil {
			return nil
		}
		return v.Backoff
	}).(ApplicationStatusOperationStateOperationRetryBackoffPtrOutput)
}

// Limit is the maximum number of attempts when retrying a container
func (o ApplicationStatusOperationStateOperationRetryPtrOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationRetry) *int {
		if v == nil {
			return nil
		}
		return v.Limit
	}).(pulumi.IntPtrOutput)
}

// Backoff is a backoff strategy
type ApplicationStatusOperationStateOperationRetryBackoff struct {
	// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
	Duration *string `pulumi:"duration"`
	// Factor is a factor to multiply the base duration after each failed retry
	Factor *int `pulumi:"factor"`
	// MaxDuration is the maximum amount of time allowed for the backoff strategy
	MaxDuration *string `pulumi:"maxDuration"`
}

// ApplicationStatusOperationStateOperationRetryBackoffInput is an input type that accepts ApplicationStatusOperationStateOperationRetryBackoffArgs and ApplicationStatusOperationStateOperationRetryBackoffOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationRetryBackoffInput` via:
//
//          ApplicationStatusOperationStateOperationRetryBackoffArgs{...}
type ApplicationStatusOperationStateOperationRetryBackoffInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationRetryBackoffOutput() ApplicationStatusOperationStateOperationRetryBackoffOutput
	ToApplicationStatusOperationStateOperationRetryBackoffOutputWithContext(context.Context) ApplicationStatusOperationStateOperationRetryBackoffOutput
}

// Backoff is a backoff strategy
type ApplicationStatusOperationStateOperationRetryBackoffArgs struct {
	// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// Factor is a factor to multiply the base duration after each failed retry
	Factor pulumi.IntPtrInput `pulumi:"factor"`
	// MaxDuration is the maximum amount of time allowed for the backoff strategy
	MaxDuration pulumi.StringPtrInput `pulumi:"maxDuration"`
}

func (ApplicationStatusOperationStateOperationRetryBackoffArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationRetryBackoff)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationRetryBackoffArgs) ToApplicationStatusOperationStateOperationRetryBackoffOutput() ApplicationStatusOperationStateOperationRetryBackoffOutput {
	return i.ToApplicationStatusOperationStateOperationRetryBackoffOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationRetryBackoffArgs) ToApplicationStatusOperationStateOperationRetryBackoffOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationRetryBackoffOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationRetryBackoffOutput)
}

func (i ApplicationStatusOperationStateOperationRetryBackoffArgs) ToApplicationStatusOperationStateOperationRetryBackoffPtrOutput() ApplicationStatusOperationStateOperationRetryBackoffPtrOutput {
	return i.ToApplicationStatusOperationStateOperationRetryBackoffPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationRetryBackoffArgs) ToApplicationStatusOperationStateOperationRetryBackoffPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationRetryBackoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationRetryBackoffOutput).ToApplicationStatusOperationStateOperationRetryBackoffPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateOperationRetryBackoffPtrInput is an input type that accepts ApplicationStatusOperationStateOperationRetryBackoffArgs, ApplicationStatusOperationStateOperationRetryBackoffPtr and ApplicationStatusOperationStateOperationRetryBackoffPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationRetryBackoffPtrInput` via:
//
//          ApplicationStatusOperationStateOperationRetryBackoffArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateOperationRetryBackoffPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationRetryBackoffPtrOutput() ApplicationStatusOperationStateOperationRetryBackoffPtrOutput
	ToApplicationStatusOperationStateOperationRetryBackoffPtrOutputWithContext(context.Context) ApplicationStatusOperationStateOperationRetryBackoffPtrOutput
}

type applicationStatusOperationStateOperationRetryBackoffPtrType ApplicationStatusOperationStateOperationRetryBackoffArgs

func ApplicationStatusOperationStateOperationRetryBackoffPtr(v *ApplicationStatusOperationStateOperationRetryBackoffArgs) ApplicationStatusOperationStateOperationRetryBackoffPtrInput {
	return (*applicationStatusOperationStateOperationRetryBackoffPtrType)(v)
}

func (*applicationStatusOperationStateOperationRetryBackoffPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationRetryBackoff)(nil)).Elem()
}

func (i *applicationStatusOperationStateOperationRetryBackoffPtrType) ToApplicationStatusOperationStateOperationRetryBackoffPtrOutput() ApplicationStatusOperationStateOperationRetryBackoffPtrOutput {
	return i.ToApplicationStatusOperationStateOperationRetryBackoffPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateOperationRetryBackoffPtrType) ToApplicationStatusOperationStateOperationRetryBackoffPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationRetryBackoffPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationRetryBackoffPtrOutput)
}

// Backoff is a backoff strategy
type ApplicationStatusOperationStateOperationRetryBackoffOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationRetryBackoffOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationRetryBackoff)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationRetryBackoffOutput) ToApplicationStatusOperationStateOperationRetryBackoffOutput() ApplicationStatusOperationStateOperationRetryBackoffOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationRetryBackoffOutput) ToApplicationStatusOperationStateOperationRetryBackoffOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationRetryBackoffOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationRetryBackoffOutput) ToApplicationStatusOperationStateOperationRetryBackoffPtrOutput() ApplicationStatusOperationStateOperationRetryBackoffPtrOutput {
	return o.ToApplicationStatusOperationStateOperationRetryBackoffPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateOperationRetryBackoffOutput) ToApplicationStatusOperationStateOperationRetryBackoffPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationRetryBackoffPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationRetryBackoff) *ApplicationStatusOperationStateOperationRetryBackoff {
		return &v
	}).(ApplicationStatusOperationStateOperationRetryBackoffPtrOutput)
}

// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
func (o ApplicationStatusOperationStateOperationRetryBackoffOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationRetryBackoff) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// Factor is a factor to multiply the base duration after each failed retry
func (o ApplicationStatusOperationStateOperationRetryBackoffOutput) Factor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationRetryBackoff) *int { return v.Factor }).(pulumi.IntPtrOutput)
}

// MaxDuration is the maximum amount of time allowed for the backoff strategy
func (o ApplicationStatusOperationStateOperationRetryBackoffOutput) MaxDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationRetryBackoff) *string { return v.MaxDuration }).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateOperationRetryBackoffPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationRetryBackoffPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationRetryBackoff)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationRetryBackoffPtrOutput) ToApplicationStatusOperationStateOperationRetryBackoffPtrOutput() ApplicationStatusOperationStateOperationRetryBackoffPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationRetryBackoffPtrOutput) ToApplicationStatusOperationStateOperationRetryBackoffPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationRetryBackoffPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationRetryBackoffPtrOutput) Elem() ApplicationStatusOperationStateOperationRetryBackoffOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationRetryBackoff) ApplicationStatusOperationStateOperationRetryBackoff {
		return *v
	}).(ApplicationStatusOperationStateOperationRetryBackoffOutput)
}

// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
func (o ApplicationStatusOperationStateOperationRetryBackoffPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationRetryBackoff) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// Factor is a factor to multiply the base duration after each failed retry
func (o ApplicationStatusOperationStateOperationRetryBackoffPtrOutput) Factor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationRetryBackoff) *int {
		if v == nil {
			return nil
		}
		return v.Factor
	}).(pulumi.IntPtrOutput)
}

// MaxDuration is the maximum amount of time allowed for the backoff strategy
func (o ApplicationStatusOperationStateOperationRetryBackoffPtrOutput) MaxDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationRetryBackoff) *string {
		if v == nil {
			return nil
		}
		return v.MaxDuration
	}).(pulumi.StringPtrOutput)
}

// SyncOperation contains sync operation details.
type ApplicationStatusOperationStateOperationSync struct {
	// DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
	DryRun *bool `pulumi:"dryRun"`
	// Manifests is an optional field that overrides sync source with a local directory for development
	Manifests []string `pulumi:"manifests"`
	// Prune deletes resources that are no longer tracked in git
	Prune *bool `pulumi:"prune"`
	// Resources describes which resources to sync
	Resources []ApplicationStatusOperationStateOperationSyncResources `pulumi:"resources"`
	// Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
	Revision *string `pulumi:"revision"`
	// Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
	Source *ApplicationStatusOperationStateOperationSyncSource `pulumi:"source"`
	// SyncOptions provide per-sync sync-options, e.g. Validate=false
	SyncOptions []string `pulumi:"syncOptions"`
	// SyncStrategy describes how to perform the sync
	SyncStrategy *ApplicationStatusOperationStateOperationSyncSyncStrategy `pulumi:"syncStrategy"`
}

// ApplicationStatusOperationStateOperationSyncInput is an input type that accepts ApplicationStatusOperationStateOperationSyncArgs and ApplicationStatusOperationStateOperationSyncOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncInput` via:
//
//          ApplicationStatusOperationStateOperationSyncArgs{...}
type ApplicationStatusOperationStateOperationSyncInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncOutput() ApplicationStatusOperationStateOperationSyncOutput
	ToApplicationStatusOperationStateOperationSyncOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncOutput
}

// SyncOperation contains sync operation details.
type ApplicationStatusOperationStateOperationSyncArgs struct {
	// DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
	DryRun pulumi.BoolPtrInput `pulumi:"dryRun"`
	// Manifests is an optional field that overrides sync source with a local directory for development
	Manifests pulumi.StringArrayInput `pulumi:"manifests"`
	// Prune deletes resources that are no longer tracked in git
	Prune pulumi.BoolPtrInput `pulumi:"prune"`
	// Resources describes which resources to sync
	Resources ApplicationStatusOperationStateOperationSyncResourcesArrayInput `pulumi:"resources"`
	// Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
	Source ApplicationStatusOperationStateOperationSyncSourcePtrInput `pulumi:"source"`
	// SyncOptions provide per-sync sync-options, e.g. Validate=false
	SyncOptions pulumi.StringArrayInput `pulumi:"syncOptions"`
	// SyncStrategy describes how to perform the sync
	SyncStrategy ApplicationStatusOperationStateOperationSyncSyncStrategyPtrInput `pulumi:"syncStrategy"`
}

func (ApplicationStatusOperationStateOperationSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSync)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncArgs) ToApplicationStatusOperationStateOperationSyncOutput() ApplicationStatusOperationStateOperationSyncOutput {
	return i.ToApplicationStatusOperationStateOperationSyncOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncArgs) ToApplicationStatusOperationStateOperationSyncOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncOutput)
}

func (i ApplicationStatusOperationStateOperationSyncArgs) ToApplicationStatusOperationStateOperationSyncPtrOutput() ApplicationStatusOperationStateOperationSyncPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncArgs) ToApplicationStatusOperationStateOperationSyncPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncOutput).ToApplicationStatusOperationStateOperationSyncPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateOperationSyncPtrInput is an input type that accepts ApplicationStatusOperationStateOperationSyncArgs, ApplicationStatusOperationStateOperationSyncPtr and ApplicationStatusOperationStateOperationSyncPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncPtrInput` via:
//
//          ApplicationStatusOperationStateOperationSyncArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateOperationSyncPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncPtrOutput() ApplicationStatusOperationStateOperationSyncPtrOutput
	ToApplicationStatusOperationStateOperationSyncPtrOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncPtrOutput
}

type applicationStatusOperationStateOperationSyncPtrType ApplicationStatusOperationStateOperationSyncArgs

func ApplicationStatusOperationStateOperationSyncPtr(v *ApplicationStatusOperationStateOperationSyncArgs) ApplicationStatusOperationStateOperationSyncPtrInput {
	return (*applicationStatusOperationStateOperationSyncPtrType)(v)
}

func (*applicationStatusOperationStateOperationSyncPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSync)(nil)).Elem()
}

func (i *applicationStatusOperationStateOperationSyncPtrType) ToApplicationStatusOperationStateOperationSyncPtrOutput() ApplicationStatusOperationStateOperationSyncPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateOperationSyncPtrType) ToApplicationStatusOperationStateOperationSyncPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncPtrOutput)
}

// SyncOperation contains sync operation details.
type ApplicationStatusOperationStateOperationSyncOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSync)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncOutput) ToApplicationStatusOperationStateOperationSyncOutput() ApplicationStatusOperationStateOperationSyncOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncOutput) ToApplicationStatusOperationStateOperationSyncOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncOutput) ToApplicationStatusOperationStateOperationSyncPtrOutput() ApplicationStatusOperationStateOperationSyncPtrOutput {
	return o.ToApplicationStatusOperationStateOperationSyncPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateOperationSyncOutput) ToApplicationStatusOperationStateOperationSyncPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSync) *ApplicationStatusOperationStateOperationSync {
		return &v
	}).(ApplicationStatusOperationStateOperationSyncPtrOutput)
}

// DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
func (o ApplicationStatusOperationStateOperationSyncOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSync) *bool { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// Manifests is an optional field that overrides sync source with a local directory for development
func (o ApplicationStatusOperationStateOperationSyncOutput) Manifests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSync) []string { return v.Manifests }).(pulumi.StringArrayOutput)
}

// Prune deletes resources that are no longer tracked in git
func (o ApplicationStatusOperationStateOperationSyncOutput) Prune() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSync) *bool { return v.Prune }).(pulumi.BoolPtrOutput)
}

// Resources describes which resources to sync
func (o ApplicationStatusOperationStateOperationSyncOutput) Resources() ApplicationStatusOperationStateOperationSyncResourcesArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSync) []ApplicationStatusOperationStateOperationSyncResources {
		return v.Resources
	}).(ApplicationStatusOperationStateOperationSyncResourcesArrayOutput)
}

// Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
func (o ApplicationStatusOperationStateOperationSyncOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSync) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
func (o ApplicationStatusOperationStateOperationSyncOutput) Source() ApplicationStatusOperationStateOperationSyncSourcePtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSync) *ApplicationStatusOperationStateOperationSyncSource {
		return v.Source
	}).(ApplicationStatusOperationStateOperationSyncSourcePtrOutput)
}

// SyncOptions provide per-sync sync-options, e.g. Validate=false
func (o ApplicationStatusOperationStateOperationSyncOutput) SyncOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSync) []string { return v.SyncOptions }).(pulumi.StringArrayOutput)
}

// SyncStrategy describes how to perform the sync
func (o ApplicationStatusOperationStateOperationSyncOutput) SyncStrategy() ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSync) *ApplicationStatusOperationStateOperationSyncSyncStrategy {
		return v.SyncStrategy
	}).(ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput)
}

type ApplicationStatusOperationStateOperationSyncPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSync)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncPtrOutput) ToApplicationStatusOperationStateOperationSyncPtrOutput() ApplicationStatusOperationStateOperationSyncPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncPtrOutput) ToApplicationStatusOperationStateOperationSyncPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncPtrOutput) Elem() ApplicationStatusOperationStateOperationSyncOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSync) ApplicationStatusOperationStateOperationSync {
		return *v
	}).(ApplicationStatusOperationStateOperationSyncOutput)
}

// DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
func (o ApplicationStatusOperationStateOperationSyncPtrOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSync) *bool {
		if v == nil {
			return nil
		}
		return v.DryRun
	}).(pulumi.BoolPtrOutput)
}

// Manifests is an optional field that overrides sync source with a local directory for development
func (o ApplicationStatusOperationStateOperationSyncPtrOutput) Manifests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSync) []string {
		if v == nil {
			return nil
		}
		return v.Manifests
	}).(pulumi.StringArrayOutput)
}

// Prune deletes resources that are no longer tracked in git
func (o ApplicationStatusOperationStateOperationSyncPtrOutput) Prune() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSync) *bool {
		if v == nil {
			return nil
		}
		return v.Prune
	}).(pulumi.BoolPtrOutput)
}

// Resources describes which resources to sync
func (o ApplicationStatusOperationStateOperationSyncPtrOutput) Resources() ApplicationStatusOperationStateOperationSyncResourcesArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSync) []ApplicationStatusOperationStateOperationSyncResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ApplicationStatusOperationStateOperationSyncResourcesArrayOutput)
}

// Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
func (o ApplicationStatusOperationStateOperationSyncPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSync) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
func (o ApplicationStatusOperationStateOperationSyncPtrOutput) Source() ApplicationStatusOperationStateOperationSyncSourcePtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSync) *ApplicationStatusOperationStateOperationSyncSource {
		if v == nil {
			return nil
		}
		return v.Source
	}).(ApplicationStatusOperationStateOperationSyncSourcePtrOutput)
}

// SyncOptions provide per-sync sync-options, e.g. Validate=false
func (o ApplicationStatusOperationStateOperationSyncPtrOutput) SyncOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSync) []string {
		if v == nil {
			return nil
		}
		return v.SyncOptions
	}).(pulumi.StringArrayOutput)
}

// SyncStrategy describes how to perform the sync
func (o ApplicationStatusOperationStateOperationSyncPtrOutput) SyncStrategy() ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSync) *ApplicationStatusOperationStateOperationSyncSyncStrategy {
		if v == nil {
			return nil
		}
		return v.SyncStrategy
	}).(ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput)
}

// SyncOperationResource contains resources to sync.
type ApplicationStatusOperationStateOperationSyncResources struct {
	Group     *string `pulumi:"group"`
	Kind      string  `pulumi:"kind"`
	Name      string  `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
}

// ApplicationStatusOperationStateOperationSyncResourcesInput is an input type that accepts ApplicationStatusOperationStateOperationSyncResourcesArgs and ApplicationStatusOperationStateOperationSyncResourcesOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncResourcesInput` via:
//
//          ApplicationStatusOperationStateOperationSyncResourcesArgs{...}
type ApplicationStatusOperationStateOperationSyncResourcesInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncResourcesOutput() ApplicationStatusOperationStateOperationSyncResourcesOutput
	ToApplicationStatusOperationStateOperationSyncResourcesOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncResourcesOutput
}

// SyncOperationResource contains resources to sync.
type ApplicationStatusOperationStateOperationSyncResourcesArgs struct {
	Group     pulumi.StringPtrInput `pulumi:"group"`
	Kind      pulumi.StringInput    `pulumi:"kind"`
	Name      pulumi.StringInput    `pulumi:"name"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ApplicationStatusOperationStateOperationSyncResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncResources)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncResourcesArgs) ToApplicationStatusOperationStateOperationSyncResourcesOutput() ApplicationStatusOperationStateOperationSyncResourcesOutput {
	return i.ToApplicationStatusOperationStateOperationSyncResourcesOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncResourcesArgs) ToApplicationStatusOperationStateOperationSyncResourcesOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncResourcesOutput)
}

// ApplicationStatusOperationStateOperationSyncResourcesArrayInput is an input type that accepts ApplicationStatusOperationStateOperationSyncResourcesArray and ApplicationStatusOperationStateOperationSyncResourcesArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncResourcesArrayInput` via:
//
//          ApplicationStatusOperationStateOperationSyncResourcesArray{ ApplicationStatusOperationStateOperationSyncResourcesArgs{...} }
type ApplicationStatusOperationStateOperationSyncResourcesArrayInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncResourcesArrayOutput() ApplicationStatusOperationStateOperationSyncResourcesArrayOutput
	ToApplicationStatusOperationStateOperationSyncResourcesArrayOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncResourcesArrayOutput
}

type ApplicationStatusOperationStateOperationSyncResourcesArray []ApplicationStatusOperationStateOperationSyncResourcesInput

func (ApplicationStatusOperationStateOperationSyncResourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateOperationSyncResources)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncResourcesArray) ToApplicationStatusOperationStateOperationSyncResourcesArrayOutput() ApplicationStatusOperationStateOperationSyncResourcesArrayOutput {
	return i.ToApplicationStatusOperationStateOperationSyncResourcesArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncResourcesArray) ToApplicationStatusOperationStateOperationSyncResourcesArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncResourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncResourcesArrayOutput)
}

// SyncOperationResource contains resources to sync.
type ApplicationStatusOperationStateOperationSyncResourcesOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncResources)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncResourcesOutput) ToApplicationStatusOperationStateOperationSyncResourcesOutput() ApplicationStatusOperationStateOperationSyncResourcesOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncResourcesOutput) ToApplicationStatusOperationStateOperationSyncResourcesOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncResourcesOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncResourcesOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncResources) *string { return v.Group }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusOperationStateOperationSyncResourcesOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncResources) string { return v.Kind }).(pulumi.StringOutput)
}

func (o ApplicationStatusOperationStateOperationSyncResourcesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncResources) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusOperationStateOperationSyncResourcesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncResources) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateOperationSyncResourcesArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncResourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateOperationSyncResources)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncResourcesArrayOutput) ToApplicationStatusOperationStateOperationSyncResourcesArrayOutput() ApplicationStatusOperationStateOperationSyncResourcesArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncResourcesArrayOutput) ToApplicationStatusOperationStateOperationSyncResourcesArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncResourcesArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncResourcesArrayOutput) Index(i pulumi.IntInput) ApplicationStatusOperationStateOperationSyncResourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusOperationStateOperationSyncResources {
		return vs[0].([]ApplicationStatusOperationStateOperationSyncResources)[vs[1].(int)]
	}).(ApplicationStatusOperationStateOperationSyncResourcesOutput)
}

// Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
type ApplicationStatusOperationStateOperationSyncSource struct {
	// Chart is a Helm chart name
	Chart *string `pulumi:"chart"`
	// Directory holds path/directory specific options
	Directory *ApplicationStatusOperationStateOperationSyncSourceDirectory `pulumi:"directory"`
	// Helm holds helm specific options
	Helm *ApplicationStatusOperationStateOperationSyncSourceHelm `pulumi:"helm"`
	// Ksonnet holds ksonnet specific options
	Ksonnet *ApplicationStatusOperationStateOperationSyncSourceKsonnet `pulumi:"ksonnet"`
	// Kustomize holds kustomize specific options
	Kustomize *ApplicationStatusOperationStateOperationSyncSourceKustomize `pulumi:"kustomize"`
	// Path is a directory path within the Git repository
	Path *string `pulumi:"path"`
	// ConfigManagementPlugin holds config management plugin specific options
	Plugin *ApplicationStatusOperationStateOperationSyncSourcePlugin `pulumi:"plugin"`
	// RepoURL is the repository URL of the application manifests
	RepoURL string `pulumi:"repoURL"`
	// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
	TargetRevision *string `pulumi:"targetRevision"`
}

// ApplicationStatusOperationStateOperationSyncSourceInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceArgs and ApplicationStatusOperationStateOperationSyncSourceOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceArgs{...}
type ApplicationStatusOperationStateOperationSyncSourceInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceOutput() ApplicationStatusOperationStateOperationSyncSourceOutput
	ToApplicationStatusOperationStateOperationSyncSourceOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceOutput
}

// Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
type ApplicationStatusOperationStateOperationSyncSourceArgs struct {
	// Chart is a Helm chart name
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// Directory holds path/directory specific options
	Directory ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrInput `pulumi:"directory"`
	// Helm holds helm specific options
	Helm ApplicationStatusOperationStateOperationSyncSourceHelmPtrInput `pulumi:"helm"`
	// Ksonnet holds ksonnet specific options
	Ksonnet ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrInput `pulumi:"ksonnet"`
	// Kustomize holds kustomize specific options
	Kustomize ApplicationStatusOperationStateOperationSyncSourceKustomizePtrInput `pulumi:"kustomize"`
	// Path is a directory path within the Git repository
	Path pulumi.StringPtrInput `pulumi:"path"`
	// ConfigManagementPlugin holds config management plugin specific options
	Plugin ApplicationStatusOperationStateOperationSyncSourcePluginPtrInput `pulumi:"plugin"`
	// RepoURL is the repository URL of the application manifests
	RepoURL pulumi.StringInput `pulumi:"repoURL"`
	// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
	TargetRevision pulumi.StringPtrInput `pulumi:"targetRevision"`
}

func (ApplicationStatusOperationStateOperationSyncSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSource)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceArgs) ToApplicationStatusOperationStateOperationSyncSourceOutput() ApplicationStatusOperationStateOperationSyncSourceOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceArgs) ToApplicationStatusOperationStateOperationSyncSourceOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceOutput)
}

func (i ApplicationStatusOperationStateOperationSyncSourceArgs) ToApplicationStatusOperationStateOperationSyncSourcePtrOutput() ApplicationStatusOperationStateOperationSyncSourcePtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourcePtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceArgs) ToApplicationStatusOperationStateOperationSyncSourcePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceOutput).ToApplicationStatusOperationStateOperationSyncSourcePtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateOperationSyncSourcePtrInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceArgs, ApplicationStatusOperationStateOperationSyncSourcePtr and ApplicationStatusOperationStateOperationSyncSourcePtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourcePtrInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateOperationSyncSourcePtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourcePtrOutput() ApplicationStatusOperationStateOperationSyncSourcePtrOutput
	ToApplicationStatusOperationStateOperationSyncSourcePtrOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourcePtrOutput
}

type applicationStatusOperationStateOperationSyncSourcePtrType ApplicationStatusOperationStateOperationSyncSourceArgs

func ApplicationStatusOperationStateOperationSyncSourcePtr(v *ApplicationStatusOperationStateOperationSyncSourceArgs) ApplicationStatusOperationStateOperationSyncSourcePtrInput {
	return (*applicationStatusOperationStateOperationSyncSourcePtrType)(v)
}

func (*applicationStatusOperationStateOperationSyncSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSource)(nil)).Elem()
}

func (i *applicationStatusOperationStateOperationSyncSourcePtrType) ToApplicationStatusOperationStateOperationSyncSourcePtrOutput() ApplicationStatusOperationStateOperationSyncSourcePtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourcePtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateOperationSyncSourcePtrType) ToApplicationStatusOperationStateOperationSyncSourcePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourcePtrOutput)
}

// Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
type ApplicationStatusOperationStateOperationSyncSourceOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSource)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceOutput) ToApplicationStatusOperationStateOperationSyncSourceOutput() ApplicationStatusOperationStateOperationSyncSourceOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceOutput) ToApplicationStatusOperationStateOperationSyncSourceOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceOutput) ToApplicationStatusOperationStateOperationSyncSourcePtrOutput() ApplicationStatusOperationStateOperationSyncSourcePtrOutput {
	return o.ToApplicationStatusOperationStateOperationSyncSourcePtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateOperationSyncSourceOutput) ToApplicationStatusOperationStateOperationSyncSourcePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourcePtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSource) *ApplicationStatusOperationStateOperationSyncSource {
		return &v
	}).(ApplicationStatusOperationStateOperationSyncSourcePtrOutput)
}

// Chart is a Helm chart name
func (o ApplicationStatusOperationStateOperationSyncSourceOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSource) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
func (o ApplicationStatusOperationStateOperationSyncSourceOutput) Directory() ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSource) *ApplicationStatusOperationStateOperationSyncSourceDirectory {
		return v.Directory
	}).(ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput)
}

// Helm holds helm specific options
func (o ApplicationStatusOperationStateOperationSyncSourceOutput) Helm() ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSource) *ApplicationStatusOperationStateOperationSyncSourceHelm {
		return v.Helm
	}).(ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput)
}

// Ksonnet holds ksonnet specific options
func (o ApplicationStatusOperationStateOperationSyncSourceOutput) Ksonnet() ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSource) *ApplicationStatusOperationStateOperationSyncSourceKsonnet {
		return v.Ksonnet
	}).(ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput)
}

// Kustomize holds kustomize specific options
func (o ApplicationStatusOperationStateOperationSyncSourceOutput) Kustomize() ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSource) *ApplicationStatusOperationStateOperationSyncSourceKustomize {
		return v.Kustomize
	}).(ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput)
}

// Path is a directory path within the Git repository
func (o ApplicationStatusOperationStateOperationSyncSourceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSource) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
func (o ApplicationStatusOperationStateOperationSyncSourceOutput) Plugin() ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSource) *ApplicationStatusOperationStateOperationSyncSourcePlugin {
		return v.Plugin
	}).(ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput)
}

// RepoURL is the repository URL of the application manifests
func (o ApplicationStatusOperationStateOperationSyncSourceOutput) RepoURL() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSource) string { return v.RepoURL }).(pulumi.StringOutput)
}

// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
func (o ApplicationStatusOperationStateOperationSyncSourceOutput) TargetRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSource) *string { return v.TargetRevision }).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateOperationSyncSourcePtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSource)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourcePtrOutput) ToApplicationStatusOperationStateOperationSyncSourcePtrOutput() ApplicationStatusOperationStateOperationSyncSourcePtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourcePtrOutput) ToApplicationStatusOperationStateOperationSyncSourcePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourcePtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourcePtrOutput) Elem() ApplicationStatusOperationStateOperationSyncSourceOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSource) ApplicationStatusOperationStateOperationSyncSource {
		return *v
	}).(ApplicationStatusOperationStateOperationSyncSourceOutput)
}

// Chart is a Helm chart name
func (o ApplicationStatusOperationStateOperationSyncSourcePtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSource) *string {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
func (o ApplicationStatusOperationStateOperationSyncSourcePtrOutput) Directory() ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSource) *ApplicationStatusOperationStateOperationSyncSourceDirectory {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput)
}

// Helm holds helm specific options
func (o ApplicationStatusOperationStateOperationSyncSourcePtrOutput) Helm() ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSource) *ApplicationStatusOperationStateOperationSyncSourceHelm {
		if v == nil {
			return nil
		}
		return v.Helm
	}).(ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput)
}

// Ksonnet holds ksonnet specific options
func (o ApplicationStatusOperationStateOperationSyncSourcePtrOutput) Ksonnet() ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSource) *ApplicationStatusOperationStateOperationSyncSourceKsonnet {
		if v == nil {
			return nil
		}
		return v.Ksonnet
	}).(ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput)
}

// Kustomize holds kustomize specific options
func (o ApplicationStatusOperationStateOperationSyncSourcePtrOutput) Kustomize() ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSource) *ApplicationStatusOperationStateOperationSyncSourceKustomize {
		if v == nil {
			return nil
		}
		return v.Kustomize
	}).(ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput)
}

// Path is a directory path within the Git repository
func (o ApplicationStatusOperationStateOperationSyncSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSource) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
func (o ApplicationStatusOperationStateOperationSyncSourcePtrOutput) Plugin() ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSource) *ApplicationStatusOperationStateOperationSyncSourcePlugin {
		if v == nil {
			return nil
		}
		return v.Plugin
	}).(ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput)
}

// RepoURL is the repository URL of the application manifests
func (o ApplicationStatusOperationStateOperationSyncSourcePtrOutput) RepoURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSource) *string {
		if v == nil {
			return nil
		}
		return &v.RepoURL
	}).(pulumi.StringPtrOutput)
}

// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
func (o ApplicationStatusOperationStateOperationSyncSourcePtrOutput) TargetRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSource) *string {
		if v == nil {
			return nil
		}
		return v.TargetRevision
	}).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
type ApplicationStatusOperationStateOperationSyncSourceDirectory struct {
	// ApplicationSourceJsonnet holds jsonnet specific options
	Jsonnet *ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet `pulumi:"jsonnet"`
	Recurse *bool                                                               `pulumi:"recurse"`
}

// ApplicationStatusOperationStateOperationSyncSourceDirectoryInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs and ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceDirectoryInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs{...}
type ApplicationStatusOperationStateOperationSyncSourceDirectoryInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceDirectoryOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput
	ToApplicationStatusOperationStateOperationSyncSourceDirectoryOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput
}

// Directory holds path/directory specific options
type ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs struct {
	// ApplicationSourceJsonnet holds jsonnet specific options
	Jsonnet ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrInput `pulumi:"jsonnet"`
	Recurse pulumi.BoolPtrInput                                                        `pulumi:"recurse"`
}

func (ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceDirectory)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs) ToApplicationStatusOperationStateOperationSyncSourceDirectoryOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceDirectoryOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs) ToApplicationStatusOperationStateOperationSyncSourceDirectoryOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput)
}

func (i ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs) ToApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs) ToApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput).ToApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs, ApplicationStatusOperationStateOperationSyncSourceDirectoryPtr and ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput
	ToApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput
}

type applicationStatusOperationStateOperationSyncSourceDirectoryPtrType ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs

func ApplicationStatusOperationStateOperationSyncSourceDirectoryPtr(v *ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs) ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrInput {
	return (*applicationStatusOperationStateOperationSyncSourceDirectoryPtrType)(v)
}

func (*applicationStatusOperationStateOperationSyncSourceDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSourceDirectory)(nil)).Elem()
}

func (i *applicationStatusOperationStateOperationSyncSourceDirectoryPtrType) ToApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateOperationSyncSourceDirectoryPtrType) ToApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput)
}

// Directory holds path/directory specific options
type ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceDirectory)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput {
	return o.ToApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceDirectory) *ApplicationStatusOperationStateOperationSyncSourceDirectory {
		return &v
	}).(ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput) Jsonnet() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceDirectory) *ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet {
		return v.Jsonnet
	}).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput)
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput) Recurse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceDirectory) *bool { return v.Recurse }).(pulumi.BoolPtrOutput)
}

type ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSourceDirectory)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput) Elem() ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceDirectory) ApplicationStatusOperationStateOperationSyncSourceDirectory {
		return *v
	}).(ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput) Jsonnet() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceDirectory) *ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet {
		if v == nil {
			return nil
		}
		return v.Jsonnet
	}).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput)
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput) Recurse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceDirectory) *bool {
		if v == nil {
			return nil
		}
		return v.Recurse
	}).(pulumi.BoolPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet struct {
	// ExtVars is a list of Jsonnet External Variables
	ExtVars []ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars `pulumi:"extVars"`
	// Additional library search dirs
	Libs []string `pulumi:"libs"`
	// TLAS is a list of Jsonnet Top-level Arguments
	Tlas []ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas `pulumi:"tlas"`
}

// ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs and ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs{...}
type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput
	ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs struct {
	// ExtVars is a list of Jsonnet External Variables
	ExtVars ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayInput `pulumi:"extVars"`
	// Additional library search dirs
	Libs pulumi.StringArrayInput `pulumi:"libs"`
	// TLAS is a list of Jsonnet Top-level Arguments
	Tlas ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayInput `pulumi:"tlas"`
}

func (ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput)
}

func (i ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput).ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs, ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtr and ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput
	ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput
}

type applicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrType ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs

func ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtr(v *ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrInput {
	return (*applicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrType)(v)
}

func (*applicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet)(nil)).Elem()
}

func (i *applicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrType) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrType) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput {
	return o.ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet) *ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet {
		return &v
	}).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput)
}

// ExtVars is a list of Jsonnet External Variables
func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput) ExtVars() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet) []ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars {
		return v.ExtVars
	}).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput)
}

// Additional library search dirs
func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput) Libs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet) []string { return v.Libs }).(pulumi.StringArrayOutput)
}

// TLAS is a list of Jsonnet Top-level Arguments
func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput) Tlas() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet) []ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas {
		return v.Tlas
	}).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput)
}

type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput) Elem() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet {
		return *v
	}).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput)
}

// ExtVars is a list of Jsonnet External Variables
func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput) ExtVars() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet) []ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars {
		if v == nil {
			return nil
		}
		return v.ExtVars
	}).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput)
}

// Additional library search dirs
func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput) Libs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet) []string {
		if v == nil {
			return nil
		}
		return v.Libs
	}).(pulumi.StringArrayOutput)
}

// TLAS is a list of Jsonnet Top-level Arguments
func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput) Tlas() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet) []ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas {
		if v == nil {
			return nil
		}
		return v.Tlas
	}).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars struct {
	Code  *bool  `pulumi:"code"`
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArgs and ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArgs{...}
type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput
	ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArgs struct {
	Code  pulumi.BoolPtrInput `pulumi:"code"`
	Name  pulumi.StringInput  `pulumi:"name"`
	Value pulumi.StringInput  `pulumi:"value"`
}

func (ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArgs) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArgs) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput)
}

// ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArray and ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArray{ ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArgs{...} }
type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput
	ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput
}

type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArray []ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsInput

func (ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArray) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArray) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput) Code() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars) *bool { return v.Code }).(pulumi.BoolPtrOutput)
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars) string {
		return v.Value
	}).(pulumi.StringOutput)
}

type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput) Index(i pulumi.IntInput) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars {
		return vs[0].([]ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars)[vs[1].(int)]
	}).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas struct {
	Code  *bool  `pulumi:"code"`
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArgs and ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArgs{...}
type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput
	ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArgs struct {
	Code  pulumi.BoolPtrInput `pulumi:"code"`
	Name  pulumi.StringInput  `pulumi:"name"`
	Value pulumi.StringInput  `pulumi:"value"`
}

func (ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArgs) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArgs) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput)
}

// ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArray and ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArray{ ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArgs{...} }
type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput
	ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput
}

type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArray []ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasInput

func (ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArray) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArray) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput) Code() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas) *bool { return v.Code }).(pulumi.BoolPtrOutput)
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput() ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput) ToApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput) Index(i pulumi.IntInput) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas {
		return vs[0].([]ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas)[vs[1].(int)]
	}).(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput)
}

// Helm holds helm specific options
type ApplicationStatusOperationStateOperationSyncSourceHelm struct {
	// FileParameters are file parameters to the helm template
	FileParameters []ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters `pulumi:"fileParameters"`
	// Parameters are parameters to the helm template
	Parameters []ApplicationStatusOperationStateOperationSyncSourceHelmParameters `pulumi:"parameters"`
	// The Helm release name. If omitted it will use the application name
	ReleaseName *string `pulumi:"releaseName"`
	// ValuesFiles is a list of Helm value files to use when generating a template
	ValueFiles []string `pulumi:"valueFiles"`
	// Values is Helm values, typically defined as a block
	Values *string `pulumi:"values"`
}

// ApplicationStatusOperationStateOperationSyncSourceHelmInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceHelmArgs and ApplicationStatusOperationStateOperationSyncSourceHelmOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceHelmInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceHelmArgs{...}
type ApplicationStatusOperationStateOperationSyncSourceHelmInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceHelmOutput() ApplicationStatusOperationStateOperationSyncSourceHelmOutput
	ToApplicationStatusOperationStateOperationSyncSourceHelmOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmOutput
}

// Helm holds helm specific options
type ApplicationStatusOperationStateOperationSyncSourceHelmArgs struct {
	// FileParameters are file parameters to the helm template
	FileParameters ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayInput `pulumi:"fileParameters"`
	// Parameters are parameters to the helm template
	Parameters ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayInput `pulumi:"parameters"`
	// The Helm release name. If omitted it will use the application name
	ReleaseName pulumi.StringPtrInput `pulumi:"releaseName"`
	// ValuesFiles is a list of Helm value files to use when generating a template
	ValueFiles pulumi.StringArrayInput `pulumi:"valueFiles"`
	// Values is Helm values, typically defined as a block
	Values pulumi.StringPtrInput `pulumi:"values"`
}

func (ApplicationStatusOperationStateOperationSyncSourceHelmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceHelm)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceHelmArgs) ToApplicationStatusOperationStateOperationSyncSourceHelmOutput() ApplicationStatusOperationStateOperationSyncSourceHelmOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceHelmOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceHelmArgs) ToApplicationStatusOperationStateOperationSyncSourceHelmOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceHelmOutput)
}

func (i ApplicationStatusOperationStateOperationSyncSourceHelmArgs) ToApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput() ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceHelmPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceHelmArgs) ToApplicationStatusOperationStateOperationSyncSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceHelmOutput).ToApplicationStatusOperationStateOperationSyncSourceHelmPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateOperationSyncSourceHelmPtrInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceHelmArgs, ApplicationStatusOperationStateOperationSyncSourceHelmPtr and ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceHelmPtrInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceHelmArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateOperationSyncSourceHelmPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput() ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput
	ToApplicationStatusOperationStateOperationSyncSourceHelmPtrOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput
}

type applicationStatusOperationStateOperationSyncSourceHelmPtrType ApplicationStatusOperationStateOperationSyncSourceHelmArgs

func ApplicationStatusOperationStateOperationSyncSourceHelmPtr(v *ApplicationStatusOperationStateOperationSyncSourceHelmArgs) ApplicationStatusOperationStateOperationSyncSourceHelmPtrInput {
	return (*applicationStatusOperationStateOperationSyncSourceHelmPtrType)(v)
}

func (*applicationStatusOperationStateOperationSyncSourceHelmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSourceHelm)(nil)).Elem()
}

func (i *applicationStatusOperationStateOperationSyncSourceHelmPtrType) ToApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput() ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceHelmPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateOperationSyncSourceHelmPtrType) ToApplicationStatusOperationStateOperationSyncSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput)
}

// Helm holds helm specific options
type ApplicationStatusOperationStateOperationSyncSourceHelmOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceHelmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceHelm)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmOutput) ToApplicationStatusOperationStateOperationSyncSourceHelmOutput() ApplicationStatusOperationStateOperationSyncSourceHelmOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmOutput) ToApplicationStatusOperationStateOperationSyncSourceHelmOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmOutput) ToApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput() ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput {
	return o.ToApplicationStatusOperationStateOperationSyncSourceHelmPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmOutput) ToApplicationStatusOperationStateOperationSyncSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceHelm) *ApplicationStatusOperationStateOperationSyncSourceHelm {
		return &v
	}).(ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput)
}

// FileParameters are file parameters to the helm template
func (o ApplicationStatusOperationStateOperationSyncSourceHelmOutput) FileParameters() ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceHelm) []ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters {
		return v.FileParameters
	}).(ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput)
}

// Parameters are parameters to the helm template
func (o ApplicationStatusOperationStateOperationSyncSourceHelmOutput) Parameters() ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceHelm) []ApplicationStatusOperationStateOperationSyncSourceHelmParameters {
		return v.Parameters
	}).(ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput)
}

// The Helm release name. If omitted it will use the application name
func (o ApplicationStatusOperationStateOperationSyncSourceHelmOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceHelm) *string { return v.ReleaseName }).(pulumi.StringPtrOutput)
}

// ValuesFiles is a list of Helm value files to use when generating a template
func (o ApplicationStatusOperationStateOperationSyncSourceHelmOutput) ValueFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceHelm) []string { return v.ValueFiles }).(pulumi.StringArrayOutput)
}

// Values is Helm values, typically defined as a block
func (o ApplicationStatusOperationStateOperationSyncSourceHelmOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceHelm) *string { return v.Values }).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSourceHelm)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput) ToApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput() ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput) ToApplicationStatusOperationStateOperationSyncSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput) Elem() ApplicationStatusOperationStateOperationSyncSourceHelmOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceHelm) ApplicationStatusOperationStateOperationSyncSourceHelm {
		return *v
	}).(ApplicationStatusOperationStateOperationSyncSourceHelmOutput)
}

// FileParameters are file parameters to the helm template
func (o ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput) FileParameters() ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceHelm) []ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters {
		if v == nil {
			return nil
		}
		return v.FileParameters
	}).(ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput)
}

// Parameters are parameters to the helm template
func (o ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput) Parameters() ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceHelm) []ApplicationStatusOperationStateOperationSyncSourceHelmParameters {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput)
}

// The Helm release name. If omitted it will use the application name
func (o ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceHelm) *string {
		if v == nil {
			return nil
		}
		return v.ReleaseName
	}).(pulumi.StringPtrOutput)
}

// ValuesFiles is a list of Helm value files to use when generating a template
func (o ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput) ValueFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceHelm) []string {
		if v == nil {
			return nil
		}
		return v.ValueFiles
	}).(pulumi.StringArrayOutput)
}

// Values is Helm values, typically defined as a block
func (o ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceHelm) *string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringPtrOutput)
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters struct {
	// Name is the name of the helm parameter
	Name *string `pulumi:"name"`
	// Path is the path value for the helm parameter
	Path *string `pulumi:"path"`
}

// ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArgs and ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArgs{...}
type ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput() ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput
	ToApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArgs struct {
	// Name is the name of the helm parameter
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path is the path value for the helm parameter
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArgs) ToApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput() ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArgs) ToApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput)
}

// ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArray and ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArray{ ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArgs{...} }
type ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput() ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput
	ToApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput
}

type ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArray []ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersInput

func (ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArray) ToApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput() ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArray) ToApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput)
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput) ToApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput() ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput) ToApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput {
	return o
}

// Name is the name of the helm parameter
func (o ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path is the path value for the helm parameter
func (o ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput) ToApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput() ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput) ToApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput) Index(i pulumi.IntInput) ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters {
		return vs[0].([]ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters)[vs[1].(int)]
	}).(ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput)
}

// HelmParameter is a parameter to a helm template
type ApplicationStatusOperationStateOperationSyncSourceHelmParameters struct {
	// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
	ForceString *bool `pulumi:"forceString"`
	// Name is the name of the helm parameter
	Name *string `pulumi:"name"`
	// Value is the value for the helm parameter
	Value *string `pulumi:"value"`
}

// ApplicationStatusOperationStateOperationSyncSourceHelmParametersInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceHelmParametersArgs and ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceHelmParametersInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceHelmParametersArgs{...}
type ApplicationStatusOperationStateOperationSyncSourceHelmParametersInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput() ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput
	ToApplicationStatusOperationStateOperationSyncSourceHelmParametersOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput
}

// HelmParameter is a parameter to a helm template
type ApplicationStatusOperationStateOperationSyncSourceHelmParametersArgs struct {
	// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
	ForceString pulumi.BoolPtrInput `pulumi:"forceString"`
	// Name is the name of the helm parameter
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value for the helm parameter
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApplicationStatusOperationStateOperationSyncSourceHelmParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceHelmParameters)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceHelmParametersArgs) ToApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput() ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceHelmParametersOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceHelmParametersArgs) ToApplicationStatusOperationStateOperationSyncSourceHelmParametersOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput)
}

// ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceHelmParametersArray and ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceHelmParametersArray{ ApplicationStatusOperationStateOperationSyncSourceHelmParametersArgs{...} }
type ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput() ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput
	ToApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput
}

type ApplicationStatusOperationStateOperationSyncSourceHelmParametersArray []ApplicationStatusOperationStateOperationSyncSourceHelmParametersInput

func (ApplicationStatusOperationStateOperationSyncSourceHelmParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateOperationSyncSourceHelmParameters)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceHelmParametersArray) ToApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput() ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceHelmParametersArray) ToApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput)
}

// HelmParameter is a parameter to a helm template
type ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceHelmParameters)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput) ToApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput() ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput) ToApplicationStatusOperationStateOperationSyncSourceHelmParametersOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput {
	return o
}

// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
func (o ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput) ForceString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceHelmParameters) *bool { return v.ForceString }).(pulumi.BoolPtrOutput)
}

// Name is the name of the helm parameter
func (o ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceHelmParameters) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value for the helm parameter
func (o ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceHelmParameters) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateOperationSyncSourceHelmParameters)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput) ToApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput() ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput) ToApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput) Index(i pulumi.IntInput) ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusOperationStateOperationSyncSourceHelmParameters {
		return vs[0].([]ApplicationStatusOperationStateOperationSyncSourceHelmParameters)[vs[1].(int)]
	}).(ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput)
}

// Ksonnet holds ksonnet specific options
type ApplicationStatusOperationStateOperationSyncSourceKsonnet struct {
	// Environment is a ksonnet application environment name
	Environment *string `pulumi:"environment"`
	// Parameters are a list of ksonnet component parameter override values
	Parameters []ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters `pulumi:"parameters"`
}

// ApplicationStatusOperationStateOperationSyncSourceKsonnetInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs and ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceKsonnetInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs{...}
type ApplicationStatusOperationStateOperationSyncSourceKsonnetInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceKsonnetOutput() ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput
	ToApplicationStatusOperationStateOperationSyncSourceKsonnetOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput
}

// Ksonnet holds ksonnet specific options
type ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs struct {
	// Environment is a ksonnet application environment name
	Environment pulumi.StringPtrInput `pulumi:"environment"`
	// Parameters are a list of ksonnet component parameter override values
	Parameters ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayInput `pulumi:"parameters"`
}

func (ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceKsonnet)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs) ToApplicationStatusOperationStateOperationSyncSourceKsonnetOutput() ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceKsonnetOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs) ToApplicationStatusOperationStateOperationSyncSourceKsonnetOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput)
}

func (i ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs) ToApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput() ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs) ToApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput).ToApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs, ApplicationStatusOperationStateOperationSyncSourceKsonnetPtr and ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput() ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput
	ToApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput
}

type applicationStatusOperationStateOperationSyncSourceKsonnetPtrType ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs

func ApplicationStatusOperationStateOperationSyncSourceKsonnetPtr(v *ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs) ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrInput {
	return (*applicationStatusOperationStateOperationSyncSourceKsonnetPtrType)(v)
}

func (*applicationStatusOperationStateOperationSyncSourceKsonnetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSourceKsonnet)(nil)).Elem()
}

func (i *applicationStatusOperationStateOperationSyncSourceKsonnetPtrType) ToApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput() ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateOperationSyncSourceKsonnetPtrType) ToApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput)
}

// Ksonnet holds ksonnet specific options
type ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceKsonnet)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput) ToApplicationStatusOperationStateOperationSyncSourceKsonnetOutput() ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput) ToApplicationStatusOperationStateOperationSyncSourceKsonnetOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput) ToApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput() ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput {
	return o.ToApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput) ToApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceKsonnet) *ApplicationStatusOperationStateOperationSyncSourceKsonnet {
		return &v
	}).(ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput)
}

// Environment is a ksonnet application environment name
func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceKsonnet) *string { return v.Environment }).(pulumi.StringPtrOutput)
}

// Parameters are a list of ksonnet component parameter override values
func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput) Parameters() ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceKsonnet) []ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters {
		return v.Parameters
	}).(ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput)
}

type ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSourceKsonnet)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput) ToApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput() ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput) ToApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput) Elem() ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceKsonnet) ApplicationStatusOperationStateOperationSyncSourceKsonnet {
		return *v
	}).(ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput)
}

// Environment is a ksonnet application environment name
func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceKsonnet) *string {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.StringPtrOutput)
}

// Parameters are a list of ksonnet component parameter override values
func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput) Parameters() ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceKsonnet) []ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput)
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters struct {
	Component *string `pulumi:"component"`
	Name      string  `pulumi:"name"`
	Value     string  `pulumi:"value"`
}

// ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArgs and ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArgs{...}
type ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput() ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput
	ToApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArgs struct {
	Component pulumi.StringPtrInput `pulumi:"component"`
	Name      pulumi.StringInput    `pulumi:"name"`
	Value     pulumi.StringInput    `pulumi:"value"`
}

func (ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArgs) ToApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput() ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArgs) ToApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput)
}

// ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArray and ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArray{ ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArgs{...} }
type ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput() ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput
	ToApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput
}

type ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArray []ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersInput

func (ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArray) ToApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput() ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArray) ToApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput)
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput) ToApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput() ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput) ToApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput) Component() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters) *string {
		return v.Component
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput) ToApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput() ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput) ToApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput) Index(i pulumi.IntInput) ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters {
		return vs[0].([]ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters)[vs[1].(int)]
	}).(ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput)
}

// Kustomize holds kustomize specific options
type ApplicationStatusOperationStateOperationSyncSourceKustomize struct {
	// CommonLabels adds additional kustomize commonLabels
	CommonLabels map[string]string `pulumi:"commonLabels"`
	// Images are kustomize image overrides
	Images []string `pulumi:"images"`
	// NamePrefix is a prefix appended to resources for kustomize apps
	NamePrefix *string `pulumi:"namePrefix"`
	// NameSuffix is a suffix appended to resources for kustomize apps
	NameSuffix *string `pulumi:"nameSuffix"`
	// Version contains optional Kustomize version
	Version *string `pulumi:"version"`
}

// ApplicationStatusOperationStateOperationSyncSourceKustomizeInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs and ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceKustomizeInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs{...}
type ApplicationStatusOperationStateOperationSyncSourceKustomizeInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceKustomizeOutput() ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput
	ToApplicationStatusOperationStateOperationSyncSourceKustomizeOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput
}

// Kustomize holds kustomize specific options
type ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs struct {
	// CommonLabels adds additional kustomize commonLabels
	CommonLabels pulumi.StringMapInput `pulumi:"commonLabels"`
	// Images are kustomize image overrides
	Images pulumi.StringArrayInput `pulumi:"images"`
	// NamePrefix is a prefix appended to resources for kustomize apps
	NamePrefix pulumi.StringPtrInput `pulumi:"namePrefix"`
	// NameSuffix is a suffix appended to resources for kustomize apps
	NameSuffix pulumi.StringPtrInput `pulumi:"nameSuffix"`
	// Version contains optional Kustomize version
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceKustomize)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs) ToApplicationStatusOperationStateOperationSyncSourceKustomizeOutput() ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceKustomizeOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs) ToApplicationStatusOperationStateOperationSyncSourceKustomizeOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput)
}

func (i ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs) ToApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput() ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs) ToApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput).ToApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateOperationSyncSourceKustomizePtrInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs, ApplicationStatusOperationStateOperationSyncSourceKustomizePtr and ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceKustomizePtrInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateOperationSyncSourceKustomizePtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput() ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput
	ToApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput
}

type applicationStatusOperationStateOperationSyncSourceKustomizePtrType ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs

func ApplicationStatusOperationStateOperationSyncSourceKustomizePtr(v *ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs) ApplicationStatusOperationStateOperationSyncSourceKustomizePtrInput {
	return (*applicationStatusOperationStateOperationSyncSourceKustomizePtrType)(v)
}

func (*applicationStatusOperationStateOperationSyncSourceKustomizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSourceKustomize)(nil)).Elem()
}

func (i *applicationStatusOperationStateOperationSyncSourceKustomizePtrType) ToApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput() ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateOperationSyncSourceKustomizePtrType) ToApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput)
}

// Kustomize holds kustomize specific options
type ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceKustomize)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput) ToApplicationStatusOperationStateOperationSyncSourceKustomizeOutput() ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput) ToApplicationStatusOperationStateOperationSyncSourceKustomizeOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput) ToApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput() ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput {
	return o.ToApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput) ToApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceKustomize) *ApplicationStatusOperationStateOperationSyncSourceKustomize {
		return &v
	}).(ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput)
}

// CommonLabels adds additional kustomize commonLabels
func (o ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput) CommonLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceKustomize) map[string]string {
		return v.CommonLabels
	}).(pulumi.StringMapOutput)
}

// Images are kustomize image overrides
func (o ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceKustomize) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// NamePrefix is a prefix appended to resources for kustomize apps
func (o ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceKustomize) *string { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

// NameSuffix is a suffix appended to resources for kustomize apps
func (o ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput) NameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceKustomize) *string { return v.NameSuffix }).(pulumi.StringPtrOutput)
}

// Version contains optional Kustomize version
func (o ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourceKustomize) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSourceKustomize)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput) ToApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput() ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput) ToApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput) Elem() ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceKustomize) ApplicationStatusOperationStateOperationSyncSourceKustomize {
		return *v
	}).(ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput)
}

// CommonLabels adds additional kustomize commonLabels
func (o ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput) CommonLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceKustomize) map[string]string {
		if v == nil {
			return nil
		}
		return v.CommonLabels
	}).(pulumi.StringMapOutput)
}

// Images are kustomize image overrides
func (o ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceKustomize) []string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringArrayOutput)
}

// NamePrefix is a prefix appended to resources for kustomize apps
func (o ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.NamePrefix
	}).(pulumi.StringPtrOutput)
}

// NameSuffix is a suffix appended to resources for kustomize apps
func (o ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput) NameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.NameSuffix
	}).(pulumi.StringPtrOutput)
}

// Version contains optional Kustomize version
func (o ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabels struct {
}

// ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsArgs and ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsArgs{...}
type ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutput() ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutput
	ToApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutput
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsArgs struct {
}

func (ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabels)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsArgs) ToApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutput() ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsArgs) ToApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutput)
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabels)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutput) ToApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutput() ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutput) ToApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutput {
	return o
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationStatusOperationStateOperationSyncSourcePlugin struct {
	Env  []ApplicationStatusOperationStateOperationSyncSourcePluginEnv `pulumi:"env"`
	Name *string                                                       `pulumi:"name"`
}

// ApplicationStatusOperationStateOperationSyncSourcePluginInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourcePluginArgs and ApplicationStatusOperationStateOperationSyncSourcePluginOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourcePluginInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourcePluginArgs{...}
type ApplicationStatusOperationStateOperationSyncSourcePluginInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourcePluginOutput() ApplicationStatusOperationStateOperationSyncSourcePluginOutput
	ToApplicationStatusOperationStateOperationSyncSourcePluginOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourcePluginOutput
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationStatusOperationStateOperationSyncSourcePluginArgs struct {
	Env  ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayInput `pulumi:"env"`
	Name pulumi.StringPtrInput                                                 `pulumi:"name"`
}

func (ApplicationStatusOperationStateOperationSyncSourcePluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourcePlugin)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourcePluginArgs) ToApplicationStatusOperationStateOperationSyncSourcePluginOutput() ApplicationStatusOperationStateOperationSyncSourcePluginOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourcePluginOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourcePluginArgs) ToApplicationStatusOperationStateOperationSyncSourcePluginOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourcePluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourcePluginOutput)
}

func (i ApplicationStatusOperationStateOperationSyncSourcePluginArgs) ToApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput() ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourcePluginPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourcePluginArgs) ToApplicationStatusOperationStateOperationSyncSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourcePluginOutput).ToApplicationStatusOperationStateOperationSyncSourcePluginPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateOperationSyncSourcePluginPtrInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourcePluginArgs, ApplicationStatusOperationStateOperationSyncSourcePluginPtr and ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourcePluginPtrInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourcePluginArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateOperationSyncSourcePluginPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput() ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput
	ToApplicationStatusOperationStateOperationSyncSourcePluginPtrOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput
}

type applicationStatusOperationStateOperationSyncSourcePluginPtrType ApplicationStatusOperationStateOperationSyncSourcePluginArgs

func ApplicationStatusOperationStateOperationSyncSourcePluginPtr(v *ApplicationStatusOperationStateOperationSyncSourcePluginArgs) ApplicationStatusOperationStateOperationSyncSourcePluginPtrInput {
	return (*applicationStatusOperationStateOperationSyncSourcePluginPtrType)(v)
}

func (*applicationStatusOperationStateOperationSyncSourcePluginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSourcePlugin)(nil)).Elem()
}

func (i *applicationStatusOperationStateOperationSyncSourcePluginPtrType) ToApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput() ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourcePluginPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateOperationSyncSourcePluginPtrType) ToApplicationStatusOperationStateOperationSyncSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationStatusOperationStateOperationSyncSourcePluginOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourcePluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourcePlugin)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourcePluginOutput) ToApplicationStatusOperationStateOperationSyncSourcePluginOutput() ApplicationStatusOperationStateOperationSyncSourcePluginOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourcePluginOutput) ToApplicationStatusOperationStateOperationSyncSourcePluginOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourcePluginOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourcePluginOutput) ToApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput() ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput {
	return o.ToApplicationStatusOperationStateOperationSyncSourcePluginPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateOperationSyncSourcePluginOutput) ToApplicationStatusOperationStateOperationSyncSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourcePlugin) *ApplicationStatusOperationStateOperationSyncSourcePlugin {
		return &v
	}).(ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput)
}
func (o ApplicationStatusOperationStateOperationSyncSourcePluginOutput) Env() ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourcePlugin) []ApplicationStatusOperationStateOperationSyncSourcePluginEnv {
		return v.Env
	}).(ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput)
}

func (o ApplicationStatusOperationStateOperationSyncSourcePluginOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourcePlugin) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSourcePlugin)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput) ToApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput() ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput) ToApplicationStatusOperationStateOperationSyncSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput) Elem() ApplicationStatusOperationStateOperationSyncSourcePluginOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourcePlugin) ApplicationStatusOperationStateOperationSyncSourcePlugin {
		return *v
	}).(ApplicationStatusOperationStateOperationSyncSourcePluginOutput)
}

func (o ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput) Env() ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourcePlugin) []ApplicationStatusOperationStateOperationSyncSourcePluginEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput)
}

func (o ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSourcePlugin) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateOperationSyncSourcePluginEnv struct {
	// the name, usually uppercase
	Name string `pulumi:"name"`
	// the value
	Value string `pulumi:"value"`
}

// ApplicationStatusOperationStateOperationSyncSourcePluginEnvInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourcePluginEnvArgs and ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourcePluginEnvInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourcePluginEnvArgs{...}
type ApplicationStatusOperationStateOperationSyncSourcePluginEnvInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput() ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput
	ToApplicationStatusOperationStateOperationSyncSourcePluginEnvOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput
}

type ApplicationStatusOperationStateOperationSyncSourcePluginEnvArgs struct {
	// the name, usually uppercase
	Name pulumi.StringInput `pulumi:"name"`
	// the value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApplicationStatusOperationStateOperationSyncSourcePluginEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourcePluginEnv)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourcePluginEnvArgs) ToApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput() ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourcePluginEnvOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourcePluginEnvArgs) ToApplicationStatusOperationStateOperationSyncSourcePluginEnvOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput)
}

// ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSourcePluginEnvArray and ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSourcePluginEnvArray{ ApplicationStatusOperationStateOperationSyncSourcePluginEnvArgs{...} }
type ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput() ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput
	ToApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput
}

type ApplicationStatusOperationStateOperationSyncSourcePluginEnvArray []ApplicationStatusOperationStateOperationSyncSourcePluginEnvInput

func (ApplicationStatusOperationStateOperationSyncSourcePluginEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateOperationSyncSourcePluginEnv)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSourcePluginEnvArray) ToApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput() ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSourcePluginEnvArray) ToApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput)
}

type ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSourcePluginEnv)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput) ToApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput() ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput) ToApplicationStatusOperationStateOperationSyncSourcePluginEnvOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput {
	return o
}

// the name, usually uppercase
func (o ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourcePluginEnv) string { return v.Name }).(pulumi.StringOutput)
}

// the value
func (o ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSourcePluginEnv) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateOperationSyncSourcePluginEnv)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput) ToApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput() ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput) ToApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput) Index(i pulumi.IntInput) ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusOperationStateOperationSyncSourcePluginEnv {
		return vs[0].([]ApplicationStatusOperationStateOperationSyncSourcePluginEnv)[vs[1].(int)]
	}).(ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput)
}

// SyncStrategy describes how to perform the sync
type ApplicationStatusOperationStateOperationSyncSyncStrategy struct {
	// Apply wil perform a `kubectl apply` to perform the sync.
	Apply *ApplicationStatusOperationStateOperationSyncSyncStrategyApply `pulumi:"apply"`
	// Hook will submit any referenced resources to perform the sync. This is the default strategy
	Hook *ApplicationStatusOperationStateOperationSyncSyncStrategyHook `pulumi:"hook"`
}

// ApplicationStatusOperationStateOperationSyncSyncStrategyInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSyncStrategyArgs and ApplicationStatusOperationStateOperationSyncSyncStrategyOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSyncStrategyInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSyncStrategyArgs{...}
type ApplicationStatusOperationStateOperationSyncSyncStrategyInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSyncStrategyOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyOutput
	ToApplicationStatusOperationStateOperationSyncSyncStrategyOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyOutput
}

// SyncStrategy describes how to perform the sync
type ApplicationStatusOperationStateOperationSyncSyncStrategyArgs struct {
	// Apply wil perform a `kubectl apply` to perform the sync.
	Apply ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrInput `pulumi:"apply"`
	// Hook will submit any referenced resources to perform the sync. This is the default strategy
	Hook ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrInput `pulumi:"hook"`
}

func (ApplicationStatusOperationStateOperationSyncSyncStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSyncStrategy)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSyncStrategyArgs) ToApplicationStatusOperationStateOperationSyncSyncStrategyOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSyncStrategyOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSyncStrategyArgs) ToApplicationStatusOperationStateOperationSyncSyncStrategyOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSyncStrategyOutput)
}

func (i ApplicationStatusOperationStateOperationSyncSyncStrategyArgs) ToApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSyncStrategyArgs) ToApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSyncStrategyOutput).ToApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateOperationSyncSyncStrategyPtrInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSyncStrategyArgs, ApplicationStatusOperationStateOperationSyncSyncStrategyPtr and ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSyncStrategyPtrInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSyncStrategyArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateOperationSyncSyncStrategyPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput
	ToApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput
}

type applicationStatusOperationStateOperationSyncSyncStrategyPtrType ApplicationStatusOperationStateOperationSyncSyncStrategyArgs

func ApplicationStatusOperationStateOperationSyncSyncStrategyPtr(v *ApplicationStatusOperationStateOperationSyncSyncStrategyArgs) ApplicationStatusOperationStateOperationSyncSyncStrategyPtrInput {
	return (*applicationStatusOperationStateOperationSyncSyncStrategyPtrType)(v)
}

func (*applicationStatusOperationStateOperationSyncSyncStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSyncStrategy)(nil)).Elem()
}

func (i *applicationStatusOperationStateOperationSyncSyncStrategyPtrType) ToApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateOperationSyncSyncStrategyPtrType) ToApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput)
}

// SyncStrategy describes how to perform the sync
type ApplicationStatusOperationStateOperationSyncSyncStrategyOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSyncStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSyncStrategy)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput {
	return o.ToApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSyncStrategy) *ApplicationStatusOperationStateOperationSyncSyncStrategy {
		return &v
	}).(ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput)
}

// Apply wil perform a `kubectl apply` to perform the sync.
func (o ApplicationStatusOperationStateOperationSyncSyncStrategyOutput) Apply() ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSyncStrategy) *ApplicationStatusOperationStateOperationSyncSyncStrategyApply {
		return v.Apply
	}).(ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput)
}

// Hook will submit any referenced resources to perform the sync. This is the default strategy
func (o ApplicationStatusOperationStateOperationSyncSyncStrategyOutput) Hook() ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSyncStrategy) *ApplicationStatusOperationStateOperationSyncSyncStrategyHook {
		return v.Hook
	}).(ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput)
}

type ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSyncStrategy)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput) Elem() ApplicationStatusOperationStateOperationSyncSyncStrategyOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSyncStrategy) ApplicationStatusOperationStateOperationSyncSyncStrategy {
		return *v
	}).(ApplicationStatusOperationStateOperationSyncSyncStrategyOutput)
}

// Apply wil perform a `kubectl apply` to perform the sync.
func (o ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput) Apply() ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSyncStrategy) *ApplicationStatusOperationStateOperationSyncSyncStrategyApply {
		if v == nil {
			return nil
		}
		return v.Apply
	}).(ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput)
}

// Hook will submit any referenced resources to perform the sync. This is the default strategy
func (o ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput) Hook() ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSyncStrategy) *ApplicationStatusOperationStateOperationSyncSyncStrategyHook {
		if v == nil {
			return nil
		}
		return v.Hook
	}).(ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput)
}

// Apply wil perform a `kubectl apply` to perform the sync.
type ApplicationStatusOperationStateOperationSyncSyncStrategyApply struct {
	// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
	Force *bool `pulumi:"force"`
}

// ApplicationStatusOperationStateOperationSyncSyncStrategyApplyInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs and ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSyncStrategyApplyInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs{...}
type ApplicationStatusOperationStateOperationSyncSyncStrategyApplyInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput
	ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput
}

// Apply wil perform a `kubectl apply` to perform the sync.
type ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs struct {
	// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
	Force pulumi.BoolPtrInput `pulumi:"force"`
}

func (ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSyncStrategyApply)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs) ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs) ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput)
}

func (i ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs) ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs) ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput).ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs, ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtr and ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput
	ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput
}

type applicationStatusOperationStateOperationSyncSyncStrategyApplyPtrType ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs

func ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtr(v *ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs) ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrInput {
	return (*applicationStatusOperationStateOperationSyncSyncStrategyApplyPtrType)(v)
}

func (*applicationStatusOperationStateOperationSyncSyncStrategyApplyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSyncStrategyApply)(nil)).Elem()
}

func (i *applicationStatusOperationStateOperationSyncSyncStrategyApplyPtrType) ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateOperationSyncSyncStrategyApplyPtrType) ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput)
}

// Apply wil perform a `kubectl apply` to perform the sync.
type ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSyncStrategyApply)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput {
	return o.ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSyncStrategyApply) *ApplicationStatusOperationStateOperationSyncSyncStrategyApply {
		return &v
	}).(ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput)
}

// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
func (o ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSyncStrategyApply) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

type ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSyncStrategyApply)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput) Elem() ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSyncStrategyApply) ApplicationStatusOperationStateOperationSyncSyncStrategyApply {
		return *v
	}).(ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput)
}

// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
func (o ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSyncStrategyApply) *bool {
		if v == nil {
			return nil
		}
		return v.Force
	}).(pulumi.BoolPtrOutput)
}

// Hook will submit any referenced resources to perform the sync. This is the default strategy
type ApplicationStatusOperationStateOperationSyncSyncStrategyHook struct {
	// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
	Force *bool `pulumi:"force"`
}

// ApplicationStatusOperationStateOperationSyncSyncStrategyHookInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs and ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSyncStrategyHookInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs{...}
type ApplicationStatusOperationStateOperationSyncSyncStrategyHookInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput
	ToApplicationStatusOperationStateOperationSyncSyncStrategyHookOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput
}

// Hook will submit any referenced resources to perform the sync. This is the default strategy
type ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs struct {
	// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
	Force pulumi.BoolPtrInput `pulumi:"force"`
}

func (ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSyncStrategyHook)(nil)).Elem()
}

func (i ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs) ToApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSyncStrategyHookOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs) ToApplicationStatusOperationStateOperationSyncSyncStrategyHookOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput)
}

func (i ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs) ToApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs) ToApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput).ToApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrInput is an input type that accepts ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs, ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtr and ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrInput` via:
//
//          ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput
	ToApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutputWithContext(context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput
}

type applicationStatusOperationStateOperationSyncSyncStrategyHookPtrType ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs

func ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtr(v *ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs) ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrInput {
	return (*applicationStatusOperationStateOperationSyncSyncStrategyHookPtrType)(v)
}

func (*applicationStatusOperationStateOperationSyncSyncStrategyHookPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSyncStrategyHook)(nil)).Elem()
}

func (i *applicationStatusOperationStateOperationSyncSyncStrategyHookPtrType) ToApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput {
	return i.ToApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateOperationSyncSyncStrategyHookPtrType) ToApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput)
}

// Hook will submit any referenced resources to perform the sync. This is the default strategy
type ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateOperationSyncSyncStrategyHook)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyHookOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput {
	return o.ToApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSyncStrategyHook) *ApplicationStatusOperationStateOperationSyncSyncStrategyHook {
		return &v
	}).(ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput)
}

// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
func (o ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateOperationSyncSyncStrategyHook) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

type ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateOperationSyncSyncStrategyHook)(nil)).Elem()
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput() ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput) ToApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput) Elem() ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSyncStrategyHook) ApplicationStatusOperationStateOperationSyncSyncStrategyHook {
		return *v
	}).(ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput)
}

// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
func (o ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateOperationSyncSyncStrategyHook) *bool {
		if v == nil {
			return nil
		}
		return v.Force
	}).(pulumi.BoolPtrOutput)
}

// SyncResult is the result of a Sync operation
type ApplicationStatusOperationStateSyncResult struct {
	// Resources holds the sync result of each individual resource
	Resources []ApplicationStatusOperationStateSyncResultResources `pulumi:"resources"`
	// Revision holds the revision of the sync
	Revision string `pulumi:"revision"`
	// Source records the application source information of the sync, used for comparing auto-sync
	Source *ApplicationStatusOperationStateSyncResultSource `pulumi:"source"`
}

// ApplicationStatusOperationStateSyncResultInput is an input type that accepts ApplicationStatusOperationStateSyncResultArgs and ApplicationStatusOperationStateSyncResultOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultInput` via:
//
//          ApplicationStatusOperationStateSyncResultArgs{...}
type ApplicationStatusOperationStateSyncResultInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultOutput() ApplicationStatusOperationStateSyncResultOutput
	ToApplicationStatusOperationStateSyncResultOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultOutput
}

// SyncResult is the result of a Sync operation
type ApplicationStatusOperationStateSyncResultArgs struct {
	// Resources holds the sync result of each individual resource
	Resources ApplicationStatusOperationStateSyncResultResourcesArrayInput `pulumi:"resources"`
	// Revision holds the revision of the sync
	Revision pulumi.StringInput `pulumi:"revision"`
	// Source records the application source information of the sync, used for comparing auto-sync
	Source ApplicationStatusOperationStateSyncResultSourcePtrInput `pulumi:"source"`
}

func (ApplicationStatusOperationStateSyncResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResult)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultArgs) ToApplicationStatusOperationStateSyncResultOutput() ApplicationStatusOperationStateSyncResultOutput {
	return i.ToApplicationStatusOperationStateSyncResultOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultArgs) ToApplicationStatusOperationStateSyncResultOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultOutput)
}

func (i ApplicationStatusOperationStateSyncResultArgs) ToApplicationStatusOperationStateSyncResultPtrOutput() ApplicationStatusOperationStateSyncResultPtrOutput {
	return i.ToApplicationStatusOperationStateSyncResultPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultArgs) ToApplicationStatusOperationStateSyncResultPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultOutput).ToApplicationStatusOperationStateSyncResultPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateSyncResultPtrInput is an input type that accepts ApplicationStatusOperationStateSyncResultArgs, ApplicationStatusOperationStateSyncResultPtr and ApplicationStatusOperationStateSyncResultPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultPtrInput` via:
//
//          ApplicationStatusOperationStateSyncResultArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateSyncResultPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultPtrOutput() ApplicationStatusOperationStateSyncResultPtrOutput
	ToApplicationStatusOperationStateSyncResultPtrOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultPtrOutput
}

type applicationStatusOperationStateSyncResultPtrType ApplicationStatusOperationStateSyncResultArgs

func ApplicationStatusOperationStateSyncResultPtr(v *ApplicationStatusOperationStateSyncResultArgs) ApplicationStatusOperationStateSyncResultPtrInput {
	return (*applicationStatusOperationStateSyncResultPtrType)(v)
}

func (*applicationStatusOperationStateSyncResultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateSyncResult)(nil)).Elem()
}

func (i *applicationStatusOperationStateSyncResultPtrType) ToApplicationStatusOperationStateSyncResultPtrOutput() ApplicationStatusOperationStateSyncResultPtrOutput {
	return i.ToApplicationStatusOperationStateSyncResultPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateSyncResultPtrType) ToApplicationStatusOperationStateSyncResultPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultPtrOutput)
}

// SyncResult is the result of a Sync operation
type ApplicationStatusOperationStateSyncResultOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResult)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultOutput) ToApplicationStatusOperationStateSyncResultOutput() ApplicationStatusOperationStateSyncResultOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultOutput) ToApplicationStatusOperationStateSyncResultOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultOutput) ToApplicationStatusOperationStateSyncResultPtrOutput() ApplicationStatusOperationStateSyncResultPtrOutput {
	return o.ToApplicationStatusOperationStateSyncResultPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateSyncResultOutput) ToApplicationStatusOperationStateSyncResultPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResult) *ApplicationStatusOperationStateSyncResult {
		return &v
	}).(ApplicationStatusOperationStateSyncResultPtrOutput)
}

// Resources holds the sync result of each individual resource
func (o ApplicationStatusOperationStateSyncResultOutput) Resources() ApplicationStatusOperationStateSyncResultResourcesArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResult) []ApplicationStatusOperationStateSyncResultResources {
		return v.Resources
	}).(ApplicationStatusOperationStateSyncResultResourcesArrayOutput)
}

// Revision holds the revision of the sync
func (o ApplicationStatusOperationStateSyncResultOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResult) string { return v.Revision }).(pulumi.StringOutput)
}

// Source records the application source information of the sync, used for comparing auto-sync
func (o ApplicationStatusOperationStateSyncResultOutput) Source() ApplicationStatusOperationStateSyncResultSourcePtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResult) *ApplicationStatusOperationStateSyncResultSource {
		return v.Source
	}).(ApplicationStatusOperationStateSyncResultSourcePtrOutput)
}

type ApplicationStatusOperationStateSyncResultPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateSyncResult)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultPtrOutput) ToApplicationStatusOperationStateSyncResultPtrOutput() ApplicationStatusOperationStateSyncResultPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultPtrOutput) ToApplicationStatusOperationStateSyncResultPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultPtrOutput) Elem() ApplicationStatusOperationStateSyncResultOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResult) ApplicationStatusOperationStateSyncResult {
		return *v
	}).(ApplicationStatusOperationStateSyncResultOutput)
}

// Resources holds the sync result of each individual resource
func (o ApplicationStatusOperationStateSyncResultPtrOutput) Resources() ApplicationStatusOperationStateSyncResultResourcesArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResult) []ApplicationStatusOperationStateSyncResultResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ApplicationStatusOperationStateSyncResultResourcesArrayOutput)
}

// Revision holds the revision of the sync
func (o ApplicationStatusOperationStateSyncResultPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResult) *string {
		if v == nil {
			return nil
		}
		return &v.Revision
	}).(pulumi.StringPtrOutput)
}

// Source records the application source information of the sync, used for comparing auto-sync
func (o ApplicationStatusOperationStateSyncResultPtrOutput) Source() ApplicationStatusOperationStateSyncResultSourcePtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResult) *ApplicationStatusOperationStateSyncResultSource {
		if v == nil {
			return nil
		}
		return v.Source
	}).(ApplicationStatusOperationStateSyncResultSourcePtrOutput)
}

// ResourceResult holds the operation result details of a specific resource
type ApplicationStatusOperationStateSyncResultResources struct {
	Group string `pulumi:"group"`
	// the state of any operation associated with this resource OR hook note: can contain values for non-hook resources
	HookPhase *string `pulumi:"hookPhase"`
	// the type of the hook, empty for non-hook resources
	HookType *string `pulumi:"hookType"`
	Kind     string  `pulumi:"kind"`
	// message for the last sync OR operation
	Message   *string `pulumi:"message"`
	Name      string  `pulumi:"name"`
	Namespace string  `pulumi:"namespace"`
	// the final result of the sync, this is be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
	Status *string `pulumi:"status"`
	// indicates the particular phase of the sync that this is for
	SyncPhase *string `pulumi:"syncPhase"`
	Version   string  `pulumi:"version"`
}

// ApplicationStatusOperationStateSyncResultResourcesInput is an input type that accepts ApplicationStatusOperationStateSyncResultResourcesArgs and ApplicationStatusOperationStateSyncResultResourcesOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultResourcesInput` via:
//
//          ApplicationStatusOperationStateSyncResultResourcesArgs{...}
type ApplicationStatusOperationStateSyncResultResourcesInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultResourcesOutput() ApplicationStatusOperationStateSyncResultResourcesOutput
	ToApplicationStatusOperationStateSyncResultResourcesOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultResourcesOutput
}

// ResourceResult holds the operation result details of a specific resource
type ApplicationStatusOperationStateSyncResultResourcesArgs struct {
	Group pulumi.StringInput `pulumi:"group"`
	// the state of any operation associated with this resource OR hook note: can contain values for non-hook resources
	HookPhase pulumi.StringPtrInput `pulumi:"hookPhase"`
	// the type of the hook, empty for non-hook resources
	HookType pulumi.StringPtrInput `pulumi:"hookType"`
	Kind     pulumi.StringInput    `pulumi:"kind"`
	// message for the last sync OR operation
	Message   pulumi.StringPtrInput `pulumi:"message"`
	Name      pulumi.StringInput    `pulumi:"name"`
	Namespace pulumi.StringInput    `pulumi:"namespace"`
	// the final result of the sync, this is be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
	Status pulumi.StringPtrInput `pulumi:"status"`
	// indicates the particular phase of the sync that this is for
	SyncPhase pulumi.StringPtrInput `pulumi:"syncPhase"`
	Version   pulumi.StringInput    `pulumi:"version"`
}

func (ApplicationStatusOperationStateSyncResultResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultResources)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultResourcesArgs) ToApplicationStatusOperationStateSyncResultResourcesOutput() ApplicationStatusOperationStateSyncResultResourcesOutput {
	return i.ToApplicationStatusOperationStateSyncResultResourcesOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultResourcesArgs) ToApplicationStatusOperationStateSyncResultResourcesOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultResourcesOutput)
}

// ApplicationStatusOperationStateSyncResultResourcesArrayInput is an input type that accepts ApplicationStatusOperationStateSyncResultResourcesArray and ApplicationStatusOperationStateSyncResultResourcesArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultResourcesArrayInput` via:
//
//          ApplicationStatusOperationStateSyncResultResourcesArray{ ApplicationStatusOperationStateSyncResultResourcesArgs{...} }
type ApplicationStatusOperationStateSyncResultResourcesArrayInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultResourcesArrayOutput() ApplicationStatusOperationStateSyncResultResourcesArrayOutput
	ToApplicationStatusOperationStateSyncResultResourcesArrayOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultResourcesArrayOutput
}

type ApplicationStatusOperationStateSyncResultResourcesArray []ApplicationStatusOperationStateSyncResultResourcesInput

func (ApplicationStatusOperationStateSyncResultResourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateSyncResultResources)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultResourcesArray) ToApplicationStatusOperationStateSyncResultResourcesArrayOutput() ApplicationStatusOperationStateSyncResultResourcesArrayOutput {
	return i.ToApplicationStatusOperationStateSyncResultResourcesArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultResourcesArray) ToApplicationStatusOperationStateSyncResultResourcesArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultResourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultResourcesArrayOutput)
}

// ResourceResult holds the operation result details of a specific resource
type ApplicationStatusOperationStateSyncResultResourcesOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultResources)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultResourcesOutput) ToApplicationStatusOperationStateSyncResultResourcesOutput() ApplicationStatusOperationStateSyncResultResourcesOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultResourcesOutput) ToApplicationStatusOperationStateSyncResultResourcesOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultResourcesOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultResourcesOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultResources) string { return v.Group }).(pulumi.StringOutput)
}

// the state of any operation associated with this resource OR hook note: can contain values for non-hook resources
func (o ApplicationStatusOperationStateSyncResultResourcesOutput) HookPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultResources) *string { return v.HookPhase }).(pulumi.StringPtrOutput)
}

// the type of the hook, empty for non-hook resources
func (o ApplicationStatusOperationStateSyncResultResourcesOutput) HookType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultResources) *string { return v.HookType }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusOperationStateSyncResultResourcesOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultResources) string { return v.Kind }).(pulumi.StringOutput)
}

// message for the last sync OR operation
func (o ApplicationStatusOperationStateSyncResultResourcesOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultResources) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusOperationStateSyncResultResourcesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultResources) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusOperationStateSyncResultResourcesOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultResources) string { return v.Namespace }).(pulumi.StringOutput)
}

// the final result of the sync, this is be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
func (o ApplicationStatusOperationStateSyncResultResourcesOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultResources) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// indicates the particular phase of the sync that this is for
func (o ApplicationStatusOperationStateSyncResultResourcesOutput) SyncPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultResources) *string { return v.SyncPhase }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusOperationStateSyncResultResourcesOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultResources) string { return v.Version }).(pulumi.StringOutput)
}

type ApplicationStatusOperationStateSyncResultResourcesArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultResourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateSyncResultResources)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultResourcesArrayOutput) ToApplicationStatusOperationStateSyncResultResourcesArrayOutput() ApplicationStatusOperationStateSyncResultResourcesArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultResourcesArrayOutput) ToApplicationStatusOperationStateSyncResultResourcesArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultResourcesArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultResourcesArrayOutput) Index(i pulumi.IntInput) ApplicationStatusOperationStateSyncResultResourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusOperationStateSyncResultResources {
		return vs[0].([]ApplicationStatusOperationStateSyncResultResources)[vs[1].(int)]
	}).(ApplicationStatusOperationStateSyncResultResourcesOutput)
}

// Source records the application source information of the sync, used for comparing auto-sync
type ApplicationStatusOperationStateSyncResultSource struct {
	// Chart is a Helm chart name
	Chart *string `pulumi:"chart"`
	// Directory holds path/directory specific options
	Directory *ApplicationStatusOperationStateSyncResultSourceDirectory `pulumi:"directory"`
	// Helm holds helm specific options
	Helm *ApplicationStatusOperationStateSyncResultSourceHelm `pulumi:"helm"`
	// Ksonnet holds ksonnet specific options
	Ksonnet *ApplicationStatusOperationStateSyncResultSourceKsonnet `pulumi:"ksonnet"`
	// Kustomize holds kustomize specific options
	Kustomize *ApplicationStatusOperationStateSyncResultSourceKustomize `pulumi:"kustomize"`
	// Path is a directory path within the Git repository
	Path *string `pulumi:"path"`
	// ConfigManagementPlugin holds config management plugin specific options
	Plugin *ApplicationStatusOperationStateSyncResultSourcePlugin `pulumi:"plugin"`
	// RepoURL is the repository URL of the application manifests
	RepoURL string `pulumi:"repoURL"`
	// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
	TargetRevision *string `pulumi:"targetRevision"`
}

// ApplicationStatusOperationStateSyncResultSourceInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceArgs and ApplicationStatusOperationStateSyncResultSourceOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceArgs{...}
type ApplicationStatusOperationStateSyncResultSourceInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceOutput() ApplicationStatusOperationStateSyncResultSourceOutput
	ToApplicationStatusOperationStateSyncResultSourceOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceOutput
}

// Source records the application source information of the sync, used for comparing auto-sync
type ApplicationStatusOperationStateSyncResultSourceArgs struct {
	// Chart is a Helm chart name
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// Directory holds path/directory specific options
	Directory ApplicationStatusOperationStateSyncResultSourceDirectoryPtrInput `pulumi:"directory"`
	// Helm holds helm specific options
	Helm ApplicationStatusOperationStateSyncResultSourceHelmPtrInput `pulumi:"helm"`
	// Ksonnet holds ksonnet specific options
	Ksonnet ApplicationStatusOperationStateSyncResultSourceKsonnetPtrInput `pulumi:"ksonnet"`
	// Kustomize holds kustomize specific options
	Kustomize ApplicationStatusOperationStateSyncResultSourceKustomizePtrInput `pulumi:"kustomize"`
	// Path is a directory path within the Git repository
	Path pulumi.StringPtrInput `pulumi:"path"`
	// ConfigManagementPlugin holds config management plugin specific options
	Plugin ApplicationStatusOperationStateSyncResultSourcePluginPtrInput `pulumi:"plugin"`
	// RepoURL is the repository URL of the application manifests
	RepoURL pulumi.StringInput `pulumi:"repoURL"`
	// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
	TargetRevision pulumi.StringPtrInput `pulumi:"targetRevision"`
}

func (ApplicationStatusOperationStateSyncResultSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSource)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceArgs) ToApplicationStatusOperationStateSyncResultSourceOutput() ApplicationStatusOperationStateSyncResultSourceOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceArgs) ToApplicationStatusOperationStateSyncResultSourceOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceOutput)
}

func (i ApplicationStatusOperationStateSyncResultSourceArgs) ToApplicationStatusOperationStateSyncResultSourcePtrOutput() ApplicationStatusOperationStateSyncResultSourcePtrOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourcePtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceArgs) ToApplicationStatusOperationStateSyncResultSourcePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceOutput).ToApplicationStatusOperationStateSyncResultSourcePtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateSyncResultSourcePtrInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceArgs, ApplicationStatusOperationStateSyncResultSourcePtr and ApplicationStatusOperationStateSyncResultSourcePtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourcePtrInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateSyncResultSourcePtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourcePtrOutput() ApplicationStatusOperationStateSyncResultSourcePtrOutput
	ToApplicationStatusOperationStateSyncResultSourcePtrOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourcePtrOutput
}

type applicationStatusOperationStateSyncResultSourcePtrType ApplicationStatusOperationStateSyncResultSourceArgs

func ApplicationStatusOperationStateSyncResultSourcePtr(v *ApplicationStatusOperationStateSyncResultSourceArgs) ApplicationStatusOperationStateSyncResultSourcePtrInput {
	return (*applicationStatusOperationStateSyncResultSourcePtrType)(v)
}

func (*applicationStatusOperationStateSyncResultSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateSyncResultSource)(nil)).Elem()
}

func (i *applicationStatusOperationStateSyncResultSourcePtrType) ToApplicationStatusOperationStateSyncResultSourcePtrOutput() ApplicationStatusOperationStateSyncResultSourcePtrOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourcePtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateSyncResultSourcePtrType) ToApplicationStatusOperationStateSyncResultSourcePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourcePtrOutput)
}

// Source records the application source information of the sync, used for comparing auto-sync
type ApplicationStatusOperationStateSyncResultSourceOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSource)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceOutput) ToApplicationStatusOperationStateSyncResultSourceOutput() ApplicationStatusOperationStateSyncResultSourceOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceOutput) ToApplicationStatusOperationStateSyncResultSourceOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceOutput) ToApplicationStatusOperationStateSyncResultSourcePtrOutput() ApplicationStatusOperationStateSyncResultSourcePtrOutput {
	return o.ToApplicationStatusOperationStateSyncResultSourcePtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateSyncResultSourceOutput) ToApplicationStatusOperationStateSyncResultSourcePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourcePtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSource) *ApplicationStatusOperationStateSyncResultSource {
		return &v
	}).(ApplicationStatusOperationStateSyncResultSourcePtrOutput)
}

// Chart is a Helm chart name
func (o ApplicationStatusOperationStateSyncResultSourceOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSource) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
func (o ApplicationStatusOperationStateSyncResultSourceOutput) Directory() ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSource) *ApplicationStatusOperationStateSyncResultSourceDirectory {
		return v.Directory
	}).(ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput)
}

// Helm holds helm specific options
func (o ApplicationStatusOperationStateSyncResultSourceOutput) Helm() ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSource) *ApplicationStatusOperationStateSyncResultSourceHelm {
		return v.Helm
	}).(ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput)
}

// Ksonnet holds ksonnet specific options
func (o ApplicationStatusOperationStateSyncResultSourceOutput) Ksonnet() ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSource) *ApplicationStatusOperationStateSyncResultSourceKsonnet {
		return v.Ksonnet
	}).(ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput)
}

// Kustomize holds kustomize specific options
func (o ApplicationStatusOperationStateSyncResultSourceOutput) Kustomize() ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSource) *ApplicationStatusOperationStateSyncResultSourceKustomize {
		return v.Kustomize
	}).(ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput)
}

// Path is a directory path within the Git repository
func (o ApplicationStatusOperationStateSyncResultSourceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSource) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
func (o ApplicationStatusOperationStateSyncResultSourceOutput) Plugin() ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSource) *ApplicationStatusOperationStateSyncResultSourcePlugin {
		return v.Plugin
	}).(ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput)
}

// RepoURL is the repository URL of the application manifests
func (o ApplicationStatusOperationStateSyncResultSourceOutput) RepoURL() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSource) string { return v.RepoURL }).(pulumi.StringOutput)
}

// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
func (o ApplicationStatusOperationStateSyncResultSourceOutput) TargetRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSource) *string { return v.TargetRevision }).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateSyncResultSourcePtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateSyncResultSource)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourcePtrOutput) ToApplicationStatusOperationStateSyncResultSourcePtrOutput() ApplicationStatusOperationStateSyncResultSourcePtrOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourcePtrOutput) ToApplicationStatusOperationStateSyncResultSourcePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourcePtrOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourcePtrOutput) Elem() ApplicationStatusOperationStateSyncResultSourceOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSource) ApplicationStatusOperationStateSyncResultSource {
		return *v
	}).(ApplicationStatusOperationStateSyncResultSourceOutput)
}

// Chart is a Helm chart name
func (o ApplicationStatusOperationStateSyncResultSourcePtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSource) *string {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
func (o ApplicationStatusOperationStateSyncResultSourcePtrOutput) Directory() ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSource) *ApplicationStatusOperationStateSyncResultSourceDirectory {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput)
}

// Helm holds helm specific options
func (o ApplicationStatusOperationStateSyncResultSourcePtrOutput) Helm() ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSource) *ApplicationStatusOperationStateSyncResultSourceHelm {
		if v == nil {
			return nil
		}
		return v.Helm
	}).(ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput)
}

// Ksonnet holds ksonnet specific options
func (o ApplicationStatusOperationStateSyncResultSourcePtrOutput) Ksonnet() ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSource) *ApplicationStatusOperationStateSyncResultSourceKsonnet {
		if v == nil {
			return nil
		}
		return v.Ksonnet
	}).(ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput)
}

// Kustomize holds kustomize specific options
func (o ApplicationStatusOperationStateSyncResultSourcePtrOutput) Kustomize() ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSource) *ApplicationStatusOperationStateSyncResultSourceKustomize {
		if v == nil {
			return nil
		}
		return v.Kustomize
	}).(ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput)
}

// Path is a directory path within the Git repository
func (o ApplicationStatusOperationStateSyncResultSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSource) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
func (o ApplicationStatusOperationStateSyncResultSourcePtrOutput) Plugin() ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSource) *ApplicationStatusOperationStateSyncResultSourcePlugin {
		if v == nil {
			return nil
		}
		return v.Plugin
	}).(ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput)
}

// RepoURL is the repository URL of the application manifests
func (o ApplicationStatusOperationStateSyncResultSourcePtrOutput) RepoURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSource) *string {
		if v == nil {
			return nil
		}
		return &v.RepoURL
	}).(pulumi.StringPtrOutput)
}

// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
func (o ApplicationStatusOperationStateSyncResultSourcePtrOutput) TargetRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSource) *string {
		if v == nil {
			return nil
		}
		return v.TargetRevision
	}).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
type ApplicationStatusOperationStateSyncResultSourceDirectory struct {
	// ApplicationSourceJsonnet holds jsonnet specific options
	Jsonnet *ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet `pulumi:"jsonnet"`
	Recurse *bool                                                            `pulumi:"recurse"`
}

// ApplicationStatusOperationStateSyncResultSourceDirectoryInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceDirectoryArgs and ApplicationStatusOperationStateSyncResultSourceDirectoryOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceDirectoryInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceDirectoryArgs{...}
type ApplicationStatusOperationStateSyncResultSourceDirectoryInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceDirectoryOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryOutput
	ToApplicationStatusOperationStateSyncResultSourceDirectoryOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryOutput
}

// Directory holds path/directory specific options
type ApplicationStatusOperationStateSyncResultSourceDirectoryArgs struct {
	// ApplicationSourceJsonnet holds jsonnet specific options
	Jsonnet ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrInput `pulumi:"jsonnet"`
	Recurse pulumi.BoolPtrInput                                                     `pulumi:"recurse"`
}

func (ApplicationStatusOperationStateSyncResultSourceDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceDirectory)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceDirectoryArgs) ToApplicationStatusOperationStateSyncResultSourceDirectoryOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceDirectoryOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceDirectoryArgs) ToApplicationStatusOperationStateSyncResultSourceDirectoryOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceDirectoryOutput)
}

func (i ApplicationStatusOperationStateSyncResultSourceDirectoryArgs) ToApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceDirectoryArgs) ToApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceDirectoryOutput).ToApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateSyncResultSourceDirectoryPtrInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceDirectoryArgs, ApplicationStatusOperationStateSyncResultSourceDirectoryPtr and ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceDirectoryPtrInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceDirectoryArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateSyncResultSourceDirectoryPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput
	ToApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput
}

type applicationStatusOperationStateSyncResultSourceDirectoryPtrType ApplicationStatusOperationStateSyncResultSourceDirectoryArgs

func ApplicationStatusOperationStateSyncResultSourceDirectoryPtr(v *ApplicationStatusOperationStateSyncResultSourceDirectoryArgs) ApplicationStatusOperationStateSyncResultSourceDirectoryPtrInput {
	return (*applicationStatusOperationStateSyncResultSourceDirectoryPtrType)(v)
}

func (*applicationStatusOperationStateSyncResultSourceDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateSyncResultSourceDirectory)(nil)).Elem()
}

func (i *applicationStatusOperationStateSyncResultSourceDirectoryPtrType) ToApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateSyncResultSourceDirectoryPtrType) ToApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput)
}

// Directory holds path/directory specific options
type ApplicationStatusOperationStateSyncResultSourceDirectoryOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceDirectory)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput {
	return o.ToApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceDirectory) *ApplicationStatusOperationStateSyncResultSourceDirectory {
		return &v
	}).(ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
func (o ApplicationStatusOperationStateSyncResultSourceDirectoryOutput) Jsonnet() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceDirectory) *ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet {
		return v.Jsonnet
	}).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput)
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryOutput) Recurse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceDirectory) *bool { return v.Recurse }).(pulumi.BoolPtrOutput)
}

type ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateSyncResultSourceDirectory)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput) Elem() ApplicationStatusOperationStateSyncResultSourceDirectoryOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceDirectory) ApplicationStatusOperationStateSyncResultSourceDirectory {
		return *v
	}).(ApplicationStatusOperationStateSyncResultSourceDirectoryOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
func (o ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput) Jsonnet() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceDirectory) *ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet {
		if v == nil {
			return nil
		}
		return v.Jsonnet
	}).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput)
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput) Recurse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceDirectory) *bool {
		if v == nil {
			return nil
		}
		return v.Recurse
	}).(pulumi.BoolPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet struct {
	// ExtVars is a list of Jsonnet External Variables
	ExtVars []ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars `pulumi:"extVars"`
	// Additional library search dirs
	Libs []string `pulumi:"libs"`
	// TLAS is a list of Jsonnet Top-level Arguments
	Tlas []ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas `pulumi:"tlas"`
}

// ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs and ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs{...}
type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput
	ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs struct {
	// ExtVars is a list of Jsonnet External Variables
	ExtVars ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayInput `pulumi:"extVars"`
	// Additional library search dirs
	Libs pulumi.StringArrayInput `pulumi:"libs"`
	// TLAS is a list of Jsonnet Top-level Arguments
	Tlas ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayInput `pulumi:"tlas"`
}

func (ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput)
}

func (i ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput).ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs, ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtr and ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput
	ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput
}

type applicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrType ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs

func ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtr(v *ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrInput {
	return (*applicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrType)(v)
}

func (*applicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet)(nil)).Elem()
}

func (i *applicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrType) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrType) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput {
	return o.ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet) *ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet {
		return &v
	}).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput)
}

// ExtVars is a list of Jsonnet External Variables
func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput) ExtVars() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet) []ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars {
		return v.ExtVars
	}).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput)
}

// Additional library search dirs
func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput) Libs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet) []string { return v.Libs }).(pulumi.StringArrayOutput)
}

// TLAS is a list of Jsonnet Top-level Arguments
func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput) Tlas() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet) []ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas {
		return v.Tlas
	}).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput)
}

type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput) Elem() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet {
		return *v
	}).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput)
}

// ExtVars is a list of Jsonnet External Variables
func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput) ExtVars() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet) []ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars {
		if v == nil {
			return nil
		}
		return v.ExtVars
	}).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput)
}

// Additional library search dirs
func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput) Libs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet) []string {
		if v == nil {
			return nil
		}
		return v.Libs
	}).(pulumi.StringArrayOutput)
}

// TLAS is a list of Jsonnet Top-level Arguments
func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput) Tlas() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet) []ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas {
		if v == nil {
			return nil
		}
		return v.Tlas
	}).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars struct {
	Code  *bool  `pulumi:"code"`
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArgs and ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArgs{...}
type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput
	ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArgs struct {
	Code  pulumi.BoolPtrInput `pulumi:"code"`
	Name  pulumi.StringInput  `pulumi:"name"`
	Value pulumi.StringInput  `pulumi:"value"`
}

func (ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArgs) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArgs) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput)
}

// ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArray and ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArray{ ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArgs{...} }
type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput
	ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput
}

type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArray []ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsInput

func (ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArray) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArray) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput) Code() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars) *bool { return v.Code }).(pulumi.BoolPtrOutput)
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput) Index(i pulumi.IntInput) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars {
		return vs[0].([]ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars)[vs[1].(int)]
	}).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas struct {
	Code  *bool  `pulumi:"code"`
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArgs and ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArgs{...}
type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput
	ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArgs struct {
	Code  pulumi.BoolPtrInput `pulumi:"code"`
	Name  pulumi.StringInput  `pulumi:"name"`
	Value pulumi.StringInput  `pulumi:"value"`
}

func (ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArgs) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArgs) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput)
}

// ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArray and ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArray{ ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArgs{...} }
type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput
	ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput
}

type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArray []ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasInput

func (ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArray) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArray) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput) Code() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas) *bool { return v.Code }).(pulumi.BoolPtrOutput)
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput() ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput) ToApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput) Index(i pulumi.IntInput) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas {
		return vs[0].([]ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas)[vs[1].(int)]
	}).(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput)
}

// Helm holds helm specific options
type ApplicationStatusOperationStateSyncResultSourceHelm struct {
	// FileParameters are file parameters to the helm template
	FileParameters []ApplicationStatusOperationStateSyncResultSourceHelmFileParameters `pulumi:"fileParameters"`
	// Parameters are parameters to the helm template
	Parameters []ApplicationStatusOperationStateSyncResultSourceHelmParameters `pulumi:"parameters"`
	// The Helm release name. If omitted it will use the application name
	ReleaseName *string `pulumi:"releaseName"`
	// ValuesFiles is a list of Helm value files to use when generating a template
	ValueFiles []string `pulumi:"valueFiles"`
	// Values is Helm values, typically defined as a block
	Values *string `pulumi:"values"`
}

// ApplicationStatusOperationStateSyncResultSourceHelmInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceHelmArgs and ApplicationStatusOperationStateSyncResultSourceHelmOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceHelmInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceHelmArgs{...}
type ApplicationStatusOperationStateSyncResultSourceHelmInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceHelmOutput() ApplicationStatusOperationStateSyncResultSourceHelmOutput
	ToApplicationStatusOperationStateSyncResultSourceHelmOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceHelmOutput
}

// Helm holds helm specific options
type ApplicationStatusOperationStateSyncResultSourceHelmArgs struct {
	// FileParameters are file parameters to the helm template
	FileParameters ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayInput `pulumi:"fileParameters"`
	// Parameters are parameters to the helm template
	Parameters ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayInput `pulumi:"parameters"`
	// The Helm release name. If omitted it will use the application name
	ReleaseName pulumi.StringPtrInput `pulumi:"releaseName"`
	// ValuesFiles is a list of Helm value files to use when generating a template
	ValueFiles pulumi.StringArrayInput `pulumi:"valueFiles"`
	// Values is Helm values, typically defined as a block
	Values pulumi.StringPtrInput `pulumi:"values"`
}

func (ApplicationStatusOperationStateSyncResultSourceHelmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceHelm)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceHelmArgs) ToApplicationStatusOperationStateSyncResultSourceHelmOutput() ApplicationStatusOperationStateSyncResultSourceHelmOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceHelmOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceHelmArgs) ToApplicationStatusOperationStateSyncResultSourceHelmOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceHelmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceHelmOutput)
}

func (i ApplicationStatusOperationStateSyncResultSourceHelmArgs) ToApplicationStatusOperationStateSyncResultSourceHelmPtrOutput() ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceHelmPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceHelmArgs) ToApplicationStatusOperationStateSyncResultSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceHelmOutput).ToApplicationStatusOperationStateSyncResultSourceHelmPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateSyncResultSourceHelmPtrInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceHelmArgs, ApplicationStatusOperationStateSyncResultSourceHelmPtr and ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceHelmPtrInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceHelmArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateSyncResultSourceHelmPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceHelmPtrOutput() ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput
	ToApplicationStatusOperationStateSyncResultSourceHelmPtrOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput
}

type applicationStatusOperationStateSyncResultSourceHelmPtrType ApplicationStatusOperationStateSyncResultSourceHelmArgs

func ApplicationStatusOperationStateSyncResultSourceHelmPtr(v *ApplicationStatusOperationStateSyncResultSourceHelmArgs) ApplicationStatusOperationStateSyncResultSourceHelmPtrInput {
	return (*applicationStatusOperationStateSyncResultSourceHelmPtrType)(v)
}

func (*applicationStatusOperationStateSyncResultSourceHelmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateSyncResultSourceHelm)(nil)).Elem()
}

func (i *applicationStatusOperationStateSyncResultSourceHelmPtrType) ToApplicationStatusOperationStateSyncResultSourceHelmPtrOutput() ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceHelmPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateSyncResultSourceHelmPtrType) ToApplicationStatusOperationStateSyncResultSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput)
}

// Helm holds helm specific options
type ApplicationStatusOperationStateSyncResultSourceHelmOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceHelmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceHelm)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmOutput) ToApplicationStatusOperationStateSyncResultSourceHelmOutput() ApplicationStatusOperationStateSyncResultSourceHelmOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmOutput) ToApplicationStatusOperationStateSyncResultSourceHelmOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceHelmOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmOutput) ToApplicationStatusOperationStateSyncResultSourceHelmPtrOutput() ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput {
	return o.ToApplicationStatusOperationStateSyncResultSourceHelmPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmOutput) ToApplicationStatusOperationStateSyncResultSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceHelm) *ApplicationStatusOperationStateSyncResultSourceHelm {
		return &v
	}).(ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput)
}

// FileParameters are file parameters to the helm template
func (o ApplicationStatusOperationStateSyncResultSourceHelmOutput) FileParameters() ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceHelm) []ApplicationStatusOperationStateSyncResultSourceHelmFileParameters {
		return v.FileParameters
	}).(ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput)
}

// Parameters are parameters to the helm template
func (o ApplicationStatusOperationStateSyncResultSourceHelmOutput) Parameters() ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceHelm) []ApplicationStatusOperationStateSyncResultSourceHelmParameters {
		return v.Parameters
	}).(ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput)
}

// The Helm release name. If omitted it will use the application name
func (o ApplicationStatusOperationStateSyncResultSourceHelmOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceHelm) *string { return v.ReleaseName }).(pulumi.StringPtrOutput)
}

// ValuesFiles is a list of Helm value files to use when generating a template
func (o ApplicationStatusOperationStateSyncResultSourceHelmOutput) ValueFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceHelm) []string { return v.ValueFiles }).(pulumi.StringArrayOutput)
}

// Values is Helm values, typically defined as a block
func (o ApplicationStatusOperationStateSyncResultSourceHelmOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceHelm) *string { return v.Values }).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateSyncResultSourceHelm)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput) ToApplicationStatusOperationStateSyncResultSourceHelmPtrOutput() ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput) ToApplicationStatusOperationStateSyncResultSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput) Elem() ApplicationStatusOperationStateSyncResultSourceHelmOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceHelm) ApplicationStatusOperationStateSyncResultSourceHelm {
		return *v
	}).(ApplicationStatusOperationStateSyncResultSourceHelmOutput)
}

// FileParameters are file parameters to the helm template
func (o ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput) FileParameters() ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceHelm) []ApplicationStatusOperationStateSyncResultSourceHelmFileParameters {
		if v == nil {
			return nil
		}
		return v.FileParameters
	}).(ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput)
}

// Parameters are parameters to the helm template
func (o ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput) Parameters() ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceHelm) []ApplicationStatusOperationStateSyncResultSourceHelmParameters {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput)
}

// The Helm release name. If omitted it will use the application name
func (o ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceHelm) *string {
		if v == nil {
			return nil
		}
		return v.ReleaseName
	}).(pulumi.StringPtrOutput)
}

// ValuesFiles is a list of Helm value files to use when generating a template
func (o ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput) ValueFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceHelm) []string {
		if v == nil {
			return nil
		}
		return v.ValueFiles
	}).(pulumi.StringArrayOutput)
}

// Values is Helm values, typically defined as a block
func (o ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceHelm) *string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringPtrOutput)
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationStatusOperationStateSyncResultSourceHelmFileParameters struct {
	// Name is the name of the helm parameter
	Name *string `pulumi:"name"`
	// Path is the path value for the helm parameter
	Path *string `pulumi:"path"`
}

// ApplicationStatusOperationStateSyncResultSourceHelmFileParametersInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArgs and ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceHelmFileParametersInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArgs{...}
type ApplicationStatusOperationStateSyncResultSourceHelmFileParametersInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput() ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput
	ToApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArgs struct {
	// Name is the name of the helm parameter
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path is the path value for the helm parameter
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceHelmFileParameters)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArgs) ToApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput() ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArgs) ToApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput)
}

// ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArray and ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArray{ ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArgs{...} }
type ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput() ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput
	ToApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput
}

type ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArray []ApplicationStatusOperationStateSyncResultSourceHelmFileParametersInput

func (ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateSyncResultSourceHelmFileParameters)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArray) ToApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput() ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArray) ToApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput)
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceHelmFileParameters)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput) ToApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput() ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput) ToApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput {
	return o
}

// Name is the name of the helm parameter
func (o ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceHelmFileParameters) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path is the path value for the helm parameter
func (o ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceHelmFileParameters) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateSyncResultSourceHelmFileParameters)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput) ToApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput() ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput) ToApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput) Index(i pulumi.IntInput) ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusOperationStateSyncResultSourceHelmFileParameters {
		return vs[0].([]ApplicationStatusOperationStateSyncResultSourceHelmFileParameters)[vs[1].(int)]
	}).(ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput)
}

// HelmParameter is a parameter to a helm template
type ApplicationStatusOperationStateSyncResultSourceHelmParameters struct {
	// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
	ForceString *bool `pulumi:"forceString"`
	// Name is the name of the helm parameter
	Name *string `pulumi:"name"`
	// Value is the value for the helm parameter
	Value *string `pulumi:"value"`
}

// ApplicationStatusOperationStateSyncResultSourceHelmParametersInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceHelmParametersArgs and ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceHelmParametersInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceHelmParametersArgs{...}
type ApplicationStatusOperationStateSyncResultSourceHelmParametersInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceHelmParametersOutput() ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput
	ToApplicationStatusOperationStateSyncResultSourceHelmParametersOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput
}

// HelmParameter is a parameter to a helm template
type ApplicationStatusOperationStateSyncResultSourceHelmParametersArgs struct {
	// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
	ForceString pulumi.BoolPtrInput `pulumi:"forceString"`
	// Name is the name of the helm parameter
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value for the helm parameter
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApplicationStatusOperationStateSyncResultSourceHelmParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceHelmParameters)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceHelmParametersArgs) ToApplicationStatusOperationStateSyncResultSourceHelmParametersOutput() ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceHelmParametersOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceHelmParametersArgs) ToApplicationStatusOperationStateSyncResultSourceHelmParametersOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput)
}

// ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceHelmParametersArray and ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceHelmParametersArray{ ApplicationStatusOperationStateSyncResultSourceHelmParametersArgs{...} }
type ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput() ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput
	ToApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput
}

type ApplicationStatusOperationStateSyncResultSourceHelmParametersArray []ApplicationStatusOperationStateSyncResultSourceHelmParametersInput

func (ApplicationStatusOperationStateSyncResultSourceHelmParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateSyncResultSourceHelmParameters)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceHelmParametersArray) ToApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput() ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceHelmParametersArray) ToApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput)
}

// HelmParameter is a parameter to a helm template
type ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceHelmParameters)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput) ToApplicationStatusOperationStateSyncResultSourceHelmParametersOutput() ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput) ToApplicationStatusOperationStateSyncResultSourceHelmParametersOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput {
	return o
}

// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
func (o ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput) ForceString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceHelmParameters) *bool { return v.ForceString }).(pulumi.BoolPtrOutput)
}

// Name is the name of the helm parameter
func (o ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceHelmParameters) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value for the helm parameter
func (o ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceHelmParameters) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateSyncResultSourceHelmParameters)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput) ToApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput() ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput) ToApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput) Index(i pulumi.IntInput) ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusOperationStateSyncResultSourceHelmParameters {
		return vs[0].([]ApplicationStatusOperationStateSyncResultSourceHelmParameters)[vs[1].(int)]
	}).(ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput)
}

// Ksonnet holds ksonnet specific options
type ApplicationStatusOperationStateSyncResultSourceKsonnet struct {
	// Environment is a ksonnet application environment name
	Environment *string `pulumi:"environment"`
	// Parameters are a list of ksonnet component parameter override values
	Parameters []ApplicationStatusOperationStateSyncResultSourceKsonnetParameters `pulumi:"parameters"`
}

// ApplicationStatusOperationStateSyncResultSourceKsonnetInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceKsonnetArgs and ApplicationStatusOperationStateSyncResultSourceKsonnetOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceKsonnetInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceKsonnetArgs{...}
type ApplicationStatusOperationStateSyncResultSourceKsonnetInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceKsonnetOutput() ApplicationStatusOperationStateSyncResultSourceKsonnetOutput
	ToApplicationStatusOperationStateSyncResultSourceKsonnetOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceKsonnetOutput
}

// Ksonnet holds ksonnet specific options
type ApplicationStatusOperationStateSyncResultSourceKsonnetArgs struct {
	// Environment is a ksonnet application environment name
	Environment pulumi.StringPtrInput `pulumi:"environment"`
	// Parameters are a list of ksonnet component parameter override values
	Parameters ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayInput `pulumi:"parameters"`
}

func (ApplicationStatusOperationStateSyncResultSourceKsonnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceKsonnet)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceKsonnetArgs) ToApplicationStatusOperationStateSyncResultSourceKsonnetOutput() ApplicationStatusOperationStateSyncResultSourceKsonnetOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceKsonnetOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceKsonnetArgs) ToApplicationStatusOperationStateSyncResultSourceKsonnetOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKsonnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceKsonnetOutput)
}

func (i ApplicationStatusOperationStateSyncResultSourceKsonnetArgs) ToApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput() ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceKsonnetArgs) ToApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceKsonnetOutput).ToApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateSyncResultSourceKsonnetPtrInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceKsonnetArgs, ApplicationStatusOperationStateSyncResultSourceKsonnetPtr and ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceKsonnetPtrInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceKsonnetArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateSyncResultSourceKsonnetPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput() ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput
	ToApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput
}

type applicationStatusOperationStateSyncResultSourceKsonnetPtrType ApplicationStatusOperationStateSyncResultSourceKsonnetArgs

func ApplicationStatusOperationStateSyncResultSourceKsonnetPtr(v *ApplicationStatusOperationStateSyncResultSourceKsonnetArgs) ApplicationStatusOperationStateSyncResultSourceKsonnetPtrInput {
	return (*applicationStatusOperationStateSyncResultSourceKsonnetPtrType)(v)
}

func (*applicationStatusOperationStateSyncResultSourceKsonnetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateSyncResultSourceKsonnet)(nil)).Elem()
}

func (i *applicationStatusOperationStateSyncResultSourceKsonnetPtrType) ToApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput() ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateSyncResultSourceKsonnetPtrType) ToApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput)
}

// Ksonnet holds ksonnet specific options
type ApplicationStatusOperationStateSyncResultSourceKsonnetOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceKsonnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceKsonnet)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceKsonnetOutput) ToApplicationStatusOperationStateSyncResultSourceKsonnetOutput() ApplicationStatusOperationStateSyncResultSourceKsonnetOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceKsonnetOutput) ToApplicationStatusOperationStateSyncResultSourceKsonnetOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKsonnetOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceKsonnetOutput) ToApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput() ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput {
	return o.ToApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateSyncResultSourceKsonnetOutput) ToApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceKsonnet) *ApplicationStatusOperationStateSyncResultSourceKsonnet {
		return &v
	}).(ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput)
}

// Environment is a ksonnet application environment name
func (o ApplicationStatusOperationStateSyncResultSourceKsonnetOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceKsonnet) *string { return v.Environment }).(pulumi.StringPtrOutput)
}

// Parameters are a list of ksonnet component parameter override values
func (o ApplicationStatusOperationStateSyncResultSourceKsonnetOutput) Parameters() ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceKsonnet) []ApplicationStatusOperationStateSyncResultSourceKsonnetParameters {
		return v.Parameters
	}).(ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput)
}

type ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateSyncResultSourceKsonnet)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput) ToApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput() ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput) ToApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput) Elem() ApplicationStatusOperationStateSyncResultSourceKsonnetOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceKsonnet) ApplicationStatusOperationStateSyncResultSourceKsonnet {
		return *v
	}).(ApplicationStatusOperationStateSyncResultSourceKsonnetOutput)
}

// Environment is a ksonnet application environment name
func (o ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceKsonnet) *string {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.StringPtrOutput)
}

// Parameters are a list of ksonnet component parameter override values
func (o ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput) Parameters() ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceKsonnet) []ApplicationStatusOperationStateSyncResultSourceKsonnetParameters {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput)
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationStatusOperationStateSyncResultSourceKsonnetParameters struct {
	Component *string `pulumi:"component"`
	Name      string  `pulumi:"name"`
	Value     string  `pulumi:"value"`
}

// ApplicationStatusOperationStateSyncResultSourceKsonnetParametersInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArgs and ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceKsonnetParametersInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArgs{...}
type ApplicationStatusOperationStateSyncResultSourceKsonnetParametersInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput() ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput
	ToApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArgs struct {
	Component pulumi.StringPtrInput `pulumi:"component"`
	Name      pulumi.StringInput    `pulumi:"name"`
	Value     pulumi.StringInput    `pulumi:"value"`
}

func (ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceKsonnetParameters)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArgs) ToApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput() ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArgs) ToApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput)
}

// ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArray and ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArray{ ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArgs{...} }
type ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput() ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput
	ToApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput
}

type ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArray []ApplicationStatusOperationStateSyncResultSourceKsonnetParametersInput

func (ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateSyncResultSourceKsonnetParameters)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArray) ToApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput() ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArray) ToApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput)
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceKsonnetParameters)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput) ToApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput() ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput) ToApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput) Component() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceKsonnetParameters) *string { return v.Component }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceKsonnetParameters) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceKsonnetParameters) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateSyncResultSourceKsonnetParameters)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput) ToApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput() ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput) ToApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput) Index(i pulumi.IntInput) ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusOperationStateSyncResultSourceKsonnetParameters {
		return vs[0].([]ApplicationStatusOperationStateSyncResultSourceKsonnetParameters)[vs[1].(int)]
	}).(ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput)
}

// Kustomize holds kustomize specific options
type ApplicationStatusOperationStateSyncResultSourceKustomize struct {
	// CommonLabels adds additional kustomize commonLabels
	CommonLabels map[string]string `pulumi:"commonLabels"`
	// Images are kustomize image overrides
	Images []string `pulumi:"images"`
	// NamePrefix is a prefix appended to resources for kustomize apps
	NamePrefix *string `pulumi:"namePrefix"`
	// NameSuffix is a suffix appended to resources for kustomize apps
	NameSuffix *string `pulumi:"nameSuffix"`
	// Version contains optional Kustomize version
	Version *string `pulumi:"version"`
}

// ApplicationStatusOperationStateSyncResultSourceKustomizeInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceKustomizeArgs and ApplicationStatusOperationStateSyncResultSourceKustomizeOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceKustomizeInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceKustomizeArgs{...}
type ApplicationStatusOperationStateSyncResultSourceKustomizeInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceKustomizeOutput() ApplicationStatusOperationStateSyncResultSourceKustomizeOutput
	ToApplicationStatusOperationStateSyncResultSourceKustomizeOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceKustomizeOutput
}

// Kustomize holds kustomize specific options
type ApplicationStatusOperationStateSyncResultSourceKustomizeArgs struct {
	// CommonLabels adds additional kustomize commonLabels
	CommonLabels pulumi.StringMapInput `pulumi:"commonLabels"`
	// Images are kustomize image overrides
	Images pulumi.StringArrayInput `pulumi:"images"`
	// NamePrefix is a prefix appended to resources for kustomize apps
	NamePrefix pulumi.StringPtrInput `pulumi:"namePrefix"`
	// NameSuffix is a suffix appended to resources for kustomize apps
	NameSuffix pulumi.StringPtrInput `pulumi:"nameSuffix"`
	// Version contains optional Kustomize version
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApplicationStatusOperationStateSyncResultSourceKustomizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceKustomize)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceKustomizeArgs) ToApplicationStatusOperationStateSyncResultSourceKustomizeOutput() ApplicationStatusOperationStateSyncResultSourceKustomizeOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceKustomizeOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceKustomizeArgs) ToApplicationStatusOperationStateSyncResultSourceKustomizeOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKustomizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceKustomizeOutput)
}

func (i ApplicationStatusOperationStateSyncResultSourceKustomizeArgs) ToApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput() ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceKustomizePtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceKustomizeArgs) ToApplicationStatusOperationStateSyncResultSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceKustomizeOutput).ToApplicationStatusOperationStateSyncResultSourceKustomizePtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateSyncResultSourceKustomizePtrInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceKustomizeArgs, ApplicationStatusOperationStateSyncResultSourceKustomizePtr and ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceKustomizePtrInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceKustomizeArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateSyncResultSourceKustomizePtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput() ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput
	ToApplicationStatusOperationStateSyncResultSourceKustomizePtrOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput
}

type applicationStatusOperationStateSyncResultSourceKustomizePtrType ApplicationStatusOperationStateSyncResultSourceKustomizeArgs

func ApplicationStatusOperationStateSyncResultSourceKustomizePtr(v *ApplicationStatusOperationStateSyncResultSourceKustomizeArgs) ApplicationStatusOperationStateSyncResultSourceKustomizePtrInput {
	return (*applicationStatusOperationStateSyncResultSourceKustomizePtrType)(v)
}

func (*applicationStatusOperationStateSyncResultSourceKustomizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateSyncResultSourceKustomize)(nil)).Elem()
}

func (i *applicationStatusOperationStateSyncResultSourceKustomizePtrType) ToApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput() ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceKustomizePtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateSyncResultSourceKustomizePtrType) ToApplicationStatusOperationStateSyncResultSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput)
}

// Kustomize holds kustomize specific options
type ApplicationStatusOperationStateSyncResultSourceKustomizeOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceKustomizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceKustomize)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceKustomizeOutput) ToApplicationStatusOperationStateSyncResultSourceKustomizeOutput() ApplicationStatusOperationStateSyncResultSourceKustomizeOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceKustomizeOutput) ToApplicationStatusOperationStateSyncResultSourceKustomizeOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKustomizeOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceKustomizeOutput) ToApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput() ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput {
	return o.ToApplicationStatusOperationStateSyncResultSourceKustomizePtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateSyncResultSourceKustomizeOutput) ToApplicationStatusOperationStateSyncResultSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceKustomize) *ApplicationStatusOperationStateSyncResultSourceKustomize {
		return &v
	}).(ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput)
}

// CommonLabels adds additional kustomize commonLabels
func (o ApplicationStatusOperationStateSyncResultSourceKustomizeOutput) CommonLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceKustomize) map[string]string {
		return v.CommonLabels
	}).(pulumi.StringMapOutput)
}

// Images are kustomize image overrides
func (o ApplicationStatusOperationStateSyncResultSourceKustomizeOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceKustomize) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// NamePrefix is a prefix appended to resources for kustomize apps
func (o ApplicationStatusOperationStateSyncResultSourceKustomizeOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceKustomize) *string { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

// NameSuffix is a suffix appended to resources for kustomize apps
func (o ApplicationStatusOperationStateSyncResultSourceKustomizeOutput) NameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceKustomize) *string { return v.NameSuffix }).(pulumi.StringPtrOutput)
}

// Version contains optional Kustomize version
func (o ApplicationStatusOperationStateSyncResultSourceKustomizeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourceKustomize) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateSyncResultSourceKustomize)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput) ToApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput() ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput) ToApplicationStatusOperationStateSyncResultSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput) Elem() ApplicationStatusOperationStateSyncResultSourceKustomizeOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceKustomize) ApplicationStatusOperationStateSyncResultSourceKustomize {
		return *v
	}).(ApplicationStatusOperationStateSyncResultSourceKustomizeOutput)
}

// CommonLabels adds additional kustomize commonLabels
func (o ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput) CommonLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceKustomize) map[string]string {
		if v == nil {
			return nil
		}
		return v.CommonLabels
	}).(pulumi.StringMapOutput)
}

// Images are kustomize image overrides
func (o ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceKustomize) []string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringArrayOutput)
}

// NamePrefix is a prefix appended to resources for kustomize apps
func (o ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.NamePrefix
	}).(pulumi.StringPtrOutput)
}

// NameSuffix is a suffix appended to resources for kustomize apps
func (o ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput) NameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.NameSuffix
	}).(pulumi.StringPtrOutput)
}

// Version contains optional Kustomize version
func (o ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabels struct {
}

// ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsArgs and ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsArgs{...}
type ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutput() ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutput
	ToApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutput
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsArgs struct {
}

func (ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabels)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsArgs) ToApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutput() ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsArgs) ToApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutput)
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabels)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutput) ToApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutput() ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutput) ToApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutput {
	return o
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationStatusOperationStateSyncResultSourcePlugin struct {
	Env  []ApplicationStatusOperationStateSyncResultSourcePluginEnv `pulumi:"env"`
	Name *string                                                    `pulumi:"name"`
}

// ApplicationStatusOperationStateSyncResultSourcePluginInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourcePluginArgs and ApplicationStatusOperationStateSyncResultSourcePluginOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourcePluginInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourcePluginArgs{...}
type ApplicationStatusOperationStateSyncResultSourcePluginInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourcePluginOutput() ApplicationStatusOperationStateSyncResultSourcePluginOutput
	ToApplicationStatusOperationStateSyncResultSourcePluginOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourcePluginOutput
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationStatusOperationStateSyncResultSourcePluginArgs struct {
	Env  ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayInput `pulumi:"env"`
	Name pulumi.StringPtrInput                                              `pulumi:"name"`
}

func (ApplicationStatusOperationStateSyncResultSourcePluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourcePlugin)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourcePluginArgs) ToApplicationStatusOperationStateSyncResultSourcePluginOutput() ApplicationStatusOperationStateSyncResultSourcePluginOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourcePluginOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourcePluginArgs) ToApplicationStatusOperationStateSyncResultSourcePluginOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourcePluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourcePluginOutput)
}

func (i ApplicationStatusOperationStateSyncResultSourcePluginArgs) ToApplicationStatusOperationStateSyncResultSourcePluginPtrOutput() ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourcePluginPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourcePluginArgs) ToApplicationStatusOperationStateSyncResultSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourcePluginOutput).ToApplicationStatusOperationStateSyncResultSourcePluginPtrOutputWithContext(ctx)
}

// ApplicationStatusOperationStateSyncResultSourcePluginPtrInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourcePluginArgs, ApplicationStatusOperationStateSyncResultSourcePluginPtr and ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourcePluginPtrInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourcePluginArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusOperationStateSyncResultSourcePluginPtrInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourcePluginPtrOutput() ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput
	ToApplicationStatusOperationStateSyncResultSourcePluginPtrOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput
}

type applicationStatusOperationStateSyncResultSourcePluginPtrType ApplicationStatusOperationStateSyncResultSourcePluginArgs

func ApplicationStatusOperationStateSyncResultSourcePluginPtr(v *ApplicationStatusOperationStateSyncResultSourcePluginArgs) ApplicationStatusOperationStateSyncResultSourcePluginPtrInput {
	return (*applicationStatusOperationStateSyncResultSourcePluginPtrType)(v)
}

func (*applicationStatusOperationStateSyncResultSourcePluginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateSyncResultSourcePlugin)(nil)).Elem()
}

func (i *applicationStatusOperationStateSyncResultSourcePluginPtrType) ToApplicationStatusOperationStateSyncResultSourcePluginPtrOutput() ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourcePluginPtrOutputWithContext(context.Background())
}

func (i *applicationStatusOperationStateSyncResultSourcePluginPtrType) ToApplicationStatusOperationStateSyncResultSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationStatusOperationStateSyncResultSourcePluginOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourcePluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourcePlugin)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourcePluginOutput) ToApplicationStatusOperationStateSyncResultSourcePluginOutput() ApplicationStatusOperationStateSyncResultSourcePluginOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourcePluginOutput) ToApplicationStatusOperationStateSyncResultSourcePluginOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourcePluginOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourcePluginOutput) ToApplicationStatusOperationStateSyncResultSourcePluginPtrOutput() ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput {
	return o.ToApplicationStatusOperationStateSyncResultSourcePluginPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOperationStateSyncResultSourcePluginOutput) ToApplicationStatusOperationStateSyncResultSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourcePlugin) *ApplicationStatusOperationStateSyncResultSourcePlugin {
		return &v
	}).(ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput)
}
func (o ApplicationStatusOperationStateSyncResultSourcePluginOutput) Env() ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourcePlugin) []ApplicationStatusOperationStateSyncResultSourcePluginEnv {
		return v.Env
	}).(ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput)
}

func (o ApplicationStatusOperationStateSyncResultSourcePluginOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourcePlugin) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusOperationStateSyncResultSourcePlugin)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput) ToApplicationStatusOperationStateSyncResultSourcePluginPtrOutput() ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput) ToApplicationStatusOperationStateSyncResultSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput) Elem() ApplicationStatusOperationStateSyncResultSourcePluginOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourcePlugin) ApplicationStatusOperationStateSyncResultSourcePlugin {
		return *v
	}).(ApplicationStatusOperationStateSyncResultSourcePluginOutput)
}

func (o ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput) Env() ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourcePlugin) []ApplicationStatusOperationStateSyncResultSourcePluginEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput)
}

func (o ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusOperationStateSyncResultSourcePlugin) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type ApplicationStatusOperationStateSyncResultSourcePluginEnv struct {
	// the name, usually uppercase
	Name string `pulumi:"name"`
	// the value
	Value string `pulumi:"value"`
}

// ApplicationStatusOperationStateSyncResultSourcePluginEnvInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourcePluginEnvArgs and ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourcePluginEnvInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourcePluginEnvArgs{...}
type ApplicationStatusOperationStateSyncResultSourcePluginEnvInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourcePluginEnvOutput() ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput
	ToApplicationStatusOperationStateSyncResultSourcePluginEnvOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput
}

type ApplicationStatusOperationStateSyncResultSourcePluginEnvArgs struct {
	// the name, usually uppercase
	Name pulumi.StringInput `pulumi:"name"`
	// the value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApplicationStatusOperationStateSyncResultSourcePluginEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourcePluginEnv)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourcePluginEnvArgs) ToApplicationStatusOperationStateSyncResultSourcePluginEnvOutput() ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourcePluginEnvOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourcePluginEnvArgs) ToApplicationStatusOperationStateSyncResultSourcePluginEnvOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput)
}

// ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayInput is an input type that accepts ApplicationStatusOperationStateSyncResultSourcePluginEnvArray and ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayInput` via:
//
//          ApplicationStatusOperationStateSyncResultSourcePluginEnvArray{ ApplicationStatusOperationStateSyncResultSourcePluginEnvArgs{...} }
type ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayInput interface {
	pulumi.Input

	ToApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput() ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput
	ToApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutputWithContext(context.Context) ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput
}

type ApplicationStatusOperationStateSyncResultSourcePluginEnvArray []ApplicationStatusOperationStateSyncResultSourcePluginEnvInput

func (ApplicationStatusOperationStateSyncResultSourcePluginEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateSyncResultSourcePluginEnv)(nil)).Elem()
}

func (i ApplicationStatusOperationStateSyncResultSourcePluginEnvArray) ToApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput() ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput {
	return i.ToApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusOperationStateSyncResultSourcePluginEnvArray) ToApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput)
}

type ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusOperationStateSyncResultSourcePluginEnv)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput) ToApplicationStatusOperationStateSyncResultSourcePluginEnvOutput() ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput) ToApplicationStatusOperationStateSyncResultSourcePluginEnvOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput {
	return o
}

// the name, usually uppercase
func (o ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourcePluginEnv) string { return v.Name }).(pulumi.StringOutput)
}

// the value
func (o ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusOperationStateSyncResultSourcePluginEnv) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusOperationStateSyncResultSourcePluginEnv)(nil)).Elem()
}

func (o ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput) ToApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput() ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput) ToApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutputWithContext(ctx context.Context) ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput {
	return o
}

func (o ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput) Index(i pulumi.IntInput) ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusOperationStateSyncResultSourcePluginEnv {
		return vs[0].([]ApplicationStatusOperationStateSyncResultSourcePluginEnv)[vs[1].(int)]
	}).(ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput)
}

// ResourceStatus holds the current sync and health status of a resource
type ApplicationStatusResources struct {
	Group           *string                           `pulumi:"group"`
	Health          *ApplicationStatusResourcesHealth `pulumi:"health"`
	Hook            *bool                             `pulumi:"hook"`
	Kind            *string                           `pulumi:"kind"`
	Name            *string                           `pulumi:"name"`
	Namespace       *string                           `pulumi:"namespace"`
	RequiresPruning *bool                             `pulumi:"requiresPruning"`
	// SyncStatusCode is a type which represents possible comparison results
	Status  *string `pulumi:"status"`
	Version *string `pulumi:"version"`
}

// ApplicationStatusResourcesInput is an input type that accepts ApplicationStatusResourcesArgs and ApplicationStatusResourcesOutput values.
// You can construct a concrete instance of `ApplicationStatusResourcesInput` via:
//
//          ApplicationStatusResourcesArgs{...}
type ApplicationStatusResourcesInput interface {
	pulumi.Input

	ToApplicationStatusResourcesOutput() ApplicationStatusResourcesOutput
	ToApplicationStatusResourcesOutputWithContext(context.Context) ApplicationStatusResourcesOutput
}

// ResourceStatus holds the current sync and health status of a resource
type ApplicationStatusResourcesArgs struct {
	Group           pulumi.StringPtrInput                    `pulumi:"group"`
	Health          ApplicationStatusResourcesHealthPtrInput `pulumi:"health"`
	Hook            pulumi.BoolPtrInput                      `pulumi:"hook"`
	Kind            pulumi.StringPtrInput                    `pulumi:"kind"`
	Name            pulumi.StringPtrInput                    `pulumi:"name"`
	Namespace       pulumi.StringPtrInput                    `pulumi:"namespace"`
	RequiresPruning pulumi.BoolPtrInput                      `pulumi:"requiresPruning"`
	// SyncStatusCode is a type which represents possible comparison results
	Status  pulumi.StringPtrInput `pulumi:"status"`
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApplicationStatusResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusResources)(nil)).Elem()
}

func (i ApplicationStatusResourcesArgs) ToApplicationStatusResourcesOutput() ApplicationStatusResourcesOutput {
	return i.ToApplicationStatusResourcesOutputWithContext(context.Background())
}

func (i ApplicationStatusResourcesArgs) ToApplicationStatusResourcesOutputWithContext(ctx context.Context) ApplicationStatusResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusResourcesOutput)
}

// ApplicationStatusResourcesArrayInput is an input type that accepts ApplicationStatusResourcesArray and ApplicationStatusResourcesArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusResourcesArrayInput` via:
//
//          ApplicationStatusResourcesArray{ ApplicationStatusResourcesArgs{...} }
type ApplicationStatusResourcesArrayInput interface {
	pulumi.Input

	ToApplicationStatusResourcesArrayOutput() ApplicationStatusResourcesArrayOutput
	ToApplicationStatusResourcesArrayOutputWithContext(context.Context) ApplicationStatusResourcesArrayOutput
}

type ApplicationStatusResourcesArray []ApplicationStatusResourcesInput

func (ApplicationStatusResourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusResources)(nil)).Elem()
}

func (i ApplicationStatusResourcesArray) ToApplicationStatusResourcesArrayOutput() ApplicationStatusResourcesArrayOutput {
	return i.ToApplicationStatusResourcesArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusResourcesArray) ToApplicationStatusResourcesArrayOutputWithContext(ctx context.Context) ApplicationStatusResourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusResourcesArrayOutput)
}

// ResourceStatus holds the current sync and health status of a resource
type ApplicationStatusResourcesOutput struct{ *pulumi.OutputState }

func (ApplicationStatusResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusResources)(nil)).Elem()
}

func (o ApplicationStatusResourcesOutput) ToApplicationStatusResourcesOutput() ApplicationStatusResourcesOutput {
	return o
}

func (o ApplicationStatusResourcesOutput) ToApplicationStatusResourcesOutputWithContext(ctx context.Context) ApplicationStatusResourcesOutput {
	return o
}

func (o ApplicationStatusResourcesOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusResources) *string { return v.Group }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusResourcesOutput) Health() ApplicationStatusResourcesHealthPtrOutput {
	return o.ApplyT(func(v ApplicationStatusResources) *ApplicationStatusResourcesHealth { return v.Health }).(ApplicationStatusResourcesHealthPtrOutput)
}

func (o ApplicationStatusResourcesOutput) Hook() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusResources) *bool { return v.Hook }).(pulumi.BoolPtrOutput)
}

func (o ApplicationStatusResourcesOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusResources) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusResourcesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusResources) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusResourcesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusResources) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusResourcesOutput) RequiresPruning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusResources) *bool { return v.RequiresPruning }).(pulumi.BoolPtrOutput)
}

// SyncStatusCode is a type which represents possible comparison results
func (o ApplicationStatusResourcesOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusResources) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusResourcesOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusResources) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApplicationStatusResourcesArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusResourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusResources)(nil)).Elem()
}

func (o ApplicationStatusResourcesArrayOutput) ToApplicationStatusResourcesArrayOutput() ApplicationStatusResourcesArrayOutput {
	return o
}

func (o ApplicationStatusResourcesArrayOutput) ToApplicationStatusResourcesArrayOutputWithContext(ctx context.Context) ApplicationStatusResourcesArrayOutput {
	return o
}

func (o ApplicationStatusResourcesArrayOutput) Index(i pulumi.IntInput) ApplicationStatusResourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusResources {
		return vs[0].([]ApplicationStatusResources)[vs[1].(int)]
	}).(ApplicationStatusResourcesOutput)
}

type ApplicationStatusResourcesHealth struct {
	Message *string `pulumi:"message"`
	// Represents resource health status
	Status *string `pulumi:"status"`
}

// ApplicationStatusResourcesHealthInput is an input type that accepts ApplicationStatusResourcesHealthArgs and ApplicationStatusResourcesHealthOutput values.
// You can construct a concrete instance of `ApplicationStatusResourcesHealthInput` via:
//
//          ApplicationStatusResourcesHealthArgs{...}
type ApplicationStatusResourcesHealthInput interface {
	pulumi.Input

	ToApplicationStatusResourcesHealthOutput() ApplicationStatusResourcesHealthOutput
	ToApplicationStatusResourcesHealthOutputWithContext(context.Context) ApplicationStatusResourcesHealthOutput
}

type ApplicationStatusResourcesHealthArgs struct {
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Represents resource health status
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ApplicationStatusResourcesHealthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusResourcesHealth)(nil)).Elem()
}

func (i ApplicationStatusResourcesHealthArgs) ToApplicationStatusResourcesHealthOutput() ApplicationStatusResourcesHealthOutput {
	return i.ToApplicationStatusResourcesHealthOutputWithContext(context.Background())
}

func (i ApplicationStatusResourcesHealthArgs) ToApplicationStatusResourcesHealthOutputWithContext(ctx context.Context) ApplicationStatusResourcesHealthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusResourcesHealthOutput)
}

func (i ApplicationStatusResourcesHealthArgs) ToApplicationStatusResourcesHealthPtrOutput() ApplicationStatusResourcesHealthPtrOutput {
	return i.ToApplicationStatusResourcesHealthPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusResourcesHealthArgs) ToApplicationStatusResourcesHealthPtrOutputWithContext(ctx context.Context) ApplicationStatusResourcesHealthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusResourcesHealthOutput).ToApplicationStatusResourcesHealthPtrOutputWithContext(ctx)
}

// ApplicationStatusResourcesHealthPtrInput is an input type that accepts ApplicationStatusResourcesHealthArgs, ApplicationStatusResourcesHealthPtr and ApplicationStatusResourcesHealthPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusResourcesHealthPtrInput` via:
//
//          ApplicationStatusResourcesHealthArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusResourcesHealthPtrInput interface {
	pulumi.Input

	ToApplicationStatusResourcesHealthPtrOutput() ApplicationStatusResourcesHealthPtrOutput
	ToApplicationStatusResourcesHealthPtrOutputWithContext(context.Context) ApplicationStatusResourcesHealthPtrOutput
}

type applicationStatusResourcesHealthPtrType ApplicationStatusResourcesHealthArgs

func ApplicationStatusResourcesHealthPtr(v *ApplicationStatusResourcesHealthArgs) ApplicationStatusResourcesHealthPtrInput {
	return (*applicationStatusResourcesHealthPtrType)(v)
}

func (*applicationStatusResourcesHealthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusResourcesHealth)(nil)).Elem()
}

func (i *applicationStatusResourcesHealthPtrType) ToApplicationStatusResourcesHealthPtrOutput() ApplicationStatusResourcesHealthPtrOutput {
	return i.ToApplicationStatusResourcesHealthPtrOutputWithContext(context.Background())
}

func (i *applicationStatusResourcesHealthPtrType) ToApplicationStatusResourcesHealthPtrOutputWithContext(ctx context.Context) ApplicationStatusResourcesHealthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusResourcesHealthPtrOutput)
}

type ApplicationStatusResourcesHealthOutput struct{ *pulumi.OutputState }

func (ApplicationStatusResourcesHealthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusResourcesHealth)(nil)).Elem()
}

func (o ApplicationStatusResourcesHealthOutput) ToApplicationStatusResourcesHealthOutput() ApplicationStatusResourcesHealthOutput {
	return o
}

func (o ApplicationStatusResourcesHealthOutput) ToApplicationStatusResourcesHealthOutputWithContext(ctx context.Context) ApplicationStatusResourcesHealthOutput {
	return o
}

func (o ApplicationStatusResourcesHealthOutput) ToApplicationStatusResourcesHealthPtrOutput() ApplicationStatusResourcesHealthPtrOutput {
	return o.ToApplicationStatusResourcesHealthPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusResourcesHealthOutput) ToApplicationStatusResourcesHealthPtrOutputWithContext(ctx context.Context) ApplicationStatusResourcesHealthPtrOutput {
	return o.ApplyT(func(v ApplicationStatusResourcesHealth) *ApplicationStatusResourcesHealth {
		return &v
	}).(ApplicationStatusResourcesHealthPtrOutput)
}
func (o ApplicationStatusResourcesHealthOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusResourcesHealth) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Represents resource health status
func (o ApplicationStatusResourcesHealthOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusResourcesHealth) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ApplicationStatusResourcesHealthPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusResourcesHealthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusResourcesHealth)(nil)).Elem()
}

func (o ApplicationStatusResourcesHealthPtrOutput) ToApplicationStatusResourcesHealthPtrOutput() ApplicationStatusResourcesHealthPtrOutput {
	return o
}

func (o ApplicationStatusResourcesHealthPtrOutput) ToApplicationStatusResourcesHealthPtrOutputWithContext(ctx context.Context) ApplicationStatusResourcesHealthPtrOutput {
	return o
}

func (o ApplicationStatusResourcesHealthPtrOutput) Elem() ApplicationStatusResourcesHealthOutput {
	return o.ApplyT(func(v *ApplicationStatusResourcesHealth) ApplicationStatusResourcesHealth { return *v }).(ApplicationStatusResourcesHealthOutput)
}

func (o ApplicationStatusResourcesHealthPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusResourcesHealth) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Represents resource health status
func (o ApplicationStatusResourcesHealthPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusResourcesHealth) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type ApplicationStatusSummary struct {
	// ExternalURLs holds all external URLs of application child resources.
	ExternalURLs []string `pulumi:"externalURLs"`
	// Images holds all images of application child resources.
	Images []string `pulumi:"images"`
}

// ApplicationStatusSummaryInput is an input type that accepts ApplicationStatusSummaryArgs and ApplicationStatusSummaryOutput values.
// You can construct a concrete instance of `ApplicationStatusSummaryInput` via:
//
//          ApplicationStatusSummaryArgs{...}
type ApplicationStatusSummaryInput interface {
	pulumi.Input

	ToApplicationStatusSummaryOutput() ApplicationStatusSummaryOutput
	ToApplicationStatusSummaryOutputWithContext(context.Context) ApplicationStatusSummaryOutput
}

type ApplicationStatusSummaryArgs struct {
	// ExternalURLs holds all external URLs of application child resources.
	ExternalURLs pulumi.StringArrayInput `pulumi:"externalURLs"`
	// Images holds all images of application child resources.
	Images pulumi.StringArrayInput `pulumi:"images"`
}

func (ApplicationStatusSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSummary)(nil)).Elem()
}

func (i ApplicationStatusSummaryArgs) ToApplicationStatusSummaryOutput() ApplicationStatusSummaryOutput {
	return i.ToApplicationStatusSummaryOutputWithContext(context.Background())
}

func (i ApplicationStatusSummaryArgs) ToApplicationStatusSummaryOutputWithContext(ctx context.Context) ApplicationStatusSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSummaryOutput)
}

func (i ApplicationStatusSummaryArgs) ToApplicationStatusSummaryPtrOutput() ApplicationStatusSummaryPtrOutput {
	return i.ToApplicationStatusSummaryPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusSummaryArgs) ToApplicationStatusSummaryPtrOutputWithContext(ctx context.Context) ApplicationStatusSummaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSummaryOutput).ToApplicationStatusSummaryPtrOutputWithContext(ctx)
}

// ApplicationStatusSummaryPtrInput is an input type that accepts ApplicationStatusSummaryArgs, ApplicationStatusSummaryPtr and ApplicationStatusSummaryPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusSummaryPtrInput` via:
//
//          ApplicationStatusSummaryArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusSummaryPtrInput interface {
	pulumi.Input

	ToApplicationStatusSummaryPtrOutput() ApplicationStatusSummaryPtrOutput
	ToApplicationStatusSummaryPtrOutputWithContext(context.Context) ApplicationStatusSummaryPtrOutput
}

type applicationStatusSummaryPtrType ApplicationStatusSummaryArgs

func ApplicationStatusSummaryPtr(v *ApplicationStatusSummaryArgs) ApplicationStatusSummaryPtrInput {
	return (*applicationStatusSummaryPtrType)(v)
}

func (*applicationStatusSummaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSummary)(nil)).Elem()
}

func (i *applicationStatusSummaryPtrType) ToApplicationStatusSummaryPtrOutput() ApplicationStatusSummaryPtrOutput {
	return i.ToApplicationStatusSummaryPtrOutputWithContext(context.Background())
}

func (i *applicationStatusSummaryPtrType) ToApplicationStatusSummaryPtrOutputWithContext(ctx context.Context) ApplicationStatusSummaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSummaryPtrOutput)
}

type ApplicationStatusSummaryOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSummary)(nil)).Elem()
}

func (o ApplicationStatusSummaryOutput) ToApplicationStatusSummaryOutput() ApplicationStatusSummaryOutput {
	return o
}

func (o ApplicationStatusSummaryOutput) ToApplicationStatusSummaryOutputWithContext(ctx context.Context) ApplicationStatusSummaryOutput {
	return o
}

func (o ApplicationStatusSummaryOutput) ToApplicationStatusSummaryPtrOutput() ApplicationStatusSummaryPtrOutput {
	return o.ToApplicationStatusSummaryPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusSummaryOutput) ToApplicationStatusSummaryPtrOutputWithContext(ctx context.Context) ApplicationStatusSummaryPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSummary) *ApplicationStatusSummary {
		return &v
	}).(ApplicationStatusSummaryPtrOutput)
}

// ExternalURLs holds all external URLs of application child resources.
func (o ApplicationStatusSummaryOutput) ExternalURLs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationStatusSummary) []string { return v.ExternalURLs }).(pulumi.StringArrayOutput)
}

// Images holds all images of application child resources.
func (o ApplicationStatusSummaryOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationStatusSummary) []string { return v.Images }).(pulumi.StringArrayOutput)
}

type ApplicationStatusSummaryPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSummaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSummary)(nil)).Elem()
}

func (o ApplicationStatusSummaryPtrOutput) ToApplicationStatusSummaryPtrOutput() ApplicationStatusSummaryPtrOutput {
	return o
}

func (o ApplicationStatusSummaryPtrOutput) ToApplicationStatusSummaryPtrOutputWithContext(ctx context.Context) ApplicationStatusSummaryPtrOutput {
	return o
}

func (o ApplicationStatusSummaryPtrOutput) Elem() ApplicationStatusSummaryOutput {
	return o.ApplyT(func(v *ApplicationStatusSummary) ApplicationStatusSummary { return *v }).(ApplicationStatusSummaryOutput)
}

// ExternalURLs holds all external URLs of application child resources.
func (o ApplicationStatusSummaryPtrOutput) ExternalURLs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusSummary) []string {
		if v == nil {
			return nil
		}
		return v.ExternalURLs
	}).(pulumi.StringArrayOutput)
}

// Images holds all images of application child resources.
func (o ApplicationStatusSummaryPtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusSummary) []string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringArrayOutput)
}

// SyncStatus is a comparison result of application spec and deployed application.
type ApplicationStatusSync struct {
	// ComparedTo contains application source and target which was used for resources comparison
	ComparedTo *ApplicationStatusSyncComparedTo `pulumi:"comparedTo"`
	Revision   *string                          `pulumi:"revision"`
	// SyncStatusCode is a type which represents possible comparison results
	Status string `pulumi:"status"`
}

// ApplicationStatusSyncInput is an input type that accepts ApplicationStatusSyncArgs and ApplicationStatusSyncOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncInput` via:
//
//          ApplicationStatusSyncArgs{...}
type ApplicationStatusSyncInput interface {
	pulumi.Input

	ToApplicationStatusSyncOutput() ApplicationStatusSyncOutput
	ToApplicationStatusSyncOutputWithContext(context.Context) ApplicationStatusSyncOutput
}

// SyncStatus is a comparison result of application spec and deployed application.
type ApplicationStatusSyncArgs struct {
	// ComparedTo contains application source and target which was used for resources comparison
	ComparedTo ApplicationStatusSyncComparedToPtrInput `pulumi:"comparedTo"`
	Revision   pulumi.StringPtrInput                   `pulumi:"revision"`
	// SyncStatusCode is a type which represents possible comparison results
	Status pulumi.StringInput `pulumi:"status"`
}

func (ApplicationStatusSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSync)(nil)).Elem()
}

func (i ApplicationStatusSyncArgs) ToApplicationStatusSyncOutput() ApplicationStatusSyncOutput {
	return i.ToApplicationStatusSyncOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncArgs) ToApplicationStatusSyncOutputWithContext(ctx context.Context) ApplicationStatusSyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncOutput)
}

func (i ApplicationStatusSyncArgs) ToApplicationStatusSyncPtrOutput() ApplicationStatusSyncPtrOutput {
	return i.ToApplicationStatusSyncPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncArgs) ToApplicationStatusSyncPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncOutput).ToApplicationStatusSyncPtrOutputWithContext(ctx)
}

// ApplicationStatusSyncPtrInput is an input type that accepts ApplicationStatusSyncArgs, ApplicationStatusSyncPtr and ApplicationStatusSyncPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncPtrInput` via:
//
//          ApplicationStatusSyncArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusSyncPtrInput interface {
	pulumi.Input

	ToApplicationStatusSyncPtrOutput() ApplicationStatusSyncPtrOutput
	ToApplicationStatusSyncPtrOutputWithContext(context.Context) ApplicationStatusSyncPtrOutput
}

type applicationStatusSyncPtrType ApplicationStatusSyncArgs

func ApplicationStatusSyncPtr(v *ApplicationStatusSyncArgs) ApplicationStatusSyncPtrInput {
	return (*applicationStatusSyncPtrType)(v)
}

func (*applicationStatusSyncPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSync)(nil)).Elem()
}

func (i *applicationStatusSyncPtrType) ToApplicationStatusSyncPtrOutput() ApplicationStatusSyncPtrOutput {
	return i.ToApplicationStatusSyncPtrOutputWithContext(context.Background())
}

func (i *applicationStatusSyncPtrType) ToApplicationStatusSyncPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncPtrOutput)
}

// SyncStatus is a comparison result of application spec and deployed application.
type ApplicationStatusSyncOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSync)(nil)).Elem()
}

func (o ApplicationStatusSyncOutput) ToApplicationStatusSyncOutput() ApplicationStatusSyncOutput {
	return o
}

func (o ApplicationStatusSyncOutput) ToApplicationStatusSyncOutputWithContext(ctx context.Context) ApplicationStatusSyncOutput {
	return o
}

func (o ApplicationStatusSyncOutput) ToApplicationStatusSyncPtrOutput() ApplicationStatusSyncPtrOutput {
	return o.ToApplicationStatusSyncPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusSyncOutput) ToApplicationStatusSyncPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSync) *ApplicationStatusSync {
		return &v
	}).(ApplicationStatusSyncPtrOutput)
}

// ComparedTo contains application source and target which was used for resources comparison
func (o ApplicationStatusSyncOutput) ComparedTo() ApplicationStatusSyncComparedToPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSync) *ApplicationStatusSyncComparedTo { return v.ComparedTo }).(ApplicationStatusSyncComparedToPtrOutput)
}

func (o ApplicationStatusSyncOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSync) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// SyncStatusCode is a type which represents possible comparison results
func (o ApplicationStatusSyncOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusSync) string { return v.Status }).(pulumi.StringOutput)
}

type ApplicationStatusSyncPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSync)(nil)).Elem()
}

func (o ApplicationStatusSyncPtrOutput) ToApplicationStatusSyncPtrOutput() ApplicationStatusSyncPtrOutput {
	return o
}

func (o ApplicationStatusSyncPtrOutput) ToApplicationStatusSyncPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncPtrOutput {
	return o
}

func (o ApplicationStatusSyncPtrOutput) Elem() ApplicationStatusSyncOutput {
	return o.ApplyT(func(v *ApplicationStatusSync) ApplicationStatusSync { return *v }).(ApplicationStatusSyncOutput)
}

// ComparedTo contains application source and target which was used for resources comparison
func (o ApplicationStatusSyncPtrOutput) ComparedTo() ApplicationStatusSyncComparedToPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSync) *ApplicationStatusSyncComparedTo {
		if v == nil {
			return nil
		}
		return v.ComparedTo
	}).(ApplicationStatusSyncComparedToPtrOutput)
}

func (o ApplicationStatusSyncPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSync) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// SyncStatusCode is a type which represents possible comparison results
func (o ApplicationStatusSyncPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSync) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// ComparedTo contains application source and target which was used for resources comparison
type ApplicationStatusSyncComparedTo struct {
	// ApplicationDestination contains deployment destination information
	Destination ApplicationStatusSyncComparedToDestination `pulumi:"destination"`
	// ApplicationSource contains information about github repository, path within repository and target application environment.
	Source ApplicationStatusSyncComparedToSource `pulumi:"source"`
}

// ApplicationStatusSyncComparedToInput is an input type that accepts ApplicationStatusSyncComparedToArgs and ApplicationStatusSyncComparedToOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToInput` via:
//
//          ApplicationStatusSyncComparedToArgs{...}
type ApplicationStatusSyncComparedToInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToOutput() ApplicationStatusSyncComparedToOutput
	ToApplicationStatusSyncComparedToOutputWithContext(context.Context) ApplicationStatusSyncComparedToOutput
}

// ComparedTo contains application source and target which was used for resources comparison
type ApplicationStatusSyncComparedToArgs struct {
	// ApplicationDestination contains deployment destination information
	Destination ApplicationStatusSyncComparedToDestinationInput `pulumi:"destination"`
	// ApplicationSource contains information about github repository, path within repository and target application environment.
	Source ApplicationStatusSyncComparedToSourceInput `pulumi:"source"`
}

func (ApplicationStatusSyncComparedToArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedTo)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToArgs) ToApplicationStatusSyncComparedToOutput() ApplicationStatusSyncComparedToOutput {
	return i.ToApplicationStatusSyncComparedToOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToArgs) ToApplicationStatusSyncComparedToOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToOutput)
}

func (i ApplicationStatusSyncComparedToArgs) ToApplicationStatusSyncComparedToPtrOutput() ApplicationStatusSyncComparedToPtrOutput {
	return i.ToApplicationStatusSyncComparedToPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToArgs) ToApplicationStatusSyncComparedToPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToOutput).ToApplicationStatusSyncComparedToPtrOutputWithContext(ctx)
}

// ApplicationStatusSyncComparedToPtrInput is an input type that accepts ApplicationStatusSyncComparedToArgs, ApplicationStatusSyncComparedToPtr and ApplicationStatusSyncComparedToPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToPtrInput` via:
//
//          ApplicationStatusSyncComparedToArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusSyncComparedToPtrInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToPtrOutput() ApplicationStatusSyncComparedToPtrOutput
	ToApplicationStatusSyncComparedToPtrOutputWithContext(context.Context) ApplicationStatusSyncComparedToPtrOutput
}

type applicationStatusSyncComparedToPtrType ApplicationStatusSyncComparedToArgs

func ApplicationStatusSyncComparedToPtr(v *ApplicationStatusSyncComparedToArgs) ApplicationStatusSyncComparedToPtrInput {
	return (*applicationStatusSyncComparedToPtrType)(v)
}

func (*applicationStatusSyncComparedToPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedTo)(nil)).Elem()
}

func (i *applicationStatusSyncComparedToPtrType) ToApplicationStatusSyncComparedToPtrOutput() ApplicationStatusSyncComparedToPtrOutput {
	return i.ToApplicationStatusSyncComparedToPtrOutputWithContext(context.Background())
}

func (i *applicationStatusSyncComparedToPtrType) ToApplicationStatusSyncComparedToPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToPtrOutput)
}

// ComparedTo contains application source and target which was used for resources comparison
type ApplicationStatusSyncComparedToOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedTo)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToOutput) ToApplicationStatusSyncComparedToOutput() ApplicationStatusSyncComparedToOutput {
	return o
}

func (o ApplicationStatusSyncComparedToOutput) ToApplicationStatusSyncComparedToOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToOutput {
	return o
}

func (o ApplicationStatusSyncComparedToOutput) ToApplicationStatusSyncComparedToPtrOutput() ApplicationStatusSyncComparedToPtrOutput {
	return o.ToApplicationStatusSyncComparedToPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusSyncComparedToOutput) ToApplicationStatusSyncComparedToPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedTo) *ApplicationStatusSyncComparedTo {
		return &v
	}).(ApplicationStatusSyncComparedToPtrOutput)
}

// ApplicationDestination contains deployment destination information
func (o ApplicationStatusSyncComparedToOutput) Destination() ApplicationStatusSyncComparedToDestinationOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedTo) ApplicationStatusSyncComparedToDestination {
		return v.Destination
	}).(ApplicationStatusSyncComparedToDestinationOutput)
}

// ApplicationSource contains information about github repository, path within repository and target application environment.
func (o ApplicationStatusSyncComparedToOutput) Source() ApplicationStatusSyncComparedToSourceOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedTo) ApplicationStatusSyncComparedToSource { return v.Source }).(ApplicationStatusSyncComparedToSourceOutput)
}

type ApplicationStatusSyncComparedToPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedTo)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToPtrOutput) ToApplicationStatusSyncComparedToPtrOutput() ApplicationStatusSyncComparedToPtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToPtrOutput) ToApplicationStatusSyncComparedToPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToPtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToPtrOutput) Elem() ApplicationStatusSyncComparedToOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedTo) ApplicationStatusSyncComparedTo { return *v }).(ApplicationStatusSyncComparedToOutput)
}

// ApplicationDestination contains deployment destination information
func (o ApplicationStatusSyncComparedToPtrOutput) Destination() ApplicationStatusSyncComparedToDestinationPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedTo) *ApplicationStatusSyncComparedToDestination {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(ApplicationStatusSyncComparedToDestinationPtrOutput)
}

// ApplicationSource contains information about github repository, path within repository and target application environment.
func (o ApplicationStatusSyncComparedToPtrOutput) Source() ApplicationStatusSyncComparedToSourcePtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedTo) *ApplicationStatusSyncComparedToSource {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(ApplicationStatusSyncComparedToSourcePtrOutput)
}

// ApplicationDestination contains deployment destination information
type ApplicationStatusSyncComparedToDestination struct {
	// Name of the destination cluster which can be used instead of server (url) field
	Name *string `pulumi:"name"`
	// Namespace overrides the environment namespace value in the ksonnet app.yaml
	Namespace *string `pulumi:"namespace"`
	// Server overrides the environment server value in the ksonnet app.yaml
	Server *string `pulumi:"server"`
}

// ApplicationStatusSyncComparedToDestinationInput is an input type that accepts ApplicationStatusSyncComparedToDestinationArgs and ApplicationStatusSyncComparedToDestinationOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToDestinationInput` via:
//
//          ApplicationStatusSyncComparedToDestinationArgs{...}
type ApplicationStatusSyncComparedToDestinationInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToDestinationOutput() ApplicationStatusSyncComparedToDestinationOutput
	ToApplicationStatusSyncComparedToDestinationOutputWithContext(context.Context) ApplicationStatusSyncComparedToDestinationOutput
}

// ApplicationDestination contains deployment destination information
type ApplicationStatusSyncComparedToDestinationArgs struct {
	// Name of the destination cluster which can be used instead of server (url) field
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace overrides the environment namespace value in the ksonnet app.yaml
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Server overrides the environment server value in the ksonnet app.yaml
	Server pulumi.StringPtrInput `pulumi:"server"`
}

func (ApplicationStatusSyncComparedToDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToDestination)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToDestinationArgs) ToApplicationStatusSyncComparedToDestinationOutput() ApplicationStatusSyncComparedToDestinationOutput {
	return i.ToApplicationStatusSyncComparedToDestinationOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToDestinationArgs) ToApplicationStatusSyncComparedToDestinationOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToDestinationOutput)
}

func (i ApplicationStatusSyncComparedToDestinationArgs) ToApplicationStatusSyncComparedToDestinationPtrOutput() ApplicationStatusSyncComparedToDestinationPtrOutput {
	return i.ToApplicationStatusSyncComparedToDestinationPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToDestinationArgs) ToApplicationStatusSyncComparedToDestinationPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToDestinationOutput).ToApplicationStatusSyncComparedToDestinationPtrOutputWithContext(ctx)
}

// ApplicationStatusSyncComparedToDestinationPtrInput is an input type that accepts ApplicationStatusSyncComparedToDestinationArgs, ApplicationStatusSyncComparedToDestinationPtr and ApplicationStatusSyncComparedToDestinationPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToDestinationPtrInput` via:
//
//          ApplicationStatusSyncComparedToDestinationArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusSyncComparedToDestinationPtrInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToDestinationPtrOutput() ApplicationStatusSyncComparedToDestinationPtrOutput
	ToApplicationStatusSyncComparedToDestinationPtrOutputWithContext(context.Context) ApplicationStatusSyncComparedToDestinationPtrOutput
}

type applicationStatusSyncComparedToDestinationPtrType ApplicationStatusSyncComparedToDestinationArgs

func ApplicationStatusSyncComparedToDestinationPtr(v *ApplicationStatusSyncComparedToDestinationArgs) ApplicationStatusSyncComparedToDestinationPtrInput {
	return (*applicationStatusSyncComparedToDestinationPtrType)(v)
}

func (*applicationStatusSyncComparedToDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedToDestination)(nil)).Elem()
}

func (i *applicationStatusSyncComparedToDestinationPtrType) ToApplicationStatusSyncComparedToDestinationPtrOutput() ApplicationStatusSyncComparedToDestinationPtrOutput {
	return i.ToApplicationStatusSyncComparedToDestinationPtrOutputWithContext(context.Background())
}

func (i *applicationStatusSyncComparedToDestinationPtrType) ToApplicationStatusSyncComparedToDestinationPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToDestinationPtrOutput)
}

// ApplicationDestination contains deployment destination information
type ApplicationStatusSyncComparedToDestinationOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToDestination)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToDestinationOutput) ToApplicationStatusSyncComparedToDestinationOutput() ApplicationStatusSyncComparedToDestinationOutput {
	return o
}

func (o ApplicationStatusSyncComparedToDestinationOutput) ToApplicationStatusSyncComparedToDestinationOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToDestinationOutput {
	return o
}

func (o ApplicationStatusSyncComparedToDestinationOutput) ToApplicationStatusSyncComparedToDestinationPtrOutput() ApplicationStatusSyncComparedToDestinationPtrOutput {
	return o.ToApplicationStatusSyncComparedToDestinationPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusSyncComparedToDestinationOutput) ToApplicationStatusSyncComparedToDestinationPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToDestinationPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToDestination) *ApplicationStatusSyncComparedToDestination {
		return &v
	}).(ApplicationStatusSyncComparedToDestinationPtrOutput)
}

// Name of the destination cluster which can be used instead of server (url) field
func (o ApplicationStatusSyncComparedToDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace overrides the environment namespace value in the ksonnet app.yaml
func (o ApplicationStatusSyncComparedToDestinationOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToDestination) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Server overrides the environment server value in the ksonnet app.yaml
func (o ApplicationStatusSyncComparedToDestinationOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToDestination) *string { return v.Server }).(pulumi.StringPtrOutput)
}

type ApplicationStatusSyncComparedToDestinationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedToDestination)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToDestinationPtrOutput) ToApplicationStatusSyncComparedToDestinationPtrOutput() ApplicationStatusSyncComparedToDestinationPtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToDestinationPtrOutput) ToApplicationStatusSyncComparedToDestinationPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToDestinationPtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToDestinationPtrOutput) Elem() ApplicationStatusSyncComparedToDestinationOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToDestination) ApplicationStatusSyncComparedToDestination {
		return *v
	}).(ApplicationStatusSyncComparedToDestinationOutput)
}

// Name of the destination cluster which can be used instead of server (url) field
func (o ApplicationStatusSyncComparedToDestinationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToDestination) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace overrides the environment namespace value in the ksonnet app.yaml
func (o ApplicationStatusSyncComparedToDestinationPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToDestination) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Server overrides the environment server value in the ksonnet app.yaml
func (o ApplicationStatusSyncComparedToDestinationPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToDestination) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

// ApplicationSource contains information about github repository, path within repository and target application environment.
type ApplicationStatusSyncComparedToSource struct {
	// Chart is a Helm chart name
	Chart *string `pulumi:"chart"`
	// Directory holds path/directory specific options
	Directory *ApplicationStatusSyncComparedToSourceDirectory `pulumi:"directory"`
	// Helm holds helm specific options
	Helm *ApplicationStatusSyncComparedToSourceHelm `pulumi:"helm"`
	// Ksonnet holds ksonnet specific options
	Ksonnet *ApplicationStatusSyncComparedToSourceKsonnet `pulumi:"ksonnet"`
	// Kustomize holds kustomize specific options
	Kustomize *ApplicationStatusSyncComparedToSourceKustomize `pulumi:"kustomize"`
	// Path is a directory path within the Git repository
	Path *string `pulumi:"path"`
	// ConfigManagementPlugin holds config management plugin specific options
	Plugin *ApplicationStatusSyncComparedToSourcePlugin `pulumi:"plugin"`
	// RepoURL is the repository URL of the application manifests
	RepoURL string `pulumi:"repoURL"`
	// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
	TargetRevision *string `pulumi:"targetRevision"`
}

// ApplicationStatusSyncComparedToSourceInput is an input type that accepts ApplicationStatusSyncComparedToSourceArgs and ApplicationStatusSyncComparedToSourceOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceInput` via:
//
//          ApplicationStatusSyncComparedToSourceArgs{...}
type ApplicationStatusSyncComparedToSourceInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceOutput() ApplicationStatusSyncComparedToSourceOutput
	ToApplicationStatusSyncComparedToSourceOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceOutput
}

// ApplicationSource contains information about github repository, path within repository and target application environment.
type ApplicationStatusSyncComparedToSourceArgs struct {
	// Chart is a Helm chart name
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// Directory holds path/directory specific options
	Directory ApplicationStatusSyncComparedToSourceDirectoryPtrInput `pulumi:"directory"`
	// Helm holds helm specific options
	Helm ApplicationStatusSyncComparedToSourceHelmPtrInput `pulumi:"helm"`
	// Ksonnet holds ksonnet specific options
	Ksonnet ApplicationStatusSyncComparedToSourceKsonnetPtrInput `pulumi:"ksonnet"`
	// Kustomize holds kustomize specific options
	Kustomize ApplicationStatusSyncComparedToSourceKustomizePtrInput `pulumi:"kustomize"`
	// Path is a directory path within the Git repository
	Path pulumi.StringPtrInput `pulumi:"path"`
	// ConfigManagementPlugin holds config management plugin specific options
	Plugin ApplicationStatusSyncComparedToSourcePluginPtrInput `pulumi:"plugin"`
	// RepoURL is the repository URL of the application manifests
	RepoURL pulumi.StringInput `pulumi:"repoURL"`
	// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
	TargetRevision pulumi.StringPtrInput `pulumi:"targetRevision"`
}

func (ApplicationStatusSyncComparedToSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSource)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceArgs) ToApplicationStatusSyncComparedToSourceOutput() ApplicationStatusSyncComparedToSourceOutput {
	return i.ToApplicationStatusSyncComparedToSourceOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceArgs) ToApplicationStatusSyncComparedToSourceOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceOutput)
}

func (i ApplicationStatusSyncComparedToSourceArgs) ToApplicationStatusSyncComparedToSourcePtrOutput() ApplicationStatusSyncComparedToSourcePtrOutput {
	return i.ToApplicationStatusSyncComparedToSourcePtrOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceArgs) ToApplicationStatusSyncComparedToSourcePtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceOutput).ToApplicationStatusSyncComparedToSourcePtrOutputWithContext(ctx)
}

// ApplicationStatusSyncComparedToSourcePtrInput is an input type that accepts ApplicationStatusSyncComparedToSourceArgs, ApplicationStatusSyncComparedToSourcePtr and ApplicationStatusSyncComparedToSourcePtrOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourcePtrInput` via:
//
//          ApplicationStatusSyncComparedToSourceArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusSyncComparedToSourcePtrInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourcePtrOutput() ApplicationStatusSyncComparedToSourcePtrOutput
	ToApplicationStatusSyncComparedToSourcePtrOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourcePtrOutput
}

type applicationStatusSyncComparedToSourcePtrType ApplicationStatusSyncComparedToSourceArgs

func ApplicationStatusSyncComparedToSourcePtr(v *ApplicationStatusSyncComparedToSourceArgs) ApplicationStatusSyncComparedToSourcePtrInput {
	return (*applicationStatusSyncComparedToSourcePtrType)(v)
}

func (*applicationStatusSyncComparedToSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedToSource)(nil)).Elem()
}

func (i *applicationStatusSyncComparedToSourcePtrType) ToApplicationStatusSyncComparedToSourcePtrOutput() ApplicationStatusSyncComparedToSourcePtrOutput {
	return i.ToApplicationStatusSyncComparedToSourcePtrOutputWithContext(context.Background())
}

func (i *applicationStatusSyncComparedToSourcePtrType) ToApplicationStatusSyncComparedToSourcePtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourcePtrOutput)
}

// ApplicationSource contains information about github repository, path within repository and target application environment.
type ApplicationStatusSyncComparedToSourceOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSource)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceOutput) ToApplicationStatusSyncComparedToSourceOutput() ApplicationStatusSyncComparedToSourceOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceOutput) ToApplicationStatusSyncComparedToSourceOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceOutput) ToApplicationStatusSyncComparedToSourcePtrOutput() ApplicationStatusSyncComparedToSourcePtrOutput {
	return o.ToApplicationStatusSyncComparedToSourcePtrOutputWithContext(context.Background())
}

func (o ApplicationStatusSyncComparedToSourceOutput) ToApplicationStatusSyncComparedToSourcePtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourcePtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSource) *ApplicationStatusSyncComparedToSource {
		return &v
	}).(ApplicationStatusSyncComparedToSourcePtrOutput)
}

// Chart is a Helm chart name
func (o ApplicationStatusSyncComparedToSourceOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSource) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
func (o ApplicationStatusSyncComparedToSourceOutput) Directory() ApplicationStatusSyncComparedToSourceDirectoryPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSource) *ApplicationStatusSyncComparedToSourceDirectory {
		return v.Directory
	}).(ApplicationStatusSyncComparedToSourceDirectoryPtrOutput)
}

// Helm holds helm specific options
func (o ApplicationStatusSyncComparedToSourceOutput) Helm() ApplicationStatusSyncComparedToSourceHelmPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSource) *ApplicationStatusSyncComparedToSourceHelm {
		return v.Helm
	}).(ApplicationStatusSyncComparedToSourceHelmPtrOutput)
}

// Ksonnet holds ksonnet specific options
func (o ApplicationStatusSyncComparedToSourceOutput) Ksonnet() ApplicationStatusSyncComparedToSourceKsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSource) *ApplicationStatusSyncComparedToSourceKsonnet {
		return v.Ksonnet
	}).(ApplicationStatusSyncComparedToSourceKsonnetPtrOutput)
}

// Kustomize holds kustomize specific options
func (o ApplicationStatusSyncComparedToSourceOutput) Kustomize() ApplicationStatusSyncComparedToSourceKustomizePtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSource) *ApplicationStatusSyncComparedToSourceKustomize {
		return v.Kustomize
	}).(ApplicationStatusSyncComparedToSourceKustomizePtrOutput)
}

// Path is a directory path within the Git repository
func (o ApplicationStatusSyncComparedToSourceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSource) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
func (o ApplicationStatusSyncComparedToSourceOutput) Plugin() ApplicationStatusSyncComparedToSourcePluginPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSource) *ApplicationStatusSyncComparedToSourcePlugin {
		return v.Plugin
	}).(ApplicationStatusSyncComparedToSourcePluginPtrOutput)
}

// RepoURL is the repository URL of the application manifests
func (o ApplicationStatusSyncComparedToSourceOutput) RepoURL() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSource) string { return v.RepoURL }).(pulumi.StringOutput)
}

// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
func (o ApplicationStatusSyncComparedToSourceOutput) TargetRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSource) *string { return v.TargetRevision }).(pulumi.StringPtrOutput)
}

type ApplicationStatusSyncComparedToSourcePtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedToSource)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourcePtrOutput) ToApplicationStatusSyncComparedToSourcePtrOutput() ApplicationStatusSyncComparedToSourcePtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourcePtrOutput) ToApplicationStatusSyncComparedToSourcePtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourcePtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourcePtrOutput) Elem() ApplicationStatusSyncComparedToSourceOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSource) ApplicationStatusSyncComparedToSource { return *v }).(ApplicationStatusSyncComparedToSourceOutput)
}

// Chart is a Helm chart name
func (o ApplicationStatusSyncComparedToSourcePtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSource) *string {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
func (o ApplicationStatusSyncComparedToSourcePtrOutput) Directory() ApplicationStatusSyncComparedToSourceDirectoryPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSource) *ApplicationStatusSyncComparedToSourceDirectory {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(ApplicationStatusSyncComparedToSourceDirectoryPtrOutput)
}

// Helm holds helm specific options
func (o ApplicationStatusSyncComparedToSourcePtrOutput) Helm() ApplicationStatusSyncComparedToSourceHelmPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSource) *ApplicationStatusSyncComparedToSourceHelm {
		if v == nil {
			return nil
		}
		return v.Helm
	}).(ApplicationStatusSyncComparedToSourceHelmPtrOutput)
}

// Ksonnet holds ksonnet specific options
func (o ApplicationStatusSyncComparedToSourcePtrOutput) Ksonnet() ApplicationStatusSyncComparedToSourceKsonnetPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSource) *ApplicationStatusSyncComparedToSourceKsonnet {
		if v == nil {
			return nil
		}
		return v.Ksonnet
	}).(ApplicationStatusSyncComparedToSourceKsonnetPtrOutput)
}

// Kustomize holds kustomize specific options
func (o ApplicationStatusSyncComparedToSourcePtrOutput) Kustomize() ApplicationStatusSyncComparedToSourceKustomizePtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSource) *ApplicationStatusSyncComparedToSourceKustomize {
		if v == nil {
			return nil
		}
		return v.Kustomize
	}).(ApplicationStatusSyncComparedToSourceKustomizePtrOutput)
}

// Path is a directory path within the Git repository
func (o ApplicationStatusSyncComparedToSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSource) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
func (o ApplicationStatusSyncComparedToSourcePtrOutput) Plugin() ApplicationStatusSyncComparedToSourcePluginPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSource) *ApplicationStatusSyncComparedToSourcePlugin {
		if v == nil {
			return nil
		}
		return v.Plugin
	}).(ApplicationStatusSyncComparedToSourcePluginPtrOutput)
}

// RepoURL is the repository URL of the application manifests
func (o ApplicationStatusSyncComparedToSourcePtrOutput) RepoURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSource) *string {
		if v == nil {
			return nil
		}
		return &v.RepoURL
	}).(pulumi.StringPtrOutput)
}

// TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
func (o ApplicationStatusSyncComparedToSourcePtrOutput) TargetRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSource) *string {
		if v == nil {
			return nil
		}
		return v.TargetRevision
	}).(pulumi.StringPtrOutput)
}

// Directory holds path/directory specific options
type ApplicationStatusSyncComparedToSourceDirectory struct {
	// ApplicationSourceJsonnet holds jsonnet specific options
	Jsonnet *ApplicationStatusSyncComparedToSourceDirectoryJsonnet `pulumi:"jsonnet"`
	Recurse *bool                                                  `pulumi:"recurse"`
}

// ApplicationStatusSyncComparedToSourceDirectoryInput is an input type that accepts ApplicationStatusSyncComparedToSourceDirectoryArgs and ApplicationStatusSyncComparedToSourceDirectoryOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceDirectoryInput` via:
//
//          ApplicationStatusSyncComparedToSourceDirectoryArgs{...}
type ApplicationStatusSyncComparedToSourceDirectoryInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceDirectoryOutput() ApplicationStatusSyncComparedToSourceDirectoryOutput
	ToApplicationStatusSyncComparedToSourceDirectoryOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceDirectoryOutput
}

// Directory holds path/directory specific options
type ApplicationStatusSyncComparedToSourceDirectoryArgs struct {
	// ApplicationSourceJsonnet holds jsonnet specific options
	Jsonnet ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrInput `pulumi:"jsonnet"`
	Recurse pulumi.BoolPtrInput                                           `pulumi:"recurse"`
}

func (ApplicationStatusSyncComparedToSourceDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceDirectory)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceDirectoryArgs) ToApplicationStatusSyncComparedToSourceDirectoryOutput() ApplicationStatusSyncComparedToSourceDirectoryOutput {
	return i.ToApplicationStatusSyncComparedToSourceDirectoryOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceDirectoryArgs) ToApplicationStatusSyncComparedToSourceDirectoryOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceDirectoryOutput)
}

func (i ApplicationStatusSyncComparedToSourceDirectoryArgs) ToApplicationStatusSyncComparedToSourceDirectoryPtrOutput() ApplicationStatusSyncComparedToSourceDirectoryPtrOutput {
	return i.ToApplicationStatusSyncComparedToSourceDirectoryPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceDirectoryArgs) ToApplicationStatusSyncComparedToSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceDirectoryOutput).ToApplicationStatusSyncComparedToSourceDirectoryPtrOutputWithContext(ctx)
}

// ApplicationStatusSyncComparedToSourceDirectoryPtrInput is an input type that accepts ApplicationStatusSyncComparedToSourceDirectoryArgs, ApplicationStatusSyncComparedToSourceDirectoryPtr and ApplicationStatusSyncComparedToSourceDirectoryPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceDirectoryPtrInput` via:
//
//          ApplicationStatusSyncComparedToSourceDirectoryArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusSyncComparedToSourceDirectoryPtrInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceDirectoryPtrOutput() ApplicationStatusSyncComparedToSourceDirectoryPtrOutput
	ToApplicationStatusSyncComparedToSourceDirectoryPtrOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceDirectoryPtrOutput
}

type applicationStatusSyncComparedToSourceDirectoryPtrType ApplicationStatusSyncComparedToSourceDirectoryArgs

func ApplicationStatusSyncComparedToSourceDirectoryPtr(v *ApplicationStatusSyncComparedToSourceDirectoryArgs) ApplicationStatusSyncComparedToSourceDirectoryPtrInput {
	return (*applicationStatusSyncComparedToSourceDirectoryPtrType)(v)
}

func (*applicationStatusSyncComparedToSourceDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedToSourceDirectory)(nil)).Elem()
}

func (i *applicationStatusSyncComparedToSourceDirectoryPtrType) ToApplicationStatusSyncComparedToSourceDirectoryPtrOutput() ApplicationStatusSyncComparedToSourceDirectoryPtrOutput {
	return i.ToApplicationStatusSyncComparedToSourceDirectoryPtrOutputWithContext(context.Background())
}

func (i *applicationStatusSyncComparedToSourceDirectoryPtrType) ToApplicationStatusSyncComparedToSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceDirectoryPtrOutput)
}

// Directory holds path/directory specific options
type ApplicationStatusSyncComparedToSourceDirectoryOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceDirectory)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceDirectoryOutput) ToApplicationStatusSyncComparedToSourceDirectoryOutput() ApplicationStatusSyncComparedToSourceDirectoryOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceDirectoryOutput) ToApplicationStatusSyncComparedToSourceDirectoryOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceDirectoryOutput) ToApplicationStatusSyncComparedToSourceDirectoryPtrOutput() ApplicationStatusSyncComparedToSourceDirectoryPtrOutput {
	return o.ToApplicationStatusSyncComparedToSourceDirectoryPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusSyncComparedToSourceDirectoryOutput) ToApplicationStatusSyncComparedToSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceDirectory) *ApplicationStatusSyncComparedToSourceDirectory {
		return &v
	}).(ApplicationStatusSyncComparedToSourceDirectoryPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
func (o ApplicationStatusSyncComparedToSourceDirectoryOutput) Jsonnet() ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceDirectory) *ApplicationStatusSyncComparedToSourceDirectoryJsonnet {
		return v.Jsonnet
	}).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput)
}

func (o ApplicationStatusSyncComparedToSourceDirectoryOutput) Recurse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceDirectory) *bool { return v.Recurse }).(pulumi.BoolPtrOutput)
}

type ApplicationStatusSyncComparedToSourceDirectoryPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedToSourceDirectory)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceDirectoryPtrOutput) ToApplicationStatusSyncComparedToSourceDirectoryPtrOutput() ApplicationStatusSyncComparedToSourceDirectoryPtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceDirectoryPtrOutput) ToApplicationStatusSyncComparedToSourceDirectoryPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryPtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceDirectoryPtrOutput) Elem() ApplicationStatusSyncComparedToSourceDirectoryOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceDirectory) ApplicationStatusSyncComparedToSourceDirectory {
		return *v
	}).(ApplicationStatusSyncComparedToSourceDirectoryOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
func (o ApplicationStatusSyncComparedToSourceDirectoryPtrOutput) Jsonnet() ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceDirectory) *ApplicationStatusSyncComparedToSourceDirectoryJsonnet {
		if v == nil {
			return nil
		}
		return v.Jsonnet
	}).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput)
}

func (o ApplicationStatusSyncComparedToSourceDirectoryPtrOutput) Recurse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceDirectory) *bool {
		if v == nil {
			return nil
		}
		return v.Recurse
	}).(pulumi.BoolPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationStatusSyncComparedToSourceDirectoryJsonnet struct {
	// ExtVars is a list of Jsonnet External Variables
	ExtVars []ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars `pulumi:"extVars"`
	// Additional library search dirs
	Libs []string `pulumi:"libs"`
	// TLAS is a list of Jsonnet Top-level Arguments
	Tlas []ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas `pulumi:"tlas"`
}

// ApplicationStatusSyncComparedToSourceDirectoryJsonnetInput is an input type that accepts ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs and ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceDirectoryJsonnetInput` via:
//
//          ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs{...}
type ApplicationStatusSyncComparedToSourceDirectoryJsonnetInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput
	ToApplicationStatusSyncComparedToSourceDirectoryJsonnetOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs struct {
	// ExtVars is a list of Jsonnet External Variables
	ExtVars ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayInput `pulumi:"extVars"`
	// Additional library search dirs
	Libs pulumi.StringArrayInput `pulumi:"libs"`
	// TLAS is a list of Jsonnet Top-level Arguments
	Tlas ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayInput `pulumi:"tlas"`
}

func (ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceDirectoryJsonnet)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput {
	return i.ToApplicationStatusSyncComparedToSourceDirectoryJsonnetOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput)
}

func (i ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput {
	return i.ToApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput).ToApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutputWithContext(ctx)
}

// ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrInput is an input type that accepts ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs, ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtr and ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrInput` via:
//
//          ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput
	ToApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput
}

type applicationStatusSyncComparedToSourceDirectoryJsonnetPtrType ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs

func ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtr(v *ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs) ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrInput {
	return (*applicationStatusSyncComparedToSourceDirectoryJsonnetPtrType)(v)
}

func (*applicationStatusSyncComparedToSourceDirectoryJsonnetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedToSourceDirectoryJsonnet)(nil)).Elem()
}

func (i *applicationStatusSyncComparedToSourceDirectoryJsonnetPtrType) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput {
	return i.ToApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (i *applicationStatusSyncComparedToSourceDirectoryJsonnetPtrType) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput)
}

// ApplicationSourceJsonnet holds jsonnet specific options
type ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceDirectoryJsonnet)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput {
	return o.ToApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceDirectoryJsonnet) *ApplicationStatusSyncComparedToSourceDirectoryJsonnet {
		return &v
	}).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput)
}

// ExtVars is a list of Jsonnet External Variables
func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput) ExtVars() ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceDirectoryJsonnet) []ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars {
		return v.ExtVars
	}).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput)
}

// Additional library search dirs
func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput) Libs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceDirectoryJsonnet) []string { return v.Libs }).(pulumi.StringArrayOutput)
}

// TLAS is a list of Jsonnet Top-level Arguments
func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput) Tlas() ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceDirectoryJsonnet) []ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas {
		return v.Tlas
	}).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput)
}

type ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedToSourceDirectoryJsonnet)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput) Elem() ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceDirectoryJsonnet) ApplicationStatusSyncComparedToSourceDirectoryJsonnet {
		return *v
	}).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput)
}

// ExtVars is a list of Jsonnet External Variables
func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput) ExtVars() ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceDirectoryJsonnet) []ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars {
		if v == nil {
			return nil
		}
		return v.ExtVars
	}).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput)
}

// Additional library search dirs
func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput) Libs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceDirectoryJsonnet) []string {
		if v == nil {
			return nil
		}
		return v.Libs
	}).(pulumi.StringArrayOutput)
}

// TLAS is a list of Jsonnet Top-level Arguments
func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput) Tlas() ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceDirectoryJsonnet) []ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas {
		if v == nil {
			return nil
		}
		return v.Tlas
	}).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars struct {
	Code  *bool  `pulumi:"code"`
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsInput is an input type that accepts ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArgs and ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsInput` via:
//
//          ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArgs{...}
type ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput
	ToApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArgs struct {
	Code  pulumi.BoolPtrInput `pulumi:"code"`
	Name  pulumi.StringInput  `pulumi:"name"`
	Value pulumi.StringInput  `pulumi:"value"`
}

func (ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArgs) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput {
	return i.ToApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArgs) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput)
}

// ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayInput is an input type that accepts ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArray and ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayInput` via:
//
//          ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArray{ ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArgs{...} }
type ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput
	ToApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput
}

type ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArray []ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsInput

func (ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArray) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput {
	return i.ToApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArray) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput) Code() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars) *bool { return v.Code }).(pulumi.BoolPtrOutput)
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput) Index(i pulumi.IntInput) ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars {
		return vs[0].([]ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars)[vs[1].(int)]
	}).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas struct {
	Code  *bool  `pulumi:"code"`
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasInput is an input type that accepts ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArgs and ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasInput` via:
//
//          ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArgs{...}
type ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput
	ToApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArgs struct {
	Code  pulumi.BoolPtrInput `pulumi:"code"`
	Name  pulumi.StringInput  `pulumi:"name"`
	Value pulumi.StringInput  `pulumi:"value"`
}

func (ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArgs) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput {
	return i.ToApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArgs) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput)
}

// ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayInput is an input type that accepts ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArray and ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayInput` via:
//
//          ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArray{ ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArgs{...} }
type ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput
	ToApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput
}

type ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArray []ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasInput

func (ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArray) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput {
	return i.ToApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArray) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput)
}

// JsonnetVar is a jsonnet variable
type ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput) Code() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas) *bool { return v.Code }).(pulumi.BoolPtrOutput)
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput() ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput) ToApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput) Index(i pulumi.IntInput) ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas {
		return vs[0].([]ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas)[vs[1].(int)]
	}).(ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput)
}

// Helm holds helm specific options
type ApplicationStatusSyncComparedToSourceHelm struct {
	// FileParameters are file parameters to the helm template
	FileParameters []ApplicationStatusSyncComparedToSourceHelmFileParameters `pulumi:"fileParameters"`
	// Parameters are parameters to the helm template
	Parameters []ApplicationStatusSyncComparedToSourceHelmParameters `pulumi:"parameters"`
	// The Helm release name. If omitted it will use the application name
	ReleaseName *string `pulumi:"releaseName"`
	// ValuesFiles is a list of Helm value files to use when generating a template
	ValueFiles []string `pulumi:"valueFiles"`
	// Values is Helm values, typically defined as a block
	Values *string `pulumi:"values"`
}

// ApplicationStatusSyncComparedToSourceHelmInput is an input type that accepts ApplicationStatusSyncComparedToSourceHelmArgs and ApplicationStatusSyncComparedToSourceHelmOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceHelmInput` via:
//
//          ApplicationStatusSyncComparedToSourceHelmArgs{...}
type ApplicationStatusSyncComparedToSourceHelmInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceHelmOutput() ApplicationStatusSyncComparedToSourceHelmOutput
	ToApplicationStatusSyncComparedToSourceHelmOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceHelmOutput
}

// Helm holds helm specific options
type ApplicationStatusSyncComparedToSourceHelmArgs struct {
	// FileParameters are file parameters to the helm template
	FileParameters ApplicationStatusSyncComparedToSourceHelmFileParametersArrayInput `pulumi:"fileParameters"`
	// Parameters are parameters to the helm template
	Parameters ApplicationStatusSyncComparedToSourceHelmParametersArrayInput `pulumi:"parameters"`
	// The Helm release name. If omitted it will use the application name
	ReleaseName pulumi.StringPtrInput `pulumi:"releaseName"`
	// ValuesFiles is a list of Helm value files to use when generating a template
	ValueFiles pulumi.StringArrayInput `pulumi:"valueFiles"`
	// Values is Helm values, typically defined as a block
	Values pulumi.StringPtrInput `pulumi:"values"`
}

func (ApplicationStatusSyncComparedToSourceHelmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceHelm)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceHelmArgs) ToApplicationStatusSyncComparedToSourceHelmOutput() ApplicationStatusSyncComparedToSourceHelmOutput {
	return i.ToApplicationStatusSyncComparedToSourceHelmOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceHelmArgs) ToApplicationStatusSyncComparedToSourceHelmOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceHelmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceHelmOutput)
}

func (i ApplicationStatusSyncComparedToSourceHelmArgs) ToApplicationStatusSyncComparedToSourceHelmPtrOutput() ApplicationStatusSyncComparedToSourceHelmPtrOutput {
	return i.ToApplicationStatusSyncComparedToSourceHelmPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceHelmArgs) ToApplicationStatusSyncComparedToSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceHelmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceHelmOutput).ToApplicationStatusSyncComparedToSourceHelmPtrOutputWithContext(ctx)
}

// ApplicationStatusSyncComparedToSourceHelmPtrInput is an input type that accepts ApplicationStatusSyncComparedToSourceHelmArgs, ApplicationStatusSyncComparedToSourceHelmPtr and ApplicationStatusSyncComparedToSourceHelmPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceHelmPtrInput` via:
//
//          ApplicationStatusSyncComparedToSourceHelmArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusSyncComparedToSourceHelmPtrInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceHelmPtrOutput() ApplicationStatusSyncComparedToSourceHelmPtrOutput
	ToApplicationStatusSyncComparedToSourceHelmPtrOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceHelmPtrOutput
}

type applicationStatusSyncComparedToSourceHelmPtrType ApplicationStatusSyncComparedToSourceHelmArgs

func ApplicationStatusSyncComparedToSourceHelmPtr(v *ApplicationStatusSyncComparedToSourceHelmArgs) ApplicationStatusSyncComparedToSourceHelmPtrInput {
	return (*applicationStatusSyncComparedToSourceHelmPtrType)(v)
}

func (*applicationStatusSyncComparedToSourceHelmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedToSourceHelm)(nil)).Elem()
}

func (i *applicationStatusSyncComparedToSourceHelmPtrType) ToApplicationStatusSyncComparedToSourceHelmPtrOutput() ApplicationStatusSyncComparedToSourceHelmPtrOutput {
	return i.ToApplicationStatusSyncComparedToSourceHelmPtrOutputWithContext(context.Background())
}

func (i *applicationStatusSyncComparedToSourceHelmPtrType) ToApplicationStatusSyncComparedToSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceHelmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceHelmPtrOutput)
}

// Helm holds helm specific options
type ApplicationStatusSyncComparedToSourceHelmOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceHelmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceHelm)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceHelmOutput) ToApplicationStatusSyncComparedToSourceHelmOutput() ApplicationStatusSyncComparedToSourceHelmOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceHelmOutput) ToApplicationStatusSyncComparedToSourceHelmOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceHelmOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceHelmOutput) ToApplicationStatusSyncComparedToSourceHelmPtrOutput() ApplicationStatusSyncComparedToSourceHelmPtrOutput {
	return o.ToApplicationStatusSyncComparedToSourceHelmPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusSyncComparedToSourceHelmOutput) ToApplicationStatusSyncComparedToSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceHelmPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceHelm) *ApplicationStatusSyncComparedToSourceHelm {
		return &v
	}).(ApplicationStatusSyncComparedToSourceHelmPtrOutput)
}

// FileParameters are file parameters to the helm template
func (o ApplicationStatusSyncComparedToSourceHelmOutput) FileParameters() ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceHelm) []ApplicationStatusSyncComparedToSourceHelmFileParameters {
		return v.FileParameters
	}).(ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput)
}

// Parameters are parameters to the helm template
func (o ApplicationStatusSyncComparedToSourceHelmOutput) Parameters() ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceHelm) []ApplicationStatusSyncComparedToSourceHelmParameters {
		return v.Parameters
	}).(ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput)
}

// The Helm release name. If omitted it will use the application name
func (o ApplicationStatusSyncComparedToSourceHelmOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceHelm) *string { return v.ReleaseName }).(pulumi.StringPtrOutput)
}

// ValuesFiles is a list of Helm value files to use when generating a template
func (o ApplicationStatusSyncComparedToSourceHelmOutput) ValueFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceHelm) []string { return v.ValueFiles }).(pulumi.StringArrayOutput)
}

// Values is Helm values, typically defined as a block
func (o ApplicationStatusSyncComparedToSourceHelmOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceHelm) *string { return v.Values }).(pulumi.StringPtrOutput)
}

type ApplicationStatusSyncComparedToSourceHelmPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceHelmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedToSourceHelm)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceHelmPtrOutput) ToApplicationStatusSyncComparedToSourceHelmPtrOutput() ApplicationStatusSyncComparedToSourceHelmPtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceHelmPtrOutput) ToApplicationStatusSyncComparedToSourceHelmPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceHelmPtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceHelmPtrOutput) Elem() ApplicationStatusSyncComparedToSourceHelmOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceHelm) ApplicationStatusSyncComparedToSourceHelm {
		return *v
	}).(ApplicationStatusSyncComparedToSourceHelmOutput)
}

// FileParameters are file parameters to the helm template
func (o ApplicationStatusSyncComparedToSourceHelmPtrOutput) FileParameters() ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceHelm) []ApplicationStatusSyncComparedToSourceHelmFileParameters {
		if v == nil {
			return nil
		}
		return v.FileParameters
	}).(ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput)
}

// Parameters are parameters to the helm template
func (o ApplicationStatusSyncComparedToSourceHelmPtrOutput) Parameters() ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceHelm) []ApplicationStatusSyncComparedToSourceHelmParameters {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput)
}

// The Helm release name. If omitted it will use the application name
func (o ApplicationStatusSyncComparedToSourceHelmPtrOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceHelm) *string {
		if v == nil {
			return nil
		}
		return v.ReleaseName
	}).(pulumi.StringPtrOutput)
}

// ValuesFiles is a list of Helm value files to use when generating a template
func (o ApplicationStatusSyncComparedToSourceHelmPtrOutput) ValueFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceHelm) []string {
		if v == nil {
			return nil
		}
		return v.ValueFiles
	}).(pulumi.StringArrayOutput)
}

// Values is Helm values, typically defined as a block
func (o ApplicationStatusSyncComparedToSourceHelmPtrOutput) Values() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceHelm) *string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringPtrOutput)
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationStatusSyncComparedToSourceHelmFileParameters struct {
	// Name is the name of the helm parameter
	Name *string `pulumi:"name"`
	// Path is the path value for the helm parameter
	Path *string `pulumi:"path"`
}

// ApplicationStatusSyncComparedToSourceHelmFileParametersInput is an input type that accepts ApplicationStatusSyncComparedToSourceHelmFileParametersArgs and ApplicationStatusSyncComparedToSourceHelmFileParametersOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceHelmFileParametersInput` via:
//
//          ApplicationStatusSyncComparedToSourceHelmFileParametersArgs{...}
type ApplicationStatusSyncComparedToSourceHelmFileParametersInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceHelmFileParametersOutput() ApplicationStatusSyncComparedToSourceHelmFileParametersOutput
	ToApplicationStatusSyncComparedToSourceHelmFileParametersOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceHelmFileParametersOutput
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationStatusSyncComparedToSourceHelmFileParametersArgs struct {
	// Name is the name of the helm parameter
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path is the path value for the helm parameter
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ApplicationStatusSyncComparedToSourceHelmFileParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceHelmFileParameters)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceHelmFileParametersArgs) ToApplicationStatusSyncComparedToSourceHelmFileParametersOutput() ApplicationStatusSyncComparedToSourceHelmFileParametersOutput {
	return i.ToApplicationStatusSyncComparedToSourceHelmFileParametersOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceHelmFileParametersArgs) ToApplicationStatusSyncComparedToSourceHelmFileParametersOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceHelmFileParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceHelmFileParametersOutput)
}

// ApplicationStatusSyncComparedToSourceHelmFileParametersArrayInput is an input type that accepts ApplicationStatusSyncComparedToSourceHelmFileParametersArray and ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceHelmFileParametersArrayInput` via:
//
//          ApplicationStatusSyncComparedToSourceHelmFileParametersArray{ ApplicationStatusSyncComparedToSourceHelmFileParametersArgs{...} }
type ApplicationStatusSyncComparedToSourceHelmFileParametersArrayInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput() ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput
	ToApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput
}

type ApplicationStatusSyncComparedToSourceHelmFileParametersArray []ApplicationStatusSyncComparedToSourceHelmFileParametersInput

func (ApplicationStatusSyncComparedToSourceHelmFileParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusSyncComparedToSourceHelmFileParameters)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceHelmFileParametersArray) ToApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput() ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput {
	return i.ToApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceHelmFileParametersArray) ToApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput)
}

// HelmFileParameter is a file parameter to a helm template
type ApplicationStatusSyncComparedToSourceHelmFileParametersOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceHelmFileParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceHelmFileParameters)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceHelmFileParametersOutput) ToApplicationStatusSyncComparedToSourceHelmFileParametersOutput() ApplicationStatusSyncComparedToSourceHelmFileParametersOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceHelmFileParametersOutput) ToApplicationStatusSyncComparedToSourceHelmFileParametersOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceHelmFileParametersOutput {
	return o
}

// Name is the name of the helm parameter
func (o ApplicationStatusSyncComparedToSourceHelmFileParametersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceHelmFileParameters) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path is the path value for the helm parameter
func (o ApplicationStatusSyncComparedToSourceHelmFileParametersOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceHelmFileParameters) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusSyncComparedToSourceHelmFileParameters)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput) ToApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput() ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput) ToApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput) Index(i pulumi.IntInput) ApplicationStatusSyncComparedToSourceHelmFileParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusSyncComparedToSourceHelmFileParameters {
		return vs[0].([]ApplicationStatusSyncComparedToSourceHelmFileParameters)[vs[1].(int)]
	}).(ApplicationStatusSyncComparedToSourceHelmFileParametersOutput)
}

// HelmParameter is a parameter to a helm template
type ApplicationStatusSyncComparedToSourceHelmParameters struct {
	// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
	ForceString *bool `pulumi:"forceString"`
	// Name is the name of the helm parameter
	Name *string `pulumi:"name"`
	// Value is the value for the helm parameter
	Value *string `pulumi:"value"`
}

// ApplicationStatusSyncComparedToSourceHelmParametersInput is an input type that accepts ApplicationStatusSyncComparedToSourceHelmParametersArgs and ApplicationStatusSyncComparedToSourceHelmParametersOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceHelmParametersInput` via:
//
//          ApplicationStatusSyncComparedToSourceHelmParametersArgs{...}
type ApplicationStatusSyncComparedToSourceHelmParametersInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceHelmParametersOutput() ApplicationStatusSyncComparedToSourceHelmParametersOutput
	ToApplicationStatusSyncComparedToSourceHelmParametersOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceHelmParametersOutput
}

// HelmParameter is a parameter to a helm template
type ApplicationStatusSyncComparedToSourceHelmParametersArgs struct {
	// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
	ForceString pulumi.BoolPtrInput `pulumi:"forceString"`
	// Name is the name of the helm parameter
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value for the helm parameter
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApplicationStatusSyncComparedToSourceHelmParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceHelmParameters)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceHelmParametersArgs) ToApplicationStatusSyncComparedToSourceHelmParametersOutput() ApplicationStatusSyncComparedToSourceHelmParametersOutput {
	return i.ToApplicationStatusSyncComparedToSourceHelmParametersOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceHelmParametersArgs) ToApplicationStatusSyncComparedToSourceHelmParametersOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceHelmParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceHelmParametersOutput)
}

// ApplicationStatusSyncComparedToSourceHelmParametersArrayInput is an input type that accepts ApplicationStatusSyncComparedToSourceHelmParametersArray and ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceHelmParametersArrayInput` via:
//
//          ApplicationStatusSyncComparedToSourceHelmParametersArray{ ApplicationStatusSyncComparedToSourceHelmParametersArgs{...} }
type ApplicationStatusSyncComparedToSourceHelmParametersArrayInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceHelmParametersArrayOutput() ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput
	ToApplicationStatusSyncComparedToSourceHelmParametersArrayOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput
}

type ApplicationStatusSyncComparedToSourceHelmParametersArray []ApplicationStatusSyncComparedToSourceHelmParametersInput

func (ApplicationStatusSyncComparedToSourceHelmParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusSyncComparedToSourceHelmParameters)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceHelmParametersArray) ToApplicationStatusSyncComparedToSourceHelmParametersArrayOutput() ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput {
	return i.ToApplicationStatusSyncComparedToSourceHelmParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceHelmParametersArray) ToApplicationStatusSyncComparedToSourceHelmParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput)
}

// HelmParameter is a parameter to a helm template
type ApplicationStatusSyncComparedToSourceHelmParametersOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceHelmParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceHelmParameters)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceHelmParametersOutput) ToApplicationStatusSyncComparedToSourceHelmParametersOutput() ApplicationStatusSyncComparedToSourceHelmParametersOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceHelmParametersOutput) ToApplicationStatusSyncComparedToSourceHelmParametersOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceHelmParametersOutput {
	return o
}

// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
func (o ApplicationStatusSyncComparedToSourceHelmParametersOutput) ForceString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceHelmParameters) *bool { return v.ForceString }).(pulumi.BoolPtrOutput)
}

// Name is the name of the helm parameter
func (o ApplicationStatusSyncComparedToSourceHelmParametersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceHelmParameters) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value for the helm parameter
func (o ApplicationStatusSyncComparedToSourceHelmParametersOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceHelmParameters) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusSyncComparedToSourceHelmParameters)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput) ToApplicationStatusSyncComparedToSourceHelmParametersArrayOutput() ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput) ToApplicationStatusSyncComparedToSourceHelmParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput) Index(i pulumi.IntInput) ApplicationStatusSyncComparedToSourceHelmParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusSyncComparedToSourceHelmParameters {
		return vs[0].([]ApplicationStatusSyncComparedToSourceHelmParameters)[vs[1].(int)]
	}).(ApplicationStatusSyncComparedToSourceHelmParametersOutput)
}

// Ksonnet holds ksonnet specific options
type ApplicationStatusSyncComparedToSourceKsonnet struct {
	// Environment is a ksonnet application environment name
	Environment *string `pulumi:"environment"`
	// Parameters are a list of ksonnet component parameter override values
	Parameters []ApplicationStatusSyncComparedToSourceKsonnetParameters `pulumi:"parameters"`
}

// ApplicationStatusSyncComparedToSourceKsonnetInput is an input type that accepts ApplicationStatusSyncComparedToSourceKsonnetArgs and ApplicationStatusSyncComparedToSourceKsonnetOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceKsonnetInput` via:
//
//          ApplicationStatusSyncComparedToSourceKsonnetArgs{...}
type ApplicationStatusSyncComparedToSourceKsonnetInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceKsonnetOutput() ApplicationStatusSyncComparedToSourceKsonnetOutput
	ToApplicationStatusSyncComparedToSourceKsonnetOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceKsonnetOutput
}

// Ksonnet holds ksonnet specific options
type ApplicationStatusSyncComparedToSourceKsonnetArgs struct {
	// Environment is a ksonnet application environment name
	Environment pulumi.StringPtrInput `pulumi:"environment"`
	// Parameters are a list of ksonnet component parameter override values
	Parameters ApplicationStatusSyncComparedToSourceKsonnetParametersArrayInput `pulumi:"parameters"`
}

func (ApplicationStatusSyncComparedToSourceKsonnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceKsonnet)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceKsonnetArgs) ToApplicationStatusSyncComparedToSourceKsonnetOutput() ApplicationStatusSyncComparedToSourceKsonnetOutput {
	return i.ToApplicationStatusSyncComparedToSourceKsonnetOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceKsonnetArgs) ToApplicationStatusSyncComparedToSourceKsonnetOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKsonnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceKsonnetOutput)
}

func (i ApplicationStatusSyncComparedToSourceKsonnetArgs) ToApplicationStatusSyncComparedToSourceKsonnetPtrOutput() ApplicationStatusSyncComparedToSourceKsonnetPtrOutput {
	return i.ToApplicationStatusSyncComparedToSourceKsonnetPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceKsonnetArgs) ToApplicationStatusSyncComparedToSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceKsonnetOutput).ToApplicationStatusSyncComparedToSourceKsonnetPtrOutputWithContext(ctx)
}

// ApplicationStatusSyncComparedToSourceKsonnetPtrInput is an input type that accepts ApplicationStatusSyncComparedToSourceKsonnetArgs, ApplicationStatusSyncComparedToSourceKsonnetPtr and ApplicationStatusSyncComparedToSourceKsonnetPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceKsonnetPtrInput` via:
//
//          ApplicationStatusSyncComparedToSourceKsonnetArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusSyncComparedToSourceKsonnetPtrInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceKsonnetPtrOutput() ApplicationStatusSyncComparedToSourceKsonnetPtrOutput
	ToApplicationStatusSyncComparedToSourceKsonnetPtrOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceKsonnetPtrOutput
}

type applicationStatusSyncComparedToSourceKsonnetPtrType ApplicationStatusSyncComparedToSourceKsonnetArgs

func ApplicationStatusSyncComparedToSourceKsonnetPtr(v *ApplicationStatusSyncComparedToSourceKsonnetArgs) ApplicationStatusSyncComparedToSourceKsonnetPtrInput {
	return (*applicationStatusSyncComparedToSourceKsonnetPtrType)(v)
}

func (*applicationStatusSyncComparedToSourceKsonnetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedToSourceKsonnet)(nil)).Elem()
}

func (i *applicationStatusSyncComparedToSourceKsonnetPtrType) ToApplicationStatusSyncComparedToSourceKsonnetPtrOutput() ApplicationStatusSyncComparedToSourceKsonnetPtrOutput {
	return i.ToApplicationStatusSyncComparedToSourceKsonnetPtrOutputWithContext(context.Background())
}

func (i *applicationStatusSyncComparedToSourceKsonnetPtrType) ToApplicationStatusSyncComparedToSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKsonnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceKsonnetPtrOutput)
}

// Ksonnet holds ksonnet specific options
type ApplicationStatusSyncComparedToSourceKsonnetOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceKsonnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceKsonnet)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceKsonnetOutput) ToApplicationStatusSyncComparedToSourceKsonnetOutput() ApplicationStatusSyncComparedToSourceKsonnetOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceKsonnetOutput) ToApplicationStatusSyncComparedToSourceKsonnetOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKsonnetOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceKsonnetOutput) ToApplicationStatusSyncComparedToSourceKsonnetPtrOutput() ApplicationStatusSyncComparedToSourceKsonnetPtrOutput {
	return o.ToApplicationStatusSyncComparedToSourceKsonnetPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusSyncComparedToSourceKsonnetOutput) ToApplicationStatusSyncComparedToSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKsonnetPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceKsonnet) *ApplicationStatusSyncComparedToSourceKsonnet {
		return &v
	}).(ApplicationStatusSyncComparedToSourceKsonnetPtrOutput)
}

// Environment is a ksonnet application environment name
func (o ApplicationStatusSyncComparedToSourceKsonnetOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceKsonnet) *string { return v.Environment }).(pulumi.StringPtrOutput)
}

// Parameters are a list of ksonnet component parameter override values
func (o ApplicationStatusSyncComparedToSourceKsonnetOutput) Parameters() ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceKsonnet) []ApplicationStatusSyncComparedToSourceKsonnetParameters {
		return v.Parameters
	}).(ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput)
}

type ApplicationStatusSyncComparedToSourceKsonnetPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceKsonnetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedToSourceKsonnet)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceKsonnetPtrOutput) ToApplicationStatusSyncComparedToSourceKsonnetPtrOutput() ApplicationStatusSyncComparedToSourceKsonnetPtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceKsonnetPtrOutput) ToApplicationStatusSyncComparedToSourceKsonnetPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKsonnetPtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceKsonnetPtrOutput) Elem() ApplicationStatusSyncComparedToSourceKsonnetOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceKsonnet) ApplicationStatusSyncComparedToSourceKsonnet {
		return *v
	}).(ApplicationStatusSyncComparedToSourceKsonnetOutput)
}

// Environment is a ksonnet application environment name
func (o ApplicationStatusSyncComparedToSourceKsonnetPtrOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceKsonnet) *string {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.StringPtrOutput)
}

// Parameters are a list of ksonnet component parameter override values
func (o ApplicationStatusSyncComparedToSourceKsonnetPtrOutput) Parameters() ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceKsonnet) []ApplicationStatusSyncComparedToSourceKsonnetParameters {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput)
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationStatusSyncComparedToSourceKsonnetParameters struct {
	Component *string `pulumi:"component"`
	Name      string  `pulumi:"name"`
	Value     string  `pulumi:"value"`
}

// ApplicationStatusSyncComparedToSourceKsonnetParametersInput is an input type that accepts ApplicationStatusSyncComparedToSourceKsonnetParametersArgs and ApplicationStatusSyncComparedToSourceKsonnetParametersOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceKsonnetParametersInput` via:
//
//          ApplicationStatusSyncComparedToSourceKsonnetParametersArgs{...}
type ApplicationStatusSyncComparedToSourceKsonnetParametersInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceKsonnetParametersOutput() ApplicationStatusSyncComparedToSourceKsonnetParametersOutput
	ToApplicationStatusSyncComparedToSourceKsonnetParametersOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceKsonnetParametersOutput
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationStatusSyncComparedToSourceKsonnetParametersArgs struct {
	Component pulumi.StringPtrInput `pulumi:"component"`
	Name      pulumi.StringInput    `pulumi:"name"`
	Value     pulumi.StringInput    `pulumi:"value"`
}

func (ApplicationStatusSyncComparedToSourceKsonnetParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceKsonnetParameters)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceKsonnetParametersArgs) ToApplicationStatusSyncComparedToSourceKsonnetParametersOutput() ApplicationStatusSyncComparedToSourceKsonnetParametersOutput {
	return i.ToApplicationStatusSyncComparedToSourceKsonnetParametersOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceKsonnetParametersArgs) ToApplicationStatusSyncComparedToSourceKsonnetParametersOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKsonnetParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceKsonnetParametersOutput)
}

// ApplicationStatusSyncComparedToSourceKsonnetParametersArrayInput is an input type that accepts ApplicationStatusSyncComparedToSourceKsonnetParametersArray and ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceKsonnetParametersArrayInput` via:
//
//          ApplicationStatusSyncComparedToSourceKsonnetParametersArray{ ApplicationStatusSyncComparedToSourceKsonnetParametersArgs{...} }
type ApplicationStatusSyncComparedToSourceKsonnetParametersArrayInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput() ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput
	ToApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput
}

type ApplicationStatusSyncComparedToSourceKsonnetParametersArray []ApplicationStatusSyncComparedToSourceKsonnetParametersInput

func (ApplicationStatusSyncComparedToSourceKsonnetParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusSyncComparedToSourceKsonnetParameters)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceKsonnetParametersArray) ToApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput() ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput {
	return i.ToApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceKsonnetParametersArray) ToApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput)
}

// KsonnetParameter is a ksonnet component parameter
type ApplicationStatusSyncComparedToSourceKsonnetParametersOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceKsonnetParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceKsonnetParameters)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceKsonnetParametersOutput) ToApplicationStatusSyncComparedToSourceKsonnetParametersOutput() ApplicationStatusSyncComparedToSourceKsonnetParametersOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceKsonnetParametersOutput) ToApplicationStatusSyncComparedToSourceKsonnetParametersOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKsonnetParametersOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceKsonnetParametersOutput) Component() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceKsonnetParameters) *string { return v.Component }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusSyncComparedToSourceKsonnetParametersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceKsonnetParameters) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusSyncComparedToSourceKsonnetParametersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceKsonnetParameters) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusSyncComparedToSourceKsonnetParameters)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput) ToApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput() ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput) ToApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput) Index(i pulumi.IntInput) ApplicationStatusSyncComparedToSourceKsonnetParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusSyncComparedToSourceKsonnetParameters {
		return vs[0].([]ApplicationStatusSyncComparedToSourceKsonnetParameters)[vs[1].(int)]
	}).(ApplicationStatusSyncComparedToSourceKsonnetParametersOutput)
}

// Kustomize holds kustomize specific options
type ApplicationStatusSyncComparedToSourceKustomize struct {
	// CommonLabels adds additional kustomize commonLabels
	CommonLabels map[string]string `pulumi:"commonLabels"`
	// Images are kustomize image overrides
	Images []string `pulumi:"images"`
	// NamePrefix is a prefix appended to resources for kustomize apps
	NamePrefix *string `pulumi:"namePrefix"`
	// NameSuffix is a suffix appended to resources for kustomize apps
	NameSuffix *string `pulumi:"nameSuffix"`
	// Version contains optional Kustomize version
	Version *string `pulumi:"version"`
}

// ApplicationStatusSyncComparedToSourceKustomizeInput is an input type that accepts ApplicationStatusSyncComparedToSourceKustomizeArgs and ApplicationStatusSyncComparedToSourceKustomizeOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceKustomizeInput` via:
//
//          ApplicationStatusSyncComparedToSourceKustomizeArgs{...}
type ApplicationStatusSyncComparedToSourceKustomizeInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceKustomizeOutput() ApplicationStatusSyncComparedToSourceKustomizeOutput
	ToApplicationStatusSyncComparedToSourceKustomizeOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceKustomizeOutput
}

// Kustomize holds kustomize specific options
type ApplicationStatusSyncComparedToSourceKustomizeArgs struct {
	// CommonLabels adds additional kustomize commonLabels
	CommonLabels pulumi.StringMapInput `pulumi:"commonLabels"`
	// Images are kustomize image overrides
	Images pulumi.StringArrayInput `pulumi:"images"`
	// NamePrefix is a prefix appended to resources for kustomize apps
	NamePrefix pulumi.StringPtrInput `pulumi:"namePrefix"`
	// NameSuffix is a suffix appended to resources for kustomize apps
	NameSuffix pulumi.StringPtrInput `pulumi:"nameSuffix"`
	// Version contains optional Kustomize version
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApplicationStatusSyncComparedToSourceKustomizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceKustomize)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceKustomizeArgs) ToApplicationStatusSyncComparedToSourceKustomizeOutput() ApplicationStatusSyncComparedToSourceKustomizeOutput {
	return i.ToApplicationStatusSyncComparedToSourceKustomizeOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceKustomizeArgs) ToApplicationStatusSyncComparedToSourceKustomizeOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKustomizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceKustomizeOutput)
}

func (i ApplicationStatusSyncComparedToSourceKustomizeArgs) ToApplicationStatusSyncComparedToSourceKustomizePtrOutput() ApplicationStatusSyncComparedToSourceKustomizePtrOutput {
	return i.ToApplicationStatusSyncComparedToSourceKustomizePtrOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceKustomizeArgs) ToApplicationStatusSyncComparedToSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceKustomizeOutput).ToApplicationStatusSyncComparedToSourceKustomizePtrOutputWithContext(ctx)
}

// ApplicationStatusSyncComparedToSourceKustomizePtrInput is an input type that accepts ApplicationStatusSyncComparedToSourceKustomizeArgs, ApplicationStatusSyncComparedToSourceKustomizePtr and ApplicationStatusSyncComparedToSourceKustomizePtrOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceKustomizePtrInput` via:
//
//          ApplicationStatusSyncComparedToSourceKustomizeArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusSyncComparedToSourceKustomizePtrInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceKustomizePtrOutput() ApplicationStatusSyncComparedToSourceKustomizePtrOutput
	ToApplicationStatusSyncComparedToSourceKustomizePtrOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceKustomizePtrOutput
}

type applicationStatusSyncComparedToSourceKustomizePtrType ApplicationStatusSyncComparedToSourceKustomizeArgs

func ApplicationStatusSyncComparedToSourceKustomizePtr(v *ApplicationStatusSyncComparedToSourceKustomizeArgs) ApplicationStatusSyncComparedToSourceKustomizePtrInput {
	return (*applicationStatusSyncComparedToSourceKustomizePtrType)(v)
}

func (*applicationStatusSyncComparedToSourceKustomizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedToSourceKustomize)(nil)).Elem()
}

func (i *applicationStatusSyncComparedToSourceKustomizePtrType) ToApplicationStatusSyncComparedToSourceKustomizePtrOutput() ApplicationStatusSyncComparedToSourceKustomizePtrOutput {
	return i.ToApplicationStatusSyncComparedToSourceKustomizePtrOutputWithContext(context.Background())
}

func (i *applicationStatusSyncComparedToSourceKustomizePtrType) ToApplicationStatusSyncComparedToSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceKustomizePtrOutput)
}

// Kustomize holds kustomize specific options
type ApplicationStatusSyncComparedToSourceKustomizeOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceKustomizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceKustomize)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceKustomizeOutput) ToApplicationStatusSyncComparedToSourceKustomizeOutput() ApplicationStatusSyncComparedToSourceKustomizeOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceKustomizeOutput) ToApplicationStatusSyncComparedToSourceKustomizeOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKustomizeOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceKustomizeOutput) ToApplicationStatusSyncComparedToSourceKustomizePtrOutput() ApplicationStatusSyncComparedToSourceKustomizePtrOutput {
	return o.ToApplicationStatusSyncComparedToSourceKustomizePtrOutputWithContext(context.Background())
}

func (o ApplicationStatusSyncComparedToSourceKustomizeOutput) ToApplicationStatusSyncComparedToSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKustomizePtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceKustomize) *ApplicationStatusSyncComparedToSourceKustomize {
		return &v
	}).(ApplicationStatusSyncComparedToSourceKustomizePtrOutput)
}

// CommonLabels adds additional kustomize commonLabels
func (o ApplicationStatusSyncComparedToSourceKustomizeOutput) CommonLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceKustomize) map[string]string { return v.CommonLabels }).(pulumi.StringMapOutput)
}

// Images are kustomize image overrides
func (o ApplicationStatusSyncComparedToSourceKustomizeOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceKustomize) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// NamePrefix is a prefix appended to resources for kustomize apps
func (o ApplicationStatusSyncComparedToSourceKustomizeOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceKustomize) *string { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

// NameSuffix is a suffix appended to resources for kustomize apps
func (o ApplicationStatusSyncComparedToSourceKustomizeOutput) NameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceKustomize) *string { return v.NameSuffix }).(pulumi.StringPtrOutput)
}

// Version contains optional Kustomize version
func (o ApplicationStatusSyncComparedToSourceKustomizeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourceKustomize) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApplicationStatusSyncComparedToSourceKustomizePtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceKustomizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedToSourceKustomize)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceKustomizePtrOutput) ToApplicationStatusSyncComparedToSourceKustomizePtrOutput() ApplicationStatusSyncComparedToSourceKustomizePtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceKustomizePtrOutput) ToApplicationStatusSyncComparedToSourceKustomizePtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKustomizePtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceKustomizePtrOutput) Elem() ApplicationStatusSyncComparedToSourceKustomizeOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceKustomize) ApplicationStatusSyncComparedToSourceKustomize {
		return *v
	}).(ApplicationStatusSyncComparedToSourceKustomizeOutput)
}

// CommonLabels adds additional kustomize commonLabels
func (o ApplicationStatusSyncComparedToSourceKustomizePtrOutput) CommonLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceKustomize) map[string]string {
		if v == nil {
			return nil
		}
		return v.CommonLabels
	}).(pulumi.StringMapOutput)
}

// Images are kustomize image overrides
func (o ApplicationStatusSyncComparedToSourceKustomizePtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceKustomize) []string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringArrayOutput)
}

// NamePrefix is a prefix appended to resources for kustomize apps
func (o ApplicationStatusSyncComparedToSourceKustomizePtrOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.NamePrefix
	}).(pulumi.StringPtrOutput)
}

// NameSuffix is a suffix appended to resources for kustomize apps
func (o ApplicationStatusSyncComparedToSourceKustomizePtrOutput) NameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.NameSuffix
	}).(pulumi.StringPtrOutput)
}

// Version contains optional Kustomize version
func (o ApplicationStatusSyncComparedToSourceKustomizePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourceKustomize) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationStatusSyncComparedToSourceKustomizeCommonLabels struct {
}

// ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsInput is an input type that accepts ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsArgs and ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsInput` via:
//
//          ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsArgs{...}
type ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutput() ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutput
	ToApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutput
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsArgs struct {
}

func (ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceKustomizeCommonLabels)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsArgs) ToApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutput() ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutput {
	return i.ToApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsArgs) ToApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutput)
}

// CommonLabels adds additional kustomize commonLabels
type ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourceKustomizeCommonLabels)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutput) ToApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutput() ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutput) ToApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutput {
	return o
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationStatusSyncComparedToSourcePlugin struct {
	Env  []ApplicationStatusSyncComparedToSourcePluginEnv `pulumi:"env"`
	Name *string                                          `pulumi:"name"`
}

// ApplicationStatusSyncComparedToSourcePluginInput is an input type that accepts ApplicationStatusSyncComparedToSourcePluginArgs and ApplicationStatusSyncComparedToSourcePluginOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourcePluginInput` via:
//
//          ApplicationStatusSyncComparedToSourcePluginArgs{...}
type ApplicationStatusSyncComparedToSourcePluginInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourcePluginOutput() ApplicationStatusSyncComparedToSourcePluginOutput
	ToApplicationStatusSyncComparedToSourcePluginOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourcePluginOutput
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationStatusSyncComparedToSourcePluginArgs struct {
	Env  ApplicationStatusSyncComparedToSourcePluginEnvArrayInput `pulumi:"env"`
	Name pulumi.StringPtrInput                                    `pulumi:"name"`
}

func (ApplicationStatusSyncComparedToSourcePluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourcePlugin)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourcePluginArgs) ToApplicationStatusSyncComparedToSourcePluginOutput() ApplicationStatusSyncComparedToSourcePluginOutput {
	return i.ToApplicationStatusSyncComparedToSourcePluginOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourcePluginArgs) ToApplicationStatusSyncComparedToSourcePluginOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourcePluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourcePluginOutput)
}

func (i ApplicationStatusSyncComparedToSourcePluginArgs) ToApplicationStatusSyncComparedToSourcePluginPtrOutput() ApplicationStatusSyncComparedToSourcePluginPtrOutput {
	return i.ToApplicationStatusSyncComparedToSourcePluginPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourcePluginArgs) ToApplicationStatusSyncComparedToSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourcePluginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourcePluginOutput).ToApplicationStatusSyncComparedToSourcePluginPtrOutputWithContext(ctx)
}

// ApplicationStatusSyncComparedToSourcePluginPtrInput is an input type that accepts ApplicationStatusSyncComparedToSourcePluginArgs, ApplicationStatusSyncComparedToSourcePluginPtr and ApplicationStatusSyncComparedToSourcePluginPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourcePluginPtrInput` via:
//
//          ApplicationStatusSyncComparedToSourcePluginArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusSyncComparedToSourcePluginPtrInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourcePluginPtrOutput() ApplicationStatusSyncComparedToSourcePluginPtrOutput
	ToApplicationStatusSyncComparedToSourcePluginPtrOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourcePluginPtrOutput
}

type applicationStatusSyncComparedToSourcePluginPtrType ApplicationStatusSyncComparedToSourcePluginArgs

func ApplicationStatusSyncComparedToSourcePluginPtr(v *ApplicationStatusSyncComparedToSourcePluginArgs) ApplicationStatusSyncComparedToSourcePluginPtrInput {
	return (*applicationStatusSyncComparedToSourcePluginPtrType)(v)
}

func (*applicationStatusSyncComparedToSourcePluginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedToSourcePlugin)(nil)).Elem()
}

func (i *applicationStatusSyncComparedToSourcePluginPtrType) ToApplicationStatusSyncComparedToSourcePluginPtrOutput() ApplicationStatusSyncComparedToSourcePluginPtrOutput {
	return i.ToApplicationStatusSyncComparedToSourcePluginPtrOutputWithContext(context.Background())
}

func (i *applicationStatusSyncComparedToSourcePluginPtrType) ToApplicationStatusSyncComparedToSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourcePluginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourcePluginPtrOutput)
}

// ConfigManagementPlugin holds config management plugin specific options
type ApplicationStatusSyncComparedToSourcePluginOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourcePluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourcePlugin)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourcePluginOutput) ToApplicationStatusSyncComparedToSourcePluginOutput() ApplicationStatusSyncComparedToSourcePluginOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourcePluginOutput) ToApplicationStatusSyncComparedToSourcePluginOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourcePluginOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourcePluginOutput) ToApplicationStatusSyncComparedToSourcePluginPtrOutput() ApplicationStatusSyncComparedToSourcePluginPtrOutput {
	return o.ToApplicationStatusSyncComparedToSourcePluginPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusSyncComparedToSourcePluginOutput) ToApplicationStatusSyncComparedToSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourcePluginPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourcePlugin) *ApplicationStatusSyncComparedToSourcePlugin {
		return &v
	}).(ApplicationStatusSyncComparedToSourcePluginPtrOutput)
}
func (o ApplicationStatusSyncComparedToSourcePluginOutput) Env() ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourcePlugin) []ApplicationStatusSyncComparedToSourcePluginEnv {
		return v.Env
	}).(ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput)
}

func (o ApplicationStatusSyncComparedToSourcePluginOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourcePlugin) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ApplicationStatusSyncComparedToSourcePluginPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourcePluginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusSyncComparedToSourcePlugin)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourcePluginPtrOutput) ToApplicationStatusSyncComparedToSourcePluginPtrOutput() ApplicationStatusSyncComparedToSourcePluginPtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourcePluginPtrOutput) ToApplicationStatusSyncComparedToSourcePluginPtrOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourcePluginPtrOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourcePluginPtrOutput) Elem() ApplicationStatusSyncComparedToSourcePluginOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourcePlugin) ApplicationStatusSyncComparedToSourcePlugin {
		return *v
	}).(ApplicationStatusSyncComparedToSourcePluginOutput)
}

func (o ApplicationStatusSyncComparedToSourcePluginPtrOutput) Env() ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourcePlugin) []ApplicationStatusSyncComparedToSourcePluginEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput)
}

func (o ApplicationStatusSyncComparedToSourcePluginPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusSyncComparedToSourcePlugin) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type ApplicationStatusSyncComparedToSourcePluginEnv struct {
	// the name, usually uppercase
	Name string `pulumi:"name"`
	// the value
	Value string `pulumi:"value"`
}

// ApplicationStatusSyncComparedToSourcePluginEnvInput is an input type that accepts ApplicationStatusSyncComparedToSourcePluginEnvArgs and ApplicationStatusSyncComparedToSourcePluginEnvOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourcePluginEnvInput` via:
//
//          ApplicationStatusSyncComparedToSourcePluginEnvArgs{...}
type ApplicationStatusSyncComparedToSourcePluginEnvInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourcePluginEnvOutput() ApplicationStatusSyncComparedToSourcePluginEnvOutput
	ToApplicationStatusSyncComparedToSourcePluginEnvOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourcePluginEnvOutput
}

type ApplicationStatusSyncComparedToSourcePluginEnvArgs struct {
	// the name, usually uppercase
	Name pulumi.StringInput `pulumi:"name"`
	// the value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApplicationStatusSyncComparedToSourcePluginEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourcePluginEnv)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourcePluginEnvArgs) ToApplicationStatusSyncComparedToSourcePluginEnvOutput() ApplicationStatusSyncComparedToSourcePluginEnvOutput {
	return i.ToApplicationStatusSyncComparedToSourcePluginEnvOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourcePluginEnvArgs) ToApplicationStatusSyncComparedToSourcePluginEnvOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourcePluginEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourcePluginEnvOutput)
}

// ApplicationStatusSyncComparedToSourcePluginEnvArrayInput is an input type that accepts ApplicationStatusSyncComparedToSourcePluginEnvArray and ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusSyncComparedToSourcePluginEnvArrayInput` via:
//
//          ApplicationStatusSyncComparedToSourcePluginEnvArray{ ApplicationStatusSyncComparedToSourcePluginEnvArgs{...} }
type ApplicationStatusSyncComparedToSourcePluginEnvArrayInput interface {
	pulumi.Input

	ToApplicationStatusSyncComparedToSourcePluginEnvArrayOutput() ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput
	ToApplicationStatusSyncComparedToSourcePluginEnvArrayOutputWithContext(context.Context) ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput
}

type ApplicationStatusSyncComparedToSourcePluginEnvArray []ApplicationStatusSyncComparedToSourcePluginEnvInput

func (ApplicationStatusSyncComparedToSourcePluginEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusSyncComparedToSourcePluginEnv)(nil)).Elem()
}

func (i ApplicationStatusSyncComparedToSourcePluginEnvArray) ToApplicationStatusSyncComparedToSourcePluginEnvArrayOutput() ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput {
	return i.ToApplicationStatusSyncComparedToSourcePluginEnvArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusSyncComparedToSourcePluginEnvArray) ToApplicationStatusSyncComparedToSourcePluginEnvArrayOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput)
}

type ApplicationStatusSyncComparedToSourcePluginEnvOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourcePluginEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusSyncComparedToSourcePluginEnv)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourcePluginEnvOutput) ToApplicationStatusSyncComparedToSourcePluginEnvOutput() ApplicationStatusSyncComparedToSourcePluginEnvOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourcePluginEnvOutput) ToApplicationStatusSyncComparedToSourcePluginEnvOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourcePluginEnvOutput {
	return o
}

// the name, usually uppercase
func (o ApplicationStatusSyncComparedToSourcePluginEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourcePluginEnv) string { return v.Name }).(pulumi.StringOutput)
}

// the value
func (o ApplicationStatusSyncComparedToSourcePluginEnvOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusSyncComparedToSourcePluginEnv) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusSyncComparedToSourcePluginEnv)(nil)).Elem()
}

func (o ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput) ToApplicationStatusSyncComparedToSourcePluginEnvArrayOutput() ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput) ToApplicationStatusSyncComparedToSourcePluginEnvArrayOutputWithContext(ctx context.Context) ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput {
	return o
}

func (o ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput) Index(i pulumi.IntInput) ApplicationStatusSyncComparedToSourcePluginEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusSyncComparedToSourcePluginEnv {
		return vs[0].([]ApplicationStatusSyncComparedToSourcePluginEnv)[vs[1].(int)]
	}).(ApplicationStatusSyncComparedToSourcePluginEnvOutput)
}

// ArgoCD is the Schema for the argocds API
type ArgoCDType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ArgoCDSpec defines the desired state of ArgoCD
	Spec *ArgoCDSpec `pulumi:"spec"`
	// ArgoCDStatus defines the observed state of ArgoCD
	Status *ArgoCDStatus `pulumi:"status"`
}

// ArgoCDTypeInput is an input type that accepts ArgoCDTypeArgs and ArgoCDTypeOutput values.
// You can construct a concrete instance of `ArgoCDTypeInput` via:
//
//          ArgoCDTypeArgs{...}
type ArgoCDTypeInput interface {
	pulumi.Input

	ToArgoCDTypeOutput() ArgoCDTypeOutput
	ToArgoCDTypeOutputWithContext(context.Context) ArgoCDTypeOutput
}

// ArgoCD is the Schema for the argocds API
type ArgoCDTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// ArgoCDSpec defines the desired state of ArgoCD
	Spec ArgoCDSpecPtrInput `pulumi:"spec"`
	// ArgoCDStatus defines the observed state of ArgoCD
	Status ArgoCDStatusPtrInput `pulumi:"status"`
}

func (ArgoCDTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDType)(nil)).Elem()
}

func (i ArgoCDTypeArgs) ToArgoCDTypeOutput() ArgoCDTypeOutput {
	return i.ToArgoCDTypeOutputWithContext(context.Background())
}

func (i ArgoCDTypeArgs) ToArgoCDTypeOutputWithContext(ctx context.Context) ArgoCDTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDTypeOutput)
}

// ArgoCD is the Schema for the argocds API
type ArgoCDTypeOutput struct{ *pulumi.OutputState }

func (ArgoCDTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDType)(nil)).Elem()
}

func (o ArgoCDTypeOutput) ToArgoCDTypeOutput() ArgoCDTypeOutput {
	return o
}

func (o ArgoCDTypeOutput) ToArgoCDTypeOutputWithContext(ctx context.Context) ArgoCDTypeOutput {
	return o
}

func (o ArgoCDTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ArgoCDTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ArgoCDTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ArgoCDType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ArgoCDSpec defines the desired state of ArgoCD
func (o ArgoCDTypeOutput) Spec() ArgoCDSpecPtrOutput {
	return o.ApplyT(func(v ArgoCDType) *ArgoCDSpec { return v.Spec }).(ArgoCDSpecPtrOutput)
}

// ArgoCDStatus defines the observed state of ArgoCD
func (o ArgoCDTypeOutput) Status() ArgoCDStatusPtrOutput {
	return o.ApplyT(func(v ArgoCDType) *ArgoCDStatus { return v.Status }).(ArgoCDStatusPtrOutput)
}

// ArgoCDExport is the Schema for the argocdexports API
type ArgoCDExportType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ArgoCDExportSpec defines the desired state of ArgoCDExport
	Spec *ArgoCDExportSpec `pulumi:"spec"`
	// ArgoCDExportStatus defines the observed state of ArgoCDExport
	Status *ArgoCDExportStatus `pulumi:"status"`
}

// ArgoCDExportTypeInput is an input type that accepts ArgoCDExportTypeArgs and ArgoCDExportTypeOutput values.
// You can construct a concrete instance of `ArgoCDExportTypeInput` via:
//
//          ArgoCDExportTypeArgs{...}
type ArgoCDExportTypeInput interface {
	pulumi.Input

	ToArgoCDExportTypeOutput() ArgoCDExportTypeOutput
	ToArgoCDExportTypeOutputWithContext(context.Context) ArgoCDExportTypeOutput
}

// ArgoCDExport is the Schema for the argocdexports API
type ArgoCDExportTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// ArgoCDExportSpec defines the desired state of ArgoCDExport
	Spec ArgoCDExportSpecPtrInput `pulumi:"spec"`
	// ArgoCDExportStatus defines the observed state of ArgoCDExport
	Status ArgoCDExportStatusPtrInput `pulumi:"status"`
}

func (ArgoCDExportTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportType)(nil)).Elem()
}

func (i ArgoCDExportTypeArgs) ToArgoCDExportTypeOutput() ArgoCDExportTypeOutput {
	return i.ToArgoCDExportTypeOutputWithContext(context.Background())
}

func (i ArgoCDExportTypeArgs) ToArgoCDExportTypeOutputWithContext(ctx context.Context) ArgoCDExportTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportTypeOutput)
}

// ArgoCDExport is the Schema for the argocdexports API
type ArgoCDExportTypeOutput struct{ *pulumi.OutputState }

func (ArgoCDExportTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportType)(nil)).Elem()
}

func (o ArgoCDExportTypeOutput) ToArgoCDExportTypeOutput() ArgoCDExportTypeOutput {
	return o
}

func (o ArgoCDExportTypeOutput) ToArgoCDExportTypeOutputWithContext(ctx context.Context) ArgoCDExportTypeOutput {
	return o
}

func (o ArgoCDExportTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDExportType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ArgoCDExportTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDExportType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ArgoCDExportTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ArgoCDExportType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ArgoCDExportSpec defines the desired state of ArgoCDExport
func (o ArgoCDExportTypeOutput) Spec() ArgoCDExportSpecPtrOutput {
	return o.ApplyT(func(v ArgoCDExportType) *ArgoCDExportSpec { return v.Spec }).(ArgoCDExportSpecPtrOutput)
}

// ArgoCDExportStatus defines the observed state of ArgoCDExport
func (o ArgoCDExportTypeOutput) Status() ArgoCDExportStatusPtrOutput {
	return o.ApplyT(func(v ArgoCDExportType) *ArgoCDExportStatus { return v.Status }).(ArgoCDExportStatusPtrOutput)
}

type ArgoCDExportMetadata struct {
}

// ArgoCDExportMetadataInput is an input type that accepts ArgoCDExportMetadataArgs and ArgoCDExportMetadataOutput values.
// You can construct a concrete instance of `ArgoCDExportMetadataInput` via:
//
//          ArgoCDExportMetadataArgs{...}
type ArgoCDExportMetadataInput interface {
	pulumi.Input

	ToArgoCDExportMetadataOutput() ArgoCDExportMetadataOutput
	ToArgoCDExportMetadataOutputWithContext(context.Context) ArgoCDExportMetadataOutput
}

type ArgoCDExportMetadataArgs struct {
}

func (ArgoCDExportMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportMetadata)(nil)).Elem()
}

func (i ArgoCDExportMetadataArgs) ToArgoCDExportMetadataOutput() ArgoCDExportMetadataOutput {
	return i.ToArgoCDExportMetadataOutputWithContext(context.Background())
}

func (i ArgoCDExportMetadataArgs) ToArgoCDExportMetadataOutputWithContext(ctx context.Context) ArgoCDExportMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportMetadataOutput)
}

type ArgoCDExportMetadataOutput struct{ *pulumi.OutputState }

func (ArgoCDExportMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportMetadata)(nil)).Elem()
}

func (o ArgoCDExportMetadataOutput) ToArgoCDExportMetadataOutput() ArgoCDExportMetadataOutput {
	return o
}

func (o ArgoCDExportMetadataOutput) ToArgoCDExportMetadataOutputWithContext(ctx context.Context) ArgoCDExportMetadataOutput {
	return o
}

// ArgoCDExportSpec defines the desired state of ArgoCDExport
type ArgoCDExportSpec struct {
	// Argocd is the name of the ArgoCD instance to export.
	Argocd string `pulumi:"argocd"`
	// Image is the container image to use for the export Job.
	Image *string `pulumi:"image"`
	// Schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
	Schedule *string `pulumi:"schedule"`
	// Storage defines the storage configuration options.
	Storage *ArgoCDExportSpecStorage `pulumi:"storage"`
	// Version is the tag/digest to use for the export Job container image.
	Version *string `pulumi:"version"`
}

// ArgoCDExportSpecInput is an input type that accepts ArgoCDExportSpecArgs and ArgoCDExportSpecOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecInput` via:
//
//          ArgoCDExportSpecArgs{...}
type ArgoCDExportSpecInput interface {
	pulumi.Input

	ToArgoCDExportSpecOutput() ArgoCDExportSpecOutput
	ToArgoCDExportSpecOutputWithContext(context.Context) ArgoCDExportSpecOutput
}

// ArgoCDExportSpec defines the desired state of ArgoCDExport
type ArgoCDExportSpecArgs struct {
	// Argocd is the name of the ArgoCD instance to export.
	Argocd pulumi.StringInput `pulumi:"argocd"`
	// Image is the container image to use for the export Job.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
	Schedule pulumi.StringPtrInput `pulumi:"schedule"`
	// Storage defines the storage configuration options.
	Storage ArgoCDExportSpecStoragePtrInput `pulumi:"storage"`
	// Version is the tag/digest to use for the export Job container image.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ArgoCDExportSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpec)(nil)).Elem()
}

func (i ArgoCDExportSpecArgs) ToArgoCDExportSpecOutput() ArgoCDExportSpecOutput {
	return i.ToArgoCDExportSpecOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecArgs) ToArgoCDExportSpecOutputWithContext(ctx context.Context) ArgoCDExportSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecOutput)
}

func (i ArgoCDExportSpecArgs) ToArgoCDExportSpecPtrOutput() ArgoCDExportSpecPtrOutput {
	return i.ToArgoCDExportSpecPtrOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecArgs) ToArgoCDExportSpecPtrOutputWithContext(ctx context.Context) ArgoCDExportSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecOutput).ToArgoCDExportSpecPtrOutputWithContext(ctx)
}

// ArgoCDExportSpecPtrInput is an input type that accepts ArgoCDExportSpecArgs, ArgoCDExportSpecPtr and ArgoCDExportSpecPtrOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecPtrInput` via:
//
//          ArgoCDExportSpecArgs{...}
//
//  or:
//
//          nil
type ArgoCDExportSpecPtrInput interface {
	pulumi.Input

	ToArgoCDExportSpecPtrOutput() ArgoCDExportSpecPtrOutput
	ToArgoCDExportSpecPtrOutputWithContext(context.Context) ArgoCDExportSpecPtrOutput
}

type argoCDExportSpecPtrType ArgoCDExportSpecArgs

func ArgoCDExportSpecPtr(v *ArgoCDExportSpecArgs) ArgoCDExportSpecPtrInput {
	return (*argoCDExportSpecPtrType)(v)
}

func (*argoCDExportSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDExportSpec)(nil)).Elem()
}

func (i *argoCDExportSpecPtrType) ToArgoCDExportSpecPtrOutput() ArgoCDExportSpecPtrOutput {
	return i.ToArgoCDExportSpecPtrOutputWithContext(context.Background())
}

func (i *argoCDExportSpecPtrType) ToArgoCDExportSpecPtrOutputWithContext(ctx context.Context) ArgoCDExportSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecPtrOutput)
}

// ArgoCDExportSpec defines the desired state of ArgoCDExport
type ArgoCDExportSpecOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpec)(nil)).Elem()
}

func (o ArgoCDExportSpecOutput) ToArgoCDExportSpecOutput() ArgoCDExportSpecOutput {
	return o
}

func (o ArgoCDExportSpecOutput) ToArgoCDExportSpecOutputWithContext(ctx context.Context) ArgoCDExportSpecOutput {
	return o
}

func (o ArgoCDExportSpecOutput) ToArgoCDExportSpecPtrOutput() ArgoCDExportSpecPtrOutput {
	return o.ToArgoCDExportSpecPtrOutputWithContext(context.Background())
}

func (o ArgoCDExportSpecOutput) ToArgoCDExportSpecPtrOutputWithContext(ctx context.Context) ArgoCDExportSpecPtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpec) *ArgoCDExportSpec {
		return &v
	}).(ArgoCDExportSpecPtrOutput)
}

// Argocd is the name of the ArgoCD instance to export.
func (o ArgoCDExportSpecOutput) Argocd() pulumi.StringOutput {
	return o.ApplyT(func(v ArgoCDExportSpec) string { return v.Argocd }).(pulumi.StringOutput)
}

// Image is the container image to use for the export Job.
func (o ArgoCDExportSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
func (o ArgoCDExportSpecOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpec) *string { return v.Schedule }).(pulumi.StringPtrOutput)
}

// Storage defines the storage configuration options.
func (o ArgoCDExportSpecOutput) Storage() ArgoCDExportSpecStoragePtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpec) *ArgoCDExportSpecStorage { return v.Storage }).(ArgoCDExportSpecStoragePtrOutput)
}

// Version is the tag/digest to use for the export Job container image.
func (o ArgoCDExportSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ArgoCDExportSpecPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDExportSpec)(nil)).Elem()
}

func (o ArgoCDExportSpecPtrOutput) ToArgoCDExportSpecPtrOutput() ArgoCDExportSpecPtrOutput {
	return o
}

func (o ArgoCDExportSpecPtrOutput) ToArgoCDExportSpecPtrOutputWithContext(ctx context.Context) ArgoCDExportSpecPtrOutput {
	return o
}

func (o ArgoCDExportSpecPtrOutput) Elem() ArgoCDExportSpecOutput {
	return o.ApplyT(func(v *ArgoCDExportSpec) ArgoCDExportSpec { return *v }).(ArgoCDExportSpecOutput)
}

// Argocd is the name of the ArgoCD instance to export.
func (o ArgoCDExportSpecPtrOutput) Argocd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Argocd
	}).(pulumi.StringPtrOutput)
}

// Image is the container image to use for the export Job.
func (o ArgoCDExportSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
func (o ArgoCDExportSpecPtrOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpec) *string {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(pulumi.StringPtrOutput)
}

// Storage defines the storage configuration options.
func (o ArgoCDExportSpecPtrOutput) Storage() ArgoCDExportSpecStoragePtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpec) *ArgoCDExportSpecStorage {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(ArgoCDExportSpecStoragePtrOutput)
}

// Version is the tag/digest to use for the export Job container image.
func (o ArgoCDExportSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Storage defines the storage configuration options.
type ArgoCDExportSpecStorage struct {
	// Backend defines the storage backend to use, must be "local" (the default), "aws", "azure" or "gcp".
	Backend *string `pulumi:"backend"`
	// PVC is the desired characteristics for a PersistentVolumeClaim.
	Pvc *ArgoCDExportSpecStoragePvc `pulumi:"pvc"`
	// SecretName is the name of a Secret with encryption key, credentials, etc.
	SecretName *string `pulumi:"secretName"`
}

// ArgoCDExportSpecStorageInput is an input type that accepts ArgoCDExportSpecStorageArgs and ArgoCDExportSpecStorageOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStorageInput` via:
//
//          ArgoCDExportSpecStorageArgs{...}
type ArgoCDExportSpecStorageInput interface {
	pulumi.Input

	ToArgoCDExportSpecStorageOutput() ArgoCDExportSpecStorageOutput
	ToArgoCDExportSpecStorageOutputWithContext(context.Context) ArgoCDExportSpecStorageOutput
}

// Storage defines the storage configuration options.
type ArgoCDExportSpecStorageArgs struct {
	// Backend defines the storage backend to use, must be "local" (the default), "aws", "azure" or "gcp".
	Backend pulumi.StringPtrInput `pulumi:"backend"`
	// PVC is the desired characteristics for a PersistentVolumeClaim.
	Pvc ArgoCDExportSpecStoragePvcPtrInput `pulumi:"pvc"`
	// SecretName is the name of a Secret with encryption key, credentials, etc.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ArgoCDExportSpecStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStorage)(nil)).Elem()
}

func (i ArgoCDExportSpecStorageArgs) ToArgoCDExportSpecStorageOutput() ArgoCDExportSpecStorageOutput {
	return i.ToArgoCDExportSpecStorageOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStorageArgs) ToArgoCDExportSpecStorageOutputWithContext(ctx context.Context) ArgoCDExportSpecStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStorageOutput)
}

func (i ArgoCDExportSpecStorageArgs) ToArgoCDExportSpecStoragePtrOutput() ArgoCDExportSpecStoragePtrOutput {
	return i.ToArgoCDExportSpecStoragePtrOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStorageArgs) ToArgoCDExportSpecStoragePtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStorageOutput).ToArgoCDExportSpecStoragePtrOutputWithContext(ctx)
}

// ArgoCDExportSpecStoragePtrInput is an input type that accepts ArgoCDExportSpecStorageArgs, ArgoCDExportSpecStoragePtr and ArgoCDExportSpecStoragePtrOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStoragePtrInput` via:
//
//          ArgoCDExportSpecStorageArgs{...}
//
//  or:
//
//          nil
type ArgoCDExportSpecStoragePtrInput interface {
	pulumi.Input

	ToArgoCDExportSpecStoragePtrOutput() ArgoCDExportSpecStoragePtrOutput
	ToArgoCDExportSpecStoragePtrOutputWithContext(context.Context) ArgoCDExportSpecStoragePtrOutput
}

type argoCDExportSpecStoragePtrType ArgoCDExportSpecStorageArgs

func ArgoCDExportSpecStoragePtr(v *ArgoCDExportSpecStorageArgs) ArgoCDExportSpecStoragePtrInput {
	return (*argoCDExportSpecStoragePtrType)(v)
}

func (*argoCDExportSpecStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDExportSpecStorage)(nil)).Elem()
}

func (i *argoCDExportSpecStoragePtrType) ToArgoCDExportSpecStoragePtrOutput() ArgoCDExportSpecStoragePtrOutput {
	return i.ToArgoCDExportSpecStoragePtrOutputWithContext(context.Background())
}

func (i *argoCDExportSpecStoragePtrType) ToArgoCDExportSpecStoragePtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePtrOutput)
}

// Storage defines the storage configuration options.
type ArgoCDExportSpecStorageOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStorage)(nil)).Elem()
}

func (o ArgoCDExportSpecStorageOutput) ToArgoCDExportSpecStorageOutput() ArgoCDExportSpecStorageOutput {
	return o
}

func (o ArgoCDExportSpecStorageOutput) ToArgoCDExportSpecStorageOutputWithContext(ctx context.Context) ArgoCDExportSpecStorageOutput {
	return o
}

func (o ArgoCDExportSpecStorageOutput) ToArgoCDExportSpecStoragePtrOutput() ArgoCDExportSpecStoragePtrOutput {
	return o.ToArgoCDExportSpecStoragePtrOutputWithContext(context.Background())
}

func (o ArgoCDExportSpecStorageOutput) ToArgoCDExportSpecStoragePtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStorage) *ArgoCDExportSpecStorage {
		return &v
	}).(ArgoCDExportSpecStoragePtrOutput)
}

// Backend defines the storage backend to use, must be "local" (the default), "aws", "azure" or "gcp".
func (o ArgoCDExportSpecStorageOutput) Backend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStorage) *string { return v.Backend }).(pulumi.StringPtrOutput)
}

// PVC is the desired characteristics for a PersistentVolumeClaim.
func (o ArgoCDExportSpecStorageOutput) Pvc() ArgoCDExportSpecStoragePvcPtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStorage) *ArgoCDExportSpecStoragePvc { return v.Pvc }).(ArgoCDExportSpecStoragePvcPtrOutput)
}

// SecretName is the name of a Secret with encryption key, credentials, etc.
func (o ArgoCDExportSpecStorageOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStorage) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ArgoCDExportSpecStoragePtrOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDExportSpecStorage)(nil)).Elem()
}

func (o ArgoCDExportSpecStoragePtrOutput) ToArgoCDExportSpecStoragePtrOutput() ArgoCDExportSpecStoragePtrOutput {
	return o
}

func (o ArgoCDExportSpecStoragePtrOutput) ToArgoCDExportSpecStoragePtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePtrOutput {
	return o
}

func (o ArgoCDExportSpecStoragePtrOutput) Elem() ArgoCDExportSpecStorageOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStorage) ArgoCDExportSpecStorage { return *v }).(ArgoCDExportSpecStorageOutput)
}

// Backend defines the storage backend to use, must be "local" (the default), "aws", "azure" or "gcp".
func (o ArgoCDExportSpecStoragePtrOutput) Backend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStorage) *string {
		if v == nil {
			return nil
		}
		return v.Backend
	}).(pulumi.StringPtrOutput)
}

// PVC is the desired characteristics for a PersistentVolumeClaim.
func (o ArgoCDExportSpecStoragePtrOutput) Pvc() ArgoCDExportSpecStoragePvcPtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStorage) *ArgoCDExportSpecStoragePvc {
		if v == nil {
			return nil
		}
		return v.Pvc
	}).(ArgoCDExportSpecStoragePvcPtrOutput)
}

// SecretName is the name of a Secret with encryption key, credentials, etc.
func (o ArgoCDExportSpecStoragePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStorage) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// PVC is the desired characteristics for a PersistentVolumeClaim.
type ArgoCDExportSpecStoragePvc struct {
	// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`
	// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
	DataSource *ArgoCDExportSpecStoragePvcDataSource `pulumi:"dataSource"`
	// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources *ArgoCDExportSpecStoragePvcResources `pulumi:"resources"`
	// A label query over volumes to consider for binding.
	Selector *ArgoCDExportSpecStoragePvcSelector `pulumi:"selector"`
	// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// VolumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// ArgoCDExportSpecStoragePvcInput is an input type that accepts ArgoCDExportSpecStoragePvcArgs and ArgoCDExportSpecStoragePvcOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStoragePvcInput` via:
//
//          ArgoCDExportSpecStoragePvcArgs{...}
type ArgoCDExportSpecStoragePvcInput interface {
	pulumi.Input

	ToArgoCDExportSpecStoragePvcOutput() ArgoCDExportSpecStoragePvcOutput
	ToArgoCDExportSpecStoragePvcOutputWithContext(context.Context) ArgoCDExportSpecStoragePvcOutput
}

// PVC is the desired characteristics for a PersistentVolumeClaim.
type ArgoCDExportSpecStoragePvcArgs struct {
	// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
	DataSource ArgoCDExportSpecStoragePvcDataSourcePtrInput `pulumi:"dataSource"`
	// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources ArgoCDExportSpecStoragePvcResourcesPtrInput `pulumi:"resources"`
	// A label query over volumes to consider for binding.
	Selector ArgoCDExportSpecStoragePvcSelectorPtrInput `pulumi:"selector"`
	// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// VolumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ArgoCDExportSpecStoragePvcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStoragePvc)(nil)).Elem()
}

func (i ArgoCDExportSpecStoragePvcArgs) ToArgoCDExportSpecStoragePvcOutput() ArgoCDExportSpecStoragePvcOutput {
	return i.ToArgoCDExportSpecStoragePvcOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStoragePvcArgs) ToArgoCDExportSpecStoragePvcOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcOutput)
}

func (i ArgoCDExportSpecStoragePvcArgs) ToArgoCDExportSpecStoragePvcPtrOutput() ArgoCDExportSpecStoragePvcPtrOutput {
	return i.ToArgoCDExportSpecStoragePvcPtrOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStoragePvcArgs) ToArgoCDExportSpecStoragePvcPtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcOutput).ToArgoCDExportSpecStoragePvcPtrOutputWithContext(ctx)
}

// ArgoCDExportSpecStoragePvcPtrInput is an input type that accepts ArgoCDExportSpecStoragePvcArgs, ArgoCDExportSpecStoragePvcPtr and ArgoCDExportSpecStoragePvcPtrOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStoragePvcPtrInput` via:
//
//          ArgoCDExportSpecStoragePvcArgs{...}
//
//  or:
//
//          nil
type ArgoCDExportSpecStoragePvcPtrInput interface {
	pulumi.Input

	ToArgoCDExportSpecStoragePvcPtrOutput() ArgoCDExportSpecStoragePvcPtrOutput
	ToArgoCDExportSpecStoragePvcPtrOutputWithContext(context.Context) ArgoCDExportSpecStoragePvcPtrOutput
}

type argoCDExportSpecStoragePvcPtrType ArgoCDExportSpecStoragePvcArgs

func ArgoCDExportSpecStoragePvcPtr(v *ArgoCDExportSpecStoragePvcArgs) ArgoCDExportSpecStoragePvcPtrInput {
	return (*argoCDExportSpecStoragePvcPtrType)(v)
}

func (*argoCDExportSpecStoragePvcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDExportSpecStoragePvc)(nil)).Elem()
}

func (i *argoCDExportSpecStoragePvcPtrType) ToArgoCDExportSpecStoragePvcPtrOutput() ArgoCDExportSpecStoragePvcPtrOutput {
	return i.ToArgoCDExportSpecStoragePvcPtrOutputWithContext(context.Background())
}

func (i *argoCDExportSpecStoragePvcPtrType) ToArgoCDExportSpecStoragePvcPtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcPtrOutput)
}

// PVC is the desired characteristics for a PersistentVolumeClaim.
type ArgoCDExportSpecStoragePvcOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStoragePvcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStoragePvc)(nil)).Elem()
}

func (o ArgoCDExportSpecStoragePvcOutput) ToArgoCDExportSpecStoragePvcOutput() ArgoCDExportSpecStoragePvcOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcOutput) ToArgoCDExportSpecStoragePvcOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcOutput) ToArgoCDExportSpecStoragePvcPtrOutput() ArgoCDExportSpecStoragePvcPtrOutput {
	return o.ToArgoCDExportSpecStoragePvcPtrOutputWithContext(context.Background())
}

func (o ArgoCDExportSpecStoragePvcOutput) ToArgoCDExportSpecStoragePvcPtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcPtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvc) *ArgoCDExportSpecStoragePvc {
		return &v
	}).(ArgoCDExportSpecStoragePvcPtrOutput)
}

// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ArgoCDExportSpecStoragePvcOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvc) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
func (o ArgoCDExportSpecStoragePvcOutput) DataSource() ArgoCDExportSpecStoragePvcDataSourcePtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvc) *ArgoCDExportSpecStoragePvcDataSource { return v.DataSource }).(ArgoCDExportSpecStoragePvcDataSourcePtrOutput)
}

// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o ArgoCDExportSpecStoragePvcOutput) Resources() ArgoCDExportSpecStoragePvcResourcesPtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvc) *ArgoCDExportSpecStoragePvcResources { return v.Resources }).(ArgoCDExportSpecStoragePvcResourcesPtrOutput)
}

// A label query over volumes to consider for binding.
func (o ArgoCDExportSpecStoragePvcOutput) Selector() ArgoCDExportSpecStoragePvcSelectorPtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvc) *ArgoCDExportSpecStoragePvcSelector { return v.Selector }).(ArgoCDExportSpecStoragePvcSelectorPtrOutput)
}

// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ArgoCDExportSpecStoragePvcOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvc) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
func (o ArgoCDExportSpecStoragePvcOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvc) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// VolumeName is the binding reference to the PersistentVolume backing this claim.
func (o ArgoCDExportSpecStoragePvcOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvc) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ArgoCDExportSpecStoragePvcPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStoragePvcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDExportSpecStoragePvc)(nil)).Elem()
}

func (o ArgoCDExportSpecStoragePvcPtrOutput) ToArgoCDExportSpecStoragePvcPtrOutput() ArgoCDExportSpecStoragePvcPtrOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcPtrOutput) ToArgoCDExportSpecStoragePvcPtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcPtrOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcPtrOutput) Elem() ArgoCDExportSpecStoragePvcOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvc) ArgoCDExportSpecStoragePvc { return *v }).(ArgoCDExportSpecStoragePvcOutput)
}

// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ArgoCDExportSpecStoragePvcPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvc) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
func (o ArgoCDExportSpecStoragePvcPtrOutput) DataSource() ArgoCDExportSpecStoragePvcDataSourcePtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvc) *ArgoCDExportSpecStoragePvcDataSource {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(ArgoCDExportSpecStoragePvcDataSourcePtrOutput)
}

// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o ArgoCDExportSpecStoragePvcPtrOutput) Resources() ArgoCDExportSpecStoragePvcResourcesPtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvc) *ArgoCDExportSpecStoragePvcResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ArgoCDExportSpecStoragePvcResourcesPtrOutput)
}

// A label query over volumes to consider for binding.
func (o ArgoCDExportSpecStoragePvcPtrOutput) Selector() ArgoCDExportSpecStoragePvcSelectorPtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvc) *ArgoCDExportSpecStoragePvcSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(ArgoCDExportSpecStoragePvcSelectorPtrOutput)
}

// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ArgoCDExportSpecStoragePvcPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvc) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
func (o ArgoCDExportSpecStoragePvcPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvc) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// VolumeName is the binding reference to the PersistentVolume backing this claim.
func (o ArgoCDExportSpecStoragePvcPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvc) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
type ArgoCDExportSpecStoragePvcDataSource struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name string `pulumi:"name"`
}

// ArgoCDExportSpecStoragePvcDataSourceInput is an input type that accepts ArgoCDExportSpecStoragePvcDataSourceArgs and ArgoCDExportSpecStoragePvcDataSourceOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStoragePvcDataSourceInput` via:
//
//          ArgoCDExportSpecStoragePvcDataSourceArgs{...}
type ArgoCDExportSpecStoragePvcDataSourceInput interface {
	pulumi.Input

	ToArgoCDExportSpecStoragePvcDataSourceOutput() ArgoCDExportSpecStoragePvcDataSourceOutput
	ToArgoCDExportSpecStoragePvcDataSourceOutputWithContext(context.Context) ArgoCDExportSpecStoragePvcDataSourceOutput
}

// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
type ArgoCDExportSpecStoragePvcDataSourceArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringInput `pulumi:"name"`
}

func (ArgoCDExportSpecStoragePvcDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStoragePvcDataSource)(nil)).Elem()
}

func (i ArgoCDExportSpecStoragePvcDataSourceArgs) ToArgoCDExportSpecStoragePvcDataSourceOutput() ArgoCDExportSpecStoragePvcDataSourceOutput {
	return i.ToArgoCDExportSpecStoragePvcDataSourceOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStoragePvcDataSourceArgs) ToArgoCDExportSpecStoragePvcDataSourceOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcDataSourceOutput)
}

func (i ArgoCDExportSpecStoragePvcDataSourceArgs) ToArgoCDExportSpecStoragePvcDataSourcePtrOutput() ArgoCDExportSpecStoragePvcDataSourcePtrOutput {
	return i.ToArgoCDExportSpecStoragePvcDataSourcePtrOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStoragePvcDataSourceArgs) ToArgoCDExportSpecStoragePvcDataSourcePtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcDataSourceOutput).ToArgoCDExportSpecStoragePvcDataSourcePtrOutputWithContext(ctx)
}

// ArgoCDExportSpecStoragePvcDataSourcePtrInput is an input type that accepts ArgoCDExportSpecStoragePvcDataSourceArgs, ArgoCDExportSpecStoragePvcDataSourcePtr and ArgoCDExportSpecStoragePvcDataSourcePtrOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStoragePvcDataSourcePtrInput` via:
//
//          ArgoCDExportSpecStoragePvcDataSourceArgs{...}
//
//  or:
//
//          nil
type ArgoCDExportSpecStoragePvcDataSourcePtrInput interface {
	pulumi.Input

	ToArgoCDExportSpecStoragePvcDataSourcePtrOutput() ArgoCDExportSpecStoragePvcDataSourcePtrOutput
	ToArgoCDExportSpecStoragePvcDataSourcePtrOutputWithContext(context.Context) ArgoCDExportSpecStoragePvcDataSourcePtrOutput
}

type argoCDExportSpecStoragePvcDataSourcePtrType ArgoCDExportSpecStoragePvcDataSourceArgs

func ArgoCDExportSpecStoragePvcDataSourcePtr(v *ArgoCDExportSpecStoragePvcDataSourceArgs) ArgoCDExportSpecStoragePvcDataSourcePtrInput {
	return (*argoCDExportSpecStoragePvcDataSourcePtrType)(v)
}

func (*argoCDExportSpecStoragePvcDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDExportSpecStoragePvcDataSource)(nil)).Elem()
}

func (i *argoCDExportSpecStoragePvcDataSourcePtrType) ToArgoCDExportSpecStoragePvcDataSourcePtrOutput() ArgoCDExportSpecStoragePvcDataSourcePtrOutput {
	return i.ToArgoCDExportSpecStoragePvcDataSourcePtrOutputWithContext(context.Background())
}

func (i *argoCDExportSpecStoragePvcDataSourcePtrType) ToArgoCDExportSpecStoragePvcDataSourcePtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcDataSourcePtrOutput)
}

// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
type ArgoCDExportSpecStoragePvcDataSourceOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStoragePvcDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStoragePvcDataSource)(nil)).Elem()
}

func (o ArgoCDExportSpecStoragePvcDataSourceOutput) ToArgoCDExportSpecStoragePvcDataSourceOutput() ArgoCDExportSpecStoragePvcDataSourceOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcDataSourceOutput) ToArgoCDExportSpecStoragePvcDataSourceOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcDataSourceOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcDataSourceOutput) ToArgoCDExportSpecStoragePvcDataSourcePtrOutput() ArgoCDExportSpecStoragePvcDataSourcePtrOutput {
	return o.ToArgoCDExportSpecStoragePvcDataSourcePtrOutputWithContext(context.Background())
}

func (o ArgoCDExportSpecStoragePvcDataSourceOutput) ToArgoCDExportSpecStoragePvcDataSourcePtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcDataSourcePtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvcDataSource) *ArgoCDExportSpecStoragePvcDataSource {
		return &v
	}).(ArgoCDExportSpecStoragePvcDataSourcePtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o ArgoCDExportSpecStoragePvcDataSourceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvcDataSource) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ArgoCDExportSpecStoragePvcDataSourceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvcDataSource) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced
func (o ArgoCDExportSpecStoragePvcDataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvcDataSource) string { return v.Name }).(pulumi.StringOutput)
}

type ArgoCDExportSpecStoragePvcDataSourcePtrOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStoragePvcDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDExportSpecStoragePvcDataSource)(nil)).Elem()
}

func (o ArgoCDExportSpecStoragePvcDataSourcePtrOutput) ToArgoCDExportSpecStoragePvcDataSourcePtrOutput() ArgoCDExportSpecStoragePvcDataSourcePtrOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcDataSourcePtrOutput) ToArgoCDExportSpecStoragePvcDataSourcePtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcDataSourcePtrOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcDataSourcePtrOutput) Elem() ArgoCDExportSpecStoragePvcDataSourceOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvcDataSource) ArgoCDExportSpecStoragePvcDataSource { return *v }).(ArgoCDExportSpecStoragePvcDataSourceOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o ArgoCDExportSpecStoragePvcDataSourcePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvcDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ArgoCDExportSpecStoragePvcDataSourcePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvcDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ArgoCDExportSpecStoragePvcDataSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvcDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ArgoCDExportSpecStoragePvcResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]ArgoCDExportSpecStoragePvcResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]ArgoCDExportSpecStoragePvcResourcesRequests `pulumi:"requests"`
}

// ArgoCDExportSpecStoragePvcResourcesInput is an input type that accepts ArgoCDExportSpecStoragePvcResourcesArgs and ArgoCDExportSpecStoragePvcResourcesOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStoragePvcResourcesInput` via:
//
//          ArgoCDExportSpecStoragePvcResourcesArgs{...}
type ArgoCDExportSpecStoragePvcResourcesInput interface {
	pulumi.Input

	ToArgoCDExportSpecStoragePvcResourcesOutput() ArgoCDExportSpecStoragePvcResourcesOutput
	ToArgoCDExportSpecStoragePvcResourcesOutputWithContext(context.Context) ArgoCDExportSpecStoragePvcResourcesOutput
}

// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ArgoCDExportSpecStoragePvcResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits ArgoCDExportSpecStoragePvcResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests ArgoCDExportSpecStoragePvcResourcesRequestsMapInput `pulumi:"requests"`
}

func (ArgoCDExportSpecStoragePvcResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStoragePvcResources)(nil)).Elem()
}

func (i ArgoCDExportSpecStoragePvcResourcesArgs) ToArgoCDExportSpecStoragePvcResourcesOutput() ArgoCDExportSpecStoragePvcResourcesOutput {
	return i.ToArgoCDExportSpecStoragePvcResourcesOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStoragePvcResourcesArgs) ToArgoCDExportSpecStoragePvcResourcesOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcResourcesOutput)
}

func (i ArgoCDExportSpecStoragePvcResourcesArgs) ToArgoCDExportSpecStoragePvcResourcesPtrOutput() ArgoCDExportSpecStoragePvcResourcesPtrOutput {
	return i.ToArgoCDExportSpecStoragePvcResourcesPtrOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStoragePvcResourcesArgs) ToArgoCDExportSpecStoragePvcResourcesPtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcResourcesOutput).ToArgoCDExportSpecStoragePvcResourcesPtrOutputWithContext(ctx)
}

// ArgoCDExportSpecStoragePvcResourcesPtrInput is an input type that accepts ArgoCDExportSpecStoragePvcResourcesArgs, ArgoCDExportSpecStoragePvcResourcesPtr and ArgoCDExportSpecStoragePvcResourcesPtrOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStoragePvcResourcesPtrInput` via:
//
//          ArgoCDExportSpecStoragePvcResourcesArgs{...}
//
//  or:
//
//          nil
type ArgoCDExportSpecStoragePvcResourcesPtrInput interface {
	pulumi.Input

	ToArgoCDExportSpecStoragePvcResourcesPtrOutput() ArgoCDExportSpecStoragePvcResourcesPtrOutput
	ToArgoCDExportSpecStoragePvcResourcesPtrOutputWithContext(context.Context) ArgoCDExportSpecStoragePvcResourcesPtrOutput
}

type argoCDExportSpecStoragePvcResourcesPtrType ArgoCDExportSpecStoragePvcResourcesArgs

func ArgoCDExportSpecStoragePvcResourcesPtr(v *ArgoCDExportSpecStoragePvcResourcesArgs) ArgoCDExportSpecStoragePvcResourcesPtrInput {
	return (*argoCDExportSpecStoragePvcResourcesPtrType)(v)
}

func (*argoCDExportSpecStoragePvcResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDExportSpecStoragePvcResources)(nil)).Elem()
}

func (i *argoCDExportSpecStoragePvcResourcesPtrType) ToArgoCDExportSpecStoragePvcResourcesPtrOutput() ArgoCDExportSpecStoragePvcResourcesPtrOutput {
	return i.ToArgoCDExportSpecStoragePvcResourcesPtrOutputWithContext(context.Background())
}

func (i *argoCDExportSpecStoragePvcResourcesPtrType) ToArgoCDExportSpecStoragePvcResourcesPtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcResourcesPtrOutput)
}

// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ArgoCDExportSpecStoragePvcResourcesOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStoragePvcResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStoragePvcResources)(nil)).Elem()
}

func (o ArgoCDExportSpecStoragePvcResourcesOutput) ToArgoCDExportSpecStoragePvcResourcesOutput() ArgoCDExportSpecStoragePvcResourcesOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcResourcesOutput) ToArgoCDExportSpecStoragePvcResourcesOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcResourcesOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcResourcesOutput) ToArgoCDExportSpecStoragePvcResourcesPtrOutput() ArgoCDExportSpecStoragePvcResourcesPtrOutput {
	return o.ToArgoCDExportSpecStoragePvcResourcesPtrOutputWithContext(context.Background())
}

func (o ArgoCDExportSpecStoragePvcResourcesOutput) ToArgoCDExportSpecStoragePvcResourcesPtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcResourcesPtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvcResources) *ArgoCDExportSpecStoragePvcResources {
		return &v
	}).(ArgoCDExportSpecStoragePvcResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDExportSpecStoragePvcResourcesOutput) Limits() ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvcResources) map[string]ArgoCDExportSpecStoragePvcResourcesLimits {
		return v.Limits
	}).(ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDExportSpecStoragePvcResourcesOutput) Requests() ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvcResources) map[string]ArgoCDExportSpecStoragePvcResourcesRequests {
		return v.Requests
	}).(ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput)
}

type ArgoCDExportSpecStoragePvcResourcesPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStoragePvcResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDExportSpecStoragePvcResources)(nil)).Elem()
}

func (o ArgoCDExportSpecStoragePvcResourcesPtrOutput) ToArgoCDExportSpecStoragePvcResourcesPtrOutput() ArgoCDExportSpecStoragePvcResourcesPtrOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcResourcesPtrOutput) ToArgoCDExportSpecStoragePvcResourcesPtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcResourcesPtrOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcResourcesPtrOutput) Elem() ArgoCDExportSpecStoragePvcResourcesOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvcResources) ArgoCDExportSpecStoragePvcResources { return *v }).(ArgoCDExportSpecStoragePvcResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDExportSpecStoragePvcResourcesPtrOutput) Limits() ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvcResources) map[string]ArgoCDExportSpecStoragePvcResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDExportSpecStoragePvcResourcesPtrOutput) Requests() ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvcResources) map[string]ArgoCDExportSpecStoragePvcResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput)
}

type ArgoCDExportSpecStoragePvcResourcesLimits struct {
}

// ArgoCDExportSpecStoragePvcResourcesLimitsInput is an input type that accepts ArgoCDExportSpecStoragePvcResourcesLimitsArgs and ArgoCDExportSpecStoragePvcResourcesLimitsOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStoragePvcResourcesLimitsInput` via:
//
//          ArgoCDExportSpecStoragePvcResourcesLimitsArgs{...}
type ArgoCDExportSpecStoragePvcResourcesLimitsInput interface {
	pulumi.Input

	ToArgoCDExportSpecStoragePvcResourcesLimitsOutput() ArgoCDExportSpecStoragePvcResourcesLimitsOutput
	ToArgoCDExportSpecStoragePvcResourcesLimitsOutputWithContext(context.Context) ArgoCDExportSpecStoragePvcResourcesLimitsOutput
}

type ArgoCDExportSpecStoragePvcResourcesLimitsArgs struct {
}

func (ArgoCDExportSpecStoragePvcResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStoragePvcResourcesLimits)(nil)).Elem()
}

func (i ArgoCDExportSpecStoragePvcResourcesLimitsArgs) ToArgoCDExportSpecStoragePvcResourcesLimitsOutput() ArgoCDExportSpecStoragePvcResourcesLimitsOutput {
	return i.ToArgoCDExportSpecStoragePvcResourcesLimitsOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStoragePvcResourcesLimitsArgs) ToArgoCDExportSpecStoragePvcResourcesLimitsOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcResourcesLimitsOutput)
}

// ArgoCDExportSpecStoragePvcResourcesLimitsMapInput is an input type that accepts ArgoCDExportSpecStoragePvcResourcesLimitsMap and ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStoragePvcResourcesLimitsMapInput` via:
//
//          ArgoCDExportSpecStoragePvcResourcesLimitsMap{ "key": ArgoCDExportSpecStoragePvcResourcesLimitsArgs{...} }
type ArgoCDExportSpecStoragePvcResourcesLimitsMapInput interface {
	pulumi.Input

	ToArgoCDExportSpecStoragePvcResourcesLimitsMapOutput() ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput
	ToArgoCDExportSpecStoragePvcResourcesLimitsMapOutputWithContext(context.Context) ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput
}

type ArgoCDExportSpecStoragePvcResourcesLimitsMap map[string]ArgoCDExportSpecStoragePvcResourcesLimitsInput

func (ArgoCDExportSpecStoragePvcResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDExportSpecStoragePvcResourcesLimits)(nil)).Elem()
}

func (i ArgoCDExportSpecStoragePvcResourcesLimitsMap) ToArgoCDExportSpecStoragePvcResourcesLimitsMapOutput() ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput {
	return i.ToArgoCDExportSpecStoragePvcResourcesLimitsMapOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStoragePvcResourcesLimitsMap) ToArgoCDExportSpecStoragePvcResourcesLimitsMapOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput)
}

type ArgoCDExportSpecStoragePvcResourcesLimitsOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStoragePvcResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStoragePvcResourcesLimits)(nil)).Elem()
}

func (o ArgoCDExportSpecStoragePvcResourcesLimitsOutput) ToArgoCDExportSpecStoragePvcResourcesLimitsOutput() ArgoCDExportSpecStoragePvcResourcesLimitsOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcResourcesLimitsOutput) ToArgoCDExportSpecStoragePvcResourcesLimitsOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcResourcesLimitsOutput {
	return o
}

type ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDExportSpecStoragePvcResourcesLimits)(nil)).Elem()
}

func (o ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput) ToArgoCDExportSpecStoragePvcResourcesLimitsMapOutput() ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput) ToArgoCDExportSpecStoragePvcResourcesLimitsMapOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) ArgoCDExportSpecStoragePvcResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArgoCDExportSpecStoragePvcResourcesLimits {
		return vs[0].(map[string]ArgoCDExportSpecStoragePvcResourcesLimits)[vs[1].(string)]
	}).(ArgoCDExportSpecStoragePvcResourcesLimitsOutput)
}

type ArgoCDExportSpecStoragePvcResourcesRequests struct {
}

// ArgoCDExportSpecStoragePvcResourcesRequestsInput is an input type that accepts ArgoCDExportSpecStoragePvcResourcesRequestsArgs and ArgoCDExportSpecStoragePvcResourcesRequestsOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStoragePvcResourcesRequestsInput` via:
//
//          ArgoCDExportSpecStoragePvcResourcesRequestsArgs{...}
type ArgoCDExportSpecStoragePvcResourcesRequestsInput interface {
	pulumi.Input

	ToArgoCDExportSpecStoragePvcResourcesRequestsOutput() ArgoCDExportSpecStoragePvcResourcesRequestsOutput
	ToArgoCDExportSpecStoragePvcResourcesRequestsOutputWithContext(context.Context) ArgoCDExportSpecStoragePvcResourcesRequestsOutput
}

type ArgoCDExportSpecStoragePvcResourcesRequestsArgs struct {
}

func (ArgoCDExportSpecStoragePvcResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStoragePvcResourcesRequests)(nil)).Elem()
}

func (i ArgoCDExportSpecStoragePvcResourcesRequestsArgs) ToArgoCDExportSpecStoragePvcResourcesRequestsOutput() ArgoCDExportSpecStoragePvcResourcesRequestsOutput {
	return i.ToArgoCDExportSpecStoragePvcResourcesRequestsOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStoragePvcResourcesRequestsArgs) ToArgoCDExportSpecStoragePvcResourcesRequestsOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcResourcesRequestsOutput)
}

// ArgoCDExportSpecStoragePvcResourcesRequestsMapInput is an input type that accepts ArgoCDExportSpecStoragePvcResourcesRequestsMap and ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStoragePvcResourcesRequestsMapInput` via:
//
//          ArgoCDExportSpecStoragePvcResourcesRequestsMap{ "key": ArgoCDExportSpecStoragePvcResourcesRequestsArgs{...} }
type ArgoCDExportSpecStoragePvcResourcesRequestsMapInput interface {
	pulumi.Input

	ToArgoCDExportSpecStoragePvcResourcesRequestsMapOutput() ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput
	ToArgoCDExportSpecStoragePvcResourcesRequestsMapOutputWithContext(context.Context) ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput
}

type ArgoCDExportSpecStoragePvcResourcesRequestsMap map[string]ArgoCDExportSpecStoragePvcResourcesRequestsInput

func (ArgoCDExportSpecStoragePvcResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDExportSpecStoragePvcResourcesRequests)(nil)).Elem()
}

func (i ArgoCDExportSpecStoragePvcResourcesRequestsMap) ToArgoCDExportSpecStoragePvcResourcesRequestsMapOutput() ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput {
	return i.ToArgoCDExportSpecStoragePvcResourcesRequestsMapOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStoragePvcResourcesRequestsMap) ToArgoCDExportSpecStoragePvcResourcesRequestsMapOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput)
}

type ArgoCDExportSpecStoragePvcResourcesRequestsOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStoragePvcResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStoragePvcResourcesRequests)(nil)).Elem()
}

func (o ArgoCDExportSpecStoragePvcResourcesRequestsOutput) ToArgoCDExportSpecStoragePvcResourcesRequestsOutput() ArgoCDExportSpecStoragePvcResourcesRequestsOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcResourcesRequestsOutput) ToArgoCDExportSpecStoragePvcResourcesRequestsOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcResourcesRequestsOutput {
	return o
}

type ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDExportSpecStoragePvcResourcesRequests)(nil)).Elem()
}

func (o ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput) ToArgoCDExportSpecStoragePvcResourcesRequestsMapOutput() ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput) ToArgoCDExportSpecStoragePvcResourcesRequestsMapOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) ArgoCDExportSpecStoragePvcResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArgoCDExportSpecStoragePvcResourcesRequests {
		return vs[0].(map[string]ArgoCDExportSpecStoragePvcResourcesRequests)[vs[1].(string)]
	}).(ArgoCDExportSpecStoragePvcResourcesRequestsOutput)
}

// A label query over volumes to consider for binding.
type ArgoCDExportSpecStoragePvcSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ArgoCDExportSpecStoragePvcSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ArgoCDExportSpecStoragePvcSelectorInput is an input type that accepts ArgoCDExportSpecStoragePvcSelectorArgs and ArgoCDExportSpecStoragePvcSelectorOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStoragePvcSelectorInput` via:
//
//          ArgoCDExportSpecStoragePvcSelectorArgs{...}
type ArgoCDExportSpecStoragePvcSelectorInput interface {
	pulumi.Input

	ToArgoCDExportSpecStoragePvcSelectorOutput() ArgoCDExportSpecStoragePvcSelectorOutput
	ToArgoCDExportSpecStoragePvcSelectorOutputWithContext(context.Context) ArgoCDExportSpecStoragePvcSelectorOutput
}

// A label query over volumes to consider for binding.
type ArgoCDExportSpecStoragePvcSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ArgoCDExportSpecStoragePvcSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStoragePvcSelector)(nil)).Elem()
}

func (i ArgoCDExportSpecStoragePvcSelectorArgs) ToArgoCDExportSpecStoragePvcSelectorOutput() ArgoCDExportSpecStoragePvcSelectorOutput {
	return i.ToArgoCDExportSpecStoragePvcSelectorOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStoragePvcSelectorArgs) ToArgoCDExportSpecStoragePvcSelectorOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcSelectorOutput)
}

func (i ArgoCDExportSpecStoragePvcSelectorArgs) ToArgoCDExportSpecStoragePvcSelectorPtrOutput() ArgoCDExportSpecStoragePvcSelectorPtrOutput {
	return i.ToArgoCDExportSpecStoragePvcSelectorPtrOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStoragePvcSelectorArgs) ToArgoCDExportSpecStoragePvcSelectorPtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcSelectorOutput).ToArgoCDExportSpecStoragePvcSelectorPtrOutputWithContext(ctx)
}

// ArgoCDExportSpecStoragePvcSelectorPtrInput is an input type that accepts ArgoCDExportSpecStoragePvcSelectorArgs, ArgoCDExportSpecStoragePvcSelectorPtr and ArgoCDExportSpecStoragePvcSelectorPtrOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStoragePvcSelectorPtrInput` via:
//
//          ArgoCDExportSpecStoragePvcSelectorArgs{...}
//
//  or:
//
//          nil
type ArgoCDExportSpecStoragePvcSelectorPtrInput interface {
	pulumi.Input

	ToArgoCDExportSpecStoragePvcSelectorPtrOutput() ArgoCDExportSpecStoragePvcSelectorPtrOutput
	ToArgoCDExportSpecStoragePvcSelectorPtrOutputWithContext(context.Context) ArgoCDExportSpecStoragePvcSelectorPtrOutput
}

type argoCDExportSpecStoragePvcSelectorPtrType ArgoCDExportSpecStoragePvcSelectorArgs

func ArgoCDExportSpecStoragePvcSelectorPtr(v *ArgoCDExportSpecStoragePvcSelectorArgs) ArgoCDExportSpecStoragePvcSelectorPtrInput {
	return (*argoCDExportSpecStoragePvcSelectorPtrType)(v)
}

func (*argoCDExportSpecStoragePvcSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDExportSpecStoragePvcSelector)(nil)).Elem()
}

func (i *argoCDExportSpecStoragePvcSelectorPtrType) ToArgoCDExportSpecStoragePvcSelectorPtrOutput() ArgoCDExportSpecStoragePvcSelectorPtrOutput {
	return i.ToArgoCDExportSpecStoragePvcSelectorPtrOutputWithContext(context.Background())
}

func (i *argoCDExportSpecStoragePvcSelectorPtrType) ToArgoCDExportSpecStoragePvcSelectorPtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcSelectorPtrOutput)
}

// A label query over volumes to consider for binding.
type ArgoCDExportSpecStoragePvcSelectorOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStoragePvcSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStoragePvcSelector)(nil)).Elem()
}

func (o ArgoCDExportSpecStoragePvcSelectorOutput) ToArgoCDExportSpecStoragePvcSelectorOutput() ArgoCDExportSpecStoragePvcSelectorOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcSelectorOutput) ToArgoCDExportSpecStoragePvcSelectorOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcSelectorOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcSelectorOutput) ToArgoCDExportSpecStoragePvcSelectorPtrOutput() ArgoCDExportSpecStoragePvcSelectorPtrOutput {
	return o.ToArgoCDExportSpecStoragePvcSelectorPtrOutputWithContext(context.Background())
}

func (o ArgoCDExportSpecStoragePvcSelectorOutput) ToArgoCDExportSpecStoragePvcSelectorPtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcSelectorPtrOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvcSelector) *ArgoCDExportSpecStoragePvcSelector {
		return &v
	}).(ArgoCDExportSpecStoragePvcSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ArgoCDExportSpecStoragePvcSelectorOutput) MatchExpressions() ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvcSelector) []ArgoCDExportSpecStoragePvcSelectorMatchExpressions {
		return v.MatchExpressions
	}).(ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ArgoCDExportSpecStoragePvcSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvcSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ArgoCDExportSpecStoragePvcSelectorPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStoragePvcSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDExportSpecStoragePvcSelector)(nil)).Elem()
}

func (o ArgoCDExportSpecStoragePvcSelectorPtrOutput) ToArgoCDExportSpecStoragePvcSelectorPtrOutput() ArgoCDExportSpecStoragePvcSelectorPtrOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcSelectorPtrOutput) ToArgoCDExportSpecStoragePvcSelectorPtrOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcSelectorPtrOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcSelectorPtrOutput) Elem() ArgoCDExportSpecStoragePvcSelectorOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvcSelector) ArgoCDExportSpecStoragePvcSelector { return *v }).(ArgoCDExportSpecStoragePvcSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ArgoCDExportSpecStoragePvcSelectorPtrOutput) MatchExpressions() ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvcSelector) []ArgoCDExportSpecStoragePvcSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ArgoCDExportSpecStoragePvcSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ArgoCDExportSpecStoragePvcSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ArgoCDExportSpecStoragePvcSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// ArgoCDExportSpecStoragePvcSelectorMatchExpressionsInput is an input type that accepts ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArgs and ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStoragePvcSelectorMatchExpressionsInput` via:
//
//          ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArgs{...}
type ArgoCDExportSpecStoragePvcSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput() ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput
	ToArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutputWithContext(context.Context) ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStoragePvcSelectorMatchExpressions)(nil)).Elem()
}

func (i ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArgs) ToArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput() ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput {
	return i.ToArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArgs) ToArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput)
}

// ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayInput is an input type that accepts ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArray and ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayInput` via:
//
//          ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArray{ ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArgs{...} }
type ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput() ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput
	ToArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutputWithContext(context.Context) ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput
}

type ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArray []ArgoCDExportSpecStoragePvcSelectorMatchExpressionsInput

func (ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArgoCDExportSpecStoragePvcSelectorMatchExpressions)(nil)).Elem()
}

func (i ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArray) ToArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput() ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput {
	return i.ToArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArray) ToArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStoragePvcSelectorMatchExpressions)(nil)).Elem()
}

func (o ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput) ToArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput() ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput) ToArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvcSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvcSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArgoCDExportSpecStoragePvcSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArgoCDExportSpecStoragePvcSelectorMatchExpressions)(nil)).Elem()
}

func (o ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput) ToArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput() ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput) ToArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArgoCDExportSpecStoragePvcSelectorMatchExpressions {
		return vs[0].([]ArgoCDExportSpecStoragePvcSelectorMatchExpressions)[vs[1].(int)]
	}).(ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type ArgoCDExportSpecStoragePvcSelectorMatchLabels struct {
}

// ArgoCDExportSpecStoragePvcSelectorMatchLabelsInput is an input type that accepts ArgoCDExportSpecStoragePvcSelectorMatchLabelsArgs and ArgoCDExportSpecStoragePvcSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `ArgoCDExportSpecStoragePvcSelectorMatchLabelsInput` via:
//
//          ArgoCDExportSpecStoragePvcSelectorMatchLabelsArgs{...}
type ArgoCDExportSpecStoragePvcSelectorMatchLabelsInput interface {
	pulumi.Input

	ToArgoCDExportSpecStoragePvcSelectorMatchLabelsOutput() ArgoCDExportSpecStoragePvcSelectorMatchLabelsOutput
	ToArgoCDExportSpecStoragePvcSelectorMatchLabelsOutputWithContext(context.Context) ArgoCDExportSpecStoragePvcSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type ArgoCDExportSpecStoragePvcSelectorMatchLabelsArgs struct {
}

func (ArgoCDExportSpecStoragePvcSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStoragePvcSelectorMatchLabels)(nil)).Elem()
}

func (i ArgoCDExportSpecStoragePvcSelectorMatchLabelsArgs) ToArgoCDExportSpecStoragePvcSelectorMatchLabelsOutput() ArgoCDExportSpecStoragePvcSelectorMatchLabelsOutput {
	return i.ToArgoCDExportSpecStoragePvcSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i ArgoCDExportSpecStoragePvcSelectorMatchLabelsArgs) ToArgoCDExportSpecStoragePvcSelectorMatchLabelsOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportSpecStoragePvcSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type ArgoCDExportSpecStoragePvcSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (ArgoCDExportSpecStoragePvcSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportSpecStoragePvcSelectorMatchLabels)(nil)).Elem()
}

func (o ArgoCDExportSpecStoragePvcSelectorMatchLabelsOutput) ToArgoCDExportSpecStoragePvcSelectorMatchLabelsOutput() ArgoCDExportSpecStoragePvcSelectorMatchLabelsOutput {
	return o
}

func (o ArgoCDExportSpecStoragePvcSelectorMatchLabelsOutput) ToArgoCDExportSpecStoragePvcSelectorMatchLabelsOutputWithContext(ctx context.Context) ArgoCDExportSpecStoragePvcSelectorMatchLabelsOutput {
	return o
}

// ArgoCDExportStatus defines the observed state of ArgoCDExport
type ArgoCDExportStatus struct {
	// Phase is a simple, high-level summary of where the ArgoCDExport is in its lifecycle. There are five possible phase values: Pending: The ArgoCDExport has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the containers for the ArgoCDExport are still running, or in the process of starting or restarting. Succeeded: All containers for the ArgoCDExport have terminated in success, and will not be restarted. Failed: At least one container has terminated in failure, either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the ArgoCDExport could not be obtained.
	Phase string `pulumi:"phase"`
}

// ArgoCDExportStatusInput is an input type that accepts ArgoCDExportStatusArgs and ArgoCDExportStatusOutput values.
// You can construct a concrete instance of `ArgoCDExportStatusInput` via:
//
//          ArgoCDExportStatusArgs{...}
type ArgoCDExportStatusInput interface {
	pulumi.Input

	ToArgoCDExportStatusOutput() ArgoCDExportStatusOutput
	ToArgoCDExportStatusOutputWithContext(context.Context) ArgoCDExportStatusOutput
}

// ArgoCDExportStatus defines the observed state of ArgoCDExport
type ArgoCDExportStatusArgs struct {
	// Phase is a simple, high-level summary of where the ArgoCDExport is in its lifecycle. There are five possible phase values: Pending: The ArgoCDExport has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the containers for the ArgoCDExport are still running, or in the process of starting or restarting. Succeeded: All containers for the ArgoCDExport have terminated in success, and will not be restarted. Failed: At least one container has terminated in failure, either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the ArgoCDExport could not be obtained.
	Phase pulumi.StringInput `pulumi:"phase"`
}

func (ArgoCDExportStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportStatus)(nil)).Elem()
}

func (i ArgoCDExportStatusArgs) ToArgoCDExportStatusOutput() ArgoCDExportStatusOutput {
	return i.ToArgoCDExportStatusOutputWithContext(context.Background())
}

func (i ArgoCDExportStatusArgs) ToArgoCDExportStatusOutputWithContext(ctx context.Context) ArgoCDExportStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportStatusOutput)
}

func (i ArgoCDExportStatusArgs) ToArgoCDExportStatusPtrOutput() ArgoCDExportStatusPtrOutput {
	return i.ToArgoCDExportStatusPtrOutputWithContext(context.Background())
}

func (i ArgoCDExportStatusArgs) ToArgoCDExportStatusPtrOutputWithContext(ctx context.Context) ArgoCDExportStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportStatusOutput).ToArgoCDExportStatusPtrOutputWithContext(ctx)
}

// ArgoCDExportStatusPtrInput is an input type that accepts ArgoCDExportStatusArgs, ArgoCDExportStatusPtr and ArgoCDExportStatusPtrOutput values.
// You can construct a concrete instance of `ArgoCDExportStatusPtrInput` via:
//
//          ArgoCDExportStatusArgs{...}
//
//  or:
//
//          nil
type ArgoCDExportStatusPtrInput interface {
	pulumi.Input

	ToArgoCDExportStatusPtrOutput() ArgoCDExportStatusPtrOutput
	ToArgoCDExportStatusPtrOutputWithContext(context.Context) ArgoCDExportStatusPtrOutput
}

type argoCDExportStatusPtrType ArgoCDExportStatusArgs

func ArgoCDExportStatusPtr(v *ArgoCDExportStatusArgs) ArgoCDExportStatusPtrInput {
	return (*argoCDExportStatusPtrType)(v)
}

func (*argoCDExportStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDExportStatus)(nil)).Elem()
}

func (i *argoCDExportStatusPtrType) ToArgoCDExportStatusPtrOutput() ArgoCDExportStatusPtrOutput {
	return i.ToArgoCDExportStatusPtrOutputWithContext(context.Background())
}

func (i *argoCDExportStatusPtrType) ToArgoCDExportStatusPtrOutputWithContext(ctx context.Context) ArgoCDExportStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDExportStatusPtrOutput)
}

// ArgoCDExportStatus defines the observed state of ArgoCDExport
type ArgoCDExportStatusOutput struct{ *pulumi.OutputState }

func (ArgoCDExportStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDExportStatus)(nil)).Elem()
}

func (o ArgoCDExportStatusOutput) ToArgoCDExportStatusOutput() ArgoCDExportStatusOutput {
	return o
}

func (o ArgoCDExportStatusOutput) ToArgoCDExportStatusOutputWithContext(ctx context.Context) ArgoCDExportStatusOutput {
	return o
}

func (o ArgoCDExportStatusOutput) ToArgoCDExportStatusPtrOutput() ArgoCDExportStatusPtrOutput {
	return o.ToArgoCDExportStatusPtrOutputWithContext(context.Background())
}

func (o ArgoCDExportStatusOutput) ToArgoCDExportStatusPtrOutputWithContext(ctx context.Context) ArgoCDExportStatusPtrOutput {
	return o.ApplyT(func(v ArgoCDExportStatus) *ArgoCDExportStatus {
		return &v
	}).(ArgoCDExportStatusPtrOutput)
}

// Phase is a simple, high-level summary of where the ArgoCDExport is in its lifecycle. There are five possible phase values: Pending: The ArgoCDExport has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the containers for the ArgoCDExport are still running, or in the process of starting or restarting. Succeeded: All containers for the ArgoCDExport have terminated in success, and will not be restarted. Failed: At least one container has terminated in failure, either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the ArgoCDExport could not be obtained.
func (o ArgoCDExportStatusOutput) Phase() pulumi.StringOutput {
	return o.ApplyT(func(v ArgoCDExportStatus) string { return v.Phase }).(pulumi.StringOutput)
}

type ArgoCDExportStatusPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDExportStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDExportStatus)(nil)).Elem()
}

func (o ArgoCDExportStatusPtrOutput) ToArgoCDExportStatusPtrOutput() ArgoCDExportStatusPtrOutput {
	return o
}

func (o ArgoCDExportStatusPtrOutput) ToArgoCDExportStatusPtrOutputWithContext(ctx context.Context) ArgoCDExportStatusPtrOutput {
	return o
}

func (o ArgoCDExportStatusPtrOutput) Elem() ArgoCDExportStatusOutput {
	return o.ApplyT(func(v *ArgoCDExportStatus) ArgoCDExportStatus { return *v }).(ArgoCDExportStatusOutput)
}

// Phase is a simple, high-level summary of where the ArgoCDExport is in its lifecycle. There are five possible phase values: Pending: The ArgoCDExport has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the containers for the ArgoCDExport are still running, or in the process of starting or restarting. Succeeded: All containers for the ArgoCDExport have terminated in success, and will not be restarted. Failed: At least one container has terminated in failure, either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the ArgoCDExport could not be obtained.
func (o ArgoCDExportStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDExportStatus) *string {
		if v == nil {
			return nil
		}
		return &v.Phase
	}).(pulumi.StringPtrOutput)
}

type ArgoCDMetadata struct {
}

// ArgoCDMetadataInput is an input type that accepts ArgoCDMetadataArgs and ArgoCDMetadataOutput values.
// You can construct a concrete instance of `ArgoCDMetadataInput` via:
//
//          ArgoCDMetadataArgs{...}
type ArgoCDMetadataInput interface {
	pulumi.Input

	ToArgoCDMetadataOutput() ArgoCDMetadataOutput
	ToArgoCDMetadataOutputWithContext(context.Context) ArgoCDMetadataOutput
}

type ArgoCDMetadataArgs struct {
}

func (ArgoCDMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDMetadata)(nil)).Elem()
}

func (i ArgoCDMetadataArgs) ToArgoCDMetadataOutput() ArgoCDMetadataOutput {
	return i.ToArgoCDMetadataOutputWithContext(context.Background())
}

func (i ArgoCDMetadataArgs) ToArgoCDMetadataOutputWithContext(ctx context.Context) ArgoCDMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDMetadataOutput)
}

type ArgoCDMetadataOutput struct{ *pulumi.OutputState }

func (ArgoCDMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDMetadata)(nil)).Elem()
}

func (o ArgoCDMetadataOutput) ToArgoCDMetadataOutput() ArgoCDMetadataOutput {
	return o
}

func (o ArgoCDMetadataOutput) ToArgoCDMetadataOutputWithContext(ctx context.Context) ArgoCDMetadataOutput {
	return o
}

// ArgoCDSpec defines the desired state of ArgoCD
type ArgoCDSpec struct {
	// ApplicationInstanceLabelKey is the key name where Argo CD injects the app name as a tracking label.
	ApplicationInstanceLabelKey *string `pulumi:"applicationInstanceLabelKey"`
	// ConfigManagementPlugins is used to specify additional config management plugins.
	ConfigManagementPlugins *string `pulumi:"configManagementPlugins"`
	// Controller defines the Application Controller options for ArgoCD.
	Controller *ArgoCDSpecController `pulumi:"controller"`
	// Dex defines the Dex server options for ArgoCD.
	Dex *ArgoCDSpecDex `pulumi:"dex"`
	// GAAnonymizeUsers toggles user IDs being hashed before sending to google analytics.
	GaAnonymizeUsers *bool `pulumi:"gaAnonymizeUsers"`
	// GATrackingID is the google analytics tracking ID to use.
	GaTrackingID *string `pulumi:"gaTrackingID"`
	// Grafana defines the Grafana server options for ArgoCD.
	Grafana *ArgoCDSpecGrafana `pulumi:"grafana"`
	// HA options for High Availability support for the Redis component.
	Ha *ArgoCDSpecHa `pulumi:"ha"`
	// HelpChatText is the text for getting chat help, defaults to "Chat now!"
	HelpChatText *string `pulumi:"helpChatText"`
	// HelpChatURL is the URL for getting chat help, this will typically be your Slack channel for support.
	HelpChatURL *string `pulumi:"helpChatURL"`
	// Image is the ArgoCD container image for all ArgoCD components.
	Image *string `pulumi:"image"`
	// Import is the import/restore options for ArgoCD.
	Import *ArgoCDSpecImport `pulumi:"import"`
	// InitialRepositories to configure Argo CD with upon creation of the cluster.
	InitialRepositories *string `pulumi:"initialRepositories"`
	// InitialSSHKnownHosts defines the SSH known hosts data upon creation of the cluster for connecting Git repositories via SSH.
	InitialSSHKnownHosts *ArgoCDSpecInitialSSHKnownHosts `pulumi:"initialSSHKnownHosts"`
	// KustomizeBuildOptions is used to specify build options/parameters to use with `kustomize build`.
	KustomizeBuildOptions *string `pulumi:"kustomizeBuildOptions"`
	// OIDCConfig is the OIDC configuration as an alternative to dex.
	OidcConfig *string `pulumi:"oidcConfig"`
	// Prometheus defines the Prometheus server options for ArgoCD.
	Prometheus *ArgoCDSpecPrometheus `pulumi:"prometheus"`
	// RBAC defines the RBAC configuration for Argo CD.
	Rbac *ArgoCDSpecRbac `pulumi:"rbac"`
	// Redis defines the Redis server options for ArgoCD.
	Redis *ArgoCDSpecRedis `pulumi:"redis"`
	// Repo defines the repo server options for Argo CD.
	Repo *ArgoCDSpecRepo `pulumi:"repo"`
	// RepositoryCredentials are the Git pull credentials to configure Argo CD with upon creation of the cluster.
	RepositoryCredentials *string `pulumi:"repositoryCredentials"`
	// ResourceCustomizations customizes resource behavior. Keys are in the form: group/Kind.
	ResourceCustomizations *string `pulumi:"resourceCustomizations"`
	// ResourceExclusions is used to completely ignore entire classes of resource group/kinds.
	ResourceExclusions *string `pulumi:"resourceExclusions"`
	// ResourceInclusions is used to only include specific group/kinds in the reconciliation process.
	ResourceInclusions *string `pulumi:"resourceInclusions"`
	// Server defines the options for the ArgoCD Server component.
	Server *ArgoCDSpecServer `pulumi:"server"`
	// StatusBadgeEnabled toggles application status badge feature.
	StatusBadgeEnabled *bool `pulumi:"statusBadgeEnabled"`
	// TLS defines the TLS options for ArgoCD.
	Tls *ArgoCDSpecTls `pulumi:"tls"`
	// UsersAnonymousEnabled toggles anonymous user access. The anonymous users get default role permissions specified argocd-rbac-cm.
	UsersAnonymousEnabled *bool `pulumi:"usersAnonymousEnabled"`
	// Version is the tag to use with the ArgoCD container image for all ArgoCD components.
	Version *string `pulumi:"version"`
}

// ArgoCDSpecInput is an input type that accepts ArgoCDSpecArgs and ArgoCDSpecOutput values.
// You can construct a concrete instance of `ArgoCDSpecInput` via:
//
//          ArgoCDSpecArgs{...}
type ArgoCDSpecInput interface {
	pulumi.Input

	ToArgoCDSpecOutput() ArgoCDSpecOutput
	ToArgoCDSpecOutputWithContext(context.Context) ArgoCDSpecOutput
}

// ArgoCDSpec defines the desired state of ArgoCD
type ArgoCDSpecArgs struct {
	// ApplicationInstanceLabelKey is the key name where Argo CD injects the app name as a tracking label.
	ApplicationInstanceLabelKey pulumi.StringPtrInput `pulumi:"applicationInstanceLabelKey"`
	// ConfigManagementPlugins is used to specify additional config management plugins.
	ConfigManagementPlugins pulumi.StringPtrInput `pulumi:"configManagementPlugins"`
	// Controller defines the Application Controller options for ArgoCD.
	Controller ArgoCDSpecControllerPtrInput `pulumi:"controller"`
	// Dex defines the Dex server options for ArgoCD.
	Dex ArgoCDSpecDexPtrInput `pulumi:"dex"`
	// GAAnonymizeUsers toggles user IDs being hashed before sending to google analytics.
	GaAnonymizeUsers pulumi.BoolPtrInput `pulumi:"gaAnonymizeUsers"`
	// GATrackingID is the google analytics tracking ID to use.
	GaTrackingID pulumi.StringPtrInput `pulumi:"gaTrackingID"`
	// Grafana defines the Grafana server options for ArgoCD.
	Grafana ArgoCDSpecGrafanaPtrInput `pulumi:"grafana"`
	// HA options for High Availability support for the Redis component.
	Ha ArgoCDSpecHaPtrInput `pulumi:"ha"`
	// HelpChatText is the text for getting chat help, defaults to "Chat now!"
	HelpChatText pulumi.StringPtrInput `pulumi:"helpChatText"`
	// HelpChatURL is the URL for getting chat help, this will typically be your Slack channel for support.
	HelpChatURL pulumi.StringPtrInput `pulumi:"helpChatURL"`
	// Image is the ArgoCD container image for all ArgoCD components.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Import is the import/restore options for ArgoCD.
	Import ArgoCDSpecImportPtrInput `pulumi:"import"`
	// InitialRepositories to configure Argo CD with upon creation of the cluster.
	InitialRepositories pulumi.StringPtrInput `pulumi:"initialRepositories"`
	// InitialSSHKnownHosts defines the SSH known hosts data upon creation of the cluster for connecting Git repositories via SSH.
	InitialSSHKnownHosts ArgoCDSpecInitialSSHKnownHostsPtrInput `pulumi:"initialSSHKnownHosts"`
	// KustomizeBuildOptions is used to specify build options/parameters to use with `kustomize build`.
	KustomizeBuildOptions pulumi.StringPtrInput `pulumi:"kustomizeBuildOptions"`
	// OIDCConfig is the OIDC configuration as an alternative to dex.
	OidcConfig pulumi.StringPtrInput `pulumi:"oidcConfig"`
	// Prometheus defines the Prometheus server options for ArgoCD.
	Prometheus ArgoCDSpecPrometheusPtrInput `pulumi:"prometheus"`
	// RBAC defines the RBAC configuration for Argo CD.
	Rbac ArgoCDSpecRbacPtrInput `pulumi:"rbac"`
	// Redis defines the Redis server options for ArgoCD.
	Redis ArgoCDSpecRedisPtrInput `pulumi:"redis"`
	// Repo defines the repo server options for Argo CD.
	Repo ArgoCDSpecRepoPtrInput `pulumi:"repo"`
	// RepositoryCredentials are the Git pull credentials to configure Argo CD with upon creation of the cluster.
	RepositoryCredentials pulumi.StringPtrInput `pulumi:"repositoryCredentials"`
	// ResourceCustomizations customizes resource behavior. Keys are in the form: group/Kind.
	ResourceCustomizations pulumi.StringPtrInput `pulumi:"resourceCustomizations"`
	// ResourceExclusions is used to completely ignore entire classes of resource group/kinds.
	ResourceExclusions pulumi.StringPtrInput `pulumi:"resourceExclusions"`
	// ResourceInclusions is used to only include specific group/kinds in the reconciliation process.
	ResourceInclusions pulumi.StringPtrInput `pulumi:"resourceInclusions"`
	// Server defines the options for the ArgoCD Server component.
	Server ArgoCDSpecServerPtrInput `pulumi:"server"`
	// StatusBadgeEnabled toggles application status badge feature.
	StatusBadgeEnabled pulumi.BoolPtrInput `pulumi:"statusBadgeEnabled"`
	// TLS defines the TLS options for ArgoCD.
	Tls ArgoCDSpecTlsPtrInput `pulumi:"tls"`
	// UsersAnonymousEnabled toggles anonymous user access. The anonymous users get default role permissions specified argocd-rbac-cm.
	UsersAnonymousEnabled pulumi.BoolPtrInput `pulumi:"usersAnonymousEnabled"`
	// Version is the tag to use with the ArgoCD container image for all ArgoCD components.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ArgoCDSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpec)(nil)).Elem()
}

func (i ArgoCDSpecArgs) ToArgoCDSpecOutput() ArgoCDSpecOutput {
	return i.ToArgoCDSpecOutputWithContext(context.Background())
}

func (i ArgoCDSpecArgs) ToArgoCDSpecOutputWithContext(ctx context.Context) ArgoCDSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecOutput)
}

func (i ArgoCDSpecArgs) ToArgoCDSpecPtrOutput() ArgoCDSpecPtrOutput {
	return i.ToArgoCDSpecPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecArgs) ToArgoCDSpecPtrOutputWithContext(ctx context.Context) ArgoCDSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecOutput).ToArgoCDSpecPtrOutputWithContext(ctx)
}

// ArgoCDSpecPtrInput is an input type that accepts ArgoCDSpecArgs, ArgoCDSpecPtr and ArgoCDSpecPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecPtrInput` via:
//
//          ArgoCDSpecArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecPtrInput interface {
	pulumi.Input

	ToArgoCDSpecPtrOutput() ArgoCDSpecPtrOutput
	ToArgoCDSpecPtrOutputWithContext(context.Context) ArgoCDSpecPtrOutput
}

type argoCDSpecPtrType ArgoCDSpecArgs

func ArgoCDSpecPtr(v *ArgoCDSpecArgs) ArgoCDSpecPtrInput {
	return (*argoCDSpecPtrType)(v)
}

func (*argoCDSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpec)(nil)).Elem()
}

func (i *argoCDSpecPtrType) ToArgoCDSpecPtrOutput() ArgoCDSpecPtrOutput {
	return i.ToArgoCDSpecPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecPtrType) ToArgoCDSpecPtrOutputWithContext(ctx context.Context) ArgoCDSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPtrOutput)
}

// ArgoCDSpec defines the desired state of ArgoCD
type ArgoCDSpecOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpec)(nil)).Elem()
}

func (o ArgoCDSpecOutput) ToArgoCDSpecOutput() ArgoCDSpecOutput {
	return o
}

func (o ArgoCDSpecOutput) ToArgoCDSpecOutputWithContext(ctx context.Context) ArgoCDSpecOutput {
	return o
}

func (o ArgoCDSpecOutput) ToArgoCDSpecPtrOutput() ArgoCDSpecPtrOutput {
	return o.ToArgoCDSpecPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecOutput) ToArgoCDSpecPtrOutputWithContext(ctx context.Context) ArgoCDSpecPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *ArgoCDSpec {
		return &v
	}).(ArgoCDSpecPtrOutput)
}

// ApplicationInstanceLabelKey is the key name where Argo CD injects the app name as a tracking label.
func (o ArgoCDSpecOutput) ApplicationInstanceLabelKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *string { return v.ApplicationInstanceLabelKey }).(pulumi.StringPtrOutput)
}

// ConfigManagementPlugins is used to specify additional config management plugins.
func (o ArgoCDSpecOutput) ConfigManagementPlugins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *string { return v.ConfigManagementPlugins }).(pulumi.StringPtrOutput)
}

// Controller defines the Application Controller options for ArgoCD.
func (o ArgoCDSpecOutput) Controller() ArgoCDSpecControllerPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *ArgoCDSpecController { return v.Controller }).(ArgoCDSpecControllerPtrOutput)
}

// Dex defines the Dex server options for ArgoCD.
func (o ArgoCDSpecOutput) Dex() ArgoCDSpecDexPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *ArgoCDSpecDex { return v.Dex }).(ArgoCDSpecDexPtrOutput)
}

// GAAnonymizeUsers toggles user IDs being hashed before sending to google analytics.
func (o ArgoCDSpecOutput) GaAnonymizeUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *bool { return v.GaAnonymizeUsers }).(pulumi.BoolPtrOutput)
}

// GATrackingID is the google analytics tracking ID to use.
func (o ArgoCDSpecOutput) GaTrackingID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *string { return v.GaTrackingID }).(pulumi.StringPtrOutput)
}

// Grafana defines the Grafana server options for ArgoCD.
func (o ArgoCDSpecOutput) Grafana() ArgoCDSpecGrafanaPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *ArgoCDSpecGrafana { return v.Grafana }).(ArgoCDSpecGrafanaPtrOutput)
}

// HA options for High Availability support for the Redis component.
func (o ArgoCDSpecOutput) Ha() ArgoCDSpecHaPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *ArgoCDSpecHa { return v.Ha }).(ArgoCDSpecHaPtrOutput)
}

// HelpChatText is the text for getting chat help, defaults to "Chat now!"
func (o ArgoCDSpecOutput) HelpChatText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *string { return v.HelpChatText }).(pulumi.StringPtrOutput)
}

// HelpChatURL is the URL for getting chat help, this will typically be your Slack channel for support.
func (o ArgoCDSpecOutput) HelpChatURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *string { return v.HelpChatURL }).(pulumi.StringPtrOutput)
}

// Image is the ArgoCD container image for all ArgoCD components.
func (o ArgoCDSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Import is the import/restore options for ArgoCD.
func (o ArgoCDSpecOutput) Import() ArgoCDSpecImportPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *ArgoCDSpecImport { return v.Import }).(ArgoCDSpecImportPtrOutput)
}

// InitialRepositories to configure Argo CD with upon creation of the cluster.
func (o ArgoCDSpecOutput) InitialRepositories() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *string { return v.InitialRepositories }).(pulumi.StringPtrOutput)
}

// InitialSSHKnownHosts defines the SSH known hosts data upon creation of the cluster for connecting Git repositories via SSH.
func (o ArgoCDSpecOutput) InitialSSHKnownHosts() ArgoCDSpecInitialSSHKnownHostsPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *ArgoCDSpecInitialSSHKnownHosts { return v.InitialSSHKnownHosts }).(ArgoCDSpecInitialSSHKnownHostsPtrOutput)
}

// KustomizeBuildOptions is used to specify build options/parameters to use with `kustomize build`.
func (o ArgoCDSpecOutput) KustomizeBuildOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *string { return v.KustomizeBuildOptions }).(pulumi.StringPtrOutput)
}

// OIDCConfig is the OIDC configuration as an alternative to dex.
func (o ArgoCDSpecOutput) OidcConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *string { return v.OidcConfig }).(pulumi.StringPtrOutput)
}

// Prometheus defines the Prometheus server options for ArgoCD.
func (o ArgoCDSpecOutput) Prometheus() ArgoCDSpecPrometheusPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *ArgoCDSpecPrometheus { return v.Prometheus }).(ArgoCDSpecPrometheusPtrOutput)
}

// RBAC defines the RBAC configuration for Argo CD.
func (o ArgoCDSpecOutput) Rbac() ArgoCDSpecRbacPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *ArgoCDSpecRbac { return v.Rbac }).(ArgoCDSpecRbacPtrOutput)
}

// Redis defines the Redis server options for ArgoCD.
func (o ArgoCDSpecOutput) Redis() ArgoCDSpecRedisPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *ArgoCDSpecRedis { return v.Redis }).(ArgoCDSpecRedisPtrOutput)
}

// Repo defines the repo server options for Argo CD.
func (o ArgoCDSpecOutput) Repo() ArgoCDSpecRepoPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *ArgoCDSpecRepo { return v.Repo }).(ArgoCDSpecRepoPtrOutput)
}

// RepositoryCredentials are the Git pull credentials to configure Argo CD with upon creation of the cluster.
func (o ArgoCDSpecOutput) RepositoryCredentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *string { return v.RepositoryCredentials }).(pulumi.StringPtrOutput)
}

// ResourceCustomizations customizes resource behavior. Keys are in the form: group/Kind.
func (o ArgoCDSpecOutput) ResourceCustomizations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *string { return v.ResourceCustomizations }).(pulumi.StringPtrOutput)
}

// ResourceExclusions is used to completely ignore entire classes of resource group/kinds.
func (o ArgoCDSpecOutput) ResourceExclusions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *string { return v.ResourceExclusions }).(pulumi.StringPtrOutput)
}

// ResourceInclusions is used to only include specific group/kinds in the reconciliation process.
func (o ArgoCDSpecOutput) ResourceInclusions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *string { return v.ResourceInclusions }).(pulumi.StringPtrOutput)
}

// Server defines the options for the ArgoCD Server component.
func (o ArgoCDSpecOutput) Server() ArgoCDSpecServerPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *ArgoCDSpecServer { return v.Server }).(ArgoCDSpecServerPtrOutput)
}

// StatusBadgeEnabled toggles application status badge feature.
func (o ArgoCDSpecOutput) StatusBadgeEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *bool { return v.StatusBadgeEnabled }).(pulumi.BoolPtrOutput)
}

// TLS defines the TLS options for ArgoCD.
func (o ArgoCDSpecOutput) Tls() ArgoCDSpecTlsPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *ArgoCDSpecTls { return v.Tls }).(ArgoCDSpecTlsPtrOutput)
}

// UsersAnonymousEnabled toggles anonymous user access. The anonymous users get default role permissions specified argocd-rbac-cm.
func (o ArgoCDSpecOutput) UsersAnonymousEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *bool { return v.UsersAnonymousEnabled }).(pulumi.BoolPtrOutput)
}

// Version is the tag to use with the ArgoCD container image for all ArgoCD components.
func (o ArgoCDSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpec)(nil)).Elem()
}

func (o ArgoCDSpecPtrOutput) ToArgoCDSpecPtrOutput() ArgoCDSpecPtrOutput {
	return o
}

func (o ArgoCDSpecPtrOutput) ToArgoCDSpecPtrOutputWithContext(ctx context.Context) ArgoCDSpecPtrOutput {
	return o
}

func (o ArgoCDSpecPtrOutput) Elem() ArgoCDSpecOutput {
	return o.ApplyT(func(v *ArgoCDSpec) ArgoCDSpec { return *v }).(ArgoCDSpecOutput)
}

// ApplicationInstanceLabelKey is the key name where Argo CD injects the app name as a tracking label.
func (o ArgoCDSpecPtrOutput) ApplicationInstanceLabelKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationInstanceLabelKey
	}).(pulumi.StringPtrOutput)
}

// ConfigManagementPlugins is used to specify additional config management plugins.
func (o ArgoCDSpecPtrOutput) ConfigManagementPlugins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *string {
		if v == nil {
			return nil
		}
		return v.ConfigManagementPlugins
	}).(pulumi.StringPtrOutput)
}

// Controller defines the Application Controller options for ArgoCD.
func (o ArgoCDSpecPtrOutput) Controller() ArgoCDSpecControllerPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *ArgoCDSpecController {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(ArgoCDSpecControllerPtrOutput)
}

// Dex defines the Dex server options for ArgoCD.
func (o ArgoCDSpecPtrOutput) Dex() ArgoCDSpecDexPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *ArgoCDSpecDex {
		if v == nil {
			return nil
		}
		return v.Dex
	}).(ArgoCDSpecDexPtrOutput)
}

// GAAnonymizeUsers toggles user IDs being hashed before sending to google analytics.
func (o ArgoCDSpecPtrOutput) GaAnonymizeUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *bool {
		if v == nil {
			return nil
		}
		return v.GaAnonymizeUsers
	}).(pulumi.BoolPtrOutput)
}

// GATrackingID is the google analytics tracking ID to use.
func (o ArgoCDSpecPtrOutput) GaTrackingID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *string {
		if v == nil {
			return nil
		}
		return v.GaTrackingID
	}).(pulumi.StringPtrOutput)
}

// Grafana defines the Grafana server options for ArgoCD.
func (o ArgoCDSpecPtrOutput) Grafana() ArgoCDSpecGrafanaPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *ArgoCDSpecGrafana {
		if v == nil {
			return nil
		}
		return v.Grafana
	}).(ArgoCDSpecGrafanaPtrOutput)
}

// HA options for High Availability support for the Redis component.
func (o ArgoCDSpecPtrOutput) Ha() ArgoCDSpecHaPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *ArgoCDSpecHa {
		if v == nil {
			return nil
		}
		return v.Ha
	}).(ArgoCDSpecHaPtrOutput)
}

// HelpChatText is the text for getting chat help, defaults to "Chat now!"
func (o ArgoCDSpecPtrOutput) HelpChatText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *string {
		if v == nil {
			return nil
		}
		return v.HelpChatText
	}).(pulumi.StringPtrOutput)
}

// HelpChatURL is the URL for getting chat help, this will typically be your Slack channel for support.
func (o ArgoCDSpecPtrOutput) HelpChatURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *string {
		if v == nil {
			return nil
		}
		return v.HelpChatURL
	}).(pulumi.StringPtrOutput)
}

// Image is the ArgoCD container image for all ArgoCD components.
func (o ArgoCDSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Import is the import/restore options for ArgoCD.
func (o ArgoCDSpecPtrOutput) Import() ArgoCDSpecImportPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *ArgoCDSpecImport {
		if v == nil {
			return nil
		}
		return v.Import
	}).(ArgoCDSpecImportPtrOutput)
}

// InitialRepositories to configure Argo CD with upon creation of the cluster.
func (o ArgoCDSpecPtrOutput) InitialRepositories() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *string {
		if v == nil {
			return nil
		}
		return v.InitialRepositories
	}).(pulumi.StringPtrOutput)
}

// InitialSSHKnownHosts defines the SSH known hosts data upon creation of the cluster for connecting Git repositories via SSH.
func (o ArgoCDSpecPtrOutput) InitialSSHKnownHosts() ArgoCDSpecInitialSSHKnownHostsPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *ArgoCDSpecInitialSSHKnownHosts {
		if v == nil {
			return nil
		}
		return v.InitialSSHKnownHosts
	}).(ArgoCDSpecInitialSSHKnownHostsPtrOutput)
}

// KustomizeBuildOptions is used to specify build options/parameters to use with `kustomize build`.
func (o ArgoCDSpecPtrOutput) KustomizeBuildOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *string {
		if v == nil {
			return nil
		}
		return v.KustomizeBuildOptions
	}).(pulumi.StringPtrOutput)
}

// OIDCConfig is the OIDC configuration as an alternative to dex.
func (o ArgoCDSpecPtrOutput) OidcConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *string {
		if v == nil {
			return nil
		}
		return v.OidcConfig
	}).(pulumi.StringPtrOutput)
}

// Prometheus defines the Prometheus server options for ArgoCD.
func (o ArgoCDSpecPtrOutput) Prometheus() ArgoCDSpecPrometheusPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *ArgoCDSpecPrometheus {
		if v == nil {
			return nil
		}
		return v.Prometheus
	}).(ArgoCDSpecPrometheusPtrOutput)
}

// RBAC defines the RBAC configuration for Argo CD.
func (o ArgoCDSpecPtrOutput) Rbac() ArgoCDSpecRbacPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *ArgoCDSpecRbac {
		if v == nil {
			return nil
		}
		return v.Rbac
	}).(ArgoCDSpecRbacPtrOutput)
}

// Redis defines the Redis server options for ArgoCD.
func (o ArgoCDSpecPtrOutput) Redis() ArgoCDSpecRedisPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *ArgoCDSpecRedis {
		if v == nil {
			return nil
		}
		return v.Redis
	}).(ArgoCDSpecRedisPtrOutput)
}

// Repo defines the repo server options for Argo CD.
func (o ArgoCDSpecPtrOutput) Repo() ArgoCDSpecRepoPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *ArgoCDSpecRepo {
		if v == nil {
			return nil
		}
		return v.Repo
	}).(ArgoCDSpecRepoPtrOutput)
}

// RepositoryCredentials are the Git pull credentials to configure Argo CD with upon creation of the cluster.
func (o ArgoCDSpecPtrOutput) RepositoryCredentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryCredentials
	}).(pulumi.StringPtrOutput)
}

// ResourceCustomizations customizes resource behavior. Keys are in the form: group/Kind.
func (o ArgoCDSpecPtrOutput) ResourceCustomizations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *string {
		if v == nil {
			return nil
		}
		return v.ResourceCustomizations
	}).(pulumi.StringPtrOutput)
}

// ResourceExclusions is used to completely ignore entire classes of resource group/kinds.
func (o ArgoCDSpecPtrOutput) ResourceExclusions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *string {
		if v == nil {
			return nil
		}
		return v.ResourceExclusions
	}).(pulumi.StringPtrOutput)
}

// ResourceInclusions is used to only include specific group/kinds in the reconciliation process.
func (o ArgoCDSpecPtrOutput) ResourceInclusions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *string {
		if v == nil {
			return nil
		}
		return v.ResourceInclusions
	}).(pulumi.StringPtrOutput)
}

// Server defines the options for the ArgoCD Server component.
func (o ArgoCDSpecPtrOutput) Server() ArgoCDSpecServerPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *ArgoCDSpecServer {
		if v == nil {
			return nil
		}
		return v.Server
	}).(ArgoCDSpecServerPtrOutput)
}

// StatusBadgeEnabled toggles application status badge feature.
func (o ArgoCDSpecPtrOutput) StatusBadgeEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *bool {
		if v == nil {
			return nil
		}
		return v.StatusBadgeEnabled
	}).(pulumi.BoolPtrOutput)
}

// TLS defines the TLS options for ArgoCD.
func (o ArgoCDSpecPtrOutput) Tls() ArgoCDSpecTlsPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *ArgoCDSpecTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ArgoCDSpecTlsPtrOutput)
}

// UsersAnonymousEnabled toggles anonymous user access. The anonymous users get default role permissions specified argocd-rbac-cm.
func (o ArgoCDSpecPtrOutput) UsersAnonymousEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *bool {
		if v == nil {
			return nil
		}
		return v.UsersAnonymousEnabled
	}).(pulumi.BoolPtrOutput)
}

// Version is the tag to use with the ArgoCD container image for all ArgoCD components.
func (o ArgoCDSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Controller defines the Application Controller options for ArgoCD.
type ArgoCDSpecController struct {
	// AppSync is used to control the sync frequency, by default the ArgoCD controller polls Git every 3m by default.
	//  Set this to a duration, e.g. 10m or 600s to control the synchronisation frequency.
	AppSync *string `pulumi:"appSync"`
	// Processors contains the options for the Application Controller processors.
	Processors *ArgoCDSpecControllerProcessors `pulumi:"processors"`
	// Resources defines the Compute Resources required by the container for the Application Controller.
	Resources *ArgoCDSpecControllerResources `pulumi:"resources"`
}

// ArgoCDSpecControllerInput is an input type that accepts ArgoCDSpecControllerArgs and ArgoCDSpecControllerOutput values.
// You can construct a concrete instance of `ArgoCDSpecControllerInput` via:
//
//          ArgoCDSpecControllerArgs{...}
type ArgoCDSpecControllerInput interface {
	pulumi.Input

	ToArgoCDSpecControllerOutput() ArgoCDSpecControllerOutput
	ToArgoCDSpecControllerOutputWithContext(context.Context) ArgoCDSpecControllerOutput
}

// Controller defines the Application Controller options for ArgoCD.
type ArgoCDSpecControllerArgs struct {
	// AppSync is used to control the sync frequency, by default the ArgoCD controller polls Git every 3m by default.
	//  Set this to a duration, e.g. 10m or 600s to control the synchronisation frequency.
	AppSync pulumi.StringPtrInput `pulumi:"appSync"`
	// Processors contains the options for the Application Controller processors.
	Processors ArgoCDSpecControllerProcessorsPtrInput `pulumi:"processors"`
	// Resources defines the Compute Resources required by the container for the Application Controller.
	Resources ArgoCDSpecControllerResourcesPtrInput `pulumi:"resources"`
}

func (ArgoCDSpecControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecController)(nil)).Elem()
}

func (i ArgoCDSpecControllerArgs) ToArgoCDSpecControllerOutput() ArgoCDSpecControllerOutput {
	return i.ToArgoCDSpecControllerOutputWithContext(context.Background())
}

func (i ArgoCDSpecControllerArgs) ToArgoCDSpecControllerOutputWithContext(ctx context.Context) ArgoCDSpecControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecControllerOutput)
}

func (i ArgoCDSpecControllerArgs) ToArgoCDSpecControllerPtrOutput() ArgoCDSpecControllerPtrOutput {
	return i.ToArgoCDSpecControllerPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecControllerArgs) ToArgoCDSpecControllerPtrOutputWithContext(ctx context.Context) ArgoCDSpecControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecControllerOutput).ToArgoCDSpecControllerPtrOutputWithContext(ctx)
}

// ArgoCDSpecControllerPtrInput is an input type that accepts ArgoCDSpecControllerArgs, ArgoCDSpecControllerPtr and ArgoCDSpecControllerPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecControllerPtrInput` via:
//
//          ArgoCDSpecControllerArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecControllerPtrInput interface {
	pulumi.Input

	ToArgoCDSpecControllerPtrOutput() ArgoCDSpecControllerPtrOutput
	ToArgoCDSpecControllerPtrOutputWithContext(context.Context) ArgoCDSpecControllerPtrOutput
}

type argoCDSpecControllerPtrType ArgoCDSpecControllerArgs

func ArgoCDSpecControllerPtr(v *ArgoCDSpecControllerArgs) ArgoCDSpecControllerPtrInput {
	return (*argoCDSpecControllerPtrType)(v)
}

func (*argoCDSpecControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecController)(nil)).Elem()
}

func (i *argoCDSpecControllerPtrType) ToArgoCDSpecControllerPtrOutput() ArgoCDSpecControllerPtrOutput {
	return i.ToArgoCDSpecControllerPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecControllerPtrType) ToArgoCDSpecControllerPtrOutputWithContext(ctx context.Context) ArgoCDSpecControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecControllerPtrOutput)
}

// Controller defines the Application Controller options for ArgoCD.
type ArgoCDSpecControllerOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecController)(nil)).Elem()
}

func (o ArgoCDSpecControllerOutput) ToArgoCDSpecControllerOutput() ArgoCDSpecControllerOutput {
	return o
}

func (o ArgoCDSpecControllerOutput) ToArgoCDSpecControllerOutputWithContext(ctx context.Context) ArgoCDSpecControllerOutput {
	return o
}

func (o ArgoCDSpecControllerOutput) ToArgoCDSpecControllerPtrOutput() ArgoCDSpecControllerPtrOutput {
	return o.ToArgoCDSpecControllerPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecControllerOutput) ToArgoCDSpecControllerPtrOutputWithContext(ctx context.Context) ArgoCDSpecControllerPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecController) *ArgoCDSpecController {
		return &v
	}).(ArgoCDSpecControllerPtrOutput)
}

// AppSync is used to control the sync frequency, by default the ArgoCD controller polls Git every 3m by default.
//  Set this to a duration, e.g. 10m or 600s to control the synchronisation frequency.
func (o ArgoCDSpecControllerOutput) AppSync() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecController) *string { return v.AppSync }).(pulumi.StringPtrOutput)
}

// Processors contains the options for the Application Controller processors.
func (o ArgoCDSpecControllerOutput) Processors() ArgoCDSpecControllerProcessorsPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecController) *ArgoCDSpecControllerProcessors { return v.Processors }).(ArgoCDSpecControllerProcessorsPtrOutput)
}

// Resources defines the Compute Resources required by the container for the Application Controller.
func (o ArgoCDSpecControllerOutput) Resources() ArgoCDSpecControllerResourcesPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecController) *ArgoCDSpecControllerResources { return v.Resources }).(ArgoCDSpecControllerResourcesPtrOutput)
}

type ArgoCDSpecControllerPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecController)(nil)).Elem()
}

func (o ArgoCDSpecControllerPtrOutput) ToArgoCDSpecControllerPtrOutput() ArgoCDSpecControllerPtrOutput {
	return o
}

func (o ArgoCDSpecControllerPtrOutput) ToArgoCDSpecControllerPtrOutputWithContext(ctx context.Context) ArgoCDSpecControllerPtrOutput {
	return o
}

func (o ArgoCDSpecControllerPtrOutput) Elem() ArgoCDSpecControllerOutput {
	return o.ApplyT(func(v *ArgoCDSpecController) ArgoCDSpecController { return *v }).(ArgoCDSpecControllerOutput)
}

// AppSync is used to control the sync frequency, by default the ArgoCD controller polls Git every 3m by default.
//  Set this to a duration, e.g. 10m or 600s to control the synchronisation frequency.
func (o ArgoCDSpecControllerPtrOutput) AppSync() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecController) *string {
		if v == nil {
			return nil
		}
		return v.AppSync
	}).(pulumi.StringPtrOutput)
}

// Processors contains the options for the Application Controller processors.
func (o ArgoCDSpecControllerPtrOutput) Processors() ArgoCDSpecControllerProcessorsPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecController) *ArgoCDSpecControllerProcessors {
		if v == nil {
			return nil
		}
		return v.Processors
	}).(ArgoCDSpecControllerProcessorsPtrOutput)
}

// Resources defines the Compute Resources required by the container for the Application Controller.
func (o ArgoCDSpecControllerPtrOutput) Resources() ArgoCDSpecControllerResourcesPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecController) *ArgoCDSpecControllerResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ArgoCDSpecControllerResourcesPtrOutput)
}

// Processors contains the options for the Application Controller processors.
type ArgoCDSpecControllerProcessors struct {
	// Operation is the number of application operation processors.
	Operation *int `pulumi:"operation"`
	// Status is the number of application status processors.
	Status *int `pulumi:"status"`
}

// ArgoCDSpecControllerProcessorsInput is an input type that accepts ArgoCDSpecControllerProcessorsArgs and ArgoCDSpecControllerProcessorsOutput values.
// You can construct a concrete instance of `ArgoCDSpecControllerProcessorsInput` via:
//
//          ArgoCDSpecControllerProcessorsArgs{...}
type ArgoCDSpecControllerProcessorsInput interface {
	pulumi.Input

	ToArgoCDSpecControllerProcessorsOutput() ArgoCDSpecControllerProcessorsOutput
	ToArgoCDSpecControllerProcessorsOutputWithContext(context.Context) ArgoCDSpecControllerProcessorsOutput
}

// Processors contains the options for the Application Controller processors.
type ArgoCDSpecControllerProcessorsArgs struct {
	// Operation is the number of application operation processors.
	Operation pulumi.IntPtrInput `pulumi:"operation"`
	// Status is the number of application status processors.
	Status pulumi.IntPtrInput `pulumi:"status"`
}

func (ArgoCDSpecControllerProcessorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecControllerProcessors)(nil)).Elem()
}

func (i ArgoCDSpecControllerProcessorsArgs) ToArgoCDSpecControllerProcessorsOutput() ArgoCDSpecControllerProcessorsOutput {
	return i.ToArgoCDSpecControllerProcessorsOutputWithContext(context.Background())
}

func (i ArgoCDSpecControllerProcessorsArgs) ToArgoCDSpecControllerProcessorsOutputWithContext(ctx context.Context) ArgoCDSpecControllerProcessorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecControllerProcessorsOutput)
}

func (i ArgoCDSpecControllerProcessorsArgs) ToArgoCDSpecControllerProcessorsPtrOutput() ArgoCDSpecControllerProcessorsPtrOutput {
	return i.ToArgoCDSpecControllerProcessorsPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecControllerProcessorsArgs) ToArgoCDSpecControllerProcessorsPtrOutputWithContext(ctx context.Context) ArgoCDSpecControllerProcessorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecControllerProcessorsOutput).ToArgoCDSpecControllerProcessorsPtrOutputWithContext(ctx)
}

// ArgoCDSpecControllerProcessorsPtrInput is an input type that accepts ArgoCDSpecControllerProcessorsArgs, ArgoCDSpecControllerProcessorsPtr and ArgoCDSpecControllerProcessorsPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecControllerProcessorsPtrInput` via:
//
//          ArgoCDSpecControllerProcessorsArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecControllerProcessorsPtrInput interface {
	pulumi.Input

	ToArgoCDSpecControllerProcessorsPtrOutput() ArgoCDSpecControllerProcessorsPtrOutput
	ToArgoCDSpecControllerProcessorsPtrOutputWithContext(context.Context) ArgoCDSpecControllerProcessorsPtrOutput
}

type argoCDSpecControllerProcessorsPtrType ArgoCDSpecControllerProcessorsArgs

func ArgoCDSpecControllerProcessorsPtr(v *ArgoCDSpecControllerProcessorsArgs) ArgoCDSpecControllerProcessorsPtrInput {
	return (*argoCDSpecControllerProcessorsPtrType)(v)
}

func (*argoCDSpecControllerProcessorsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecControllerProcessors)(nil)).Elem()
}

func (i *argoCDSpecControllerProcessorsPtrType) ToArgoCDSpecControllerProcessorsPtrOutput() ArgoCDSpecControllerProcessorsPtrOutput {
	return i.ToArgoCDSpecControllerProcessorsPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecControllerProcessorsPtrType) ToArgoCDSpecControllerProcessorsPtrOutputWithContext(ctx context.Context) ArgoCDSpecControllerProcessorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecControllerProcessorsPtrOutput)
}

// Processors contains the options for the Application Controller processors.
type ArgoCDSpecControllerProcessorsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecControllerProcessorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecControllerProcessors)(nil)).Elem()
}

func (o ArgoCDSpecControllerProcessorsOutput) ToArgoCDSpecControllerProcessorsOutput() ArgoCDSpecControllerProcessorsOutput {
	return o
}

func (o ArgoCDSpecControllerProcessorsOutput) ToArgoCDSpecControllerProcessorsOutputWithContext(ctx context.Context) ArgoCDSpecControllerProcessorsOutput {
	return o
}

func (o ArgoCDSpecControllerProcessorsOutput) ToArgoCDSpecControllerProcessorsPtrOutput() ArgoCDSpecControllerProcessorsPtrOutput {
	return o.ToArgoCDSpecControllerProcessorsPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecControllerProcessorsOutput) ToArgoCDSpecControllerProcessorsPtrOutputWithContext(ctx context.Context) ArgoCDSpecControllerProcessorsPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecControllerProcessors) *ArgoCDSpecControllerProcessors {
		return &v
	}).(ArgoCDSpecControllerProcessorsPtrOutput)
}

// Operation is the number of application operation processors.
func (o ArgoCDSpecControllerProcessorsOutput) Operation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecControllerProcessors) *int { return v.Operation }).(pulumi.IntPtrOutput)
}

// Status is the number of application status processors.
func (o ArgoCDSpecControllerProcessorsOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecControllerProcessors) *int { return v.Status }).(pulumi.IntPtrOutput)
}

type ArgoCDSpecControllerProcessorsPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecControllerProcessorsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecControllerProcessors)(nil)).Elem()
}

func (o ArgoCDSpecControllerProcessorsPtrOutput) ToArgoCDSpecControllerProcessorsPtrOutput() ArgoCDSpecControllerProcessorsPtrOutput {
	return o
}

func (o ArgoCDSpecControllerProcessorsPtrOutput) ToArgoCDSpecControllerProcessorsPtrOutputWithContext(ctx context.Context) ArgoCDSpecControllerProcessorsPtrOutput {
	return o
}

func (o ArgoCDSpecControllerProcessorsPtrOutput) Elem() ArgoCDSpecControllerProcessorsOutput {
	return o.ApplyT(func(v *ArgoCDSpecControllerProcessors) ArgoCDSpecControllerProcessors { return *v }).(ArgoCDSpecControllerProcessorsOutput)
}

// Operation is the number of application operation processors.
func (o ArgoCDSpecControllerProcessorsPtrOutput) Operation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecControllerProcessors) *int {
		if v == nil {
			return nil
		}
		return v.Operation
	}).(pulumi.IntPtrOutput)
}

// Status is the number of application status processors.
func (o ArgoCDSpecControllerProcessorsPtrOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecControllerProcessors) *int {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.IntPtrOutput)
}

// Resources defines the Compute Resources required by the container for the Application Controller.
type ArgoCDSpecControllerResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]ArgoCDSpecControllerResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]ArgoCDSpecControllerResourcesRequests `pulumi:"requests"`
}

// ArgoCDSpecControllerResourcesInput is an input type that accepts ArgoCDSpecControllerResourcesArgs and ArgoCDSpecControllerResourcesOutput values.
// You can construct a concrete instance of `ArgoCDSpecControllerResourcesInput` via:
//
//          ArgoCDSpecControllerResourcesArgs{...}
type ArgoCDSpecControllerResourcesInput interface {
	pulumi.Input

	ToArgoCDSpecControllerResourcesOutput() ArgoCDSpecControllerResourcesOutput
	ToArgoCDSpecControllerResourcesOutputWithContext(context.Context) ArgoCDSpecControllerResourcesOutput
}

// Resources defines the Compute Resources required by the container for the Application Controller.
type ArgoCDSpecControllerResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits ArgoCDSpecControllerResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests ArgoCDSpecControllerResourcesRequestsMapInput `pulumi:"requests"`
}

func (ArgoCDSpecControllerResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecControllerResources)(nil)).Elem()
}

func (i ArgoCDSpecControllerResourcesArgs) ToArgoCDSpecControllerResourcesOutput() ArgoCDSpecControllerResourcesOutput {
	return i.ToArgoCDSpecControllerResourcesOutputWithContext(context.Background())
}

func (i ArgoCDSpecControllerResourcesArgs) ToArgoCDSpecControllerResourcesOutputWithContext(ctx context.Context) ArgoCDSpecControllerResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecControllerResourcesOutput)
}

func (i ArgoCDSpecControllerResourcesArgs) ToArgoCDSpecControllerResourcesPtrOutput() ArgoCDSpecControllerResourcesPtrOutput {
	return i.ToArgoCDSpecControllerResourcesPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecControllerResourcesArgs) ToArgoCDSpecControllerResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecControllerResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecControllerResourcesOutput).ToArgoCDSpecControllerResourcesPtrOutputWithContext(ctx)
}

// ArgoCDSpecControllerResourcesPtrInput is an input type that accepts ArgoCDSpecControllerResourcesArgs, ArgoCDSpecControllerResourcesPtr and ArgoCDSpecControllerResourcesPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecControllerResourcesPtrInput` via:
//
//          ArgoCDSpecControllerResourcesArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecControllerResourcesPtrInput interface {
	pulumi.Input

	ToArgoCDSpecControllerResourcesPtrOutput() ArgoCDSpecControllerResourcesPtrOutput
	ToArgoCDSpecControllerResourcesPtrOutputWithContext(context.Context) ArgoCDSpecControllerResourcesPtrOutput
}

type argoCDSpecControllerResourcesPtrType ArgoCDSpecControllerResourcesArgs

func ArgoCDSpecControllerResourcesPtr(v *ArgoCDSpecControllerResourcesArgs) ArgoCDSpecControllerResourcesPtrInput {
	return (*argoCDSpecControllerResourcesPtrType)(v)
}

func (*argoCDSpecControllerResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecControllerResources)(nil)).Elem()
}

func (i *argoCDSpecControllerResourcesPtrType) ToArgoCDSpecControllerResourcesPtrOutput() ArgoCDSpecControllerResourcesPtrOutput {
	return i.ToArgoCDSpecControllerResourcesPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecControllerResourcesPtrType) ToArgoCDSpecControllerResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecControllerResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecControllerResourcesPtrOutput)
}

// Resources defines the Compute Resources required by the container for the Application Controller.
type ArgoCDSpecControllerResourcesOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecControllerResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecControllerResources)(nil)).Elem()
}

func (o ArgoCDSpecControllerResourcesOutput) ToArgoCDSpecControllerResourcesOutput() ArgoCDSpecControllerResourcesOutput {
	return o
}

func (o ArgoCDSpecControllerResourcesOutput) ToArgoCDSpecControllerResourcesOutputWithContext(ctx context.Context) ArgoCDSpecControllerResourcesOutput {
	return o
}

func (o ArgoCDSpecControllerResourcesOutput) ToArgoCDSpecControllerResourcesPtrOutput() ArgoCDSpecControllerResourcesPtrOutput {
	return o.ToArgoCDSpecControllerResourcesPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecControllerResourcesOutput) ToArgoCDSpecControllerResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecControllerResourcesPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecControllerResources) *ArgoCDSpecControllerResources {
		return &v
	}).(ArgoCDSpecControllerResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecControllerResourcesOutput) Limits() ArgoCDSpecControllerResourcesLimitsMapOutput {
	return o.ApplyT(func(v ArgoCDSpecControllerResources) map[string]ArgoCDSpecControllerResourcesLimits { return v.Limits }).(ArgoCDSpecControllerResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecControllerResourcesOutput) Requests() ArgoCDSpecControllerResourcesRequestsMapOutput {
	return o.ApplyT(func(v ArgoCDSpecControllerResources) map[string]ArgoCDSpecControllerResourcesRequests {
		return v.Requests
	}).(ArgoCDSpecControllerResourcesRequestsMapOutput)
}

type ArgoCDSpecControllerResourcesPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecControllerResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecControllerResources)(nil)).Elem()
}

func (o ArgoCDSpecControllerResourcesPtrOutput) ToArgoCDSpecControllerResourcesPtrOutput() ArgoCDSpecControllerResourcesPtrOutput {
	return o
}

func (o ArgoCDSpecControllerResourcesPtrOutput) ToArgoCDSpecControllerResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecControllerResourcesPtrOutput {
	return o
}

func (o ArgoCDSpecControllerResourcesPtrOutput) Elem() ArgoCDSpecControllerResourcesOutput {
	return o.ApplyT(func(v *ArgoCDSpecControllerResources) ArgoCDSpecControllerResources { return *v }).(ArgoCDSpecControllerResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecControllerResourcesPtrOutput) Limits() ArgoCDSpecControllerResourcesLimitsMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecControllerResources) map[string]ArgoCDSpecControllerResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(ArgoCDSpecControllerResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecControllerResourcesPtrOutput) Requests() ArgoCDSpecControllerResourcesRequestsMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecControllerResources) map[string]ArgoCDSpecControllerResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(ArgoCDSpecControllerResourcesRequestsMapOutput)
}

type ArgoCDSpecControllerResourcesLimits struct {
}

// ArgoCDSpecControllerResourcesLimitsInput is an input type that accepts ArgoCDSpecControllerResourcesLimitsArgs and ArgoCDSpecControllerResourcesLimitsOutput values.
// You can construct a concrete instance of `ArgoCDSpecControllerResourcesLimitsInput` via:
//
//          ArgoCDSpecControllerResourcesLimitsArgs{...}
type ArgoCDSpecControllerResourcesLimitsInput interface {
	pulumi.Input

	ToArgoCDSpecControllerResourcesLimitsOutput() ArgoCDSpecControllerResourcesLimitsOutput
	ToArgoCDSpecControllerResourcesLimitsOutputWithContext(context.Context) ArgoCDSpecControllerResourcesLimitsOutput
}

type ArgoCDSpecControllerResourcesLimitsArgs struct {
}

func (ArgoCDSpecControllerResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecControllerResourcesLimits)(nil)).Elem()
}

func (i ArgoCDSpecControllerResourcesLimitsArgs) ToArgoCDSpecControllerResourcesLimitsOutput() ArgoCDSpecControllerResourcesLimitsOutput {
	return i.ToArgoCDSpecControllerResourcesLimitsOutputWithContext(context.Background())
}

func (i ArgoCDSpecControllerResourcesLimitsArgs) ToArgoCDSpecControllerResourcesLimitsOutputWithContext(ctx context.Context) ArgoCDSpecControllerResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecControllerResourcesLimitsOutput)
}

// ArgoCDSpecControllerResourcesLimitsMapInput is an input type that accepts ArgoCDSpecControllerResourcesLimitsMap and ArgoCDSpecControllerResourcesLimitsMapOutput values.
// You can construct a concrete instance of `ArgoCDSpecControllerResourcesLimitsMapInput` via:
//
//          ArgoCDSpecControllerResourcesLimitsMap{ "key": ArgoCDSpecControllerResourcesLimitsArgs{...} }
type ArgoCDSpecControllerResourcesLimitsMapInput interface {
	pulumi.Input

	ToArgoCDSpecControllerResourcesLimitsMapOutput() ArgoCDSpecControllerResourcesLimitsMapOutput
	ToArgoCDSpecControllerResourcesLimitsMapOutputWithContext(context.Context) ArgoCDSpecControllerResourcesLimitsMapOutput
}

type ArgoCDSpecControllerResourcesLimitsMap map[string]ArgoCDSpecControllerResourcesLimitsInput

func (ArgoCDSpecControllerResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecControllerResourcesLimits)(nil)).Elem()
}

func (i ArgoCDSpecControllerResourcesLimitsMap) ToArgoCDSpecControllerResourcesLimitsMapOutput() ArgoCDSpecControllerResourcesLimitsMapOutput {
	return i.ToArgoCDSpecControllerResourcesLimitsMapOutputWithContext(context.Background())
}

func (i ArgoCDSpecControllerResourcesLimitsMap) ToArgoCDSpecControllerResourcesLimitsMapOutputWithContext(ctx context.Context) ArgoCDSpecControllerResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecControllerResourcesLimitsMapOutput)
}

type ArgoCDSpecControllerResourcesLimitsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecControllerResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecControllerResourcesLimits)(nil)).Elem()
}

func (o ArgoCDSpecControllerResourcesLimitsOutput) ToArgoCDSpecControllerResourcesLimitsOutput() ArgoCDSpecControllerResourcesLimitsOutput {
	return o
}

func (o ArgoCDSpecControllerResourcesLimitsOutput) ToArgoCDSpecControllerResourcesLimitsOutputWithContext(ctx context.Context) ArgoCDSpecControllerResourcesLimitsOutput {
	return o
}

type ArgoCDSpecControllerResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecControllerResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecControllerResourcesLimits)(nil)).Elem()
}

func (o ArgoCDSpecControllerResourcesLimitsMapOutput) ToArgoCDSpecControllerResourcesLimitsMapOutput() ArgoCDSpecControllerResourcesLimitsMapOutput {
	return o
}

func (o ArgoCDSpecControllerResourcesLimitsMapOutput) ToArgoCDSpecControllerResourcesLimitsMapOutputWithContext(ctx context.Context) ArgoCDSpecControllerResourcesLimitsMapOutput {
	return o
}

func (o ArgoCDSpecControllerResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) ArgoCDSpecControllerResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArgoCDSpecControllerResourcesLimits {
		return vs[0].(map[string]ArgoCDSpecControllerResourcesLimits)[vs[1].(string)]
	}).(ArgoCDSpecControllerResourcesLimitsOutput)
}

type ArgoCDSpecControllerResourcesRequests struct {
}

// ArgoCDSpecControllerResourcesRequestsInput is an input type that accepts ArgoCDSpecControllerResourcesRequestsArgs and ArgoCDSpecControllerResourcesRequestsOutput values.
// You can construct a concrete instance of `ArgoCDSpecControllerResourcesRequestsInput` via:
//
//          ArgoCDSpecControllerResourcesRequestsArgs{...}
type ArgoCDSpecControllerResourcesRequestsInput interface {
	pulumi.Input

	ToArgoCDSpecControllerResourcesRequestsOutput() ArgoCDSpecControllerResourcesRequestsOutput
	ToArgoCDSpecControllerResourcesRequestsOutputWithContext(context.Context) ArgoCDSpecControllerResourcesRequestsOutput
}

type ArgoCDSpecControllerResourcesRequestsArgs struct {
}

func (ArgoCDSpecControllerResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecControllerResourcesRequests)(nil)).Elem()
}

func (i ArgoCDSpecControllerResourcesRequestsArgs) ToArgoCDSpecControllerResourcesRequestsOutput() ArgoCDSpecControllerResourcesRequestsOutput {
	return i.ToArgoCDSpecControllerResourcesRequestsOutputWithContext(context.Background())
}

func (i ArgoCDSpecControllerResourcesRequestsArgs) ToArgoCDSpecControllerResourcesRequestsOutputWithContext(ctx context.Context) ArgoCDSpecControllerResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecControllerResourcesRequestsOutput)
}

// ArgoCDSpecControllerResourcesRequestsMapInput is an input type that accepts ArgoCDSpecControllerResourcesRequestsMap and ArgoCDSpecControllerResourcesRequestsMapOutput values.
// You can construct a concrete instance of `ArgoCDSpecControllerResourcesRequestsMapInput` via:
//
//          ArgoCDSpecControllerResourcesRequestsMap{ "key": ArgoCDSpecControllerResourcesRequestsArgs{...} }
type ArgoCDSpecControllerResourcesRequestsMapInput interface {
	pulumi.Input

	ToArgoCDSpecControllerResourcesRequestsMapOutput() ArgoCDSpecControllerResourcesRequestsMapOutput
	ToArgoCDSpecControllerResourcesRequestsMapOutputWithContext(context.Context) ArgoCDSpecControllerResourcesRequestsMapOutput
}

type ArgoCDSpecControllerResourcesRequestsMap map[string]ArgoCDSpecControllerResourcesRequestsInput

func (ArgoCDSpecControllerResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecControllerResourcesRequests)(nil)).Elem()
}

func (i ArgoCDSpecControllerResourcesRequestsMap) ToArgoCDSpecControllerResourcesRequestsMapOutput() ArgoCDSpecControllerResourcesRequestsMapOutput {
	return i.ToArgoCDSpecControllerResourcesRequestsMapOutputWithContext(context.Background())
}

func (i ArgoCDSpecControllerResourcesRequestsMap) ToArgoCDSpecControllerResourcesRequestsMapOutputWithContext(ctx context.Context) ArgoCDSpecControllerResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecControllerResourcesRequestsMapOutput)
}

type ArgoCDSpecControllerResourcesRequestsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecControllerResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecControllerResourcesRequests)(nil)).Elem()
}

func (o ArgoCDSpecControllerResourcesRequestsOutput) ToArgoCDSpecControllerResourcesRequestsOutput() ArgoCDSpecControllerResourcesRequestsOutput {
	return o
}

func (o ArgoCDSpecControllerResourcesRequestsOutput) ToArgoCDSpecControllerResourcesRequestsOutputWithContext(ctx context.Context) ArgoCDSpecControllerResourcesRequestsOutput {
	return o
}

type ArgoCDSpecControllerResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecControllerResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecControllerResourcesRequests)(nil)).Elem()
}

func (o ArgoCDSpecControllerResourcesRequestsMapOutput) ToArgoCDSpecControllerResourcesRequestsMapOutput() ArgoCDSpecControllerResourcesRequestsMapOutput {
	return o
}

func (o ArgoCDSpecControllerResourcesRequestsMapOutput) ToArgoCDSpecControllerResourcesRequestsMapOutputWithContext(ctx context.Context) ArgoCDSpecControllerResourcesRequestsMapOutput {
	return o
}

func (o ArgoCDSpecControllerResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) ArgoCDSpecControllerResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArgoCDSpecControllerResourcesRequests {
		return vs[0].(map[string]ArgoCDSpecControllerResourcesRequests)[vs[1].(string)]
	}).(ArgoCDSpecControllerResourcesRequestsOutput)
}

// Dex defines the Dex server options for ArgoCD.
type ArgoCDSpecDex struct {
	// Config is the dex connector configuration.
	Config *string `pulumi:"config"`
	// Image is the Dex container image.
	Image *string `pulumi:"image"`
	// OpenShiftOAuth enables OpenShift OAuth authentication for the Dex server.
	OpenShiftOAuth *bool `pulumi:"openShiftOAuth"`
	// Resources defines the Compute Resources required by the container for Dex.
	Resources *ArgoCDSpecDexResources `pulumi:"resources"`
	// Version is the Dex container image tag.
	Version *string `pulumi:"version"`
}

// ArgoCDSpecDexInput is an input type that accepts ArgoCDSpecDexArgs and ArgoCDSpecDexOutput values.
// You can construct a concrete instance of `ArgoCDSpecDexInput` via:
//
//          ArgoCDSpecDexArgs{...}
type ArgoCDSpecDexInput interface {
	pulumi.Input

	ToArgoCDSpecDexOutput() ArgoCDSpecDexOutput
	ToArgoCDSpecDexOutputWithContext(context.Context) ArgoCDSpecDexOutput
}

// Dex defines the Dex server options for ArgoCD.
type ArgoCDSpecDexArgs struct {
	// Config is the dex connector configuration.
	Config pulumi.StringPtrInput `pulumi:"config"`
	// Image is the Dex container image.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// OpenShiftOAuth enables OpenShift OAuth authentication for the Dex server.
	OpenShiftOAuth pulumi.BoolPtrInput `pulumi:"openShiftOAuth"`
	// Resources defines the Compute Resources required by the container for Dex.
	Resources ArgoCDSpecDexResourcesPtrInput `pulumi:"resources"`
	// Version is the Dex container image tag.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ArgoCDSpecDexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecDex)(nil)).Elem()
}

func (i ArgoCDSpecDexArgs) ToArgoCDSpecDexOutput() ArgoCDSpecDexOutput {
	return i.ToArgoCDSpecDexOutputWithContext(context.Background())
}

func (i ArgoCDSpecDexArgs) ToArgoCDSpecDexOutputWithContext(ctx context.Context) ArgoCDSpecDexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecDexOutput)
}

func (i ArgoCDSpecDexArgs) ToArgoCDSpecDexPtrOutput() ArgoCDSpecDexPtrOutput {
	return i.ToArgoCDSpecDexPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecDexArgs) ToArgoCDSpecDexPtrOutputWithContext(ctx context.Context) ArgoCDSpecDexPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecDexOutput).ToArgoCDSpecDexPtrOutputWithContext(ctx)
}

// ArgoCDSpecDexPtrInput is an input type that accepts ArgoCDSpecDexArgs, ArgoCDSpecDexPtr and ArgoCDSpecDexPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecDexPtrInput` via:
//
//          ArgoCDSpecDexArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecDexPtrInput interface {
	pulumi.Input

	ToArgoCDSpecDexPtrOutput() ArgoCDSpecDexPtrOutput
	ToArgoCDSpecDexPtrOutputWithContext(context.Context) ArgoCDSpecDexPtrOutput
}

type argoCDSpecDexPtrType ArgoCDSpecDexArgs

func ArgoCDSpecDexPtr(v *ArgoCDSpecDexArgs) ArgoCDSpecDexPtrInput {
	return (*argoCDSpecDexPtrType)(v)
}

func (*argoCDSpecDexPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecDex)(nil)).Elem()
}

func (i *argoCDSpecDexPtrType) ToArgoCDSpecDexPtrOutput() ArgoCDSpecDexPtrOutput {
	return i.ToArgoCDSpecDexPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecDexPtrType) ToArgoCDSpecDexPtrOutputWithContext(ctx context.Context) ArgoCDSpecDexPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecDexPtrOutput)
}

// Dex defines the Dex server options for ArgoCD.
type ArgoCDSpecDexOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecDexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecDex)(nil)).Elem()
}

func (o ArgoCDSpecDexOutput) ToArgoCDSpecDexOutput() ArgoCDSpecDexOutput {
	return o
}

func (o ArgoCDSpecDexOutput) ToArgoCDSpecDexOutputWithContext(ctx context.Context) ArgoCDSpecDexOutput {
	return o
}

func (o ArgoCDSpecDexOutput) ToArgoCDSpecDexPtrOutput() ArgoCDSpecDexPtrOutput {
	return o.ToArgoCDSpecDexPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecDexOutput) ToArgoCDSpecDexPtrOutputWithContext(ctx context.Context) ArgoCDSpecDexPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecDex) *ArgoCDSpecDex {
		return &v
	}).(ArgoCDSpecDexPtrOutput)
}

// Config is the dex connector configuration.
func (o ArgoCDSpecDexOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecDex) *string { return v.Config }).(pulumi.StringPtrOutput)
}

// Image is the Dex container image.
func (o ArgoCDSpecDexOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecDex) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// OpenShiftOAuth enables OpenShift OAuth authentication for the Dex server.
func (o ArgoCDSpecDexOutput) OpenShiftOAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecDex) *bool { return v.OpenShiftOAuth }).(pulumi.BoolPtrOutput)
}

// Resources defines the Compute Resources required by the container for Dex.
func (o ArgoCDSpecDexOutput) Resources() ArgoCDSpecDexResourcesPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecDex) *ArgoCDSpecDexResources { return v.Resources }).(ArgoCDSpecDexResourcesPtrOutput)
}

// Version is the Dex container image tag.
func (o ArgoCDSpecDexOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecDex) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecDexPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecDexPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecDex)(nil)).Elem()
}

func (o ArgoCDSpecDexPtrOutput) ToArgoCDSpecDexPtrOutput() ArgoCDSpecDexPtrOutput {
	return o
}

func (o ArgoCDSpecDexPtrOutput) ToArgoCDSpecDexPtrOutputWithContext(ctx context.Context) ArgoCDSpecDexPtrOutput {
	return o
}

func (o ArgoCDSpecDexPtrOutput) Elem() ArgoCDSpecDexOutput {
	return o.ApplyT(func(v *ArgoCDSpecDex) ArgoCDSpecDex { return *v }).(ArgoCDSpecDexOutput)
}

// Config is the dex connector configuration.
func (o ArgoCDSpecDexPtrOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecDex) *string {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.StringPtrOutput)
}

// Image is the Dex container image.
func (o ArgoCDSpecDexPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecDex) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// OpenShiftOAuth enables OpenShift OAuth authentication for the Dex server.
func (o ArgoCDSpecDexPtrOutput) OpenShiftOAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecDex) *bool {
		if v == nil {
			return nil
		}
		return v.OpenShiftOAuth
	}).(pulumi.BoolPtrOutput)
}

// Resources defines the Compute Resources required by the container for Dex.
func (o ArgoCDSpecDexPtrOutput) Resources() ArgoCDSpecDexResourcesPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecDex) *ArgoCDSpecDexResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ArgoCDSpecDexResourcesPtrOutput)
}

// Version is the Dex container image tag.
func (o ArgoCDSpecDexPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecDex) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Resources defines the Compute Resources required by the container for Dex.
type ArgoCDSpecDexResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]ArgoCDSpecDexResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]ArgoCDSpecDexResourcesRequests `pulumi:"requests"`
}

// ArgoCDSpecDexResourcesInput is an input type that accepts ArgoCDSpecDexResourcesArgs and ArgoCDSpecDexResourcesOutput values.
// You can construct a concrete instance of `ArgoCDSpecDexResourcesInput` via:
//
//          ArgoCDSpecDexResourcesArgs{...}
type ArgoCDSpecDexResourcesInput interface {
	pulumi.Input

	ToArgoCDSpecDexResourcesOutput() ArgoCDSpecDexResourcesOutput
	ToArgoCDSpecDexResourcesOutputWithContext(context.Context) ArgoCDSpecDexResourcesOutput
}

// Resources defines the Compute Resources required by the container for Dex.
type ArgoCDSpecDexResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits ArgoCDSpecDexResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests ArgoCDSpecDexResourcesRequestsMapInput `pulumi:"requests"`
}

func (ArgoCDSpecDexResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecDexResources)(nil)).Elem()
}

func (i ArgoCDSpecDexResourcesArgs) ToArgoCDSpecDexResourcesOutput() ArgoCDSpecDexResourcesOutput {
	return i.ToArgoCDSpecDexResourcesOutputWithContext(context.Background())
}

func (i ArgoCDSpecDexResourcesArgs) ToArgoCDSpecDexResourcesOutputWithContext(ctx context.Context) ArgoCDSpecDexResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecDexResourcesOutput)
}

func (i ArgoCDSpecDexResourcesArgs) ToArgoCDSpecDexResourcesPtrOutput() ArgoCDSpecDexResourcesPtrOutput {
	return i.ToArgoCDSpecDexResourcesPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecDexResourcesArgs) ToArgoCDSpecDexResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecDexResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecDexResourcesOutput).ToArgoCDSpecDexResourcesPtrOutputWithContext(ctx)
}

// ArgoCDSpecDexResourcesPtrInput is an input type that accepts ArgoCDSpecDexResourcesArgs, ArgoCDSpecDexResourcesPtr and ArgoCDSpecDexResourcesPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecDexResourcesPtrInput` via:
//
//          ArgoCDSpecDexResourcesArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecDexResourcesPtrInput interface {
	pulumi.Input

	ToArgoCDSpecDexResourcesPtrOutput() ArgoCDSpecDexResourcesPtrOutput
	ToArgoCDSpecDexResourcesPtrOutputWithContext(context.Context) ArgoCDSpecDexResourcesPtrOutput
}

type argoCDSpecDexResourcesPtrType ArgoCDSpecDexResourcesArgs

func ArgoCDSpecDexResourcesPtr(v *ArgoCDSpecDexResourcesArgs) ArgoCDSpecDexResourcesPtrInput {
	return (*argoCDSpecDexResourcesPtrType)(v)
}

func (*argoCDSpecDexResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecDexResources)(nil)).Elem()
}

func (i *argoCDSpecDexResourcesPtrType) ToArgoCDSpecDexResourcesPtrOutput() ArgoCDSpecDexResourcesPtrOutput {
	return i.ToArgoCDSpecDexResourcesPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecDexResourcesPtrType) ToArgoCDSpecDexResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecDexResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecDexResourcesPtrOutput)
}

// Resources defines the Compute Resources required by the container for Dex.
type ArgoCDSpecDexResourcesOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecDexResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecDexResources)(nil)).Elem()
}

func (o ArgoCDSpecDexResourcesOutput) ToArgoCDSpecDexResourcesOutput() ArgoCDSpecDexResourcesOutput {
	return o
}

func (o ArgoCDSpecDexResourcesOutput) ToArgoCDSpecDexResourcesOutputWithContext(ctx context.Context) ArgoCDSpecDexResourcesOutput {
	return o
}

func (o ArgoCDSpecDexResourcesOutput) ToArgoCDSpecDexResourcesPtrOutput() ArgoCDSpecDexResourcesPtrOutput {
	return o.ToArgoCDSpecDexResourcesPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecDexResourcesOutput) ToArgoCDSpecDexResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecDexResourcesPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecDexResources) *ArgoCDSpecDexResources {
		return &v
	}).(ArgoCDSpecDexResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecDexResourcesOutput) Limits() ArgoCDSpecDexResourcesLimitsMapOutput {
	return o.ApplyT(func(v ArgoCDSpecDexResources) map[string]ArgoCDSpecDexResourcesLimits { return v.Limits }).(ArgoCDSpecDexResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecDexResourcesOutput) Requests() ArgoCDSpecDexResourcesRequestsMapOutput {
	return o.ApplyT(func(v ArgoCDSpecDexResources) map[string]ArgoCDSpecDexResourcesRequests { return v.Requests }).(ArgoCDSpecDexResourcesRequestsMapOutput)
}

type ArgoCDSpecDexResourcesPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecDexResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecDexResources)(nil)).Elem()
}

func (o ArgoCDSpecDexResourcesPtrOutput) ToArgoCDSpecDexResourcesPtrOutput() ArgoCDSpecDexResourcesPtrOutput {
	return o
}

func (o ArgoCDSpecDexResourcesPtrOutput) ToArgoCDSpecDexResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecDexResourcesPtrOutput {
	return o
}

func (o ArgoCDSpecDexResourcesPtrOutput) Elem() ArgoCDSpecDexResourcesOutput {
	return o.ApplyT(func(v *ArgoCDSpecDexResources) ArgoCDSpecDexResources { return *v }).(ArgoCDSpecDexResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecDexResourcesPtrOutput) Limits() ArgoCDSpecDexResourcesLimitsMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecDexResources) map[string]ArgoCDSpecDexResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(ArgoCDSpecDexResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecDexResourcesPtrOutput) Requests() ArgoCDSpecDexResourcesRequestsMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecDexResources) map[string]ArgoCDSpecDexResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(ArgoCDSpecDexResourcesRequestsMapOutput)
}

type ArgoCDSpecDexResourcesLimits struct {
}

// ArgoCDSpecDexResourcesLimitsInput is an input type that accepts ArgoCDSpecDexResourcesLimitsArgs and ArgoCDSpecDexResourcesLimitsOutput values.
// You can construct a concrete instance of `ArgoCDSpecDexResourcesLimitsInput` via:
//
//          ArgoCDSpecDexResourcesLimitsArgs{...}
type ArgoCDSpecDexResourcesLimitsInput interface {
	pulumi.Input

	ToArgoCDSpecDexResourcesLimitsOutput() ArgoCDSpecDexResourcesLimitsOutput
	ToArgoCDSpecDexResourcesLimitsOutputWithContext(context.Context) ArgoCDSpecDexResourcesLimitsOutput
}

type ArgoCDSpecDexResourcesLimitsArgs struct {
}

func (ArgoCDSpecDexResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecDexResourcesLimits)(nil)).Elem()
}

func (i ArgoCDSpecDexResourcesLimitsArgs) ToArgoCDSpecDexResourcesLimitsOutput() ArgoCDSpecDexResourcesLimitsOutput {
	return i.ToArgoCDSpecDexResourcesLimitsOutputWithContext(context.Background())
}

func (i ArgoCDSpecDexResourcesLimitsArgs) ToArgoCDSpecDexResourcesLimitsOutputWithContext(ctx context.Context) ArgoCDSpecDexResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecDexResourcesLimitsOutput)
}

// ArgoCDSpecDexResourcesLimitsMapInput is an input type that accepts ArgoCDSpecDexResourcesLimitsMap and ArgoCDSpecDexResourcesLimitsMapOutput values.
// You can construct a concrete instance of `ArgoCDSpecDexResourcesLimitsMapInput` via:
//
//          ArgoCDSpecDexResourcesLimitsMap{ "key": ArgoCDSpecDexResourcesLimitsArgs{...} }
type ArgoCDSpecDexResourcesLimitsMapInput interface {
	pulumi.Input

	ToArgoCDSpecDexResourcesLimitsMapOutput() ArgoCDSpecDexResourcesLimitsMapOutput
	ToArgoCDSpecDexResourcesLimitsMapOutputWithContext(context.Context) ArgoCDSpecDexResourcesLimitsMapOutput
}

type ArgoCDSpecDexResourcesLimitsMap map[string]ArgoCDSpecDexResourcesLimitsInput

func (ArgoCDSpecDexResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecDexResourcesLimits)(nil)).Elem()
}

func (i ArgoCDSpecDexResourcesLimitsMap) ToArgoCDSpecDexResourcesLimitsMapOutput() ArgoCDSpecDexResourcesLimitsMapOutput {
	return i.ToArgoCDSpecDexResourcesLimitsMapOutputWithContext(context.Background())
}

func (i ArgoCDSpecDexResourcesLimitsMap) ToArgoCDSpecDexResourcesLimitsMapOutputWithContext(ctx context.Context) ArgoCDSpecDexResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecDexResourcesLimitsMapOutput)
}

type ArgoCDSpecDexResourcesLimitsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecDexResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecDexResourcesLimits)(nil)).Elem()
}

func (o ArgoCDSpecDexResourcesLimitsOutput) ToArgoCDSpecDexResourcesLimitsOutput() ArgoCDSpecDexResourcesLimitsOutput {
	return o
}

func (o ArgoCDSpecDexResourcesLimitsOutput) ToArgoCDSpecDexResourcesLimitsOutputWithContext(ctx context.Context) ArgoCDSpecDexResourcesLimitsOutput {
	return o
}

type ArgoCDSpecDexResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecDexResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecDexResourcesLimits)(nil)).Elem()
}

func (o ArgoCDSpecDexResourcesLimitsMapOutput) ToArgoCDSpecDexResourcesLimitsMapOutput() ArgoCDSpecDexResourcesLimitsMapOutput {
	return o
}

func (o ArgoCDSpecDexResourcesLimitsMapOutput) ToArgoCDSpecDexResourcesLimitsMapOutputWithContext(ctx context.Context) ArgoCDSpecDexResourcesLimitsMapOutput {
	return o
}

func (o ArgoCDSpecDexResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) ArgoCDSpecDexResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArgoCDSpecDexResourcesLimits {
		return vs[0].(map[string]ArgoCDSpecDexResourcesLimits)[vs[1].(string)]
	}).(ArgoCDSpecDexResourcesLimitsOutput)
}

type ArgoCDSpecDexResourcesRequests struct {
}

// ArgoCDSpecDexResourcesRequestsInput is an input type that accepts ArgoCDSpecDexResourcesRequestsArgs and ArgoCDSpecDexResourcesRequestsOutput values.
// You can construct a concrete instance of `ArgoCDSpecDexResourcesRequestsInput` via:
//
//          ArgoCDSpecDexResourcesRequestsArgs{...}
type ArgoCDSpecDexResourcesRequestsInput interface {
	pulumi.Input

	ToArgoCDSpecDexResourcesRequestsOutput() ArgoCDSpecDexResourcesRequestsOutput
	ToArgoCDSpecDexResourcesRequestsOutputWithContext(context.Context) ArgoCDSpecDexResourcesRequestsOutput
}

type ArgoCDSpecDexResourcesRequestsArgs struct {
}

func (ArgoCDSpecDexResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecDexResourcesRequests)(nil)).Elem()
}

func (i ArgoCDSpecDexResourcesRequestsArgs) ToArgoCDSpecDexResourcesRequestsOutput() ArgoCDSpecDexResourcesRequestsOutput {
	return i.ToArgoCDSpecDexResourcesRequestsOutputWithContext(context.Background())
}

func (i ArgoCDSpecDexResourcesRequestsArgs) ToArgoCDSpecDexResourcesRequestsOutputWithContext(ctx context.Context) ArgoCDSpecDexResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecDexResourcesRequestsOutput)
}

// ArgoCDSpecDexResourcesRequestsMapInput is an input type that accepts ArgoCDSpecDexResourcesRequestsMap and ArgoCDSpecDexResourcesRequestsMapOutput values.
// You can construct a concrete instance of `ArgoCDSpecDexResourcesRequestsMapInput` via:
//
//          ArgoCDSpecDexResourcesRequestsMap{ "key": ArgoCDSpecDexResourcesRequestsArgs{...} }
type ArgoCDSpecDexResourcesRequestsMapInput interface {
	pulumi.Input

	ToArgoCDSpecDexResourcesRequestsMapOutput() ArgoCDSpecDexResourcesRequestsMapOutput
	ToArgoCDSpecDexResourcesRequestsMapOutputWithContext(context.Context) ArgoCDSpecDexResourcesRequestsMapOutput
}

type ArgoCDSpecDexResourcesRequestsMap map[string]ArgoCDSpecDexResourcesRequestsInput

func (ArgoCDSpecDexResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecDexResourcesRequests)(nil)).Elem()
}

func (i ArgoCDSpecDexResourcesRequestsMap) ToArgoCDSpecDexResourcesRequestsMapOutput() ArgoCDSpecDexResourcesRequestsMapOutput {
	return i.ToArgoCDSpecDexResourcesRequestsMapOutputWithContext(context.Background())
}

func (i ArgoCDSpecDexResourcesRequestsMap) ToArgoCDSpecDexResourcesRequestsMapOutputWithContext(ctx context.Context) ArgoCDSpecDexResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecDexResourcesRequestsMapOutput)
}

type ArgoCDSpecDexResourcesRequestsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecDexResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecDexResourcesRequests)(nil)).Elem()
}

func (o ArgoCDSpecDexResourcesRequestsOutput) ToArgoCDSpecDexResourcesRequestsOutput() ArgoCDSpecDexResourcesRequestsOutput {
	return o
}

func (o ArgoCDSpecDexResourcesRequestsOutput) ToArgoCDSpecDexResourcesRequestsOutputWithContext(ctx context.Context) ArgoCDSpecDexResourcesRequestsOutput {
	return o
}

type ArgoCDSpecDexResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecDexResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecDexResourcesRequests)(nil)).Elem()
}

func (o ArgoCDSpecDexResourcesRequestsMapOutput) ToArgoCDSpecDexResourcesRequestsMapOutput() ArgoCDSpecDexResourcesRequestsMapOutput {
	return o
}

func (o ArgoCDSpecDexResourcesRequestsMapOutput) ToArgoCDSpecDexResourcesRequestsMapOutputWithContext(ctx context.Context) ArgoCDSpecDexResourcesRequestsMapOutput {
	return o
}

func (o ArgoCDSpecDexResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) ArgoCDSpecDexResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArgoCDSpecDexResourcesRequests {
		return vs[0].(map[string]ArgoCDSpecDexResourcesRequests)[vs[1].(string)]
	}).(ArgoCDSpecDexResourcesRequestsOutput)
}

// Grafana defines the Grafana server options for ArgoCD.
type ArgoCDSpecGrafana struct {
	// Enabled will toggle Grafana support globally for ArgoCD.
	Enabled bool `pulumi:"enabled"`
	// Host is the hostname to use for Ingress/Route resources.
	Host *string `pulumi:"host"`
	// Image is the Grafana container image.
	Image *string `pulumi:"image"`
	// Ingress defines the desired state for an Ingress for the Grafana component.
	Ingress *ArgoCDSpecGrafanaIngress `pulumi:"ingress"`
	// Resources defines the Compute Resources required by the container for Grafana.
	Resources *ArgoCDSpecGrafanaResources `pulumi:"resources"`
	// Route defines the desired state for an OpenShift Route for the Grafana component.
	Route *ArgoCDSpecGrafanaRoute `pulumi:"route"`
	// Size is the replica count for the Grafana Deployment.
	Size *int `pulumi:"size"`
	// Version is the Grafana container image tag.
	Version *string `pulumi:"version"`
}

// ArgoCDSpecGrafanaInput is an input type that accepts ArgoCDSpecGrafanaArgs and ArgoCDSpecGrafanaOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaInput` via:
//
//          ArgoCDSpecGrafanaArgs{...}
type ArgoCDSpecGrafanaInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaOutput() ArgoCDSpecGrafanaOutput
	ToArgoCDSpecGrafanaOutputWithContext(context.Context) ArgoCDSpecGrafanaOutput
}

// Grafana defines the Grafana server options for ArgoCD.
type ArgoCDSpecGrafanaArgs struct {
	// Enabled will toggle Grafana support globally for ArgoCD.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Host is the hostname to use for Ingress/Route resources.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Image is the Grafana container image.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Ingress defines the desired state for an Ingress for the Grafana component.
	Ingress ArgoCDSpecGrafanaIngressPtrInput `pulumi:"ingress"`
	// Resources defines the Compute Resources required by the container for Grafana.
	Resources ArgoCDSpecGrafanaResourcesPtrInput `pulumi:"resources"`
	// Route defines the desired state for an OpenShift Route for the Grafana component.
	Route ArgoCDSpecGrafanaRoutePtrInput `pulumi:"route"`
	// Size is the replica count for the Grafana Deployment.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// Version is the Grafana container image tag.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ArgoCDSpecGrafanaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafana)(nil)).Elem()
}

func (i ArgoCDSpecGrafanaArgs) ToArgoCDSpecGrafanaOutput() ArgoCDSpecGrafanaOutput {
	return i.ToArgoCDSpecGrafanaOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaArgs) ToArgoCDSpecGrafanaOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaOutput)
}

func (i ArgoCDSpecGrafanaArgs) ToArgoCDSpecGrafanaPtrOutput() ArgoCDSpecGrafanaPtrOutput {
	return i.ToArgoCDSpecGrafanaPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaArgs) ToArgoCDSpecGrafanaPtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaOutput).ToArgoCDSpecGrafanaPtrOutputWithContext(ctx)
}

// ArgoCDSpecGrafanaPtrInput is an input type that accepts ArgoCDSpecGrafanaArgs, ArgoCDSpecGrafanaPtr and ArgoCDSpecGrafanaPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaPtrInput` via:
//
//          ArgoCDSpecGrafanaArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecGrafanaPtrInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaPtrOutput() ArgoCDSpecGrafanaPtrOutput
	ToArgoCDSpecGrafanaPtrOutputWithContext(context.Context) ArgoCDSpecGrafanaPtrOutput
}

type argoCDSpecGrafanaPtrType ArgoCDSpecGrafanaArgs

func ArgoCDSpecGrafanaPtr(v *ArgoCDSpecGrafanaArgs) ArgoCDSpecGrafanaPtrInput {
	return (*argoCDSpecGrafanaPtrType)(v)
}

func (*argoCDSpecGrafanaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecGrafana)(nil)).Elem()
}

func (i *argoCDSpecGrafanaPtrType) ToArgoCDSpecGrafanaPtrOutput() ArgoCDSpecGrafanaPtrOutput {
	return i.ToArgoCDSpecGrafanaPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecGrafanaPtrType) ToArgoCDSpecGrafanaPtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaPtrOutput)
}

// Grafana defines the Grafana server options for ArgoCD.
type ArgoCDSpecGrafanaOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafana)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaOutput) ToArgoCDSpecGrafanaOutput() ArgoCDSpecGrafanaOutput {
	return o
}

func (o ArgoCDSpecGrafanaOutput) ToArgoCDSpecGrafanaOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaOutput {
	return o
}

func (o ArgoCDSpecGrafanaOutput) ToArgoCDSpecGrafanaPtrOutput() ArgoCDSpecGrafanaPtrOutput {
	return o.ToArgoCDSpecGrafanaPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecGrafanaOutput) ToArgoCDSpecGrafanaPtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafana) *ArgoCDSpecGrafana {
		return &v
	}).(ArgoCDSpecGrafanaPtrOutput)
}

// Enabled will toggle Grafana support globally for ArgoCD.
func (o ArgoCDSpecGrafanaOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafana) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Host is the hostname to use for Ingress/Route resources.
func (o ArgoCDSpecGrafanaOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafana) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Image is the Grafana container image.
func (o ArgoCDSpecGrafanaOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafana) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Ingress defines the desired state for an Ingress for the Grafana component.
func (o ArgoCDSpecGrafanaOutput) Ingress() ArgoCDSpecGrafanaIngressPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafana) *ArgoCDSpecGrafanaIngress { return v.Ingress }).(ArgoCDSpecGrafanaIngressPtrOutput)
}

// Resources defines the Compute Resources required by the container for Grafana.
func (o ArgoCDSpecGrafanaOutput) Resources() ArgoCDSpecGrafanaResourcesPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafana) *ArgoCDSpecGrafanaResources { return v.Resources }).(ArgoCDSpecGrafanaResourcesPtrOutput)
}

// Route defines the desired state for an OpenShift Route for the Grafana component.
func (o ArgoCDSpecGrafanaOutput) Route() ArgoCDSpecGrafanaRoutePtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafana) *ArgoCDSpecGrafanaRoute { return v.Route }).(ArgoCDSpecGrafanaRoutePtrOutput)
}

// Size is the replica count for the Grafana Deployment.
func (o ArgoCDSpecGrafanaOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafana) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// Version is the Grafana container image tag.
func (o ArgoCDSpecGrafanaOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafana) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecGrafanaPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecGrafana)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaPtrOutput) ToArgoCDSpecGrafanaPtrOutput() ArgoCDSpecGrafanaPtrOutput {
	return o
}

func (o ArgoCDSpecGrafanaPtrOutput) ToArgoCDSpecGrafanaPtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaPtrOutput {
	return o
}

func (o ArgoCDSpecGrafanaPtrOutput) Elem() ArgoCDSpecGrafanaOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafana) ArgoCDSpecGrafana { return *v }).(ArgoCDSpecGrafanaOutput)
}

// Enabled will toggle Grafana support globally for ArgoCD.
func (o ArgoCDSpecGrafanaPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafana) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Host is the hostname to use for Ingress/Route resources.
func (o ArgoCDSpecGrafanaPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafana) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Image is the Grafana container image.
func (o ArgoCDSpecGrafanaPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafana) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Ingress defines the desired state for an Ingress for the Grafana component.
func (o ArgoCDSpecGrafanaPtrOutput) Ingress() ArgoCDSpecGrafanaIngressPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafana) *ArgoCDSpecGrafanaIngress {
		if v == nil {
			return nil
		}
		return v.Ingress
	}).(ArgoCDSpecGrafanaIngressPtrOutput)
}

// Resources defines the Compute Resources required by the container for Grafana.
func (o ArgoCDSpecGrafanaPtrOutput) Resources() ArgoCDSpecGrafanaResourcesPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafana) *ArgoCDSpecGrafanaResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ArgoCDSpecGrafanaResourcesPtrOutput)
}

// Route defines the desired state for an OpenShift Route for the Grafana component.
func (o ArgoCDSpecGrafanaPtrOutput) Route() ArgoCDSpecGrafanaRoutePtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafana) *ArgoCDSpecGrafanaRoute {
		if v == nil {
			return nil
		}
		return v.Route
	}).(ArgoCDSpecGrafanaRoutePtrOutput)
}

// Size is the replica count for the Grafana Deployment.
func (o ArgoCDSpecGrafanaPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafana) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// Version is the Grafana container image tag.
func (o ArgoCDSpecGrafanaPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafana) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Ingress defines the desired state for an Ingress for the Grafana component.
type ArgoCDSpecGrafanaIngress struct {
	// Annotations is the map of annotations to apply to the Ingress.
	Annotations map[string]string `pulumi:"annotations"`
	// Enabled will toggle the creation of the Ingress.
	Enabled bool `pulumi:"enabled"`
	// Path used for the Ingress resource.
	Path *string `pulumi:"path"`
	// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
	Tls []ArgoCDSpecGrafanaIngressTls `pulumi:"tls"`
}

// ArgoCDSpecGrafanaIngressInput is an input type that accepts ArgoCDSpecGrafanaIngressArgs and ArgoCDSpecGrafanaIngressOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaIngressInput` via:
//
//          ArgoCDSpecGrafanaIngressArgs{...}
type ArgoCDSpecGrafanaIngressInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaIngressOutput() ArgoCDSpecGrafanaIngressOutput
	ToArgoCDSpecGrafanaIngressOutputWithContext(context.Context) ArgoCDSpecGrafanaIngressOutput
}

// Ingress defines the desired state for an Ingress for the Grafana component.
type ArgoCDSpecGrafanaIngressArgs struct {
	// Annotations is the map of annotations to apply to the Ingress.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Enabled will toggle the creation of the Ingress.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Path used for the Ingress resource.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
	Tls ArgoCDSpecGrafanaIngressTlsArrayInput `pulumi:"tls"`
}

func (ArgoCDSpecGrafanaIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaIngress)(nil)).Elem()
}

func (i ArgoCDSpecGrafanaIngressArgs) ToArgoCDSpecGrafanaIngressOutput() ArgoCDSpecGrafanaIngressOutput {
	return i.ToArgoCDSpecGrafanaIngressOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaIngressArgs) ToArgoCDSpecGrafanaIngressOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaIngressOutput)
}

func (i ArgoCDSpecGrafanaIngressArgs) ToArgoCDSpecGrafanaIngressPtrOutput() ArgoCDSpecGrafanaIngressPtrOutput {
	return i.ToArgoCDSpecGrafanaIngressPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaIngressArgs) ToArgoCDSpecGrafanaIngressPtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaIngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaIngressOutput).ToArgoCDSpecGrafanaIngressPtrOutputWithContext(ctx)
}

// ArgoCDSpecGrafanaIngressPtrInput is an input type that accepts ArgoCDSpecGrafanaIngressArgs, ArgoCDSpecGrafanaIngressPtr and ArgoCDSpecGrafanaIngressPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaIngressPtrInput` via:
//
//          ArgoCDSpecGrafanaIngressArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecGrafanaIngressPtrInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaIngressPtrOutput() ArgoCDSpecGrafanaIngressPtrOutput
	ToArgoCDSpecGrafanaIngressPtrOutputWithContext(context.Context) ArgoCDSpecGrafanaIngressPtrOutput
}

type argoCDSpecGrafanaIngressPtrType ArgoCDSpecGrafanaIngressArgs

func ArgoCDSpecGrafanaIngressPtr(v *ArgoCDSpecGrafanaIngressArgs) ArgoCDSpecGrafanaIngressPtrInput {
	return (*argoCDSpecGrafanaIngressPtrType)(v)
}

func (*argoCDSpecGrafanaIngressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecGrafanaIngress)(nil)).Elem()
}

func (i *argoCDSpecGrafanaIngressPtrType) ToArgoCDSpecGrafanaIngressPtrOutput() ArgoCDSpecGrafanaIngressPtrOutput {
	return i.ToArgoCDSpecGrafanaIngressPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecGrafanaIngressPtrType) ToArgoCDSpecGrafanaIngressPtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaIngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaIngressPtrOutput)
}

// Ingress defines the desired state for an Ingress for the Grafana component.
type ArgoCDSpecGrafanaIngressOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaIngress)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaIngressOutput) ToArgoCDSpecGrafanaIngressOutput() ArgoCDSpecGrafanaIngressOutput {
	return o
}

func (o ArgoCDSpecGrafanaIngressOutput) ToArgoCDSpecGrafanaIngressOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaIngressOutput {
	return o
}

func (o ArgoCDSpecGrafanaIngressOutput) ToArgoCDSpecGrafanaIngressPtrOutput() ArgoCDSpecGrafanaIngressPtrOutput {
	return o.ToArgoCDSpecGrafanaIngressPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecGrafanaIngressOutput) ToArgoCDSpecGrafanaIngressPtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaIngressPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaIngress) *ArgoCDSpecGrafanaIngress {
		return &v
	}).(ArgoCDSpecGrafanaIngressPtrOutput)
}

// Annotations is the map of annotations to apply to the Ingress.
func (o ArgoCDSpecGrafanaIngressOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaIngress) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Enabled will toggle the creation of the Ingress.
func (o ArgoCDSpecGrafanaIngressOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaIngress) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Path used for the Ingress resource.
func (o ArgoCDSpecGrafanaIngressOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaIngress) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
func (o ArgoCDSpecGrafanaIngressOutput) Tls() ArgoCDSpecGrafanaIngressTlsArrayOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaIngress) []ArgoCDSpecGrafanaIngressTls { return v.Tls }).(ArgoCDSpecGrafanaIngressTlsArrayOutput)
}

type ArgoCDSpecGrafanaIngressPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaIngressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecGrafanaIngress)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaIngressPtrOutput) ToArgoCDSpecGrafanaIngressPtrOutput() ArgoCDSpecGrafanaIngressPtrOutput {
	return o
}

func (o ArgoCDSpecGrafanaIngressPtrOutput) ToArgoCDSpecGrafanaIngressPtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaIngressPtrOutput {
	return o
}

func (o ArgoCDSpecGrafanaIngressPtrOutput) Elem() ArgoCDSpecGrafanaIngressOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaIngress) ArgoCDSpecGrafanaIngress { return *v }).(ArgoCDSpecGrafanaIngressOutput)
}

// Annotations is the map of annotations to apply to the Ingress.
func (o ArgoCDSpecGrafanaIngressPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaIngress) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Enabled will toggle the creation of the Ingress.
func (o ArgoCDSpecGrafanaIngressPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaIngress) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Path used for the Ingress resource.
func (o ArgoCDSpecGrafanaIngressPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaIngress) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
func (o ArgoCDSpecGrafanaIngressPtrOutput) Tls() ArgoCDSpecGrafanaIngressTlsArrayOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaIngress) []ArgoCDSpecGrafanaIngressTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ArgoCDSpecGrafanaIngressTlsArrayOutput)
}

// Annotations is the map of annotations to apply to the Ingress.
type ArgoCDSpecGrafanaIngressAnnotations struct {
}

// ArgoCDSpecGrafanaIngressAnnotationsInput is an input type that accepts ArgoCDSpecGrafanaIngressAnnotationsArgs and ArgoCDSpecGrafanaIngressAnnotationsOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaIngressAnnotationsInput` via:
//
//          ArgoCDSpecGrafanaIngressAnnotationsArgs{...}
type ArgoCDSpecGrafanaIngressAnnotationsInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaIngressAnnotationsOutput() ArgoCDSpecGrafanaIngressAnnotationsOutput
	ToArgoCDSpecGrafanaIngressAnnotationsOutputWithContext(context.Context) ArgoCDSpecGrafanaIngressAnnotationsOutput
}

// Annotations is the map of annotations to apply to the Ingress.
type ArgoCDSpecGrafanaIngressAnnotationsArgs struct {
}

func (ArgoCDSpecGrafanaIngressAnnotationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaIngressAnnotations)(nil)).Elem()
}

func (i ArgoCDSpecGrafanaIngressAnnotationsArgs) ToArgoCDSpecGrafanaIngressAnnotationsOutput() ArgoCDSpecGrafanaIngressAnnotationsOutput {
	return i.ToArgoCDSpecGrafanaIngressAnnotationsOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaIngressAnnotationsArgs) ToArgoCDSpecGrafanaIngressAnnotationsOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaIngressAnnotationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaIngressAnnotationsOutput)
}

// Annotations is the map of annotations to apply to the Ingress.
type ArgoCDSpecGrafanaIngressAnnotationsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaIngressAnnotationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaIngressAnnotations)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaIngressAnnotationsOutput) ToArgoCDSpecGrafanaIngressAnnotationsOutput() ArgoCDSpecGrafanaIngressAnnotationsOutput {
	return o
}

func (o ArgoCDSpecGrafanaIngressAnnotationsOutput) ToArgoCDSpecGrafanaIngressAnnotationsOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaIngressAnnotationsOutput {
	return o
}

// IngressTLS describes the transport layer security associated with an Ingress.
type ArgoCDSpecGrafanaIngressTls struct {
	// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
	Hosts []string `pulumi:"hosts"`
	// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
	SecretName *string `pulumi:"secretName"`
}

// ArgoCDSpecGrafanaIngressTlsInput is an input type that accepts ArgoCDSpecGrafanaIngressTlsArgs and ArgoCDSpecGrafanaIngressTlsOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaIngressTlsInput` via:
//
//          ArgoCDSpecGrafanaIngressTlsArgs{...}
type ArgoCDSpecGrafanaIngressTlsInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaIngressTlsOutput() ArgoCDSpecGrafanaIngressTlsOutput
	ToArgoCDSpecGrafanaIngressTlsOutputWithContext(context.Context) ArgoCDSpecGrafanaIngressTlsOutput
}

// IngressTLS describes the transport layer security associated with an Ingress.
type ArgoCDSpecGrafanaIngressTlsArgs struct {
	// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ArgoCDSpecGrafanaIngressTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaIngressTls)(nil)).Elem()
}

func (i ArgoCDSpecGrafanaIngressTlsArgs) ToArgoCDSpecGrafanaIngressTlsOutput() ArgoCDSpecGrafanaIngressTlsOutput {
	return i.ToArgoCDSpecGrafanaIngressTlsOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaIngressTlsArgs) ToArgoCDSpecGrafanaIngressTlsOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaIngressTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaIngressTlsOutput)
}

// ArgoCDSpecGrafanaIngressTlsArrayInput is an input type that accepts ArgoCDSpecGrafanaIngressTlsArray and ArgoCDSpecGrafanaIngressTlsArrayOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaIngressTlsArrayInput` via:
//
//          ArgoCDSpecGrafanaIngressTlsArray{ ArgoCDSpecGrafanaIngressTlsArgs{...} }
type ArgoCDSpecGrafanaIngressTlsArrayInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaIngressTlsArrayOutput() ArgoCDSpecGrafanaIngressTlsArrayOutput
	ToArgoCDSpecGrafanaIngressTlsArrayOutputWithContext(context.Context) ArgoCDSpecGrafanaIngressTlsArrayOutput
}

type ArgoCDSpecGrafanaIngressTlsArray []ArgoCDSpecGrafanaIngressTlsInput

func (ArgoCDSpecGrafanaIngressTlsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArgoCDSpecGrafanaIngressTls)(nil)).Elem()
}

func (i ArgoCDSpecGrafanaIngressTlsArray) ToArgoCDSpecGrafanaIngressTlsArrayOutput() ArgoCDSpecGrafanaIngressTlsArrayOutput {
	return i.ToArgoCDSpecGrafanaIngressTlsArrayOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaIngressTlsArray) ToArgoCDSpecGrafanaIngressTlsArrayOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaIngressTlsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaIngressTlsArrayOutput)
}

// IngressTLS describes the transport layer security associated with an Ingress.
type ArgoCDSpecGrafanaIngressTlsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaIngressTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaIngressTls)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaIngressTlsOutput) ToArgoCDSpecGrafanaIngressTlsOutput() ArgoCDSpecGrafanaIngressTlsOutput {
	return o
}

func (o ArgoCDSpecGrafanaIngressTlsOutput) ToArgoCDSpecGrafanaIngressTlsOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaIngressTlsOutput {
	return o
}

// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
func (o ArgoCDSpecGrafanaIngressTlsOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaIngressTls) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
func (o ArgoCDSpecGrafanaIngressTlsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaIngressTls) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecGrafanaIngressTlsArrayOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaIngressTlsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArgoCDSpecGrafanaIngressTls)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaIngressTlsArrayOutput) ToArgoCDSpecGrafanaIngressTlsArrayOutput() ArgoCDSpecGrafanaIngressTlsArrayOutput {
	return o
}

func (o ArgoCDSpecGrafanaIngressTlsArrayOutput) ToArgoCDSpecGrafanaIngressTlsArrayOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaIngressTlsArrayOutput {
	return o
}

func (o ArgoCDSpecGrafanaIngressTlsArrayOutput) Index(i pulumi.IntInput) ArgoCDSpecGrafanaIngressTlsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArgoCDSpecGrafanaIngressTls {
		return vs[0].([]ArgoCDSpecGrafanaIngressTls)[vs[1].(int)]
	}).(ArgoCDSpecGrafanaIngressTlsOutput)
}

// Resources defines the Compute Resources required by the container for Grafana.
type ArgoCDSpecGrafanaResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]ArgoCDSpecGrafanaResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]ArgoCDSpecGrafanaResourcesRequests `pulumi:"requests"`
}

// ArgoCDSpecGrafanaResourcesInput is an input type that accepts ArgoCDSpecGrafanaResourcesArgs and ArgoCDSpecGrafanaResourcesOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaResourcesInput` via:
//
//          ArgoCDSpecGrafanaResourcesArgs{...}
type ArgoCDSpecGrafanaResourcesInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaResourcesOutput() ArgoCDSpecGrafanaResourcesOutput
	ToArgoCDSpecGrafanaResourcesOutputWithContext(context.Context) ArgoCDSpecGrafanaResourcesOutput
}

// Resources defines the Compute Resources required by the container for Grafana.
type ArgoCDSpecGrafanaResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits ArgoCDSpecGrafanaResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests ArgoCDSpecGrafanaResourcesRequestsMapInput `pulumi:"requests"`
}

func (ArgoCDSpecGrafanaResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaResources)(nil)).Elem()
}

func (i ArgoCDSpecGrafanaResourcesArgs) ToArgoCDSpecGrafanaResourcesOutput() ArgoCDSpecGrafanaResourcesOutput {
	return i.ToArgoCDSpecGrafanaResourcesOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaResourcesArgs) ToArgoCDSpecGrafanaResourcesOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaResourcesOutput)
}

func (i ArgoCDSpecGrafanaResourcesArgs) ToArgoCDSpecGrafanaResourcesPtrOutput() ArgoCDSpecGrafanaResourcesPtrOutput {
	return i.ToArgoCDSpecGrafanaResourcesPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaResourcesArgs) ToArgoCDSpecGrafanaResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaResourcesOutput).ToArgoCDSpecGrafanaResourcesPtrOutputWithContext(ctx)
}

// ArgoCDSpecGrafanaResourcesPtrInput is an input type that accepts ArgoCDSpecGrafanaResourcesArgs, ArgoCDSpecGrafanaResourcesPtr and ArgoCDSpecGrafanaResourcesPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaResourcesPtrInput` via:
//
//          ArgoCDSpecGrafanaResourcesArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecGrafanaResourcesPtrInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaResourcesPtrOutput() ArgoCDSpecGrafanaResourcesPtrOutput
	ToArgoCDSpecGrafanaResourcesPtrOutputWithContext(context.Context) ArgoCDSpecGrafanaResourcesPtrOutput
}

type argoCDSpecGrafanaResourcesPtrType ArgoCDSpecGrafanaResourcesArgs

func ArgoCDSpecGrafanaResourcesPtr(v *ArgoCDSpecGrafanaResourcesArgs) ArgoCDSpecGrafanaResourcesPtrInput {
	return (*argoCDSpecGrafanaResourcesPtrType)(v)
}

func (*argoCDSpecGrafanaResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecGrafanaResources)(nil)).Elem()
}

func (i *argoCDSpecGrafanaResourcesPtrType) ToArgoCDSpecGrafanaResourcesPtrOutput() ArgoCDSpecGrafanaResourcesPtrOutput {
	return i.ToArgoCDSpecGrafanaResourcesPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecGrafanaResourcesPtrType) ToArgoCDSpecGrafanaResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaResourcesPtrOutput)
}

// Resources defines the Compute Resources required by the container for Grafana.
type ArgoCDSpecGrafanaResourcesOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaResources)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaResourcesOutput) ToArgoCDSpecGrafanaResourcesOutput() ArgoCDSpecGrafanaResourcesOutput {
	return o
}

func (o ArgoCDSpecGrafanaResourcesOutput) ToArgoCDSpecGrafanaResourcesOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaResourcesOutput {
	return o
}

func (o ArgoCDSpecGrafanaResourcesOutput) ToArgoCDSpecGrafanaResourcesPtrOutput() ArgoCDSpecGrafanaResourcesPtrOutput {
	return o.ToArgoCDSpecGrafanaResourcesPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecGrafanaResourcesOutput) ToArgoCDSpecGrafanaResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaResourcesPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaResources) *ArgoCDSpecGrafanaResources {
		return &v
	}).(ArgoCDSpecGrafanaResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecGrafanaResourcesOutput) Limits() ArgoCDSpecGrafanaResourcesLimitsMapOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaResources) map[string]ArgoCDSpecGrafanaResourcesLimits { return v.Limits }).(ArgoCDSpecGrafanaResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecGrafanaResourcesOutput) Requests() ArgoCDSpecGrafanaResourcesRequestsMapOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaResources) map[string]ArgoCDSpecGrafanaResourcesRequests { return v.Requests }).(ArgoCDSpecGrafanaResourcesRequestsMapOutput)
}

type ArgoCDSpecGrafanaResourcesPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecGrafanaResources)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaResourcesPtrOutput) ToArgoCDSpecGrafanaResourcesPtrOutput() ArgoCDSpecGrafanaResourcesPtrOutput {
	return o
}

func (o ArgoCDSpecGrafanaResourcesPtrOutput) ToArgoCDSpecGrafanaResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaResourcesPtrOutput {
	return o
}

func (o ArgoCDSpecGrafanaResourcesPtrOutput) Elem() ArgoCDSpecGrafanaResourcesOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaResources) ArgoCDSpecGrafanaResources { return *v }).(ArgoCDSpecGrafanaResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecGrafanaResourcesPtrOutput) Limits() ArgoCDSpecGrafanaResourcesLimitsMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaResources) map[string]ArgoCDSpecGrafanaResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(ArgoCDSpecGrafanaResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecGrafanaResourcesPtrOutput) Requests() ArgoCDSpecGrafanaResourcesRequestsMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaResources) map[string]ArgoCDSpecGrafanaResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(ArgoCDSpecGrafanaResourcesRequestsMapOutput)
}

type ArgoCDSpecGrafanaResourcesLimits struct {
}

// ArgoCDSpecGrafanaResourcesLimitsInput is an input type that accepts ArgoCDSpecGrafanaResourcesLimitsArgs and ArgoCDSpecGrafanaResourcesLimitsOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaResourcesLimitsInput` via:
//
//          ArgoCDSpecGrafanaResourcesLimitsArgs{...}
type ArgoCDSpecGrafanaResourcesLimitsInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaResourcesLimitsOutput() ArgoCDSpecGrafanaResourcesLimitsOutput
	ToArgoCDSpecGrafanaResourcesLimitsOutputWithContext(context.Context) ArgoCDSpecGrafanaResourcesLimitsOutput
}

type ArgoCDSpecGrafanaResourcesLimitsArgs struct {
}

func (ArgoCDSpecGrafanaResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaResourcesLimits)(nil)).Elem()
}

func (i ArgoCDSpecGrafanaResourcesLimitsArgs) ToArgoCDSpecGrafanaResourcesLimitsOutput() ArgoCDSpecGrafanaResourcesLimitsOutput {
	return i.ToArgoCDSpecGrafanaResourcesLimitsOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaResourcesLimitsArgs) ToArgoCDSpecGrafanaResourcesLimitsOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaResourcesLimitsOutput)
}

// ArgoCDSpecGrafanaResourcesLimitsMapInput is an input type that accepts ArgoCDSpecGrafanaResourcesLimitsMap and ArgoCDSpecGrafanaResourcesLimitsMapOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaResourcesLimitsMapInput` via:
//
//          ArgoCDSpecGrafanaResourcesLimitsMap{ "key": ArgoCDSpecGrafanaResourcesLimitsArgs{...} }
type ArgoCDSpecGrafanaResourcesLimitsMapInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaResourcesLimitsMapOutput() ArgoCDSpecGrafanaResourcesLimitsMapOutput
	ToArgoCDSpecGrafanaResourcesLimitsMapOutputWithContext(context.Context) ArgoCDSpecGrafanaResourcesLimitsMapOutput
}

type ArgoCDSpecGrafanaResourcesLimitsMap map[string]ArgoCDSpecGrafanaResourcesLimitsInput

func (ArgoCDSpecGrafanaResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecGrafanaResourcesLimits)(nil)).Elem()
}

func (i ArgoCDSpecGrafanaResourcesLimitsMap) ToArgoCDSpecGrafanaResourcesLimitsMapOutput() ArgoCDSpecGrafanaResourcesLimitsMapOutput {
	return i.ToArgoCDSpecGrafanaResourcesLimitsMapOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaResourcesLimitsMap) ToArgoCDSpecGrafanaResourcesLimitsMapOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaResourcesLimitsMapOutput)
}

type ArgoCDSpecGrafanaResourcesLimitsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaResourcesLimits)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaResourcesLimitsOutput) ToArgoCDSpecGrafanaResourcesLimitsOutput() ArgoCDSpecGrafanaResourcesLimitsOutput {
	return o
}

func (o ArgoCDSpecGrafanaResourcesLimitsOutput) ToArgoCDSpecGrafanaResourcesLimitsOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaResourcesLimitsOutput {
	return o
}

type ArgoCDSpecGrafanaResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecGrafanaResourcesLimits)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaResourcesLimitsMapOutput) ToArgoCDSpecGrafanaResourcesLimitsMapOutput() ArgoCDSpecGrafanaResourcesLimitsMapOutput {
	return o
}

func (o ArgoCDSpecGrafanaResourcesLimitsMapOutput) ToArgoCDSpecGrafanaResourcesLimitsMapOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaResourcesLimitsMapOutput {
	return o
}

func (o ArgoCDSpecGrafanaResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) ArgoCDSpecGrafanaResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArgoCDSpecGrafanaResourcesLimits {
		return vs[0].(map[string]ArgoCDSpecGrafanaResourcesLimits)[vs[1].(string)]
	}).(ArgoCDSpecGrafanaResourcesLimitsOutput)
}

type ArgoCDSpecGrafanaResourcesRequests struct {
}

// ArgoCDSpecGrafanaResourcesRequestsInput is an input type that accepts ArgoCDSpecGrafanaResourcesRequestsArgs and ArgoCDSpecGrafanaResourcesRequestsOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaResourcesRequestsInput` via:
//
//          ArgoCDSpecGrafanaResourcesRequestsArgs{...}
type ArgoCDSpecGrafanaResourcesRequestsInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaResourcesRequestsOutput() ArgoCDSpecGrafanaResourcesRequestsOutput
	ToArgoCDSpecGrafanaResourcesRequestsOutputWithContext(context.Context) ArgoCDSpecGrafanaResourcesRequestsOutput
}

type ArgoCDSpecGrafanaResourcesRequestsArgs struct {
}

func (ArgoCDSpecGrafanaResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaResourcesRequests)(nil)).Elem()
}

func (i ArgoCDSpecGrafanaResourcesRequestsArgs) ToArgoCDSpecGrafanaResourcesRequestsOutput() ArgoCDSpecGrafanaResourcesRequestsOutput {
	return i.ToArgoCDSpecGrafanaResourcesRequestsOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaResourcesRequestsArgs) ToArgoCDSpecGrafanaResourcesRequestsOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaResourcesRequestsOutput)
}

// ArgoCDSpecGrafanaResourcesRequestsMapInput is an input type that accepts ArgoCDSpecGrafanaResourcesRequestsMap and ArgoCDSpecGrafanaResourcesRequestsMapOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaResourcesRequestsMapInput` via:
//
//          ArgoCDSpecGrafanaResourcesRequestsMap{ "key": ArgoCDSpecGrafanaResourcesRequestsArgs{...} }
type ArgoCDSpecGrafanaResourcesRequestsMapInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaResourcesRequestsMapOutput() ArgoCDSpecGrafanaResourcesRequestsMapOutput
	ToArgoCDSpecGrafanaResourcesRequestsMapOutputWithContext(context.Context) ArgoCDSpecGrafanaResourcesRequestsMapOutput
}

type ArgoCDSpecGrafanaResourcesRequestsMap map[string]ArgoCDSpecGrafanaResourcesRequestsInput

func (ArgoCDSpecGrafanaResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecGrafanaResourcesRequests)(nil)).Elem()
}

func (i ArgoCDSpecGrafanaResourcesRequestsMap) ToArgoCDSpecGrafanaResourcesRequestsMapOutput() ArgoCDSpecGrafanaResourcesRequestsMapOutput {
	return i.ToArgoCDSpecGrafanaResourcesRequestsMapOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaResourcesRequestsMap) ToArgoCDSpecGrafanaResourcesRequestsMapOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaResourcesRequestsMapOutput)
}

type ArgoCDSpecGrafanaResourcesRequestsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaResourcesRequests)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaResourcesRequestsOutput) ToArgoCDSpecGrafanaResourcesRequestsOutput() ArgoCDSpecGrafanaResourcesRequestsOutput {
	return o
}

func (o ArgoCDSpecGrafanaResourcesRequestsOutput) ToArgoCDSpecGrafanaResourcesRequestsOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaResourcesRequestsOutput {
	return o
}

type ArgoCDSpecGrafanaResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecGrafanaResourcesRequests)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaResourcesRequestsMapOutput) ToArgoCDSpecGrafanaResourcesRequestsMapOutput() ArgoCDSpecGrafanaResourcesRequestsMapOutput {
	return o
}

func (o ArgoCDSpecGrafanaResourcesRequestsMapOutput) ToArgoCDSpecGrafanaResourcesRequestsMapOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaResourcesRequestsMapOutput {
	return o
}

func (o ArgoCDSpecGrafanaResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) ArgoCDSpecGrafanaResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArgoCDSpecGrafanaResourcesRequests {
		return vs[0].(map[string]ArgoCDSpecGrafanaResourcesRequests)[vs[1].(string)]
	}).(ArgoCDSpecGrafanaResourcesRequestsOutput)
}

// Route defines the desired state for an OpenShift Route for the Grafana component.
type ArgoCDSpecGrafanaRoute struct {
	// Annotations is the map of annotations to use for the Route resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Enabled will toggle the creation of the OpenShift Route.
	Enabled bool `pulumi:"enabled"`
	// Path the router watches for, to route traffic for to the service.
	Path *string `pulumi:"path"`
	// TLS provides the ability to configure certificates and termination for the Route.
	Tls *ArgoCDSpecGrafanaRouteTls `pulumi:"tls"`
	// WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
	WildcardPolicy *string `pulumi:"wildcardPolicy"`
}

// ArgoCDSpecGrafanaRouteInput is an input type that accepts ArgoCDSpecGrafanaRouteArgs and ArgoCDSpecGrafanaRouteOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaRouteInput` via:
//
//          ArgoCDSpecGrafanaRouteArgs{...}
type ArgoCDSpecGrafanaRouteInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaRouteOutput() ArgoCDSpecGrafanaRouteOutput
	ToArgoCDSpecGrafanaRouteOutputWithContext(context.Context) ArgoCDSpecGrafanaRouteOutput
}

// Route defines the desired state for an OpenShift Route for the Grafana component.
type ArgoCDSpecGrafanaRouteArgs struct {
	// Annotations is the map of annotations to use for the Route resource.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Enabled will toggle the creation of the OpenShift Route.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Path the router watches for, to route traffic for to the service.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// TLS provides the ability to configure certificates and termination for the Route.
	Tls ArgoCDSpecGrafanaRouteTlsPtrInput `pulumi:"tls"`
	// WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
	WildcardPolicy pulumi.StringPtrInput `pulumi:"wildcardPolicy"`
}

func (ArgoCDSpecGrafanaRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaRoute)(nil)).Elem()
}

func (i ArgoCDSpecGrafanaRouteArgs) ToArgoCDSpecGrafanaRouteOutput() ArgoCDSpecGrafanaRouteOutput {
	return i.ToArgoCDSpecGrafanaRouteOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaRouteArgs) ToArgoCDSpecGrafanaRouteOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaRouteOutput)
}

func (i ArgoCDSpecGrafanaRouteArgs) ToArgoCDSpecGrafanaRoutePtrOutput() ArgoCDSpecGrafanaRoutePtrOutput {
	return i.ToArgoCDSpecGrafanaRoutePtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaRouteArgs) ToArgoCDSpecGrafanaRoutePtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaRouteOutput).ToArgoCDSpecGrafanaRoutePtrOutputWithContext(ctx)
}

// ArgoCDSpecGrafanaRoutePtrInput is an input type that accepts ArgoCDSpecGrafanaRouteArgs, ArgoCDSpecGrafanaRoutePtr and ArgoCDSpecGrafanaRoutePtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaRoutePtrInput` via:
//
//          ArgoCDSpecGrafanaRouteArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecGrafanaRoutePtrInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaRoutePtrOutput() ArgoCDSpecGrafanaRoutePtrOutput
	ToArgoCDSpecGrafanaRoutePtrOutputWithContext(context.Context) ArgoCDSpecGrafanaRoutePtrOutput
}

type argoCDSpecGrafanaRoutePtrType ArgoCDSpecGrafanaRouteArgs

func ArgoCDSpecGrafanaRoutePtr(v *ArgoCDSpecGrafanaRouteArgs) ArgoCDSpecGrafanaRoutePtrInput {
	return (*argoCDSpecGrafanaRoutePtrType)(v)
}

func (*argoCDSpecGrafanaRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecGrafanaRoute)(nil)).Elem()
}

func (i *argoCDSpecGrafanaRoutePtrType) ToArgoCDSpecGrafanaRoutePtrOutput() ArgoCDSpecGrafanaRoutePtrOutput {
	return i.ToArgoCDSpecGrafanaRoutePtrOutputWithContext(context.Background())
}

func (i *argoCDSpecGrafanaRoutePtrType) ToArgoCDSpecGrafanaRoutePtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaRoutePtrOutput)
}

// Route defines the desired state for an OpenShift Route for the Grafana component.
type ArgoCDSpecGrafanaRouteOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaRoute)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaRouteOutput) ToArgoCDSpecGrafanaRouteOutput() ArgoCDSpecGrafanaRouteOutput {
	return o
}

func (o ArgoCDSpecGrafanaRouteOutput) ToArgoCDSpecGrafanaRouteOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaRouteOutput {
	return o
}

func (o ArgoCDSpecGrafanaRouteOutput) ToArgoCDSpecGrafanaRoutePtrOutput() ArgoCDSpecGrafanaRoutePtrOutput {
	return o.ToArgoCDSpecGrafanaRoutePtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecGrafanaRouteOutput) ToArgoCDSpecGrafanaRoutePtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaRoutePtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaRoute) *ArgoCDSpecGrafanaRoute {
		return &v
	}).(ArgoCDSpecGrafanaRoutePtrOutput)
}

// Annotations is the map of annotations to use for the Route resource.
func (o ArgoCDSpecGrafanaRouteOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaRoute) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Enabled will toggle the creation of the OpenShift Route.
func (o ArgoCDSpecGrafanaRouteOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaRoute) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Path the router watches for, to route traffic for to the service.
func (o ArgoCDSpecGrafanaRouteOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaRoute) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// TLS provides the ability to configure certificates and termination for the Route.
func (o ArgoCDSpecGrafanaRouteOutput) Tls() ArgoCDSpecGrafanaRouteTlsPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaRoute) *ArgoCDSpecGrafanaRouteTls { return v.Tls }).(ArgoCDSpecGrafanaRouteTlsPtrOutput)
}

// WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
func (o ArgoCDSpecGrafanaRouteOutput) WildcardPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaRoute) *string { return v.WildcardPolicy }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecGrafanaRoutePtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecGrafanaRoute)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaRoutePtrOutput) ToArgoCDSpecGrafanaRoutePtrOutput() ArgoCDSpecGrafanaRoutePtrOutput {
	return o
}

func (o ArgoCDSpecGrafanaRoutePtrOutput) ToArgoCDSpecGrafanaRoutePtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaRoutePtrOutput {
	return o
}

func (o ArgoCDSpecGrafanaRoutePtrOutput) Elem() ArgoCDSpecGrafanaRouteOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaRoute) ArgoCDSpecGrafanaRoute { return *v }).(ArgoCDSpecGrafanaRouteOutput)
}

// Annotations is the map of annotations to use for the Route resource.
func (o ArgoCDSpecGrafanaRoutePtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaRoute) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Enabled will toggle the creation of the OpenShift Route.
func (o ArgoCDSpecGrafanaRoutePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaRoute) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Path the router watches for, to route traffic for to the service.
func (o ArgoCDSpecGrafanaRoutePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaRoute) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// TLS provides the ability to configure certificates and termination for the Route.
func (o ArgoCDSpecGrafanaRoutePtrOutput) Tls() ArgoCDSpecGrafanaRouteTlsPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaRoute) *ArgoCDSpecGrafanaRouteTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ArgoCDSpecGrafanaRouteTlsPtrOutput)
}

// WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
func (o ArgoCDSpecGrafanaRoutePtrOutput) WildcardPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaRoute) *string {
		if v == nil {
			return nil
		}
		return v.WildcardPolicy
	}).(pulumi.StringPtrOutput)
}

// Annotations is the map of annotations to use for the Route resource.
type ArgoCDSpecGrafanaRouteAnnotations struct {
}

// ArgoCDSpecGrafanaRouteAnnotationsInput is an input type that accepts ArgoCDSpecGrafanaRouteAnnotationsArgs and ArgoCDSpecGrafanaRouteAnnotationsOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaRouteAnnotationsInput` via:
//
//          ArgoCDSpecGrafanaRouteAnnotationsArgs{...}
type ArgoCDSpecGrafanaRouteAnnotationsInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaRouteAnnotationsOutput() ArgoCDSpecGrafanaRouteAnnotationsOutput
	ToArgoCDSpecGrafanaRouteAnnotationsOutputWithContext(context.Context) ArgoCDSpecGrafanaRouteAnnotationsOutput
}

// Annotations is the map of annotations to use for the Route resource.
type ArgoCDSpecGrafanaRouteAnnotationsArgs struct {
}

func (ArgoCDSpecGrafanaRouteAnnotationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaRouteAnnotations)(nil)).Elem()
}

func (i ArgoCDSpecGrafanaRouteAnnotationsArgs) ToArgoCDSpecGrafanaRouteAnnotationsOutput() ArgoCDSpecGrafanaRouteAnnotationsOutput {
	return i.ToArgoCDSpecGrafanaRouteAnnotationsOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaRouteAnnotationsArgs) ToArgoCDSpecGrafanaRouteAnnotationsOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaRouteAnnotationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaRouteAnnotationsOutput)
}

// Annotations is the map of annotations to use for the Route resource.
type ArgoCDSpecGrafanaRouteAnnotationsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaRouteAnnotationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaRouteAnnotations)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaRouteAnnotationsOutput) ToArgoCDSpecGrafanaRouteAnnotationsOutput() ArgoCDSpecGrafanaRouteAnnotationsOutput {
	return o
}

func (o ArgoCDSpecGrafanaRouteAnnotationsOutput) ToArgoCDSpecGrafanaRouteAnnotationsOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaRouteAnnotationsOutput {
	return o
}

// TLS provides the ability to configure certificates and termination for the Route.
type ArgoCDSpecGrafanaRouteTls struct {
	// caCertificate provides the cert authority certificate contents
	CaCertificate *string `pulumi:"caCertificate"`
	// certificate provides certificate contents
	Certificate *string `pulumi:"certificate"`
	// destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
	DestinationCACertificate *string `pulumi:"destinationCACertificate"`
	// insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.
	//  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
	InsecureEdgeTerminationPolicy *string `pulumi:"insecureEdgeTerminationPolicy"`
	// key provides key file contents
	Key *string `pulumi:"key"`
	// termination indicates termination type.
	Termination string `pulumi:"termination"`
}

// ArgoCDSpecGrafanaRouteTlsInput is an input type that accepts ArgoCDSpecGrafanaRouteTlsArgs and ArgoCDSpecGrafanaRouteTlsOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaRouteTlsInput` via:
//
//          ArgoCDSpecGrafanaRouteTlsArgs{...}
type ArgoCDSpecGrafanaRouteTlsInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaRouteTlsOutput() ArgoCDSpecGrafanaRouteTlsOutput
	ToArgoCDSpecGrafanaRouteTlsOutputWithContext(context.Context) ArgoCDSpecGrafanaRouteTlsOutput
}

// TLS provides the ability to configure certificates and termination for the Route.
type ArgoCDSpecGrafanaRouteTlsArgs struct {
	// caCertificate provides the cert authority certificate contents
	CaCertificate pulumi.StringPtrInput `pulumi:"caCertificate"`
	// certificate provides certificate contents
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
	DestinationCACertificate pulumi.StringPtrInput `pulumi:"destinationCACertificate"`
	// insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.
	//  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
	InsecureEdgeTerminationPolicy pulumi.StringPtrInput `pulumi:"insecureEdgeTerminationPolicy"`
	// key provides key file contents
	Key pulumi.StringPtrInput `pulumi:"key"`
	// termination indicates termination type.
	Termination pulumi.StringInput `pulumi:"termination"`
}

func (ArgoCDSpecGrafanaRouteTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaRouteTls)(nil)).Elem()
}

func (i ArgoCDSpecGrafanaRouteTlsArgs) ToArgoCDSpecGrafanaRouteTlsOutput() ArgoCDSpecGrafanaRouteTlsOutput {
	return i.ToArgoCDSpecGrafanaRouteTlsOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaRouteTlsArgs) ToArgoCDSpecGrafanaRouteTlsOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaRouteTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaRouteTlsOutput)
}

func (i ArgoCDSpecGrafanaRouteTlsArgs) ToArgoCDSpecGrafanaRouteTlsPtrOutput() ArgoCDSpecGrafanaRouteTlsPtrOutput {
	return i.ToArgoCDSpecGrafanaRouteTlsPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecGrafanaRouteTlsArgs) ToArgoCDSpecGrafanaRouteTlsPtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaRouteTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaRouteTlsOutput).ToArgoCDSpecGrafanaRouteTlsPtrOutputWithContext(ctx)
}

// ArgoCDSpecGrafanaRouteTlsPtrInput is an input type that accepts ArgoCDSpecGrafanaRouteTlsArgs, ArgoCDSpecGrafanaRouteTlsPtr and ArgoCDSpecGrafanaRouteTlsPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecGrafanaRouteTlsPtrInput` via:
//
//          ArgoCDSpecGrafanaRouteTlsArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecGrafanaRouteTlsPtrInput interface {
	pulumi.Input

	ToArgoCDSpecGrafanaRouteTlsPtrOutput() ArgoCDSpecGrafanaRouteTlsPtrOutput
	ToArgoCDSpecGrafanaRouteTlsPtrOutputWithContext(context.Context) ArgoCDSpecGrafanaRouteTlsPtrOutput
}

type argoCDSpecGrafanaRouteTlsPtrType ArgoCDSpecGrafanaRouteTlsArgs

func ArgoCDSpecGrafanaRouteTlsPtr(v *ArgoCDSpecGrafanaRouteTlsArgs) ArgoCDSpecGrafanaRouteTlsPtrInput {
	return (*argoCDSpecGrafanaRouteTlsPtrType)(v)
}

func (*argoCDSpecGrafanaRouteTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecGrafanaRouteTls)(nil)).Elem()
}

func (i *argoCDSpecGrafanaRouteTlsPtrType) ToArgoCDSpecGrafanaRouteTlsPtrOutput() ArgoCDSpecGrafanaRouteTlsPtrOutput {
	return i.ToArgoCDSpecGrafanaRouteTlsPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecGrafanaRouteTlsPtrType) ToArgoCDSpecGrafanaRouteTlsPtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaRouteTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecGrafanaRouteTlsPtrOutput)
}

// TLS provides the ability to configure certificates and termination for the Route.
type ArgoCDSpecGrafanaRouteTlsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaRouteTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecGrafanaRouteTls)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaRouteTlsOutput) ToArgoCDSpecGrafanaRouteTlsOutput() ArgoCDSpecGrafanaRouteTlsOutput {
	return o
}

func (o ArgoCDSpecGrafanaRouteTlsOutput) ToArgoCDSpecGrafanaRouteTlsOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaRouteTlsOutput {
	return o
}

func (o ArgoCDSpecGrafanaRouteTlsOutput) ToArgoCDSpecGrafanaRouteTlsPtrOutput() ArgoCDSpecGrafanaRouteTlsPtrOutput {
	return o.ToArgoCDSpecGrafanaRouteTlsPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecGrafanaRouteTlsOutput) ToArgoCDSpecGrafanaRouteTlsPtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaRouteTlsPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaRouteTls) *ArgoCDSpecGrafanaRouteTls {
		return &v
	}).(ArgoCDSpecGrafanaRouteTlsPtrOutput)
}

// caCertificate provides the cert authority certificate contents
func (o ArgoCDSpecGrafanaRouteTlsOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaRouteTls) *string { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

// certificate provides certificate contents
func (o ArgoCDSpecGrafanaRouteTlsOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaRouteTls) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
func (o ArgoCDSpecGrafanaRouteTlsOutput) DestinationCACertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaRouteTls) *string { return v.DestinationCACertificate }).(pulumi.StringPtrOutput)
}

// insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.
//  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
func (o ArgoCDSpecGrafanaRouteTlsOutput) InsecureEdgeTerminationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaRouteTls) *string { return v.InsecureEdgeTerminationPolicy }).(pulumi.StringPtrOutput)
}

// key provides key file contents
func (o ArgoCDSpecGrafanaRouteTlsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaRouteTls) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// termination indicates termination type.
func (o ArgoCDSpecGrafanaRouteTlsOutput) Termination() pulumi.StringOutput {
	return o.ApplyT(func(v ArgoCDSpecGrafanaRouteTls) string { return v.Termination }).(pulumi.StringOutput)
}

type ArgoCDSpecGrafanaRouteTlsPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecGrafanaRouteTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecGrafanaRouteTls)(nil)).Elem()
}

func (o ArgoCDSpecGrafanaRouteTlsPtrOutput) ToArgoCDSpecGrafanaRouteTlsPtrOutput() ArgoCDSpecGrafanaRouteTlsPtrOutput {
	return o
}

func (o ArgoCDSpecGrafanaRouteTlsPtrOutput) ToArgoCDSpecGrafanaRouteTlsPtrOutputWithContext(ctx context.Context) ArgoCDSpecGrafanaRouteTlsPtrOutput {
	return o
}

func (o ArgoCDSpecGrafanaRouteTlsPtrOutput) Elem() ArgoCDSpecGrafanaRouteTlsOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaRouteTls) ArgoCDSpecGrafanaRouteTls { return *v }).(ArgoCDSpecGrafanaRouteTlsOutput)
}

// caCertificate provides the cert authority certificate contents
func (o ArgoCDSpecGrafanaRouteTlsPtrOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaRouteTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificate
	}).(pulumi.StringPtrOutput)
}

// certificate provides certificate contents
func (o ArgoCDSpecGrafanaRouteTlsPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaRouteTls) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
func (o ArgoCDSpecGrafanaRouteTlsPtrOutput) DestinationCACertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaRouteTls) *string {
		if v == nil {
			return nil
		}
		return v.DestinationCACertificate
	}).(pulumi.StringPtrOutput)
}

// insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.
//  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
func (o ArgoCDSpecGrafanaRouteTlsPtrOutput) InsecureEdgeTerminationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaRouteTls) *string {
		if v == nil {
			return nil
		}
		return v.InsecureEdgeTerminationPolicy
	}).(pulumi.StringPtrOutput)
}

// key provides key file contents
func (o ArgoCDSpecGrafanaRouteTlsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaRouteTls) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// termination indicates termination type.
func (o ArgoCDSpecGrafanaRouteTlsPtrOutput) Termination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecGrafanaRouteTls) *string {
		if v == nil {
			return nil
		}
		return &v.Termination
	}).(pulumi.StringPtrOutput)
}

// HA options for High Availability support for the Redis component.
type ArgoCDSpecHa struct {
	// Enabled will toggle HA support globally for Argo CD.
	Enabled bool `pulumi:"enabled"`
	// RedisProxyImage is the Redis HAProxy container image.
	RedisProxyImage *string `pulumi:"redisProxyImage"`
	// RedisProxyVersion is the Redis HAProxy container image tag.
	RedisProxyVersion *string `pulumi:"redisProxyVersion"`
}

// ArgoCDSpecHaInput is an input type that accepts ArgoCDSpecHaArgs and ArgoCDSpecHaOutput values.
// You can construct a concrete instance of `ArgoCDSpecHaInput` via:
//
//          ArgoCDSpecHaArgs{...}
type ArgoCDSpecHaInput interface {
	pulumi.Input

	ToArgoCDSpecHaOutput() ArgoCDSpecHaOutput
	ToArgoCDSpecHaOutputWithContext(context.Context) ArgoCDSpecHaOutput
}

// HA options for High Availability support for the Redis component.
type ArgoCDSpecHaArgs struct {
	// Enabled will toggle HA support globally for Argo CD.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// RedisProxyImage is the Redis HAProxy container image.
	RedisProxyImage pulumi.StringPtrInput `pulumi:"redisProxyImage"`
	// RedisProxyVersion is the Redis HAProxy container image tag.
	RedisProxyVersion pulumi.StringPtrInput `pulumi:"redisProxyVersion"`
}

func (ArgoCDSpecHaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecHa)(nil)).Elem()
}

func (i ArgoCDSpecHaArgs) ToArgoCDSpecHaOutput() ArgoCDSpecHaOutput {
	return i.ToArgoCDSpecHaOutputWithContext(context.Background())
}

func (i ArgoCDSpecHaArgs) ToArgoCDSpecHaOutputWithContext(ctx context.Context) ArgoCDSpecHaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecHaOutput)
}

func (i ArgoCDSpecHaArgs) ToArgoCDSpecHaPtrOutput() ArgoCDSpecHaPtrOutput {
	return i.ToArgoCDSpecHaPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecHaArgs) ToArgoCDSpecHaPtrOutputWithContext(ctx context.Context) ArgoCDSpecHaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecHaOutput).ToArgoCDSpecHaPtrOutputWithContext(ctx)
}

// ArgoCDSpecHaPtrInput is an input type that accepts ArgoCDSpecHaArgs, ArgoCDSpecHaPtr and ArgoCDSpecHaPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecHaPtrInput` via:
//
//          ArgoCDSpecHaArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecHaPtrInput interface {
	pulumi.Input

	ToArgoCDSpecHaPtrOutput() ArgoCDSpecHaPtrOutput
	ToArgoCDSpecHaPtrOutputWithContext(context.Context) ArgoCDSpecHaPtrOutput
}

type argoCDSpecHaPtrType ArgoCDSpecHaArgs

func ArgoCDSpecHaPtr(v *ArgoCDSpecHaArgs) ArgoCDSpecHaPtrInput {
	return (*argoCDSpecHaPtrType)(v)
}

func (*argoCDSpecHaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecHa)(nil)).Elem()
}

func (i *argoCDSpecHaPtrType) ToArgoCDSpecHaPtrOutput() ArgoCDSpecHaPtrOutput {
	return i.ToArgoCDSpecHaPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecHaPtrType) ToArgoCDSpecHaPtrOutputWithContext(ctx context.Context) ArgoCDSpecHaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecHaPtrOutput)
}

// HA options for High Availability support for the Redis component.
type ArgoCDSpecHaOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecHaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecHa)(nil)).Elem()
}

func (o ArgoCDSpecHaOutput) ToArgoCDSpecHaOutput() ArgoCDSpecHaOutput {
	return o
}

func (o ArgoCDSpecHaOutput) ToArgoCDSpecHaOutputWithContext(ctx context.Context) ArgoCDSpecHaOutput {
	return o
}

func (o ArgoCDSpecHaOutput) ToArgoCDSpecHaPtrOutput() ArgoCDSpecHaPtrOutput {
	return o.ToArgoCDSpecHaPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecHaOutput) ToArgoCDSpecHaPtrOutputWithContext(ctx context.Context) ArgoCDSpecHaPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecHa) *ArgoCDSpecHa {
		return &v
	}).(ArgoCDSpecHaPtrOutput)
}

// Enabled will toggle HA support globally for Argo CD.
func (o ArgoCDSpecHaOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ArgoCDSpecHa) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// RedisProxyImage is the Redis HAProxy container image.
func (o ArgoCDSpecHaOutput) RedisProxyImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecHa) *string { return v.RedisProxyImage }).(pulumi.StringPtrOutput)
}

// RedisProxyVersion is the Redis HAProxy container image tag.
func (o ArgoCDSpecHaOutput) RedisProxyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecHa) *string { return v.RedisProxyVersion }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecHaPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecHaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecHa)(nil)).Elem()
}

func (o ArgoCDSpecHaPtrOutput) ToArgoCDSpecHaPtrOutput() ArgoCDSpecHaPtrOutput {
	return o
}

func (o ArgoCDSpecHaPtrOutput) ToArgoCDSpecHaPtrOutputWithContext(ctx context.Context) ArgoCDSpecHaPtrOutput {
	return o
}

func (o ArgoCDSpecHaPtrOutput) Elem() ArgoCDSpecHaOutput {
	return o.ApplyT(func(v *ArgoCDSpecHa) ArgoCDSpecHa { return *v }).(ArgoCDSpecHaOutput)
}

// Enabled will toggle HA support globally for Argo CD.
func (o ArgoCDSpecHaPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecHa) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// RedisProxyImage is the Redis HAProxy container image.
func (o ArgoCDSpecHaPtrOutput) RedisProxyImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecHa) *string {
		if v == nil {
			return nil
		}
		return v.RedisProxyImage
	}).(pulumi.StringPtrOutput)
}

// RedisProxyVersion is the Redis HAProxy container image tag.
func (o ArgoCDSpecHaPtrOutput) RedisProxyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecHa) *string {
		if v == nil {
			return nil
		}
		return v.RedisProxyVersion
	}).(pulumi.StringPtrOutput)
}

// Import is the import/restore options for ArgoCD.
type ArgoCDSpecImport struct {
	// Name of an ArgoCDExport from which to import data.
	Name string `pulumi:"name"`
	// Namespace for the ArgoCDExport, defaults to the same namespace as the ArgoCD.
	Namespace *string `pulumi:"namespace"`
}

// ArgoCDSpecImportInput is an input type that accepts ArgoCDSpecImportArgs and ArgoCDSpecImportOutput values.
// You can construct a concrete instance of `ArgoCDSpecImportInput` via:
//
//          ArgoCDSpecImportArgs{...}
type ArgoCDSpecImportInput interface {
	pulumi.Input

	ToArgoCDSpecImportOutput() ArgoCDSpecImportOutput
	ToArgoCDSpecImportOutputWithContext(context.Context) ArgoCDSpecImportOutput
}

// Import is the import/restore options for ArgoCD.
type ArgoCDSpecImportArgs struct {
	// Name of an ArgoCDExport from which to import data.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace for the ArgoCDExport, defaults to the same namespace as the ArgoCD.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ArgoCDSpecImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecImport)(nil)).Elem()
}

func (i ArgoCDSpecImportArgs) ToArgoCDSpecImportOutput() ArgoCDSpecImportOutput {
	return i.ToArgoCDSpecImportOutputWithContext(context.Background())
}

func (i ArgoCDSpecImportArgs) ToArgoCDSpecImportOutputWithContext(ctx context.Context) ArgoCDSpecImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecImportOutput)
}

func (i ArgoCDSpecImportArgs) ToArgoCDSpecImportPtrOutput() ArgoCDSpecImportPtrOutput {
	return i.ToArgoCDSpecImportPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecImportArgs) ToArgoCDSpecImportPtrOutputWithContext(ctx context.Context) ArgoCDSpecImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecImportOutput).ToArgoCDSpecImportPtrOutputWithContext(ctx)
}

// ArgoCDSpecImportPtrInput is an input type that accepts ArgoCDSpecImportArgs, ArgoCDSpecImportPtr and ArgoCDSpecImportPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecImportPtrInput` via:
//
//          ArgoCDSpecImportArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecImportPtrInput interface {
	pulumi.Input

	ToArgoCDSpecImportPtrOutput() ArgoCDSpecImportPtrOutput
	ToArgoCDSpecImportPtrOutputWithContext(context.Context) ArgoCDSpecImportPtrOutput
}

type argoCDSpecImportPtrType ArgoCDSpecImportArgs

func ArgoCDSpecImportPtr(v *ArgoCDSpecImportArgs) ArgoCDSpecImportPtrInput {
	return (*argoCDSpecImportPtrType)(v)
}

func (*argoCDSpecImportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecImport)(nil)).Elem()
}

func (i *argoCDSpecImportPtrType) ToArgoCDSpecImportPtrOutput() ArgoCDSpecImportPtrOutput {
	return i.ToArgoCDSpecImportPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecImportPtrType) ToArgoCDSpecImportPtrOutputWithContext(ctx context.Context) ArgoCDSpecImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecImportPtrOutput)
}

// Import is the import/restore options for ArgoCD.
type ArgoCDSpecImportOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecImport)(nil)).Elem()
}

func (o ArgoCDSpecImportOutput) ToArgoCDSpecImportOutput() ArgoCDSpecImportOutput {
	return o
}

func (o ArgoCDSpecImportOutput) ToArgoCDSpecImportOutputWithContext(ctx context.Context) ArgoCDSpecImportOutput {
	return o
}

func (o ArgoCDSpecImportOutput) ToArgoCDSpecImportPtrOutput() ArgoCDSpecImportPtrOutput {
	return o.ToArgoCDSpecImportPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecImportOutput) ToArgoCDSpecImportPtrOutputWithContext(ctx context.Context) ArgoCDSpecImportPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecImport) *ArgoCDSpecImport {
		return &v
	}).(ArgoCDSpecImportPtrOutput)
}

// Name of an ArgoCDExport from which to import data.
func (o ArgoCDSpecImportOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ArgoCDSpecImport) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace for the ArgoCDExport, defaults to the same namespace as the ArgoCD.
func (o ArgoCDSpecImportOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecImport) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecImportPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecImportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecImport)(nil)).Elem()
}

func (o ArgoCDSpecImportPtrOutput) ToArgoCDSpecImportPtrOutput() ArgoCDSpecImportPtrOutput {
	return o
}

func (o ArgoCDSpecImportPtrOutput) ToArgoCDSpecImportPtrOutputWithContext(ctx context.Context) ArgoCDSpecImportPtrOutput {
	return o
}

func (o ArgoCDSpecImportPtrOutput) Elem() ArgoCDSpecImportOutput {
	return o.ApplyT(func(v *ArgoCDSpecImport) ArgoCDSpecImport { return *v }).(ArgoCDSpecImportOutput)
}

// Name of an ArgoCDExport from which to import data.
func (o ArgoCDSpecImportPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecImport) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace for the ArgoCDExport, defaults to the same namespace as the ArgoCD.
func (o ArgoCDSpecImportPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecImport) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// InitialSSHKnownHosts defines the SSH known hosts data upon creation of the cluster for connecting Git repositories via SSH.
type ArgoCDSpecInitialSSHKnownHosts struct {
	// ExcludeDefaultHosts describes whether you would like to include the default list of SSH Known Hosts provided by ArgoCD.
	Excludedefaulthosts *bool `pulumi:"excludedefaulthosts"`
	// Keys describes a custom set of SSH Known Hosts that you would like to have included in your ArgoCD server.
	Keys *string `pulumi:"keys"`
}

// ArgoCDSpecInitialSSHKnownHostsInput is an input type that accepts ArgoCDSpecInitialSSHKnownHostsArgs and ArgoCDSpecInitialSSHKnownHostsOutput values.
// You can construct a concrete instance of `ArgoCDSpecInitialSSHKnownHostsInput` via:
//
//          ArgoCDSpecInitialSSHKnownHostsArgs{...}
type ArgoCDSpecInitialSSHKnownHostsInput interface {
	pulumi.Input

	ToArgoCDSpecInitialSSHKnownHostsOutput() ArgoCDSpecInitialSSHKnownHostsOutput
	ToArgoCDSpecInitialSSHKnownHostsOutputWithContext(context.Context) ArgoCDSpecInitialSSHKnownHostsOutput
}

// InitialSSHKnownHosts defines the SSH known hosts data upon creation of the cluster for connecting Git repositories via SSH.
type ArgoCDSpecInitialSSHKnownHostsArgs struct {
	// ExcludeDefaultHosts describes whether you would like to include the default list of SSH Known Hosts provided by ArgoCD.
	Excludedefaulthosts pulumi.BoolPtrInput `pulumi:"excludedefaulthosts"`
	// Keys describes a custom set of SSH Known Hosts that you would like to have included in your ArgoCD server.
	Keys pulumi.StringPtrInput `pulumi:"keys"`
}

func (ArgoCDSpecInitialSSHKnownHostsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecInitialSSHKnownHosts)(nil)).Elem()
}

func (i ArgoCDSpecInitialSSHKnownHostsArgs) ToArgoCDSpecInitialSSHKnownHostsOutput() ArgoCDSpecInitialSSHKnownHostsOutput {
	return i.ToArgoCDSpecInitialSSHKnownHostsOutputWithContext(context.Background())
}

func (i ArgoCDSpecInitialSSHKnownHostsArgs) ToArgoCDSpecInitialSSHKnownHostsOutputWithContext(ctx context.Context) ArgoCDSpecInitialSSHKnownHostsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecInitialSSHKnownHostsOutput)
}

func (i ArgoCDSpecInitialSSHKnownHostsArgs) ToArgoCDSpecInitialSSHKnownHostsPtrOutput() ArgoCDSpecInitialSSHKnownHostsPtrOutput {
	return i.ToArgoCDSpecInitialSSHKnownHostsPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecInitialSSHKnownHostsArgs) ToArgoCDSpecInitialSSHKnownHostsPtrOutputWithContext(ctx context.Context) ArgoCDSpecInitialSSHKnownHostsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecInitialSSHKnownHostsOutput).ToArgoCDSpecInitialSSHKnownHostsPtrOutputWithContext(ctx)
}

// ArgoCDSpecInitialSSHKnownHostsPtrInput is an input type that accepts ArgoCDSpecInitialSSHKnownHostsArgs, ArgoCDSpecInitialSSHKnownHostsPtr and ArgoCDSpecInitialSSHKnownHostsPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecInitialSSHKnownHostsPtrInput` via:
//
//          ArgoCDSpecInitialSSHKnownHostsArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecInitialSSHKnownHostsPtrInput interface {
	pulumi.Input

	ToArgoCDSpecInitialSSHKnownHostsPtrOutput() ArgoCDSpecInitialSSHKnownHostsPtrOutput
	ToArgoCDSpecInitialSSHKnownHostsPtrOutputWithContext(context.Context) ArgoCDSpecInitialSSHKnownHostsPtrOutput
}

type argoCDSpecInitialSSHKnownHostsPtrType ArgoCDSpecInitialSSHKnownHostsArgs

func ArgoCDSpecInitialSSHKnownHostsPtr(v *ArgoCDSpecInitialSSHKnownHostsArgs) ArgoCDSpecInitialSSHKnownHostsPtrInput {
	return (*argoCDSpecInitialSSHKnownHostsPtrType)(v)
}

func (*argoCDSpecInitialSSHKnownHostsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecInitialSSHKnownHosts)(nil)).Elem()
}

func (i *argoCDSpecInitialSSHKnownHostsPtrType) ToArgoCDSpecInitialSSHKnownHostsPtrOutput() ArgoCDSpecInitialSSHKnownHostsPtrOutput {
	return i.ToArgoCDSpecInitialSSHKnownHostsPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecInitialSSHKnownHostsPtrType) ToArgoCDSpecInitialSSHKnownHostsPtrOutputWithContext(ctx context.Context) ArgoCDSpecInitialSSHKnownHostsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecInitialSSHKnownHostsPtrOutput)
}

// InitialSSHKnownHosts defines the SSH known hosts data upon creation of the cluster for connecting Git repositories via SSH.
type ArgoCDSpecInitialSSHKnownHostsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecInitialSSHKnownHostsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecInitialSSHKnownHosts)(nil)).Elem()
}

func (o ArgoCDSpecInitialSSHKnownHostsOutput) ToArgoCDSpecInitialSSHKnownHostsOutput() ArgoCDSpecInitialSSHKnownHostsOutput {
	return o
}

func (o ArgoCDSpecInitialSSHKnownHostsOutput) ToArgoCDSpecInitialSSHKnownHostsOutputWithContext(ctx context.Context) ArgoCDSpecInitialSSHKnownHostsOutput {
	return o
}

func (o ArgoCDSpecInitialSSHKnownHostsOutput) ToArgoCDSpecInitialSSHKnownHostsPtrOutput() ArgoCDSpecInitialSSHKnownHostsPtrOutput {
	return o.ToArgoCDSpecInitialSSHKnownHostsPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecInitialSSHKnownHostsOutput) ToArgoCDSpecInitialSSHKnownHostsPtrOutputWithContext(ctx context.Context) ArgoCDSpecInitialSSHKnownHostsPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecInitialSSHKnownHosts) *ArgoCDSpecInitialSSHKnownHosts {
		return &v
	}).(ArgoCDSpecInitialSSHKnownHostsPtrOutput)
}

// ExcludeDefaultHosts describes whether you would like to include the default list of SSH Known Hosts provided by ArgoCD.
func (o ArgoCDSpecInitialSSHKnownHostsOutput) Excludedefaulthosts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecInitialSSHKnownHosts) *bool { return v.Excludedefaulthosts }).(pulumi.BoolPtrOutput)
}

// Keys describes a custom set of SSH Known Hosts that you would like to have included in your ArgoCD server.
func (o ArgoCDSpecInitialSSHKnownHostsOutput) Keys() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecInitialSSHKnownHosts) *string { return v.Keys }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecInitialSSHKnownHostsPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecInitialSSHKnownHostsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecInitialSSHKnownHosts)(nil)).Elem()
}

func (o ArgoCDSpecInitialSSHKnownHostsPtrOutput) ToArgoCDSpecInitialSSHKnownHostsPtrOutput() ArgoCDSpecInitialSSHKnownHostsPtrOutput {
	return o
}

func (o ArgoCDSpecInitialSSHKnownHostsPtrOutput) ToArgoCDSpecInitialSSHKnownHostsPtrOutputWithContext(ctx context.Context) ArgoCDSpecInitialSSHKnownHostsPtrOutput {
	return o
}

func (o ArgoCDSpecInitialSSHKnownHostsPtrOutput) Elem() ArgoCDSpecInitialSSHKnownHostsOutput {
	return o.ApplyT(func(v *ArgoCDSpecInitialSSHKnownHosts) ArgoCDSpecInitialSSHKnownHosts { return *v }).(ArgoCDSpecInitialSSHKnownHostsOutput)
}

// ExcludeDefaultHosts describes whether you would like to include the default list of SSH Known Hosts provided by ArgoCD.
func (o ArgoCDSpecInitialSSHKnownHostsPtrOutput) Excludedefaulthosts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecInitialSSHKnownHosts) *bool {
		if v == nil {
			return nil
		}
		return v.Excludedefaulthosts
	}).(pulumi.BoolPtrOutput)
}

// Keys describes a custom set of SSH Known Hosts that you would like to have included in your ArgoCD server.
func (o ArgoCDSpecInitialSSHKnownHostsPtrOutput) Keys() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecInitialSSHKnownHosts) *string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringPtrOutput)
}

// Prometheus defines the Prometheus server options for ArgoCD.
type ArgoCDSpecPrometheus struct {
	// Enabled will toggle Prometheus support globally for ArgoCD.
	Enabled bool `pulumi:"enabled"`
	// Host is the hostname to use for Ingress/Route resources.
	Host *string `pulumi:"host"`
	// Ingress defines the desired state for an Ingress for the Prometheus component.
	Ingress *ArgoCDSpecPrometheusIngress `pulumi:"ingress"`
	// Route defines the desired state for an OpenShift Route for the Prometheus component.
	Route *ArgoCDSpecPrometheusRoute `pulumi:"route"`
	// Size is the replica count for the Prometheus StatefulSet.
	Size *int `pulumi:"size"`
}

// ArgoCDSpecPrometheusInput is an input type that accepts ArgoCDSpecPrometheusArgs and ArgoCDSpecPrometheusOutput values.
// You can construct a concrete instance of `ArgoCDSpecPrometheusInput` via:
//
//          ArgoCDSpecPrometheusArgs{...}
type ArgoCDSpecPrometheusInput interface {
	pulumi.Input

	ToArgoCDSpecPrometheusOutput() ArgoCDSpecPrometheusOutput
	ToArgoCDSpecPrometheusOutputWithContext(context.Context) ArgoCDSpecPrometheusOutput
}

// Prometheus defines the Prometheus server options for ArgoCD.
type ArgoCDSpecPrometheusArgs struct {
	// Enabled will toggle Prometheus support globally for ArgoCD.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Host is the hostname to use for Ingress/Route resources.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Ingress defines the desired state for an Ingress for the Prometheus component.
	Ingress ArgoCDSpecPrometheusIngressPtrInput `pulumi:"ingress"`
	// Route defines the desired state for an OpenShift Route for the Prometheus component.
	Route ArgoCDSpecPrometheusRoutePtrInput `pulumi:"route"`
	// Size is the replica count for the Prometheus StatefulSet.
	Size pulumi.IntPtrInput `pulumi:"size"`
}

func (ArgoCDSpecPrometheusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecPrometheus)(nil)).Elem()
}

func (i ArgoCDSpecPrometheusArgs) ToArgoCDSpecPrometheusOutput() ArgoCDSpecPrometheusOutput {
	return i.ToArgoCDSpecPrometheusOutputWithContext(context.Background())
}

func (i ArgoCDSpecPrometheusArgs) ToArgoCDSpecPrometheusOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPrometheusOutput)
}

func (i ArgoCDSpecPrometheusArgs) ToArgoCDSpecPrometheusPtrOutput() ArgoCDSpecPrometheusPtrOutput {
	return i.ToArgoCDSpecPrometheusPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecPrometheusArgs) ToArgoCDSpecPrometheusPtrOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPrometheusOutput).ToArgoCDSpecPrometheusPtrOutputWithContext(ctx)
}

// ArgoCDSpecPrometheusPtrInput is an input type that accepts ArgoCDSpecPrometheusArgs, ArgoCDSpecPrometheusPtr and ArgoCDSpecPrometheusPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecPrometheusPtrInput` via:
//
//          ArgoCDSpecPrometheusArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecPrometheusPtrInput interface {
	pulumi.Input

	ToArgoCDSpecPrometheusPtrOutput() ArgoCDSpecPrometheusPtrOutput
	ToArgoCDSpecPrometheusPtrOutputWithContext(context.Context) ArgoCDSpecPrometheusPtrOutput
}

type argoCDSpecPrometheusPtrType ArgoCDSpecPrometheusArgs

func ArgoCDSpecPrometheusPtr(v *ArgoCDSpecPrometheusArgs) ArgoCDSpecPrometheusPtrInput {
	return (*argoCDSpecPrometheusPtrType)(v)
}

func (*argoCDSpecPrometheusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecPrometheus)(nil)).Elem()
}

func (i *argoCDSpecPrometheusPtrType) ToArgoCDSpecPrometheusPtrOutput() ArgoCDSpecPrometheusPtrOutput {
	return i.ToArgoCDSpecPrometheusPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecPrometheusPtrType) ToArgoCDSpecPrometheusPtrOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPrometheusPtrOutput)
}

// Prometheus defines the Prometheus server options for ArgoCD.
type ArgoCDSpecPrometheusOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecPrometheusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecPrometheus)(nil)).Elem()
}

func (o ArgoCDSpecPrometheusOutput) ToArgoCDSpecPrometheusOutput() ArgoCDSpecPrometheusOutput {
	return o
}

func (o ArgoCDSpecPrometheusOutput) ToArgoCDSpecPrometheusOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusOutput {
	return o
}

func (o ArgoCDSpecPrometheusOutput) ToArgoCDSpecPrometheusPtrOutput() ArgoCDSpecPrometheusPtrOutput {
	return o.ToArgoCDSpecPrometheusPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecPrometheusOutput) ToArgoCDSpecPrometheusPtrOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheus) *ArgoCDSpecPrometheus {
		return &v
	}).(ArgoCDSpecPrometheusPtrOutput)
}

// Enabled will toggle Prometheus support globally for ArgoCD.
func (o ArgoCDSpecPrometheusOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheus) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Host is the hostname to use for Ingress/Route resources.
func (o ArgoCDSpecPrometheusOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheus) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Ingress defines the desired state for an Ingress for the Prometheus component.
func (o ArgoCDSpecPrometheusOutput) Ingress() ArgoCDSpecPrometheusIngressPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheus) *ArgoCDSpecPrometheusIngress { return v.Ingress }).(ArgoCDSpecPrometheusIngressPtrOutput)
}

// Route defines the desired state for an OpenShift Route for the Prometheus component.
func (o ArgoCDSpecPrometheusOutput) Route() ArgoCDSpecPrometheusRoutePtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheus) *ArgoCDSpecPrometheusRoute { return v.Route }).(ArgoCDSpecPrometheusRoutePtrOutput)
}

// Size is the replica count for the Prometheus StatefulSet.
func (o ArgoCDSpecPrometheusOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheus) *int { return v.Size }).(pulumi.IntPtrOutput)
}

type ArgoCDSpecPrometheusPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecPrometheusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecPrometheus)(nil)).Elem()
}

func (o ArgoCDSpecPrometheusPtrOutput) ToArgoCDSpecPrometheusPtrOutput() ArgoCDSpecPrometheusPtrOutput {
	return o
}

func (o ArgoCDSpecPrometheusPtrOutput) ToArgoCDSpecPrometheusPtrOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusPtrOutput {
	return o
}

func (o ArgoCDSpecPrometheusPtrOutput) Elem() ArgoCDSpecPrometheusOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheus) ArgoCDSpecPrometheus { return *v }).(ArgoCDSpecPrometheusOutput)
}

// Enabled will toggle Prometheus support globally for ArgoCD.
func (o ArgoCDSpecPrometheusPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheus) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Host is the hostname to use for Ingress/Route resources.
func (o ArgoCDSpecPrometheusPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheus) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Ingress defines the desired state for an Ingress for the Prometheus component.
func (o ArgoCDSpecPrometheusPtrOutput) Ingress() ArgoCDSpecPrometheusIngressPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheus) *ArgoCDSpecPrometheusIngress {
		if v == nil {
			return nil
		}
		return v.Ingress
	}).(ArgoCDSpecPrometheusIngressPtrOutput)
}

// Route defines the desired state for an OpenShift Route for the Prometheus component.
func (o ArgoCDSpecPrometheusPtrOutput) Route() ArgoCDSpecPrometheusRoutePtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheus) *ArgoCDSpecPrometheusRoute {
		if v == nil {
			return nil
		}
		return v.Route
	}).(ArgoCDSpecPrometheusRoutePtrOutput)
}

// Size is the replica count for the Prometheus StatefulSet.
func (o ArgoCDSpecPrometheusPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheus) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// Ingress defines the desired state for an Ingress for the Prometheus component.
type ArgoCDSpecPrometheusIngress struct {
	// Annotations is the map of annotations to apply to the Ingress.
	Annotations map[string]string `pulumi:"annotations"`
	// Enabled will toggle the creation of the Ingress.
	Enabled bool `pulumi:"enabled"`
	// Path used for the Ingress resource.
	Path *string `pulumi:"path"`
	// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
	Tls []ArgoCDSpecPrometheusIngressTls `pulumi:"tls"`
}

// ArgoCDSpecPrometheusIngressInput is an input type that accepts ArgoCDSpecPrometheusIngressArgs and ArgoCDSpecPrometheusIngressOutput values.
// You can construct a concrete instance of `ArgoCDSpecPrometheusIngressInput` via:
//
//          ArgoCDSpecPrometheusIngressArgs{...}
type ArgoCDSpecPrometheusIngressInput interface {
	pulumi.Input

	ToArgoCDSpecPrometheusIngressOutput() ArgoCDSpecPrometheusIngressOutput
	ToArgoCDSpecPrometheusIngressOutputWithContext(context.Context) ArgoCDSpecPrometheusIngressOutput
}

// Ingress defines the desired state for an Ingress for the Prometheus component.
type ArgoCDSpecPrometheusIngressArgs struct {
	// Annotations is the map of annotations to apply to the Ingress.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Enabled will toggle the creation of the Ingress.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Path used for the Ingress resource.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
	Tls ArgoCDSpecPrometheusIngressTlsArrayInput `pulumi:"tls"`
}

func (ArgoCDSpecPrometheusIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecPrometheusIngress)(nil)).Elem()
}

func (i ArgoCDSpecPrometheusIngressArgs) ToArgoCDSpecPrometheusIngressOutput() ArgoCDSpecPrometheusIngressOutput {
	return i.ToArgoCDSpecPrometheusIngressOutputWithContext(context.Background())
}

func (i ArgoCDSpecPrometheusIngressArgs) ToArgoCDSpecPrometheusIngressOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPrometheusIngressOutput)
}

func (i ArgoCDSpecPrometheusIngressArgs) ToArgoCDSpecPrometheusIngressPtrOutput() ArgoCDSpecPrometheusIngressPtrOutput {
	return i.ToArgoCDSpecPrometheusIngressPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecPrometheusIngressArgs) ToArgoCDSpecPrometheusIngressPtrOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusIngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPrometheusIngressOutput).ToArgoCDSpecPrometheusIngressPtrOutputWithContext(ctx)
}

// ArgoCDSpecPrometheusIngressPtrInput is an input type that accepts ArgoCDSpecPrometheusIngressArgs, ArgoCDSpecPrometheusIngressPtr and ArgoCDSpecPrometheusIngressPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecPrometheusIngressPtrInput` via:
//
//          ArgoCDSpecPrometheusIngressArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecPrometheusIngressPtrInput interface {
	pulumi.Input

	ToArgoCDSpecPrometheusIngressPtrOutput() ArgoCDSpecPrometheusIngressPtrOutput
	ToArgoCDSpecPrometheusIngressPtrOutputWithContext(context.Context) ArgoCDSpecPrometheusIngressPtrOutput
}

type argoCDSpecPrometheusIngressPtrType ArgoCDSpecPrometheusIngressArgs

func ArgoCDSpecPrometheusIngressPtr(v *ArgoCDSpecPrometheusIngressArgs) ArgoCDSpecPrometheusIngressPtrInput {
	return (*argoCDSpecPrometheusIngressPtrType)(v)
}

func (*argoCDSpecPrometheusIngressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecPrometheusIngress)(nil)).Elem()
}

func (i *argoCDSpecPrometheusIngressPtrType) ToArgoCDSpecPrometheusIngressPtrOutput() ArgoCDSpecPrometheusIngressPtrOutput {
	return i.ToArgoCDSpecPrometheusIngressPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecPrometheusIngressPtrType) ToArgoCDSpecPrometheusIngressPtrOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusIngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPrometheusIngressPtrOutput)
}

// Ingress defines the desired state for an Ingress for the Prometheus component.
type ArgoCDSpecPrometheusIngressOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecPrometheusIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecPrometheusIngress)(nil)).Elem()
}

func (o ArgoCDSpecPrometheusIngressOutput) ToArgoCDSpecPrometheusIngressOutput() ArgoCDSpecPrometheusIngressOutput {
	return o
}

func (o ArgoCDSpecPrometheusIngressOutput) ToArgoCDSpecPrometheusIngressOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusIngressOutput {
	return o
}

func (o ArgoCDSpecPrometheusIngressOutput) ToArgoCDSpecPrometheusIngressPtrOutput() ArgoCDSpecPrometheusIngressPtrOutput {
	return o.ToArgoCDSpecPrometheusIngressPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecPrometheusIngressOutput) ToArgoCDSpecPrometheusIngressPtrOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusIngressPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusIngress) *ArgoCDSpecPrometheusIngress {
		return &v
	}).(ArgoCDSpecPrometheusIngressPtrOutput)
}

// Annotations is the map of annotations to apply to the Ingress.
func (o ArgoCDSpecPrometheusIngressOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusIngress) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Enabled will toggle the creation of the Ingress.
func (o ArgoCDSpecPrometheusIngressOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusIngress) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Path used for the Ingress resource.
func (o ArgoCDSpecPrometheusIngressOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusIngress) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
func (o ArgoCDSpecPrometheusIngressOutput) Tls() ArgoCDSpecPrometheusIngressTlsArrayOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusIngress) []ArgoCDSpecPrometheusIngressTls { return v.Tls }).(ArgoCDSpecPrometheusIngressTlsArrayOutput)
}

type ArgoCDSpecPrometheusIngressPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecPrometheusIngressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecPrometheusIngress)(nil)).Elem()
}

func (o ArgoCDSpecPrometheusIngressPtrOutput) ToArgoCDSpecPrometheusIngressPtrOutput() ArgoCDSpecPrometheusIngressPtrOutput {
	return o
}

func (o ArgoCDSpecPrometheusIngressPtrOutput) ToArgoCDSpecPrometheusIngressPtrOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusIngressPtrOutput {
	return o
}

func (o ArgoCDSpecPrometheusIngressPtrOutput) Elem() ArgoCDSpecPrometheusIngressOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusIngress) ArgoCDSpecPrometheusIngress { return *v }).(ArgoCDSpecPrometheusIngressOutput)
}

// Annotations is the map of annotations to apply to the Ingress.
func (o ArgoCDSpecPrometheusIngressPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusIngress) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Enabled will toggle the creation of the Ingress.
func (o ArgoCDSpecPrometheusIngressPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusIngress) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Path used for the Ingress resource.
func (o ArgoCDSpecPrometheusIngressPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusIngress) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
func (o ArgoCDSpecPrometheusIngressPtrOutput) Tls() ArgoCDSpecPrometheusIngressTlsArrayOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusIngress) []ArgoCDSpecPrometheusIngressTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ArgoCDSpecPrometheusIngressTlsArrayOutput)
}

// Annotations is the map of annotations to apply to the Ingress.
type ArgoCDSpecPrometheusIngressAnnotations struct {
}

// ArgoCDSpecPrometheusIngressAnnotationsInput is an input type that accepts ArgoCDSpecPrometheusIngressAnnotationsArgs and ArgoCDSpecPrometheusIngressAnnotationsOutput values.
// You can construct a concrete instance of `ArgoCDSpecPrometheusIngressAnnotationsInput` via:
//
//          ArgoCDSpecPrometheusIngressAnnotationsArgs{...}
type ArgoCDSpecPrometheusIngressAnnotationsInput interface {
	pulumi.Input

	ToArgoCDSpecPrometheusIngressAnnotationsOutput() ArgoCDSpecPrometheusIngressAnnotationsOutput
	ToArgoCDSpecPrometheusIngressAnnotationsOutputWithContext(context.Context) ArgoCDSpecPrometheusIngressAnnotationsOutput
}

// Annotations is the map of annotations to apply to the Ingress.
type ArgoCDSpecPrometheusIngressAnnotationsArgs struct {
}

func (ArgoCDSpecPrometheusIngressAnnotationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecPrometheusIngressAnnotations)(nil)).Elem()
}

func (i ArgoCDSpecPrometheusIngressAnnotationsArgs) ToArgoCDSpecPrometheusIngressAnnotationsOutput() ArgoCDSpecPrometheusIngressAnnotationsOutput {
	return i.ToArgoCDSpecPrometheusIngressAnnotationsOutputWithContext(context.Background())
}

func (i ArgoCDSpecPrometheusIngressAnnotationsArgs) ToArgoCDSpecPrometheusIngressAnnotationsOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusIngressAnnotationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPrometheusIngressAnnotationsOutput)
}

// Annotations is the map of annotations to apply to the Ingress.
type ArgoCDSpecPrometheusIngressAnnotationsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecPrometheusIngressAnnotationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecPrometheusIngressAnnotations)(nil)).Elem()
}

func (o ArgoCDSpecPrometheusIngressAnnotationsOutput) ToArgoCDSpecPrometheusIngressAnnotationsOutput() ArgoCDSpecPrometheusIngressAnnotationsOutput {
	return o
}

func (o ArgoCDSpecPrometheusIngressAnnotationsOutput) ToArgoCDSpecPrometheusIngressAnnotationsOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusIngressAnnotationsOutput {
	return o
}

// IngressTLS describes the transport layer security associated with an Ingress.
type ArgoCDSpecPrometheusIngressTls struct {
	// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
	Hosts []string `pulumi:"hosts"`
	// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
	SecretName *string `pulumi:"secretName"`
}

// ArgoCDSpecPrometheusIngressTlsInput is an input type that accepts ArgoCDSpecPrometheusIngressTlsArgs and ArgoCDSpecPrometheusIngressTlsOutput values.
// You can construct a concrete instance of `ArgoCDSpecPrometheusIngressTlsInput` via:
//
//          ArgoCDSpecPrometheusIngressTlsArgs{...}
type ArgoCDSpecPrometheusIngressTlsInput interface {
	pulumi.Input

	ToArgoCDSpecPrometheusIngressTlsOutput() ArgoCDSpecPrometheusIngressTlsOutput
	ToArgoCDSpecPrometheusIngressTlsOutputWithContext(context.Context) ArgoCDSpecPrometheusIngressTlsOutput
}

// IngressTLS describes the transport layer security associated with an Ingress.
type ArgoCDSpecPrometheusIngressTlsArgs struct {
	// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ArgoCDSpecPrometheusIngressTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecPrometheusIngressTls)(nil)).Elem()
}

func (i ArgoCDSpecPrometheusIngressTlsArgs) ToArgoCDSpecPrometheusIngressTlsOutput() ArgoCDSpecPrometheusIngressTlsOutput {
	return i.ToArgoCDSpecPrometheusIngressTlsOutputWithContext(context.Background())
}

func (i ArgoCDSpecPrometheusIngressTlsArgs) ToArgoCDSpecPrometheusIngressTlsOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusIngressTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPrometheusIngressTlsOutput)
}

// ArgoCDSpecPrometheusIngressTlsArrayInput is an input type that accepts ArgoCDSpecPrometheusIngressTlsArray and ArgoCDSpecPrometheusIngressTlsArrayOutput values.
// You can construct a concrete instance of `ArgoCDSpecPrometheusIngressTlsArrayInput` via:
//
//          ArgoCDSpecPrometheusIngressTlsArray{ ArgoCDSpecPrometheusIngressTlsArgs{...} }
type ArgoCDSpecPrometheusIngressTlsArrayInput interface {
	pulumi.Input

	ToArgoCDSpecPrometheusIngressTlsArrayOutput() ArgoCDSpecPrometheusIngressTlsArrayOutput
	ToArgoCDSpecPrometheusIngressTlsArrayOutputWithContext(context.Context) ArgoCDSpecPrometheusIngressTlsArrayOutput
}

type ArgoCDSpecPrometheusIngressTlsArray []ArgoCDSpecPrometheusIngressTlsInput

func (ArgoCDSpecPrometheusIngressTlsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArgoCDSpecPrometheusIngressTls)(nil)).Elem()
}

func (i ArgoCDSpecPrometheusIngressTlsArray) ToArgoCDSpecPrometheusIngressTlsArrayOutput() ArgoCDSpecPrometheusIngressTlsArrayOutput {
	return i.ToArgoCDSpecPrometheusIngressTlsArrayOutputWithContext(context.Background())
}

func (i ArgoCDSpecPrometheusIngressTlsArray) ToArgoCDSpecPrometheusIngressTlsArrayOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusIngressTlsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPrometheusIngressTlsArrayOutput)
}

// IngressTLS describes the transport layer security associated with an Ingress.
type ArgoCDSpecPrometheusIngressTlsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecPrometheusIngressTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecPrometheusIngressTls)(nil)).Elem()
}

func (o ArgoCDSpecPrometheusIngressTlsOutput) ToArgoCDSpecPrometheusIngressTlsOutput() ArgoCDSpecPrometheusIngressTlsOutput {
	return o
}

func (o ArgoCDSpecPrometheusIngressTlsOutput) ToArgoCDSpecPrometheusIngressTlsOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusIngressTlsOutput {
	return o
}

// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
func (o ArgoCDSpecPrometheusIngressTlsOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusIngressTls) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
func (o ArgoCDSpecPrometheusIngressTlsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusIngressTls) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecPrometheusIngressTlsArrayOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecPrometheusIngressTlsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArgoCDSpecPrometheusIngressTls)(nil)).Elem()
}

func (o ArgoCDSpecPrometheusIngressTlsArrayOutput) ToArgoCDSpecPrometheusIngressTlsArrayOutput() ArgoCDSpecPrometheusIngressTlsArrayOutput {
	return o
}

func (o ArgoCDSpecPrometheusIngressTlsArrayOutput) ToArgoCDSpecPrometheusIngressTlsArrayOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusIngressTlsArrayOutput {
	return o
}

func (o ArgoCDSpecPrometheusIngressTlsArrayOutput) Index(i pulumi.IntInput) ArgoCDSpecPrometheusIngressTlsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArgoCDSpecPrometheusIngressTls {
		return vs[0].([]ArgoCDSpecPrometheusIngressTls)[vs[1].(int)]
	}).(ArgoCDSpecPrometheusIngressTlsOutput)
}

// Route defines the desired state for an OpenShift Route for the Prometheus component.
type ArgoCDSpecPrometheusRoute struct {
	// Annotations is the map of annotations to use for the Route resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Enabled will toggle the creation of the OpenShift Route.
	Enabled bool `pulumi:"enabled"`
	// Path the router watches for, to route traffic for to the service.
	Path *string `pulumi:"path"`
	// TLS provides the ability to configure certificates and termination for the Route.
	Tls *ArgoCDSpecPrometheusRouteTls `pulumi:"tls"`
	// WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
	WildcardPolicy *string `pulumi:"wildcardPolicy"`
}

// ArgoCDSpecPrometheusRouteInput is an input type that accepts ArgoCDSpecPrometheusRouteArgs and ArgoCDSpecPrometheusRouteOutput values.
// You can construct a concrete instance of `ArgoCDSpecPrometheusRouteInput` via:
//
//          ArgoCDSpecPrometheusRouteArgs{...}
type ArgoCDSpecPrometheusRouteInput interface {
	pulumi.Input

	ToArgoCDSpecPrometheusRouteOutput() ArgoCDSpecPrometheusRouteOutput
	ToArgoCDSpecPrometheusRouteOutputWithContext(context.Context) ArgoCDSpecPrometheusRouteOutput
}

// Route defines the desired state for an OpenShift Route for the Prometheus component.
type ArgoCDSpecPrometheusRouteArgs struct {
	// Annotations is the map of annotations to use for the Route resource.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Enabled will toggle the creation of the OpenShift Route.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Path the router watches for, to route traffic for to the service.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// TLS provides the ability to configure certificates and termination for the Route.
	Tls ArgoCDSpecPrometheusRouteTlsPtrInput `pulumi:"tls"`
	// WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
	WildcardPolicy pulumi.StringPtrInput `pulumi:"wildcardPolicy"`
}

func (ArgoCDSpecPrometheusRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecPrometheusRoute)(nil)).Elem()
}

func (i ArgoCDSpecPrometheusRouteArgs) ToArgoCDSpecPrometheusRouteOutput() ArgoCDSpecPrometheusRouteOutput {
	return i.ToArgoCDSpecPrometheusRouteOutputWithContext(context.Background())
}

func (i ArgoCDSpecPrometheusRouteArgs) ToArgoCDSpecPrometheusRouteOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPrometheusRouteOutput)
}

func (i ArgoCDSpecPrometheusRouteArgs) ToArgoCDSpecPrometheusRoutePtrOutput() ArgoCDSpecPrometheusRoutePtrOutput {
	return i.ToArgoCDSpecPrometheusRoutePtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecPrometheusRouteArgs) ToArgoCDSpecPrometheusRoutePtrOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPrometheusRouteOutput).ToArgoCDSpecPrometheusRoutePtrOutputWithContext(ctx)
}

// ArgoCDSpecPrometheusRoutePtrInput is an input type that accepts ArgoCDSpecPrometheusRouteArgs, ArgoCDSpecPrometheusRoutePtr and ArgoCDSpecPrometheusRoutePtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecPrometheusRoutePtrInput` via:
//
//          ArgoCDSpecPrometheusRouteArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecPrometheusRoutePtrInput interface {
	pulumi.Input

	ToArgoCDSpecPrometheusRoutePtrOutput() ArgoCDSpecPrometheusRoutePtrOutput
	ToArgoCDSpecPrometheusRoutePtrOutputWithContext(context.Context) ArgoCDSpecPrometheusRoutePtrOutput
}

type argoCDSpecPrometheusRoutePtrType ArgoCDSpecPrometheusRouteArgs

func ArgoCDSpecPrometheusRoutePtr(v *ArgoCDSpecPrometheusRouteArgs) ArgoCDSpecPrometheusRoutePtrInput {
	return (*argoCDSpecPrometheusRoutePtrType)(v)
}

func (*argoCDSpecPrometheusRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecPrometheusRoute)(nil)).Elem()
}

func (i *argoCDSpecPrometheusRoutePtrType) ToArgoCDSpecPrometheusRoutePtrOutput() ArgoCDSpecPrometheusRoutePtrOutput {
	return i.ToArgoCDSpecPrometheusRoutePtrOutputWithContext(context.Background())
}

func (i *argoCDSpecPrometheusRoutePtrType) ToArgoCDSpecPrometheusRoutePtrOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPrometheusRoutePtrOutput)
}

// Route defines the desired state for an OpenShift Route for the Prometheus component.
type ArgoCDSpecPrometheusRouteOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecPrometheusRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecPrometheusRoute)(nil)).Elem()
}

func (o ArgoCDSpecPrometheusRouteOutput) ToArgoCDSpecPrometheusRouteOutput() ArgoCDSpecPrometheusRouteOutput {
	return o
}

func (o ArgoCDSpecPrometheusRouteOutput) ToArgoCDSpecPrometheusRouteOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusRouteOutput {
	return o
}

func (o ArgoCDSpecPrometheusRouteOutput) ToArgoCDSpecPrometheusRoutePtrOutput() ArgoCDSpecPrometheusRoutePtrOutput {
	return o.ToArgoCDSpecPrometheusRoutePtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecPrometheusRouteOutput) ToArgoCDSpecPrometheusRoutePtrOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusRoutePtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusRoute) *ArgoCDSpecPrometheusRoute {
		return &v
	}).(ArgoCDSpecPrometheusRoutePtrOutput)
}

// Annotations is the map of annotations to use for the Route resource.
func (o ArgoCDSpecPrometheusRouteOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusRoute) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Enabled will toggle the creation of the OpenShift Route.
func (o ArgoCDSpecPrometheusRouteOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusRoute) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Path the router watches for, to route traffic for to the service.
func (o ArgoCDSpecPrometheusRouteOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusRoute) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// TLS provides the ability to configure certificates and termination for the Route.
func (o ArgoCDSpecPrometheusRouteOutput) Tls() ArgoCDSpecPrometheusRouteTlsPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusRoute) *ArgoCDSpecPrometheusRouteTls { return v.Tls }).(ArgoCDSpecPrometheusRouteTlsPtrOutput)
}

// WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
func (o ArgoCDSpecPrometheusRouteOutput) WildcardPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusRoute) *string { return v.WildcardPolicy }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecPrometheusRoutePtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecPrometheusRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecPrometheusRoute)(nil)).Elem()
}

func (o ArgoCDSpecPrometheusRoutePtrOutput) ToArgoCDSpecPrometheusRoutePtrOutput() ArgoCDSpecPrometheusRoutePtrOutput {
	return o
}

func (o ArgoCDSpecPrometheusRoutePtrOutput) ToArgoCDSpecPrometheusRoutePtrOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusRoutePtrOutput {
	return o
}

func (o ArgoCDSpecPrometheusRoutePtrOutput) Elem() ArgoCDSpecPrometheusRouteOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusRoute) ArgoCDSpecPrometheusRoute { return *v }).(ArgoCDSpecPrometheusRouteOutput)
}

// Annotations is the map of annotations to use for the Route resource.
func (o ArgoCDSpecPrometheusRoutePtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusRoute) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Enabled will toggle the creation of the OpenShift Route.
func (o ArgoCDSpecPrometheusRoutePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusRoute) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Path the router watches for, to route traffic for to the service.
func (o ArgoCDSpecPrometheusRoutePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusRoute) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// TLS provides the ability to configure certificates and termination for the Route.
func (o ArgoCDSpecPrometheusRoutePtrOutput) Tls() ArgoCDSpecPrometheusRouteTlsPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusRoute) *ArgoCDSpecPrometheusRouteTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ArgoCDSpecPrometheusRouteTlsPtrOutput)
}

// WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
func (o ArgoCDSpecPrometheusRoutePtrOutput) WildcardPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusRoute) *string {
		if v == nil {
			return nil
		}
		return v.WildcardPolicy
	}).(pulumi.StringPtrOutput)
}

// Annotations is the map of annotations to use for the Route resource.
type ArgoCDSpecPrometheusRouteAnnotations struct {
}

// ArgoCDSpecPrometheusRouteAnnotationsInput is an input type that accepts ArgoCDSpecPrometheusRouteAnnotationsArgs and ArgoCDSpecPrometheusRouteAnnotationsOutput values.
// You can construct a concrete instance of `ArgoCDSpecPrometheusRouteAnnotationsInput` via:
//
//          ArgoCDSpecPrometheusRouteAnnotationsArgs{...}
type ArgoCDSpecPrometheusRouteAnnotationsInput interface {
	pulumi.Input

	ToArgoCDSpecPrometheusRouteAnnotationsOutput() ArgoCDSpecPrometheusRouteAnnotationsOutput
	ToArgoCDSpecPrometheusRouteAnnotationsOutputWithContext(context.Context) ArgoCDSpecPrometheusRouteAnnotationsOutput
}

// Annotations is the map of annotations to use for the Route resource.
type ArgoCDSpecPrometheusRouteAnnotationsArgs struct {
}

func (ArgoCDSpecPrometheusRouteAnnotationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecPrometheusRouteAnnotations)(nil)).Elem()
}

func (i ArgoCDSpecPrometheusRouteAnnotationsArgs) ToArgoCDSpecPrometheusRouteAnnotationsOutput() ArgoCDSpecPrometheusRouteAnnotationsOutput {
	return i.ToArgoCDSpecPrometheusRouteAnnotationsOutputWithContext(context.Background())
}

func (i ArgoCDSpecPrometheusRouteAnnotationsArgs) ToArgoCDSpecPrometheusRouteAnnotationsOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusRouteAnnotationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPrometheusRouteAnnotationsOutput)
}

// Annotations is the map of annotations to use for the Route resource.
type ArgoCDSpecPrometheusRouteAnnotationsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecPrometheusRouteAnnotationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecPrometheusRouteAnnotations)(nil)).Elem()
}

func (o ArgoCDSpecPrometheusRouteAnnotationsOutput) ToArgoCDSpecPrometheusRouteAnnotationsOutput() ArgoCDSpecPrometheusRouteAnnotationsOutput {
	return o
}

func (o ArgoCDSpecPrometheusRouteAnnotationsOutput) ToArgoCDSpecPrometheusRouteAnnotationsOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusRouteAnnotationsOutput {
	return o
}

// TLS provides the ability to configure certificates and termination for the Route.
type ArgoCDSpecPrometheusRouteTls struct {
	// caCertificate provides the cert authority certificate contents
	CaCertificate *string `pulumi:"caCertificate"`
	// certificate provides certificate contents
	Certificate *string `pulumi:"certificate"`
	// destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
	DestinationCACertificate *string `pulumi:"destinationCACertificate"`
	// insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.
	//  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
	InsecureEdgeTerminationPolicy *string `pulumi:"insecureEdgeTerminationPolicy"`
	// key provides key file contents
	Key *string `pulumi:"key"`
	// termination indicates termination type.
	Termination string `pulumi:"termination"`
}

// ArgoCDSpecPrometheusRouteTlsInput is an input type that accepts ArgoCDSpecPrometheusRouteTlsArgs and ArgoCDSpecPrometheusRouteTlsOutput values.
// You can construct a concrete instance of `ArgoCDSpecPrometheusRouteTlsInput` via:
//
//          ArgoCDSpecPrometheusRouteTlsArgs{...}
type ArgoCDSpecPrometheusRouteTlsInput interface {
	pulumi.Input

	ToArgoCDSpecPrometheusRouteTlsOutput() ArgoCDSpecPrometheusRouteTlsOutput
	ToArgoCDSpecPrometheusRouteTlsOutputWithContext(context.Context) ArgoCDSpecPrometheusRouteTlsOutput
}

// TLS provides the ability to configure certificates and termination for the Route.
type ArgoCDSpecPrometheusRouteTlsArgs struct {
	// caCertificate provides the cert authority certificate contents
	CaCertificate pulumi.StringPtrInput `pulumi:"caCertificate"`
	// certificate provides certificate contents
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
	DestinationCACertificate pulumi.StringPtrInput `pulumi:"destinationCACertificate"`
	// insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.
	//  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
	InsecureEdgeTerminationPolicy pulumi.StringPtrInput `pulumi:"insecureEdgeTerminationPolicy"`
	// key provides key file contents
	Key pulumi.StringPtrInput `pulumi:"key"`
	// termination indicates termination type.
	Termination pulumi.StringInput `pulumi:"termination"`
}

func (ArgoCDSpecPrometheusRouteTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecPrometheusRouteTls)(nil)).Elem()
}

func (i ArgoCDSpecPrometheusRouteTlsArgs) ToArgoCDSpecPrometheusRouteTlsOutput() ArgoCDSpecPrometheusRouteTlsOutput {
	return i.ToArgoCDSpecPrometheusRouteTlsOutputWithContext(context.Background())
}

func (i ArgoCDSpecPrometheusRouteTlsArgs) ToArgoCDSpecPrometheusRouteTlsOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusRouteTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPrometheusRouteTlsOutput)
}

func (i ArgoCDSpecPrometheusRouteTlsArgs) ToArgoCDSpecPrometheusRouteTlsPtrOutput() ArgoCDSpecPrometheusRouteTlsPtrOutput {
	return i.ToArgoCDSpecPrometheusRouteTlsPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecPrometheusRouteTlsArgs) ToArgoCDSpecPrometheusRouteTlsPtrOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusRouteTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPrometheusRouteTlsOutput).ToArgoCDSpecPrometheusRouteTlsPtrOutputWithContext(ctx)
}

// ArgoCDSpecPrometheusRouteTlsPtrInput is an input type that accepts ArgoCDSpecPrometheusRouteTlsArgs, ArgoCDSpecPrometheusRouteTlsPtr and ArgoCDSpecPrometheusRouteTlsPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecPrometheusRouteTlsPtrInput` via:
//
//          ArgoCDSpecPrometheusRouteTlsArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecPrometheusRouteTlsPtrInput interface {
	pulumi.Input

	ToArgoCDSpecPrometheusRouteTlsPtrOutput() ArgoCDSpecPrometheusRouteTlsPtrOutput
	ToArgoCDSpecPrometheusRouteTlsPtrOutputWithContext(context.Context) ArgoCDSpecPrometheusRouteTlsPtrOutput
}

type argoCDSpecPrometheusRouteTlsPtrType ArgoCDSpecPrometheusRouteTlsArgs

func ArgoCDSpecPrometheusRouteTlsPtr(v *ArgoCDSpecPrometheusRouteTlsArgs) ArgoCDSpecPrometheusRouteTlsPtrInput {
	return (*argoCDSpecPrometheusRouteTlsPtrType)(v)
}

func (*argoCDSpecPrometheusRouteTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecPrometheusRouteTls)(nil)).Elem()
}

func (i *argoCDSpecPrometheusRouteTlsPtrType) ToArgoCDSpecPrometheusRouteTlsPtrOutput() ArgoCDSpecPrometheusRouteTlsPtrOutput {
	return i.ToArgoCDSpecPrometheusRouteTlsPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecPrometheusRouteTlsPtrType) ToArgoCDSpecPrometheusRouteTlsPtrOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusRouteTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecPrometheusRouteTlsPtrOutput)
}

// TLS provides the ability to configure certificates and termination for the Route.
type ArgoCDSpecPrometheusRouteTlsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecPrometheusRouteTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecPrometheusRouteTls)(nil)).Elem()
}

func (o ArgoCDSpecPrometheusRouteTlsOutput) ToArgoCDSpecPrometheusRouteTlsOutput() ArgoCDSpecPrometheusRouteTlsOutput {
	return o
}

func (o ArgoCDSpecPrometheusRouteTlsOutput) ToArgoCDSpecPrometheusRouteTlsOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusRouteTlsOutput {
	return o
}

func (o ArgoCDSpecPrometheusRouteTlsOutput) ToArgoCDSpecPrometheusRouteTlsPtrOutput() ArgoCDSpecPrometheusRouteTlsPtrOutput {
	return o.ToArgoCDSpecPrometheusRouteTlsPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecPrometheusRouteTlsOutput) ToArgoCDSpecPrometheusRouteTlsPtrOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusRouteTlsPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusRouteTls) *ArgoCDSpecPrometheusRouteTls {
		return &v
	}).(ArgoCDSpecPrometheusRouteTlsPtrOutput)
}

// caCertificate provides the cert authority certificate contents
func (o ArgoCDSpecPrometheusRouteTlsOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusRouteTls) *string { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

// certificate provides certificate contents
func (o ArgoCDSpecPrometheusRouteTlsOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusRouteTls) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
func (o ArgoCDSpecPrometheusRouteTlsOutput) DestinationCACertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusRouteTls) *string { return v.DestinationCACertificate }).(pulumi.StringPtrOutput)
}

// insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.
//  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
func (o ArgoCDSpecPrometheusRouteTlsOutput) InsecureEdgeTerminationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusRouteTls) *string { return v.InsecureEdgeTerminationPolicy }).(pulumi.StringPtrOutput)
}

// key provides key file contents
func (o ArgoCDSpecPrometheusRouteTlsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusRouteTls) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// termination indicates termination type.
func (o ArgoCDSpecPrometheusRouteTlsOutput) Termination() pulumi.StringOutput {
	return o.ApplyT(func(v ArgoCDSpecPrometheusRouteTls) string { return v.Termination }).(pulumi.StringOutput)
}

type ArgoCDSpecPrometheusRouteTlsPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecPrometheusRouteTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecPrometheusRouteTls)(nil)).Elem()
}

func (o ArgoCDSpecPrometheusRouteTlsPtrOutput) ToArgoCDSpecPrometheusRouteTlsPtrOutput() ArgoCDSpecPrometheusRouteTlsPtrOutput {
	return o
}

func (o ArgoCDSpecPrometheusRouteTlsPtrOutput) ToArgoCDSpecPrometheusRouteTlsPtrOutputWithContext(ctx context.Context) ArgoCDSpecPrometheusRouteTlsPtrOutput {
	return o
}

func (o ArgoCDSpecPrometheusRouteTlsPtrOutput) Elem() ArgoCDSpecPrometheusRouteTlsOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusRouteTls) ArgoCDSpecPrometheusRouteTls { return *v }).(ArgoCDSpecPrometheusRouteTlsOutput)
}

// caCertificate provides the cert authority certificate contents
func (o ArgoCDSpecPrometheusRouteTlsPtrOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusRouteTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificate
	}).(pulumi.StringPtrOutput)
}

// certificate provides certificate contents
func (o ArgoCDSpecPrometheusRouteTlsPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusRouteTls) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
func (o ArgoCDSpecPrometheusRouteTlsPtrOutput) DestinationCACertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusRouteTls) *string {
		if v == nil {
			return nil
		}
		return v.DestinationCACertificate
	}).(pulumi.StringPtrOutput)
}

// insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.
//  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
func (o ArgoCDSpecPrometheusRouteTlsPtrOutput) InsecureEdgeTerminationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusRouteTls) *string {
		if v == nil {
			return nil
		}
		return v.InsecureEdgeTerminationPolicy
	}).(pulumi.StringPtrOutput)
}

// key provides key file contents
func (o ArgoCDSpecPrometheusRouteTlsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusRouteTls) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// termination indicates termination type.
func (o ArgoCDSpecPrometheusRouteTlsPtrOutput) Termination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecPrometheusRouteTls) *string {
		if v == nil {
			return nil
		}
		return &v.Termination
	}).(pulumi.StringPtrOutput)
}

// RBAC defines the RBAC configuration for Argo CD.
type ArgoCDSpecRbac struct {
	// DefaultPolicy is the name of the default role which Argo CD will falls back to, when authorizing API requests (optional). If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
	DefaultPolicy *string `pulumi:"defaultPolicy"`
	// Policy is CSV containing user-defined RBAC policies and role definitions. Policy rules are in the form:   p, subject, resource, action, object, effect Role definitions and bindings are in the form:   g, subject, inherited-subject See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.
	Policy *string `pulumi:"policy"`
	// Scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope). If omitted, defaults to: '[groups]'.
	Scopes *string `pulumi:"scopes"`
}

// ArgoCDSpecRbacInput is an input type that accepts ArgoCDSpecRbacArgs and ArgoCDSpecRbacOutput values.
// You can construct a concrete instance of `ArgoCDSpecRbacInput` via:
//
//          ArgoCDSpecRbacArgs{...}
type ArgoCDSpecRbacInput interface {
	pulumi.Input

	ToArgoCDSpecRbacOutput() ArgoCDSpecRbacOutput
	ToArgoCDSpecRbacOutputWithContext(context.Context) ArgoCDSpecRbacOutput
}

// RBAC defines the RBAC configuration for Argo CD.
type ArgoCDSpecRbacArgs struct {
	// DefaultPolicy is the name of the default role which Argo CD will falls back to, when authorizing API requests (optional). If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
	DefaultPolicy pulumi.StringPtrInput `pulumi:"defaultPolicy"`
	// Policy is CSV containing user-defined RBAC policies and role definitions. Policy rules are in the form:   p, subject, resource, action, object, effect Role definitions and bindings are in the form:   g, subject, inherited-subject See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// Scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope). If omitted, defaults to: '[groups]'.
	Scopes pulumi.StringPtrInput `pulumi:"scopes"`
}

func (ArgoCDSpecRbacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRbac)(nil)).Elem()
}

func (i ArgoCDSpecRbacArgs) ToArgoCDSpecRbacOutput() ArgoCDSpecRbacOutput {
	return i.ToArgoCDSpecRbacOutputWithContext(context.Background())
}

func (i ArgoCDSpecRbacArgs) ToArgoCDSpecRbacOutputWithContext(ctx context.Context) ArgoCDSpecRbacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRbacOutput)
}

func (i ArgoCDSpecRbacArgs) ToArgoCDSpecRbacPtrOutput() ArgoCDSpecRbacPtrOutput {
	return i.ToArgoCDSpecRbacPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecRbacArgs) ToArgoCDSpecRbacPtrOutputWithContext(ctx context.Context) ArgoCDSpecRbacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRbacOutput).ToArgoCDSpecRbacPtrOutputWithContext(ctx)
}

// ArgoCDSpecRbacPtrInput is an input type that accepts ArgoCDSpecRbacArgs, ArgoCDSpecRbacPtr and ArgoCDSpecRbacPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecRbacPtrInput` via:
//
//          ArgoCDSpecRbacArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecRbacPtrInput interface {
	pulumi.Input

	ToArgoCDSpecRbacPtrOutput() ArgoCDSpecRbacPtrOutput
	ToArgoCDSpecRbacPtrOutputWithContext(context.Context) ArgoCDSpecRbacPtrOutput
}

type argoCDSpecRbacPtrType ArgoCDSpecRbacArgs

func ArgoCDSpecRbacPtr(v *ArgoCDSpecRbacArgs) ArgoCDSpecRbacPtrInput {
	return (*argoCDSpecRbacPtrType)(v)
}

func (*argoCDSpecRbacPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecRbac)(nil)).Elem()
}

func (i *argoCDSpecRbacPtrType) ToArgoCDSpecRbacPtrOutput() ArgoCDSpecRbacPtrOutput {
	return i.ToArgoCDSpecRbacPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecRbacPtrType) ToArgoCDSpecRbacPtrOutputWithContext(ctx context.Context) ArgoCDSpecRbacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRbacPtrOutput)
}

// RBAC defines the RBAC configuration for Argo CD.
type ArgoCDSpecRbacOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRbacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRbac)(nil)).Elem()
}

func (o ArgoCDSpecRbacOutput) ToArgoCDSpecRbacOutput() ArgoCDSpecRbacOutput {
	return o
}

func (o ArgoCDSpecRbacOutput) ToArgoCDSpecRbacOutputWithContext(ctx context.Context) ArgoCDSpecRbacOutput {
	return o
}

func (o ArgoCDSpecRbacOutput) ToArgoCDSpecRbacPtrOutput() ArgoCDSpecRbacPtrOutput {
	return o.ToArgoCDSpecRbacPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecRbacOutput) ToArgoCDSpecRbacPtrOutputWithContext(ctx context.Context) ArgoCDSpecRbacPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecRbac) *ArgoCDSpecRbac {
		return &v
	}).(ArgoCDSpecRbacPtrOutput)
}

// DefaultPolicy is the name of the default role which Argo CD will falls back to, when authorizing API requests (optional). If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
func (o ArgoCDSpecRbacOutput) DefaultPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecRbac) *string { return v.DefaultPolicy }).(pulumi.StringPtrOutput)
}

// Policy is CSV containing user-defined RBAC policies and role definitions. Policy rules are in the form:   p, subject, resource, action, object, effect Role definitions and bindings are in the form:   g, subject, inherited-subject See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.
func (o ArgoCDSpecRbacOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecRbac) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// Scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope). If omitted, defaults to: '[groups]'.
func (o ArgoCDSpecRbacOutput) Scopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecRbac) *string { return v.Scopes }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecRbacPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRbacPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecRbac)(nil)).Elem()
}

func (o ArgoCDSpecRbacPtrOutput) ToArgoCDSpecRbacPtrOutput() ArgoCDSpecRbacPtrOutput {
	return o
}

func (o ArgoCDSpecRbacPtrOutput) ToArgoCDSpecRbacPtrOutputWithContext(ctx context.Context) ArgoCDSpecRbacPtrOutput {
	return o
}

func (o ArgoCDSpecRbacPtrOutput) Elem() ArgoCDSpecRbacOutput {
	return o.ApplyT(func(v *ArgoCDSpecRbac) ArgoCDSpecRbac { return *v }).(ArgoCDSpecRbacOutput)
}

// DefaultPolicy is the name of the default role which Argo CD will falls back to, when authorizing API requests (optional). If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
func (o ArgoCDSpecRbacPtrOutput) DefaultPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecRbac) *string {
		if v == nil {
			return nil
		}
		return v.DefaultPolicy
	}).(pulumi.StringPtrOutput)
}

// Policy is CSV containing user-defined RBAC policies and role definitions. Policy rules are in the form:   p, subject, resource, action, object, effect Role definitions and bindings are in the form:   g, subject, inherited-subject See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.
func (o ArgoCDSpecRbacPtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecRbac) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

// Scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope). If omitted, defaults to: '[groups]'.
func (o ArgoCDSpecRbacPtrOutput) Scopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecRbac) *string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringPtrOutput)
}

// Redis defines the Redis server options for ArgoCD.
type ArgoCDSpecRedis struct {
	// Image is the Redis container image.
	Image *string `pulumi:"image"`
	// Resources defines the Compute Resources required by the container for Redis.
	Resources *ArgoCDSpecRedisResources `pulumi:"resources"`
	// Version is the Redis container image tag.
	Version *string `pulumi:"version"`
}

// ArgoCDSpecRedisInput is an input type that accepts ArgoCDSpecRedisArgs and ArgoCDSpecRedisOutput values.
// You can construct a concrete instance of `ArgoCDSpecRedisInput` via:
//
//          ArgoCDSpecRedisArgs{...}
type ArgoCDSpecRedisInput interface {
	pulumi.Input

	ToArgoCDSpecRedisOutput() ArgoCDSpecRedisOutput
	ToArgoCDSpecRedisOutputWithContext(context.Context) ArgoCDSpecRedisOutput
}

// Redis defines the Redis server options for ArgoCD.
type ArgoCDSpecRedisArgs struct {
	// Image is the Redis container image.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Resources defines the Compute Resources required by the container for Redis.
	Resources ArgoCDSpecRedisResourcesPtrInput `pulumi:"resources"`
	// Version is the Redis container image tag.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ArgoCDSpecRedisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRedis)(nil)).Elem()
}

func (i ArgoCDSpecRedisArgs) ToArgoCDSpecRedisOutput() ArgoCDSpecRedisOutput {
	return i.ToArgoCDSpecRedisOutputWithContext(context.Background())
}

func (i ArgoCDSpecRedisArgs) ToArgoCDSpecRedisOutputWithContext(ctx context.Context) ArgoCDSpecRedisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRedisOutput)
}

func (i ArgoCDSpecRedisArgs) ToArgoCDSpecRedisPtrOutput() ArgoCDSpecRedisPtrOutput {
	return i.ToArgoCDSpecRedisPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecRedisArgs) ToArgoCDSpecRedisPtrOutputWithContext(ctx context.Context) ArgoCDSpecRedisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRedisOutput).ToArgoCDSpecRedisPtrOutputWithContext(ctx)
}

// ArgoCDSpecRedisPtrInput is an input type that accepts ArgoCDSpecRedisArgs, ArgoCDSpecRedisPtr and ArgoCDSpecRedisPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecRedisPtrInput` via:
//
//          ArgoCDSpecRedisArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecRedisPtrInput interface {
	pulumi.Input

	ToArgoCDSpecRedisPtrOutput() ArgoCDSpecRedisPtrOutput
	ToArgoCDSpecRedisPtrOutputWithContext(context.Context) ArgoCDSpecRedisPtrOutput
}

type argoCDSpecRedisPtrType ArgoCDSpecRedisArgs

func ArgoCDSpecRedisPtr(v *ArgoCDSpecRedisArgs) ArgoCDSpecRedisPtrInput {
	return (*argoCDSpecRedisPtrType)(v)
}

func (*argoCDSpecRedisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecRedis)(nil)).Elem()
}

func (i *argoCDSpecRedisPtrType) ToArgoCDSpecRedisPtrOutput() ArgoCDSpecRedisPtrOutput {
	return i.ToArgoCDSpecRedisPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecRedisPtrType) ToArgoCDSpecRedisPtrOutputWithContext(ctx context.Context) ArgoCDSpecRedisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRedisPtrOutput)
}

// Redis defines the Redis server options for ArgoCD.
type ArgoCDSpecRedisOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRedisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRedis)(nil)).Elem()
}

func (o ArgoCDSpecRedisOutput) ToArgoCDSpecRedisOutput() ArgoCDSpecRedisOutput {
	return o
}

func (o ArgoCDSpecRedisOutput) ToArgoCDSpecRedisOutputWithContext(ctx context.Context) ArgoCDSpecRedisOutput {
	return o
}

func (o ArgoCDSpecRedisOutput) ToArgoCDSpecRedisPtrOutput() ArgoCDSpecRedisPtrOutput {
	return o.ToArgoCDSpecRedisPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecRedisOutput) ToArgoCDSpecRedisPtrOutputWithContext(ctx context.Context) ArgoCDSpecRedisPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecRedis) *ArgoCDSpecRedis {
		return &v
	}).(ArgoCDSpecRedisPtrOutput)
}

// Image is the Redis container image.
func (o ArgoCDSpecRedisOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecRedis) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Resources defines the Compute Resources required by the container for Redis.
func (o ArgoCDSpecRedisOutput) Resources() ArgoCDSpecRedisResourcesPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecRedis) *ArgoCDSpecRedisResources { return v.Resources }).(ArgoCDSpecRedisResourcesPtrOutput)
}

// Version is the Redis container image tag.
func (o ArgoCDSpecRedisOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecRedis) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecRedisPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRedisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecRedis)(nil)).Elem()
}

func (o ArgoCDSpecRedisPtrOutput) ToArgoCDSpecRedisPtrOutput() ArgoCDSpecRedisPtrOutput {
	return o
}

func (o ArgoCDSpecRedisPtrOutput) ToArgoCDSpecRedisPtrOutputWithContext(ctx context.Context) ArgoCDSpecRedisPtrOutput {
	return o
}

func (o ArgoCDSpecRedisPtrOutput) Elem() ArgoCDSpecRedisOutput {
	return o.ApplyT(func(v *ArgoCDSpecRedis) ArgoCDSpecRedis { return *v }).(ArgoCDSpecRedisOutput)
}

// Image is the Redis container image.
func (o ArgoCDSpecRedisPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecRedis) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Resources defines the Compute Resources required by the container for Redis.
func (o ArgoCDSpecRedisPtrOutput) Resources() ArgoCDSpecRedisResourcesPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecRedis) *ArgoCDSpecRedisResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ArgoCDSpecRedisResourcesPtrOutput)
}

// Version is the Redis container image tag.
func (o ArgoCDSpecRedisPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecRedis) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Resources defines the Compute Resources required by the container for Redis.
type ArgoCDSpecRedisResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]ArgoCDSpecRedisResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]ArgoCDSpecRedisResourcesRequests `pulumi:"requests"`
}

// ArgoCDSpecRedisResourcesInput is an input type that accepts ArgoCDSpecRedisResourcesArgs and ArgoCDSpecRedisResourcesOutput values.
// You can construct a concrete instance of `ArgoCDSpecRedisResourcesInput` via:
//
//          ArgoCDSpecRedisResourcesArgs{...}
type ArgoCDSpecRedisResourcesInput interface {
	pulumi.Input

	ToArgoCDSpecRedisResourcesOutput() ArgoCDSpecRedisResourcesOutput
	ToArgoCDSpecRedisResourcesOutputWithContext(context.Context) ArgoCDSpecRedisResourcesOutput
}

// Resources defines the Compute Resources required by the container for Redis.
type ArgoCDSpecRedisResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits ArgoCDSpecRedisResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests ArgoCDSpecRedisResourcesRequestsMapInput `pulumi:"requests"`
}

func (ArgoCDSpecRedisResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRedisResources)(nil)).Elem()
}

func (i ArgoCDSpecRedisResourcesArgs) ToArgoCDSpecRedisResourcesOutput() ArgoCDSpecRedisResourcesOutput {
	return i.ToArgoCDSpecRedisResourcesOutputWithContext(context.Background())
}

func (i ArgoCDSpecRedisResourcesArgs) ToArgoCDSpecRedisResourcesOutputWithContext(ctx context.Context) ArgoCDSpecRedisResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRedisResourcesOutput)
}

func (i ArgoCDSpecRedisResourcesArgs) ToArgoCDSpecRedisResourcesPtrOutput() ArgoCDSpecRedisResourcesPtrOutput {
	return i.ToArgoCDSpecRedisResourcesPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecRedisResourcesArgs) ToArgoCDSpecRedisResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecRedisResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRedisResourcesOutput).ToArgoCDSpecRedisResourcesPtrOutputWithContext(ctx)
}

// ArgoCDSpecRedisResourcesPtrInput is an input type that accepts ArgoCDSpecRedisResourcesArgs, ArgoCDSpecRedisResourcesPtr and ArgoCDSpecRedisResourcesPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecRedisResourcesPtrInput` via:
//
//          ArgoCDSpecRedisResourcesArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecRedisResourcesPtrInput interface {
	pulumi.Input

	ToArgoCDSpecRedisResourcesPtrOutput() ArgoCDSpecRedisResourcesPtrOutput
	ToArgoCDSpecRedisResourcesPtrOutputWithContext(context.Context) ArgoCDSpecRedisResourcesPtrOutput
}

type argoCDSpecRedisResourcesPtrType ArgoCDSpecRedisResourcesArgs

func ArgoCDSpecRedisResourcesPtr(v *ArgoCDSpecRedisResourcesArgs) ArgoCDSpecRedisResourcesPtrInput {
	return (*argoCDSpecRedisResourcesPtrType)(v)
}

func (*argoCDSpecRedisResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecRedisResources)(nil)).Elem()
}

func (i *argoCDSpecRedisResourcesPtrType) ToArgoCDSpecRedisResourcesPtrOutput() ArgoCDSpecRedisResourcesPtrOutput {
	return i.ToArgoCDSpecRedisResourcesPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecRedisResourcesPtrType) ToArgoCDSpecRedisResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecRedisResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRedisResourcesPtrOutput)
}

// Resources defines the Compute Resources required by the container for Redis.
type ArgoCDSpecRedisResourcesOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRedisResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRedisResources)(nil)).Elem()
}

func (o ArgoCDSpecRedisResourcesOutput) ToArgoCDSpecRedisResourcesOutput() ArgoCDSpecRedisResourcesOutput {
	return o
}

func (o ArgoCDSpecRedisResourcesOutput) ToArgoCDSpecRedisResourcesOutputWithContext(ctx context.Context) ArgoCDSpecRedisResourcesOutput {
	return o
}

func (o ArgoCDSpecRedisResourcesOutput) ToArgoCDSpecRedisResourcesPtrOutput() ArgoCDSpecRedisResourcesPtrOutput {
	return o.ToArgoCDSpecRedisResourcesPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecRedisResourcesOutput) ToArgoCDSpecRedisResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecRedisResourcesPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecRedisResources) *ArgoCDSpecRedisResources {
		return &v
	}).(ArgoCDSpecRedisResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecRedisResourcesOutput) Limits() ArgoCDSpecRedisResourcesLimitsMapOutput {
	return o.ApplyT(func(v ArgoCDSpecRedisResources) map[string]ArgoCDSpecRedisResourcesLimits { return v.Limits }).(ArgoCDSpecRedisResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecRedisResourcesOutput) Requests() ArgoCDSpecRedisResourcesRequestsMapOutput {
	return o.ApplyT(func(v ArgoCDSpecRedisResources) map[string]ArgoCDSpecRedisResourcesRequests { return v.Requests }).(ArgoCDSpecRedisResourcesRequestsMapOutput)
}

type ArgoCDSpecRedisResourcesPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRedisResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecRedisResources)(nil)).Elem()
}

func (o ArgoCDSpecRedisResourcesPtrOutput) ToArgoCDSpecRedisResourcesPtrOutput() ArgoCDSpecRedisResourcesPtrOutput {
	return o
}

func (o ArgoCDSpecRedisResourcesPtrOutput) ToArgoCDSpecRedisResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecRedisResourcesPtrOutput {
	return o
}

func (o ArgoCDSpecRedisResourcesPtrOutput) Elem() ArgoCDSpecRedisResourcesOutput {
	return o.ApplyT(func(v *ArgoCDSpecRedisResources) ArgoCDSpecRedisResources { return *v }).(ArgoCDSpecRedisResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecRedisResourcesPtrOutput) Limits() ArgoCDSpecRedisResourcesLimitsMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecRedisResources) map[string]ArgoCDSpecRedisResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(ArgoCDSpecRedisResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecRedisResourcesPtrOutput) Requests() ArgoCDSpecRedisResourcesRequestsMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecRedisResources) map[string]ArgoCDSpecRedisResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(ArgoCDSpecRedisResourcesRequestsMapOutput)
}

type ArgoCDSpecRedisResourcesLimits struct {
}

// ArgoCDSpecRedisResourcesLimitsInput is an input type that accepts ArgoCDSpecRedisResourcesLimitsArgs and ArgoCDSpecRedisResourcesLimitsOutput values.
// You can construct a concrete instance of `ArgoCDSpecRedisResourcesLimitsInput` via:
//
//          ArgoCDSpecRedisResourcesLimitsArgs{...}
type ArgoCDSpecRedisResourcesLimitsInput interface {
	pulumi.Input

	ToArgoCDSpecRedisResourcesLimitsOutput() ArgoCDSpecRedisResourcesLimitsOutput
	ToArgoCDSpecRedisResourcesLimitsOutputWithContext(context.Context) ArgoCDSpecRedisResourcesLimitsOutput
}

type ArgoCDSpecRedisResourcesLimitsArgs struct {
}

func (ArgoCDSpecRedisResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRedisResourcesLimits)(nil)).Elem()
}

func (i ArgoCDSpecRedisResourcesLimitsArgs) ToArgoCDSpecRedisResourcesLimitsOutput() ArgoCDSpecRedisResourcesLimitsOutput {
	return i.ToArgoCDSpecRedisResourcesLimitsOutputWithContext(context.Background())
}

func (i ArgoCDSpecRedisResourcesLimitsArgs) ToArgoCDSpecRedisResourcesLimitsOutputWithContext(ctx context.Context) ArgoCDSpecRedisResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRedisResourcesLimitsOutput)
}

// ArgoCDSpecRedisResourcesLimitsMapInput is an input type that accepts ArgoCDSpecRedisResourcesLimitsMap and ArgoCDSpecRedisResourcesLimitsMapOutput values.
// You can construct a concrete instance of `ArgoCDSpecRedisResourcesLimitsMapInput` via:
//
//          ArgoCDSpecRedisResourcesLimitsMap{ "key": ArgoCDSpecRedisResourcesLimitsArgs{...} }
type ArgoCDSpecRedisResourcesLimitsMapInput interface {
	pulumi.Input

	ToArgoCDSpecRedisResourcesLimitsMapOutput() ArgoCDSpecRedisResourcesLimitsMapOutput
	ToArgoCDSpecRedisResourcesLimitsMapOutputWithContext(context.Context) ArgoCDSpecRedisResourcesLimitsMapOutput
}

type ArgoCDSpecRedisResourcesLimitsMap map[string]ArgoCDSpecRedisResourcesLimitsInput

func (ArgoCDSpecRedisResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecRedisResourcesLimits)(nil)).Elem()
}

func (i ArgoCDSpecRedisResourcesLimitsMap) ToArgoCDSpecRedisResourcesLimitsMapOutput() ArgoCDSpecRedisResourcesLimitsMapOutput {
	return i.ToArgoCDSpecRedisResourcesLimitsMapOutputWithContext(context.Background())
}

func (i ArgoCDSpecRedisResourcesLimitsMap) ToArgoCDSpecRedisResourcesLimitsMapOutputWithContext(ctx context.Context) ArgoCDSpecRedisResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRedisResourcesLimitsMapOutput)
}

type ArgoCDSpecRedisResourcesLimitsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRedisResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRedisResourcesLimits)(nil)).Elem()
}

func (o ArgoCDSpecRedisResourcesLimitsOutput) ToArgoCDSpecRedisResourcesLimitsOutput() ArgoCDSpecRedisResourcesLimitsOutput {
	return o
}

func (o ArgoCDSpecRedisResourcesLimitsOutput) ToArgoCDSpecRedisResourcesLimitsOutputWithContext(ctx context.Context) ArgoCDSpecRedisResourcesLimitsOutput {
	return o
}

type ArgoCDSpecRedisResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRedisResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecRedisResourcesLimits)(nil)).Elem()
}

func (o ArgoCDSpecRedisResourcesLimitsMapOutput) ToArgoCDSpecRedisResourcesLimitsMapOutput() ArgoCDSpecRedisResourcesLimitsMapOutput {
	return o
}

func (o ArgoCDSpecRedisResourcesLimitsMapOutput) ToArgoCDSpecRedisResourcesLimitsMapOutputWithContext(ctx context.Context) ArgoCDSpecRedisResourcesLimitsMapOutput {
	return o
}

func (o ArgoCDSpecRedisResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) ArgoCDSpecRedisResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArgoCDSpecRedisResourcesLimits {
		return vs[0].(map[string]ArgoCDSpecRedisResourcesLimits)[vs[1].(string)]
	}).(ArgoCDSpecRedisResourcesLimitsOutput)
}

type ArgoCDSpecRedisResourcesRequests struct {
}

// ArgoCDSpecRedisResourcesRequestsInput is an input type that accepts ArgoCDSpecRedisResourcesRequestsArgs and ArgoCDSpecRedisResourcesRequestsOutput values.
// You can construct a concrete instance of `ArgoCDSpecRedisResourcesRequestsInput` via:
//
//          ArgoCDSpecRedisResourcesRequestsArgs{...}
type ArgoCDSpecRedisResourcesRequestsInput interface {
	pulumi.Input

	ToArgoCDSpecRedisResourcesRequestsOutput() ArgoCDSpecRedisResourcesRequestsOutput
	ToArgoCDSpecRedisResourcesRequestsOutputWithContext(context.Context) ArgoCDSpecRedisResourcesRequestsOutput
}

type ArgoCDSpecRedisResourcesRequestsArgs struct {
}

func (ArgoCDSpecRedisResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRedisResourcesRequests)(nil)).Elem()
}

func (i ArgoCDSpecRedisResourcesRequestsArgs) ToArgoCDSpecRedisResourcesRequestsOutput() ArgoCDSpecRedisResourcesRequestsOutput {
	return i.ToArgoCDSpecRedisResourcesRequestsOutputWithContext(context.Background())
}

func (i ArgoCDSpecRedisResourcesRequestsArgs) ToArgoCDSpecRedisResourcesRequestsOutputWithContext(ctx context.Context) ArgoCDSpecRedisResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRedisResourcesRequestsOutput)
}

// ArgoCDSpecRedisResourcesRequestsMapInput is an input type that accepts ArgoCDSpecRedisResourcesRequestsMap and ArgoCDSpecRedisResourcesRequestsMapOutput values.
// You can construct a concrete instance of `ArgoCDSpecRedisResourcesRequestsMapInput` via:
//
//          ArgoCDSpecRedisResourcesRequestsMap{ "key": ArgoCDSpecRedisResourcesRequestsArgs{...} }
type ArgoCDSpecRedisResourcesRequestsMapInput interface {
	pulumi.Input

	ToArgoCDSpecRedisResourcesRequestsMapOutput() ArgoCDSpecRedisResourcesRequestsMapOutput
	ToArgoCDSpecRedisResourcesRequestsMapOutputWithContext(context.Context) ArgoCDSpecRedisResourcesRequestsMapOutput
}

type ArgoCDSpecRedisResourcesRequestsMap map[string]ArgoCDSpecRedisResourcesRequestsInput

func (ArgoCDSpecRedisResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecRedisResourcesRequests)(nil)).Elem()
}

func (i ArgoCDSpecRedisResourcesRequestsMap) ToArgoCDSpecRedisResourcesRequestsMapOutput() ArgoCDSpecRedisResourcesRequestsMapOutput {
	return i.ToArgoCDSpecRedisResourcesRequestsMapOutputWithContext(context.Background())
}

func (i ArgoCDSpecRedisResourcesRequestsMap) ToArgoCDSpecRedisResourcesRequestsMapOutputWithContext(ctx context.Context) ArgoCDSpecRedisResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRedisResourcesRequestsMapOutput)
}

type ArgoCDSpecRedisResourcesRequestsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRedisResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRedisResourcesRequests)(nil)).Elem()
}

func (o ArgoCDSpecRedisResourcesRequestsOutput) ToArgoCDSpecRedisResourcesRequestsOutput() ArgoCDSpecRedisResourcesRequestsOutput {
	return o
}

func (o ArgoCDSpecRedisResourcesRequestsOutput) ToArgoCDSpecRedisResourcesRequestsOutputWithContext(ctx context.Context) ArgoCDSpecRedisResourcesRequestsOutput {
	return o
}

type ArgoCDSpecRedisResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRedisResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecRedisResourcesRequests)(nil)).Elem()
}

func (o ArgoCDSpecRedisResourcesRequestsMapOutput) ToArgoCDSpecRedisResourcesRequestsMapOutput() ArgoCDSpecRedisResourcesRequestsMapOutput {
	return o
}

func (o ArgoCDSpecRedisResourcesRequestsMapOutput) ToArgoCDSpecRedisResourcesRequestsMapOutputWithContext(ctx context.Context) ArgoCDSpecRedisResourcesRequestsMapOutput {
	return o
}

func (o ArgoCDSpecRedisResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) ArgoCDSpecRedisResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArgoCDSpecRedisResourcesRequests {
		return vs[0].(map[string]ArgoCDSpecRedisResourcesRequests)[vs[1].(string)]
	}).(ArgoCDSpecRedisResourcesRequestsOutput)
}

// Repo defines the repo server options for Argo CD.
type ArgoCDSpecRepo struct {
	// MountSAToken describes whether you would like to have the Repo server mount the service account token
	Mountsatoken *bool `pulumi:"mountsatoken"`
	// Resources defines the Compute Resources required by the container for Redis.
	Resources *ArgoCDSpecRepoResources `pulumi:"resources"`
	// ServiceAccount defines the ServiceAccount user that you would like the Repo server to use
	Serviceaccount *string `pulumi:"serviceaccount"`
}

// ArgoCDSpecRepoInput is an input type that accepts ArgoCDSpecRepoArgs and ArgoCDSpecRepoOutput values.
// You can construct a concrete instance of `ArgoCDSpecRepoInput` via:
//
//          ArgoCDSpecRepoArgs{...}
type ArgoCDSpecRepoInput interface {
	pulumi.Input

	ToArgoCDSpecRepoOutput() ArgoCDSpecRepoOutput
	ToArgoCDSpecRepoOutputWithContext(context.Context) ArgoCDSpecRepoOutput
}

// Repo defines the repo server options for Argo CD.
type ArgoCDSpecRepoArgs struct {
	// MountSAToken describes whether you would like to have the Repo server mount the service account token
	Mountsatoken pulumi.BoolPtrInput `pulumi:"mountsatoken"`
	// Resources defines the Compute Resources required by the container for Redis.
	Resources ArgoCDSpecRepoResourcesPtrInput `pulumi:"resources"`
	// ServiceAccount defines the ServiceAccount user that you would like the Repo server to use
	Serviceaccount pulumi.StringPtrInput `pulumi:"serviceaccount"`
}

func (ArgoCDSpecRepoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRepo)(nil)).Elem()
}

func (i ArgoCDSpecRepoArgs) ToArgoCDSpecRepoOutput() ArgoCDSpecRepoOutput {
	return i.ToArgoCDSpecRepoOutputWithContext(context.Background())
}

func (i ArgoCDSpecRepoArgs) ToArgoCDSpecRepoOutputWithContext(ctx context.Context) ArgoCDSpecRepoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRepoOutput)
}

func (i ArgoCDSpecRepoArgs) ToArgoCDSpecRepoPtrOutput() ArgoCDSpecRepoPtrOutput {
	return i.ToArgoCDSpecRepoPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecRepoArgs) ToArgoCDSpecRepoPtrOutputWithContext(ctx context.Context) ArgoCDSpecRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRepoOutput).ToArgoCDSpecRepoPtrOutputWithContext(ctx)
}

// ArgoCDSpecRepoPtrInput is an input type that accepts ArgoCDSpecRepoArgs, ArgoCDSpecRepoPtr and ArgoCDSpecRepoPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecRepoPtrInput` via:
//
//          ArgoCDSpecRepoArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecRepoPtrInput interface {
	pulumi.Input

	ToArgoCDSpecRepoPtrOutput() ArgoCDSpecRepoPtrOutput
	ToArgoCDSpecRepoPtrOutputWithContext(context.Context) ArgoCDSpecRepoPtrOutput
}

type argoCDSpecRepoPtrType ArgoCDSpecRepoArgs

func ArgoCDSpecRepoPtr(v *ArgoCDSpecRepoArgs) ArgoCDSpecRepoPtrInput {
	return (*argoCDSpecRepoPtrType)(v)
}

func (*argoCDSpecRepoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecRepo)(nil)).Elem()
}

func (i *argoCDSpecRepoPtrType) ToArgoCDSpecRepoPtrOutput() ArgoCDSpecRepoPtrOutput {
	return i.ToArgoCDSpecRepoPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecRepoPtrType) ToArgoCDSpecRepoPtrOutputWithContext(ctx context.Context) ArgoCDSpecRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRepoPtrOutput)
}

// Repo defines the repo server options for Argo CD.
type ArgoCDSpecRepoOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRepoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRepo)(nil)).Elem()
}

func (o ArgoCDSpecRepoOutput) ToArgoCDSpecRepoOutput() ArgoCDSpecRepoOutput {
	return o
}

func (o ArgoCDSpecRepoOutput) ToArgoCDSpecRepoOutputWithContext(ctx context.Context) ArgoCDSpecRepoOutput {
	return o
}

func (o ArgoCDSpecRepoOutput) ToArgoCDSpecRepoPtrOutput() ArgoCDSpecRepoPtrOutput {
	return o.ToArgoCDSpecRepoPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecRepoOutput) ToArgoCDSpecRepoPtrOutputWithContext(ctx context.Context) ArgoCDSpecRepoPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecRepo) *ArgoCDSpecRepo {
		return &v
	}).(ArgoCDSpecRepoPtrOutput)
}

// MountSAToken describes whether you would like to have the Repo server mount the service account token
func (o ArgoCDSpecRepoOutput) Mountsatoken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecRepo) *bool { return v.Mountsatoken }).(pulumi.BoolPtrOutput)
}

// Resources defines the Compute Resources required by the container for Redis.
func (o ArgoCDSpecRepoOutput) Resources() ArgoCDSpecRepoResourcesPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecRepo) *ArgoCDSpecRepoResources { return v.Resources }).(ArgoCDSpecRepoResourcesPtrOutput)
}

// ServiceAccount defines the ServiceAccount user that you would like the Repo server to use
func (o ArgoCDSpecRepoOutput) Serviceaccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecRepo) *string { return v.Serviceaccount }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecRepoPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRepoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecRepo)(nil)).Elem()
}

func (o ArgoCDSpecRepoPtrOutput) ToArgoCDSpecRepoPtrOutput() ArgoCDSpecRepoPtrOutput {
	return o
}

func (o ArgoCDSpecRepoPtrOutput) ToArgoCDSpecRepoPtrOutputWithContext(ctx context.Context) ArgoCDSpecRepoPtrOutput {
	return o
}

func (o ArgoCDSpecRepoPtrOutput) Elem() ArgoCDSpecRepoOutput {
	return o.ApplyT(func(v *ArgoCDSpecRepo) ArgoCDSpecRepo { return *v }).(ArgoCDSpecRepoOutput)
}

// MountSAToken describes whether you would like to have the Repo server mount the service account token
func (o ArgoCDSpecRepoPtrOutput) Mountsatoken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecRepo) *bool {
		if v == nil {
			return nil
		}
		return v.Mountsatoken
	}).(pulumi.BoolPtrOutput)
}

// Resources defines the Compute Resources required by the container for Redis.
func (o ArgoCDSpecRepoPtrOutput) Resources() ArgoCDSpecRepoResourcesPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecRepo) *ArgoCDSpecRepoResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ArgoCDSpecRepoResourcesPtrOutput)
}

// ServiceAccount defines the ServiceAccount user that you would like the Repo server to use
func (o ArgoCDSpecRepoPtrOutput) Serviceaccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecRepo) *string {
		if v == nil {
			return nil
		}
		return v.Serviceaccount
	}).(pulumi.StringPtrOutput)
}

// Resources defines the Compute Resources required by the container for Redis.
type ArgoCDSpecRepoResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]ArgoCDSpecRepoResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]ArgoCDSpecRepoResourcesRequests `pulumi:"requests"`
}

// ArgoCDSpecRepoResourcesInput is an input type that accepts ArgoCDSpecRepoResourcesArgs and ArgoCDSpecRepoResourcesOutput values.
// You can construct a concrete instance of `ArgoCDSpecRepoResourcesInput` via:
//
//          ArgoCDSpecRepoResourcesArgs{...}
type ArgoCDSpecRepoResourcesInput interface {
	pulumi.Input

	ToArgoCDSpecRepoResourcesOutput() ArgoCDSpecRepoResourcesOutput
	ToArgoCDSpecRepoResourcesOutputWithContext(context.Context) ArgoCDSpecRepoResourcesOutput
}

// Resources defines the Compute Resources required by the container for Redis.
type ArgoCDSpecRepoResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits ArgoCDSpecRepoResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests ArgoCDSpecRepoResourcesRequestsMapInput `pulumi:"requests"`
}

func (ArgoCDSpecRepoResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRepoResources)(nil)).Elem()
}

func (i ArgoCDSpecRepoResourcesArgs) ToArgoCDSpecRepoResourcesOutput() ArgoCDSpecRepoResourcesOutput {
	return i.ToArgoCDSpecRepoResourcesOutputWithContext(context.Background())
}

func (i ArgoCDSpecRepoResourcesArgs) ToArgoCDSpecRepoResourcesOutputWithContext(ctx context.Context) ArgoCDSpecRepoResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRepoResourcesOutput)
}

func (i ArgoCDSpecRepoResourcesArgs) ToArgoCDSpecRepoResourcesPtrOutput() ArgoCDSpecRepoResourcesPtrOutput {
	return i.ToArgoCDSpecRepoResourcesPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecRepoResourcesArgs) ToArgoCDSpecRepoResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecRepoResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRepoResourcesOutput).ToArgoCDSpecRepoResourcesPtrOutputWithContext(ctx)
}

// ArgoCDSpecRepoResourcesPtrInput is an input type that accepts ArgoCDSpecRepoResourcesArgs, ArgoCDSpecRepoResourcesPtr and ArgoCDSpecRepoResourcesPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecRepoResourcesPtrInput` via:
//
//          ArgoCDSpecRepoResourcesArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecRepoResourcesPtrInput interface {
	pulumi.Input

	ToArgoCDSpecRepoResourcesPtrOutput() ArgoCDSpecRepoResourcesPtrOutput
	ToArgoCDSpecRepoResourcesPtrOutputWithContext(context.Context) ArgoCDSpecRepoResourcesPtrOutput
}

type argoCDSpecRepoResourcesPtrType ArgoCDSpecRepoResourcesArgs

func ArgoCDSpecRepoResourcesPtr(v *ArgoCDSpecRepoResourcesArgs) ArgoCDSpecRepoResourcesPtrInput {
	return (*argoCDSpecRepoResourcesPtrType)(v)
}

func (*argoCDSpecRepoResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecRepoResources)(nil)).Elem()
}

func (i *argoCDSpecRepoResourcesPtrType) ToArgoCDSpecRepoResourcesPtrOutput() ArgoCDSpecRepoResourcesPtrOutput {
	return i.ToArgoCDSpecRepoResourcesPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecRepoResourcesPtrType) ToArgoCDSpecRepoResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecRepoResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRepoResourcesPtrOutput)
}

// Resources defines the Compute Resources required by the container for Redis.
type ArgoCDSpecRepoResourcesOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRepoResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRepoResources)(nil)).Elem()
}

func (o ArgoCDSpecRepoResourcesOutput) ToArgoCDSpecRepoResourcesOutput() ArgoCDSpecRepoResourcesOutput {
	return o
}

func (o ArgoCDSpecRepoResourcesOutput) ToArgoCDSpecRepoResourcesOutputWithContext(ctx context.Context) ArgoCDSpecRepoResourcesOutput {
	return o
}

func (o ArgoCDSpecRepoResourcesOutput) ToArgoCDSpecRepoResourcesPtrOutput() ArgoCDSpecRepoResourcesPtrOutput {
	return o.ToArgoCDSpecRepoResourcesPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecRepoResourcesOutput) ToArgoCDSpecRepoResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecRepoResourcesPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecRepoResources) *ArgoCDSpecRepoResources {
		return &v
	}).(ArgoCDSpecRepoResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecRepoResourcesOutput) Limits() ArgoCDSpecRepoResourcesLimitsMapOutput {
	return o.ApplyT(func(v ArgoCDSpecRepoResources) map[string]ArgoCDSpecRepoResourcesLimits { return v.Limits }).(ArgoCDSpecRepoResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecRepoResourcesOutput) Requests() ArgoCDSpecRepoResourcesRequestsMapOutput {
	return o.ApplyT(func(v ArgoCDSpecRepoResources) map[string]ArgoCDSpecRepoResourcesRequests { return v.Requests }).(ArgoCDSpecRepoResourcesRequestsMapOutput)
}

type ArgoCDSpecRepoResourcesPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRepoResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecRepoResources)(nil)).Elem()
}

func (o ArgoCDSpecRepoResourcesPtrOutput) ToArgoCDSpecRepoResourcesPtrOutput() ArgoCDSpecRepoResourcesPtrOutput {
	return o
}

func (o ArgoCDSpecRepoResourcesPtrOutput) ToArgoCDSpecRepoResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecRepoResourcesPtrOutput {
	return o
}

func (o ArgoCDSpecRepoResourcesPtrOutput) Elem() ArgoCDSpecRepoResourcesOutput {
	return o.ApplyT(func(v *ArgoCDSpecRepoResources) ArgoCDSpecRepoResources { return *v }).(ArgoCDSpecRepoResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecRepoResourcesPtrOutput) Limits() ArgoCDSpecRepoResourcesLimitsMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecRepoResources) map[string]ArgoCDSpecRepoResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(ArgoCDSpecRepoResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecRepoResourcesPtrOutput) Requests() ArgoCDSpecRepoResourcesRequestsMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecRepoResources) map[string]ArgoCDSpecRepoResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(ArgoCDSpecRepoResourcesRequestsMapOutput)
}

type ArgoCDSpecRepoResourcesLimits struct {
}

// ArgoCDSpecRepoResourcesLimitsInput is an input type that accepts ArgoCDSpecRepoResourcesLimitsArgs and ArgoCDSpecRepoResourcesLimitsOutput values.
// You can construct a concrete instance of `ArgoCDSpecRepoResourcesLimitsInput` via:
//
//          ArgoCDSpecRepoResourcesLimitsArgs{...}
type ArgoCDSpecRepoResourcesLimitsInput interface {
	pulumi.Input

	ToArgoCDSpecRepoResourcesLimitsOutput() ArgoCDSpecRepoResourcesLimitsOutput
	ToArgoCDSpecRepoResourcesLimitsOutputWithContext(context.Context) ArgoCDSpecRepoResourcesLimitsOutput
}

type ArgoCDSpecRepoResourcesLimitsArgs struct {
}

func (ArgoCDSpecRepoResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRepoResourcesLimits)(nil)).Elem()
}

func (i ArgoCDSpecRepoResourcesLimitsArgs) ToArgoCDSpecRepoResourcesLimitsOutput() ArgoCDSpecRepoResourcesLimitsOutput {
	return i.ToArgoCDSpecRepoResourcesLimitsOutputWithContext(context.Background())
}

func (i ArgoCDSpecRepoResourcesLimitsArgs) ToArgoCDSpecRepoResourcesLimitsOutputWithContext(ctx context.Context) ArgoCDSpecRepoResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRepoResourcesLimitsOutput)
}

// ArgoCDSpecRepoResourcesLimitsMapInput is an input type that accepts ArgoCDSpecRepoResourcesLimitsMap and ArgoCDSpecRepoResourcesLimitsMapOutput values.
// You can construct a concrete instance of `ArgoCDSpecRepoResourcesLimitsMapInput` via:
//
//          ArgoCDSpecRepoResourcesLimitsMap{ "key": ArgoCDSpecRepoResourcesLimitsArgs{...} }
type ArgoCDSpecRepoResourcesLimitsMapInput interface {
	pulumi.Input

	ToArgoCDSpecRepoResourcesLimitsMapOutput() ArgoCDSpecRepoResourcesLimitsMapOutput
	ToArgoCDSpecRepoResourcesLimitsMapOutputWithContext(context.Context) ArgoCDSpecRepoResourcesLimitsMapOutput
}

type ArgoCDSpecRepoResourcesLimitsMap map[string]ArgoCDSpecRepoResourcesLimitsInput

func (ArgoCDSpecRepoResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecRepoResourcesLimits)(nil)).Elem()
}

func (i ArgoCDSpecRepoResourcesLimitsMap) ToArgoCDSpecRepoResourcesLimitsMapOutput() ArgoCDSpecRepoResourcesLimitsMapOutput {
	return i.ToArgoCDSpecRepoResourcesLimitsMapOutputWithContext(context.Background())
}

func (i ArgoCDSpecRepoResourcesLimitsMap) ToArgoCDSpecRepoResourcesLimitsMapOutputWithContext(ctx context.Context) ArgoCDSpecRepoResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRepoResourcesLimitsMapOutput)
}

type ArgoCDSpecRepoResourcesLimitsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRepoResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRepoResourcesLimits)(nil)).Elem()
}

func (o ArgoCDSpecRepoResourcesLimitsOutput) ToArgoCDSpecRepoResourcesLimitsOutput() ArgoCDSpecRepoResourcesLimitsOutput {
	return o
}

func (o ArgoCDSpecRepoResourcesLimitsOutput) ToArgoCDSpecRepoResourcesLimitsOutputWithContext(ctx context.Context) ArgoCDSpecRepoResourcesLimitsOutput {
	return o
}

type ArgoCDSpecRepoResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRepoResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecRepoResourcesLimits)(nil)).Elem()
}

func (o ArgoCDSpecRepoResourcesLimitsMapOutput) ToArgoCDSpecRepoResourcesLimitsMapOutput() ArgoCDSpecRepoResourcesLimitsMapOutput {
	return o
}

func (o ArgoCDSpecRepoResourcesLimitsMapOutput) ToArgoCDSpecRepoResourcesLimitsMapOutputWithContext(ctx context.Context) ArgoCDSpecRepoResourcesLimitsMapOutput {
	return o
}

func (o ArgoCDSpecRepoResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) ArgoCDSpecRepoResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArgoCDSpecRepoResourcesLimits {
		return vs[0].(map[string]ArgoCDSpecRepoResourcesLimits)[vs[1].(string)]
	}).(ArgoCDSpecRepoResourcesLimitsOutput)
}

type ArgoCDSpecRepoResourcesRequests struct {
}

// ArgoCDSpecRepoResourcesRequestsInput is an input type that accepts ArgoCDSpecRepoResourcesRequestsArgs and ArgoCDSpecRepoResourcesRequestsOutput values.
// You can construct a concrete instance of `ArgoCDSpecRepoResourcesRequestsInput` via:
//
//          ArgoCDSpecRepoResourcesRequestsArgs{...}
type ArgoCDSpecRepoResourcesRequestsInput interface {
	pulumi.Input

	ToArgoCDSpecRepoResourcesRequestsOutput() ArgoCDSpecRepoResourcesRequestsOutput
	ToArgoCDSpecRepoResourcesRequestsOutputWithContext(context.Context) ArgoCDSpecRepoResourcesRequestsOutput
}

type ArgoCDSpecRepoResourcesRequestsArgs struct {
}

func (ArgoCDSpecRepoResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRepoResourcesRequests)(nil)).Elem()
}

func (i ArgoCDSpecRepoResourcesRequestsArgs) ToArgoCDSpecRepoResourcesRequestsOutput() ArgoCDSpecRepoResourcesRequestsOutput {
	return i.ToArgoCDSpecRepoResourcesRequestsOutputWithContext(context.Background())
}

func (i ArgoCDSpecRepoResourcesRequestsArgs) ToArgoCDSpecRepoResourcesRequestsOutputWithContext(ctx context.Context) ArgoCDSpecRepoResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRepoResourcesRequestsOutput)
}

// ArgoCDSpecRepoResourcesRequestsMapInput is an input type that accepts ArgoCDSpecRepoResourcesRequestsMap and ArgoCDSpecRepoResourcesRequestsMapOutput values.
// You can construct a concrete instance of `ArgoCDSpecRepoResourcesRequestsMapInput` via:
//
//          ArgoCDSpecRepoResourcesRequestsMap{ "key": ArgoCDSpecRepoResourcesRequestsArgs{...} }
type ArgoCDSpecRepoResourcesRequestsMapInput interface {
	pulumi.Input

	ToArgoCDSpecRepoResourcesRequestsMapOutput() ArgoCDSpecRepoResourcesRequestsMapOutput
	ToArgoCDSpecRepoResourcesRequestsMapOutputWithContext(context.Context) ArgoCDSpecRepoResourcesRequestsMapOutput
}

type ArgoCDSpecRepoResourcesRequestsMap map[string]ArgoCDSpecRepoResourcesRequestsInput

func (ArgoCDSpecRepoResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecRepoResourcesRequests)(nil)).Elem()
}

func (i ArgoCDSpecRepoResourcesRequestsMap) ToArgoCDSpecRepoResourcesRequestsMapOutput() ArgoCDSpecRepoResourcesRequestsMapOutput {
	return i.ToArgoCDSpecRepoResourcesRequestsMapOutputWithContext(context.Background())
}

func (i ArgoCDSpecRepoResourcesRequestsMap) ToArgoCDSpecRepoResourcesRequestsMapOutputWithContext(ctx context.Context) ArgoCDSpecRepoResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecRepoResourcesRequestsMapOutput)
}

type ArgoCDSpecRepoResourcesRequestsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRepoResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecRepoResourcesRequests)(nil)).Elem()
}

func (o ArgoCDSpecRepoResourcesRequestsOutput) ToArgoCDSpecRepoResourcesRequestsOutput() ArgoCDSpecRepoResourcesRequestsOutput {
	return o
}

func (o ArgoCDSpecRepoResourcesRequestsOutput) ToArgoCDSpecRepoResourcesRequestsOutputWithContext(ctx context.Context) ArgoCDSpecRepoResourcesRequestsOutput {
	return o
}

type ArgoCDSpecRepoResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecRepoResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecRepoResourcesRequests)(nil)).Elem()
}

func (o ArgoCDSpecRepoResourcesRequestsMapOutput) ToArgoCDSpecRepoResourcesRequestsMapOutput() ArgoCDSpecRepoResourcesRequestsMapOutput {
	return o
}

func (o ArgoCDSpecRepoResourcesRequestsMapOutput) ToArgoCDSpecRepoResourcesRequestsMapOutputWithContext(ctx context.Context) ArgoCDSpecRepoResourcesRequestsMapOutput {
	return o
}

func (o ArgoCDSpecRepoResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) ArgoCDSpecRepoResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArgoCDSpecRepoResourcesRequests {
		return vs[0].(map[string]ArgoCDSpecRepoResourcesRequests)[vs[1].(string)]
	}).(ArgoCDSpecRepoResourcesRequestsOutput)
}

// Server defines the options for the ArgoCD Server component.
type ArgoCDSpecServer struct {
	// Autoscale defines the autoscale options for the Argo CD Server component.
	Autoscale *ArgoCDSpecServerAutoscale `pulumi:"autoscale"`
	// GRPC defines the state for the Argo CD Server GRPC options.
	Grpc *ArgoCDSpecServerGrpc `pulumi:"grpc"`
	// Host is the hostname to use for Ingress/Route resources.
	Host *string `pulumi:"host"`
	// Ingress defines the desired state for an Ingress for the Argo CD Server component.
	Ingress *ArgoCDSpecServerIngress `pulumi:"ingress"`
	// Insecure toggles the insecure flag.
	Insecure *bool `pulumi:"insecure"`
	// Resources defines the Compute Resources required by the container for the Argo CD server component.
	Resources *ArgoCDSpecServerResources `pulumi:"resources"`
	// Route defines the desired state for an OpenShift Route for the Argo CD Server component.
	Route *ArgoCDSpecServerRoute `pulumi:"route"`
	// Service defines the options for the Service backing the ArgoCD Server component.
	Service *ArgoCDSpecServerService `pulumi:"service"`
}

// ArgoCDSpecServerInput is an input type that accepts ArgoCDSpecServerArgs and ArgoCDSpecServerOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerInput` via:
//
//          ArgoCDSpecServerArgs{...}
type ArgoCDSpecServerInput interface {
	pulumi.Input

	ToArgoCDSpecServerOutput() ArgoCDSpecServerOutput
	ToArgoCDSpecServerOutputWithContext(context.Context) ArgoCDSpecServerOutput
}

// Server defines the options for the ArgoCD Server component.
type ArgoCDSpecServerArgs struct {
	// Autoscale defines the autoscale options for the Argo CD Server component.
	Autoscale ArgoCDSpecServerAutoscalePtrInput `pulumi:"autoscale"`
	// GRPC defines the state for the Argo CD Server GRPC options.
	Grpc ArgoCDSpecServerGrpcPtrInput `pulumi:"grpc"`
	// Host is the hostname to use for Ingress/Route resources.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Ingress defines the desired state for an Ingress for the Argo CD Server component.
	Ingress ArgoCDSpecServerIngressPtrInput `pulumi:"ingress"`
	// Insecure toggles the insecure flag.
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// Resources defines the Compute Resources required by the container for the Argo CD server component.
	Resources ArgoCDSpecServerResourcesPtrInput `pulumi:"resources"`
	// Route defines the desired state for an OpenShift Route for the Argo CD Server component.
	Route ArgoCDSpecServerRoutePtrInput `pulumi:"route"`
	// Service defines the options for the Service backing the ArgoCD Server component.
	Service ArgoCDSpecServerServicePtrInput `pulumi:"service"`
}

func (ArgoCDSpecServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServer)(nil)).Elem()
}

func (i ArgoCDSpecServerArgs) ToArgoCDSpecServerOutput() ArgoCDSpecServerOutput {
	return i.ToArgoCDSpecServerOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerArgs) ToArgoCDSpecServerOutputWithContext(ctx context.Context) ArgoCDSpecServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerOutput)
}

func (i ArgoCDSpecServerArgs) ToArgoCDSpecServerPtrOutput() ArgoCDSpecServerPtrOutput {
	return i.ToArgoCDSpecServerPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerArgs) ToArgoCDSpecServerPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerOutput).ToArgoCDSpecServerPtrOutputWithContext(ctx)
}

// ArgoCDSpecServerPtrInput is an input type that accepts ArgoCDSpecServerArgs, ArgoCDSpecServerPtr and ArgoCDSpecServerPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerPtrInput` via:
//
//          ArgoCDSpecServerArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecServerPtrInput interface {
	pulumi.Input

	ToArgoCDSpecServerPtrOutput() ArgoCDSpecServerPtrOutput
	ToArgoCDSpecServerPtrOutputWithContext(context.Context) ArgoCDSpecServerPtrOutput
}

type argoCDSpecServerPtrType ArgoCDSpecServerArgs

func ArgoCDSpecServerPtr(v *ArgoCDSpecServerArgs) ArgoCDSpecServerPtrInput {
	return (*argoCDSpecServerPtrType)(v)
}

func (*argoCDSpecServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServer)(nil)).Elem()
}

func (i *argoCDSpecServerPtrType) ToArgoCDSpecServerPtrOutput() ArgoCDSpecServerPtrOutput {
	return i.ToArgoCDSpecServerPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecServerPtrType) ToArgoCDSpecServerPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerPtrOutput)
}

// Server defines the options for the ArgoCD Server component.
type ArgoCDSpecServerOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServer)(nil)).Elem()
}

func (o ArgoCDSpecServerOutput) ToArgoCDSpecServerOutput() ArgoCDSpecServerOutput {
	return o
}

func (o ArgoCDSpecServerOutput) ToArgoCDSpecServerOutputWithContext(ctx context.Context) ArgoCDSpecServerOutput {
	return o
}

func (o ArgoCDSpecServerOutput) ToArgoCDSpecServerPtrOutput() ArgoCDSpecServerPtrOutput {
	return o.ToArgoCDSpecServerPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecServerOutput) ToArgoCDSpecServerPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServer) *ArgoCDSpecServer {
		return &v
	}).(ArgoCDSpecServerPtrOutput)
}

// Autoscale defines the autoscale options for the Argo CD Server component.
func (o ArgoCDSpecServerOutput) Autoscale() ArgoCDSpecServerAutoscalePtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServer) *ArgoCDSpecServerAutoscale { return v.Autoscale }).(ArgoCDSpecServerAutoscalePtrOutput)
}

// GRPC defines the state for the Argo CD Server GRPC options.
func (o ArgoCDSpecServerOutput) Grpc() ArgoCDSpecServerGrpcPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServer) *ArgoCDSpecServerGrpc { return v.Grpc }).(ArgoCDSpecServerGrpcPtrOutput)
}

// Host is the hostname to use for Ingress/Route resources.
func (o ArgoCDSpecServerOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServer) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Ingress defines the desired state for an Ingress for the Argo CD Server component.
func (o ArgoCDSpecServerOutput) Ingress() ArgoCDSpecServerIngressPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServer) *ArgoCDSpecServerIngress { return v.Ingress }).(ArgoCDSpecServerIngressPtrOutput)
}

// Insecure toggles the insecure flag.
func (o ArgoCDSpecServerOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServer) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// Resources defines the Compute Resources required by the container for the Argo CD server component.
func (o ArgoCDSpecServerOutput) Resources() ArgoCDSpecServerResourcesPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServer) *ArgoCDSpecServerResources { return v.Resources }).(ArgoCDSpecServerResourcesPtrOutput)
}

// Route defines the desired state for an OpenShift Route for the Argo CD Server component.
func (o ArgoCDSpecServerOutput) Route() ArgoCDSpecServerRoutePtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServer) *ArgoCDSpecServerRoute { return v.Route }).(ArgoCDSpecServerRoutePtrOutput)
}

// Service defines the options for the Service backing the ArgoCD Server component.
func (o ArgoCDSpecServerOutput) Service() ArgoCDSpecServerServicePtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServer) *ArgoCDSpecServerService { return v.Service }).(ArgoCDSpecServerServicePtrOutput)
}

type ArgoCDSpecServerPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServer)(nil)).Elem()
}

func (o ArgoCDSpecServerPtrOutput) ToArgoCDSpecServerPtrOutput() ArgoCDSpecServerPtrOutput {
	return o
}

func (o ArgoCDSpecServerPtrOutput) ToArgoCDSpecServerPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerPtrOutput {
	return o
}

func (o ArgoCDSpecServerPtrOutput) Elem() ArgoCDSpecServerOutput {
	return o.ApplyT(func(v *ArgoCDSpecServer) ArgoCDSpecServer { return *v }).(ArgoCDSpecServerOutput)
}

// Autoscale defines the autoscale options for the Argo CD Server component.
func (o ArgoCDSpecServerPtrOutput) Autoscale() ArgoCDSpecServerAutoscalePtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServer) *ArgoCDSpecServerAutoscale {
		if v == nil {
			return nil
		}
		return v.Autoscale
	}).(ArgoCDSpecServerAutoscalePtrOutput)
}

// GRPC defines the state for the Argo CD Server GRPC options.
func (o ArgoCDSpecServerPtrOutput) Grpc() ArgoCDSpecServerGrpcPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServer) *ArgoCDSpecServerGrpc {
		if v == nil {
			return nil
		}
		return v.Grpc
	}).(ArgoCDSpecServerGrpcPtrOutput)
}

// Host is the hostname to use for Ingress/Route resources.
func (o ArgoCDSpecServerPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Ingress defines the desired state for an Ingress for the Argo CD Server component.
func (o ArgoCDSpecServerPtrOutput) Ingress() ArgoCDSpecServerIngressPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServer) *ArgoCDSpecServerIngress {
		if v == nil {
			return nil
		}
		return v.Ingress
	}).(ArgoCDSpecServerIngressPtrOutput)
}

// Insecure toggles the insecure flag.
func (o ArgoCDSpecServerPtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServer) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// Resources defines the Compute Resources required by the container for the Argo CD server component.
func (o ArgoCDSpecServerPtrOutput) Resources() ArgoCDSpecServerResourcesPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServer) *ArgoCDSpecServerResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ArgoCDSpecServerResourcesPtrOutput)
}

// Route defines the desired state for an OpenShift Route for the Argo CD Server component.
func (o ArgoCDSpecServerPtrOutput) Route() ArgoCDSpecServerRoutePtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServer) *ArgoCDSpecServerRoute {
		if v == nil {
			return nil
		}
		return v.Route
	}).(ArgoCDSpecServerRoutePtrOutput)
}

// Service defines the options for the Service backing the ArgoCD Server component.
func (o ArgoCDSpecServerPtrOutput) Service() ArgoCDSpecServerServicePtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServer) *ArgoCDSpecServerService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ArgoCDSpecServerServicePtrOutput)
}

// Autoscale defines the autoscale options for the Argo CD Server component.
type ArgoCDSpecServerAutoscale struct {
	// Enabled will toggle autoscaling support for the Argo CD Server component.
	Enabled bool `pulumi:"enabled"`
	// HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.
	Hpa *ArgoCDSpecServerAutoscaleHpa `pulumi:"hpa"`
}

// ArgoCDSpecServerAutoscaleInput is an input type that accepts ArgoCDSpecServerAutoscaleArgs and ArgoCDSpecServerAutoscaleOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerAutoscaleInput` via:
//
//          ArgoCDSpecServerAutoscaleArgs{...}
type ArgoCDSpecServerAutoscaleInput interface {
	pulumi.Input

	ToArgoCDSpecServerAutoscaleOutput() ArgoCDSpecServerAutoscaleOutput
	ToArgoCDSpecServerAutoscaleOutputWithContext(context.Context) ArgoCDSpecServerAutoscaleOutput
}

// Autoscale defines the autoscale options for the Argo CD Server component.
type ArgoCDSpecServerAutoscaleArgs struct {
	// Enabled will toggle autoscaling support for the Argo CD Server component.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.
	Hpa ArgoCDSpecServerAutoscaleHpaPtrInput `pulumi:"hpa"`
}

func (ArgoCDSpecServerAutoscaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerAutoscale)(nil)).Elem()
}

func (i ArgoCDSpecServerAutoscaleArgs) ToArgoCDSpecServerAutoscaleOutput() ArgoCDSpecServerAutoscaleOutput {
	return i.ToArgoCDSpecServerAutoscaleOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerAutoscaleArgs) ToArgoCDSpecServerAutoscaleOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerAutoscaleOutput)
}

func (i ArgoCDSpecServerAutoscaleArgs) ToArgoCDSpecServerAutoscalePtrOutput() ArgoCDSpecServerAutoscalePtrOutput {
	return i.ToArgoCDSpecServerAutoscalePtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerAutoscaleArgs) ToArgoCDSpecServerAutoscalePtrOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerAutoscaleOutput).ToArgoCDSpecServerAutoscalePtrOutputWithContext(ctx)
}

// ArgoCDSpecServerAutoscalePtrInput is an input type that accepts ArgoCDSpecServerAutoscaleArgs, ArgoCDSpecServerAutoscalePtr and ArgoCDSpecServerAutoscalePtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerAutoscalePtrInput` via:
//
//          ArgoCDSpecServerAutoscaleArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecServerAutoscalePtrInput interface {
	pulumi.Input

	ToArgoCDSpecServerAutoscalePtrOutput() ArgoCDSpecServerAutoscalePtrOutput
	ToArgoCDSpecServerAutoscalePtrOutputWithContext(context.Context) ArgoCDSpecServerAutoscalePtrOutput
}

type argoCDSpecServerAutoscalePtrType ArgoCDSpecServerAutoscaleArgs

func ArgoCDSpecServerAutoscalePtr(v *ArgoCDSpecServerAutoscaleArgs) ArgoCDSpecServerAutoscalePtrInput {
	return (*argoCDSpecServerAutoscalePtrType)(v)
}

func (*argoCDSpecServerAutoscalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerAutoscale)(nil)).Elem()
}

func (i *argoCDSpecServerAutoscalePtrType) ToArgoCDSpecServerAutoscalePtrOutput() ArgoCDSpecServerAutoscalePtrOutput {
	return i.ToArgoCDSpecServerAutoscalePtrOutputWithContext(context.Background())
}

func (i *argoCDSpecServerAutoscalePtrType) ToArgoCDSpecServerAutoscalePtrOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerAutoscalePtrOutput)
}

// Autoscale defines the autoscale options for the Argo CD Server component.
type ArgoCDSpecServerAutoscaleOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerAutoscaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerAutoscale)(nil)).Elem()
}

func (o ArgoCDSpecServerAutoscaleOutput) ToArgoCDSpecServerAutoscaleOutput() ArgoCDSpecServerAutoscaleOutput {
	return o
}

func (o ArgoCDSpecServerAutoscaleOutput) ToArgoCDSpecServerAutoscaleOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscaleOutput {
	return o
}

func (o ArgoCDSpecServerAutoscaleOutput) ToArgoCDSpecServerAutoscalePtrOutput() ArgoCDSpecServerAutoscalePtrOutput {
	return o.ToArgoCDSpecServerAutoscalePtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecServerAutoscaleOutput) ToArgoCDSpecServerAutoscalePtrOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscalePtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerAutoscale) *ArgoCDSpecServerAutoscale {
		return &v
	}).(ArgoCDSpecServerAutoscalePtrOutput)
}

// Enabled will toggle autoscaling support for the Argo CD Server component.
func (o ArgoCDSpecServerAutoscaleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ArgoCDSpecServerAutoscale) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.
func (o ArgoCDSpecServerAutoscaleOutput) Hpa() ArgoCDSpecServerAutoscaleHpaPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerAutoscale) *ArgoCDSpecServerAutoscaleHpa { return v.Hpa }).(ArgoCDSpecServerAutoscaleHpaPtrOutput)
}

type ArgoCDSpecServerAutoscalePtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerAutoscalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerAutoscale)(nil)).Elem()
}

func (o ArgoCDSpecServerAutoscalePtrOutput) ToArgoCDSpecServerAutoscalePtrOutput() ArgoCDSpecServerAutoscalePtrOutput {
	return o
}

func (o ArgoCDSpecServerAutoscalePtrOutput) ToArgoCDSpecServerAutoscalePtrOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscalePtrOutput {
	return o
}

func (o ArgoCDSpecServerAutoscalePtrOutput) Elem() ArgoCDSpecServerAutoscaleOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerAutoscale) ArgoCDSpecServerAutoscale { return *v }).(ArgoCDSpecServerAutoscaleOutput)
}

// Enabled will toggle autoscaling support for the Argo CD Server component.
func (o ArgoCDSpecServerAutoscalePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerAutoscale) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.
func (o ArgoCDSpecServerAutoscalePtrOutput) Hpa() ArgoCDSpecServerAutoscaleHpaPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerAutoscale) *ArgoCDSpecServerAutoscaleHpa {
		if v == nil {
			return nil
		}
		return v.Hpa
	}).(ArgoCDSpecServerAutoscaleHpaPtrOutput)
}

// HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.
type ArgoCDSpecServerAutoscaleHpa struct {
	// upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
	MaxReplicas int `pulumi:"maxReplicas"`
	// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
	MinReplicas *int `pulumi:"minReplicas"`
	// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
	ScaleTargetRef ArgoCDSpecServerAutoscaleHpaScaleTargetRef `pulumi:"scaleTargetRef"`
	// target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
	TargetCPUUtilizationPercentage *int `pulumi:"targetCPUUtilizationPercentage"`
}

// ArgoCDSpecServerAutoscaleHpaInput is an input type that accepts ArgoCDSpecServerAutoscaleHpaArgs and ArgoCDSpecServerAutoscaleHpaOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerAutoscaleHpaInput` via:
//
//          ArgoCDSpecServerAutoscaleHpaArgs{...}
type ArgoCDSpecServerAutoscaleHpaInput interface {
	pulumi.Input

	ToArgoCDSpecServerAutoscaleHpaOutput() ArgoCDSpecServerAutoscaleHpaOutput
	ToArgoCDSpecServerAutoscaleHpaOutputWithContext(context.Context) ArgoCDSpecServerAutoscaleHpaOutput
}

// HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.
type ArgoCDSpecServerAutoscaleHpaArgs struct {
	// upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
	MaxReplicas pulumi.IntInput `pulumi:"maxReplicas"`
	// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
	MinReplicas pulumi.IntPtrInput `pulumi:"minReplicas"`
	// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
	ScaleTargetRef ArgoCDSpecServerAutoscaleHpaScaleTargetRefInput `pulumi:"scaleTargetRef"`
	// target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
	TargetCPUUtilizationPercentage pulumi.IntPtrInput `pulumi:"targetCPUUtilizationPercentage"`
}

func (ArgoCDSpecServerAutoscaleHpaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerAutoscaleHpa)(nil)).Elem()
}

func (i ArgoCDSpecServerAutoscaleHpaArgs) ToArgoCDSpecServerAutoscaleHpaOutput() ArgoCDSpecServerAutoscaleHpaOutput {
	return i.ToArgoCDSpecServerAutoscaleHpaOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerAutoscaleHpaArgs) ToArgoCDSpecServerAutoscaleHpaOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscaleHpaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerAutoscaleHpaOutput)
}

func (i ArgoCDSpecServerAutoscaleHpaArgs) ToArgoCDSpecServerAutoscaleHpaPtrOutput() ArgoCDSpecServerAutoscaleHpaPtrOutput {
	return i.ToArgoCDSpecServerAutoscaleHpaPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerAutoscaleHpaArgs) ToArgoCDSpecServerAutoscaleHpaPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscaleHpaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerAutoscaleHpaOutput).ToArgoCDSpecServerAutoscaleHpaPtrOutputWithContext(ctx)
}

// ArgoCDSpecServerAutoscaleHpaPtrInput is an input type that accepts ArgoCDSpecServerAutoscaleHpaArgs, ArgoCDSpecServerAutoscaleHpaPtr and ArgoCDSpecServerAutoscaleHpaPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerAutoscaleHpaPtrInput` via:
//
//          ArgoCDSpecServerAutoscaleHpaArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecServerAutoscaleHpaPtrInput interface {
	pulumi.Input

	ToArgoCDSpecServerAutoscaleHpaPtrOutput() ArgoCDSpecServerAutoscaleHpaPtrOutput
	ToArgoCDSpecServerAutoscaleHpaPtrOutputWithContext(context.Context) ArgoCDSpecServerAutoscaleHpaPtrOutput
}

type argoCDSpecServerAutoscaleHpaPtrType ArgoCDSpecServerAutoscaleHpaArgs

func ArgoCDSpecServerAutoscaleHpaPtr(v *ArgoCDSpecServerAutoscaleHpaArgs) ArgoCDSpecServerAutoscaleHpaPtrInput {
	return (*argoCDSpecServerAutoscaleHpaPtrType)(v)
}

func (*argoCDSpecServerAutoscaleHpaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerAutoscaleHpa)(nil)).Elem()
}

func (i *argoCDSpecServerAutoscaleHpaPtrType) ToArgoCDSpecServerAutoscaleHpaPtrOutput() ArgoCDSpecServerAutoscaleHpaPtrOutput {
	return i.ToArgoCDSpecServerAutoscaleHpaPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecServerAutoscaleHpaPtrType) ToArgoCDSpecServerAutoscaleHpaPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscaleHpaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerAutoscaleHpaPtrOutput)
}

// HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.
type ArgoCDSpecServerAutoscaleHpaOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerAutoscaleHpaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerAutoscaleHpa)(nil)).Elem()
}

func (o ArgoCDSpecServerAutoscaleHpaOutput) ToArgoCDSpecServerAutoscaleHpaOutput() ArgoCDSpecServerAutoscaleHpaOutput {
	return o
}

func (o ArgoCDSpecServerAutoscaleHpaOutput) ToArgoCDSpecServerAutoscaleHpaOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscaleHpaOutput {
	return o
}

func (o ArgoCDSpecServerAutoscaleHpaOutput) ToArgoCDSpecServerAutoscaleHpaPtrOutput() ArgoCDSpecServerAutoscaleHpaPtrOutput {
	return o.ToArgoCDSpecServerAutoscaleHpaPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecServerAutoscaleHpaOutput) ToArgoCDSpecServerAutoscaleHpaPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscaleHpaPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerAutoscaleHpa) *ArgoCDSpecServerAutoscaleHpa {
		return &v
	}).(ArgoCDSpecServerAutoscaleHpaPtrOutput)
}

// upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
func (o ArgoCDSpecServerAutoscaleHpaOutput) MaxReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v ArgoCDSpecServerAutoscaleHpa) int { return v.MaxReplicas }).(pulumi.IntOutput)
}

// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
func (o ArgoCDSpecServerAutoscaleHpaOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerAutoscaleHpa) *int { return v.MinReplicas }).(pulumi.IntPtrOutput)
}

// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
func (o ArgoCDSpecServerAutoscaleHpaOutput) ScaleTargetRef() ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput {
	return o.ApplyT(func(v ArgoCDSpecServerAutoscaleHpa) ArgoCDSpecServerAutoscaleHpaScaleTargetRef {
		return v.ScaleTargetRef
	}).(ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput)
}

// target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
func (o ArgoCDSpecServerAutoscaleHpaOutput) TargetCPUUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerAutoscaleHpa) *int { return v.TargetCPUUtilizationPercentage }).(pulumi.IntPtrOutput)
}

type ArgoCDSpecServerAutoscaleHpaPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerAutoscaleHpaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerAutoscaleHpa)(nil)).Elem()
}

func (o ArgoCDSpecServerAutoscaleHpaPtrOutput) ToArgoCDSpecServerAutoscaleHpaPtrOutput() ArgoCDSpecServerAutoscaleHpaPtrOutput {
	return o
}

func (o ArgoCDSpecServerAutoscaleHpaPtrOutput) ToArgoCDSpecServerAutoscaleHpaPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscaleHpaPtrOutput {
	return o
}

func (o ArgoCDSpecServerAutoscaleHpaPtrOutput) Elem() ArgoCDSpecServerAutoscaleHpaOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerAutoscaleHpa) ArgoCDSpecServerAutoscaleHpa { return *v }).(ArgoCDSpecServerAutoscaleHpaOutput)
}

// upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
func (o ArgoCDSpecServerAutoscaleHpaPtrOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerAutoscaleHpa) *int {
		if v == nil {
			return nil
		}
		return &v.MaxReplicas
	}).(pulumi.IntPtrOutput)
}

// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
func (o ArgoCDSpecServerAutoscaleHpaPtrOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerAutoscaleHpa) *int {
		if v == nil {
			return nil
		}
		return v.MinReplicas
	}).(pulumi.IntPtrOutput)
}

// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
func (o ArgoCDSpecServerAutoscaleHpaPtrOutput) ScaleTargetRef() ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerAutoscaleHpa) *ArgoCDSpecServerAutoscaleHpaScaleTargetRef {
		if v == nil {
			return nil
		}
		return &v.ScaleTargetRef
	}).(ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput)
}

// target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
func (o ArgoCDSpecServerAutoscaleHpaPtrOutput) TargetCPUUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerAutoscaleHpa) *int {
		if v == nil {
			return nil
		}
		return v.TargetCPUUtilizationPercentage
	}).(pulumi.IntPtrOutput)
}

// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
type ArgoCDSpecServerAutoscaleHpaScaleTargetRef struct {
	// API version of the referent
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
	Kind string `pulumi:"kind"`
	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name string `pulumi:"name"`
}

// ArgoCDSpecServerAutoscaleHpaScaleTargetRefInput is an input type that accepts ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs and ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerAutoscaleHpaScaleTargetRefInput` via:
//
//          ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs{...}
type ArgoCDSpecServerAutoscaleHpaScaleTargetRefInput interface {
	pulumi.Input

	ToArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput() ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput
	ToArgoCDSpecServerAutoscaleHpaScaleTargetRefOutputWithContext(context.Context) ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput
}

// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
type ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs struct {
	// API version of the referent
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name pulumi.StringInput `pulumi:"name"`
}

func (ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerAutoscaleHpaScaleTargetRef)(nil)).Elem()
}

func (i ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs) ToArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput() ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput {
	return i.ToArgoCDSpecServerAutoscaleHpaScaleTargetRefOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs) ToArgoCDSpecServerAutoscaleHpaScaleTargetRefOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput)
}

func (i ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs) ToArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput() ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput {
	return i.ToArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs) ToArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput).ToArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutputWithContext(ctx)
}

// ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrInput is an input type that accepts ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs, ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtr and ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrInput` via:
//
//          ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrInput interface {
	pulumi.Input

	ToArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput() ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput
	ToArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutputWithContext(context.Context) ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput
}

type argoCDSpecServerAutoscaleHpaScaleTargetRefPtrType ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs

func ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtr(v *ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs) ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrInput {
	return (*argoCDSpecServerAutoscaleHpaScaleTargetRefPtrType)(v)
}

func (*argoCDSpecServerAutoscaleHpaScaleTargetRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerAutoscaleHpaScaleTargetRef)(nil)).Elem()
}

func (i *argoCDSpecServerAutoscaleHpaScaleTargetRefPtrType) ToArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput() ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput {
	return i.ToArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecServerAutoscaleHpaScaleTargetRefPtrType) ToArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput)
}

// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
type ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerAutoscaleHpaScaleTargetRef)(nil)).Elem()
}

func (o ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput) ToArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput() ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput {
	return o
}

func (o ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput) ToArgoCDSpecServerAutoscaleHpaScaleTargetRefOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput {
	return o
}

func (o ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput) ToArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput() ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput {
	return o.ToArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput) ToArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerAutoscaleHpaScaleTargetRef) *ArgoCDSpecServerAutoscaleHpaScaleTargetRef {
		return &v
	}).(ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput)
}

// API version of the referent
func (o ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerAutoscaleHpaScaleTargetRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
func (o ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ArgoCDSpecServerAutoscaleHpaScaleTargetRef) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ArgoCDSpecServerAutoscaleHpaScaleTargetRef) string { return v.Name }).(pulumi.StringOutput)
}

type ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerAutoscaleHpaScaleTargetRef)(nil)).Elem()
}

func (o ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput) ToArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput() ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput {
	return o
}

func (o ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput) ToArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput {
	return o
}

func (o ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput) Elem() ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerAutoscaleHpaScaleTargetRef) ArgoCDSpecServerAutoscaleHpaScaleTargetRef {
		return *v
	}).(ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput)
}

// API version of the referent
func (o ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerAutoscaleHpaScaleTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
func (o ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerAutoscaleHpaScaleTargetRef) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerAutoscaleHpaScaleTargetRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// GRPC defines the state for the Argo CD Server GRPC options.
type ArgoCDSpecServerGrpc struct {
	// Host is the hostname to use for Ingress/Route resources.
	Host *string `pulumi:"host"`
	// Ingress defines the desired state for the Argo CD Server GRPC Ingress.
	Ingress *ArgoCDSpecServerGrpcIngress `pulumi:"ingress"`
}

// ArgoCDSpecServerGrpcInput is an input type that accepts ArgoCDSpecServerGrpcArgs and ArgoCDSpecServerGrpcOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerGrpcInput` via:
//
//          ArgoCDSpecServerGrpcArgs{...}
type ArgoCDSpecServerGrpcInput interface {
	pulumi.Input

	ToArgoCDSpecServerGrpcOutput() ArgoCDSpecServerGrpcOutput
	ToArgoCDSpecServerGrpcOutputWithContext(context.Context) ArgoCDSpecServerGrpcOutput
}

// GRPC defines the state for the Argo CD Server GRPC options.
type ArgoCDSpecServerGrpcArgs struct {
	// Host is the hostname to use for Ingress/Route resources.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Ingress defines the desired state for the Argo CD Server GRPC Ingress.
	Ingress ArgoCDSpecServerGrpcIngressPtrInput `pulumi:"ingress"`
}

func (ArgoCDSpecServerGrpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerGrpc)(nil)).Elem()
}

func (i ArgoCDSpecServerGrpcArgs) ToArgoCDSpecServerGrpcOutput() ArgoCDSpecServerGrpcOutput {
	return i.ToArgoCDSpecServerGrpcOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerGrpcArgs) ToArgoCDSpecServerGrpcOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerGrpcOutput)
}

func (i ArgoCDSpecServerGrpcArgs) ToArgoCDSpecServerGrpcPtrOutput() ArgoCDSpecServerGrpcPtrOutput {
	return i.ToArgoCDSpecServerGrpcPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerGrpcArgs) ToArgoCDSpecServerGrpcPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerGrpcOutput).ToArgoCDSpecServerGrpcPtrOutputWithContext(ctx)
}

// ArgoCDSpecServerGrpcPtrInput is an input type that accepts ArgoCDSpecServerGrpcArgs, ArgoCDSpecServerGrpcPtr and ArgoCDSpecServerGrpcPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerGrpcPtrInput` via:
//
//          ArgoCDSpecServerGrpcArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecServerGrpcPtrInput interface {
	pulumi.Input

	ToArgoCDSpecServerGrpcPtrOutput() ArgoCDSpecServerGrpcPtrOutput
	ToArgoCDSpecServerGrpcPtrOutputWithContext(context.Context) ArgoCDSpecServerGrpcPtrOutput
}

type argoCDSpecServerGrpcPtrType ArgoCDSpecServerGrpcArgs

func ArgoCDSpecServerGrpcPtr(v *ArgoCDSpecServerGrpcArgs) ArgoCDSpecServerGrpcPtrInput {
	return (*argoCDSpecServerGrpcPtrType)(v)
}

func (*argoCDSpecServerGrpcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerGrpc)(nil)).Elem()
}

func (i *argoCDSpecServerGrpcPtrType) ToArgoCDSpecServerGrpcPtrOutput() ArgoCDSpecServerGrpcPtrOutput {
	return i.ToArgoCDSpecServerGrpcPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecServerGrpcPtrType) ToArgoCDSpecServerGrpcPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerGrpcPtrOutput)
}

// GRPC defines the state for the Argo CD Server GRPC options.
type ArgoCDSpecServerGrpcOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerGrpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerGrpc)(nil)).Elem()
}

func (o ArgoCDSpecServerGrpcOutput) ToArgoCDSpecServerGrpcOutput() ArgoCDSpecServerGrpcOutput {
	return o
}

func (o ArgoCDSpecServerGrpcOutput) ToArgoCDSpecServerGrpcOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcOutput {
	return o
}

func (o ArgoCDSpecServerGrpcOutput) ToArgoCDSpecServerGrpcPtrOutput() ArgoCDSpecServerGrpcPtrOutput {
	return o.ToArgoCDSpecServerGrpcPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecServerGrpcOutput) ToArgoCDSpecServerGrpcPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerGrpc) *ArgoCDSpecServerGrpc {
		return &v
	}).(ArgoCDSpecServerGrpcPtrOutput)
}

// Host is the hostname to use for Ingress/Route resources.
func (o ArgoCDSpecServerGrpcOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerGrpc) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Ingress defines the desired state for the Argo CD Server GRPC Ingress.
func (o ArgoCDSpecServerGrpcOutput) Ingress() ArgoCDSpecServerGrpcIngressPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerGrpc) *ArgoCDSpecServerGrpcIngress { return v.Ingress }).(ArgoCDSpecServerGrpcIngressPtrOutput)
}

type ArgoCDSpecServerGrpcPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerGrpcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerGrpc)(nil)).Elem()
}

func (o ArgoCDSpecServerGrpcPtrOutput) ToArgoCDSpecServerGrpcPtrOutput() ArgoCDSpecServerGrpcPtrOutput {
	return o
}

func (o ArgoCDSpecServerGrpcPtrOutput) ToArgoCDSpecServerGrpcPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcPtrOutput {
	return o
}

func (o ArgoCDSpecServerGrpcPtrOutput) Elem() ArgoCDSpecServerGrpcOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerGrpc) ArgoCDSpecServerGrpc { return *v }).(ArgoCDSpecServerGrpcOutput)
}

// Host is the hostname to use for Ingress/Route resources.
func (o ArgoCDSpecServerGrpcPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerGrpc) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Ingress defines the desired state for the Argo CD Server GRPC Ingress.
func (o ArgoCDSpecServerGrpcPtrOutput) Ingress() ArgoCDSpecServerGrpcIngressPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerGrpc) *ArgoCDSpecServerGrpcIngress {
		if v == nil {
			return nil
		}
		return v.Ingress
	}).(ArgoCDSpecServerGrpcIngressPtrOutput)
}

// Ingress defines the desired state for the Argo CD Server GRPC Ingress.
type ArgoCDSpecServerGrpcIngress struct {
	// Annotations is the map of annotations to apply to the Ingress.
	Annotations map[string]string `pulumi:"annotations"`
	// Enabled will toggle the creation of the Ingress.
	Enabled bool `pulumi:"enabled"`
	// Path used for the Ingress resource.
	Path *string `pulumi:"path"`
	// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
	Tls []ArgoCDSpecServerGrpcIngressTls `pulumi:"tls"`
}

// ArgoCDSpecServerGrpcIngressInput is an input type that accepts ArgoCDSpecServerGrpcIngressArgs and ArgoCDSpecServerGrpcIngressOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerGrpcIngressInput` via:
//
//          ArgoCDSpecServerGrpcIngressArgs{...}
type ArgoCDSpecServerGrpcIngressInput interface {
	pulumi.Input

	ToArgoCDSpecServerGrpcIngressOutput() ArgoCDSpecServerGrpcIngressOutput
	ToArgoCDSpecServerGrpcIngressOutputWithContext(context.Context) ArgoCDSpecServerGrpcIngressOutput
}

// Ingress defines the desired state for the Argo CD Server GRPC Ingress.
type ArgoCDSpecServerGrpcIngressArgs struct {
	// Annotations is the map of annotations to apply to the Ingress.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Enabled will toggle the creation of the Ingress.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Path used for the Ingress resource.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
	Tls ArgoCDSpecServerGrpcIngressTlsArrayInput `pulumi:"tls"`
}

func (ArgoCDSpecServerGrpcIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerGrpcIngress)(nil)).Elem()
}

func (i ArgoCDSpecServerGrpcIngressArgs) ToArgoCDSpecServerGrpcIngressOutput() ArgoCDSpecServerGrpcIngressOutput {
	return i.ToArgoCDSpecServerGrpcIngressOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerGrpcIngressArgs) ToArgoCDSpecServerGrpcIngressOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerGrpcIngressOutput)
}

func (i ArgoCDSpecServerGrpcIngressArgs) ToArgoCDSpecServerGrpcIngressPtrOutput() ArgoCDSpecServerGrpcIngressPtrOutput {
	return i.ToArgoCDSpecServerGrpcIngressPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerGrpcIngressArgs) ToArgoCDSpecServerGrpcIngressPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcIngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerGrpcIngressOutput).ToArgoCDSpecServerGrpcIngressPtrOutputWithContext(ctx)
}

// ArgoCDSpecServerGrpcIngressPtrInput is an input type that accepts ArgoCDSpecServerGrpcIngressArgs, ArgoCDSpecServerGrpcIngressPtr and ArgoCDSpecServerGrpcIngressPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerGrpcIngressPtrInput` via:
//
//          ArgoCDSpecServerGrpcIngressArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecServerGrpcIngressPtrInput interface {
	pulumi.Input

	ToArgoCDSpecServerGrpcIngressPtrOutput() ArgoCDSpecServerGrpcIngressPtrOutput
	ToArgoCDSpecServerGrpcIngressPtrOutputWithContext(context.Context) ArgoCDSpecServerGrpcIngressPtrOutput
}

type argoCDSpecServerGrpcIngressPtrType ArgoCDSpecServerGrpcIngressArgs

func ArgoCDSpecServerGrpcIngressPtr(v *ArgoCDSpecServerGrpcIngressArgs) ArgoCDSpecServerGrpcIngressPtrInput {
	return (*argoCDSpecServerGrpcIngressPtrType)(v)
}

func (*argoCDSpecServerGrpcIngressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerGrpcIngress)(nil)).Elem()
}

func (i *argoCDSpecServerGrpcIngressPtrType) ToArgoCDSpecServerGrpcIngressPtrOutput() ArgoCDSpecServerGrpcIngressPtrOutput {
	return i.ToArgoCDSpecServerGrpcIngressPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecServerGrpcIngressPtrType) ToArgoCDSpecServerGrpcIngressPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcIngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerGrpcIngressPtrOutput)
}

// Ingress defines the desired state for the Argo CD Server GRPC Ingress.
type ArgoCDSpecServerGrpcIngressOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerGrpcIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerGrpcIngress)(nil)).Elem()
}

func (o ArgoCDSpecServerGrpcIngressOutput) ToArgoCDSpecServerGrpcIngressOutput() ArgoCDSpecServerGrpcIngressOutput {
	return o
}

func (o ArgoCDSpecServerGrpcIngressOutput) ToArgoCDSpecServerGrpcIngressOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcIngressOutput {
	return o
}

func (o ArgoCDSpecServerGrpcIngressOutput) ToArgoCDSpecServerGrpcIngressPtrOutput() ArgoCDSpecServerGrpcIngressPtrOutput {
	return o.ToArgoCDSpecServerGrpcIngressPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecServerGrpcIngressOutput) ToArgoCDSpecServerGrpcIngressPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcIngressPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerGrpcIngress) *ArgoCDSpecServerGrpcIngress {
		return &v
	}).(ArgoCDSpecServerGrpcIngressPtrOutput)
}

// Annotations is the map of annotations to apply to the Ingress.
func (o ArgoCDSpecServerGrpcIngressOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ArgoCDSpecServerGrpcIngress) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Enabled will toggle the creation of the Ingress.
func (o ArgoCDSpecServerGrpcIngressOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ArgoCDSpecServerGrpcIngress) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Path used for the Ingress resource.
func (o ArgoCDSpecServerGrpcIngressOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerGrpcIngress) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
func (o ArgoCDSpecServerGrpcIngressOutput) Tls() ArgoCDSpecServerGrpcIngressTlsArrayOutput {
	return o.ApplyT(func(v ArgoCDSpecServerGrpcIngress) []ArgoCDSpecServerGrpcIngressTls { return v.Tls }).(ArgoCDSpecServerGrpcIngressTlsArrayOutput)
}

type ArgoCDSpecServerGrpcIngressPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerGrpcIngressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerGrpcIngress)(nil)).Elem()
}

func (o ArgoCDSpecServerGrpcIngressPtrOutput) ToArgoCDSpecServerGrpcIngressPtrOutput() ArgoCDSpecServerGrpcIngressPtrOutput {
	return o
}

func (o ArgoCDSpecServerGrpcIngressPtrOutput) ToArgoCDSpecServerGrpcIngressPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcIngressPtrOutput {
	return o
}

func (o ArgoCDSpecServerGrpcIngressPtrOutput) Elem() ArgoCDSpecServerGrpcIngressOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerGrpcIngress) ArgoCDSpecServerGrpcIngress { return *v }).(ArgoCDSpecServerGrpcIngressOutput)
}

// Annotations is the map of annotations to apply to the Ingress.
func (o ArgoCDSpecServerGrpcIngressPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerGrpcIngress) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Enabled will toggle the creation of the Ingress.
func (o ArgoCDSpecServerGrpcIngressPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerGrpcIngress) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Path used for the Ingress resource.
func (o ArgoCDSpecServerGrpcIngressPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerGrpcIngress) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
func (o ArgoCDSpecServerGrpcIngressPtrOutput) Tls() ArgoCDSpecServerGrpcIngressTlsArrayOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerGrpcIngress) []ArgoCDSpecServerGrpcIngressTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ArgoCDSpecServerGrpcIngressTlsArrayOutput)
}

// Annotations is the map of annotations to apply to the Ingress.
type ArgoCDSpecServerGrpcIngressAnnotations struct {
}

// ArgoCDSpecServerGrpcIngressAnnotationsInput is an input type that accepts ArgoCDSpecServerGrpcIngressAnnotationsArgs and ArgoCDSpecServerGrpcIngressAnnotationsOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerGrpcIngressAnnotationsInput` via:
//
//          ArgoCDSpecServerGrpcIngressAnnotationsArgs{...}
type ArgoCDSpecServerGrpcIngressAnnotationsInput interface {
	pulumi.Input

	ToArgoCDSpecServerGrpcIngressAnnotationsOutput() ArgoCDSpecServerGrpcIngressAnnotationsOutput
	ToArgoCDSpecServerGrpcIngressAnnotationsOutputWithContext(context.Context) ArgoCDSpecServerGrpcIngressAnnotationsOutput
}

// Annotations is the map of annotations to apply to the Ingress.
type ArgoCDSpecServerGrpcIngressAnnotationsArgs struct {
}

func (ArgoCDSpecServerGrpcIngressAnnotationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerGrpcIngressAnnotations)(nil)).Elem()
}

func (i ArgoCDSpecServerGrpcIngressAnnotationsArgs) ToArgoCDSpecServerGrpcIngressAnnotationsOutput() ArgoCDSpecServerGrpcIngressAnnotationsOutput {
	return i.ToArgoCDSpecServerGrpcIngressAnnotationsOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerGrpcIngressAnnotationsArgs) ToArgoCDSpecServerGrpcIngressAnnotationsOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcIngressAnnotationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerGrpcIngressAnnotationsOutput)
}

// Annotations is the map of annotations to apply to the Ingress.
type ArgoCDSpecServerGrpcIngressAnnotationsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerGrpcIngressAnnotationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerGrpcIngressAnnotations)(nil)).Elem()
}

func (o ArgoCDSpecServerGrpcIngressAnnotationsOutput) ToArgoCDSpecServerGrpcIngressAnnotationsOutput() ArgoCDSpecServerGrpcIngressAnnotationsOutput {
	return o
}

func (o ArgoCDSpecServerGrpcIngressAnnotationsOutput) ToArgoCDSpecServerGrpcIngressAnnotationsOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcIngressAnnotationsOutput {
	return o
}

// IngressTLS describes the transport layer security associated with an Ingress.
type ArgoCDSpecServerGrpcIngressTls struct {
	// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
	Hosts []string `pulumi:"hosts"`
	// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
	SecretName *string `pulumi:"secretName"`
}

// ArgoCDSpecServerGrpcIngressTlsInput is an input type that accepts ArgoCDSpecServerGrpcIngressTlsArgs and ArgoCDSpecServerGrpcIngressTlsOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerGrpcIngressTlsInput` via:
//
//          ArgoCDSpecServerGrpcIngressTlsArgs{...}
type ArgoCDSpecServerGrpcIngressTlsInput interface {
	pulumi.Input

	ToArgoCDSpecServerGrpcIngressTlsOutput() ArgoCDSpecServerGrpcIngressTlsOutput
	ToArgoCDSpecServerGrpcIngressTlsOutputWithContext(context.Context) ArgoCDSpecServerGrpcIngressTlsOutput
}

// IngressTLS describes the transport layer security associated with an Ingress.
type ArgoCDSpecServerGrpcIngressTlsArgs struct {
	// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ArgoCDSpecServerGrpcIngressTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerGrpcIngressTls)(nil)).Elem()
}

func (i ArgoCDSpecServerGrpcIngressTlsArgs) ToArgoCDSpecServerGrpcIngressTlsOutput() ArgoCDSpecServerGrpcIngressTlsOutput {
	return i.ToArgoCDSpecServerGrpcIngressTlsOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerGrpcIngressTlsArgs) ToArgoCDSpecServerGrpcIngressTlsOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcIngressTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerGrpcIngressTlsOutput)
}

// ArgoCDSpecServerGrpcIngressTlsArrayInput is an input type that accepts ArgoCDSpecServerGrpcIngressTlsArray and ArgoCDSpecServerGrpcIngressTlsArrayOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerGrpcIngressTlsArrayInput` via:
//
//          ArgoCDSpecServerGrpcIngressTlsArray{ ArgoCDSpecServerGrpcIngressTlsArgs{...} }
type ArgoCDSpecServerGrpcIngressTlsArrayInput interface {
	pulumi.Input

	ToArgoCDSpecServerGrpcIngressTlsArrayOutput() ArgoCDSpecServerGrpcIngressTlsArrayOutput
	ToArgoCDSpecServerGrpcIngressTlsArrayOutputWithContext(context.Context) ArgoCDSpecServerGrpcIngressTlsArrayOutput
}

type ArgoCDSpecServerGrpcIngressTlsArray []ArgoCDSpecServerGrpcIngressTlsInput

func (ArgoCDSpecServerGrpcIngressTlsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArgoCDSpecServerGrpcIngressTls)(nil)).Elem()
}

func (i ArgoCDSpecServerGrpcIngressTlsArray) ToArgoCDSpecServerGrpcIngressTlsArrayOutput() ArgoCDSpecServerGrpcIngressTlsArrayOutput {
	return i.ToArgoCDSpecServerGrpcIngressTlsArrayOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerGrpcIngressTlsArray) ToArgoCDSpecServerGrpcIngressTlsArrayOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcIngressTlsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerGrpcIngressTlsArrayOutput)
}

// IngressTLS describes the transport layer security associated with an Ingress.
type ArgoCDSpecServerGrpcIngressTlsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerGrpcIngressTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerGrpcIngressTls)(nil)).Elem()
}

func (o ArgoCDSpecServerGrpcIngressTlsOutput) ToArgoCDSpecServerGrpcIngressTlsOutput() ArgoCDSpecServerGrpcIngressTlsOutput {
	return o
}

func (o ArgoCDSpecServerGrpcIngressTlsOutput) ToArgoCDSpecServerGrpcIngressTlsOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcIngressTlsOutput {
	return o
}

// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
func (o ArgoCDSpecServerGrpcIngressTlsOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArgoCDSpecServerGrpcIngressTls) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
func (o ArgoCDSpecServerGrpcIngressTlsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerGrpcIngressTls) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecServerGrpcIngressTlsArrayOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerGrpcIngressTlsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArgoCDSpecServerGrpcIngressTls)(nil)).Elem()
}

func (o ArgoCDSpecServerGrpcIngressTlsArrayOutput) ToArgoCDSpecServerGrpcIngressTlsArrayOutput() ArgoCDSpecServerGrpcIngressTlsArrayOutput {
	return o
}

func (o ArgoCDSpecServerGrpcIngressTlsArrayOutput) ToArgoCDSpecServerGrpcIngressTlsArrayOutputWithContext(ctx context.Context) ArgoCDSpecServerGrpcIngressTlsArrayOutput {
	return o
}

func (o ArgoCDSpecServerGrpcIngressTlsArrayOutput) Index(i pulumi.IntInput) ArgoCDSpecServerGrpcIngressTlsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArgoCDSpecServerGrpcIngressTls {
		return vs[0].([]ArgoCDSpecServerGrpcIngressTls)[vs[1].(int)]
	}).(ArgoCDSpecServerGrpcIngressTlsOutput)
}

// Ingress defines the desired state for an Ingress for the Argo CD Server component.
type ArgoCDSpecServerIngress struct {
	// Annotations is the map of annotations to apply to the Ingress.
	Annotations map[string]string `pulumi:"annotations"`
	// Enabled will toggle the creation of the Ingress.
	Enabled bool `pulumi:"enabled"`
	// Path used for the Ingress resource.
	Path *string `pulumi:"path"`
	// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
	Tls []ArgoCDSpecServerIngressTls `pulumi:"tls"`
}

// ArgoCDSpecServerIngressInput is an input type that accepts ArgoCDSpecServerIngressArgs and ArgoCDSpecServerIngressOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerIngressInput` via:
//
//          ArgoCDSpecServerIngressArgs{...}
type ArgoCDSpecServerIngressInput interface {
	pulumi.Input

	ToArgoCDSpecServerIngressOutput() ArgoCDSpecServerIngressOutput
	ToArgoCDSpecServerIngressOutputWithContext(context.Context) ArgoCDSpecServerIngressOutput
}

// Ingress defines the desired state for an Ingress for the Argo CD Server component.
type ArgoCDSpecServerIngressArgs struct {
	// Annotations is the map of annotations to apply to the Ingress.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Enabled will toggle the creation of the Ingress.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Path used for the Ingress resource.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
	Tls ArgoCDSpecServerIngressTlsArrayInput `pulumi:"tls"`
}

func (ArgoCDSpecServerIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerIngress)(nil)).Elem()
}

func (i ArgoCDSpecServerIngressArgs) ToArgoCDSpecServerIngressOutput() ArgoCDSpecServerIngressOutput {
	return i.ToArgoCDSpecServerIngressOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerIngressArgs) ToArgoCDSpecServerIngressOutputWithContext(ctx context.Context) ArgoCDSpecServerIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerIngressOutput)
}

func (i ArgoCDSpecServerIngressArgs) ToArgoCDSpecServerIngressPtrOutput() ArgoCDSpecServerIngressPtrOutput {
	return i.ToArgoCDSpecServerIngressPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerIngressArgs) ToArgoCDSpecServerIngressPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerIngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerIngressOutput).ToArgoCDSpecServerIngressPtrOutputWithContext(ctx)
}

// ArgoCDSpecServerIngressPtrInput is an input type that accepts ArgoCDSpecServerIngressArgs, ArgoCDSpecServerIngressPtr and ArgoCDSpecServerIngressPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerIngressPtrInput` via:
//
//          ArgoCDSpecServerIngressArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecServerIngressPtrInput interface {
	pulumi.Input

	ToArgoCDSpecServerIngressPtrOutput() ArgoCDSpecServerIngressPtrOutput
	ToArgoCDSpecServerIngressPtrOutputWithContext(context.Context) ArgoCDSpecServerIngressPtrOutput
}

type argoCDSpecServerIngressPtrType ArgoCDSpecServerIngressArgs

func ArgoCDSpecServerIngressPtr(v *ArgoCDSpecServerIngressArgs) ArgoCDSpecServerIngressPtrInput {
	return (*argoCDSpecServerIngressPtrType)(v)
}

func (*argoCDSpecServerIngressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerIngress)(nil)).Elem()
}

func (i *argoCDSpecServerIngressPtrType) ToArgoCDSpecServerIngressPtrOutput() ArgoCDSpecServerIngressPtrOutput {
	return i.ToArgoCDSpecServerIngressPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecServerIngressPtrType) ToArgoCDSpecServerIngressPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerIngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerIngressPtrOutput)
}

// Ingress defines the desired state for an Ingress for the Argo CD Server component.
type ArgoCDSpecServerIngressOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerIngress)(nil)).Elem()
}

func (o ArgoCDSpecServerIngressOutput) ToArgoCDSpecServerIngressOutput() ArgoCDSpecServerIngressOutput {
	return o
}

func (o ArgoCDSpecServerIngressOutput) ToArgoCDSpecServerIngressOutputWithContext(ctx context.Context) ArgoCDSpecServerIngressOutput {
	return o
}

func (o ArgoCDSpecServerIngressOutput) ToArgoCDSpecServerIngressPtrOutput() ArgoCDSpecServerIngressPtrOutput {
	return o.ToArgoCDSpecServerIngressPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecServerIngressOutput) ToArgoCDSpecServerIngressPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerIngressPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerIngress) *ArgoCDSpecServerIngress {
		return &v
	}).(ArgoCDSpecServerIngressPtrOutput)
}

// Annotations is the map of annotations to apply to the Ingress.
func (o ArgoCDSpecServerIngressOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ArgoCDSpecServerIngress) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Enabled will toggle the creation of the Ingress.
func (o ArgoCDSpecServerIngressOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ArgoCDSpecServerIngress) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Path used for the Ingress resource.
func (o ArgoCDSpecServerIngressOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerIngress) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
func (o ArgoCDSpecServerIngressOutput) Tls() ArgoCDSpecServerIngressTlsArrayOutput {
	return o.ApplyT(func(v ArgoCDSpecServerIngress) []ArgoCDSpecServerIngressTls { return v.Tls }).(ArgoCDSpecServerIngressTlsArrayOutput)
}

type ArgoCDSpecServerIngressPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerIngressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerIngress)(nil)).Elem()
}

func (o ArgoCDSpecServerIngressPtrOutput) ToArgoCDSpecServerIngressPtrOutput() ArgoCDSpecServerIngressPtrOutput {
	return o
}

func (o ArgoCDSpecServerIngressPtrOutput) ToArgoCDSpecServerIngressPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerIngressPtrOutput {
	return o
}

func (o ArgoCDSpecServerIngressPtrOutput) Elem() ArgoCDSpecServerIngressOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerIngress) ArgoCDSpecServerIngress { return *v }).(ArgoCDSpecServerIngressOutput)
}

// Annotations is the map of annotations to apply to the Ingress.
func (o ArgoCDSpecServerIngressPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerIngress) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Enabled will toggle the creation of the Ingress.
func (o ArgoCDSpecServerIngressPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerIngress) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Path used for the Ingress resource.
func (o ArgoCDSpecServerIngressPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerIngress) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
func (o ArgoCDSpecServerIngressPtrOutput) Tls() ArgoCDSpecServerIngressTlsArrayOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerIngress) []ArgoCDSpecServerIngressTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ArgoCDSpecServerIngressTlsArrayOutput)
}

// Annotations is the map of annotations to apply to the Ingress.
type ArgoCDSpecServerIngressAnnotations struct {
}

// ArgoCDSpecServerIngressAnnotationsInput is an input type that accepts ArgoCDSpecServerIngressAnnotationsArgs and ArgoCDSpecServerIngressAnnotationsOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerIngressAnnotationsInput` via:
//
//          ArgoCDSpecServerIngressAnnotationsArgs{...}
type ArgoCDSpecServerIngressAnnotationsInput interface {
	pulumi.Input

	ToArgoCDSpecServerIngressAnnotationsOutput() ArgoCDSpecServerIngressAnnotationsOutput
	ToArgoCDSpecServerIngressAnnotationsOutputWithContext(context.Context) ArgoCDSpecServerIngressAnnotationsOutput
}

// Annotations is the map of annotations to apply to the Ingress.
type ArgoCDSpecServerIngressAnnotationsArgs struct {
}

func (ArgoCDSpecServerIngressAnnotationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerIngressAnnotations)(nil)).Elem()
}

func (i ArgoCDSpecServerIngressAnnotationsArgs) ToArgoCDSpecServerIngressAnnotationsOutput() ArgoCDSpecServerIngressAnnotationsOutput {
	return i.ToArgoCDSpecServerIngressAnnotationsOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerIngressAnnotationsArgs) ToArgoCDSpecServerIngressAnnotationsOutputWithContext(ctx context.Context) ArgoCDSpecServerIngressAnnotationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerIngressAnnotationsOutput)
}

// Annotations is the map of annotations to apply to the Ingress.
type ArgoCDSpecServerIngressAnnotationsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerIngressAnnotationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerIngressAnnotations)(nil)).Elem()
}

func (o ArgoCDSpecServerIngressAnnotationsOutput) ToArgoCDSpecServerIngressAnnotationsOutput() ArgoCDSpecServerIngressAnnotationsOutput {
	return o
}

func (o ArgoCDSpecServerIngressAnnotationsOutput) ToArgoCDSpecServerIngressAnnotationsOutputWithContext(ctx context.Context) ArgoCDSpecServerIngressAnnotationsOutput {
	return o
}

// IngressTLS describes the transport layer security associated with an Ingress.
type ArgoCDSpecServerIngressTls struct {
	// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
	Hosts []string `pulumi:"hosts"`
	// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
	SecretName *string `pulumi:"secretName"`
}

// ArgoCDSpecServerIngressTlsInput is an input type that accepts ArgoCDSpecServerIngressTlsArgs and ArgoCDSpecServerIngressTlsOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerIngressTlsInput` via:
//
//          ArgoCDSpecServerIngressTlsArgs{...}
type ArgoCDSpecServerIngressTlsInput interface {
	pulumi.Input

	ToArgoCDSpecServerIngressTlsOutput() ArgoCDSpecServerIngressTlsOutput
	ToArgoCDSpecServerIngressTlsOutputWithContext(context.Context) ArgoCDSpecServerIngressTlsOutput
}

// IngressTLS describes the transport layer security associated with an Ingress.
type ArgoCDSpecServerIngressTlsArgs struct {
	// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ArgoCDSpecServerIngressTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerIngressTls)(nil)).Elem()
}

func (i ArgoCDSpecServerIngressTlsArgs) ToArgoCDSpecServerIngressTlsOutput() ArgoCDSpecServerIngressTlsOutput {
	return i.ToArgoCDSpecServerIngressTlsOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerIngressTlsArgs) ToArgoCDSpecServerIngressTlsOutputWithContext(ctx context.Context) ArgoCDSpecServerIngressTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerIngressTlsOutput)
}

// ArgoCDSpecServerIngressTlsArrayInput is an input type that accepts ArgoCDSpecServerIngressTlsArray and ArgoCDSpecServerIngressTlsArrayOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerIngressTlsArrayInput` via:
//
//          ArgoCDSpecServerIngressTlsArray{ ArgoCDSpecServerIngressTlsArgs{...} }
type ArgoCDSpecServerIngressTlsArrayInput interface {
	pulumi.Input

	ToArgoCDSpecServerIngressTlsArrayOutput() ArgoCDSpecServerIngressTlsArrayOutput
	ToArgoCDSpecServerIngressTlsArrayOutputWithContext(context.Context) ArgoCDSpecServerIngressTlsArrayOutput
}

type ArgoCDSpecServerIngressTlsArray []ArgoCDSpecServerIngressTlsInput

func (ArgoCDSpecServerIngressTlsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArgoCDSpecServerIngressTls)(nil)).Elem()
}

func (i ArgoCDSpecServerIngressTlsArray) ToArgoCDSpecServerIngressTlsArrayOutput() ArgoCDSpecServerIngressTlsArrayOutput {
	return i.ToArgoCDSpecServerIngressTlsArrayOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerIngressTlsArray) ToArgoCDSpecServerIngressTlsArrayOutputWithContext(ctx context.Context) ArgoCDSpecServerIngressTlsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerIngressTlsArrayOutput)
}

// IngressTLS describes the transport layer security associated with an Ingress.
type ArgoCDSpecServerIngressTlsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerIngressTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerIngressTls)(nil)).Elem()
}

func (o ArgoCDSpecServerIngressTlsOutput) ToArgoCDSpecServerIngressTlsOutput() ArgoCDSpecServerIngressTlsOutput {
	return o
}

func (o ArgoCDSpecServerIngressTlsOutput) ToArgoCDSpecServerIngressTlsOutputWithContext(ctx context.Context) ArgoCDSpecServerIngressTlsOutput {
	return o
}

// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
func (o ArgoCDSpecServerIngressTlsOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArgoCDSpecServerIngressTls) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
func (o ArgoCDSpecServerIngressTlsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerIngressTls) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecServerIngressTlsArrayOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerIngressTlsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArgoCDSpecServerIngressTls)(nil)).Elem()
}

func (o ArgoCDSpecServerIngressTlsArrayOutput) ToArgoCDSpecServerIngressTlsArrayOutput() ArgoCDSpecServerIngressTlsArrayOutput {
	return o
}

func (o ArgoCDSpecServerIngressTlsArrayOutput) ToArgoCDSpecServerIngressTlsArrayOutputWithContext(ctx context.Context) ArgoCDSpecServerIngressTlsArrayOutput {
	return o
}

func (o ArgoCDSpecServerIngressTlsArrayOutput) Index(i pulumi.IntInput) ArgoCDSpecServerIngressTlsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArgoCDSpecServerIngressTls {
		return vs[0].([]ArgoCDSpecServerIngressTls)[vs[1].(int)]
	}).(ArgoCDSpecServerIngressTlsOutput)
}

// Resources defines the Compute Resources required by the container for the Argo CD server component.
type ArgoCDSpecServerResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]ArgoCDSpecServerResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]ArgoCDSpecServerResourcesRequests `pulumi:"requests"`
}

// ArgoCDSpecServerResourcesInput is an input type that accepts ArgoCDSpecServerResourcesArgs and ArgoCDSpecServerResourcesOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerResourcesInput` via:
//
//          ArgoCDSpecServerResourcesArgs{...}
type ArgoCDSpecServerResourcesInput interface {
	pulumi.Input

	ToArgoCDSpecServerResourcesOutput() ArgoCDSpecServerResourcesOutput
	ToArgoCDSpecServerResourcesOutputWithContext(context.Context) ArgoCDSpecServerResourcesOutput
}

// Resources defines the Compute Resources required by the container for the Argo CD server component.
type ArgoCDSpecServerResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits ArgoCDSpecServerResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests ArgoCDSpecServerResourcesRequestsMapInput `pulumi:"requests"`
}

func (ArgoCDSpecServerResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerResources)(nil)).Elem()
}

func (i ArgoCDSpecServerResourcesArgs) ToArgoCDSpecServerResourcesOutput() ArgoCDSpecServerResourcesOutput {
	return i.ToArgoCDSpecServerResourcesOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerResourcesArgs) ToArgoCDSpecServerResourcesOutputWithContext(ctx context.Context) ArgoCDSpecServerResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerResourcesOutput)
}

func (i ArgoCDSpecServerResourcesArgs) ToArgoCDSpecServerResourcesPtrOutput() ArgoCDSpecServerResourcesPtrOutput {
	return i.ToArgoCDSpecServerResourcesPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerResourcesArgs) ToArgoCDSpecServerResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerResourcesOutput).ToArgoCDSpecServerResourcesPtrOutputWithContext(ctx)
}

// ArgoCDSpecServerResourcesPtrInput is an input type that accepts ArgoCDSpecServerResourcesArgs, ArgoCDSpecServerResourcesPtr and ArgoCDSpecServerResourcesPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerResourcesPtrInput` via:
//
//          ArgoCDSpecServerResourcesArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecServerResourcesPtrInput interface {
	pulumi.Input

	ToArgoCDSpecServerResourcesPtrOutput() ArgoCDSpecServerResourcesPtrOutput
	ToArgoCDSpecServerResourcesPtrOutputWithContext(context.Context) ArgoCDSpecServerResourcesPtrOutput
}

type argoCDSpecServerResourcesPtrType ArgoCDSpecServerResourcesArgs

func ArgoCDSpecServerResourcesPtr(v *ArgoCDSpecServerResourcesArgs) ArgoCDSpecServerResourcesPtrInput {
	return (*argoCDSpecServerResourcesPtrType)(v)
}

func (*argoCDSpecServerResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerResources)(nil)).Elem()
}

func (i *argoCDSpecServerResourcesPtrType) ToArgoCDSpecServerResourcesPtrOutput() ArgoCDSpecServerResourcesPtrOutput {
	return i.ToArgoCDSpecServerResourcesPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecServerResourcesPtrType) ToArgoCDSpecServerResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerResourcesPtrOutput)
}

// Resources defines the Compute Resources required by the container for the Argo CD server component.
type ArgoCDSpecServerResourcesOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerResources)(nil)).Elem()
}

func (o ArgoCDSpecServerResourcesOutput) ToArgoCDSpecServerResourcesOutput() ArgoCDSpecServerResourcesOutput {
	return o
}

func (o ArgoCDSpecServerResourcesOutput) ToArgoCDSpecServerResourcesOutputWithContext(ctx context.Context) ArgoCDSpecServerResourcesOutput {
	return o
}

func (o ArgoCDSpecServerResourcesOutput) ToArgoCDSpecServerResourcesPtrOutput() ArgoCDSpecServerResourcesPtrOutput {
	return o.ToArgoCDSpecServerResourcesPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecServerResourcesOutput) ToArgoCDSpecServerResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerResourcesPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerResources) *ArgoCDSpecServerResources {
		return &v
	}).(ArgoCDSpecServerResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecServerResourcesOutput) Limits() ArgoCDSpecServerResourcesLimitsMapOutput {
	return o.ApplyT(func(v ArgoCDSpecServerResources) map[string]ArgoCDSpecServerResourcesLimits { return v.Limits }).(ArgoCDSpecServerResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecServerResourcesOutput) Requests() ArgoCDSpecServerResourcesRequestsMapOutput {
	return o.ApplyT(func(v ArgoCDSpecServerResources) map[string]ArgoCDSpecServerResourcesRequests { return v.Requests }).(ArgoCDSpecServerResourcesRequestsMapOutput)
}

type ArgoCDSpecServerResourcesPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerResources)(nil)).Elem()
}

func (o ArgoCDSpecServerResourcesPtrOutput) ToArgoCDSpecServerResourcesPtrOutput() ArgoCDSpecServerResourcesPtrOutput {
	return o
}

func (o ArgoCDSpecServerResourcesPtrOutput) ToArgoCDSpecServerResourcesPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerResourcesPtrOutput {
	return o
}

func (o ArgoCDSpecServerResourcesPtrOutput) Elem() ArgoCDSpecServerResourcesOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerResources) ArgoCDSpecServerResources { return *v }).(ArgoCDSpecServerResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecServerResourcesPtrOutput) Limits() ArgoCDSpecServerResourcesLimitsMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerResources) map[string]ArgoCDSpecServerResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(ArgoCDSpecServerResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ArgoCDSpecServerResourcesPtrOutput) Requests() ArgoCDSpecServerResourcesRequestsMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerResources) map[string]ArgoCDSpecServerResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(ArgoCDSpecServerResourcesRequestsMapOutput)
}

type ArgoCDSpecServerResourcesLimits struct {
}

// ArgoCDSpecServerResourcesLimitsInput is an input type that accepts ArgoCDSpecServerResourcesLimitsArgs and ArgoCDSpecServerResourcesLimitsOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerResourcesLimitsInput` via:
//
//          ArgoCDSpecServerResourcesLimitsArgs{...}
type ArgoCDSpecServerResourcesLimitsInput interface {
	pulumi.Input

	ToArgoCDSpecServerResourcesLimitsOutput() ArgoCDSpecServerResourcesLimitsOutput
	ToArgoCDSpecServerResourcesLimitsOutputWithContext(context.Context) ArgoCDSpecServerResourcesLimitsOutput
}

type ArgoCDSpecServerResourcesLimitsArgs struct {
}

func (ArgoCDSpecServerResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerResourcesLimits)(nil)).Elem()
}

func (i ArgoCDSpecServerResourcesLimitsArgs) ToArgoCDSpecServerResourcesLimitsOutput() ArgoCDSpecServerResourcesLimitsOutput {
	return i.ToArgoCDSpecServerResourcesLimitsOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerResourcesLimitsArgs) ToArgoCDSpecServerResourcesLimitsOutputWithContext(ctx context.Context) ArgoCDSpecServerResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerResourcesLimitsOutput)
}

// ArgoCDSpecServerResourcesLimitsMapInput is an input type that accepts ArgoCDSpecServerResourcesLimitsMap and ArgoCDSpecServerResourcesLimitsMapOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerResourcesLimitsMapInput` via:
//
//          ArgoCDSpecServerResourcesLimitsMap{ "key": ArgoCDSpecServerResourcesLimitsArgs{...} }
type ArgoCDSpecServerResourcesLimitsMapInput interface {
	pulumi.Input

	ToArgoCDSpecServerResourcesLimitsMapOutput() ArgoCDSpecServerResourcesLimitsMapOutput
	ToArgoCDSpecServerResourcesLimitsMapOutputWithContext(context.Context) ArgoCDSpecServerResourcesLimitsMapOutput
}

type ArgoCDSpecServerResourcesLimitsMap map[string]ArgoCDSpecServerResourcesLimitsInput

func (ArgoCDSpecServerResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecServerResourcesLimits)(nil)).Elem()
}

func (i ArgoCDSpecServerResourcesLimitsMap) ToArgoCDSpecServerResourcesLimitsMapOutput() ArgoCDSpecServerResourcesLimitsMapOutput {
	return i.ToArgoCDSpecServerResourcesLimitsMapOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerResourcesLimitsMap) ToArgoCDSpecServerResourcesLimitsMapOutputWithContext(ctx context.Context) ArgoCDSpecServerResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerResourcesLimitsMapOutput)
}

type ArgoCDSpecServerResourcesLimitsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerResourcesLimits)(nil)).Elem()
}

func (o ArgoCDSpecServerResourcesLimitsOutput) ToArgoCDSpecServerResourcesLimitsOutput() ArgoCDSpecServerResourcesLimitsOutput {
	return o
}

func (o ArgoCDSpecServerResourcesLimitsOutput) ToArgoCDSpecServerResourcesLimitsOutputWithContext(ctx context.Context) ArgoCDSpecServerResourcesLimitsOutput {
	return o
}

type ArgoCDSpecServerResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecServerResourcesLimits)(nil)).Elem()
}

func (o ArgoCDSpecServerResourcesLimitsMapOutput) ToArgoCDSpecServerResourcesLimitsMapOutput() ArgoCDSpecServerResourcesLimitsMapOutput {
	return o
}

func (o ArgoCDSpecServerResourcesLimitsMapOutput) ToArgoCDSpecServerResourcesLimitsMapOutputWithContext(ctx context.Context) ArgoCDSpecServerResourcesLimitsMapOutput {
	return o
}

func (o ArgoCDSpecServerResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) ArgoCDSpecServerResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArgoCDSpecServerResourcesLimits {
		return vs[0].(map[string]ArgoCDSpecServerResourcesLimits)[vs[1].(string)]
	}).(ArgoCDSpecServerResourcesLimitsOutput)
}

type ArgoCDSpecServerResourcesRequests struct {
}

// ArgoCDSpecServerResourcesRequestsInput is an input type that accepts ArgoCDSpecServerResourcesRequestsArgs and ArgoCDSpecServerResourcesRequestsOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerResourcesRequestsInput` via:
//
//          ArgoCDSpecServerResourcesRequestsArgs{...}
type ArgoCDSpecServerResourcesRequestsInput interface {
	pulumi.Input

	ToArgoCDSpecServerResourcesRequestsOutput() ArgoCDSpecServerResourcesRequestsOutput
	ToArgoCDSpecServerResourcesRequestsOutputWithContext(context.Context) ArgoCDSpecServerResourcesRequestsOutput
}

type ArgoCDSpecServerResourcesRequestsArgs struct {
}

func (ArgoCDSpecServerResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerResourcesRequests)(nil)).Elem()
}

func (i ArgoCDSpecServerResourcesRequestsArgs) ToArgoCDSpecServerResourcesRequestsOutput() ArgoCDSpecServerResourcesRequestsOutput {
	return i.ToArgoCDSpecServerResourcesRequestsOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerResourcesRequestsArgs) ToArgoCDSpecServerResourcesRequestsOutputWithContext(ctx context.Context) ArgoCDSpecServerResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerResourcesRequestsOutput)
}

// ArgoCDSpecServerResourcesRequestsMapInput is an input type that accepts ArgoCDSpecServerResourcesRequestsMap and ArgoCDSpecServerResourcesRequestsMapOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerResourcesRequestsMapInput` via:
//
//          ArgoCDSpecServerResourcesRequestsMap{ "key": ArgoCDSpecServerResourcesRequestsArgs{...} }
type ArgoCDSpecServerResourcesRequestsMapInput interface {
	pulumi.Input

	ToArgoCDSpecServerResourcesRequestsMapOutput() ArgoCDSpecServerResourcesRequestsMapOutput
	ToArgoCDSpecServerResourcesRequestsMapOutputWithContext(context.Context) ArgoCDSpecServerResourcesRequestsMapOutput
}

type ArgoCDSpecServerResourcesRequestsMap map[string]ArgoCDSpecServerResourcesRequestsInput

func (ArgoCDSpecServerResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecServerResourcesRequests)(nil)).Elem()
}

func (i ArgoCDSpecServerResourcesRequestsMap) ToArgoCDSpecServerResourcesRequestsMapOutput() ArgoCDSpecServerResourcesRequestsMapOutput {
	return i.ToArgoCDSpecServerResourcesRequestsMapOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerResourcesRequestsMap) ToArgoCDSpecServerResourcesRequestsMapOutputWithContext(ctx context.Context) ArgoCDSpecServerResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerResourcesRequestsMapOutput)
}

type ArgoCDSpecServerResourcesRequestsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerResourcesRequests)(nil)).Elem()
}

func (o ArgoCDSpecServerResourcesRequestsOutput) ToArgoCDSpecServerResourcesRequestsOutput() ArgoCDSpecServerResourcesRequestsOutput {
	return o
}

func (o ArgoCDSpecServerResourcesRequestsOutput) ToArgoCDSpecServerResourcesRequestsOutputWithContext(ctx context.Context) ArgoCDSpecServerResourcesRequestsOutput {
	return o
}

type ArgoCDSpecServerResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArgoCDSpecServerResourcesRequests)(nil)).Elem()
}

func (o ArgoCDSpecServerResourcesRequestsMapOutput) ToArgoCDSpecServerResourcesRequestsMapOutput() ArgoCDSpecServerResourcesRequestsMapOutput {
	return o
}

func (o ArgoCDSpecServerResourcesRequestsMapOutput) ToArgoCDSpecServerResourcesRequestsMapOutputWithContext(ctx context.Context) ArgoCDSpecServerResourcesRequestsMapOutput {
	return o
}

func (o ArgoCDSpecServerResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) ArgoCDSpecServerResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArgoCDSpecServerResourcesRequests {
		return vs[0].(map[string]ArgoCDSpecServerResourcesRequests)[vs[1].(string)]
	}).(ArgoCDSpecServerResourcesRequestsOutput)
}

// Route defines the desired state for an OpenShift Route for the Argo CD Server component.
type ArgoCDSpecServerRoute struct {
	// Annotations is the map of annotations to use for the Route resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Enabled will toggle the creation of the OpenShift Route.
	Enabled bool `pulumi:"enabled"`
	// Path the router watches for, to route traffic for to the service.
	Path *string `pulumi:"path"`
	// TLS provides the ability to configure certificates and termination for the Route.
	Tls *ArgoCDSpecServerRouteTls `pulumi:"tls"`
	// WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
	WildcardPolicy *string `pulumi:"wildcardPolicy"`
}

// ArgoCDSpecServerRouteInput is an input type that accepts ArgoCDSpecServerRouteArgs and ArgoCDSpecServerRouteOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerRouteInput` via:
//
//          ArgoCDSpecServerRouteArgs{...}
type ArgoCDSpecServerRouteInput interface {
	pulumi.Input

	ToArgoCDSpecServerRouteOutput() ArgoCDSpecServerRouteOutput
	ToArgoCDSpecServerRouteOutputWithContext(context.Context) ArgoCDSpecServerRouteOutput
}

// Route defines the desired state for an OpenShift Route for the Argo CD Server component.
type ArgoCDSpecServerRouteArgs struct {
	// Annotations is the map of annotations to use for the Route resource.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Enabled will toggle the creation of the OpenShift Route.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Path the router watches for, to route traffic for to the service.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// TLS provides the ability to configure certificates and termination for the Route.
	Tls ArgoCDSpecServerRouteTlsPtrInput `pulumi:"tls"`
	// WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
	WildcardPolicy pulumi.StringPtrInput `pulumi:"wildcardPolicy"`
}

func (ArgoCDSpecServerRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerRoute)(nil)).Elem()
}

func (i ArgoCDSpecServerRouteArgs) ToArgoCDSpecServerRouteOutput() ArgoCDSpecServerRouteOutput {
	return i.ToArgoCDSpecServerRouteOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerRouteArgs) ToArgoCDSpecServerRouteOutputWithContext(ctx context.Context) ArgoCDSpecServerRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerRouteOutput)
}

func (i ArgoCDSpecServerRouteArgs) ToArgoCDSpecServerRoutePtrOutput() ArgoCDSpecServerRoutePtrOutput {
	return i.ToArgoCDSpecServerRoutePtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerRouteArgs) ToArgoCDSpecServerRoutePtrOutputWithContext(ctx context.Context) ArgoCDSpecServerRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerRouteOutput).ToArgoCDSpecServerRoutePtrOutputWithContext(ctx)
}

// ArgoCDSpecServerRoutePtrInput is an input type that accepts ArgoCDSpecServerRouteArgs, ArgoCDSpecServerRoutePtr and ArgoCDSpecServerRoutePtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerRoutePtrInput` via:
//
//          ArgoCDSpecServerRouteArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecServerRoutePtrInput interface {
	pulumi.Input

	ToArgoCDSpecServerRoutePtrOutput() ArgoCDSpecServerRoutePtrOutput
	ToArgoCDSpecServerRoutePtrOutputWithContext(context.Context) ArgoCDSpecServerRoutePtrOutput
}

type argoCDSpecServerRoutePtrType ArgoCDSpecServerRouteArgs

func ArgoCDSpecServerRoutePtr(v *ArgoCDSpecServerRouteArgs) ArgoCDSpecServerRoutePtrInput {
	return (*argoCDSpecServerRoutePtrType)(v)
}

func (*argoCDSpecServerRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerRoute)(nil)).Elem()
}

func (i *argoCDSpecServerRoutePtrType) ToArgoCDSpecServerRoutePtrOutput() ArgoCDSpecServerRoutePtrOutput {
	return i.ToArgoCDSpecServerRoutePtrOutputWithContext(context.Background())
}

func (i *argoCDSpecServerRoutePtrType) ToArgoCDSpecServerRoutePtrOutputWithContext(ctx context.Context) ArgoCDSpecServerRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerRoutePtrOutput)
}

// Route defines the desired state for an OpenShift Route for the Argo CD Server component.
type ArgoCDSpecServerRouteOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerRoute)(nil)).Elem()
}

func (o ArgoCDSpecServerRouteOutput) ToArgoCDSpecServerRouteOutput() ArgoCDSpecServerRouteOutput {
	return o
}

func (o ArgoCDSpecServerRouteOutput) ToArgoCDSpecServerRouteOutputWithContext(ctx context.Context) ArgoCDSpecServerRouteOutput {
	return o
}

func (o ArgoCDSpecServerRouteOutput) ToArgoCDSpecServerRoutePtrOutput() ArgoCDSpecServerRoutePtrOutput {
	return o.ToArgoCDSpecServerRoutePtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecServerRouteOutput) ToArgoCDSpecServerRoutePtrOutputWithContext(ctx context.Context) ArgoCDSpecServerRoutePtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerRoute) *ArgoCDSpecServerRoute {
		return &v
	}).(ArgoCDSpecServerRoutePtrOutput)
}

// Annotations is the map of annotations to use for the Route resource.
func (o ArgoCDSpecServerRouteOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ArgoCDSpecServerRoute) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Enabled will toggle the creation of the OpenShift Route.
func (o ArgoCDSpecServerRouteOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ArgoCDSpecServerRoute) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Path the router watches for, to route traffic for to the service.
func (o ArgoCDSpecServerRouteOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerRoute) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// TLS provides the ability to configure certificates and termination for the Route.
func (o ArgoCDSpecServerRouteOutput) Tls() ArgoCDSpecServerRouteTlsPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerRoute) *ArgoCDSpecServerRouteTls { return v.Tls }).(ArgoCDSpecServerRouteTlsPtrOutput)
}

// WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
func (o ArgoCDSpecServerRouteOutput) WildcardPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerRoute) *string { return v.WildcardPolicy }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecServerRoutePtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerRoute)(nil)).Elem()
}

func (o ArgoCDSpecServerRoutePtrOutput) ToArgoCDSpecServerRoutePtrOutput() ArgoCDSpecServerRoutePtrOutput {
	return o
}

func (o ArgoCDSpecServerRoutePtrOutput) ToArgoCDSpecServerRoutePtrOutputWithContext(ctx context.Context) ArgoCDSpecServerRoutePtrOutput {
	return o
}

func (o ArgoCDSpecServerRoutePtrOutput) Elem() ArgoCDSpecServerRouteOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerRoute) ArgoCDSpecServerRoute { return *v }).(ArgoCDSpecServerRouteOutput)
}

// Annotations is the map of annotations to use for the Route resource.
func (o ArgoCDSpecServerRoutePtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerRoute) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Enabled will toggle the creation of the OpenShift Route.
func (o ArgoCDSpecServerRoutePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerRoute) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Path the router watches for, to route traffic for to the service.
func (o ArgoCDSpecServerRoutePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerRoute) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// TLS provides the ability to configure certificates and termination for the Route.
func (o ArgoCDSpecServerRoutePtrOutput) Tls() ArgoCDSpecServerRouteTlsPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerRoute) *ArgoCDSpecServerRouteTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ArgoCDSpecServerRouteTlsPtrOutput)
}

// WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
func (o ArgoCDSpecServerRoutePtrOutput) WildcardPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerRoute) *string {
		if v == nil {
			return nil
		}
		return v.WildcardPolicy
	}).(pulumi.StringPtrOutput)
}

// Annotations is the map of annotations to use for the Route resource.
type ArgoCDSpecServerRouteAnnotations struct {
}

// ArgoCDSpecServerRouteAnnotationsInput is an input type that accepts ArgoCDSpecServerRouteAnnotationsArgs and ArgoCDSpecServerRouteAnnotationsOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerRouteAnnotationsInput` via:
//
//          ArgoCDSpecServerRouteAnnotationsArgs{...}
type ArgoCDSpecServerRouteAnnotationsInput interface {
	pulumi.Input

	ToArgoCDSpecServerRouteAnnotationsOutput() ArgoCDSpecServerRouteAnnotationsOutput
	ToArgoCDSpecServerRouteAnnotationsOutputWithContext(context.Context) ArgoCDSpecServerRouteAnnotationsOutput
}

// Annotations is the map of annotations to use for the Route resource.
type ArgoCDSpecServerRouteAnnotationsArgs struct {
}

func (ArgoCDSpecServerRouteAnnotationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerRouteAnnotations)(nil)).Elem()
}

func (i ArgoCDSpecServerRouteAnnotationsArgs) ToArgoCDSpecServerRouteAnnotationsOutput() ArgoCDSpecServerRouteAnnotationsOutput {
	return i.ToArgoCDSpecServerRouteAnnotationsOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerRouteAnnotationsArgs) ToArgoCDSpecServerRouteAnnotationsOutputWithContext(ctx context.Context) ArgoCDSpecServerRouteAnnotationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerRouteAnnotationsOutput)
}

// Annotations is the map of annotations to use for the Route resource.
type ArgoCDSpecServerRouteAnnotationsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerRouteAnnotationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerRouteAnnotations)(nil)).Elem()
}

func (o ArgoCDSpecServerRouteAnnotationsOutput) ToArgoCDSpecServerRouteAnnotationsOutput() ArgoCDSpecServerRouteAnnotationsOutput {
	return o
}

func (o ArgoCDSpecServerRouteAnnotationsOutput) ToArgoCDSpecServerRouteAnnotationsOutputWithContext(ctx context.Context) ArgoCDSpecServerRouteAnnotationsOutput {
	return o
}

// TLS provides the ability to configure certificates and termination for the Route.
type ArgoCDSpecServerRouteTls struct {
	// caCertificate provides the cert authority certificate contents
	CaCertificate *string `pulumi:"caCertificate"`
	// certificate provides certificate contents
	Certificate *string `pulumi:"certificate"`
	// destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
	DestinationCACertificate *string `pulumi:"destinationCACertificate"`
	// insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.
	//  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
	InsecureEdgeTerminationPolicy *string `pulumi:"insecureEdgeTerminationPolicy"`
	// key provides key file contents
	Key *string `pulumi:"key"`
	// termination indicates termination type.
	Termination string `pulumi:"termination"`
}

// ArgoCDSpecServerRouteTlsInput is an input type that accepts ArgoCDSpecServerRouteTlsArgs and ArgoCDSpecServerRouteTlsOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerRouteTlsInput` via:
//
//          ArgoCDSpecServerRouteTlsArgs{...}
type ArgoCDSpecServerRouteTlsInput interface {
	pulumi.Input

	ToArgoCDSpecServerRouteTlsOutput() ArgoCDSpecServerRouteTlsOutput
	ToArgoCDSpecServerRouteTlsOutputWithContext(context.Context) ArgoCDSpecServerRouteTlsOutput
}

// TLS provides the ability to configure certificates and termination for the Route.
type ArgoCDSpecServerRouteTlsArgs struct {
	// caCertificate provides the cert authority certificate contents
	CaCertificate pulumi.StringPtrInput `pulumi:"caCertificate"`
	// certificate provides certificate contents
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
	DestinationCACertificate pulumi.StringPtrInput `pulumi:"destinationCACertificate"`
	// insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.
	//  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
	InsecureEdgeTerminationPolicy pulumi.StringPtrInput `pulumi:"insecureEdgeTerminationPolicy"`
	// key provides key file contents
	Key pulumi.StringPtrInput `pulumi:"key"`
	// termination indicates termination type.
	Termination pulumi.StringInput `pulumi:"termination"`
}

func (ArgoCDSpecServerRouteTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerRouteTls)(nil)).Elem()
}

func (i ArgoCDSpecServerRouteTlsArgs) ToArgoCDSpecServerRouteTlsOutput() ArgoCDSpecServerRouteTlsOutput {
	return i.ToArgoCDSpecServerRouteTlsOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerRouteTlsArgs) ToArgoCDSpecServerRouteTlsOutputWithContext(ctx context.Context) ArgoCDSpecServerRouteTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerRouteTlsOutput)
}

func (i ArgoCDSpecServerRouteTlsArgs) ToArgoCDSpecServerRouteTlsPtrOutput() ArgoCDSpecServerRouteTlsPtrOutput {
	return i.ToArgoCDSpecServerRouteTlsPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerRouteTlsArgs) ToArgoCDSpecServerRouteTlsPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerRouteTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerRouteTlsOutput).ToArgoCDSpecServerRouteTlsPtrOutputWithContext(ctx)
}

// ArgoCDSpecServerRouteTlsPtrInput is an input type that accepts ArgoCDSpecServerRouteTlsArgs, ArgoCDSpecServerRouteTlsPtr and ArgoCDSpecServerRouteTlsPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerRouteTlsPtrInput` via:
//
//          ArgoCDSpecServerRouteTlsArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecServerRouteTlsPtrInput interface {
	pulumi.Input

	ToArgoCDSpecServerRouteTlsPtrOutput() ArgoCDSpecServerRouteTlsPtrOutput
	ToArgoCDSpecServerRouteTlsPtrOutputWithContext(context.Context) ArgoCDSpecServerRouteTlsPtrOutput
}

type argoCDSpecServerRouteTlsPtrType ArgoCDSpecServerRouteTlsArgs

func ArgoCDSpecServerRouteTlsPtr(v *ArgoCDSpecServerRouteTlsArgs) ArgoCDSpecServerRouteTlsPtrInput {
	return (*argoCDSpecServerRouteTlsPtrType)(v)
}

func (*argoCDSpecServerRouteTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerRouteTls)(nil)).Elem()
}

func (i *argoCDSpecServerRouteTlsPtrType) ToArgoCDSpecServerRouteTlsPtrOutput() ArgoCDSpecServerRouteTlsPtrOutput {
	return i.ToArgoCDSpecServerRouteTlsPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecServerRouteTlsPtrType) ToArgoCDSpecServerRouteTlsPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerRouteTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerRouteTlsPtrOutput)
}

// TLS provides the ability to configure certificates and termination for the Route.
type ArgoCDSpecServerRouteTlsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerRouteTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerRouteTls)(nil)).Elem()
}

func (o ArgoCDSpecServerRouteTlsOutput) ToArgoCDSpecServerRouteTlsOutput() ArgoCDSpecServerRouteTlsOutput {
	return o
}

func (o ArgoCDSpecServerRouteTlsOutput) ToArgoCDSpecServerRouteTlsOutputWithContext(ctx context.Context) ArgoCDSpecServerRouteTlsOutput {
	return o
}

func (o ArgoCDSpecServerRouteTlsOutput) ToArgoCDSpecServerRouteTlsPtrOutput() ArgoCDSpecServerRouteTlsPtrOutput {
	return o.ToArgoCDSpecServerRouteTlsPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecServerRouteTlsOutput) ToArgoCDSpecServerRouteTlsPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerRouteTlsPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerRouteTls) *ArgoCDSpecServerRouteTls {
		return &v
	}).(ArgoCDSpecServerRouteTlsPtrOutput)
}

// caCertificate provides the cert authority certificate contents
func (o ArgoCDSpecServerRouteTlsOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerRouteTls) *string { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

// certificate provides certificate contents
func (o ArgoCDSpecServerRouteTlsOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerRouteTls) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
func (o ArgoCDSpecServerRouteTlsOutput) DestinationCACertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerRouteTls) *string { return v.DestinationCACertificate }).(pulumi.StringPtrOutput)
}

// insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.
//  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
func (o ArgoCDSpecServerRouteTlsOutput) InsecureEdgeTerminationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerRouteTls) *string { return v.InsecureEdgeTerminationPolicy }).(pulumi.StringPtrOutput)
}

// key provides key file contents
func (o ArgoCDSpecServerRouteTlsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerRouteTls) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// termination indicates termination type.
func (o ArgoCDSpecServerRouteTlsOutput) Termination() pulumi.StringOutput {
	return o.ApplyT(func(v ArgoCDSpecServerRouteTls) string { return v.Termination }).(pulumi.StringOutput)
}

type ArgoCDSpecServerRouteTlsPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerRouteTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerRouteTls)(nil)).Elem()
}

func (o ArgoCDSpecServerRouteTlsPtrOutput) ToArgoCDSpecServerRouteTlsPtrOutput() ArgoCDSpecServerRouteTlsPtrOutput {
	return o
}

func (o ArgoCDSpecServerRouteTlsPtrOutput) ToArgoCDSpecServerRouteTlsPtrOutputWithContext(ctx context.Context) ArgoCDSpecServerRouteTlsPtrOutput {
	return o
}

func (o ArgoCDSpecServerRouteTlsPtrOutput) Elem() ArgoCDSpecServerRouteTlsOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerRouteTls) ArgoCDSpecServerRouteTls { return *v }).(ArgoCDSpecServerRouteTlsOutput)
}

// caCertificate provides the cert authority certificate contents
func (o ArgoCDSpecServerRouteTlsPtrOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerRouteTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificate
	}).(pulumi.StringPtrOutput)
}

// certificate provides certificate contents
func (o ArgoCDSpecServerRouteTlsPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerRouteTls) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
func (o ArgoCDSpecServerRouteTlsPtrOutput) DestinationCACertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerRouteTls) *string {
		if v == nil {
			return nil
		}
		return v.DestinationCACertificate
	}).(pulumi.StringPtrOutput)
}

// insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.
//  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
func (o ArgoCDSpecServerRouteTlsPtrOutput) InsecureEdgeTerminationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerRouteTls) *string {
		if v == nil {
			return nil
		}
		return v.InsecureEdgeTerminationPolicy
	}).(pulumi.StringPtrOutput)
}

// key provides key file contents
func (o ArgoCDSpecServerRouteTlsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerRouteTls) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// termination indicates termination type.
func (o ArgoCDSpecServerRouteTlsPtrOutput) Termination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerRouteTls) *string {
		if v == nil {
			return nil
		}
		return &v.Termination
	}).(pulumi.StringPtrOutput)
}

// Service defines the options for the Service backing the ArgoCD Server component.
type ArgoCDSpecServerService struct {
	// Type is the ServiceType to use for the Service resource.
	Type string `pulumi:"type"`
}

// ArgoCDSpecServerServiceInput is an input type that accepts ArgoCDSpecServerServiceArgs and ArgoCDSpecServerServiceOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerServiceInput` via:
//
//          ArgoCDSpecServerServiceArgs{...}
type ArgoCDSpecServerServiceInput interface {
	pulumi.Input

	ToArgoCDSpecServerServiceOutput() ArgoCDSpecServerServiceOutput
	ToArgoCDSpecServerServiceOutputWithContext(context.Context) ArgoCDSpecServerServiceOutput
}

// Service defines the options for the Service backing the ArgoCD Server component.
type ArgoCDSpecServerServiceArgs struct {
	// Type is the ServiceType to use for the Service resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ArgoCDSpecServerServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerService)(nil)).Elem()
}

func (i ArgoCDSpecServerServiceArgs) ToArgoCDSpecServerServiceOutput() ArgoCDSpecServerServiceOutput {
	return i.ToArgoCDSpecServerServiceOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerServiceArgs) ToArgoCDSpecServerServiceOutputWithContext(ctx context.Context) ArgoCDSpecServerServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerServiceOutput)
}

func (i ArgoCDSpecServerServiceArgs) ToArgoCDSpecServerServicePtrOutput() ArgoCDSpecServerServicePtrOutput {
	return i.ToArgoCDSpecServerServicePtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecServerServiceArgs) ToArgoCDSpecServerServicePtrOutputWithContext(ctx context.Context) ArgoCDSpecServerServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerServiceOutput).ToArgoCDSpecServerServicePtrOutputWithContext(ctx)
}

// ArgoCDSpecServerServicePtrInput is an input type that accepts ArgoCDSpecServerServiceArgs, ArgoCDSpecServerServicePtr and ArgoCDSpecServerServicePtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecServerServicePtrInput` via:
//
//          ArgoCDSpecServerServiceArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecServerServicePtrInput interface {
	pulumi.Input

	ToArgoCDSpecServerServicePtrOutput() ArgoCDSpecServerServicePtrOutput
	ToArgoCDSpecServerServicePtrOutputWithContext(context.Context) ArgoCDSpecServerServicePtrOutput
}

type argoCDSpecServerServicePtrType ArgoCDSpecServerServiceArgs

func ArgoCDSpecServerServicePtr(v *ArgoCDSpecServerServiceArgs) ArgoCDSpecServerServicePtrInput {
	return (*argoCDSpecServerServicePtrType)(v)
}

func (*argoCDSpecServerServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerService)(nil)).Elem()
}

func (i *argoCDSpecServerServicePtrType) ToArgoCDSpecServerServicePtrOutput() ArgoCDSpecServerServicePtrOutput {
	return i.ToArgoCDSpecServerServicePtrOutputWithContext(context.Background())
}

func (i *argoCDSpecServerServicePtrType) ToArgoCDSpecServerServicePtrOutputWithContext(ctx context.Context) ArgoCDSpecServerServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecServerServicePtrOutput)
}

// Service defines the options for the Service backing the ArgoCD Server component.
type ArgoCDSpecServerServiceOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecServerService)(nil)).Elem()
}

func (o ArgoCDSpecServerServiceOutput) ToArgoCDSpecServerServiceOutput() ArgoCDSpecServerServiceOutput {
	return o
}

func (o ArgoCDSpecServerServiceOutput) ToArgoCDSpecServerServiceOutputWithContext(ctx context.Context) ArgoCDSpecServerServiceOutput {
	return o
}

func (o ArgoCDSpecServerServiceOutput) ToArgoCDSpecServerServicePtrOutput() ArgoCDSpecServerServicePtrOutput {
	return o.ToArgoCDSpecServerServicePtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecServerServiceOutput) ToArgoCDSpecServerServicePtrOutputWithContext(ctx context.Context) ArgoCDSpecServerServicePtrOutput {
	return o.ApplyT(func(v ArgoCDSpecServerService) *ArgoCDSpecServerService {
		return &v
	}).(ArgoCDSpecServerServicePtrOutput)
}

// Type is the ServiceType to use for the Service resource.
func (o ArgoCDSpecServerServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ArgoCDSpecServerService) string { return v.Type }).(pulumi.StringOutput)
}

type ArgoCDSpecServerServicePtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecServerServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecServerService)(nil)).Elem()
}

func (o ArgoCDSpecServerServicePtrOutput) ToArgoCDSpecServerServicePtrOutput() ArgoCDSpecServerServicePtrOutput {
	return o
}

func (o ArgoCDSpecServerServicePtrOutput) ToArgoCDSpecServerServicePtrOutputWithContext(ctx context.Context) ArgoCDSpecServerServicePtrOutput {
	return o
}

func (o ArgoCDSpecServerServicePtrOutput) Elem() ArgoCDSpecServerServiceOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerService) ArgoCDSpecServerService { return *v }).(ArgoCDSpecServerServiceOutput)
}

// Type is the ServiceType to use for the Service resource.
func (o ArgoCDSpecServerServicePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecServerService) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// TLS defines the TLS options for ArgoCD.
type ArgoCDSpecTls struct {
	// CA defines the CA options.
	Ca *ArgoCDSpecTlsCa `pulumi:"ca"`
	// InitialCerts defines custom TLS certificates upon creation of the cluster for connecting Git repositories via HTTPS.
	InitialCerts map[string]string `pulumi:"initialCerts"`
}

// ArgoCDSpecTlsInput is an input type that accepts ArgoCDSpecTlsArgs and ArgoCDSpecTlsOutput values.
// You can construct a concrete instance of `ArgoCDSpecTlsInput` via:
//
//          ArgoCDSpecTlsArgs{...}
type ArgoCDSpecTlsInput interface {
	pulumi.Input

	ToArgoCDSpecTlsOutput() ArgoCDSpecTlsOutput
	ToArgoCDSpecTlsOutputWithContext(context.Context) ArgoCDSpecTlsOutput
}

// TLS defines the TLS options for ArgoCD.
type ArgoCDSpecTlsArgs struct {
	// CA defines the CA options.
	Ca ArgoCDSpecTlsCaPtrInput `pulumi:"ca"`
	// InitialCerts defines custom TLS certificates upon creation of the cluster for connecting Git repositories via HTTPS.
	InitialCerts pulumi.StringMapInput `pulumi:"initialCerts"`
}

func (ArgoCDSpecTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecTls)(nil)).Elem()
}

func (i ArgoCDSpecTlsArgs) ToArgoCDSpecTlsOutput() ArgoCDSpecTlsOutput {
	return i.ToArgoCDSpecTlsOutputWithContext(context.Background())
}

func (i ArgoCDSpecTlsArgs) ToArgoCDSpecTlsOutputWithContext(ctx context.Context) ArgoCDSpecTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecTlsOutput)
}

func (i ArgoCDSpecTlsArgs) ToArgoCDSpecTlsPtrOutput() ArgoCDSpecTlsPtrOutput {
	return i.ToArgoCDSpecTlsPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecTlsArgs) ToArgoCDSpecTlsPtrOutputWithContext(ctx context.Context) ArgoCDSpecTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecTlsOutput).ToArgoCDSpecTlsPtrOutputWithContext(ctx)
}

// ArgoCDSpecTlsPtrInput is an input type that accepts ArgoCDSpecTlsArgs, ArgoCDSpecTlsPtr and ArgoCDSpecTlsPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecTlsPtrInput` via:
//
//          ArgoCDSpecTlsArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecTlsPtrInput interface {
	pulumi.Input

	ToArgoCDSpecTlsPtrOutput() ArgoCDSpecTlsPtrOutput
	ToArgoCDSpecTlsPtrOutputWithContext(context.Context) ArgoCDSpecTlsPtrOutput
}

type argoCDSpecTlsPtrType ArgoCDSpecTlsArgs

func ArgoCDSpecTlsPtr(v *ArgoCDSpecTlsArgs) ArgoCDSpecTlsPtrInput {
	return (*argoCDSpecTlsPtrType)(v)
}

func (*argoCDSpecTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecTls)(nil)).Elem()
}

func (i *argoCDSpecTlsPtrType) ToArgoCDSpecTlsPtrOutput() ArgoCDSpecTlsPtrOutput {
	return i.ToArgoCDSpecTlsPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecTlsPtrType) ToArgoCDSpecTlsPtrOutputWithContext(ctx context.Context) ArgoCDSpecTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecTlsPtrOutput)
}

// TLS defines the TLS options for ArgoCD.
type ArgoCDSpecTlsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecTls)(nil)).Elem()
}

func (o ArgoCDSpecTlsOutput) ToArgoCDSpecTlsOutput() ArgoCDSpecTlsOutput {
	return o
}

func (o ArgoCDSpecTlsOutput) ToArgoCDSpecTlsOutputWithContext(ctx context.Context) ArgoCDSpecTlsOutput {
	return o
}

func (o ArgoCDSpecTlsOutput) ToArgoCDSpecTlsPtrOutput() ArgoCDSpecTlsPtrOutput {
	return o.ToArgoCDSpecTlsPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecTlsOutput) ToArgoCDSpecTlsPtrOutputWithContext(ctx context.Context) ArgoCDSpecTlsPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecTls) *ArgoCDSpecTls {
		return &v
	}).(ArgoCDSpecTlsPtrOutput)
}

// CA defines the CA options.
func (o ArgoCDSpecTlsOutput) Ca() ArgoCDSpecTlsCaPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecTls) *ArgoCDSpecTlsCa { return v.Ca }).(ArgoCDSpecTlsCaPtrOutput)
}

// InitialCerts defines custom TLS certificates upon creation of the cluster for connecting Git repositories via HTTPS.
func (o ArgoCDSpecTlsOutput) InitialCerts() pulumi.StringMapOutput {
	return o.ApplyT(func(v ArgoCDSpecTls) map[string]string { return v.InitialCerts }).(pulumi.StringMapOutput)
}

type ArgoCDSpecTlsPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecTls)(nil)).Elem()
}

func (o ArgoCDSpecTlsPtrOutput) ToArgoCDSpecTlsPtrOutput() ArgoCDSpecTlsPtrOutput {
	return o
}

func (o ArgoCDSpecTlsPtrOutput) ToArgoCDSpecTlsPtrOutputWithContext(ctx context.Context) ArgoCDSpecTlsPtrOutput {
	return o
}

func (o ArgoCDSpecTlsPtrOutput) Elem() ArgoCDSpecTlsOutput {
	return o.ApplyT(func(v *ArgoCDSpecTls) ArgoCDSpecTls { return *v }).(ArgoCDSpecTlsOutput)
}

// CA defines the CA options.
func (o ArgoCDSpecTlsPtrOutput) Ca() ArgoCDSpecTlsCaPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecTls) *ArgoCDSpecTlsCa {
		if v == nil {
			return nil
		}
		return v.Ca
	}).(ArgoCDSpecTlsCaPtrOutput)
}

// InitialCerts defines custom TLS certificates upon creation of the cluster for connecting Git repositories via HTTPS.
func (o ArgoCDSpecTlsPtrOutput) InitialCerts() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ArgoCDSpecTls) map[string]string {
		if v == nil {
			return nil
		}
		return v.InitialCerts
	}).(pulumi.StringMapOutput)
}

// CA defines the CA options.
type ArgoCDSpecTlsCa struct {
	// ConfigMapName is the name of the ConfigMap containing the CA Certificate.
	ConfigMapName *string `pulumi:"configMapName"`
	// SecretName is the name of the Secret containing the CA Certificate and Key.
	SecretName *string `pulumi:"secretName"`
}

// ArgoCDSpecTlsCaInput is an input type that accepts ArgoCDSpecTlsCaArgs and ArgoCDSpecTlsCaOutput values.
// You can construct a concrete instance of `ArgoCDSpecTlsCaInput` via:
//
//          ArgoCDSpecTlsCaArgs{...}
type ArgoCDSpecTlsCaInput interface {
	pulumi.Input

	ToArgoCDSpecTlsCaOutput() ArgoCDSpecTlsCaOutput
	ToArgoCDSpecTlsCaOutputWithContext(context.Context) ArgoCDSpecTlsCaOutput
}

// CA defines the CA options.
type ArgoCDSpecTlsCaArgs struct {
	// ConfigMapName is the name of the ConfigMap containing the CA Certificate.
	ConfigMapName pulumi.StringPtrInput `pulumi:"configMapName"`
	// SecretName is the name of the Secret containing the CA Certificate and Key.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ArgoCDSpecTlsCaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecTlsCa)(nil)).Elem()
}

func (i ArgoCDSpecTlsCaArgs) ToArgoCDSpecTlsCaOutput() ArgoCDSpecTlsCaOutput {
	return i.ToArgoCDSpecTlsCaOutputWithContext(context.Background())
}

func (i ArgoCDSpecTlsCaArgs) ToArgoCDSpecTlsCaOutputWithContext(ctx context.Context) ArgoCDSpecTlsCaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecTlsCaOutput)
}

func (i ArgoCDSpecTlsCaArgs) ToArgoCDSpecTlsCaPtrOutput() ArgoCDSpecTlsCaPtrOutput {
	return i.ToArgoCDSpecTlsCaPtrOutputWithContext(context.Background())
}

func (i ArgoCDSpecTlsCaArgs) ToArgoCDSpecTlsCaPtrOutputWithContext(ctx context.Context) ArgoCDSpecTlsCaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecTlsCaOutput).ToArgoCDSpecTlsCaPtrOutputWithContext(ctx)
}

// ArgoCDSpecTlsCaPtrInput is an input type that accepts ArgoCDSpecTlsCaArgs, ArgoCDSpecTlsCaPtr and ArgoCDSpecTlsCaPtrOutput values.
// You can construct a concrete instance of `ArgoCDSpecTlsCaPtrInput` via:
//
//          ArgoCDSpecTlsCaArgs{...}
//
//  or:
//
//          nil
type ArgoCDSpecTlsCaPtrInput interface {
	pulumi.Input

	ToArgoCDSpecTlsCaPtrOutput() ArgoCDSpecTlsCaPtrOutput
	ToArgoCDSpecTlsCaPtrOutputWithContext(context.Context) ArgoCDSpecTlsCaPtrOutput
}

type argoCDSpecTlsCaPtrType ArgoCDSpecTlsCaArgs

func ArgoCDSpecTlsCaPtr(v *ArgoCDSpecTlsCaArgs) ArgoCDSpecTlsCaPtrInput {
	return (*argoCDSpecTlsCaPtrType)(v)
}

func (*argoCDSpecTlsCaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecTlsCa)(nil)).Elem()
}

func (i *argoCDSpecTlsCaPtrType) ToArgoCDSpecTlsCaPtrOutput() ArgoCDSpecTlsCaPtrOutput {
	return i.ToArgoCDSpecTlsCaPtrOutputWithContext(context.Background())
}

func (i *argoCDSpecTlsCaPtrType) ToArgoCDSpecTlsCaPtrOutputWithContext(ctx context.Context) ArgoCDSpecTlsCaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecTlsCaPtrOutput)
}

// CA defines the CA options.
type ArgoCDSpecTlsCaOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecTlsCaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecTlsCa)(nil)).Elem()
}

func (o ArgoCDSpecTlsCaOutput) ToArgoCDSpecTlsCaOutput() ArgoCDSpecTlsCaOutput {
	return o
}

func (o ArgoCDSpecTlsCaOutput) ToArgoCDSpecTlsCaOutputWithContext(ctx context.Context) ArgoCDSpecTlsCaOutput {
	return o
}

func (o ArgoCDSpecTlsCaOutput) ToArgoCDSpecTlsCaPtrOutput() ArgoCDSpecTlsCaPtrOutput {
	return o.ToArgoCDSpecTlsCaPtrOutputWithContext(context.Background())
}

func (o ArgoCDSpecTlsCaOutput) ToArgoCDSpecTlsCaPtrOutputWithContext(ctx context.Context) ArgoCDSpecTlsCaPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecTlsCa) *ArgoCDSpecTlsCa {
		return &v
	}).(ArgoCDSpecTlsCaPtrOutput)
}

// ConfigMapName is the name of the ConfigMap containing the CA Certificate.
func (o ArgoCDSpecTlsCaOutput) ConfigMapName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecTlsCa) *string { return v.ConfigMapName }).(pulumi.StringPtrOutput)
}

// SecretName is the name of the Secret containing the CA Certificate and Key.
func (o ArgoCDSpecTlsCaOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDSpecTlsCa) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ArgoCDSpecTlsCaPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecTlsCaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDSpecTlsCa)(nil)).Elem()
}

func (o ArgoCDSpecTlsCaPtrOutput) ToArgoCDSpecTlsCaPtrOutput() ArgoCDSpecTlsCaPtrOutput {
	return o
}

func (o ArgoCDSpecTlsCaPtrOutput) ToArgoCDSpecTlsCaPtrOutputWithContext(ctx context.Context) ArgoCDSpecTlsCaPtrOutput {
	return o
}

func (o ArgoCDSpecTlsCaPtrOutput) Elem() ArgoCDSpecTlsCaOutput {
	return o.ApplyT(func(v *ArgoCDSpecTlsCa) ArgoCDSpecTlsCa { return *v }).(ArgoCDSpecTlsCaOutput)
}

// ConfigMapName is the name of the ConfigMap containing the CA Certificate.
func (o ArgoCDSpecTlsCaPtrOutput) ConfigMapName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecTlsCa) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMapName
	}).(pulumi.StringPtrOutput)
}

// SecretName is the name of the Secret containing the CA Certificate and Key.
func (o ArgoCDSpecTlsCaPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDSpecTlsCa) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// InitialCerts defines custom TLS certificates upon creation of the cluster for connecting Git repositories via HTTPS.
type ArgoCDSpecTlsInitialCerts struct {
}

// ArgoCDSpecTlsInitialCertsInput is an input type that accepts ArgoCDSpecTlsInitialCertsArgs and ArgoCDSpecTlsInitialCertsOutput values.
// You can construct a concrete instance of `ArgoCDSpecTlsInitialCertsInput` via:
//
//          ArgoCDSpecTlsInitialCertsArgs{...}
type ArgoCDSpecTlsInitialCertsInput interface {
	pulumi.Input

	ToArgoCDSpecTlsInitialCertsOutput() ArgoCDSpecTlsInitialCertsOutput
	ToArgoCDSpecTlsInitialCertsOutputWithContext(context.Context) ArgoCDSpecTlsInitialCertsOutput
}

// InitialCerts defines custom TLS certificates upon creation of the cluster for connecting Git repositories via HTTPS.
type ArgoCDSpecTlsInitialCertsArgs struct {
}

func (ArgoCDSpecTlsInitialCertsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecTlsInitialCerts)(nil)).Elem()
}

func (i ArgoCDSpecTlsInitialCertsArgs) ToArgoCDSpecTlsInitialCertsOutput() ArgoCDSpecTlsInitialCertsOutput {
	return i.ToArgoCDSpecTlsInitialCertsOutputWithContext(context.Background())
}

func (i ArgoCDSpecTlsInitialCertsArgs) ToArgoCDSpecTlsInitialCertsOutputWithContext(ctx context.Context) ArgoCDSpecTlsInitialCertsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDSpecTlsInitialCertsOutput)
}

// InitialCerts defines custom TLS certificates upon creation of the cluster for connecting Git repositories via HTTPS.
type ArgoCDSpecTlsInitialCertsOutput struct{ *pulumi.OutputState }

func (ArgoCDSpecTlsInitialCertsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDSpecTlsInitialCerts)(nil)).Elem()
}

func (o ArgoCDSpecTlsInitialCertsOutput) ToArgoCDSpecTlsInitialCertsOutput() ArgoCDSpecTlsInitialCertsOutput {
	return o
}

func (o ArgoCDSpecTlsInitialCertsOutput) ToArgoCDSpecTlsInitialCertsOutputWithContext(ctx context.Context) ArgoCDSpecTlsInitialCertsOutput {
	return o
}

// ArgoCDStatus defines the observed state of ArgoCD
type ArgoCDStatus struct {
	// ApplicationController is a simple, high-level summary of where the Argo CD application controller component is in its lifecycle. There are five possible ApplicationController values: Pending: The Argo CD application controller component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD application controller component are in a Ready state. Failed: At least one of the  Argo CD application controller component Pods had a failure. Unknown: For some reason the state of the Argo CD application controller component could not be obtained.
	ApplicationController *string `pulumi:"applicationController"`
	// Dex is a simple, high-level summary of where the Argo CD Dex component is in its lifecycle. There are five possible dex values: Pending: The Argo CD Dex component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Dex component are in a Ready state. Failed: At least one of the  Argo CD Dex component Pods had a failure. Unknown: For some reason the state of the Argo CD Dex component could not be obtained.
	Dex *string `pulumi:"dex"`
	// Phase is a simple, high-level summary of where the ArgoCD is in its lifecycle. There are five possible phase values: Pending: The ArgoCD has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Available: All of the resources for the ArgoCD are ready. Failed: At least one resource has experienced a failure. Unknown: For some reason the state of the ArgoCD phase could not be obtained.
	Phase *string `pulumi:"phase"`
	// Redis is a simple, high-level summary of where the Argo CD Redis component is in its lifecycle. There are five possible redis values: Pending: The Argo CD Redis component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Redis component are in a Ready state. Failed: At least one of the  Argo CD Redis component Pods had a failure. Unknown: For some reason the state of the Argo CD Redis component could not be obtained.
	Redis *string `pulumi:"redis"`
	// Repo is a simple, high-level summary of where the Argo CD Repo component is in its lifecycle. There are five possible repo values: Pending: The Argo CD Repo component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Repo component are in a Ready state. Failed: At least one of the  Argo CD Repo component Pods had a failure. Unknown: For some reason the state of the Argo CD Repo component could not be obtained.
	Repo *string `pulumi:"repo"`
	// Server is a simple, high-level summary of where the Argo CD server component is in its lifecycle. There are five possible server values: Pending: The Argo CD server component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD server component are in a Ready state. Failed: At least one of the  Argo CD server component Pods had a failure. Unknown: For some reason the state of the Argo CD server component could not be obtained.
	Server *string `pulumi:"server"`
}

// ArgoCDStatusInput is an input type that accepts ArgoCDStatusArgs and ArgoCDStatusOutput values.
// You can construct a concrete instance of `ArgoCDStatusInput` via:
//
//          ArgoCDStatusArgs{...}
type ArgoCDStatusInput interface {
	pulumi.Input

	ToArgoCDStatusOutput() ArgoCDStatusOutput
	ToArgoCDStatusOutputWithContext(context.Context) ArgoCDStatusOutput
}

// ArgoCDStatus defines the observed state of ArgoCD
type ArgoCDStatusArgs struct {
	// ApplicationController is a simple, high-level summary of where the Argo CD application controller component is in its lifecycle. There are five possible ApplicationController values: Pending: The Argo CD application controller component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD application controller component are in a Ready state. Failed: At least one of the  Argo CD application controller component Pods had a failure. Unknown: For some reason the state of the Argo CD application controller component could not be obtained.
	ApplicationController pulumi.StringPtrInput `pulumi:"applicationController"`
	// Dex is a simple, high-level summary of where the Argo CD Dex component is in its lifecycle. There are five possible dex values: Pending: The Argo CD Dex component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Dex component are in a Ready state. Failed: At least one of the  Argo CD Dex component Pods had a failure. Unknown: For some reason the state of the Argo CD Dex component could not be obtained.
	Dex pulumi.StringPtrInput `pulumi:"dex"`
	// Phase is a simple, high-level summary of where the ArgoCD is in its lifecycle. There are five possible phase values: Pending: The ArgoCD has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Available: All of the resources for the ArgoCD are ready. Failed: At least one resource has experienced a failure. Unknown: For some reason the state of the ArgoCD phase could not be obtained.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// Redis is a simple, high-level summary of where the Argo CD Redis component is in its lifecycle. There are five possible redis values: Pending: The Argo CD Redis component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Redis component are in a Ready state. Failed: At least one of the  Argo CD Redis component Pods had a failure. Unknown: For some reason the state of the Argo CD Redis component could not be obtained.
	Redis pulumi.StringPtrInput `pulumi:"redis"`
	// Repo is a simple, high-level summary of where the Argo CD Repo component is in its lifecycle. There are five possible repo values: Pending: The Argo CD Repo component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Repo component are in a Ready state. Failed: At least one of the  Argo CD Repo component Pods had a failure. Unknown: For some reason the state of the Argo CD Repo component could not be obtained.
	Repo pulumi.StringPtrInput `pulumi:"repo"`
	// Server is a simple, high-level summary of where the Argo CD server component is in its lifecycle. There are five possible server values: Pending: The Argo CD server component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD server component are in a Ready state. Failed: At least one of the  Argo CD server component Pods had a failure. Unknown: For some reason the state of the Argo CD server component could not be obtained.
	Server pulumi.StringPtrInput `pulumi:"server"`
}

func (ArgoCDStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDStatus)(nil)).Elem()
}

func (i ArgoCDStatusArgs) ToArgoCDStatusOutput() ArgoCDStatusOutput {
	return i.ToArgoCDStatusOutputWithContext(context.Background())
}

func (i ArgoCDStatusArgs) ToArgoCDStatusOutputWithContext(ctx context.Context) ArgoCDStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDStatusOutput)
}

func (i ArgoCDStatusArgs) ToArgoCDStatusPtrOutput() ArgoCDStatusPtrOutput {
	return i.ToArgoCDStatusPtrOutputWithContext(context.Background())
}

func (i ArgoCDStatusArgs) ToArgoCDStatusPtrOutputWithContext(ctx context.Context) ArgoCDStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDStatusOutput).ToArgoCDStatusPtrOutputWithContext(ctx)
}

// ArgoCDStatusPtrInput is an input type that accepts ArgoCDStatusArgs, ArgoCDStatusPtr and ArgoCDStatusPtrOutput values.
// You can construct a concrete instance of `ArgoCDStatusPtrInput` via:
//
//          ArgoCDStatusArgs{...}
//
//  or:
//
//          nil
type ArgoCDStatusPtrInput interface {
	pulumi.Input

	ToArgoCDStatusPtrOutput() ArgoCDStatusPtrOutput
	ToArgoCDStatusPtrOutputWithContext(context.Context) ArgoCDStatusPtrOutput
}

type argoCDStatusPtrType ArgoCDStatusArgs

func ArgoCDStatusPtr(v *ArgoCDStatusArgs) ArgoCDStatusPtrInput {
	return (*argoCDStatusPtrType)(v)
}

func (*argoCDStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDStatus)(nil)).Elem()
}

func (i *argoCDStatusPtrType) ToArgoCDStatusPtrOutput() ArgoCDStatusPtrOutput {
	return i.ToArgoCDStatusPtrOutputWithContext(context.Background())
}

func (i *argoCDStatusPtrType) ToArgoCDStatusPtrOutputWithContext(ctx context.Context) ArgoCDStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDStatusPtrOutput)
}

// ArgoCDStatus defines the observed state of ArgoCD
type ArgoCDStatusOutput struct{ *pulumi.OutputState }

func (ArgoCDStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgoCDStatus)(nil)).Elem()
}

func (o ArgoCDStatusOutput) ToArgoCDStatusOutput() ArgoCDStatusOutput {
	return o
}

func (o ArgoCDStatusOutput) ToArgoCDStatusOutputWithContext(ctx context.Context) ArgoCDStatusOutput {
	return o
}

func (o ArgoCDStatusOutput) ToArgoCDStatusPtrOutput() ArgoCDStatusPtrOutput {
	return o.ToArgoCDStatusPtrOutputWithContext(context.Background())
}

func (o ArgoCDStatusOutput) ToArgoCDStatusPtrOutputWithContext(ctx context.Context) ArgoCDStatusPtrOutput {
	return o.ApplyT(func(v ArgoCDStatus) *ArgoCDStatus {
		return &v
	}).(ArgoCDStatusPtrOutput)
}

// ApplicationController is a simple, high-level summary of where the Argo CD application controller component is in its lifecycle. There are five possible ApplicationController values: Pending: The Argo CD application controller component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD application controller component are in a Ready state. Failed: At least one of the  Argo CD application controller component Pods had a failure. Unknown: For some reason the state of the Argo CD application controller component could not be obtained.
func (o ArgoCDStatusOutput) ApplicationController() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDStatus) *string { return v.ApplicationController }).(pulumi.StringPtrOutput)
}

// Dex is a simple, high-level summary of where the Argo CD Dex component is in its lifecycle. There are five possible dex values: Pending: The Argo CD Dex component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Dex component are in a Ready state. Failed: At least one of the  Argo CD Dex component Pods had a failure. Unknown: For some reason the state of the Argo CD Dex component could not be obtained.
func (o ArgoCDStatusOutput) Dex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDStatus) *string { return v.Dex }).(pulumi.StringPtrOutput)
}

// Phase is a simple, high-level summary of where the ArgoCD is in its lifecycle. There are five possible phase values: Pending: The ArgoCD has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Available: All of the resources for the ArgoCD are ready. Failed: At least one resource has experienced a failure. Unknown: For some reason the state of the ArgoCD phase could not be obtained.
func (o ArgoCDStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// Redis is a simple, high-level summary of where the Argo CD Redis component is in its lifecycle. There are five possible redis values: Pending: The Argo CD Redis component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Redis component are in a Ready state. Failed: At least one of the  Argo CD Redis component Pods had a failure. Unknown: For some reason the state of the Argo CD Redis component could not be obtained.
func (o ArgoCDStatusOutput) Redis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDStatus) *string { return v.Redis }).(pulumi.StringPtrOutput)
}

// Repo is a simple, high-level summary of where the Argo CD Repo component is in its lifecycle. There are five possible repo values: Pending: The Argo CD Repo component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Repo component are in a Ready state. Failed: At least one of the  Argo CD Repo component Pods had a failure. Unknown: For some reason the state of the Argo CD Repo component could not be obtained.
func (o ArgoCDStatusOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDStatus) *string { return v.Repo }).(pulumi.StringPtrOutput)
}

// Server is a simple, high-level summary of where the Argo CD server component is in its lifecycle. There are five possible server values: Pending: The Argo CD server component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD server component are in a Ready state. Failed: At least one of the  Argo CD server component Pods had a failure. Unknown: For some reason the state of the Argo CD server component could not be obtained.
func (o ArgoCDStatusOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArgoCDStatus) *string { return v.Server }).(pulumi.StringPtrOutput)
}

type ArgoCDStatusPtrOutput struct{ *pulumi.OutputState }

func (ArgoCDStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCDStatus)(nil)).Elem()
}

func (o ArgoCDStatusPtrOutput) ToArgoCDStatusPtrOutput() ArgoCDStatusPtrOutput {
	return o
}

func (o ArgoCDStatusPtrOutput) ToArgoCDStatusPtrOutputWithContext(ctx context.Context) ArgoCDStatusPtrOutput {
	return o
}

func (o ArgoCDStatusPtrOutput) Elem() ArgoCDStatusOutput {
	return o.ApplyT(func(v *ArgoCDStatus) ArgoCDStatus { return *v }).(ArgoCDStatusOutput)
}

// ApplicationController is a simple, high-level summary of where the Argo CD application controller component is in its lifecycle. There are five possible ApplicationController values: Pending: The Argo CD application controller component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD application controller component are in a Ready state. Failed: At least one of the  Argo CD application controller component Pods had a failure. Unknown: For some reason the state of the Argo CD application controller component could not be obtained.
func (o ArgoCDStatusPtrOutput) ApplicationController() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDStatus) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationController
	}).(pulumi.StringPtrOutput)
}

// Dex is a simple, high-level summary of where the Argo CD Dex component is in its lifecycle. There are five possible dex values: Pending: The Argo CD Dex component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Dex component are in a Ready state. Failed: At least one of the  Argo CD Dex component Pods had a failure. Unknown: For some reason the state of the Argo CD Dex component could not be obtained.
func (o ArgoCDStatusPtrOutput) Dex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDStatus) *string {
		if v == nil {
			return nil
		}
		return v.Dex
	}).(pulumi.StringPtrOutput)
}

// Phase is a simple, high-level summary of where the ArgoCD is in its lifecycle. There are five possible phase values: Pending: The ArgoCD has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Available: All of the resources for the ArgoCD are ready. Failed: At least one resource has experienced a failure. Unknown: For some reason the state of the ArgoCD phase could not be obtained.
func (o ArgoCDStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Redis is a simple, high-level summary of where the Argo CD Redis component is in its lifecycle. There are five possible redis values: Pending: The Argo CD Redis component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Redis component are in a Ready state. Failed: At least one of the  Argo CD Redis component Pods had a failure. Unknown: For some reason the state of the Argo CD Redis component could not be obtained.
func (o ArgoCDStatusPtrOutput) Redis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDStatus) *string {
		if v == nil {
			return nil
		}
		return v.Redis
	}).(pulumi.StringPtrOutput)
}

// Repo is a simple, high-level summary of where the Argo CD Repo component is in its lifecycle. There are five possible repo values: Pending: The Argo CD Repo component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Repo component are in a Ready state. Failed: At least one of the  Argo CD Repo component Pods had a failure. Unknown: For some reason the state of the Argo CD Repo component could not be obtained.
func (o ArgoCDStatusPtrOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDStatus) *string {
		if v == nil {
			return nil
		}
		return v.Repo
	}).(pulumi.StringPtrOutput)
}

// Server is a simple, high-level summary of where the Argo CD server component is in its lifecycle. There are five possible server values: Pending: The Argo CD server component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD server component are in a Ready state. Failed: At least one of the  Argo CD server component Pods had a failure. Unknown: For some reason the state of the Argo CD server component could not be obtained.
func (o ArgoCDStatusPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArgoCDStatus) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AppProjectTypeOutput{})
	pulumi.RegisterOutputType(AppProjectMetadataOutput{})
	pulumi.RegisterOutputType(AppProjectSpecOutput{})
	pulumi.RegisterOutputType(AppProjectSpecPtrOutput{})
	pulumi.RegisterOutputType(AppProjectSpecClusterResourceBlacklistOutput{})
	pulumi.RegisterOutputType(AppProjectSpecClusterResourceBlacklistArrayOutput{})
	pulumi.RegisterOutputType(AppProjectSpecClusterResourceWhitelistOutput{})
	pulumi.RegisterOutputType(AppProjectSpecClusterResourceWhitelistArrayOutput{})
	pulumi.RegisterOutputType(AppProjectSpecDestinationsOutput{})
	pulumi.RegisterOutputType(AppProjectSpecDestinationsArrayOutput{})
	pulumi.RegisterOutputType(AppProjectSpecNamespaceResourceBlacklistOutput{})
	pulumi.RegisterOutputType(AppProjectSpecNamespaceResourceBlacklistArrayOutput{})
	pulumi.RegisterOutputType(AppProjectSpecNamespaceResourceWhitelistOutput{})
	pulumi.RegisterOutputType(AppProjectSpecNamespaceResourceWhitelistArrayOutput{})
	pulumi.RegisterOutputType(AppProjectSpecOrphanedResourcesOutput{})
	pulumi.RegisterOutputType(AppProjectSpecOrphanedResourcesPtrOutput{})
	pulumi.RegisterOutputType(AppProjectSpecOrphanedResourcesIgnoreOutput{})
	pulumi.RegisterOutputType(AppProjectSpecOrphanedResourcesIgnoreArrayOutput{})
	pulumi.RegisterOutputType(AppProjectSpecRolesOutput{})
	pulumi.RegisterOutputType(AppProjectSpecRolesArrayOutput{})
	pulumi.RegisterOutputType(AppProjectSpecRolesJwtTokensOutput{})
	pulumi.RegisterOutputType(AppProjectSpecRolesJwtTokensArrayOutput{})
	pulumi.RegisterOutputType(AppProjectSpecSignatureKeysOutput{})
	pulumi.RegisterOutputType(AppProjectSpecSignatureKeysArrayOutput{})
	pulumi.RegisterOutputType(AppProjectSpecSyncWindowsOutput{})
	pulumi.RegisterOutputType(AppProjectSpecSyncWindowsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationTypeOutput{})
	pulumi.RegisterOutputType(ApplicationMetadataOutput{})
	pulumi.RegisterOutputType(ApplicationOperationOutput{})
	pulumi.RegisterOutputType(ApplicationOperationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOperationInfoOutput{})
	pulumi.RegisterOutputType(ApplicationOperationInfoArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOperationInitiatedByOutput{})
	pulumi.RegisterOutputType(ApplicationOperationInitiatedByPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOperationRetryOutput{})
	pulumi.RegisterOutputType(ApplicationOperationRetryPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOperationRetryBackoffOutput{})
	pulumi.RegisterOutputType(ApplicationOperationRetryBackoffPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncResourcesOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncResourcesArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourcePtrOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceDirectoryOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceDirectoryPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceDirectoryJsonnetOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceDirectoryJsonnetPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceDirectoryJsonnetExtVarsOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceDirectoryJsonnetTlasOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceDirectoryJsonnetTlasArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceHelmOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceHelmPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceHelmFileParametersOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceHelmFileParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceHelmParametersOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceHelmParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceKsonnetOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceKsonnetPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceKsonnetParametersOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceKsonnetParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceKustomizeOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceKustomizePtrOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourceKustomizeCommonLabelsOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourcePluginOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourcePluginPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourcePluginEnvOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSourcePluginEnvArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSyncStrategyOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSyncStrategyPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSyncStrategyApplyOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSyncStrategyApplyPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSyncStrategyHookOutput{})
	pulumi.RegisterOutputType(ApplicationOperationSyncSyncStrategyHookPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecOutput{})
	pulumi.RegisterOutputType(ApplicationSpecPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecDestinationOutput{})
	pulumi.RegisterOutputType(ApplicationSpecDestinationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecIgnoreDifferencesOutput{})
	pulumi.RegisterOutputType(ApplicationSpecIgnoreDifferencesArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecInfoOutput{})
	pulumi.RegisterOutputType(ApplicationSpecInfoArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourcePtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceDirectoryOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceDirectoryPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceDirectoryJsonnetOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceDirectoryJsonnetPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceDirectoryJsonnetExtVarsOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceDirectoryJsonnetExtVarsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceDirectoryJsonnetTlasOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceDirectoryJsonnetTlasArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceHelmOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceHelmPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceHelmFileParametersOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceHelmFileParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceHelmParametersOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceHelmParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceKsonnetOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceKsonnetPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceKsonnetParametersOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceKsonnetParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceKustomizeOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceKustomizePtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourceKustomizeCommonLabelsOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourcePluginOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourcePluginPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourcePluginEnvOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSourcePluginEnvArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSyncPolicyOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSyncPolicyPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSyncPolicyAutomatedOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSyncPolicyAutomatedPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSyncPolicyRetryOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSyncPolicyRetryPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSyncPolicyRetryBackoffOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSyncPolicyRetryBackoffPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOutput{})
	pulumi.RegisterOutputType(ApplicationStatusPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusConditionsOutput{})
	pulumi.RegisterOutputType(ApplicationStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHealthOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHealthPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistoryOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistoryArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourcePtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceDirectoryOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceDirectoryPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceDirectoryJsonnetOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceDirectoryJsonnetPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceDirectoryJsonnetExtVarsOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceDirectoryJsonnetTlasOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceDirectoryJsonnetTlasArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceHelmOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceHelmPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceHelmFileParametersOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceHelmFileParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceHelmParametersOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceHelmParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceKsonnetOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceKsonnetPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceKsonnetParametersOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceKsonnetParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceKustomizeOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceKustomizePtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourceKustomizeCommonLabelsOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourcePluginOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourcePluginPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourcePluginEnvOutput{})
	pulumi.RegisterOutputType(ApplicationStatusHistorySourcePluginEnvArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStatePtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationInfoOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationInfoArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationInitiatedByOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationInitiatedByPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationRetryOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationRetryPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationRetryBackoffOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationRetryBackoffPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncResourcesOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncResourcesArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourcePtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceDirectoryOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceDirectoryPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceHelmOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceHelmPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceHelmParametersOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceHelmParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceKsonnetOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceKsonnetPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceKustomizeOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceKustomizePtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourceKustomizeCommonLabelsOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourcePluginOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourcePluginPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourcePluginEnvOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSourcePluginEnvArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSyncStrategyOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSyncStrategyPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSyncStrategyApplyOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSyncStrategyApplyPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSyncStrategyHookOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateOperationSyncSyncStrategyHookPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultResourcesOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultResourcesArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourcePtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceDirectoryOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceDirectoryPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceHelmOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceHelmPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceHelmFileParametersOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceHelmParametersOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceHelmParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceKsonnetOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceKsonnetPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceKsonnetParametersOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceKustomizeOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceKustomizePtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourceKustomizeCommonLabelsOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourcePluginOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourcePluginPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourcePluginEnvOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOperationStateSyncResultSourcePluginEnvArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusResourcesOutput{})
	pulumi.RegisterOutputType(ApplicationStatusResourcesArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusResourcesHealthOutput{})
	pulumi.RegisterOutputType(ApplicationStatusResourcesHealthPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSummaryOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSummaryPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToDestinationOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToDestinationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourcePtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceDirectoryOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceDirectoryPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceDirectoryJsonnetOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceDirectoryJsonnetPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceHelmOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceHelmPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceHelmFileParametersOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceHelmFileParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceHelmParametersOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceHelmParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceKsonnetOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceKsonnetPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceKsonnetParametersOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceKsonnetParametersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceKustomizeOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceKustomizePtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourceKustomizeCommonLabelsOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourcePluginOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourcePluginPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourcePluginEnvOutput{})
	pulumi.RegisterOutputType(ApplicationStatusSyncComparedToSourcePluginEnvArrayOutput{})
	pulumi.RegisterOutputType(ArgoCDTypeOutput{})
	pulumi.RegisterOutputType(ArgoCDExportTypeOutput{})
	pulumi.RegisterOutputType(ArgoCDExportMetadataOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStorageOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStoragePtrOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStoragePvcOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStoragePvcPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStoragePvcDataSourceOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStoragePvcDataSourcePtrOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStoragePvcResourcesOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStoragePvcResourcesPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStoragePvcResourcesLimitsOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStoragePvcResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStoragePvcResourcesRequestsOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStoragePvcResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStoragePvcSelectorOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStoragePvcSelectorPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStoragePvcSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ArgoCDExportSpecStoragePvcSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(ArgoCDExportStatusOutput{})
	pulumi.RegisterOutputType(ArgoCDExportStatusPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDMetadataOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecControllerOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecControllerPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecControllerProcessorsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecControllerProcessorsPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecControllerResourcesOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecControllerResourcesPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecControllerResourcesLimitsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecControllerResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecControllerResourcesRequestsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecControllerResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecDexOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecDexPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecDexResourcesOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecDexResourcesPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecDexResourcesLimitsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecDexResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecDexResourcesRequestsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecDexResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaIngressOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaIngressPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaIngressAnnotationsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaIngressTlsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaIngressTlsArrayOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaResourcesOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaResourcesPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaResourcesLimitsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaResourcesRequestsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaRouteOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaRoutePtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaRouteAnnotationsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaRouteTlsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecGrafanaRouteTlsPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecHaOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecHaPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecImportOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecImportPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecInitialSSHKnownHostsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecInitialSSHKnownHostsPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecPrometheusOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecPrometheusPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecPrometheusIngressOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecPrometheusIngressPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecPrometheusIngressAnnotationsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecPrometheusIngressTlsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecPrometheusIngressTlsArrayOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecPrometheusRouteOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecPrometheusRoutePtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecPrometheusRouteAnnotationsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecPrometheusRouteTlsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecPrometheusRouteTlsPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRbacOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRbacPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRedisOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRedisPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRedisResourcesOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRedisResourcesPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRedisResourcesLimitsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRedisResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRedisResourcesRequestsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRedisResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRepoOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRepoPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRepoResourcesOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRepoResourcesPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRepoResourcesLimitsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRepoResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRepoResourcesRequestsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecRepoResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerAutoscaleOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerAutoscalePtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerAutoscaleHpaOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerAutoscaleHpaPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerAutoscaleHpaScaleTargetRefOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerAutoscaleHpaScaleTargetRefPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerGrpcOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerGrpcPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerGrpcIngressOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerGrpcIngressPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerGrpcIngressAnnotationsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerGrpcIngressTlsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerGrpcIngressTlsArrayOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerIngressOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerIngressPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerIngressAnnotationsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerIngressTlsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerIngressTlsArrayOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerResourcesOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerResourcesPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerResourcesLimitsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerResourcesRequestsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerRouteOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerRoutePtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerRouteAnnotationsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerRouteTlsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerRouteTlsPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerServiceOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecServerServicePtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecTlsOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecTlsPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecTlsCaOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecTlsCaPtrOutput{})
	pulumi.RegisterOutputType(ArgoCDSpecTlsInitialCertsOutput{})
	pulumi.RegisterOutputType(ArgoCDStatusOutput{})
	pulumi.RegisterOutputType(ArgoCDStatusPtrOutput{})
}

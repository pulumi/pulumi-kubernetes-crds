// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace argoproj {
    export namespace v1alpha1 {
        /**
         * AppProjectSpec is the specification of an AppProject
         */
        export interface AppProjectSpec {
            /**
             * ClusterResourceWhitelist contains list of whitelisted cluster level resources
             */
            clusterResourceWhitelist?: outputs.argoproj.v1alpha1.AppProjectSpecClusterResourceWhitelist[];
            /**
             * Description contains optional project description
             */
            description?: string;
            /**
             * Destinations contains list of destinations available for deployment
             */
            destinations?: outputs.argoproj.v1alpha1.AppProjectSpecDestinations[];
            /**
             * NamespaceResourceBlacklist contains list of blacklisted namespace level resources
             */
            namespaceResourceBlacklist?: outputs.argoproj.v1alpha1.AppProjectSpecNamespaceResourceBlacklist[];
            /**
             * NamespaceResourceWhitelist contains list of whitelisted namespace level resources
             */
            namespaceResourceWhitelist?: outputs.argoproj.v1alpha1.AppProjectSpecNamespaceResourceWhitelist[];
            /**
             * OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
             */
            orphanedResources?: outputs.argoproj.v1alpha1.AppProjectSpecOrphanedResources;
            /**
             * Roles are user defined RBAC roles associated with this project
             */
            roles?: outputs.argoproj.v1alpha1.AppProjectSpecRoles[];
            /**
             * SourceRepos contains list of repository URLs which can be used for deployment
             */
            sourceRepos?: string[];
            /**
             * SyncWindows controls when syncs can be run for apps in this project
             */
            syncWindows?: outputs.argoproj.v1alpha1.AppProjectSpecSyncWindows[];
        }

        /**
         * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
         */
        export interface AppProjectSpecClusterResourceWhitelist {
            group: string;
            kind: string;
        }

        /**
         * ApplicationDestination contains deployment destination information
         */
        export interface AppProjectSpecDestinations {
            /**
             * Namespace overrides the environment namespace value in the ksonnet app.yaml
             */
            namespace?: string;
            /**
             * Server overrides the environment server value in the ksonnet app.yaml
             */
            server?: string;
        }

        /**
         * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
         */
        export interface AppProjectSpecNamespaceResourceBlacklist {
            group: string;
            kind: string;
        }

        /**
         * GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
         */
        export interface AppProjectSpecNamespaceResourceWhitelist {
            group: string;
            kind: string;
        }

        /**
         * OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
         */
        export interface AppProjectSpecOrphanedResources {
            /**
             * Warn indicates if warning condition should be created for apps which have orphaned resources
             */
            warn?: boolean;
        }

        /**
         * ProjectRole represents a role that has access to a project
         */
        export interface AppProjectSpecRoles {
            /**
             * Description is a description of the role
             */
            description?: string;
            /**
             * Groups are a list of OIDC group claims bound to this role
             */
            groups?: string[];
            /**
             * JWTTokens are a list of generated JWT tokens bound to this role
             */
            jwtTokens?: outputs.argoproj.v1alpha1.AppProjectSpecRolesJwtTokens[];
            /**
             * Name is a name for this role
             */
            name: string;
            /**
             * Policies Stores a list of casbin formated strings that define access policies for the role in the project
             */
            policies?: string[];
        }

        /**
         * JWTToken holds the issuedAt and expiresAt values of a token
         */
        export interface AppProjectSpecRolesJwtTokens {
            exp?: number;
            iat: number;
            id?: string;
        }

        /**
         * SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps
         */
        export interface AppProjectSpecSyncWindows {
            /**
             * Applications contains a list of applications that the window will apply to
             */
            applications?: string[];
            /**
             * Clusters contains a list of clusters that the window will apply to
             */
            clusters?: string[];
            /**
             * Duration is the amount of time the sync window will be open
             */
            duration?: string;
            /**
             * Kind defines if the window allows or blocks syncs
             */
            kind?: string;
            /**
             * ManualSync enables manual syncs when they would otherwise be blocked
             */
            manualSync?: boolean;
            /**
             * Namespaces contains a list of namespaces that the window will apply to
             */
            namespaces?: string[];
            /**
             * Schedule is the time the window will begin, specified in cron format
             */
            schedule?: string;
        }

        /**
         * Operation contains requested operation parameters.
         */
        export interface ApplicationOperation {
            info?: outputs.argoproj.v1alpha1.ApplicationOperationInfo[];
            /**
             * OperationInitiator holds information about the operation initiator
             */
            initiatedBy?: outputs.argoproj.v1alpha1.ApplicationOperationInitiatedBy;
            /**
             * SyncOperation contains sync operation details.
             */
            sync?: outputs.argoproj.v1alpha1.ApplicationOperationSync;
        }

        export interface ApplicationOperationInfo {
            name: string;
            value: string;
        }

        /**
         * OperationInitiator holds information about the operation initiator
         */
        export interface ApplicationOperationInitiatedBy {
            /**
             * Automated is set to true if operation was initiated automatically by the application controller.
             */
            automated?: boolean;
            /**
             * Name of a user who started operation.
             */
            username?: string;
        }

        /**
         * SyncOperation contains sync operation details.
         */
        export interface ApplicationOperationSync {
            /**
             * DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
             */
            dryRun?: boolean;
            /**
             * Manifests is an optional field that overrides sync source with a local directory for development
             */
            manifests?: string[];
            /**
             * Prune deletes resources that are no longer tracked in git
             */
            prune?: boolean;
            /**
             * Resources describes which resources to sync
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationOperationSyncResources[];
            /**
             * Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
             */
            revision?: string;
            /**
             * Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
             */
            source?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSource;
            /**
             * SyncOptions provide per-sync sync-options, e.g. Validate=false
             */
            syncOptions?: string[];
            /**
             * SyncStrategy describes how to perform the sync
             */
            syncStrategy?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSyncStrategy;
        }

        /**
         * SyncOperationResource contains resources to sync.
         */
        export interface ApplicationOperationSyncResources {
            group?: string;
            kind: string;
            name: string;
        }

        /**
         * Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
         */
        export interface ApplicationOperationSyncSource {
            /**
             * Chart is a Helm chart name
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceKustomize;
            /**
             * Path is a directory path within the Git repository
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcePlugin;
            /**
             * RepoURL is the repository URL of the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationOperationSyncSourceDirectory {
            /**
             * ApplicationSourceJsonnet holds jsonnet specific options
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        /**
         * ApplicationSourceJsonnet holds jsonnet specific options
         */
        export interface ApplicationOperationSyncSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectoryJsonnetExtVars[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar is a jsonnet variable
         */
        export interface ApplicationOperationSyncSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar is a jsonnet variable
         */
        export interface ApplicationOperationSyncSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationOperationSyncSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceHelmFileParameters[];
            /**
             * Parameters are parameters to the helm template
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceHelmParameters[];
            /**
             * The Helm release name. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values is Helm values, typically defined as a block
             */
            values?: string;
        }

        /**
         * HelmFileParameter is a file parameter to a helm template
         */
        export interface ApplicationOperationSyncSourceHelmFileParameters {
            /**
             * Name is the name of the helm parameter
             */
            name?: string;
            /**
             * Path is the path value for the helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter to a helm template
         */
        export interface ApplicationOperationSyncSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the helm parameter
             */
            name?: string;
            /**
             * Value is the value for the helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationOperationSyncSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationOperationSyncSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationOperationSyncSourceKustomize {
            /**
             * CommonLabels adds additional kustomize commonLabels
             */
            commonLabels?: {[key: string]: string};
            /**
             * Images are kustomize image overrides
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version contains optional Kustomize version
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationOperationSyncSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationOperationSyncSourcePluginEnv {
            /**
             * the name, usually uppercase
             */
            name: string;
            /**
             * the value
             */
            value: string;
        }

        /**
         * SyncStrategy describes how to perform the sync
         */
        export interface ApplicationOperationSyncSyncStrategy {
            /**
             * Apply wil perform a `kubectl apply` to perform the sync.
             */
            apply?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSyncStrategyApply;
            /**
             * Hook will submit any referenced resources to perform the sync. This is the default strategy
             */
            hook?: outputs.argoproj.v1alpha1.ApplicationOperationSyncSyncStrategyHook;
        }

        /**
         * Apply wil perform a `kubectl apply` to perform the sync.
         */
        export interface ApplicationOperationSyncSyncStrategyApply {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * Hook will submit any referenced resources to perform the sync. This is the default strategy
         */
        export interface ApplicationOperationSyncSyncStrategyHook {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
         */
        export interface ApplicationSpec {
            /**
             * Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
             */
            destination: outputs.argoproj.v1alpha1.ApplicationSpecDestination;
            /**
             * IgnoreDifferences controls resources fields which should be ignored during comparison
             */
            ignoreDifferences?: outputs.argoproj.v1alpha1.ApplicationSpecIgnoreDifferences[];
            /**
             * Infos contains a list of useful information (URLs, email addresses, and plain text) that relates to the application
             */
            info?: outputs.argoproj.v1alpha1.ApplicationSpecInfo[];
            /**
             * Project is a application project name. Empty name means that application belongs to 'default' project.
             */
            project: string;
            /**
             * This limits this number of items kept in the apps revision history. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
             */
            revisionHistoryLimit?: number;
            /**
             * Source is a reference to the location ksonnet application definition
             */
            source: outputs.argoproj.v1alpha1.ApplicationSpecSource;
            /**
             * SyncPolicy controls when a sync will be performed
             */
            syncPolicy?: outputs.argoproj.v1alpha1.ApplicationSpecSyncPolicy;
        }

        /**
         * Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
         */
        export interface ApplicationSpecDestination {
            /**
             * Namespace overrides the environment namespace value in the ksonnet app.yaml
             */
            namespace?: string;
            /**
             * Server overrides the environment server value in the ksonnet app.yaml
             */
            server?: string;
        }

        /**
         * ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
         */
        export interface ApplicationSpecIgnoreDifferences {
            group?: string;
            jsonPointers: string[];
            kind: string;
            name?: string;
            namespace?: string;
        }

        export interface ApplicationSpecInfo {
            name: string;
            value: string;
        }

        /**
         * Source is a reference to the location ksonnet application definition
         */
        export interface ApplicationSpecSource {
            /**
             * Chart is a Helm chart name
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationSpecSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationSpecSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationSpecSourceKustomize;
            /**
             * Path is a directory path within the Git repository
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationSpecSourcePlugin;
            /**
             * RepoURL is the repository URL of the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationSpecSourceDirectory {
            /**
             * ApplicationSourceJsonnet holds jsonnet specific options
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        /**
         * ApplicationSourceJsonnet holds jsonnet specific options
         */
        export interface ApplicationSpecSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectoryJsonnetExtVars[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationSpecSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar is a jsonnet variable
         */
        export interface ApplicationSpecSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar is a jsonnet variable
         */
        export interface ApplicationSpecSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationSpecSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourceHelmFileParameters[];
            /**
             * Parameters are parameters to the helm template
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourceHelmParameters[];
            /**
             * The Helm release name. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values is Helm values, typically defined as a block
             */
            values?: string;
        }

        /**
         * HelmFileParameter is a file parameter to a helm template
         */
        export interface ApplicationSpecSourceHelmFileParameters {
            /**
             * Name is the name of the helm parameter
             */
            name?: string;
            /**
             * Path is the path value for the helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter to a helm template
         */
        export interface ApplicationSpecSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the helm parameter
             */
            name?: string;
            /**
             * Value is the value for the helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationSpecSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationSpecSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationSpecSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationSpecSourceKustomize {
            /**
             * CommonLabels adds additional kustomize commonLabels
             */
            commonLabels?: {[key: string]: string};
            /**
             * Images are kustomize image overrides
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version contains optional Kustomize version
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationSpecSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationSpecSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationSpecSourcePluginEnv {
            /**
             * the name, usually uppercase
             */
            name: string;
            /**
             * the value
             */
            value: string;
        }

        /**
         * SyncPolicy controls when a sync will be performed
         */
        export interface ApplicationSpecSyncPolicy {
            /**
             * Automated will keep an application synced to the target revision
             */
            automated?: outputs.argoproj.v1alpha1.ApplicationSpecSyncPolicyAutomated;
            /**
             * Options allow you to specify whole app sync-options
             */
            syncOptions?: string[];
        }

        /**
         * Automated will keep an application synced to the target revision
         */
        export interface ApplicationSpecSyncPolicyAutomated {
            /**
             * Prune will prune resources automatically as part of automated sync (default: false)
             */
            prune?: boolean;
            /**
             * SelfHeal enables auto-syncing if  (default: false)
             */
            selfHeal?: boolean;
        }

        /**
         * ApplicationStatus contains information about application sync, health status
         */
        export interface ApplicationStatus {
            conditions?: outputs.argoproj.v1alpha1.ApplicationStatusConditions[];
            health?: outputs.argoproj.v1alpha1.ApplicationStatusHealth;
            /**
             * RevisionHistories is a array of history, oldest first and newest last
             */
            history?: outputs.argoproj.v1alpha1.ApplicationStatusHistory[];
            /**
             * ObservedAt indicates when the application state was updated without querying latest git state
             */
            observedAt?: string;
            /**
             * OperationState contains information about state of currently performing operation on application.
             */
            operationState?: outputs.argoproj.v1alpha1.ApplicationStatusOperationState;
            /**
             * ReconciledAt indicates when the application state was reconciled using the latest git version
             */
            reconciledAt?: string;
            resources?: outputs.argoproj.v1alpha1.ApplicationStatusResources[];
            sourceType?: string;
            summary?: outputs.argoproj.v1alpha1.ApplicationStatusSummary;
            /**
             * SyncStatus is a comparison result of application spec and deployed application.
             */
            sync?: outputs.argoproj.v1alpha1.ApplicationStatusSync;
        }

        /**
         * ApplicationCondition contains details about current application condition
         */
        export interface ApplicationStatusConditions {
            /**
             * LastTransitionTime is the time the condition was first observed.
             */
            lastTransitionTime?: string;
            /**
             * Message contains human-readable message indicating details about condition
             */
            message: string;
            /**
             * Type is an application condition type
             */
            type: string;
        }

        export interface ApplicationStatusHealth {
            message?: string;
            /**
             * Represents resource health status
             */
            status?: string;
        }

        /**
         * RevisionHistory contains information relevant to an application deployment
         */
        export interface ApplicationStatusHistory {
            deployedAt: string;
            id: number;
            revision: string;
            /**
             * ApplicationSource contains information about github repository, path within repository and target application environment.
             */
            source?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySource;
        }

        /**
         * ApplicationSource contains information about github repository, path within repository and target application environment.
         */
        export interface ApplicationStatusHistorySource {
            /**
             * Chart is a Helm chart name
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceKustomize;
            /**
             * Path is a directory path within the Git repository
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcePlugin;
            /**
             * RepoURL is the repository URL of the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusHistorySourceDirectory {
            /**
             * ApplicationSourceJsonnet holds jsonnet specific options
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectoryJsonnet;
            recurse?: boolean;
        }

        /**
         * ApplicationSourceJsonnet holds jsonnet specific options
         */
        export interface ApplicationStatusHistorySourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectoryJsonnetExtVars[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar is a jsonnet variable
         */
        export interface ApplicationStatusHistorySourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar is a jsonnet variable
         */
        export interface ApplicationStatusHistorySourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusHistorySourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceHelmFileParameters[];
            /**
             * Parameters are parameters to the helm template
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceHelmParameters[];
            /**
             * The Helm release name. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values is Helm values, typically defined as a block
             */
            values?: string;
        }

        /**
         * HelmFileParameter is a file parameter to a helm template
         */
        export interface ApplicationStatusHistorySourceHelmFileParameters {
            /**
             * Name is the name of the helm parameter
             */
            name?: string;
            /**
             * Path is the path value for the helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter to a helm template
         */
        export interface ApplicationStatusHistorySourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the helm parameter
             */
            name?: string;
            /**
             * Value is the value for the helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationStatusHistorySourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationStatusHistorySourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusHistorySourceKustomize {
            /**
             * CommonLabels adds additional kustomize commonLabels
             */
            commonLabels?: {[key: string]: string};
            /**
             * Images are kustomize image overrides
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version contains optional Kustomize version
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationStatusHistorySourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationStatusHistorySourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationStatusHistorySourcePluginEnv {
            /**
             * the name, usually uppercase
             */
            name: string;
            /**
             * the value
             */
            value: string;
        }

        /**
         * OperationState contains information about state of currently performing operation on application.
         */
        export interface ApplicationStatusOperationState {
            /**
             * FinishedAt contains time of operation completion
             */
            finishedAt?: string;
            /**
             * Message hold any pertinent messages when attempting to perform operation (typically errors).
             */
            message?: string;
            /**
             * Operation is the original requested operation
             */
            operation: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperation;
            /**
             * Phase is the current phase of the operation
             */
            phase: string;
            /**
             * StartedAt contains time of operation start
             */
            startedAt: string;
            /**
             * SyncResult is the result of a Sync operation
             */
            syncResult?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResult;
        }

        /**
         * Operation is the original requested operation
         */
        export interface ApplicationStatusOperationStateOperation {
            info?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationInfo[];
            /**
             * OperationInitiator holds information about the operation initiator
             */
            initiatedBy?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationInitiatedBy;
            /**
             * SyncOperation contains sync operation details.
             */
            sync?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSync;
        }

        export interface ApplicationStatusOperationStateOperationInfo {
            name: string;
            value: string;
        }

        /**
         * OperationInitiator holds information about the operation initiator
         */
        export interface ApplicationStatusOperationStateOperationInitiatedBy {
            /**
             * Automated is set to true if operation was initiated automatically by the application controller.
             */
            automated?: boolean;
            /**
             * Name of a user who started operation.
             */
            username?: string;
        }

        /**
         * SyncOperation contains sync operation details.
         */
        export interface ApplicationStatusOperationStateOperationSync {
            /**
             * DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
             */
            dryRun?: boolean;
            /**
             * Manifests is an optional field that overrides sync source with a local directory for development
             */
            manifests?: string[];
            /**
             * Prune deletes resources that are no longer tracked in git
             */
            prune?: boolean;
            /**
             * Resources describes which resources to sync
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncResources[];
            /**
             * Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
             */
            revision?: string;
            /**
             * Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
             */
            source?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSource;
            /**
             * SyncOptions provide per-sync sync-options, e.g. Validate=false
             */
            syncOptions?: string[];
            /**
             * SyncStrategy describes how to perform the sync
             */
            syncStrategy?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSyncStrategy;
        }

        /**
         * SyncOperationResource contains resources to sync.
         */
        export interface ApplicationStatusOperationStateOperationSyncResources {
            group?: string;
            kind: string;
            name: string;
        }

        /**
         * Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
         */
        export interface ApplicationStatusOperationStateOperationSyncSource {
            /**
             * Chart is a Helm chart name
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceKustomize;
            /**
             * Path is a directory path within the Git repository
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourcePlugin;
            /**
             * RepoURL is the repository URL of the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceDirectory {
            /**
             * ApplicationSourceJsonnet holds jsonnet specific options
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        /**
         * ApplicationSourceJsonnet holds jsonnet specific options
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar is a jsonnet variable
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar is a jsonnet variable
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters[];
            /**
             * Parameters are parameters to the helm template
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceHelmParameters[];
            /**
             * The Helm release name. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values is Helm values, typically defined as a block
             */
            values?: string;
        }

        /**
         * HelmFileParameter is a file parameter to a helm template
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters {
            /**
             * Name is the name of the helm parameter
             */
            name?: string;
            /**
             * Path is the path value for the helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter to a helm template
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the helm parameter
             */
            name?: string;
            /**
             * Value is the value for the helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusOperationStateOperationSyncSourceKustomize {
            /**
             * CommonLabels adds additional kustomize commonLabels
             */
            commonLabels?: {[key: string]: string};
            /**
             * Images are kustomize image overrides
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version contains optional Kustomize version
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationStatusOperationStateOperationSyncSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationStatusOperationStateOperationSyncSourcePluginEnv {
            /**
             * the name, usually uppercase
             */
            name: string;
            /**
             * the value
             */
            value: string;
        }

        /**
         * SyncStrategy describes how to perform the sync
         */
        export interface ApplicationStatusOperationStateOperationSyncSyncStrategy {
            /**
             * Apply wil perform a `kubectl apply` to perform the sync.
             */
            apply?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSyncStrategyApply;
            /**
             * Hook will submit any referenced resources to perform the sync. This is the default strategy
             */
            hook?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateOperationSyncSyncStrategyHook;
        }

        /**
         * Apply wil perform a `kubectl apply` to perform the sync.
         */
        export interface ApplicationStatusOperationStateOperationSyncSyncStrategyApply {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * Hook will submit any referenced resources to perform the sync. This is the default strategy
         */
        export interface ApplicationStatusOperationStateOperationSyncSyncStrategyHook {
            /**
             * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
             */
            force?: boolean;
        }

        /**
         * SyncResult is the result of a Sync operation
         */
        export interface ApplicationStatusOperationStateSyncResult {
            /**
             * Resources holds the sync result of each individual resource
             */
            resources?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultResources[];
            /**
             * Revision holds the revision of the sync
             */
            revision: string;
            /**
             * Source records the application source information of the sync, used for comparing auto-sync
             */
            source?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSource;
        }

        /**
         * ResourceResult holds the operation result details of a specific resource
         */
        export interface ApplicationStatusOperationStateSyncResultResources {
            group: string;
            /**
             * the state of any operation associated with this resource OR hook note: can contain values for non-hook resources
             */
            hookPhase?: string;
            /**
             * the type of the hook, empty for non-hook resources
             */
            hookType?: string;
            kind: string;
            /**
             * message for the last sync OR operation
             */
            message?: string;
            name: string;
            namespace: string;
            /**
             * the final result of the sync, this is be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
             */
            status?: string;
            /**
             * indicates the particular phase of the sync that this is for
             */
            syncPhase?: string;
            version: string;
        }

        /**
         * Source records the application source information of the sync, used for comparing auto-sync
         */
        export interface ApplicationStatusOperationStateSyncResultSource {
            /**
             * Chart is a Helm chart name
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceKustomize;
            /**
             * Path is a directory path within the Git repository
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourcePlugin;
            /**
             * RepoURL is the repository URL of the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusOperationStateSyncResultSourceDirectory {
            /**
             * ApplicationSourceJsonnet holds jsonnet specific options
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        /**
         * ApplicationSourceJsonnet holds jsonnet specific options
         */
        export interface ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar is a jsonnet variable
         */
        export interface ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar is a jsonnet variable
         */
        export interface ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusOperationStateSyncResultSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceHelmFileParameters[];
            /**
             * Parameters are parameters to the helm template
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceHelmParameters[];
            /**
             * The Helm release name. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values is Helm values, typically defined as a block
             */
            values?: string;
        }

        /**
         * HelmFileParameter is a file parameter to a helm template
         */
        export interface ApplicationStatusOperationStateSyncResultSourceHelmFileParameters {
            /**
             * Name is the name of the helm parameter
             */
            name?: string;
            /**
             * Path is the path value for the helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter to a helm template
         */
        export interface ApplicationStatusOperationStateSyncResultSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the helm parameter
             */
            name?: string;
            /**
             * Value is the value for the helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationStatusOperationStateSyncResultSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationStatusOperationStateSyncResultSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusOperationStateSyncResultSourceKustomize {
            /**
             * CommonLabels adds additional kustomize commonLabels
             */
            commonLabels?: {[key: string]: string};
            /**
             * Images are kustomize image overrides
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version contains optional Kustomize version
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationStatusOperationStateSyncResultSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationStatusOperationStateSyncResultSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationStatusOperationStateSyncResultSourcePluginEnv {
            /**
             * the name, usually uppercase
             */
            name: string;
            /**
             * the value
             */
            value: string;
        }

        /**
         * ResourceStatus holds the current sync and health status of a resource
         */
        export interface ApplicationStatusResources {
            group?: string;
            health?: outputs.argoproj.v1alpha1.ApplicationStatusResourcesHealth;
            hook?: boolean;
            kind?: string;
            name?: string;
            namespace?: string;
            requiresPruning?: boolean;
            /**
             * SyncStatusCode is a type which represents possible comparison results
             */
            status?: string;
            version?: string;
        }

        export interface ApplicationStatusResourcesHealth {
            message?: string;
            /**
             * Represents resource health status
             */
            status?: string;
        }

        export interface ApplicationStatusSummary {
            /**
             * ExternalURLs holds all external URLs of application child resources.
             */
            externalURLs?: string[];
            /**
             * Images holds all images of application child resources.
             */
            images?: string[];
        }

        /**
         * SyncStatus is a comparison result of application spec and deployed application.
         */
        export interface ApplicationStatusSync {
            /**
             * ComparedTo contains application source and target which was used for resources comparison
             */
            comparedTo?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedTo;
            revision?: string;
            /**
             * SyncStatusCode is a type which represents possible comparison results
             */
            status: string;
        }

        /**
         * ComparedTo contains application source and target which was used for resources comparison
         */
        export interface ApplicationStatusSyncComparedTo {
            /**
             * ApplicationDestination contains deployment destination information
             */
            destination: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToDestination;
            /**
             * ApplicationSource contains information about github repository, path within repository and target application environment.
             */
            source: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSource;
        }

        /**
         * ApplicationDestination contains deployment destination information
         */
        export interface ApplicationStatusSyncComparedToDestination {
            /**
             * Namespace overrides the environment namespace value in the ksonnet app.yaml
             */
            namespace?: string;
            /**
             * Server overrides the environment server value in the ksonnet app.yaml
             */
            server?: string;
        }

        /**
         * ApplicationSource contains information about github repository, path within repository and target application environment.
         */
        export interface ApplicationStatusSyncComparedToSource {
            /**
             * Chart is a Helm chart name
             */
            chart?: string;
            /**
             * Directory holds path/directory specific options
             */
            directory?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceDirectory;
            /**
             * Helm holds helm specific options
             */
            helm?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceHelm;
            /**
             * Ksonnet holds ksonnet specific options
             */
            ksonnet?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceKsonnet;
            /**
             * Kustomize holds kustomize specific options
             */
            kustomize?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceKustomize;
            /**
             * Path is a directory path within the Git repository
             */
            path?: string;
            /**
             * ConfigManagementPlugin holds config management plugin specific options
             */
            plugin?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourcePlugin;
            /**
             * RepoURL is the repository URL of the application manifests
             */
            repoURL: string;
            /**
             * TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
             */
            targetRevision?: string;
        }

        /**
         * Directory holds path/directory specific options
         */
        export interface ApplicationStatusSyncComparedToSourceDirectory {
            /**
             * ApplicationSourceJsonnet holds jsonnet specific options
             */
            jsonnet?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceDirectoryJsonnet;
            recurse?: boolean;
        }

        /**
         * ApplicationSourceJsonnet holds jsonnet specific options
         */
        export interface ApplicationStatusSyncComparedToSourceDirectoryJsonnet {
            /**
             * ExtVars is a list of Jsonnet External Variables
             */
            extVars?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars[];
            /**
             * TLAS is a list of Jsonnet Top-level Arguments
             */
            tlas?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas[];
        }

        /**
         * JsonnetVar is a jsonnet variable
         */
        export interface ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * JsonnetVar is a jsonnet variable
         */
        export interface ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas {
            code?: boolean;
            name: string;
            value: string;
        }

        /**
         * Helm holds helm specific options
         */
        export interface ApplicationStatusSyncComparedToSourceHelm {
            /**
             * FileParameters are file parameters to the helm template
             */
            fileParameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceHelmFileParameters[];
            /**
             * Parameters are parameters to the helm template
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceHelmParameters[];
            /**
             * The Helm release name. If omitted it will use the application name
             */
            releaseName?: string;
            /**
             * ValuesFiles is a list of Helm value files to use when generating a template
             */
            valueFiles?: string[];
            /**
             * Values is Helm values, typically defined as a block
             */
            values?: string;
        }

        /**
         * HelmFileParameter is a file parameter to a helm template
         */
        export interface ApplicationStatusSyncComparedToSourceHelmFileParameters {
            /**
             * Name is the name of the helm parameter
             */
            name?: string;
            /**
             * Path is the path value for the helm parameter
             */
            path?: string;
        }

        /**
         * HelmParameter is a parameter to a helm template
         */
        export interface ApplicationStatusSyncComparedToSourceHelmParameters {
            /**
             * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
             */
            forceString?: boolean;
            /**
             * Name is the name of the helm parameter
             */
            name?: string;
            /**
             * Value is the value for the helm parameter
             */
            value?: string;
        }

        /**
         * Ksonnet holds ksonnet specific options
         */
        export interface ApplicationStatusSyncComparedToSourceKsonnet {
            /**
             * Environment is a ksonnet application environment name
             */
            environment?: string;
            /**
             * Parameters are a list of ksonnet component parameter override values
             */
            parameters?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourceKsonnetParameters[];
        }

        /**
         * KsonnetParameter is a ksonnet component parameter
         */
        export interface ApplicationStatusSyncComparedToSourceKsonnetParameters {
            component?: string;
            name: string;
            value: string;
        }

        /**
         * Kustomize holds kustomize specific options
         */
        export interface ApplicationStatusSyncComparedToSourceKustomize {
            /**
             * CommonLabels adds additional kustomize commonLabels
             */
            commonLabels?: {[key: string]: string};
            /**
             * Images are kustomize image overrides
             */
            images?: string[];
            /**
             * NamePrefix is a prefix appended to resources for kustomize apps
             */
            namePrefix?: string;
            /**
             * NameSuffix is a suffix appended to resources for kustomize apps
             */
            nameSuffix?: string;
            /**
             * Version contains optional Kustomize version
             */
            version?: string;
        }

        /**
         * ConfigManagementPlugin holds config management plugin specific options
         */
        export interface ApplicationStatusSyncComparedToSourcePlugin {
            env?: outputs.argoproj.v1alpha1.ApplicationStatusSyncComparedToSourcePluginEnv[];
            name?: string;
        }

        export interface ApplicationStatusSyncComparedToSourcePluginEnv {
            /**
             * the name, usually uppercase
             */
            name: string;
            /**
             * the value
             */
            value: string;
        }

        /**
         * ArgoCDExportSpec defines the desired state of ArgoCDExport
         */
        export interface ArgoCDExportSpec {
            /**
             * Argocd is the name of the ArgoCD instance to export.
             */
            argocd: string;
            /**
             * Image is the container image to use for the export Job.
             */
            image?: string;
            /**
             * Schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
             */
            schedule?: string;
            /**
             * Storage defines the storage configuration options.
             */
            storage?: outputs.argoproj.v1alpha1.ArgoCDExportSpecStorage;
            /**
             * Version is the tag/digest to use for the export Job container image.
             */
            version?: string;
        }

        /**
         * Storage defines the storage configuration options.
         */
        export interface ArgoCDExportSpecStorage {
            /**
             * Backend defines the storage backend to use, must be "local" (the default), "aws", "azure" or "gcp".
             */
            backend?: string;
            /**
             * PVC is the desired characteristics for a PersistentVolumeClaim.
             */
            pvc?: outputs.argoproj.v1alpha1.ArgoCDExportSpecStoragePvc;
            /**
             * SecretName is the name of a Secret with encryption key, credentials, etc.
             */
            secretName?: string;
        }

        /**
         * PVC is the desired characteristics for a PersistentVolumeClaim.
         */
        export interface ArgoCDExportSpecStoragePvc {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: string[];
            /**
             * This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
             */
            dataSource?: outputs.argoproj.v1alpha1.ArgoCDExportSpecStoragePvcDataSource;
            /**
             * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: outputs.argoproj.v1alpha1.ArgoCDExportSpecStoragePvcResources;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: outputs.argoproj.v1alpha1.ArgoCDExportSpecStoragePvcSelector;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
             */
            volumeMode?: string;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: string;
        }

        /**
         * This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
         */
        export interface ArgoCDExportSpecStoragePvcDataSource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ArgoCDExportSpecStoragePvcResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: {[key: string]: outputs.argoproj.v1alpha1.ArgoCDExportSpecStoragePvcResourcesLimits};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: {[key: string]: outputs.argoproj.v1alpha1.ArgoCDExportSpecStoragePvcResourcesRequests};
        }

        export interface ArgoCDExportSpecStoragePvcResourcesLimits {
        }

        export interface ArgoCDExportSpecStoragePvcResourcesRequests {
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface ArgoCDExportSpecStoragePvcSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.argoproj.v1alpha1.ArgoCDExportSpecStoragePvcSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ArgoCDExportSpecStoragePvcSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * ArgoCDExportStatus defines the observed state of ArgoCDExport
         */
        export interface ArgoCDExportStatus {
            /**
             * Phase is a simple, high-level summary of where the ArgoCDExport is in its lifecycle. There are five possible phase values: Pending: The ArgoCDExport has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the containers for the ArgoCDExport are still running, or in the process of starting or restarting. Succeeded: All containers for the ArgoCDExport have terminated in success, and will not be restarted. Failed: At least one container has terminated in failure, either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the ArgoCDExport could not be obtained.
             */
            phase: string;
        }

        /**
         * ArgoCDSpec defines the desired state of ArgoCD
         */
        export interface ArgoCDSpec {
            /**
             * ApplicationInstanceLabelKey is the key name where Argo CD injects the app name as a tracking label.
             */
            applicationInstanceLabelKey?: string;
            /**
             * ConfigManagementPlugins is used to specify additional config management plugins.
             */
            configManagementPlugins?: string;
            /**
             * Controller defines the Application Controller options for ArgoCD.
             */
            controller?: outputs.argoproj.v1alpha1.ArgoCDSpecController;
            /**
             * Dex defines the Dex server options for ArgoCD.
             */
            dex?: outputs.argoproj.v1alpha1.ArgoCDSpecDex;
            /**
             * GAAnonymizeUsers toggles user IDs being hashed before sending to google analytics.
             */
            gaAnonymizeUsers?: boolean;
            /**
             * GATrackingID is the google analytics tracking ID to use.
             */
            gaTrackingID?: string;
            /**
             * Grafana defines the Grafana server options for ArgoCD.
             */
            grafana?: outputs.argoproj.v1alpha1.ArgoCDSpecGrafana;
            /**
             * HA options for High Availability support for the Redis component.
             */
            ha?: outputs.argoproj.v1alpha1.ArgoCDSpecHa;
            /**
             * HelpChatText is the text for getting chat help, defaults to "Chat now!"
             */
            helpChatText?: string;
            /**
             * HelpChatURL is the URL for getting chat help, this will typically be your Slack channel for support.
             */
            helpChatURL?: string;
            /**
             * Image is the ArgoCD container image for all ArgoCD components.
             */
            image?: string;
            /**
             * Import is the import/restore options for ArgoCD.
             */
            import?: outputs.argoproj.v1alpha1.ArgoCDSpecImport;
            /**
             * InitialRepositories to configure Argo CD with upon creation of the cluster.
             */
            initialRepositories?: string;
            /**
             * InitialSSHKnownHosts defines the SSH known hosts data upon creation of the cluster for connecting Git repositories via SSH.
             */
            initialSSHKnownHosts?: string;
            /**
             * KustomizeBuildOptions is used to specify build options/parameters to use with `kustomize build`.
             */
            kustomizeBuildOptions?: string;
            /**
             * OIDCConfig is the OIDC configuration as an alternative to dex.
             */
            oidcConfig?: string;
            /**
             * Prometheus defines the Prometheus server options for ArgoCD.
             */
            prometheus?: outputs.argoproj.v1alpha1.ArgoCDSpecPrometheus;
            /**
             * RBAC defines the RBAC configuration for Argo CD.
             */
            rbac?: outputs.argoproj.v1alpha1.ArgoCDSpecRbac;
            /**
             * Redis defines the Redis server options for ArgoCD.
             */
            redis?: outputs.argoproj.v1alpha1.ArgoCDSpecRedis;
            /**
             * Repo defines the repo server options for Argo CD.
             */
            repo?: outputs.argoproj.v1alpha1.ArgoCDSpecRepo;
            /**
             * RepositoryCredentials are the Git pull credentials to configure Argo CD with upon creation of the cluster.
             */
            repositoryCredentials?: string;
            /**
             * ResourceCustomizations customizes resource behavior. Keys are in the form: group/Kind.
             */
            resourceCustomizations?: string;
            /**
             * ResourceExclusions is used to completely ignore entire classes of resource group/kinds.
             */
            resourceExclusions?: string;
            /**
             * Server defines the options for the ArgoCD Server component.
             */
            server?: outputs.argoproj.v1alpha1.ArgoCDSpecServer;
            /**
             * StatusBadgeEnabled toggles application status badge feature.
             */
            statusBadgeEnabled?: boolean;
            /**
             * TLS defines the TLS options for ArgoCD.
             */
            tls?: outputs.argoproj.v1alpha1.ArgoCDSpecTls;
            /**
             * UsersAnonymousEnabled toggles anonymous user access. The anonymous users get default role permissions specified argocd-rbac-cm.
             */
            usersAnonymousEnabled?: boolean;
            /**
             * Version is the tag to use with the ArgoCD container image for all ArgoCD components.
             */
            version?: string;
        }

        /**
         * Controller defines the Application Controller options for ArgoCD.
         */
        export interface ArgoCDSpecController {
            /**
             * Processors contains the options for the Application Controller processors.
             */
            processors?: outputs.argoproj.v1alpha1.ArgoCDSpecControllerProcessors;
            /**
             * Resources defines the Compute Resources required by the container for the Application Controller.
             */
            resources?: outputs.argoproj.v1alpha1.ArgoCDSpecControllerResources;
        }

        /**
         * Processors contains the options for the Application Controller processors.
         */
        export interface ArgoCDSpecControllerProcessors {
            /**
             * Operation is the number of application operation processors.
             */
            operation?: number;
            /**
             * Status is the number of application status processors.
             */
            status?: number;
        }

        /**
         * Resources defines the Compute Resources required by the container for the Application Controller.
         */
        export interface ArgoCDSpecControllerResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: {[key: string]: outputs.argoproj.v1alpha1.ArgoCDSpecControllerResourcesLimits};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: {[key: string]: outputs.argoproj.v1alpha1.ArgoCDSpecControllerResourcesRequests};
        }

        export interface ArgoCDSpecControllerResourcesLimits {
        }

        export interface ArgoCDSpecControllerResourcesRequests {
        }

        /**
         * Dex defines the Dex server options for ArgoCD.
         */
        export interface ArgoCDSpecDex {
            /**
             * Config is the dex connector configuration.
             */
            config?: string;
            /**
             * Image is the Dex container image.
             */
            image?: string;
            /**
             * OpenShiftOAuth enables OpenShift OAuth authentication for the Dex server.
             */
            openShiftOAuth?: boolean;
            /**
             * Resources defines the Compute Resources required by the container for Dex.
             */
            resources?: outputs.argoproj.v1alpha1.ArgoCDSpecDexResources;
            /**
             * Version is the Dex container image tag.
             */
            version?: string;
        }

        /**
         * Resources defines the Compute Resources required by the container for Dex.
         */
        export interface ArgoCDSpecDexResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: {[key: string]: outputs.argoproj.v1alpha1.ArgoCDSpecDexResourcesLimits};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: {[key: string]: outputs.argoproj.v1alpha1.ArgoCDSpecDexResourcesRequests};
        }

        export interface ArgoCDSpecDexResourcesLimits {
        }

        export interface ArgoCDSpecDexResourcesRequests {
        }

        /**
         * Grafana defines the Grafana server options for ArgoCD.
         */
        export interface ArgoCDSpecGrafana {
            /**
             * Enabled will toggle Grafana support globally for ArgoCD.
             */
            enabled: boolean;
            /**
             * Host is the hostname to use for Ingress/Route resources.
             */
            host?: string;
            /**
             * Image is the Grafana container image.
             */
            image?: string;
            /**
             * Ingress defines the desired state for an Ingress for the Grafana component.
             */
            ingress?: outputs.argoproj.v1alpha1.ArgoCDSpecGrafanaIngress;
            /**
             * Resources defines the Compute Resources required by the container for Grafana.
             */
            resources?: outputs.argoproj.v1alpha1.ArgoCDSpecGrafanaResources;
            /**
             * Route defines the desired state for an OpenShift Route for the Grafana component.
             */
            route?: outputs.argoproj.v1alpha1.ArgoCDSpecGrafanaRoute;
            /**
             * Size is the replica count for the Grafana Deployment.
             */
            size?: number;
            /**
             * Version is the Grafana container image tag.
             */
            version?: string;
        }

        /**
         * Ingress defines the desired state for an Ingress for the Grafana component.
         */
        export interface ArgoCDSpecGrafanaIngress {
            /**
             * Annotations is the map of annotations to apply to the Ingress.
             */
            annotations?: {[key: string]: string};
            /**
             * Enabled will toggle the creation of the Ingress.
             */
            enabled: boolean;
            /**
             * Path used for the Ingress resource.
             */
            path?: string;
            /**
             * TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
             */
            tls?: outputs.argoproj.v1alpha1.ArgoCDSpecGrafanaIngressTls[];
        }

        /**
         * IngressTLS describes the transport layer security associated with an Ingress.
         */
        export interface ArgoCDSpecGrafanaIngressTls {
            /**
             * Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
             */
            hosts?: string[];
            /**
             * SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
             */
            secretName?: string;
        }

        /**
         * Resources defines the Compute Resources required by the container for Grafana.
         */
        export interface ArgoCDSpecGrafanaResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: {[key: string]: outputs.argoproj.v1alpha1.ArgoCDSpecGrafanaResourcesLimits};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: {[key: string]: outputs.argoproj.v1alpha1.ArgoCDSpecGrafanaResourcesRequests};
        }

        export interface ArgoCDSpecGrafanaResourcesLimits {
        }

        export interface ArgoCDSpecGrafanaResourcesRequests {
        }

        /**
         * Route defines the desired state for an OpenShift Route for the Grafana component.
         */
        export interface ArgoCDSpecGrafanaRoute {
            /**
             * Annotations is the map of annotations to use for the Route resource.
             */
            annotations?: {[key: string]: string};
            /**
             * Enabled will toggle the creation of the OpenShift Route.
             */
            enabled: boolean;
            /**
             * Path the router watches for, to route traffic for to the service.
             */
            path?: string;
            /**
             * TLS provides the ability to configure certificates and termination for the Route.
             */
            tls?: outputs.argoproj.v1alpha1.ArgoCDSpecGrafanaRouteTls;
            /**
             * WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
             */
            wildcardPolicy?: string;
        }

        /**
         * TLS provides the ability to configure certificates and termination for the Route.
         */
        export interface ArgoCDSpecGrafanaRouteTls {
            /**
             * caCertificate provides the cert authority certificate contents
             */
            caCertificate?: string;
            /**
             * certificate provides certificate contents
             */
            certificate?: string;
            /**
             * destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
             */
            destinationCACertificate?: string;
            /**
             * insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. 
             *  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
             */
            insecureEdgeTerminationPolicy?: string;
            /**
             * key provides key file contents
             */
            key?: string;
            /**
             * termination indicates termination type.
             */
            termination: string;
        }

        /**
         * HA options for High Availability support for the Redis component.
         */
        export interface ArgoCDSpecHa {
            /**
             * Enabled will toggle HA support globally for Argo CD.
             */
            enabled: boolean;
        }

        /**
         * Import is the import/restore options for ArgoCD.
         */
        export interface ArgoCDSpecImport {
            /**
             * Name of an ArgoCDExport from which to import data.
             */
            name: string;
            /**
             * Namespace for the ArgoCDExport, defaults to the same namespace as the ArgoCD.
             */
            namespace?: string;
        }

        /**
         * Prometheus defines the Prometheus server options for ArgoCD.
         */
        export interface ArgoCDSpecPrometheus {
            /**
             * Enabled will toggle Prometheus support globally for ArgoCD.
             */
            enabled: boolean;
            /**
             * Host is the hostname to use for Ingress/Route resources.
             */
            host?: string;
            /**
             * Ingress defines the desired state for an Ingress for the Prometheus component.
             */
            ingress?: outputs.argoproj.v1alpha1.ArgoCDSpecPrometheusIngress;
            /**
             * Route defines the desired state for an OpenShift Route for the Prometheus component.
             */
            route?: outputs.argoproj.v1alpha1.ArgoCDSpecPrometheusRoute;
            /**
             * Size is the replica count for the Prometheus StatefulSet.
             */
            size?: number;
        }

        /**
         * Ingress defines the desired state for an Ingress for the Prometheus component.
         */
        export interface ArgoCDSpecPrometheusIngress {
            /**
             * Annotations is the map of annotations to apply to the Ingress.
             */
            annotations?: {[key: string]: string};
            /**
             * Enabled will toggle the creation of the Ingress.
             */
            enabled: boolean;
            /**
             * Path used for the Ingress resource.
             */
            path?: string;
            /**
             * TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
             */
            tls?: outputs.argoproj.v1alpha1.ArgoCDSpecPrometheusIngressTls[];
        }

        /**
         * IngressTLS describes the transport layer security associated with an Ingress.
         */
        export interface ArgoCDSpecPrometheusIngressTls {
            /**
             * Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
             */
            hosts?: string[];
            /**
             * SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
             */
            secretName?: string;
        }

        /**
         * Route defines the desired state for an OpenShift Route for the Prometheus component.
         */
        export interface ArgoCDSpecPrometheusRoute {
            /**
             * Annotations is the map of annotations to use for the Route resource.
             */
            annotations?: {[key: string]: string};
            /**
             * Enabled will toggle the creation of the OpenShift Route.
             */
            enabled: boolean;
            /**
             * Path the router watches for, to route traffic for to the service.
             */
            path?: string;
            /**
             * TLS provides the ability to configure certificates and termination for the Route.
             */
            tls?: outputs.argoproj.v1alpha1.ArgoCDSpecPrometheusRouteTls;
            /**
             * WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
             */
            wildcardPolicy?: string;
        }

        /**
         * TLS provides the ability to configure certificates and termination for the Route.
         */
        export interface ArgoCDSpecPrometheusRouteTls {
            /**
             * caCertificate provides the cert authority certificate contents
             */
            caCertificate?: string;
            /**
             * certificate provides certificate contents
             */
            certificate?: string;
            /**
             * destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
             */
            destinationCACertificate?: string;
            /**
             * insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. 
             *  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
             */
            insecureEdgeTerminationPolicy?: string;
            /**
             * key provides key file contents
             */
            key?: string;
            /**
             * termination indicates termination type.
             */
            termination: string;
        }

        /**
         * RBAC defines the RBAC configuration for Argo CD.
         */
        export interface ArgoCDSpecRbac {
            /**
             * DefaultPolicy is the name of the default role which Argo CD will falls back to, when authorizing API requests (optional). If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
             */
            defaultPolicy?: string;
            /**
             * Policy is CSV containing user-defined RBAC policies and role definitions. Policy rules are in the form:   p, subject, resource, action, object, effect Role definitions and bindings are in the form:   g, subject, inherited-subject See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.
             */
            policy?: string;
            /**
             * Scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope). If omitted, defaults to: '[groups]'.
             */
            scopes?: string;
        }

        /**
         * Redis defines the Redis server options for ArgoCD.
         */
        export interface ArgoCDSpecRedis {
            /**
             * Image is the Redis container image.
             */
            image?: string;
            /**
             * Resources defines the Compute Resources required by the container for Redis.
             */
            resources?: outputs.argoproj.v1alpha1.ArgoCDSpecRedisResources;
            /**
             * Version is the Redis container image tag.
             */
            version?: string;
        }

        /**
         * Resources defines the Compute Resources required by the container for Redis.
         */
        export interface ArgoCDSpecRedisResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: {[key: string]: outputs.argoproj.v1alpha1.ArgoCDSpecRedisResourcesLimits};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: {[key: string]: outputs.argoproj.v1alpha1.ArgoCDSpecRedisResourcesRequests};
        }

        export interface ArgoCDSpecRedisResourcesLimits {
        }

        export interface ArgoCDSpecRedisResourcesRequests {
        }

        /**
         * Repo defines the repo server options for Argo CD.
         */
        export interface ArgoCDSpecRepo {
            /**
             * MountSAToken describes whether you would like to have the Repo server mount the service account token
             */
            mountsatoken?: boolean;
            /**
             * Resources defines the Compute Resources required by the container for Redis.
             */
            resources?: outputs.argoproj.v1alpha1.ArgoCDSpecRepoResources;
            /**
             * ServiceAccount defines the ServiceAccount user that you would like the Repo server to use
             */
            serviceaccount?: string;
        }

        /**
         * Resources defines the Compute Resources required by the container for Redis.
         */
        export interface ArgoCDSpecRepoResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: {[key: string]: outputs.argoproj.v1alpha1.ArgoCDSpecRepoResourcesLimits};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: {[key: string]: outputs.argoproj.v1alpha1.ArgoCDSpecRepoResourcesRequests};
        }

        export interface ArgoCDSpecRepoResourcesLimits {
        }

        export interface ArgoCDSpecRepoResourcesRequests {
        }

        /**
         * Server defines the options for the ArgoCD Server component.
         */
        export interface ArgoCDSpecServer {
            /**
             * Autoscale defines the autoscale options for the Argo CD Server component.
             */
            autoscale?: outputs.argoproj.v1alpha1.ArgoCDSpecServerAutoscale;
            /**
             * GRPC defines the state for the Argo CD Server GRPC options.
             */
            grpc?: outputs.argoproj.v1alpha1.ArgoCDSpecServerGrpc;
            /**
             * Host is the hostname to use for Ingress/Route resources.
             */
            host?: string;
            /**
             * Ingress defines the desired state for an Ingress for the Argo CD Server component.
             */
            ingress?: outputs.argoproj.v1alpha1.ArgoCDSpecServerIngress;
            /**
             * Insecure toggles the insecure flag.
             */
            insecure?: boolean;
            /**
             * Resources defines the Compute Resources required by the container for the Argo CD server component.
             */
            resources?: outputs.argoproj.v1alpha1.ArgoCDSpecServerResources;
            /**
             * Route defines the desired state for an OpenShift Route for the Argo CD Server component.
             */
            route?: outputs.argoproj.v1alpha1.ArgoCDSpecServerRoute;
            /**
             * Service defines the options for the Service backing the ArgoCD Server component.
             */
            service?: outputs.argoproj.v1alpha1.ArgoCDSpecServerService;
        }

        /**
         * Autoscale defines the autoscale options for the Argo CD Server component.
         */
        export interface ArgoCDSpecServerAutoscale {
            /**
             * Enabled will toggle autoscaling support for the Argo CD Server component.
             */
            enabled: boolean;
            /**
             * HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.
             */
            hpa?: outputs.argoproj.v1alpha1.ArgoCDSpecServerAutoscaleHpa;
        }

        /**
         * HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.
         */
        export interface ArgoCDSpecServerAutoscaleHpa {
            /**
             * upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
             */
            maxReplicas: number;
            /**
             * minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
             */
            minReplicas?: number;
            /**
             * reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
             */
            scaleTargetRef: outputs.argoproj.v1alpha1.ArgoCDSpecServerAutoscaleHpaScaleTargetRef;
            /**
             * target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
             */
            targetCPUUtilizationPercentage?: number;
        }

        /**
         * reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
         */
        export interface ArgoCDSpecServerAutoscaleHpaScaleTargetRef {
            /**
             * API version of the referent
             */
            apiVersion?: string;
            /**
             * Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
             */
            kind: string;
            /**
             * Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
             */
            name: string;
        }

        /**
         * GRPC defines the state for the Argo CD Server GRPC options.
         */
        export interface ArgoCDSpecServerGrpc {
            /**
             * Host is the hostname to use for Ingress/Route resources.
             */
            host?: string;
            /**
             * Ingress defines the desired state for the Argo CD Server GRPC Ingress.
             */
            ingress?: outputs.argoproj.v1alpha1.ArgoCDSpecServerGrpcIngress;
        }

        /**
         * Ingress defines the desired state for the Argo CD Server GRPC Ingress.
         */
        export interface ArgoCDSpecServerGrpcIngress {
            /**
             * Annotations is the map of annotations to apply to the Ingress.
             */
            annotations?: {[key: string]: string};
            /**
             * Enabled will toggle the creation of the Ingress.
             */
            enabled: boolean;
            /**
             * Path used for the Ingress resource.
             */
            path?: string;
            /**
             * TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
             */
            tls?: outputs.argoproj.v1alpha1.ArgoCDSpecServerGrpcIngressTls[];
        }

        /**
         * IngressTLS describes the transport layer security associated with an Ingress.
         */
        export interface ArgoCDSpecServerGrpcIngressTls {
            /**
             * Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
             */
            hosts?: string[];
            /**
             * SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
             */
            secretName?: string;
        }

        /**
         * Ingress defines the desired state for an Ingress for the Argo CD Server component.
         */
        export interface ArgoCDSpecServerIngress {
            /**
             * Annotations is the map of annotations to apply to the Ingress.
             */
            annotations?: {[key: string]: string};
            /**
             * Enabled will toggle the creation of the Ingress.
             */
            enabled: boolean;
            /**
             * Path used for the Ingress resource.
             */
            path?: string;
            /**
             * TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
             */
            tls?: outputs.argoproj.v1alpha1.ArgoCDSpecServerIngressTls[];
        }

        /**
         * IngressTLS describes the transport layer security associated with an Ingress.
         */
        export interface ArgoCDSpecServerIngressTls {
            /**
             * Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
             */
            hosts?: string[];
            /**
             * SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
             */
            secretName?: string;
        }

        /**
         * Resources defines the Compute Resources required by the container for the Argo CD server component.
         */
        export interface ArgoCDSpecServerResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: {[key: string]: outputs.argoproj.v1alpha1.ArgoCDSpecServerResourcesLimits};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: {[key: string]: outputs.argoproj.v1alpha1.ArgoCDSpecServerResourcesRequests};
        }

        export interface ArgoCDSpecServerResourcesLimits {
        }

        export interface ArgoCDSpecServerResourcesRequests {
        }

        /**
         * Route defines the desired state for an OpenShift Route for the Argo CD Server component.
         */
        export interface ArgoCDSpecServerRoute {
            /**
             * Annotations is the map of annotations to use for the Route resource.
             */
            annotations?: {[key: string]: string};
            /**
             * Enabled will toggle the creation of the OpenShift Route.
             */
            enabled: boolean;
            /**
             * Path the router watches for, to route traffic for to the service.
             */
            path?: string;
            /**
             * TLS provides the ability to configure certificates and termination for the Route.
             */
            tls?: outputs.argoproj.v1alpha1.ArgoCDSpecServerRouteTls;
            /**
             * WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
             */
            wildcardPolicy?: string;
        }

        /**
         * TLS provides the ability to configure certificates and termination for the Route.
         */
        export interface ArgoCDSpecServerRouteTls {
            /**
             * caCertificate provides the cert authority certificate contents
             */
            caCertificate?: string;
            /**
             * certificate provides certificate contents
             */
            certificate?: string;
            /**
             * destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
             */
            destinationCACertificate?: string;
            /**
             * insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. 
             *  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
             */
            insecureEdgeTerminationPolicy?: string;
            /**
             * key provides key file contents
             */
            key?: string;
            /**
             * termination indicates termination type.
             */
            termination: string;
        }

        /**
         * Service defines the options for the Service backing the ArgoCD Server component.
         */
        export interface ArgoCDSpecServerService {
            /**
             * Type is the ServiceType to use for the Service resource.
             */
            type: string;
        }

        /**
         * TLS defines the TLS options for ArgoCD.
         */
        export interface ArgoCDSpecTls {
            /**
             * CA defines the CA options.
             */
            ca?: outputs.argoproj.v1alpha1.ArgoCDSpecTlsCa;
            /**
             * InitialCerts defines custom TLS certificates upon creation of the cluster for connecting Git repositories via HTTPS.
             */
            initialCerts?: {[key: string]: string};
        }

        /**
         * CA defines the CA options.
         */
        export interface ArgoCDSpecTlsCa {
            /**
             * ConfigMapName is the name of the ConfigMap containing the CA Certificate.
             */
            configMapName?: string;
            /**
             * SecretName is the name of the Secret containing the CA Certificate and Key.
             */
            secretName?: string;
        }

        /**
         * ArgoCDStatus defines the observed state of ArgoCD
         */
        export interface ArgoCDStatus {
            /**
             * ApplicationController is a simple, high-level summary of where the Argo CD application controller component is in its lifecycle. There are five possible ApplicationController values: Pending: The Argo CD application controller component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD application controller component are in a Ready state. Failed: At least one of the  Argo CD application controller component Pods had a failure. Unknown: For some reason the state of the Argo CD application controller component could not be obtained.
             */
            applicationController?: string;
            /**
             * Dex is a simple, high-level summary of where the Argo CD Dex component is in its lifecycle. There are five possible dex values: Pending: The Argo CD Dex component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Dex component are in a Ready state. Failed: At least one of the  Argo CD Dex component Pods had a failure. Unknown: For some reason the state of the Argo CD Dex component could not be obtained.
             */
            dex?: string;
            /**
             * Phase is a simple, high-level summary of where the ArgoCD is in its lifecycle. There are five possible phase values: Pending: The ArgoCD has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Available: All of the resources for the ArgoCD are ready. Failed: At least one resource has experienced a failure. Unknown: For some reason the state of the ArgoCD phase could not be obtained.
             */
            phase?: string;
            /**
             * Redis is a simple, high-level summary of where the Argo CD Redis component is in its lifecycle. There are five possible redis values: Pending: The Argo CD Redis component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Redis component are in a Ready state. Failed: At least one of the  Argo CD Redis component Pods had a failure. Unknown: For some reason the state of the Argo CD Redis component could not be obtained.
             */
            redis?: string;
            /**
             * Repo is a simple, high-level summary of where the Argo CD Repo component is in its lifecycle. There are five possible repo values: Pending: The Argo CD Repo component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Repo component are in a Ready state. Failed: At least one of the  Argo CD Repo component Pods had a failure. Unknown: For some reason the state of the Argo CD Repo component could not be obtained.
             */
            repo?: string;
            /**
             * Server is a simple, high-level summary of where the Argo CD server component is in its lifecycle. There are five possible server values: Pending: The Argo CD server component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD server component are in a Ready state. Failed: At least one of the  Argo CD server component Pods had a failure. Unknown: For some reason the state of the Argo CD server component could not be obtained.
             */
            server?: string;
        }
    }
}

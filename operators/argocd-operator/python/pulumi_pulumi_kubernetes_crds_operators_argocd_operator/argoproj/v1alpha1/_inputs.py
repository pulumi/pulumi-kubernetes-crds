# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'AppProjectSpecArgs',
    'AppProjectSpecClusterResourceBlacklistArgs',
    'AppProjectSpecClusterResourceWhitelistArgs',
    'AppProjectSpecDestinationsArgs',
    'AppProjectSpecNamespaceResourceBlacklistArgs',
    'AppProjectSpecNamespaceResourceWhitelistArgs',
    'AppProjectSpecOrphanedResourcesArgs',
    'AppProjectSpecOrphanedResourcesIgnoreArgs',
    'AppProjectSpecRolesArgs',
    'AppProjectSpecRolesJwtTokensArgs',
    'AppProjectSpecSignatureKeysArgs',
    'AppProjectSpecSyncWindowsArgs',
    'ApplicationOperationArgs',
    'ApplicationOperationInfoArgs',
    'ApplicationOperationInitiatedByArgs',
    'ApplicationOperationRetryArgs',
    'ApplicationOperationRetryBackoffArgs',
    'ApplicationOperationSyncArgs',
    'ApplicationOperationSyncResourcesArgs',
    'ApplicationOperationSyncSourceArgs',
    'ApplicationOperationSyncSourceDirectoryArgs',
    'ApplicationOperationSyncSourceDirectoryJsonnetArgs',
    'ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArgs',
    'ApplicationOperationSyncSourceDirectoryJsonnetTlasArgs',
    'ApplicationOperationSyncSourceHelmArgs',
    'ApplicationOperationSyncSourceHelmFileParametersArgs',
    'ApplicationOperationSyncSourceHelmParametersArgs',
    'ApplicationOperationSyncSourceKsonnetArgs',
    'ApplicationOperationSyncSourceKsonnetParametersArgs',
    'ApplicationOperationSyncSourceKustomizeArgs',
    'ApplicationOperationSyncSourcePluginArgs',
    'ApplicationOperationSyncSourcePluginEnvArgs',
    'ApplicationOperationSyncSyncStrategyArgs',
    'ApplicationOperationSyncSyncStrategyApplyArgs',
    'ApplicationOperationSyncSyncStrategyHookArgs',
    'ApplicationSpecArgs',
    'ApplicationSpecDestinationArgs',
    'ApplicationSpecIgnoreDifferencesArgs',
    'ApplicationSpecInfoArgs',
    'ApplicationSpecSourceArgs',
    'ApplicationSpecSourceDirectoryArgs',
    'ApplicationSpecSourceDirectoryJsonnetArgs',
    'ApplicationSpecSourceDirectoryJsonnetExtVarsArgs',
    'ApplicationSpecSourceDirectoryJsonnetTlasArgs',
    'ApplicationSpecSourceHelmArgs',
    'ApplicationSpecSourceHelmFileParametersArgs',
    'ApplicationSpecSourceHelmParametersArgs',
    'ApplicationSpecSourceKsonnetArgs',
    'ApplicationSpecSourceKsonnetParametersArgs',
    'ApplicationSpecSourceKustomizeArgs',
    'ApplicationSpecSourcePluginArgs',
    'ApplicationSpecSourcePluginEnvArgs',
    'ApplicationSpecSyncPolicyArgs',
    'ApplicationSpecSyncPolicyAutomatedArgs',
    'ApplicationSpecSyncPolicyRetryArgs',
    'ApplicationSpecSyncPolicyRetryBackoffArgs',
    'ApplicationStatusArgs',
    'ApplicationStatusConditionsArgs',
    'ApplicationStatusHealthArgs',
    'ApplicationStatusHistoryArgs',
    'ApplicationStatusHistorySourceArgs',
    'ApplicationStatusHistorySourceDirectoryArgs',
    'ApplicationStatusHistorySourceDirectoryJsonnetArgs',
    'ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArgs',
    'ApplicationStatusHistorySourceDirectoryJsonnetTlasArgs',
    'ApplicationStatusHistorySourceHelmArgs',
    'ApplicationStatusHistorySourceHelmFileParametersArgs',
    'ApplicationStatusHistorySourceHelmParametersArgs',
    'ApplicationStatusHistorySourceKsonnetArgs',
    'ApplicationStatusHistorySourceKsonnetParametersArgs',
    'ApplicationStatusHistorySourceKustomizeArgs',
    'ApplicationStatusHistorySourcePluginArgs',
    'ApplicationStatusHistorySourcePluginEnvArgs',
    'ApplicationStatusOperationStateArgs',
    'ApplicationStatusOperationStateOperationArgs',
    'ApplicationStatusOperationStateOperationInfoArgs',
    'ApplicationStatusOperationStateOperationInitiatedByArgs',
    'ApplicationStatusOperationStateOperationRetryArgs',
    'ApplicationStatusOperationStateOperationRetryBackoffArgs',
    'ApplicationStatusOperationStateOperationSyncArgs',
    'ApplicationStatusOperationStateOperationSyncResourcesArgs',
    'ApplicationStatusOperationStateOperationSyncSourceArgs',
    'ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs',
    'ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs',
    'ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArgs',
    'ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArgs',
    'ApplicationStatusOperationStateOperationSyncSourceHelmArgs',
    'ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArgs',
    'ApplicationStatusOperationStateOperationSyncSourceHelmParametersArgs',
    'ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs',
    'ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArgs',
    'ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs',
    'ApplicationStatusOperationStateOperationSyncSourcePluginArgs',
    'ApplicationStatusOperationStateOperationSyncSourcePluginEnvArgs',
    'ApplicationStatusOperationStateOperationSyncSyncStrategyArgs',
    'ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs',
    'ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs',
    'ApplicationStatusOperationStateSyncResultArgs',
    'ApplicationStatusOperationStateSyncResultResourcesArgs',
    'ApplicationStatusOperationStateSyncResultSourceArgs',
    'ApplicationStatusOperationStateSyncResultSourceDirectoryArgs',
    'ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs',
    'ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArgs',
    'ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArgs',
    'ApplicationStatusOperationStateSyncResultSourceHelmArgs',
    'ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArgs',
    'ApplicationStatusOperationStateSyncResultSourceHelmParametersArgs',
    'ApplicationStatusOperationStateSyncResultSourceKsonnetArgs',
    'ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArgs',
    'ApplicationStatusOperationStateSyncResultSourceKustomizeArgs',
    'ApplicationStatusOperationStateSyncResultSourcePluginArgs',
    'ApplicationStatusOperationStateSyncResultSourcePluginEnvArgs',
    'ApplicationStatusResourcesArgs',
    'ApplicationStatusResourcesHealthArgs',
    'ApplicationStatusSummaryArgs',
    'ApplicationStatusSyncArgs',
    'ApplicationStatusSyncComparedToArgs',
    'ApplicationStatusSyncComparedToDestinationArgs',
    'ApplicationStatusSyncComparedToSourceArgs',
    'ApplicationStatusSyncComparedToSourceDirectoryArgs',
    'ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs',
    'ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArgs',
    'ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArgs',
    'ApplicationStatusSyncComparedToSourceHelmArgs',
    'ApplicationStatusSyncComparedToSourceHelmFileParametersArgs',
    'ApplicationStatusSyncComparedToSourceHelmParametersArgs',
    'ApplicationStatusSyncComparedToSourceKsonnetArgs',
    'ApplicationStatusSyncComparedToSourceKsonnetParametersArgs',
    'ApplicationStatusSyncComparedToSourceKustomizeArgs',
    'ApplicationStatusSyncComparedToSourcePluginArgs',
    'ApplicationStatusSyncComparedToSourcePluginEnvArgs',
    'ArgoCDExportSpecArgs',
    'ArgoCDExportSpecStorageArgs',
    'ArgoCDExportSpecStoragePvcArgs',
    'ArgoCDExportSpecStoragePvcDataSourceArgs',
    'ArgoCDExportSpecStoragePvcResourcesArgs',
    'ArgoCDExportSpecStoragePvcResourcesLimitsArgs',
    'ArgoCDExportSpecStoragePvcResourcesRequestsArgs',
    'ArgoCDExportSpecStoragePvcSelectorArgs',
    'ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArgs',
    'ArgoCDExportStatusArgs',
    'ArgoCDSpecArgs',
    'ArgoCDSpecControllerArgs',
    'ArgoCDSpecControllerProcessorsArgs',
    'ArgoCDSpecControllerResourcesArgs',
    'ArgoCDSpecControllerResourcesLimitsArgs',
    'ArgoCDSpecControllerResourcesRequestsArgs',
    'ArgoCDSpecDexArgs',
    'ArgoCDSpecDexResourcesArgs',
    'ArgoCDSpecDexResourcesLimitsArgs',
    'ArgoCDSpecDexResourcesRequestsArgs',
    'ArgoCDSpecGrafanaArgs',
    'ArgoCDSpecGrafanaIngressArgs',
    'ArgoCDSpecGrafanaIngressTlsArgs',
    'ArgoCDSpecGrafanaResourcesArgs',
    'ArgoCDSpecGrafanaResourcesLimitsArgs',
    'ArgoCDSpecGrafanaResourcesRequestsArgs',
    'ArgoCDSpecGrafanaRouteArgs',
    'ArgoCDSpecGrafanaRouteTlsArgs',
    'ArgoCDSpecHaArgs',
    'ArgoCDSpecImportArgs',
    'ArgoCDSpecInitialSSHKnownHostsArgs',
    'ArgoCDSpecPrometheusArgs',
    'ArgoCDSpecPrometheusIngressArgs',
    'ArgoCDSpecPrometheusIngressTlsArgs',
    'ArgoCDSpecPrometheusRouteArgs',
    'ArgoCDSpecPrometheusRouteTlsArgs',
    'ArgoCDSpecRbacArgs',
    'ArgoCDSpecRedisArgs',
    'ArgoCDSpecRedisResourcesArgs',
    'ArgoCDSpecRedisResourcesLimitsArgs',
    'ArgoCDSpecRedisResourcesRequestsArgs',
    'ArgoCDSpecRepoArgs',
    'ArgoCDSpecRepoResourcesArgs',
    'ArgoCDSpecRepoResourcesLimitsArgs',
    'ArgoCDSpecRepoResourcesRequestsArgs',
    'ArgoCDSpecServerArgs',
    'ArgoCDSpecServerAutoscaleArgs',
    'ArgoCDSpecServerAutoscaleHpaArgs',
    'ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs',
    'ArgoCDSpecServerGrpcArgs',
    'ArgoCDSpecServerGrpcIngressArgs',
    'ArgoCDSpecServerGrpcIngressTlsArgs',
    'ArgoCDSpecServerIngressArgs',
    'ArgoCDSpecServerIngressTlsArgs',
    'ArgoCDSpecServerResourcesArgs',
    'ArgoCDSpecServerResourcesLimitsArgs',
    'ArgoCDSpecServerResourcesRequestsArgs',
    'ArgoCDSpecServerRouteArgs',
    'ArgoCDSpecServerRouteTlsArgs',
    'ArgoCDSpecServerServiceArgs',
    'ArgoCDSpecTlsArgs',
    'ArgoCDSpecTlsCaArgs',
    'ArgoCDStatusArgs',
]

@pulumi.input_type
class AppProjectSpecArgs:
    def __init__(__self__, *,
                 cluster_resource_blacklist: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecClusterResourceBlacklistArgs']]]] = None,
                 cluster_resource_whitelist: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecClusterResourceWhitelistArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecDestinationsArgs']]]] = None,
                 namespace_resource_blacklist: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecNamespaceResourceBlacklistArgs']]]] = None,
                 namespace_resource_whitelist: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecNamespaceResourceWhitelistArgs']]]] = None,
                 orphaned_resources: Optional[pulumi.Input['AppProjectSpecOrphanedResourcesArgs']] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecRolesArgs']]]] = None,
                 signature_keys: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecSignatureKeysArgs']]]] = None,
                 source_repos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sync_windows: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecSyncWindowsArgs']]]] = None):
        """
        AppProjectSpec is the specification of an AppProject
        :param pulumi.Input[Sequence[pulumi.Input['AppProjectSpecClusterResourceBlacklistArgs']]] cluster_resource_blacklist: ClusterResourceBlacklist contains list of blacklisted cluster level resources
        :param pulumi.Input[Sequence[pulumi.Input['AppProjectSpecClusterResourceWhitelistArgs']]] cluster_resource_whitelist: ClusterResourceWhitelist contains list of whitelisted cluster level resources
        :param pulumi.Input[str] description: Description contains optional project description
        :param pulumi.Input[Sequence[pulumi.Input['AppProjectSpecDestinationsArgs']]] destinations: Destinations contains list of destinations available for deployment
        :param pulumi.Input[Sequence[pulumi.Input['AppProjectSpecNamespaceResourceBlacklistArgs']]] namespace_resource_blacklist: NamespaceResourceBlacklist contains list of blacklisted namespace level resources
        :param pulumi.Input[Sequence[pulumi.Input['AppProjectSpecNamespaceResourceWhitelistArgs']]] namespace_resource_whitelist: NamespaceResourceWhitelist contains list of whitelisted namespace level resources
        :param pulumi.Input['AppProjectSpecOrphanedResourcesArgs'] orphaned_resources: OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
        :param pulumi.Input[Sequence[pulumi.Input['AppProjectSpecRolesArgs']]] roles: Roles are user defined RBAC roles associated with this project
        :param pulumi.Input[Sequence[pulumi.Input['AppProjectSpecSignatureKeysArgs']]] signature_keys: List of PGP key IDs that commits to be synced to must be signed with
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_repos: SourceRepos contains list of repository URLs which can be used for deployment
        :param pulumi.Input[Sequence[pulumi.Input['AppProjectSpecSyncWindowsArgs']]] sync_windows: SyncWindows controls when syncs can be run for apps in this project
        """
        if cluster_resource_blacklist is not None:
            pulumi.set(__self__, "cluster_resource_blacklist", cluster_resource_blacklist)
        if cluster_resource_whitelist is not None:
            pulumi.set(__self__, "cluster_resource_whitelist", cluster_resource_whitelist)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if namespace_resource_blacklist is not None:
            pulumi.set(__self__, "namespace_resource_blacklist", namespace_resource_blacklist)
        if namespace_resource_whitelist is not None:
            pulumi.set(__self__, "namespace_resource_whitelist", namespace_resource_whitelist)
        if orphaned_resources is not None:
            pulumi.set(__self__, "orphaned_resources", orphaned_resources)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if signature_keys is not None:
            pulumi.set(__self__, "signature_keys", signature_keys)
        if source_repos is not None:
            pulumi.set(__self__, "source_repos", source_repos)
        if sync_windows is not None:
            pulumi.set(__self__, "sync_windows", sync_windows)

    @property
    @pulumi.getter(name="clusterResourceBlacklist")
    def cluster_resource_blacklist(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecClusterResourceBlacklistArgs']]]]:
        """
        ClusterResourceBlacklist contains list of blacklisted cluster level resources
        """
        return pulumi.get(self, "cluster_resource_blacklist")

    @cluster_resource_blacklist.setter
    def cluster_resource_blacklist(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecClusterResourceBlacklistArgs']]]]):
        pulumi.set(self, "cluster_resource_blacklist", value)

    @property
    @pulumi.getter(name="clusterResourceWhitelist")
    def cluster_resource_whitelist(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecClusterResourceWhitelistArgs']]]]:
        """
        ClusterResourceWhitelist contains list of whitelisted cluster level resources
        """
        return pulumi.get(self, "cluster_resource_whitelist")

    @cluster_resource_whitelist.setter
    def cluster_resource_whitelist(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecClusterResourceWhitelistArgs']]]]):
        pulumi.set(self, "cluster_resource_whitelist", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description contains optional project description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecDestinationsArgs']]]]:
        """
        Destinations contains list of destinations available for deployment
        """
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecDestinationsArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="namespaceResourceBlacklist")
    def namespace_resource_blacklist(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecNamespaceResourceBlacklistArgs']]]]:
        """
        NamespaceResourceBlacklist contains list of blacklisted namespace level resources
        """
        return pulumi.get(self, "namespace_resource_blacklist")

    @namespace_resource_blacklist.setter
    def namespace_resource_blacklist(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecNamespaceResourceBlacklistArgs']]]]):
        pulumi.set(self, "namespace_resource_blacklist", value)

    @property
    @pulumi.getter(name="namespaceResourceWhitelist")
    def namespace_resource_whitelist(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecNamespaceResourceWhitelistArgs']]]]:
        """
        NamespaceResourceWhitelist contains list of whitelisted namespace level resources
        """
        return pulumi.get(self, "namespace_resource_whitelist")

    @namespace_resource_whitelist.setter
    def namespace_resource_whitelist(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecNamespaceResourceWhitelistArgs']]]]):
        pulumi.set(self, "namespace_resource_whitelist", value)

    @property
    @pulumi.getter(name="orphanedResources")
    def orphaned_resources(self) -> Optional[pulumi.Input['AppProjectSpecOrphanedResourcesArgs']]:
        """
        OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
        """
        return pulumi.get(self, "orphaned_resources")

    @orphaned_resources.setter
    def orphaned_resources(self, value: Optional[pulumi.Input['AppProjectSpecOrphanedResourcesArgs']]):
        pulumi.set(self, "orphaned_resources", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecRolesArgs']]]]:
        """
        Roles are user defined RBAC roles associated with this project
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecRolesArgs']]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="signatureKeys")
    def signature_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecSignatureKeysArgs']]]]:
        """
        List of PGP key IDs that commits to be synced to must be signed with
        """
        return pulumi.get(self, "signature_keys")

    @signature_keys.setter
    def signature_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecSignatureKeysArgs']]]]):
        pulumi.set(self, "signature_keys", value)

    @property
    @pulumi.getter(name="sourceRepos")
    def source_repos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        SourceRepos contains list of repository URLs which can be used for deployment
        """
        return pulumi.get(self, "source_repos")

    @source_repos.setter
    def source_repos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_repos", value)

    @property
    @pulumi.getter(name="syncWindows")
    def sync_windows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecSyncWindowsArgs']]]]:
        """
        SyncWindows controls when syncs can be run for apps in this project
        """
        return pulumi.get(self, "sync_windows")

    @sync_windows.setter
    def sync_windows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecSyncWindowsArgs']]]]):
        pulumi.set(self, "sync_windows", value)


@pulumi.input_type
class AppProjectSpecClusterResourceBlacklistArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str]):
        """
        GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)


@pulumi.input_type
class AppProjectSpecClusterResourceWhitelistArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str]):
        """
        GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)


@pulumi.input_type
class AppProjectSpecDestinationsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None):
        """
        ApplicationDestination contains deployment destination information
        :param pulumi.Input[str] name: Name of the destination cluster which can be used instead of server (url) field
        :param pulumi.Input[str] namespace: Namespace overrides the environment namespace value in the ksonnet app.yaml
        :param pulumi.Input[str] server: Server overrides the environment server value in the ksonnet app.yaml
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the destination cluster which can be used instead of server (url) field
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace overrides the environment namespace value in the ksonnet app.yaml
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server overrides the environment server value in the ksonnet app.yaml
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)


@pulumi.input_type
class AppProjectSpecNamespaceResourceBlacklistArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str]):
        """
        GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)


@pulumi.input_type
class AppProjectSpecNamespaceResourceWhitelistArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str]):
        """
        GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)


@pulumi.input_type
class AppProjectSpecOrphanedResourcesArgs:
    def __init__(__self__, *,
                 ignore: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecOrphanedResourcesIgnoreArgs']]]] = None,
                 warn: Optional[pulumi.Input[bool]] = None):
        """
        OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
        :param pulumi.Input[bool] warn: Warn indicates if warning condition should be created for apps which have orphaned resources
        """
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if warn is not None:
            pulumi.set(__self__, "warn", warn)

    @property
    @pulumi.getter
    def ignore(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecOrphanedResourcesIgnoreArgs']]]]:
        return pulumi.get(self, "ignore")

    @ignore.setter
    def ignore(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecOrphanedResourcesIgnoreArgs']]]]):
        pulumi.set(self, "ignore", value)

    @property
    @pulumi.getter
    def warn(self) -> Optional[pulumi.Input[bool]]:
        """
        Warn indicates if warning condition should be created for apps which have orphaned resources
        """
        return pulumi.get(self, "warn")

    @warn.setter
    def warn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "warn", value)


@pulumi.input_type
class AppProjectSpecOrphanedResourcesIgnoreArgs:
    def __init__(__self__, *,
                 group: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AppProjectSpecRolesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 jwt_tokens: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecRolesJwtTokensArgs']]]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        ProjectRole represents a role that has access to a project
        :param pulumi.Input[str] name: Name is a name for this role
        :param pulumi.Input[str] description: Description is a description of the role
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: Groups are a list of OIDC group claims bound to this role
        :param pulumi.Input[Sequence[pulumi.Input['AppProjectSpecRolesJwtTokensArgs']]] jwt_tokens: JWTTokens are a list of generated JWT tokens bound to this role
        :param pulumi.Input[Sequence[pulumi.Input[str]]] policies: Policies Stores a list of casbin formated strings that define access policies for the role in the project
        """
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if jwt_tokens is not None:
            pulumi.set(__self__, "jwt_tokens", jwt_tokens)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is a name for this role
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description is a description of the role
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Groups are a list of OIDC group claims bound to this role
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="jwtTokens")
    def jwt_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecRolesJwtTokensArgs']]]]:
        """
        JWTTokens are a list of generated JWT tokens bound to this role
        """
        return pulumi.get(self, "jwt_tokens")

    @jwt_tokens.setter
    def jwt_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppProjectSpecRolesJwtTokensArgs']]]]):
        pulumi.set(self, "jwt_tokens", value)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Policies Stores a list of casbin formated strings that define access policies for the role in the project
        """
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policies", value)


@pulumi.input_type
class AppProjectSpecRolesJwtTokensArgs:
    def __init__(__self__, *,
                 iat: pulumi.Input[int],
                 exp: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        """
        JWTToken holds the issuedAt and expiresAt values of a token
        """
        pulumi.set(__self__, "iat", iat)
        if exp is not None:
            pulumi.set(__self__, "exp", exp)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def iat(self) -> pulumi.Input[int]:
        return pulumi.get(self, "iat")

    @iat.setter
    def iat(self, value: pulumi.Input[int]):
        pulumi.set(self, "iat", value)

    @property
    @pulumi.getter
    def exp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "exp")

    @exp.setter
    def exp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exp", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class AppProjectSpecSignatureKeysArgs:
    def __init__(__self__, *,
                 key_id: pulumi.Input[str]):
        """
        SignatureKey is the specification of a key required to verify commit signatures with
        :param pulumi.Input[str] key_id: The ID of the key in hexadecimal notation
        """
        pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="keyID")
    def key_id(self) -> pulumi.Input[str]:
        """
        The ID of the key in hexadecimal notation
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_id", value)


@pulumi.input_type
class AppProjectSpecSyncWindowsArgs:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 manual_sync: Optional[pulumi.Input[bool]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 schedule: Optional[pulumi.Input[str]] = None):
        """
        SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps
        :param pulumi.Input[Sequence[pulumi.Input[str]]] applications: Applications contains a list of applications that the window will apply to
        :param pulumi.Input[Sequence[pulumi.Input[str]]] clusters: Clusters contains a list of clusters that the window will apply to
        :param pulumi.Input[str] duration: Duration is the amount of time the sync window will be open
        :param pulumi.Input[str] kind: Kind defines if the window allows or blocks syncs
        :param pulumi.Input[bool] manual_sync: ManualSync enables manual syncs when they would otherwise be blocked
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: Namespaces contains a list of namespaces that the window will apply to
        :param pulumi.Input[str] schedule: Schedule is the time the window will begin, specified in cron format
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if manual_sync is not None:
            pulumi.set(__self__, "manual_sync", manual_sync)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Applications contains a list of applications that the window will apply to
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter
    def clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Clusters contains a list of clusters that the window will apply to
        """
        return pulumi.get(self, "clusters")

    @clusters.setter
    def clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "clusters", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Duration is the amount of time the sync window will be open
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind defines if the window allows or blocks syncs
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="manualSync")
    def manual_sync(self) -> Optional[pulumi.Input[bool]]:
        """
        ManualSync enables manual syncs when they would otherwise be blocked
        """
        return pulumi.get(self, "manual_sync")

    @manual_sync.setter
    def manual_sync(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manual_sync", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Namespaces contains a list of namespaces that the window will apply to
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule is the time the window will begin, specified in cron format
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)


@pulumi.input_type
class ApplicationOperationArgs:
    def __init__(__self__, *,
                 info: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationInfoArgs']]]] = None,
                 initiated_by: Optional[pulumi.Input['ApplicationOperationInitiatedByArgs']] = None,
                 retry: Optional[pulumi.Input['ApplicationOperationRetryArgs']] = None,
                 sync: Optional[pulumi.Input['ApplicationOperationSyncArgs']] = None):
        """
        Operation contains requested operation parameters.
        :param pulumi.Input['ApplicationOperationInitiatedByArgs'] initiated_by: OperationInitiator holds information about the operation initiator
        :param pulumi.Input['ApplicationOperationRetryArgs'] retry: Retry controls failed sync retry behavior
        :param pulumi.Input['ApplicationOperationSyncArgs'] sync: SyncOperation contains sync operation details.
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if initiated_by is not None:
            pulumi.set(__self__, "initiated_by", initiated_by)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync is not None:
            pulumi.set(__self__, "sync", sync)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationInfoArgs']]]]:
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationInfoArgs']]]]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter(name="initiatedBy")
    def initiated_by(self) -> Optional[pulumi.Input['ApplicationOperationInitiatedByArgs']]:
        """
        OperationInitiator holds information about the operation initiator
        """
        return pulumi.get(self, "initiated_by")

    @initiated_by.setter
    def initiated_by(self, value: Optional[pulumi.Input['ApplicationOperationInitiatedByArgs']]):
        pulumi.set(self, "initiated_by", value)

    @property
    @pulumi.getter
    def retry(self) -> Optional[pulumi.Input['ApplicationOperationRetryArgs']]:
        """
        Retry controls failed sync retry behavior
        """
        return pulumi.get(self, "retry")

    @retry.setter
    def retry(self, value: Optional[pulumi.Input['ApplicationOperationRetryArgs']]):
        pulumi.set(self, "retry", value)

    @property
    @pulumi.getter
    def sync(self) -> Optional[pulumi.Input['ApplicationOperationSyncArgs']]:
        """
        SyncOperation contains sync operation details.
        """
        return pulumi.get(self, "sync")

    @sync.setter
    def sync(self, value: Optional[pulumi.Input['ApplicationOperationSyncArgs']]):
        pulumi.set(self, "sync", value)


@pulumi.input_type
class ApplicationOperationInfoArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationOperationInitiatedByArgs:
    def __init__(__self__, *,
                 automated: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        OperationInitiator holds information about the operation initiator
        :param pulumi.Input[bool] automated: Automated is set to true if operation was initiated automatically by the application controller.
        :param pulumi.Input[str] username: Name of a user who started operation.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def automated(self) -> Optional[pulumi.Input[bool]]:
        """
        Automated is set to true if operation was initiated automatically by the application controller.
        """
        return pulumi.get(self, "automated")

    @automated.setter
    def automated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automated", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a user who started operation.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ApplicationOperationRetryArgs:
    def __init__(__self__, *,
                 backoff: Optional[pulumi.Input['ApplicationOperationRetryBackoffArgs']] = None,
                 limit: Optional[pulumi.Input[int]] = None):
        """
        Retry controls failed sync retry behavior
        :param pulumi.Input['ApplicationOperationRetryBackoffArgs'] backoff: Backoff is a backoff strategy
        :param pulumi.Input[int] limit: Limit is the maximum number of attempts when retrying a container
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional[pulumi.Input['ApplicationOperationRetryBackoffArgs']]:
        """
        Backoff is a backoff strategy
        """
        return pulumi.get(self, "backoff")

    @backoff.setter
    def backoff(self, value: Optional[pulumi.Input['ApplicationOperationRetryBackoffArgs']]):
        pulumi.set(self, "backoff", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        Limit is the maximum number of attempts when retrying a container
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)


@pulumi.input_type
class ApplicationOperationRetryBackoffArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None,
                 factor: Optional[pulumi.Input[int]] = None,
                 max_duration: Optional[pulumi.Input[str]] = None):
        """
        Backoff is a backoff strategy
        :param pulumi.Input[str] duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        :param pulumi.Input[int] factor: Factor is a factor to multiply the base duration after each failed retry
        :param pulumi.Input[str] max_duration: MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def factor(self) -> Optional[pulumi.Input[int]]:
        """
        Factor is a factor to multiply the base duration after each failed retry
        """
        return pulumi.get(self, "factor")

    @factor.setter
    def factor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "factor", value)

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[pulumi.Input[str]]:
        """
        MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        return pulumi.get(self, "max_duration")

    @max_duration.setter
    def max_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_duration", value)


@pulumi.input_type
class ApplicationOperationSyncArgs:
    def __init__(__self__, *,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 manifests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 prune: Optional[pulumi.Input[bool]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncResourcesArgs']]]] = None,
                 revision: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input['ApplicationOperationSyncSourceArgs']] = None,
                 sync_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sync_strategy: Optional[pulumi.Input['ApplicationOperationSyncSyncStrategyArgs']] = None):
        """
        SyncOperation contains sync operation details.
        :param pulumi.Input[bool] dry_run: DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
        :param pulumi.Input[Sequence[pulumi.Input[str]]] manifests: Manifests is an optional field that overrides sync source with a local directory for development
        :param pulumi.Input[bool] prune: Prune deletes resources that are no longer tracked in git
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncResourcesArgs']]] resources: Resources describes which resources to sync
        :param pulumi.Input[str] revision: Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
        :param pulumi.Input['ApplicationOperationSyncSourceArgs'] source: Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sync_options: SyncOptions provide per-sync sync-options, e.g. Validate=false
        :param pulumi.Input['ApplicationOperationSyncSyncStrategyArgs'] sync_strategy: SyncStrategy describes how to perform the sync
        """
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if manifests is not None:
            pulumi.set(__self__, "manifests", manifests)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)
        if sync_strategy is not None:
            pulumi.set(__self__, "sync_strategy", sync_strategy)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter
    def manifests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Manifests is an optional field that overrides sync source with a local directory for development
        """
        return pulumi.get(self, "manifests")

    @manifests.setter
    def manifests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "manifests", value)

    @property
    @pulumi.getter
    def prune(self) -> Optional[pulumi.Input[bool]]:
        """
        Prune deletes resources that are no longer tracked in git
        """
        return pulumi.get(self, "prune")

    @prune.setter
    def prune(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prune", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncResourcesArgs']]]]:
        """
        Resources describes which resources to sync
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncResourcesArgs']]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[str]]:
        """
        Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['ApplicationOperationSyncSourceArgs']]:
        """
        Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['ApplicationOperationSyncSourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        SyncOptions provide per-sync sync-options, e.g. Validate=false
        """
        return pulumi.get(self, "sync_options")

    @sync_options.setter
    def sync_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sync_options", value)

    @property
    @pulumi.getter(name="syncStrategy")
    def sync_strategy(self) -> Optional[pulumi.Input['ApplicationOperationSyncSyncStrategyArgs']]:
        """
        SyncStrategy describes how to perform the sync
        """
        return pulumi.get(self, "sync_strategy")

    @sync_strategy.setter
    def sync_strategy(self, value: Optional[pulumi.Input['ApplicationOperationSyncSyncStrategyArgs']]):
        pulumi.set(self, "sync_strategy", value)


@pulumi.input_type
class ApplicationOperationSyncResourcesArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SyncOperationResource contains resources to sync.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ApplicationOperationSyncSourceArgs:
    def __init__(__self__, *,
                 repo_url: pulumi.Input[str],
                 chart: Optional[pulumi.Input[str]] = None,
                 directory: Optional[pulumi.Input['ApplicationOperationSyncSourceDirectoryArgs']] = None,
                 helm: Optional[pulumi.Input['ApplicationOperationSyncSourceHelmArgs']] = None,
                 ksonnet: Optional[pulumi.Input['ApplicationOperationSyncSourceKsonnetArgs']] = None,
                 kustomize: Optional[pulumi.Input['ApplicationOperationSyncSourceKustomizeArgs']] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 plugin: Optional[pulumi.Input['ApplicationOperationSyncSourcePluginArgs']] = None,
                 target_revision: Optional[pulumi.Input[str]] = None):
        """
        Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
        :param pulumi.Input[str] repo_url: RepoURL is the repository URL of the application manifests
        :param pulumi.Input[str] chart: Chart is a Helm chart name
        :param pulumi.Input['ApplicationOperationSyncSourceDirectoryArgs'] directory: Directory holds path/directory specific options
        :param pulumi.Input['ApplicationOperationSyncSourceHelmArgs'] helm: Helm holds helm specific options
        :param pulumi.Input['ApplicationOperationSyncSourceKsonnetArgs'] ksonnet: Ksonnet holds ksonnet specific options
        :param pulumi.Input['ApplicationOperationSyncSourceKustomizeArgs'] kustomize: Kustomize holds kustomize specific options
        :param pulumi.Input[str] path: Path is a directory path within the Git repository
        :param pulumi.Input['ApplicationOperationSyncSourcePluginArgs'] plugin: ConfigManagementPlugin holds config management plugin specific options
        :param pulumi.Input[str] target_revision: TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> pulumi.Input[str]:
        """
        RepoURL is the repository URL of the application manifests
        """
        return pulumi.get(self, "repo_url")

    @repo_url.setter
    def repo_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo_url", value)

    @property
    @pulumi.getter
    def chart(self) -> Optional[pulumi.Input[str]]:
        """
        Chart is a Helm chart name
        """
        return pulumi.get(self, "chart")

    @chart.setter
    def chart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input['ApplicationOperationSyncSourceDirectoryArgs']]:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input['ApplicationOperationSyncSourceDirectoryArgs']]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def helm(self) -> Optional[pulumi.Input['ApplicationOperationSyncSourceHelmArgs']]:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @helm.setter
    def helm(self, value: Optional[pulumi.Input['ApplicationOperationSyncSourceHelmArgs']]):
        pulumi.set(self, "helm", value)

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional[pulumi.Input['ApplicationOperationSyncSourceKsonnetArgs']]:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @ksonnet.setter
    def ksonnet(self, value: Optional[pulumi.Input['ApplicationOperationSyncSourceKsonnetArgs']]):
        pulumi.set(self, "ksonnet", value)

    @property
    @pulumi.getter
    def kustomize(self) -> Optional[pulumi.Input['ApplicationOperationSyncSourceKustomizeArgs']]:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @kustomize.setter
    def kustomize(self, value: Optional[pulumi.Input['ApplicationOperationSyncSourceKustomizeArgs']]):
        pulumi.set(self, "kustomize", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path is a directory path within the Git repository
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def plugin(self) -> Optional[pulumi.Input['ApplicationOperationSyncSourcePluginArgs']]:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @plugin.setter
    def plugin(self, value: Optional[pulumi.Input['ApplicationOperationSyncSourcePluginArgs']]):
        pulumi.set(self, "plugin", value)

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[pulumi.Input[str]]:
        """
        TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        return pulumi.get(self, "target_revision")

    @target_revision.setter
    def target_revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_revision", value)


@pulumi.input_type
class ApplicationOperationSyncSourceDirectoryArgs:
    def __init__(__self__, *,
                 jsonnet: Optional[pulumi.Input['ApplicationOperationSyncSourceDirectoryJsonnetArgs']] = None,
                 recurse: Optional[pulumi.Input[bool]] = None):
        """
        Directory holds path/directory specific options
        :param pulumi.Input['ApplicationOperationSyncSourceDirectoryJsonnetArgs'] jsonnet: ApplicationSourceJsonnet holds jsonnet specific options
        """
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional[pulumi.Input['ApplicationOperationSyncSourceDirectoryJsonnetArgs']]:
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        """
        return pulumi.get(self, "jsonnet")

    @jsonnet.setter
    def jsonnet(self, value: Optional[pulumi.Input['ApplicationOperationSyncSourceDirectoryJsonnetArgs']]):
        pulumi.set(self, "jsonnet", value)

    @property
    @pulumi.getter
    def recurse(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recurse")

    @recurse.setter
    def recurse(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recurse", value)


@pulumi.input_type
class ApplicationOperationSyncSourceDirectoryJsonnetArgs:
    def __init__(__self__, *,
                 ext_vars: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArgs']]]] = None,
                 libs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tlas: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceDirectoryJsonnetTlasArgs']]]] = None):
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArgs']]] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param pulumi.Input[Sequence[pulumi.Input[str]]] libs: Additional library search dirs
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceDirectoryJsonnetTlasArgs']]] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArgs']]]]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @ext_vars.setter
    def ext_vars(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArgs']]]]):
        pulumi.set(self, "ext_vars", value)

    @property
    @pulumi.getter
    def libs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @libs.setter
    def libs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "libs", value)

    @property
    @pulumi.getter
    def tlas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceDirectoryJsonnetTlasArgs']]]]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")

    @tlas.setter
    def tlas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceDirectoryJsonnetTlasArgs']]]]):
        pulumi.set(self, "tlas", value)


@pulumi.input_type
class ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 code: Optional[pulumi.Input[bool]] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class ApplicationOperationSyncSourceDirectoryJsonnetTlasArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 code: Optional[pulumi.Input[bool]] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class ApplicationOperationSyncSourceHelmArgs:
    def __init__(__self__, *,
                 file_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceHelmFileParametersArgs']]]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceHelmParametersArgs']]]] = None,
                 release_name: Optional[pulumi.Input[str]] = None,
                 value_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 values: Optional[pulumi.Input[str]] = None):
        """
        Helm holds helm specific options
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceHelmFileParametersArgs']]] file_parameters: FileParameters are file parameters to the helm template
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceHelmParametersArgs']]] parameters: Parameters are parameters to the helm template
        :param pulumi.Input[str] release_name: The Helm release name. If omitted it will use the application name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param pulumi.Input[str] values: Values is Helm values, typically defined as a block
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceHelmFileParametersArgs']]]]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @file_parameters.setter
    def file_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceHelmFileParametersArgs']]]]):
        pulumi.set(self, "file_parameters", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceHelmParametersArgs']]]]:
        """
        Parameters are parameters to the helm template
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceHelmParametersArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Helm release name. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @release_name.setter
    def release_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_name", value)

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @value_files.setter
    def value_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "value_files", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[str]]:
        """
        Values is Helm values, typically defined as a block
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ApplicationOperationSyncSourceHelmFileParametersArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        HelmFileParameter is a file parameter to a helm template
        :param pulumi.Input[str] name: Name is the name of the helm parameter
        :param pulumi.Input[str] path: Path is the path value for the helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path is the path value for the helm parameter
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class ApplicationOperationSyncSourceHelmParametersArgs:
    def __init__(__self__, *,
                 force_string: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        HelmParameter is a parameter to a helm template
        :param pulumi.Input[bool] force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param pulumi.Input[str] name: Name is the name of the helm parameter
        :param pulumi.Input[str] value: Value is the value for the helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[pulumi.Input[bool]]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @force_string.setter
    def force_string(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_string", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the value for the helm parameter
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationOperationSyncSourceKsonnetArgs:
    def __init__(__self__, *,
                 environment: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceKsonnetParametersArgs']]]] = None):
        """
        Ksonnet holds ksonnet specific options
        :param pulumi.Input[str] environment: Environment is a ksonnet application environment name
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceKsonnetParametersArgs']]] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceKsonnetParametersArgs']]]]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourceKsonnetParametersArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class ApplicationOperationSyncSourceKsonnetParametersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 component: Optional[pulumi.Input[str]] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)


@pulumi.input_type
class ApplicationOperationSyncSourceKustomizeArgs:
    def __init__(__self__, *,
                 common_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 name_suffix: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Kustomize holds kustomize specific options
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] common_labels: CommonLabels adds additional kustomize commonLabels
        :param pulumi.Input[Sequence[pulumi.Input[str]]] images: Images are kustomize image overrides
        :param pulumi.Input[str] name_prefix: NamePrefix is a prefix appended to resources for kustomize apps
        :param pulumi.Input[str] name_suffix: NameSuffix is a suffix appended to resources for kustomize apps
        :param pulumi.Input[str] version: Version contains optional Kustomize version
        """
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        CommonLabels adds additional kustomize commonLabels
        """
        return pulumi.get(self, "common_labels")

    @common_labels.setter
    def common_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "common_labels", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Images are kustomize image overrides
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        NamePrefix is a prefix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        NameSuffix is a suffix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @name_suffix.setter
    def name_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_suffix", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version contains optional Kustomize version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ApplicationOperationSyncSourcePluginArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourcePluginEnvArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourcePluginEnvArgs']]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOperationSyncSourcePluginEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ApplicationOperationSyncSourcePluginEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: the name, usually uppercase
        :param pulumi.Input[str] value: the value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        the name, usually uppercase
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        the value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationOperationSyncSyncStrategyArgs:
    def __init__(__self__, *,
                 apply: Optional[pulumi.Input['ApplicationOperationSyncSyncStrategyApplyArgs']] = None,
                 hook: Optional[pulumi.Input['ApplicationOperationSyncSyncStrategyHookArgs']] = None):
        """
        SyncStrategy describes how to perform the sync
        :param pulumi.Input['ApplicationOperationSyncSyncStrategyApplyArgs'] apply: Apply wil perform a `kubectl apply` to perform the sync.
        :param pulumi.Input['ApplicationOperationSyncSyncStrategyHookArgs'] hook: Hook will submit any referenced resources to perform the sync. This is the default strategy
        """
        if apply is not None:
            pulumi.set(__self__, "apply", apply)
        if hook is not None:
            pulumi.set(__self__, "hook", hook)

    @property
    @pulumi.getter
    def apply(self) -> Optional[pulumi.Input['ApplicationOperationSyncSyncStrategyApplyArgs']]:
        """
        Apply wil perform a `kubectl apply` to perform the sync.
        """
        return pulumi.get(self, "apply")

    @apply.setter
    def apply(self, value: Optional[pulumi.Input['ApplicationOperationSyncSyncStrategyApplyArgs']]):
        pulumi.set(self, "apply", value)

    @property
    @pulumi.getter
    def hook(self) -> Optional[pulumi.Input['ApplicationOperationSyncSyncStrategyHookArgs']]:
        """
        Hook will submit any referenced resources to perform the sync. This is the default strategy
        """
        return pulumi.get(self, "hook")

    @hook.setter
    def hook(self, value: Optional[pulumi.Input['ApplicationOperationSyncSyncStrategyHookArgs']]):
        pulumi.set(self, "hook", value)


@pulumi.input_type
class ApplicationOperationSyncSyncStrategyApplyArgs:
    def __init__(__self__, *,
                 force: Optional[pulumi.Input[bool]] = None):
        """
        Apply wil perform a `kubectl apply` to perform the sync.
        :param pulumi.Input[bool] force: Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        if force is not None:
            pulumi.set(__self__, "force", force)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)


@pulumi.input_type
class ApplicationOperationSyncSyncStrategyHookArgs:
    def __init__(__self__, *,
                 force: Optional[pulumi.Input[bool]] = None):
        """
        Hook will submit any referenced resources to perform the sync. This is the default strategy
        :param pulumi.Input[bool] force: Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        if force is not None:
            pulumi.set(__self__, "force", force)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)


@pulumi.input_type
class ApplicationSpecArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input['ApplicationSpecDestinationArgs'],
                 project: pulumi.Input[str],
                 source: pulumi.Input['ApplicationSpecSourceArgs'],
                 ignore_differences: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecIgnoreDifferencesArgs']]]] = None,
                 info: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecInfoArgs']]]] = None,
                 revision_history_limit: Optional[pulumi.Input[int]] = None,
                 sync_policy: Optional[pulumi.Input['ApplicationSpecSyncPolicyArgs']] = None):
        """
        ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
        :param pulumi.Input['ApplicationSpecDestinationArgs'] destination: Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
        :param pulumi.Input[str] project: Project is a application project name. Empty name means that application belongs to 'default' project.
        :param pulumi.Input['ApplicationSpecSourceArgs'] source: Source is a reference to the location ksonnet application definition
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationSpecIgnoreDifferencesArgs']]] ignore_differences: IgnoreDifferences controls resources fields which should be ignored during comparison
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationSpecInfoArgs']]] info: Infos contains a list of useful information (URLs, email addresses, and plain text) that relates to the application
        :param pulumi.Input[int] revision_history_limit: This limits this number of items kept in the apps revision history. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param pulumi.Input['ApplicationSpecSyncPolicyArgs'] sync_policy: SyncPolicy controls when a sync will be performed
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "source", source)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if info is not None:
            pulumi.set(__self__, "info", info)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input['ApplicationSpecDestinationArgs']:
        """
        Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input['ApplicationSpecDestinationArgs']):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        Project is a application project name. Empty name means that application belongs to 'default' project.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['ApplicationSpecSourceArgs']:
        """
        Source is a reference to the location ksonnet application definition
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['ApplicationSpecSourceArgs']):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecIgnoreDifferencesArgs']]]]:
        """
        IgnoreDifferences controls resources fields which should be ignored during comparison
        """
        return pulumi.get(self, "ignore_differences")

    @ignore_differences.setter
    def ignore_differences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecIgnoreDifferencesArgs']]]]):
        pulumi.set(self, "ignore_differences", value)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecInfoArgs']]]]:
        """
        Infos contains a list of useful information (URLs, email addresses, and plain text) that relates to the application
        """
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecInfoArgs']]]]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[pulumi.Input[int]]:
        """
        This limits this number of items kept in the apps revision history. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @revision_history_limit.setter
    def revision_history_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "revision_history_limit", value)

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional[pulumi.Input['ApplicationSpecSyncPolicyArgs']]:
        """
        SyncPolicy controls when a sync will be performed
        """
        return pulumi.get(self, "sync_policy")

    @sync_policy.setter
    def sync_policy(self, value: Optional[pulumi.Input['ApplicationSpecSyncPolicyArgs']]):
        pulumi.set(self, "sync_policy", value)


@pulumi.input_type
class ApplicationSpecDestinationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None):
        """
        Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
        :param pulumi.Input[str] name: Name of the destination cluster which can be used instead of server (url) field
        :param pulumi.Input[str] namespace: Namespace overrides the environment namespace value in the ksonnet app.yaml
        :param pulumi.Input[str] server: Server overrides the environment server value in the ksonnet app.yaml
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the destination cluster which can be used instead of server (url) field
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace overrides the environment namespace value in the ksonnet app.yaml
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server overrides the environment server value in the ksonnet app.yaml
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)


@pulumi.input_type
class ApplicationSpecIgnoreDifferencesArgs:
    def __init__(__self__, *,
                 json_pointers: pulumi.Input[Sequence[pulumi.Input[str]]],
                 kind: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
        """
        pulumi.set(__self__, "json_pointers", json_pointers)
        pulumi.set(__self__, "kind", kind)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "json_pointers")

    @json_pointers.setter
    def json_pointers(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "json_pointers", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ApplicationSpecInfoArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationSpecSourceArgs:
    def __init__(__self__, *,
                 repo_url: pulumi.Input[str],
                 chart: Optional[pulumi.Input[str]] = None,
                 directory: Optional[pulumi.Input['ApplicationSpecSourceDirectoryArgs']] = None,
                 helm: Optional[pulumi.Input['ApplicationSpecSourceHelmArgs']] = None,
                 ksonnet: Optional[pulumi.Input['ApplicationSpecSourceKsonnetArgs']] = None,
                 kustomize: Optional[pulumi.Input['ApplicationSpecSourceKustomizeArgs']] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 plugin: Optional[pulumi.Input['ApplicationSpecSourcePluginArgs']] = None,
                 target_revision: Optional[pulumi.Input[str]] = None):
        """
        Source is a reference to the location ksonnet application definition
        :param pulumi.Input[str] repo_url: RepoURL is the repository URL of the application manifests
        :param pulumi.Input[str] chart: Chart is a Helm chart name
        :param pulumi.Input['ApplicationSpecSourceDirectoryArgs'] directory: Directory holds path/directory specific options
        :param pulumi.Input['ApplicationSpecSourceHelmArgs'] helm: Helm holds helm specific options
        :param pulumi.Input['ApplicationSpecSourceKsonnetArgs'] ksonnet: Ksonnet holds ksonnet specific options
        :param pulumi.Input['ApplicationSpecSourceKustomizeArgs'] kustomize: Kustomize holds kustomize specific options
        :param pulumi.Input[str] path: Path is a directory path within the Git repository
        :param pulumi.Input['ApplicationSpecSourcePluginArgs'] plugin: ConfigManagementPlugin holds config management plugin specific options
        :param pulumi.Input[str] target_revision: TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> pulumi.Input[str]:
        """
        RepoURL is the repository URL of the application manifests
        """
        return pulumi.get(self, "repo_url")

    @repo_url.setter
    def repo_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo_url", value)

    @property
    @pulumi.getter
    def chart(self) -> Optional[pulumi.Input[str]]:
        """
        Chart is a Helm chart name
        """
        return pulumi.get(self, "chart")

    @chart.setter
    def chart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input['ApplicationSpecSourceDirectoryArgs']]:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input['ApplicationSpecSourceDirectoryArgs']]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def helm(self) -> Optional[pulumi.Input['ApplicationSpecSourceHelmArgs']]:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @helm.setter
    def helm(self, value: Optional[pulumi.Input['ApplicationSpecSourceHelmArgs']]):
        pulumi.set(self, "helm", value)

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional[pulumi.Input['ApplicationSpecSourceKsonnetArgs']]:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @ksonnet.setter
    def ksonnet(self, value: Optional[pulumi.Input['ApplicationSpecSourceKsonnetArgs']]):
        pulumi.set(self, "ksonnet", value)

    @property
    @pulumi.getter
    def kustomize(self) -> Optional[pulumi.Input['ApplicationSpecSourceKustomizeArgs']]:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @kustomize.setter
    def kustomize(self, value: Optional[pulumi.Input['ApplicationSpecSourceKustomizeArgs']]):
        pulumi.set(self, "kustomize", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path is a directory path within the Git repository
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def plugin(self) -> Optional[pulumi.Input['ApplicationSpecSourcePluginArgs']]:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @plugin.setter
    def plugin(self, value: Optional[pulumi.Input['ApplicationSpecSourcePluginArgs']]):
        pulumi.set(self, "plugin", value)

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[pulumi.Input[str]]:
        """
        TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        return pulumi.get(self, "target_revision")

    @target_revision.setter
    def target_revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_revision", value)


@pulumi.input_type
class ApplicationSpecSourceDirectoryArgs:
    def __init__(__self__, *,
                 jsonnet: Optional[pulumi.Input['ApplicationSpecSourceDirectoryJsonnetArgs']] = None,
                 recurse: Optional[pulumi.Input[bool]] = None):
        """
        Directory holds path/directory specific options
        :param pulumi.Input['ApplicationSpecSourceDirectoryJsonnetArgs'] jsonnet: ApplicationSourceJsonnet holds jsonnet specific options
        """
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional[pulumi.Input['ApplicationSpecSourceDirectoryJsonnetArgs']]:
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        """
        return pulumi.get(self, "jsonnet")

    @jsonnet.setter
    def jsonnet(self, value: Optional[pulumi.Input['ApplicationSpecSourceDirectoryJsonnetArgs']]):
        pulumi.set(self, "jsonnet", value)

    @property
    @pulumi.getter
    def recurse(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recurse")

    @recurse.setter
    def recurse(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recurse", value)


@pulumi.input_type
class ApplicationSpecSourceDirectoryJsonnetArgs:
    def __init__(__self__, *,
                 ext_vars: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceDirectoryJsonnetExtVarsArgs']]]] = None,
                 libs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tlas: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceDirectoryJsonnetTlasArgs']]]] = None):
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceDirectoryJsonnetExtVarsArgs']]] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param pulumi.Input[Sequence[pulumi.Input[str]]] libs: Additional library search dirs
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceDirectoryJsonnetTlasArgs']]] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceDirectoryJsonnetExtVarsArgs']]]]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @ext_vars.setter
    def ext_vars(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceDirectoryJsonnetExtVarsArgs']]]]):
        pulumi.set(self, "ext_vars", value)

    @property
    @pulumi.getter
    def libs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @libs.setter
    def libs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "libs", value)

    @property
    @pulumi.getter
    def tlas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceDirectoryJsonnetTlasArgs']]]]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")

    @tlas.setter
    def tlas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceDirectoryJsonnetTlasArgs']]]]):
        pulumi.set(self, "tlas", value)


@pulumi.input_type
class ApplicationSpecSourceDirectoryJsonnetExtVarsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 code: Optional[pulumi.Input[bool]] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class ApplicationSpecSourceDirectoryJsonnetTlasArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 code: Optional[pulumi.Input[bool]] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class ApplicationSpecSourceHelmArgs:
    def __init__(__self__, *,
                 file_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceHelmFileParametersArgs']]]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceHelmParametersArgs']]]] = None,
                 release_name: Optional[pulumi.Input[str]] = None,
                 value_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 values: Optional[pulumi.Input[str]] = None):
        """
        Helm holds helm specific options
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceHelmFileParametersArgs']]] file_parameters: FileParameters are file parameters to the helm template
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceHelmParametersArgs']]] parameters: Parameters are parameters to the helm template
        :param pulumi.Input[str] release_name: The Helm release name. If omitted it will use the application name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param pulumi.Input[str] values: Values is Helm values, typically defined as a block
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceHelmFileParametersArgs']]]]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @file_parameters.setter
    def file_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceHelmFileParametersArgs']]]]):
        pulumi.set(self, "file_parameters", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceHelmParametersArgs']]]]:
        """
        Parameters are parameters to the helm template
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceHelmParametersArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Helm release name. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @release_name.setter
    def release_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_name", value)

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @value_files.setter
    def value_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "value_files", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[str]]:
        """
        Values is Helm values, typically defined as a block
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ApplicationSpecSourceHelmFileParametersArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        HelmFileParameter is a file parameter to a helm template
        :param pulumi.Input[str] name: Name is the name of the helm parameter
        :param pulumi.Input[str] path: Path is the path value for the helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path is the path value for the helm parameter
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class ApplicationSpecSourceHelmParametersArgs:
    def __init__(__self__, *,
                 force_string: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        HelmParameter is a parameter to a helm template
        :param pulumi.Input[bool] force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param pulumi.Input[str] name: Name is the name of the helm parameter
        :param pulumi.Input[str] value: Value is the value for the helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[pulumi.Input[bool]]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @force_string.setter
    def force_string(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_string", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the value for the helm parameter
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationSpecSourceKsonnetArgs:
    def __init__(__self__, *,
                 environment: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceKsonnetParametersArgs']]]] = None):
        """
        Ksonnet holds ksonnet specific options
        :param pulumi.Input[str] environment: Environment is a ksonnet application environment name
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceKsonnetParametersArgs']]] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceKsonnetParametersArgs']]]]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourceKsonnetParametersArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class ApplicationSpecSourceKsonnetParametersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 component: Optional[pulumi.Input[str]] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)


@pulumi.input_type
class ApplicationSpecSourceKustomizeArgs:
    def __init__(__self__, *,
                 common_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 name_suffix: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Kustomize holds kustomize specific options
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] common_labels: CommonLabels adds additional kustomize commonLabels
        :param pulumi.Input[Sequence[pulumi.Input[str]]] images: Images are kustomize image overrides
        :param pulumi.Input[str] name_prefix: NamePrefix is a prefix appended to resources for kustomize apps
        :param pulumi.Input[str] name_suffix: NameSuffix is a suffix appended to resources for kustomize apps
        :param pulumi.Input[str] version: Version contains optional Kustomize version
        """
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        CommonLabels adds additional kustomize commonLabels
        """
        return pulumi.get(self, "common_labels")

    @common_labels.setter
    def common_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "common_labels", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Images are kustomize image overrides
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        NamePrefix is a prefix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        NameSuffix is a suffix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @name_suffix.setter
    def name_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_suffix", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version contains optional Kustomize version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ApplicationSpecSourcePluginArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourcePluginEnvArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourcePluginEnvArgs']]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSpecSourcePluginEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ApplicationSpecSourcePluginEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: the name, usually uppercase
        :param pulumi.Input[str] value: the value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        the name, usually uppercase
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        the value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationSpecSyncPolicyArgs:
    def __init__(__self__, *,
                 automated: Optional[pulumi.Input['ApplicationSpecSyncPolicyAutomatedArgs']] = None,
                 retry: Optional[pulumi.Input['ApplicationSpecSyncPolicyRetryArgs']] = None,
                 sync_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        SyncPolicy controls when a sync will be performed
        :param pulumi.Input['ApplicationSpecSyncPolicyAutomatedArgs'] automated: Automated will keep an application synced to the target revision
        :param pulumi.Input['ApplicationSpecSyncPolicyRetryArgs'] retry: Retry controls failed sync retry behavior
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sync_options: Options allow you to specify whole app sync-options
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional[pulumi.Input['ApplicationSpecSyncPolicyAutomatedArgs']]:
        """
        Automated will keep an application synced to the target revision
        """
        return pulumi.get(self, "automated")

    @automated.setter
    def automated(self, value: Optional[pulumi.Input['ApplicationSpecSyncPolicyAutomatedArgs']]):
        pulumi.set(self, "automated", value)

    @property
    @pulumi.getter
    def retry(self) -> Optional[pulumi.Input['ApplicationSpecSyncPolicyRetryArgs']]:
        """
        Retry controls failed sync retry behavior
        """
        return pulumi.get(self, "retry")

    @retry.setter
    def retry(self, value: Optional[pulumi.Input['ApplicationSpecSyncPolicyRetryArgs']]):
        pulumi.set(self, "retry", value)

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Options allow you to specify whole app sync-options
        """
        return pulumi.get(self, "sync_options")

    @sync_options.setter
    def sync_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sync_options", value)


@pulumi.input_type
class ApplicationSpecSyncPolicyAutomatedArgs:
    def __init__(__self__, *,
                 prune: Optional[pulumi.Input[bool]] = None,
                 self_heal: Optional[pulumi.Input[bool]] = None):
        """
        Automated will keep an application synced to the target revision
        :param pulumi.Input[bool] prune: Prune will prune resources automatically as part of automated sync (default: false)
        :param pulumi.Input[bool] self_heal: SelfHeal enables auto-syncing if  (default: false)
        """
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter
    def prune(self) -> Optional[pulumi.Input[bool]]:
        """
        Prune will prune resources automatically as part of automated sync (default: false)
        """
        return pulumi.get(self, "prune")

    @prune.setter
    def prune(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prune", value)

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[pulumi.Input[bool]]:
        """
        SelfHeal enables auto-syncing if  (default: false)
        """
        return pulumi.get(self, "self_heal")

    @self_heal.setter
    def self_heal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_heal", value)


@pulumi.input_type
class ApplicationSpecSyncPolicyRetryArgs:
    def __init__(__self__, *,
                 backoff: Optional[pulumi.Input['ApplicationSpecSyncPolicyRetryBackoffArgs']] = None,
                 limit: Optional[pulumi.Input[int]] = None):
        """
        Retry controls failed sync retry behavior
        :param pulumi.Input['ApplicationSpecSyncPolicyRetryBackoffArgs'] backoff: Backoff is a backoff strategy
        :param pulumi.Input[int] limit: Limit is the maximum number of attempts when retrying a container
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional[pulumi.Input['ApplicationSpecSyncPolicyRetryBackoffArgs']]:
        """
        Backoff is a backoff strategy
        """
        return pulumi.get(self, "backoff")

    @backoff.setter
    def backoff(self, value: Optional[pulumi.Input['ApplicationSpecSyncPolicyRetryBackoffArgs']]):
        pulumi.set(self, "backoff", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        Limit is the maximum number of attempts when retrying a container
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)


@pulumi.input_type
class ApplicationSpecSyncPolicyRetryBackoffArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None,
                 factor: Optional[pulumi.Input[int]] = None,
                 max_duration: Optional[pulumi.Input[str]] = None):
        """
        Backoff is a backoff strategy
        :param pulumi.Input[str] duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        :param pulumi.Input[int] factor: Factor is a factor to multiply the base duration after each failed retry
        :param pulumi.Input[str] max_duration: MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def factor(self) -> Optional[pulumi.Input[int]]:
        """
        Factor is a factor to multiply the base duration after each failed retry
        """
        return pulumi.get(self, "factor")

    @factor.setter
    def factor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "factor", value)

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[pulumi.Input[str]]:
        """
        MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        return pulumi.get(self, "max_duration")

    @max_duration.setter
    def max_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_duration", value)


@pulumi.input_type
class ApplicationStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusConditionsArgs']]]] = None,
                 health: Optional[pulumi.Input['ApplicationStatusHealthArgs']] = None,
                 history: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistoryArgs']]]] = None,
                 observed_at: Optional[pulumi.Input[str]] = None,
                 operation_state: Optional[pulumi.Input['ApplicationStatusOperationStateArgs']] = None,
                 reconciled_at: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusResourcesArgs']]]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 summary: Optional[pulumi.Input['ApplicationStatusSummaryArgs']] = None,
                 sync: Optional[pulumi.Input['ApplicationStatusSyncArgs']] = None):
        """
        ApplicationStatus contains information about application sync, health status
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistoryArgs']]] history: RevisionHistories is a array of history, oldest first and newest last
        :param pulumi.Input[str] observed_at: ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field
        :param pulumi.Input['ApplicationStatusOperationStateArgs'] operation_state: OperationState contains information about state of currently performing operation on application.
        :param pulumi.Input[str] reconciled_at: ReconciledAt indicates when the application state was reconciled using the latest git version
        :param pulumi.Input['ApplicationStatusSyncArgs'] sync: SyncStatus is a comparison result of application spec and deployed application.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if history is not None:
            pulumi.set(__self__, "history", history)
        if observed_at is not None:
            pulumi.set(__self__, "observed_at", observed_at)
        if operation_state is not None:
            pulumi.set(__self__, "operation_state", operation_state)
        if reconciled_at is not None:
            pulumi.set(__self__, "reconciled_at", reconciled_at)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if sync is not None:
            pulumi.set(__self__, "sync", sync)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusConditionsArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def health(self) -> Optional[pulumi.Input['ApplicationStatusHealthArgs']]:
        return pulumi.get(self, "health")

    @health.setter
    def health(self, value: Optional[pulumi.Input['ApplicationStatusHealthArgs']]):
        pulumi.set(self, "health", value)

    @property
    @pulumi.getter
    def history(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistoryArgs']]]]:
        """
        RevisionHistories is a array of history, oldest first and newest last
        """
        return pulumi.get(self, "history")

    @history.setter
    def history(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistoryArgs']]]]):
        pulumi.set(self, "history", value)

    @property
    @pulumi.getter(name="observedAt")
    def observed_at(self) -> Optional[pulumi.Input[str]]:
        """
        ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field
        """
        return pulumi.get(self, "observed_at")

    @observed_at.setter
    def observed_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "observed_at", value)

    @property
    @pulumi.getter(name="operationState")
    def operation_state(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateArgs']]:
        """
        OperationState contains information about state of currently performing operation on application.
        """
        return pulumi.get(self, "operation_state")

    @operation_state.setter
    def operation_state(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateArgs']]):
        pulumi.set(self, "operation_state", value)

    @property
    @pulumi.getter(name="reconciledAt")
    def reconciled_at(self) -> Optional[pulumi.Input[str]]:
        """
        ReconciledAt indicates when the application state was reconciled using the latest git version
        """
        return pulumi.get(self, "reconciled_at")

    @reconciled_at.setter
    def reconciled_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reconciled_at", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusResourcesArgs']]]]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusResourcesArgs']]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def summary(self) -> Optional[pulumi.Input['ApplicationStatusSummaryArgs']]:
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: Optional[pulumi.Input['ApplicationStatusSummaryArgs']]):
        pulumi.set(self, "summary", value)

    @property
    @pulumi.getter
    def sync(self) -> Optional[pulumi.Input['ApplicationStatusSyncArgs']]:
        """
        SyncStatus is a comparison result of application spec and deployed application.
        """
        return pulumi.get(self, "sync")

    @sync.setter
    def sync(self, value: Optional[pulumi.Input['ApplicationStatusSyncArgs']]):
        pulumi.set(self, "sync", value)


@pulumi.input_type
class ApplicationStatusConditionsArgs:
    def __init__(__self__, *,
                 message: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None):
        """
        ApplicationCondition contains details about current application condition
        :param pulumi.Input[str] message: Message contains human-readable message indicating details about condition
        :param pulumi.Input[str] type: Type is an application condition type
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the time the condition was first observed.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        Message contains human-readable message indicating details about condition
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type is an application condition type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the time the condition was first observed.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)


@pulumi.input_type
class ApplicationStatusHealthArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: Represents resource health status
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Represents resource health status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ApplicationStatusHistoryArgs:
    def __init__(__self__, *,
                 deployed_at: pulumi.Input[str],
                 id: pulumi.Input[int],
                 revision: pulumi.Input[str],
                 deploy_started_at: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input['ApplicationStatusHistorySourceArgs']] = None):
        """
        RevisionHistory contains information relevant to an application deployment
        :param pulumi.Input[str] deployed_at: DeployedAt holds the time the deployment completed
        :param pulumi.Input[int] id: ID is an auto incrementing identifier of the RevisionHistory
        :param pulumi.Input[str] revision: Revision holds the revision of the sync
        :param pulumi.Input[str] deploy_started_at: DeployStartedAt holds the time the deployment started
        :param pulumi.Input['ApplicationStatusHistorySourceArgs'] source: ApplicationSource contains information about github repository, path within repository and target application environment.
        """
        pulumi.set(__self__, "deployed_at", deployed_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "revision", revision)
        if deploy_started_at is not None:
            pulumi.set(__self__, "deploy_started_at", deploy_started_at)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="deployedAt")
    def deployed_at(self) -> pulumi.Input[str]:
        """
        DeployedAt holds the time the deployment completed
        """
        return pulumi.get(self, "deployed_at")

    @deployed_at.setter
    def deployed_at(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployed_at", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        """
        ID is an auto incrementing identifier of the RevisionHistory
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def revision(self) -> pulumi.Input[str]:
        """
        Revision holds the revision of the sync
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: pulumi.Input[str]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter(name="deployStartedAt")
    def deploy_started_at(self) -> Optional[pulumi.Input[str]]:
        """
        DeployStartedAt holds the time the deployment started
        """
        return pulumi.get(self, "deploy_started_at")

    @deploy_started_at.setter
    def deploy_started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_started_at", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['ApplicationStatusHistorySourceArgs']]:
        """
        ApplicationSource contains information about github repository, path within repository and target application environment.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['ApplicationStatusHistorySourceArgs']]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class ApplicationStatusHistorySourceArgs:
    def __init__(__self__, *,
                 repo_url: pulumi.Input[str],
                 chart: Optional[pulumi.Input[str]] = None,
                 directory: Optional[pulumi.Input['ApplicationStatusHistorySourceDirectoryArgs']] = None,
                 helm: Optional[pulumi.Input['ApplicationStatusHistorySourceHelmArgs']] = None,
                 ksonnet: Optional[pulumi.Input['ApplicationStatusHistorySourceKsonnetArgs']] = None,
                 kustomize: Optional[pulumi.Input['ApplicationStatusHistorySourceKustomizeArgs']] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 plugin: Optional[pulumi.Input['ApplicationStatusHistorySourcePluginArgs']] = None,
                 target_revision: Optional[pulumi.Input[str]] = None):
        """
        ApplicationSource contains information about github repository, path within repository and target application environment.
        :param pulumi.Input[str] repo_url: RepoURL is the repository URL of the application manifests
        :param pulumi.Input[str] chart: Chart is a Helm chart name
        :param pulumi.Input['ApplicationStatusHistorySourceDirectoryArgs'] directory: Directory holds path/directory specific options
        :param pulumi.Input['ApplicationStatusHistorySourceHelmArgs'] helm: Helm holds helm specific options
        :param pulumi.Input['ApplicationStatusHistorySourceKsonnetArgs'] ksonnet: Ksonnet holds ksonnet specific options
        :param pulumi.Input['ApplicationStatusHistorySourceKustomizeArgs'] kustomize: Kustomize holds kustomize specific options
        :param pulumi.Input[str] path: Path is a directory path within the Git repository
        :param pulumi.Input['ApplicationStatusHistorySourcePluginArgs'] plugin: ConfigManagementPlugin holds config management plugin specific options
        :param pulumi.Input[str] target_revision: TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> pulumi.Input[str]:
        """
        RepoURL is the repository URL of the application manifests
        """
        return pulumi.get(self, "repo_url")

    @repo_url.setter
    def repo_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo_url", value)

    @property
    @pulumi.getter
    def chart(self) -> Optional[pulumi.Input[str]]:
        """
        Chart is a Helm chart name
        """
        return pulumi.get(self, "chart")

    @chart.setter
    def chart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input['ApplicationStatusHistorySourceDirectoryArgs']]:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input['ApplicationStatusHistorySourceDirectoryArgs']]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def helm(self) -> Optional[pulumi.Input['ApplicationStatusHistorySourceHelmArgs']]:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @helm.setter
    def helm(self, value: Optional[pulumi.Input['ApplicationStatusHistorySourceHelmArgs']]):
        pulumi.set(self, "helm", value)

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional[pulumi.Input['ApplicationStatusHistorySourceKsonnetArgs']]:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @ksonnet.setter
    def ksonnet(self, value: Optional[pulumi.Input['ApplicationStatusHistorySourceKsonnetArgs']]):
        pulumi.set(self, "ksonnet", value)

    @property
    @pulumi.getter
    def kustomize(self) -> Optional[pulumi.Input['ApplicationStatusHistorySourceKustomizeArgs']]:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @kustomize.setter
    def kustomize(self, value: Optional[pulumi.Input['ApplicationStatusHistorySourceKustomizeArgs']]):
        pulumi.set(self, "kustomize", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path is a directory path within the Git repository
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def plugin(self) -> Optional[pulumi.Input['ApplicationStatusHistorySourcePluginArgs']]:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @plugin.setter
    def plugin(self, value: Optional[pulumi.Input['ApplicationStatusHistorySourcePluginArgs']]):
        pulumi.set(self, "plugin", value)

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[pulumi.Input[str]]:
        """
        TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        return pulumi.get(self, "target_revision")

    @target_revision.setter
    def target_revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_revision", value)


@pulumi.input_type
class ApplicationStatusHistorySourceDirectoryArgs:
    def __init__(__self__, *,
                 jsonnet: Optional[pulumi.Input['ApplicationStatusHistorySourceDirectoryJsonnetArgs']] = None,
                 recurse: Optional[pulumi.Input[bool]] = None):
        """
        Directory holds path/directory specific options
        :param pulumi.Input['ApplicationStatusHistorySourceDirectoryJsonnetArgs'] jsonnet: ApplicationSourceJsonnet holds jsonnet specific options
        """
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional[pulumi.Input['ApplicationStatusHistorySourceDirectoryJsonnetArgs']]:
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        """
        return pulumi.get(self, "jsonnet")

    @jsonnet.setter
    def jsonnet(self, value: Optional[pulumi.Input['ApplicationStatusHistorySourceDirectoryJsonnetArgs']]):
        pulumi.set(self, "jsonnet", value)

    @property
    @pulumi.getter
    def recurse(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recurse")

    @recurse.setter
    def recurse(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recurse", value)


@pulumi.input_type
class ApplicationStatusHistorySourceDirectoryJsonnetArgs:
    def __init__(__self__, *,
                 ext_vars: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArgs']]]] = None,
                 libs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tlas: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceDirectoryJsonnetTlasArgs']]]] = None):
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArgs']]] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param pulumi.Input[Sequence[pulumi.Input[str]]] libs: Additional library search dirs
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceDirectoryJsonnetTlasArgs']]] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArgs']]]]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @ext_vars.setter
    def ext_vars(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArgs']]]]):
        pulumi.set(self, "ext_vars", value)

    @property
    @pulumi.getter
    def libs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @libs.setter
    def libs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "libs", value)

    @property
    @pulumi.getter
    def tlas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceDirectoryJsonnetTlasArgs']]]]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")

    @tlas.setter
    def tlas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceDirectoryJsonnetTlasArgs']]]]):
        pulumi.set(self, "tlas", value)


@pulumi.input_type
class ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 code: Optional[pulumi.Input[bool]] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class ApplicationStatusHistorySourceDirectoryJsonnetTlasArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 code: Optional[pulumi.Input[bool]] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class ApplicationStatusHistorySourceHelmArgs:
    def __init__(__self__, *,
                 file_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceHelmFileParametersArgs']]]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceHelmParametersArgs']]]] = None,
                 release_name: Optional[pulumi.Input[str]] = None,
                 value_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 values: Optional[pulumi.Input[str]] = None):
        """
        Helm holds helm specific options
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceHelmFileParametersArgs']]] file_parameters: FileParameters are file parameters to the helm template
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceHelmParametersArgs']]] parameters: Parameters are parameters to the helm template
        :param pulumi.Input[str] release_name: The Helm release name. If omitted it will use the application name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param pulumi.Input[str] values: Values is Helm values, typically defined as a block
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceHelmFileParametersArgs']]]]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @file_parameters.setter
    def file_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceHelmFileParametersArgs']]]]):
        pulumi.set(self, "file_parameters", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceHelmParametersArgs']]]]:
        """
        Parameters are parameters to the helm template
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceHelmParametersArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Helm release name. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @release_name.setter
    def release_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_name", value)

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @value_files.setter
    def value_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "value_files", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[str]]:
        """
        Values is Helm values, typically defined as a block
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ApplicationStatusHistorySourceHelmFileParametersArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        HelmFileParameter is a file parameter to a helm template
        :param pulumi.Input[str] name: Name is the name of the helm parameter
        :param pulumi.Input[str] path: Path is the path value for the helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path is the path value for the helm parameter
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class ApplicationStatusHistorySourceHelmParametersArgs:
    def __init__(__self__, *,
                 force_string: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        HelmParameter is a parameter to a helm template
        :param pulumi.Input[bool] force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param pulumi.Input[str] name: Name is the name of the helm parameter
        :param pulumi.Input[str] value: Value is the value for the helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[pulumi.Input[bool]]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @force_string.setter
    def force_string(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_string", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the value for the helm parameter
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationStatusHistorySourceKsonnetArgs:
    def __init__(__self__, *,
                 environment: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceKsonnetParametersArgs']]]] = None):
        """
        Ksonnet holds ksonnet specific options
        :param pulumi.Input[str] environment: Environment is a ksonnet application environment name
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceKsonnetParametersArgs']]] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceKsonnetParametersArgs']]]]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourceKsonnetParametersArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class ApplicationStatusHistorySourceKsonnetParametersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 component: Optional[pulumi.Input[str]] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)


@pulumi.input_type
class ApplicationStatusHistorySourceKustomizeArgs:
    def __init__(__self__, *,
                 common_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 name_suffix: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Kustomize holds kustomize specific options
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] common_labels: CommonLabels adds additional kustomize commonLabels
        :param pulumi.Input[Sequence[pulumi.Input[str]]] images: Images are kustomize image overrides
        :param pulumi.Input[str] name_prefix: NamePrefix is a prefix appended to resources for kustomize apps
        :param pulumi.Input[str] name_suffix: NameSuffix is a suffix appended to resources for kustomize apps
        :param pulumi.Input[str] version: Version contains optional Kustomize version
        """
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        CommonLabels adds additional kustomize commonLabels
        """
        return pulumi.get(self, "common_labels")

    @common_labels.setter
    def common_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "common_labels", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Images are kustomize image overrides
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        NamePrefix is a prefix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        NameSuffix is a suffix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @name_suffix.setter
    def name_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_suffix", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version contains optional Kustomize version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ApplicationStatusHistorySourcePluginArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourcePluginEnvArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourcePluginEnvArgs']]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusHistorySourcePluginEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ApplicationStatusHistorySourcePluginEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: the name, usually uppercase
        :param pulumi.Input[str] value: the value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        the name, usually uppercase
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        the value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationStatusOperationStateArgs:
    def __init__(__self__, *,
                 operation: pulumi.Input['ApplicationStatusOperationStateOperationArgs'],
                 phase: pulumi.Input[str],
                 started_at: pulumi.Input[str],
                 finished_at: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None,
                 sync_result: Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultArgs']] = None):
        """
        OperationState contains information about state of currently performing operation on application.
        :param pulumi.Input['ApplicationStatusOperationStateOperationArgs'] operation: Operation is the original requested operation
        :param pulumi.Input[str] phase: Phase is the current phase of the operation
        :param pulumi.Input[str] started_at: StartedAt contains time of operation start
        :param pulumi.Input[str] finished_at: FinishedAt contains time of operation completion
        :param pulumi.Input[str] message: Message hold any pertinent messages when attempting to perform operation (typically errors).
        :param pulumi.Input[int] retry_count: RetryCount contains time of operation retries
        :param pulumi.Input['ApplicationStatusOperationStateSyncResultArgs'] sync_result: SyncResult is the result of a Sync operation
        """
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "started_at", started_at)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if sync_result is not None:
            pulumi.set(__self__, "sync_result", sync_result)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input['ApplicationStatusOperationStateOperationArgs']:
        """
        Operation is the original requested operation
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input['ApplicationStatusOperationStateOperationArgs']):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def phase(self) -> pulumi.Input[str]:
        """
        Phase is the current phase of the operation
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: pulumi.Input[str]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> pulumi.Input[str]:
        """
        StartedAt contains time of operation start
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: pulumi.Input[str]):
        pulumi.set(self, "started_at", value)

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[pulumi.Input[str]]:
        """
        FinishedAt contains time of operation completion
        """
        return pulumi.get(self, "finished_at")

    @finished_at.setter
    def finished_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "finished_at", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message hold any pertinent messages when attempting to perform operation (typically errors).
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[int]]:
        """
        RetryCount contains time of operation retries
        """
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_count", value)

    @property
    @pulumi.getter(name="syncResult")
    def sync_result(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultArgs']]:
        """
        SyncResult is the result of a Sync operation
        """
        return pulumi.get(self, "sync_result")

    @sync_result.setter
    def sync_result(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultArgs']]):
        pulumi.set(self, "sync_result", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationArgs:
    def __init__(__self__, *,
                 info: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationInfoArgs']]]] = None,
                 initiated_by: Optional[pulumi.Input['ApplicationStatusOperationStateOperationInitiatedByArgs']] = None,
                 retry: Optional[pulumi.Input['ApplicationStatusOperationStateOperationRetryArgs']] = None,
                 sync: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncArgs']] = None):
        """
        Operation is the original requested operation
        :param pulumi.Input['ApplicationStatusOperationStateOperationInitiatedByArgs'] initiated_by: OperationInitiator holds information about the operation initiator
        :param pulumi.Input['ApplicationStatusOperationStateOperationRetryArgs'] retry: Retry controls failed sync retry behavior
        :param pulumi.Input['ApplicationStatusOperationStateOperationSyncArgs'] sync: SyncOperation contains sync operation details.
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if initiated_by is not None:
            pulumi.set(__self__, "initiated_by", initiated_by)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync is not None:
            pulumi.set(__self__, "sync", sync)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationInfoArgs']]]]:
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationInfoArgs']]]]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter(name="initiatedBy")
    def initiated_by(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateOperationInitiatedByArgs']]:
        """
        OperationInitiator holds information about the operation initiator
        """
        return pulumi.get(self, "initiated_by")

    @initiated_by.setter
    def initiated_by(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateOperationInitiatedByArgs']]):
        pulumi.set(self, "initiated_by", value)

    @property
    @pulumi.getter
    def retry(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateOperationRetryArgs']]:
        """
        Retry controls failed sync retry behavior
        """
        return pulumi.get(self, "retry")

    @retry.setter
    def retry(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateOperationRetryArgs']]):
        pulumi.set(self, "retry", value)

    @property
    @pulumi.getter
    def sync(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncArgs']]:
        """
        SyncOperation contains sync operation details.
        """
        return pulumi.get(self, "sync")

    @sync.setter
    def sync(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncArgs']]):
        pulumi.set(self, "sync", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationInfoArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationInitiatedByArgs:
    def __init__(__self__, *,
                 automated: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        OperationInitiator holds information about the operation initiator
        :param pulumi.Input[bool] automated: Automated is set to true if operation was initiated automatically by the application controller.
        :param pulumi.Input[str] username: Name of a user who started operation.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def automated(self) -> Optional[pulumi.Input[bool]]:
        """
        Automated is set to true if operation was initiated automatically by the application controller.
        """
        return pulumi.get(self, "automated")

    @automated.setter
    def automated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automated", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a user who started operation.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationRetryArgs:
    def __init__(__self__, *,
                 backoff: Optional[pulumi.Input['ApplicationStatusOperationStateOperationRetryBackoffArgs']] = None,
                 limit: Optional[pulumi.Input[int]] = None):
        """
        Retry controls failed sync retry behavior
        :param pulumi.Input['ApplicationStatusOperationStateOperationRetryBackoffArgs'] backoff: Backoff is a backoff strategy
        :param pulumi.Input[int] limit: Limit is the maximum number of attempts when retrying a container
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateOperationRetryBackoffArgs']]:
        """
        Backoff is a backoff strategy
        """
        return pulumi.get(self, "backoff")

    @backoff.setter
    def backoff(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateOperationRetryBackoffArgs']]):
        pulumi.set(self, "backoff", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        Limit is the maximum number of attempts when retrying a container
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationRetryBackoffArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None,
                 factor: Optional[pulumi.Input[int]] = None,
                 max_duration: Optional[pulumi.Input[str]] = None):
        """
        Backoff is a backoff strategy
        :param pulumi.Input[str] duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        :param pulumi.Input[int] factor: Factor is a factor to multiply the base duration after each failed retry
        :param pulumi.Input[str] max_duration: MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def factor(self) -> Optional[pulumi.Input[int]]:
        """
        Factor is a factor to multiply the base duration after each failed retry
        """
        return pulumi.get(self, "factor")

    @factor.setter
    def factor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "factor", value)

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[pulumi.Input[str]]:
        """
        MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        return pulumi.get(self, "max_duration")

    @max_duration.setter
    def max_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_duration", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncArgs:
    def __init__(__self__, *,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 manifests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 prune: Optional[pulumi.Input[bool]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncResourcesArgs']]]] = None,
                 revision: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceArgs']] = None,
                 sync_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sync_strategy: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSyncStrategyArgs']] = None):
        """
        SyncOperation contains sync operation details.
        :param pulumi.Input[bool] dry_run: DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
        :param pulumi.Input[Sequence[pulumi.Input[str]]] manifests: Manifests is an optional field that overrides sync source with a local directory for development
        :param pulumi.Input[bool] prune: Prune deletes resources that are no longer tracked in git
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncResourcesArgs']]] resources: Resources describes which resources to sync
        :param pulumi.Input[str] revision: Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
        :param pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceArgs'] source: Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sync_options: SyncOptions provide per-sync sync-options, e.g. Validate=false
        :param pulumi.Input['ApplicationStatusOperationStateOperationSyncSyncStrategyArgs'] sync_strategy: SyncStrategy describes how to perform the sync
        """
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if manifests is not None:
            pulumi.set(__self__, "manifests", manifests)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)
        if sync_strategy is not None:
            pulumi.set(__self__, "sync_strategy", sync_strategy)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter
    def manifests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Manifests is an optional field that overrides sync source with a local directory for development
        """
        return pulumi.get(self, "manifests")

    @manifests.setter
    def manifests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "manifests", value)

    @property
    @pulumi.getter
    def prune(self) -> Optional[pulumi.Input[bool]]:
        """
        Prune deletes resources that are no longer tracked in git
        """
        return pulumi.get(self, "prune")

    @prune.setter
    def prune(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prune", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncResourcesArgs']]]]:
        """
        Resources describes which resources to sync
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncResourcesArgs']]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[str]]:
        """
        Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceArgs']]:
        """
        Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        SyncOptions provide per-sync sync-options, e.g. Validate=false
        """
        return pulumi.get(self, "sync_options")

    @sync_options.setter
    def sync_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sync_options", value)

    @property
    @pulumi.getter(name="syncStrategy")
    def sync_strategy(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSyncStrategyArgs']]:
        """
        SyncStrategy describes how to perform the sync
        """
        return pulumi.get(self, "sync_strategy")

    @sync_strategy.setter
    def sync_strategy(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSyncStrategyArgs']]):
        pulumi.set(self, "sync_strategy", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncResourcesArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SyncOperationResource contains resources to sync.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncSourceArgs:
    def __init__(__self__, *,
                 repo_url: pulumi.Input[str],
                 chart: Optional[pulumi.Input[str]] = None,
                 directory: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs']] = None,
                 helm: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceHelmArgs']] = None,
                 ksonnet: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs']] = None,
                 kustomize: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs']] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 plugin: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourcePluginArgs']] = None,
                 target_revision: Optional[pulumi.Input[str]] = None):
        """
        Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
        :param pulumi.Input[str] repo_url: RepoURL is the repository URL of the application manifests
        :param pulumi.Input[str] chart: Chart is a Helm chart name
        :param pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs'] directory: Directory holds path/directory specific options
        :param pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceHelmArgs'] helm: Helm holds helm specific options
        :param pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs'] ksonnet: Ksonnet holds ksonnet specific options
        :param pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs'] kustomize: Kustomize holds kustomize specific options
        :param pulumi.Input[str] path: Path is a directory path within the Git repository
        :param pulumi.Input['ApplicationStatusOperationStateOperationSyncSourcePluginArgs'] plugin: ConfigManagementPlugin holds config management plugin specific options
        :param pulumi.Input[str] target_revision: TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> pulumi.Input[str]:
        """
        RepoURL is the repository URL of the application manifests
        """
        return pulumi.get(self, "repo_url")

    @repo_url.setter
    def repo_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo_url", value)

    @property
    @pulumi.getter
    def chart(self) -> Optional[pulumi.Input[str]]:
        """
        Chart is a Helm chart name
        """
        return pulumi.get(self, "chart")

    @chart.setter
    def chart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs']]:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs']]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def helm(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceHelmArgs']]:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @helm.setter
    def helm(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceHelmArgs']]):
        pulumi.set(self, "helm", value)

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs']]:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @ksonnet.setter
    def ksonnet(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs']]):
        pulumi.set(self, "ksonnet", value)

    @property
    @pulumi.getter
    def kustomize(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs']]:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @kustomize.setter
    def kustomize(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs']]):
        pulumi.set(self, "kustomize", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path is a directory path within the Git repository
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def plugin(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourcePluginArgs']]:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @plugin.setter
    def plugin(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourcePluginArgs']]):
        pulumi.set(self, "plugin", value)

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[pulumi.Input[str]]:
        """
        TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        return pulumi.get(self, "target_revision")

    @target_revision.setter
    def target_revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_revision", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs:
    def __init__(__self__, *,
                 jsonnet: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs']] = None,
                 recurse: Optional[pulumi.Input[bool]] = None):
        """
        Directory holds path/directory specific options
        :param pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs'] jsonnet: ApplicationSourceJsonnet holds jsonnet specific options
        """
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs']]:
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        """
        return pulumi.get(self, "jsonnet")

    @jsonnet.setter
    def jsonnet(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs']]):
        pulumi.set(self, "jsonnet", value)

    @property
    @pulumi.getter
    def recurse(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recurse")

    @recurse.setter
    def recurse(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recurse", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs:
    def __init__(__self__, *,
                 ext_vars: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArgs']]]] = None,
                 libs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tlas: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArgs']]]] = None):
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArgs']]] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param pulumi.Input[Sequence[pulumi.Input[str]]] libs: Additional library search dirs
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArgs']]] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArgs']]]]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @ext_vars.setter
    def ext_vars(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArgs']]]]):
        pulumi.set(self, "ext_vars", value)

    @property
    @pulumi.getter
    def libs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @libs.setter
    def libs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "libs", value)

    @property
    @pulumi.getter
    def tlas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArgs']]]]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")

    @tlas.setter
    def tlas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArgs']]]]):
        pulumi.set(self, "tlas", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 code: Optional[pulumi.Input[bool]] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 code: Optional[pulumi.Input[bool]] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncSourceHelmArgs:
    def __init__(__self__, *,
                 file_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArgs']]]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceHelmParametersArgs']]]] = None,
                 release_name: Optional[pulumi.Input[str]] = None,
                 value_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 values: Optional[pulumi.Input[str]] = None):
        """
        Helm holds helm specific options
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArgs']]] file_parameters: FileParameters are file parameters to the helm template
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceHelmParametersArgs']]] parameters: Parameters are parameters to the helm template
        :param pulumi.Input[str] release_name: The Helm release name. If omitted it will use the application name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param pulumi.Input[str] values: Values is Helm values, typically defined as a block
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArgs']]]]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @file_parameters.setter
    def file_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArgs']]]]):
        pulumi.set(self, "file_parameters", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceHelmParametersArgs']]]]:
        """
        Parameters are parameters to the helm template
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceHelmParametersArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Helm release name. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @release_name.setter
    def release_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_name", value)

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @value_files.setter
    def value_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "value_files", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[str]]:
        """
        Values is Helm values, typically defined as a block
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        HelmFileParameter is a file parameter to a helm template
        :param pulumi.Input[str] name: Name is the name of the helm parameter
        :param pulumi.Input[str] path: Path is the path value for the helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path is the path value for the helm parameter
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncSourceHelmParametersArgs:
    def __init__(__self__, *,
                 force_string: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        HelmParameter is a parameter to a helm template
        :param pulumi.Input[bool] force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param pulumi.Input[str] name: Name is the name of the helm parameter
        :param pulumi.Input[str] value: Value is the value for the helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[pulumi.Input[bool]]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @force_string.setter
    def force_string(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_string", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the value for the helm parameter
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs:
    def __init__(__self__, *,
                 environment: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArgs']]]] = None):
        """
        Ksonnet holds ksonnet specific options
        :param pulumi.Input[str] environment: Environment is a ksonnet application environment name
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArgs']]] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArgs']]]]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 component: Optional[pulumi.Input[str]] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs:
    def __init__(__self__, *,
                 common_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 name_suffix: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Kustomize holds kustomize specific options
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] common_labels: CommonLabels adds additional kustomize commonLabels
        :param pulumi.Input[Sequence[pulumi.Input[str]]] images: Images are kustomize image overrides
        :param pulumi.Input[str] name_prefix: NamePrefix is a prefix appended to resources for kustomize apps
        :param pulumi.Input[str] name_suffix: NameSuffix is a suffix appended to resources for kustomize apps
        :param pulumi.Input[str] version: Version contains optional Kustomize version
        """
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        CommonLabels adds additional kustomize commonLabels
        """
        return pulumi.get(self, "common_labels")

    @common_labels.setter
    def common_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "common_labels", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Images are kustomize image overrides
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        NamePrefix is a prefix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        NameSuffix is a suffix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @name_suffix.setter
    def name_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_suffix", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version contains optional Kustomize version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncSourcePluginArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourcePluginEnvArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourcePluginEnvArgs']]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateOperationSyncSourcePluginEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncSourcePluginEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: the name, usually uppercase
        :param pulumi.Input[str] value: the value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        the name, usually uppercase
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        the value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncSyncStrategyArgs:
    def __init__(__self__, *,
                 apply: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs']] = None,
                 hook: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs']] = None):
        """
        SyncStrategy describes how to perform the sync
        :param pulumi.Input['ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs'] apply: Apply wil perform a `kubectl apply` to perform the sync.
        :param pulumi.Input['ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs'] hook: Hook will submit any referenced resources to perform the sync. This is the default strategy
        """
        if apply is not None:
            pulumi.set(__self__, "apply", apply)
        if hook is not None:
            pulumi.set(__self__, "hook", hook)

    @property
    @pulumi.getter
    def apply(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs']]:
        """
        Apply wil perform a `kubectl apply` to perform the sync.
        """
        return pulumi.get(self, "apply")

    @apply.setter
    def apply(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs']]):
        pulumi.set(self, "apply", value)

    @property
    @pulumi.getter
    def hook(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs']]:
        """
        Hook will submit any referenced resources to perform the sync. This is the default strategy
        """
        return pulumi.get(self, "hook")

    @hook.setter
    def hook(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs']]):
        pulumi.set(self, "hook", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs:
    def __init__(__self__, *,
                 force: Optional[pulumi.Input[bool]] = None):
        """
        Apply wil perform a `kubectl apply` to perform the sync.
        :param pulumi.Input[bool] force: Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        if force is not None:
            pulumi.set(__self__, "force", force)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)


@pulumi.input_type
class ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs:
    def __init__(__self__, *,
                 force: Optional[pulumi.Input[bool]] = None):
        """
        Hook will submit any referenced resources to perform the sync. This is the default strategy
        :param pulumi.Input[bool] force: Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        if force is not None:
            pulumi.set(__self__, "force", force)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)


@pulumi.input_type
class ApplicationStatusOperationStateSyncResultArgs:
    def __init__(__self__, *,
                 revision: pulumi.Input[str],
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultResourcesArgs']]]] = None,
                 source: Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceArgs']] = None):
        """
        SyncResult is the result of a Sync operation
        :param pulumi.Input[str] revision: Revision holds the revision of the sync
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultResourcesArgs']]] resources: Resources holds the sync result of each individual resource
        :param pulumi.Input['ApplicationStatusOperationStateSyncResultSourceArgs'] source: Source records the application source information of the sync, used for comparing auto-sync
        """
        pulumi.set(__self__, "revision", revision)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def revision(self) -> pulumi.Input[str]:
        """
        Revision holds the revision of the sync
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: pulumi.Input[str]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultResourcesArgs']]]]:
        """
        Resources holds the sync result of each individual resource
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultResourcesArgs']]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceArgs']]:
        """
        Source records the application source information of the sync, used for comparing auto-sync
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceArgs']]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class ApplicationStatusOperationStateSyncResultResourcesArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 version: pulumi.Input[str],
                 hook_phase: Optional[pulumi.Input[str]] = None,
                 hook_type: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sync_phase: Optional[pulumi.Input[str]] = None):
        """
        ResourceResult holds the operation result details of a specific resource
        :param pulumi.Input[str] hook_phase: the state of any operation associated with this resource OR hook note: can contain values for non-hook resources
        :param pulumi.Input[str] hook_type: the type of the hook, empty for non-hook resources
        :param pulumi.Input[str] message: message for the last sync OR operation
        :param pulumi.Input[str] status: the final result of the sync, this is be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
        :param pulumi.Input[str] sync_phase: indicates the particular phase of the sync that this is for
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "version", version)
        if hook_phase is not None:
            pulumi.set(__self__, "hook_phase", hook_phase)
        if hook_type is not None:
            pulumi.set(__self__, "hook_type", hook_type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sync_phase is not None:
            pulumi.set(__self__, "sync_phase", sync_phase)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="hookPhase")
    def hook_phase(self) -> Optional[pulumi.Input[str]]:
        """
        the state of any operation associated with this resource OR hook note: can contain values for non-hook resources
        """
        return pulumi.get(self, "hook_phase")

    @hook_phase.setter
    def hook_phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hook_phase", value)

    @property
    @pulumi.getter(name="hookType")
    def hook_type(self) -> Optional[pulumi.Input[str]]:
        """
        the type of the hook, empty for non-hook resources
        """
        return pulumi.get(self, "hook_type")

    @hook_type.setter
    def hook_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hook_type", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        message for the last sync OR operation
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        the final result of the sync, this is be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="syncPhase")
    def sync_phase(self) -> Optional[pulumi.Input[str]]:
        """
        indicates the particular phase of the sync that this is for
        """
        return pulumi.get(self, "sync_phase")

    @sync_phase.setter
    def sync_phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_phase", value)


@pulumi.input_type
class ApplicationStatusOperationStateSyncResultSourceArgs:
    def __init__(__self__, *,
                 repo_url: pulumi.Input[str],
                 chart: Optional[pulumi.Input[str]] = None,
                 directory: Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceDirectoryArgs']] = None,
                 helm: Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceHelmArgs']] = None,
                 ksonnet: Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceKsonnetArgs']] = None,
                 kustomize: Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceKustomizeArgs']] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 plugin: Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourcePluginArgs']] = None,
                 target_revision: Optional[pulumi.Input[str]] = None):
        """
        Source records the application source information of the sync, used for comparing auto-sync
        :param pulumi.Input[str] repo_url: RepoURL is the repository URL of the application manifests
        :param pulumi.Input[str] chart: Chart is a Helm chart name
        :param pulumi.Input['ApplicationStatusOperationStateSyncResultSourceDirectoryArgs'] directory: Directory holds path/directory specific options
        :param pulumi.Input['ApplicationStatusOperationStateSyncResultSourceHelmArgs'] helm: Helm holds helm specific options
        :param pulumi.Input['ApplicationStatusOperationStateSyncResultSourceKsonnetArgs'] ksonnet: Ksonnet holds ksonnet specific options
        :param pulumi.Input['ApplicationStatusOperationStateSyncResultSourceKustomizeArgs'] kustomize: Kustomize holds kustomize specific options
        :param pulumi.Input[str] path: Path is a directory path within the Git repository
        :param pulumi.Input['ApplicationStatusOperationStateSyncResultSourcePluginArgs'] plugin: ConfigManagementPlugin holds config management plugin specific options
        :param pulumi.Input[str] target_revision: TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> pulumi.Input[str]:
        """
        RepoURL is the repository URL of the application manifests
        """
        return pulumi.get(self, "repo_url")

    @repo_url.setter
    def repo_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo_url", value)

    @property
    @pulumi.getter
    def chart(self) -> Optional[pulumi.Input[str]]:
        """
        Chart is a Helm chart name
        """
        return pulumi.get(self, "chart")

    @chart.setter
    def chart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceDirectoryArgs']]:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceDirectoryArgs']]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def helm(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceHelmArgs']]:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @helm.setter
    def helm(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceHelmArgs']]):
        pulumi.set(self, "helm", value)

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceKsonnetArgs']]:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @ksonnet.setter
    def ksonnet(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceKsonnetArgs']]):
        pulumi.set(self, "ksonnet", value)

    @property
    @pulumi.getter
    def kustomize(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceKustomizeArgs']]:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @kustomize.setter
    def kustomize(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceKustomizeArgs']]):
        pulumi.set(self, "kustomize", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path is a directory path within the Git repository
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def plugin(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourcePluginArgs']]:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @plugin.setter
    def plugin(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourcePluginArgs']]):
        pulumi.set(self, "plugin", value)

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[pulumi.Input[str]]:
        """
        TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        return pulumi.get(self, "target_revision")

    @target_revision.setter
    def target_revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_revision", value)


@pulumi.input_type
class ApplicationStatusOperationStateSyncResultSourceDirectoryArgs:
    def __init__(__self__, *,
                 jsonnet: Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs']] = None,
                 recurse: Optional[pulumi.Input[bool]] = None):
        """
        Directory holds path/directory specific options
        :param pulumi.Input['ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs'] jsonnet: ApplicationSourceJsonnet holds jsonnet specific options
        """
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs']]:
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        """
        return pulumi.get(self, "jsonnet")

    @jsonnet.setter
    def jsonnet(self, value: Optional[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs']]):
        pulumi.set(self, "jsonnet", value)

    @property
    @pulumi.getter
    def recurse(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recurse")

    @recurse.setter
    def recurse(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recurse", value)


@pulumi.input_type
class ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs:
    def __init__(__self__, *,
                 ext_vars: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArgs']]]] = None,
                 libs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tlas: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArgs']]]] = None):
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArgs']]] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param pulumi.Input[Sequence[pulumi.Input[str]]] libs: Additional library search dirs
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArgs']]] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArgs']]]]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @ext_vars.setter
    def ext_vars(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArgs']]]]):
        pulumi.set(self, "ext_vars", value)

    @property
    @pulumi.getter
    def libs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @libs.setter
    def libs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "libs", value)

    @property
    @pulumi.getter
    def tlas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArgs']]]]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")

    @tlas.setter
    def tlas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArgs']]]]):
        pulumi.set(self, "tlas", value)


@pulumi.input_type
class ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 code: Optional[pulumi.Input[bool]] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 code: Optional[pulumi.Input[bool]] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class ApplicationStatusOperationStateSyncResultSourceHelmArgs:
    def __init__(__self__, *,
                 file_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArgs']]]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceHelmParametersArgs']]]] = None,
                 release_name: Optional[pulumi.Input[str]] = None,
                 value_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 values: Optional[pulumi.Input[str]] = None):
        """
        Helm holds helm specific options
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArgs']]] file_parameters: FileParameters are file parameters to the helm template
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceHelmParametersArgs']]] parameters: Parameters are parameters to the helm template
        :param pulumi.Input[str] release_name: The Helm release name. If omitted it will use the application name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param pulumi.Input[str] values: Values is Helm values, typically defined as a block
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArgs']]]]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @file_parameters.setter
    def file_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArgs']]]]):
        pulumi.set(self, "file_parameters", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceHelmParametersArgs']]]]:
        """
        Parameters are parameters to the helm template
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceHelmParametersArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Helm release name. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @release_name.setter
    def release_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_name", value)

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @value_files.setter
    def value_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "value_files", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[str]]:
        """
        Values is Helm values, typically defined as a block
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        HelmFileParameter is a file parameter to a helm template
        :param pulumi.Input[str] name: Name is the name of the helm parameter
        :param pulumi.Input[str] path: Path is the path value for the helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path is the path value for the helm parameter
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class ApplicationStatusOperationStateSyncResultSourceHelmParametersArgs:
    def __init__(__self__, *,
                 force_string: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        HelmParameter is a parameter to a helm template
        :param pulumi.Input[bool] force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param pulumi.Input[str] name: Name is the name of the helm parameter
        :param pulumi.Input[str] value: Value is the value for the helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[pulumi.Input[bool]]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @force_string.setter
    def force_string(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_string", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the value for the helm parameter
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationStatusOperationStateSyncResultSourceKsonnetArgs:
    def __init__(__self__, *,
                 environment: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArgs']]]] = None):
        """
        Ksonnet holds ksonnet specific options
        :param pulumi.Input[str] environment: Environment is a ksonnet application environment name
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArgs']]] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArgs']]]]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 component: Optional[pulumi.Input[str]] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)


@pulumi.input_type
class ApplicationStatusOperationStateSyncResultSourceKustomizeArgs:
    def __init__(__self__, *,
                 common_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 name_suffix: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Kustomize holds kustomize specific options
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] common_labels: CommonLabels adds additional kustomize commonLabels
        :param pulumi.Input[Sequence[pulumi.Input[str]]] images: Images are kustomize image overrides
        :param pulumi.Input[str] name_prefix: NamePrefix is a prefix appended to resources for kustomize apps
        :param pulumi.Input[str] name_suffix: NameSuffix is a suffix appended to resources for kustomize apps
        :param pulumi.Input[str] version: Version contains optional Kustomize version
        """
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        CommonLabels adds additional kustomize commonLabels
        """
        return pulumi.get(self, "common_labels")

    @common_labels.setter
    def common_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "common_labels", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Images are kustomize image overrides
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        NamePrefix is a prefix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        NameSuffix is a suffix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @name_suffix.setter
    def name_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_suffix", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version contains optional Kustomize version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ApplicationStatusOperationStateSyncResultSourcePluginArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourcePluginEnvArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourcePluginEnvArgs']]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusOperationStateSyncResultSourcePluginEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ApplicationStatusOperationStateSyncResultSourcePluginEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: the name, usually uppercase
        :param pulumi.Input[str] value: the value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        the name, usually uppercase
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        the value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationStatusResourcesArgs:
    def __init__(__self__, *,
                 group: Optional[pulumi.Input[str]] = None,
                 health: Optional[pulumi.Input['ApplicationStatusResourcesHealthArgs']] = None,
                 hook: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 requires_pruning: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        ResourceStatus holds the current sync and health status of a resource
        :param pulumi.Input[str] status: SyncStatusCode is a type which represents possible comparison results
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if hook is not None:
            pulumi.set(__self__, "hook", hook)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if requires_pruning is not None:
            pulumi.set(__self__, "requires_pruning", requires_pruning)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def health(self) -> Optional[pulumi.Input['ApplicationStatusResourcesHealthArgs']]:
        return pulumi.get(self, "health")

    @health.setter
    def health(self, value: Optional[pulumi.Input['ApplicationStatusResourcesHealthArgs']]):
        pulumi.set(self, "health", value)

    @property
    @pulumi.getter
    def hook(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hook")

    @hook.setter
    def hook(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hook", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="requiresPruning")
    def requires_pruning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "requires_pruning")

    @requires_pruning.setter
    def requires_pruning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "requires_pruning", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        SyncStatusCode is a type which represents possible comparison results
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ApplicationStatusResourcesHealthArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: Represents resource health status
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Represents resource health status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ApplicationStatusSummaryArgs:
    def __init__(__self__, *,
                 external_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] external_urls: ExternalURLs holds all external URLs of application child resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] images: Images holds all images of application child resources.
        """
        if external_urls is not None:
            pulumi.set(__self__, "external_urls", external_urls)
        if images is not None:
            pulumi.set(__self__, "images", images)

    @property
    @pulumi.getter(name="externalURLs")
    def external_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ExternalURLs holds all external URLs of application child resources.
        """
        return pulumi.get(self, "external_urls")

    @external_urls.setter
    def external_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_urls", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Images holds all images of application child resources.
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "images", value)


@pulumi.input_type
class ApplicationStatusSyncArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 compared_to: Optional[pulumi.Input['ApplicationStatusSyncComparedToArgs']] = None,
                 revision: Optional[pulumi.Input[str]] = None):
        """
        SyncStatus is a comparison result of application spec and deployed application.
        :param pulumi.Input[str] status: SyncStatusCode is a type which represents possible comparison results
        :param pulumi.Input['ApplicationStatusSyncComparedToArgs'] compared_to: ComparedTo contains application source and target which was used for resources comparison
        """
        pulumi.set(__self__, "status", status)
        if compared_to is not None:
            pulumi.set(__self__, "compared_to", compared_to)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        SyncStatusCode is a type which represents possible comparison results
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="comparedTo")
    def compared_to(self) -> Optional[pulumi.Input['ApplicationStatusSyncComparedToArgs']]:
        """
        ComparedTo contains application source and target which was used for resources comparison
        """
        return pulumi.get(self, "compared_to")

    @compared_to.setter
    def compared_to(self, value: Optional[pulumi.Input['ApplicationStatusSyncComparedToArgs']]):
        pulumi.set(self, "compared_to", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision", value)


@pulumi.input_type
class ApplicationStatusSyncComparedToArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input['ApplicationStatusSyncComparedToDestinationArgs'],
                 source: pulumi.Input['ApplicationStatusSyncComparedToSourceArgs']):
        """
        ComparedTo contains application source and target which was used for resources comparison
        :param pulumi.Input['ApplicationStatusSyncComparedToDestinationArgs'] destination: ApplicationDestination contains deployment destination information
        :param pulumi.Input['ApplicationStatusSyncComparedToSourceArgs'] source: ApplicationSource contains information about github repository, path within repository and target application environment.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input['ApplicationStatusSyncComparedToDestinationArgs']:
        """
        ApplicationDestination contains deployment destination information
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input['ApplicationStatusSyncComparedToDestinationArgs']):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['ApplicationStatusSyncComparedToSourceArgs']:
        """
        ApplicationSource contains information about github repository, path within repository and target application environment.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['ApplicationStatusSyncComparedToSourceArgs']):
        pulumi.set(self, "source", value)


@pulumi.input_type
class ApplicationStatusSyncComparedToDestinationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None):
        """
        ApplicationDestination contains deployment destination information
        :param pulumi.Input[str] name: Name of the destination cluster which can be used instead of server (url) field
        :param pulumi.Input[str] namespace: Namespace overrides the environment namespace value in the ksonnet app.yaml
        :param pulumi.Input[str] server: Server overrides the environment server value in the ksonnet app.yaml
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the destination cluster which can be used instead of server (url) field
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace overrides the environment namespace value in the ksonnet app.yaml
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server overrides the environment server value in the ksonnet app.yaml
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)


@pulumi.input_type
class ApplicationStatusSyncComparedToSourceArgs:
    def __init__(__self__, *,
                 repo_url: pulumi.Input[str],
                 chart: Optional[pulumi.Input[str]] = None,
                 directory: Optional[pulumi.Input['ApplicationStatusSyncComparedToSourceDirectoryArgs']] = None,
                 helm: Optional[pulumi.Input['ApplicationStatusSyncComparedToSourceHelmArgs']] = None,
                 ksonnet: Optional[pulumi.Input['ApplicationStatusSyncComparedToSourceKsonnetArgs']] = None,
                 kustomize: Optional[pulumi.Input['ApplicationStatusSyncComparedToSourceKustomizeArgs']] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 plugin: Optional[pulumi.Input['ApplicationStatusSyncComparedToSourcePluginArgs']] = None,
                 target_revision: Optional[pulumi.Input[str]] = None):
        """
        ApplicationSource contains information about github repository, path within repository and target application environment.
        :param pulumi.Input[str] repo_url: RepoURL is the repository URL of the application manifests
        :param pulumi.Input[str] chart: Chart is a Helm chart name
        :param pulumi.Input['ApplicationStatusSyncComparedToSourceDirectoryArgs'] directory: Directory holds path/directory specific options
        :param pulumi.Input['ApplicationStatusSyncComparedToSourceHelmArgs'] helm: Helm holds helm specific options
        :param pulumi.Input['ApplicationStatusSyncComparedToSourceKsonnetArgs'] ksonnet: Ksonnet holds ksonnet specific options
        :param pulumi.Input['ApplicationStatusSyncComparedToSourceKustomizeArgs'] kustomize: Kustomize holds kustomize specific options
        :param pulumi.Input[str] path: Path is a directory path within the Git repository
        :param pulumi.Input['ApplicationStatusSyncComparedToSourcePluginArgs'] plugin: ConfigManagementPlugin holds config management plugin specific options
        :param pulumi.Input[str] target_revision: TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> pulumi.Input[str]:
        """
        RepoURL is the repository URL of the application manifests
        """
        return pulumi.get(self, "repo_url")

    @repo_url.setter
    def repo_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo_url", value)

    @property
    @pulumi.getter
    def chart(self) -> Optional[pulumi.Input[str]]:
        """
        Chart is a Helm chart name
        """
        return pulumi.get(self, "chart")

    @chart.setter
    def chart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input['ApplicationStatusSyncComparedToSourceDirectoryArgs']]:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input['ApplicationStatusSyncComparedToSourceDirectoryArgs']]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def helm(self) -> Optional[pulumi.Input['ApplicationStatusSyncComparedToSourceHelmArgs']]:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @helm.setter
    def helm(self, value: Optional[pulumi.Input['ApplicationStatusSyncComparedToSourceHelmArgs']]):
        pulumi.set(self, "helm", value)

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional[pulumi.Input['ApplicationStatusSyncComparedToSourceKsonnetArgs']]:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @ksonnet.setter
    def ksonnet(self, value: Optional[pulumi.Input['ApplicationStatusSyncComparedToSourceKsonnetArgs']]):
        pulumi.set(self, "ksonnet", value)

    @property
    @pulumi.getter
    def kustomize(self) -> Optional[pulumi.Input['ApplicationStatusSyncComparedToSourceKustomizeArgs']]:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @kustomize.setter
    def kustomize(self, value: Optional[pulumi.Input['ApplicationStatusSyncComparedToSourceKustomizeArgs']]):
        pulumi.set(self, "kustomize", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path is a directory path within the Git repository
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def plugin(self) -> Optional[pulumi.Input['ApplicationStatusSyncComparedToSourcePluginArgs']]:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @plugin.setter
    def plugin(self, value: Optional[pulumi.Input['ApplicationStatusSyncComparedToSourcePluginArgs']]):
        pulumi.set(self, "plugin", value)

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[pulumi.Input[str]]:
        """
        TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        return pulumi.get(self, "target_revision")

    @target_revision.setter
    def target_revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_revision", value)


@pulumi.input_type
class ApplicationStatusSyncComparedToSourceDirectoryArgs:
    def __init__(__self__, *,
                 jsonnet: Optional[pulumi.Input['ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs']] = None,
                 recurse: Optional[pulumi.Input[bool]] = None):
        """
        Directory holds path/directory specific options
        :param pulumi.Input['ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs'] jsonnet: ApplicationSourceJsonnet holds jsonnet specific options
        """
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional[pulumi.Input['ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs']]:
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        """
        return pulumi.get(self, "jsonnet")

    @jsonnet.setter
    def jsonnet(self, value: Optional[pulumi.Input['ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs']]):
        pulumi.set(self, "jsonnet", value)

    @property
    @pulumi.getter
    def recurse(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recurse")

    @recurse.setter
    def recurse(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recurse", value)


@pulumi.input_type
class ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs:
    def __init__(__self__, *,
                 ext_vars: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArgs']]]] = None,
                 libs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tlas: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArgs']]]] = None):
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArgs']]] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param pulumi.Input[Sequence[pulumi.Input[str]]] libs: Additional library search dirs
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArgs']]] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArgs']]]]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @ext_vars.setter
    def ext_vars(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArgs']]]]):
        pulumi.set(self, "ext_vars", value)

    @property
    @pulumi.getter
    def libs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @libs.setter
    def libs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "libs", value)

    @property
    @pulumi.getter
    def tlas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArgs']]]]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")

    @tlas.setter
    def tlas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArgs']]]]):
        pulumi.set(self, "tlas", value)


@pulumi.input_type
class ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 code: Optional[pulumi.Input[bool]] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 code: Optional[pulumi.Input[bool]] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class ApplicationStatusSyncComparedToSourceHelmArgs:
    def __init__(__self__, *,
                 file_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceHelmFileParametersArgs']]]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceHelmParametersArgs']]]] = None,
                 release_name: Optional[pulumi.Input[str]] = None,
                 value_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 values: Optional[pulumi.Input[str]] = None):
        """
        Helm holds helm specific options
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceHelmFileParametersArgs']]] file_parameters: FileParameters are file parameters to the helm template
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceHelmParametersArgs']]] parameters: Parameters are parameters to the helm template
        :param pulumi.Input[str] release_name: The Helm release name. If omitted it will use the application name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param pulumi.Input[str] values: Values is Helm values, typically defined as a block
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceHelmFileParametersArgs']]]]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @file_parameters.setter
    def file_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceHelmFileParametersArgs']]]]):
        pulumi.set(self, "file_parameters", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceHelmParametersArgs']]]]:
        """
        Parameters are parameters to the helm template
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceHelmParametersArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Helm release name. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @release_name.setter
    def release_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_name", value)

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @value_files.setter
    def value_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "value_files", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[str]]:
        """
        Values is Helm values, typically defined as a block
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ApplicationStatusSyncComparedToSourceHelmFileParametersArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        HelmFileParameter is a file parameter to a helm template
        :param pulumi.Input[str] name: Name is the name of the helm parameter
        :param pulumi.Input[str] path: Path is the path value for the helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path is the path value for the helm parameter
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class ApplicationStatusSyncComparedToSourceHelmParametersArgs:
    def __init__(__self__, *,
                 force_string: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        HelmParameter is a parameter to a helm template
        :param pulumi.Input[bool] force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param pulumi.Input[str] name: Name is the name of the helm parameter
        :param pulumi.Input[str] value: Value is the value for the helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[pulumi.Input[bool]]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @force_string.setter
    def force_string(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_string", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the value for the helm parameter
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationStatusSyncComparedToSourceKsonnetArgs:
    def __init__(__self__, *,
                 environment: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceKsonnetParametersArgs']]]] = None):
        """
        Ksonnet holds ksonnet specific options
        :param pulumi.Input[str] environment: Environment is a ksonnet application environment name
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceKsonnetParametersArgs']]] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceKsonnetParametersArgs']]]]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourceKsonnetParametersArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class ApplicationStatusSyncComparedToSourceKsonnetParametersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 component: Optional[pulumi.Input[str]] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)


@pulumi.input_type
class ApplicationStatusSyncComparedToSourceKustomizeArgs:
    def __init__(__self__, *,
                 common_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 name_suffix: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Kustomize holds kustomize specific options
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] common_labels: CommonLabels adds additional kustomize commonLabels
        :param pulumi.Input[Sequence[pulumi.Input[str]]] images: Images are kustomize image overrides
        :param pulumi.Input[str] name_prefix: NamePrefix is a prefix appended to resources for kustomize apps
        :param pulumi.Input[str] name_suffix: NameSuffix is a suffix appended to resources for kustomize apps
        :param pulumi.Input[str] version: Version contains optional Kustomize version
        """
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        CommonLabels adds additional kustomize commonLabels
        """
        return pulumi.get(self, "common_labels")

    @common_labels.setter
    def common_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "common_labels", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Images are kustomize image overrides
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        NamePrefix is a prefix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        NameSuffix is a suffix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @name_suffix.setter
    def name_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_suffix", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version contains optional Kustomize version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ApplicationStatusSyncComparedToSourcePluginArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourcePluginEnvArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourcePluginEnvArgs']]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationStatusSyncComparedToSourcePluginEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ApplicationStatusSyncComparedToSourcePluginEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: the name, usually uppercase
        :param pulumi.Input[str] value: the value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        the name, usually uppercase
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        the value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ArgoCDExportSpecArgs:
    def __init__(__self__, *,
                 argocd: pulumi.Input[str],
                 image: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input['ArgoCDExportSpecStorageArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        ArgoCDExportSpec defines the desired state of ArgoCDExport
        :param pulumi.Input[str] argocd: Argocd is the name of the ArgoCD instance to export.
        :param pulumi.Input[str] image: Image is the container image to use for the export Job.
        :param pulumi.Input[str] schedule: Schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
        :param pulumi.Input['ArgoCDExportSpecStorageArgs'] storage: Storage defines the storage configuration options.
        :param pulumi.Input[str] version: Version is the tag/digest to use for the export Job container image.
        """
        pulumi.set(__self__, "argocd", argocd)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def argocd(self) -> pulumi.Input[str]:
        """
        Argocd is the name of the ArgoCD instance to export.
        """
        return pulumi.get(self, "argocd")

    @argocd.setter
    def argocd(self, value: pulumi.Input[str]):
        pulumi.set(self, "argocd", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Image is the container image to use for the export Job.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['ArgoCDExportSpecStorageArgs']]:
        """
        Storage defines the storage configuration options.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['ArgoCDExportSpecStorageArgs']]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version is the tag/digest to use for the export Job container image.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ArgoCDExportSpecStorageArgs:
    def __init__(__self__, *,
                 backend: Optional[pulumi.Input[str]] = None,
                 pvc: Optional[pulumi.Input['ArgoCDExportSpecStoragePvcArgs']] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        """
        Storage defines the storage configuration options.
        :param pulumi.Input[str] backend: Backend defines the storage backend to use, must be "local" (the default), "aws", "azure" or "gcp".
        :param pulumi.Input['ArgoCDExportSpecStoragePvcArgs'] pvc: PVC is the desired characteristics for a PersistentVolumeClaim.
        :param pulumi.Input[str] secret_name: SecretName is the name of a Secret with encryption key, credentials, etc.
        """
        if backend is not None:
            pulumi.set(__self__, "backend", backend)
        if pvc is not None:
            pulumi.set(__self__, "pvc", pvc)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def backend(self) -> Optional[pulumi.Input[str]]:
        """
        Backend defines the storage backend to use, must be "local" (the default), "aws", "azure" or "gcp".
        """
        return pulumi.get(self, "backend")

    @backend.setter
    def backend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backend", value)

    @property
    @pulumi.getter
    def pvc(self) -> Optional[pulumi.Input['ArgoCDExportSpecStoragePvcArgs']]:
        """
        PVC is the desired characteristics for a PersistentVolumeClaim.
        """
        return pulumi.get(self, "pvc")

    @pvc.setter
    def pvc(self, value: Optional[pulumi.Input['ArgoCDExportSpecStoragePvcArgs']]):
        pulumi.set(self, "pvc", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        SecretName is the name of a Secret with encryption key, credentials, etc.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ArgoCDExportSpecStoragePvcArgs:
    def __init__(__self__, *,
                 access_modes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 data_source: Optional[pulumi.Input['ArgoCDExportSpecStoragePvcDataSourceArgs']] = None,
                 resources: Optional[pulumi.Input['ArgoCDExportSpecStoragePvcResourcesArgs']] = None,
                 selector: Optional[pulumi.Input['ArgoCDExportSpecStoragePvcSelectorArgs']] = None,
                 storage_class_name: Optional[pulumi.Input[str]] = None,
                 volume_mode: Optional[pulumi.Input[str]] = None,
                 volume_name: Optional[pulumi.Input[str]] = None):
        """
        PVC is the desired characteristics for a PersistentVolumeClaim.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_modes: AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        :param pulumi.Input['ArgoCDExportSpecStoragePvcDataSourceArgs'] data_source: This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
        :param pulumi.Input['ArgoCDExportSpecStoragePvcResourcesArgs'] resources: Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        :param pulumi.Input['ArgoCDExportSpecStoragePvcSelectorArgs'] selector: A label query over volumes to consider for binding.
        :param pulumi.Input[str] storage_class_name: Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        :param pulumi.Input[str] volume_mode: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
        :param pulumi.Input[str] volume_name: VolumeName is the binding reference to the PersistentVolume backing this claim.
        """
        if access_modes is not None:
            pulumi.set(__self__, "access_modes", access_modes)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if volume_mode is not None:
            pulumi.set(__self__, "volume_mode", volume_mode)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        """
        return pulumi.get(self, "access_modes")

    @access_modes.setter
    def access_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "access_modes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input['ArgoCDExportSpecStoragePvcDataSourceArgs']]:
        """
        This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input['ArgoCDExportSpecStoragePvcDataSourceArgs']]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ArgoCDExportSpecStoragePvcResourcesArgs']]:
        """
        Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ArgoCDExportSpecStoragePvcResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input['ArgoCDExportSpecStoragePvcSelectorArgs']]:
        """
        A label query over volumes to consider for binding.
        """
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input['ArgoCDExportSpecStoragePvcSelectorArgs']]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        """
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class_name", value)

    @property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> Optional[pulumi.Input[str]]:
        """
        volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
        """
        return pulumi.get(self, "volume_mode")

    @volume_mode.setter
    def volume_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_mode", value)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[str]]:
        """
        VolumeName is the binding reference to the PersistentVolume backing this claim.
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_name", value)


@pulumi.input_type
class ArgoCDExportSpecStoragePvcDataSourceArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 api_group: Optional[pulumi.Input[str]] = None):
        """
        This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
        :param pulumi.Input[str] kind: Kind is the type of resource being referenced
        :param pulumi.Input[str] name: Name is the name of resource being referenced
        :param pulumi.Input[str] api_group: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if api_group is not None:
            pulumi.set(__self__, "api_group", api_group)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind is the type of resource being referenced
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of resource being referenced
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="apiGroup")
    def api_group(self) -> Optional[pulumi.Input[str]]:
        """
        APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        """
        return pulumi.get(self, "api_group")

    @api_group.setter
    def api_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_group", value)


@pulumi.input_type
class ArgoCDExportSpecStoragePvcResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDExportSpecStoragePvcResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDExportSpecStoragePvcResourcesRequestsArgs']]]] = None):
        """
        Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        :param pulumi.Input[Mapping[str, pulumi.Input['ArgoCDExportSpecStoragePvcResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['ArgoCDExportSpecStoragePvcResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDExportSpecStoragePvcResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDExportSpecStoragePvcResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDExportSpecStoragePvcResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDExportSpecStoragePvcResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ArgoCDExportSpecStoragePvcResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ArgoCDExportSpecStoragePvcResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ArgoCDExportSpecStoragePvcSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over volumes to consider for binding.
        :param pulumi.Input[Sequence[pulumi.Input['ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ArgoCDExportStatusArgs:
    def __init__(__self__, *,
                 phase: pulumi.Input[str]):
        """
        ArgoCDExportStatus defines the observed state of ArgoCDExport
        :param pulumi.Input[str] phase: Phase is a simple, high-level summary of where the ArgoCDExport is in its lifecycle. There are five possible phase values: Pending: The ArgoCDExport has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the containers for the ArgoCDExport are still running, or in the process of starting or restarting. Succeeded: All containers for the ArgoCDExport have terminated in success, and will not be restarted. Failed: At least one container has terminated in failure, either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the ArgoCDExport could not be obtained.
        """
        pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter
    def phase(self) -> pulumi.Input[str]:
        """
        Phase is a simple, high-level summary of where the ArgoCDExport is in its lifecycle. There are five possible phase values: Pending: The ArgoCDExport has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the containers for the ArgoCDExport are still running, or in the process of starting or restarting. Succeeded: All containers for the ArgoCDExport have terminated in success, and will not be restarted. Failed: At least one container has terminated in failure, either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the ArgoCDExport could not be obtained.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: pulumi.Input[str]):
        pulumi.set(self, "phase", value)


@pulumi.input_type
class ArgoCDSpecArgs:
    def __init__(__self__, *,
                 application_instance_label_key: Optional[pulumi.Input[str]] = None,
                 config_management_plugins: Optional[pulumi.Input[str]] = None,
                 controller: Optional[pulumi.Input['ArgoCDSpecControllerArgs']] = None,
                 dex: Optional[pulumi.Input['ArgoCDSpecDexArgs']] = None,
                 ga_anonymize_users: Optional[pulumi.Input[bool]] = None,
                 ga_tracking_id: Optional[pulumi.Input[str]] = None,
                 grafana: Optional[pulumi.Input['ArgoCDSpecGrafanaArgs']] = None,
                 ha: Optional[pulumi.Input['ArgoCDSpecHaArgs']] = None,
                 help_chat_text: Optional[pulumi.Input[str]] = None,
                 help_chat_url: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 import_: Optional[pulumi.Input['ArgoCDSpecImportArgs']] = None,
                 initial_repositories: Optional[pulumi.Input[str]] = None,
                 initial_ssh_known_hosts: Optional[pulumi.Input['ArgoCDSpecInitialSSHKnownHostsArgs']] = None,
                 kustomize_build_options: Optional[pulumi.Input[str]] = None,
                 oidc_config: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input['ArgoCDSpecPrometheusArgs']] = None,
                 rbac: Optional[pulumi.Input['ArgoCDSpecRbacArgs']] = None,
                 redis: Optional[pulumi.Input['ArgoCDSpecRedisArgs']] = None,
                 repo: Optional[pulumi.Input['ArgoCDSpecRepoArgs']] = None,
                 repository_credentials: Optional[pulumi.Input[str]] = None,
                 resource_customizations: Optional[pulumi.Input[str]] = None,
                 resource_exclusions: Optional[pulumi.Input[str]] = None,
                 resource_inclusions: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input['ArgoCDSpecServerArgs']] = None,
                 status_badge_enabled: Optional[pulumi.Input[bool]] = None,
                 tls: Optional[pulumi.Input['ArgoCDSpecTlsArgs']] = None,
                 users_anonymous_enabled: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        ArgoCDSpec defines the desired state of ArgoCD
        :param pulumi.Input[str] application_instance_label_key: ApplicationInstanceLabelKey is the key name where Argo CD injects the app name as a tracking label.
        :param pulumi.Input[str] config_management_plugins: ConfigManagementPlugins is used to specify additional config management plugins.
        :param pulumi.Input['ArgoCDSpecControllerArgs'] controller: Controller defines the Application Controller options for ArgoCD.
        :param pulumi.Input['ArgoCDSpecDexArgs'] dex: Dex defines the Dex server options for ArgoCD.
        :param pulumi.Input[bool] ga_anonymize_users: GAAnonymizeUsers toggles user IDs being hashed before sending to google analytics.
        :param pulumi.Input[str] ga_tracking_id: GATrackingID is the google analytics tracking ID to use.
        :param pulumi.Input['ArgoCDSpecGrafanaArgs'] grafana: Grafana defines the Grafana server options for ArgoCD.
        :param pulumi.Input['ArgoCDSpecHaArgs'] ha: HA options for High Availability support for the Redis component.
        :param pulumi.Input[str] help_chat_text: HelpChatText is the text for getting chat help, defaults to "Chat now!"
        :param pulumi.Input[str] help_chat_url: HelpChatURL is the URL for getting chat help, this will typically be your Slack channel for support.
        :param pulumi.Input[str] image: Image is the ArgoCD container image for all ArgoCD components.
        :param pulumi.Input['ArgoCDSpecImportArgs'] import_: Import is the import/restore options for ArgoCD.
        :param pulumi.Input[str] initial_repositories: InitialRepositories to configure Argo CD with upon creation of the cluster.
        :param pulumi.Input['ArgoCDSpecInitialSSHKnownHostsArgs'] initial_ssh_known_hosts: InitialSSHKnownHosts defines the SSH known hosts data upon creation of the cluster for connecting Git repositories via SSH.
        :param pulumi.Input[str] kustomize_build_options: KustomizeBuildOptions is used to specify build options/parameters to use with `kustomize build`.
        :param pulumi.Input[str] oidc_config: OIDCConfig is the OIDC configuration as an alternative to dex.
        :param pulumi.Input['ArgoCDSpecPrometheusArgs'] prometheus: Prometheus defines the Prometheus server options for ArgoCD.
        :param pulumi.Input['ArgoCDSpecRbacArgs'] rbac: RBAC defines the RBAC configuration for Argo CD.
        :param pulumi.Input['ArgoCDSpecRedisArgs'] redis: Redis defines the Redis server options for ArgoCD.
        :param pulumi.Input['ArgoCDSpecRepoArgs'] repo: Repo defines the repo server options for Argo CD.
        :param pulumi.Input[str] repository_credentials: RepositoryCredentials are the Git pull credentials to configure Argo CD with upon creation of the cluster.
        :param pulumi.Input[str] resource_customizations: ResourceCustomizations customizes resource behavior. Keys are in the form: group/Kind.
        :param pulumi.Input[str] resource_exclusions: ResourceExclusions is used to completely ignore entire classes of resource group/kinds.
        :param pulumi.Input[str] resource_inclusions: ResourceInclusions is used to only include specific group/kinds in the reconciliation process.
        :param pulumi.Input['ArgoCDSpecServerArgs'] server: Server defines the options for the ArgoCD Server component.
        :param pulumi.Input[bool] status_badge_enabled: StatusBadgeEnabled toggles application status badge feature.
        :param pulumi.Input['ArgoCDSpecTlsArgs'] tls: TLS defines the TLS options for ArgoCD.
        :param pulumi.Input[bool] users_anonymous_enabled: UsersAnonymousEnabled toggles anonymous user access. The anonymous users get default role permissions specified argocd-rbac-cm.
        :param pulumi.Input[str] version: Version is the tag to use with the ArgoCD container image for all ArgoCD components.
        """
        if application_instance_label_key is not None:
            pulumi.set(__self__, "application_instance_label_key", application_instance_label_key)
        if config_management_plugins is not None:
            pulumi.set(__self__, "config_management_plugins", config_management_plugins)
        if controller is not None:
            pulumi.set(__self__, "controller", controller)
        if dex is not None:
            pulumi.set(__self__, "dex", dex)
        if ga_anonymize_users is not None:
            pulumi.set(__self__, "ga_anonymize_users", ga_anonymize_users)
        if ga_tracking_id is not None:
            pulumi.set(__self__, "ga_tracking_id", ga_tracking_id)
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)
        if ha is not None:
            pulumi.set(__self__, "ha", ha)
        if help_chat_text is not None:
            pulumi.set(__self__, "help_chat_text", help_chat_text)
        if help_chat_url is not None:
            pulumi.set(__self__, "help_chat_url", help_chat_url)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if import_ is not None:
            pulumi.set(__self__, "import_", import_)
        if initial_repositories is not None:
            pulumi.set(__self__, "initial_repositories", initial_repositories)
        if initial_ssh_known_hosts is not None:
            pulumi.set(__self__, "initial_ssh_known_hosts", initial_ssh_known_hosts)
        if kustomize_build_options is not None:
            pulumi.set(__self__, "kustomize_build_options", kustomize_build_options)
        if oidc_config is not None:
            pulumi.set(__self__, "oidc_config", oidc_config)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if rbac is not None:
            pulumi.set(__self__, "rbac", rbac)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)
        if repo is not None:
            pulumi.set(__self__, "repo", repo)
        if repository_credentials is not None:
            pulumi.set(__self__, "repository_credentials", repository_credentials)
        if resource_customizations is not None:
            pulumi.set(__self__, "resource_customizations", resource_customizations)
        if resource_exclusions is not None:
            pulumi.set(__self__, "resource_exclusions", resource_exclusions)
        if resource_inclusions is not None:
            pulumi.set(__self__, "resource_inclusions", resource_inclusions)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if status_badge_enabled is not None:
            pulumi.set(__self__, "status_badge_enabled", status_badge_enabled)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if users_anonymous_enabled is not None:
            pulumi.set(__self__, "users_anonymous_enabled", users_anonymous_enabled)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="applicationInstanceLabelKey")
    def application_instance_label_key(self) -> Optional[pulumi.Input[str]]:
        """
        ApplicationInstanceLabelKey is the key name where Argo CD injects the app name as a tracking label.
        """
        return pulumi.get(self, "application_instance_label_key")

    @application_instance_label_key.setter
    def application_instance_label_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_instance_label_key", value)

    @property
    @pulumi.getter(name="configManagementPlugins")
    def config_management_plugins(self) -> Optional[pulumi.Input[str]]:
        """
        ConfigManagementPlugins is used to specify additional config management plugins.
        """
        return pulumi.get(self, "config_management_plugins")

    @config_management_plugins.setter
    def config_management_plugins(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_management_plugins", value)

    @property
    @pulumi.getter
    def controller(self) -> Optional[pulumi.Input['ArgoCDSpecControllerArgs']]:
        """
        Controller defines the Application Controller options for ArgoCD.
        """
        return pulumi.get(self, "controller")

    @controller.setter
    def controller(self, value: Optional[pulumi.Input['ArgoCDSpecControllerArgs']]):
        pulumi.set(self, "controller", value)

    @property
    @pulumi.getter
    def dex(self) -> Optional[pulumi.Input['ArgoCDSpecDexArgs']]:
        """
        Dex defines the Dex server options for ArgoCD.
        """
        return pulumi.get(self, "dex")

    @dex.setter
    def dex(self, value: Optional[pulumi.Input['ArgoCDSpecDexArgs']]):
        pulumi.set(self, "dex", value)

    @property
    @pulumi.getter(name="gaAnonymizeUsers")
    def ga_anonymize_users(self) -> Optional[pulumi.Input[bool]]:
        """
        GAAnonymizeUsers toggles user IDs being hashed before sending to google analytics.
        """
        return pulumi.get(self, "ga_anonymize_users")

    @ga_anonymize_users.setter
    def ga_anonymize_users(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ga_anonymize_users", value)

    @property
    @pulumi.getter(name="gaTrackingID")
    def ga_tracking_id(self) -> Optional[pulumi.Input[str]]:
        """
        GATrackingID is the google analytics tracking ID to use.
        """
        return pulumi.get(self, "ga_tracking_id")

    @ga_tracking_id.setter
    def ga_tracking_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ga_tracking_id", value)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[pulumi.Input['ArgoCDSpecGrafanaArgs']]:
        """
        Grafana defines the Grafana server options for ArgoCD.
        """
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[pulumi.Input['ArgoCDSpecGrafanaArgs']]):
        pulumi.set(self, "grafana", value)

    @property
    @pulumi.getter
    def ha(self) -> Optional[pulumi.Input['ArgoCDSpecHaArgs']]:
        """
        HA options for High Availability support for the Redis component.
        """
        return pulumi.get(self, "ha")

    @ha.setter
    def ha(self, value: Optional[pulumi.Input['ArgoCDSpecHaArgs']]):
        pulumi.set(self, "ha", value)

    @property
    @pulumi.getter(name="helpChatText")
    def help_chat_text(self) -> Optional[pulumi.Input[str]]:
        """
        HelpChatText is the text for getting chat help, defaults to "Chat now!"
        """
        return pulumi.get(self, "help_chat_text")

    @help_chat_text.setter
    def help_chat_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help_chat_text", value)

    @property
    @pulumi.getter(name="helpChatURL")
    def help_chat_url(self) -> Optional[pulumi.Input[str]]:
        """
        HelpChatURL is the URL for getting chat help, this will typically be your Slack channel for support.
        """
        return pulumi.get(self, "help_chat_url")

    @help_chat_url.setter
    def help_chat_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help_chat_url", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Image is the ArgoCD container image for all ArgoCD components.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="import")
    def import_(self) -> Optional[pulumi.Input['ArgoCDSpecImportArgs']]:
        """
        Import is the import/restore options for ArgoCD.
        """
        return pulumi.get(self, "import_")

    @import_.setter
    def import_(self, value: Optional[pulumi.Input['ArgoCDSpecImportArgs']]):
        pulumi.set(self, "import_", value)

    @property
    @pulumi.getter(name="initialRepositories")
    def initial_repositories(self) -> Optional[pulumi.Input[str]]:
        """
        InitialRepositories to configure Argo CD with upon creation of the cluster.
        """
        return pulumi.get(self, "initial_repositories")

    @initial_repositories.setter
    def initial_repositories(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initial_repositories", value)

    @property
    @pulumi.getter(name="initialSSHKnownHosts")
    def initial_ssh_known_hosts(self) -> Optional[pulumi.Input['ArgoCDSpecInitialSSHKnownHostsArgs']]:
        """
        InitialSSHKnownHosts defines the SSH known hosts data upon creation of the cluster for connecting Git repositories via SSH.
        """
        return pulumi.get(self, "initial_ssh_known_hosts")

    @initial_ssh_known_hosts.setter
    def initial_ssh_known_hosts(self, value: Optional[pulumi.Input['ArgoCDSpecInitialSSHKnownHostsArgs']]):
        pulumi.set(self, "initial_ssh_known_hosts", value)

    @property
    @pulumi.getter(name="kustomizeBuildOptions")
    def kustomize_build_options(self) -> Optional[pulumi.Input[str]]:
        """
        KustomizeBuildOptions is used to specify build options/parameters to use with `kustomize build`.
        """
        return pulumi.get(self, "kustomize_build_options")

    @kustomize_build_options.setter
    def kustomize_build_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kustomize_build_options", value)

    @property
    @pulumi.getter(name="oidcConfig")
    def oidc_config(self) -> Optional[pulumi.Input[str]]:
        """
        OIDCConfig is the OIDC configuration as an alternative to dex.
        """
        return pulumi.get(self, "oidc_config")

    @oidc_config.setter
    def oidc_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_config", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input['ArgoCDSpecPrometheusArgs']]:
        """
        Prometheus defines the Prometheus server options for ArgoCD.
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input['ArgoCDSpecPrometheusArgs']]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def rbac(self) -> Optional[pulumi.Input['ArgoCDSpecRbacArgs']]:
        """
        RBAC defines the RBAC configuration for Argo CD.
        """
        return pulumi.get(self, "rbac")

    @rbac.setter
    def rbac(self, value: Optional[pulumi.Input['ArgoCDSpecRbacArgs']]):
        pulumi.set(self, "rbac", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[pulumi.Input['ArgoCDSpecRedisArgs']]:
        """
        Redis defines the Redis server options for ArgoCD.
        """
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[pulumi.Input['ArgoCDSpecRedisArgs']]):
        pulumi.set(self, "redis", value)

    @property
    @pulumi.getter
    def repo(self) -> Optional[pulumi.Input['ArgoCDSpecRepoArgs']]:
        """
        Repo defines the repo server options for Argo CD.
        """
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: Optional[pulumi.Input['ArgoCDSpecRepoArgs']]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter(name="repositoryCredentials")
    def repository_credentials(self) -> Optional[pulumi.Input[str]]:
        """
        RepositoryCredentials are the Git pull credentials to configure Argo CD with upon creation of the cluster.
        """
        return pulumi.get(self, "repository_credentials")

    @repository_credentials.setter
    def repository_credentials(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_credentials", value)

    @property
    @pulumi.getter(name="resourceCustomizations")
    def resource_customizations(self) -> Optional[pulumi.Input[str]]:
        """
        ResourceCustomizations customizes resource behavior. Keys are in the form: group/Kind.
        """
        return pulumi.get(self, "resource_customizations")

    @resource_customizations.setter
    def resource_customizations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_customizations", value)

    @property
    @pulumi.getter(name="resourceExclusions")
    def resource_exclusions(self) -> Optional[pulumi.Input[str]]:
        """
        ResourceExclusions is used to completely ignore entire classes of resource group/kinds.
        """
        return pulumi.get(self, "resource_exclusions")

    @resource_exclusions.setter
    def resource_exclusions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_exclusions", value)

    @property
    @pulumi.getter(name="resourceInclusions")
    def resource_inclusions(self) -> Optional[pulumi.Input[str]]:
        """
        ResourceInclusions is used to only include specific group/kinds in the reconciliation process.
        """
        return pulumi.get(self, "resource_inclusions")

    @resource_inclusions.setter
    def resource_inclusions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_inclusions", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input['ArgoCDSpecServerArgs']]:
        """
        Server defines the options for the ArgoCD Server component.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input['ArgoCDSpecServerArgs']]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="statusBadgeEnabled")
    def status_badge_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        StatusBadgeEnabled toggles application status badge feature.
        """
        return pulumi.get(self, "status_badge_enabled")

    @status_badge_enabled.setter
    def status_badge_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "status_badge_enabled", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['ArgoCDSpecTlsArgs']]:
        """
        TLS defines the TLS options for ArgoCD.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['ArgoCDSpecTlsArgs']]):
        pulumi.set(self, "tls", value)

    @property
    @pulumi.getter(name="usersAnonymousEnabled")
    def users_anonymous_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        UsersAnonymousEnabled toggles anonymous user access. The anonymous users get default role permissions specified argocd-rbac-cm.
        """
        return pulumi.get(self, "users_anonymous_enabled")

    @users_anonymous_enabled.setter
    def users_anonymous_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "users_anonymous_enabled", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version is the tag to use with the ArgoCD container image for all ArgoCD components.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ArgoCDSpecControllerArgs:
    def __init__(__self__, *,
                 app_sync: Optional[pulumi.Input[str]] = None,
                 processors: Optional[pulumi.Input['ArgoCDSpecControllerProcessorsArgs']] = None,
                 resources: Optional[pulumi.Input['ArgoCDSpecControllerResourcesArgs']] = None):
        """
        Controller defines the Application Controller options for ArgoCD.
        :param pulumi.Input[str] app_sync: AppSync is used to control the sync frequency, by default the ArgoCD controller polls Git every 3m by default. 
                Set this to a duration, e.g. 10m or 600s to control the synchronisation frequency.
        :param pulumi.Input['ArgoCDSpecControllerProcessorsArgs'] processors: Processors contains the options for the Application Controller processors.
        :param pulumi.Input['ArgoCDSpecControllerResourcesArgs'] resources: Resources defines the Compute Resources required by the container for the Application Controller.
        """
        if app_sync is not None:
            pulumi.set(__self__, "app_sync", app_sync)
        if processors is not None:
            pulumi.set(__self__, "processors", processors)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="appSync")
    def app_sync(self) -> Optional[pulumi.Input[str]]:
        """
        AppSync is used to control the sync frequency, by default the ArgoCD controller polls Git every 3m by default. 
         Set this to a duration, e.g. 10m or 600s to control the synchronisation frequency.
        """
        return pulumi.get(self, "app_sync")

    @app_sync.setter
    def app_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_sync", value)

    @property
    @pulumi.getter
    def processors(self) -> Optional[pulumi.Input['ArgoCDSpecControllerProcessorsArgs']]:
        """
        Processors contains the options for the Application Controller processors.
        """
        return pulumi.get(self, "processors")

    @processors.setter
    def processors(self, value: Optional[pulumi.Input['ArgoCDSpecControllerProcessorsArgs']]):
        pulumi.set(self, "processors", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ArgoCDSpecControllerResourcesArgs']]:
        """
        Resources defines the Compute Resources required by the container for the Application Controller.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ArgoCDSpecControllerResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ArgoCDSpecControllerProcessorsArgs:
    def __init__(__self__, *,
                 operation: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[int]] = None):
        """
        Processors contains the options for the Application Controller processors.
        :param pulumi.Input[int] operation: Operation is the number of application operation processors.
        :param pulumi.Input[int] status: Status is the number of application status processors.
        """
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def operation(self) -> Optional[pulumi.Input[int]]:
        """
        Operation is the number of application operation processors.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Status is the number of application status processors.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ArgoCDSpecControllerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecControllerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecControllerResourcesRequestsArgs']]]] = None):
        """
        Resources defines the Compute Resources required by the container for the Application Controller.
        :param pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecControllerResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecControllerResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecControllerResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecControllerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecControllerResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecControllerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ArgoCDSpecControllerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ArgoCDSpecControllerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ArgoCDSpecDexArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 open_shift_o_auth: Optional[pulumi.Input[bool]] = None,
                 resources: Optional[pulumi.Input['ArgoCDSpecDexResourcesArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Dex defines the Dex server options for ArgoCD.
        :param pulumi.Input[str] config: Config is the dex connector configuration.
        :param pulumi.Input[str] image: Image is the Dex container image.
        :param pulumi.Input[bool] open_shift_o_auth: OpenShiftOAuth enables OpenShift OAuth authentication for the Dex server.
        :param pulumi.Input['ArgoCDSpecDexResourcesArgs'] resources: Resources defines the Compute Resources required by the container for Dex.
        :param pulumi.Input[str] version: Version is the Dex container image tag.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if open_shift_o_auth is not None:
            pulumi.set(__self__, "open_shift_o_auth", open_shift_o_auth)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        """
        Config is the dex connector configuration.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Image is the Dex container image.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="openShiftOAuth")
    def open_shift_o_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        OpenShiftOAuth enables OpenShift OAuth authentication for the Dex server.
        """
        return pulumi.get(self, "open_shift_o_auth")

    @open_shift_o_auth.setter
    def open_shift_o_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "open_shift_o_auth", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ArgoCDSpecDexResourcesArgs']]:
        """
        Resources defines the Compute Resources required by the container for Dex.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ArgoCDSpecDexResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version is the Dex container image tag.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ArgoCDSpecDexResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecDexResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecDexResourcesRequestsArgs']]]] = None):
        """
        Resources defines the Compute Resources required by the container for Dex.
        :param pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecDexResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecDexResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecDexResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecDexResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecDexResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecDexResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ArgoCDSpecDexResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ArgoCDSpecDexResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ArgoCDSpecGrafanaArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 host: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 ingress: Optional[pulumi.Input['ArgoCDSpecGrafanaIngressArgs']] = None,
                 resources: Optional[pulumi.Input['ArgoCDSpecGrafanaResourcesArgs']] = None,
                 route: Optional[pulumi.Input['ArgoCDSpecGrafanaRouteArgs']] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Grafana defines the Grafana server options for ArgoCD.
        :param pulumi.Input[bool] enabled: Enabled will toggle Grafana support globally for ArgoCD.
        :param pulumi.Input[str] host: Host is the hostname to use for Ingress/Route resources.
        :param pulumi.Input[str] image: Image is the Grafana container image.
        :param pulumi.Input['ArgoCDSpecGrafanaIngressArgs'] ingress: Ingress defines the desired state for an Ingress for the Grafana component.
        :param pulumi.Input['ArgoCDSpecGrafanaResourcesArgs'] resources: Resources defines the Compute Resources required by the container for Grafana.
        :param pulumi.Input['ArgoCDSpecGrafanaRouteArgs'] route: Route defines the desired state for an OpenShift Route for the Grafana component.
        :param pulumi.Input[int] size: Size is the replica count for the Grafana Deployment.
        :param pulumi.Input[str] version: Version is the Grafana container image tag.
        """
        pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enabled will toggle Grafana support globally for ArgoCD.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host is the hostname to use for Ingress/Route resources.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Image is the Grafana container image.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ArgoCDSpecGrafanaIngressArgs']]:
        """
        Ingress defines the desired state for an Ingress for the Grafana component.
        """
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ArgoCDSpecGrafanaIngressArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ArgoCDSpecGrafanaResourcesArgs']]:
        """
        Resources defines the Compute Resources required by the container for Grafana.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ArgoCDSpecGrafanaResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input['ArgoCDSpecGrafanaRouteArgs']]:
        """
        Route defines the desired state for an OpenShift Route for the Grafana component.
        """
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input['ArgoCDSpecGrafanaRouteArgs']]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Size is the replica count for the Grafana Deployment.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version is the Grafana container image tag.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ArgoCDSpecGrafanaIngressArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input[Sequence[pulumi.Input['ArgoCDSpecGrafanaIngressTlsArgs']]]] = None):
        """
        Ingress defines the desired state for an Ingress for the Grafana component.
        :param pulumi.Input[bool] enabled: Enabled will toggle the creation of the Ingress.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations is the map of annotations to apply to the Ingress.
        :param pulumi.Input[str] path: Path used for the Ingress resource.
        :param pulumi.Input[Sequence[pulumi.Input['ArgoCDSpecGrafanaIngressTlsArgs']]] tls: TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        """
        pulumi.set(__self__, "enabled", enabled)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enabled will toggle the creation of the Ingress.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations is the map of annotations to apply to the Ingress.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path used for the Ingress resource.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArgoCDSpecGrafanaIngressTlsArgs']]]]:
        """
        TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArgoCDSpecGrafanaIngressTlsArgs']]]]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class ArgoCDSpecGrafanaIngressTlsArgs:
    def __init__(__self__, *,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        """
        IngressTLS describes the transport layer security associated with an Ingress.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
        :param pulumi.Input[str] secret_name: SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ArgoCDSpecGrafanaResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecGrafanaResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecGrafanaResourcesRequestsArgs']]]] = None):
        """
        Resources defines the Compute Resources required by the container for Grafana.
        :param pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecGrafanaResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecGrafanaResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecGrafanaResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecGrafanaResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecGrafanaResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecGrafanaResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ArgoCDSpecGrafanaResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ArgoCDSpecGrafanaResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ArgoCDSpecGrafanaRouteArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input['ArgoCDSpecGrafanaRouteTlsArgs']] = None,
                 wildcard_policy: Optional[pulumi.Input[str]] = None):
        """
        Route defines the desired state for an OpenShift Route for the Grafana component.
        :param pulumi.Input[bool] enabled: Enabled will toggle the creation of the OpenShift Route.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations is the map of annotations to use for the Route resource.
        :param pulumi.Input[str] path: Path the router watches for, to route traffic for to the service.
        :param pulumi.Input['ArgoCDSpecGrafanaRouteTlsArgs'] tls: TLS provides the ability to configure certificates and termination for the Route.
        :param pulumi.Input[str] wildcard_policy: WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
        """
        pulumi.set(__self__, "enabled", enabled)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if wildcard_policy is not None:
            pulumi.set(__self__, "wildcard_policy", wildcard_policy)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enabled will toggle the creation of the OpenShift Route.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations is the map of annotations to use for the Route resource.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path the router watches for, to route traffic for to the service.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['ArgoCDSpecGrafanaRouteTlsArgs']]:
        """
        TLS provides the ability to configure certificates and termination for the Route.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['ArgoCDSpecGrafanaRouteTlsArgs']]):
        pulumi.set(self, "tls", value)

    @property
    @pulumi.getter(name="wildcardPolicy")
    def wildcard_policy(self) -> Optional[pulumi.Input[str]]:
        """
        WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
        """
        return pulumi.get(self, "wildcard_policy")

    @wildcard_policy.setter
    def wildcard_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wildcard_policy", value)


@pulumi.input_type
class ArgoCDSpecGrafanaRouteTlsArgs:
    def __init__(__self__, *,
                 termination: pulumi.Input[str],
                 ca_certificate: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 destination_ca_certificate: Optional[pulumi.Input[str]] = None,
                 insecure_edge_termination_policy: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        """
        TLS provides the ability to configure certificates and termination for the Route.
        :param pulumi.Input[str] termination: termination indicates termination type.
        :param pulumi.Input[str] ca_certificate: caCertificate provides the cert authority certificate contents
        :param pulumi.Input[str] certificate: certificate provides certificate contents
        :param pulumi.Input[str] destination_ca_certificate: destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
        :param pulumi.Input[str] insecure_edge_termination_policy: insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. 
                * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
        :param pulumi.Input[str] key: key provides key file contents
        """
        pulumi.set(__self__, "termination", termination)
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if destination_ca_certificate is not None:
            pulumi.set(__self__, "destination_ca_certificate", destination_ca_certificate)
        if insecure_edge_termination_policy is not None:
            pulumi.set(__self__, "insecure_edge_termination_policy", insecure_edge_termination_policy)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def termination(self) -> pulumi.Input[str]:
        """
        termination indicates termination type.
        """
        return pulumi.get(self, "termination")

    @termination.setter
    def termination(self, value: pulumi.Input[str]):
        pulumi.set(self, "termination", value)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        caCertificate provides the cert authority certificate contents
        """
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        certificate provides certificate contents
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="destinationCACertificate")
    def destination_ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
        """
        return pulumi.get(self, "destination_ca_certificate")

    @destination_ca_certificate.setter
    def destination_ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_ca_certificate", value)

    @property
    @pulumi.getter(name="insecureEdgeTerminationPolicy")
    def insecure_edge_termination_policy(self) -> Optional[pulumi.Input[str]]:
        """
        insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. 
         * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
        """
        return pulumi.get(self, "insecure_edge_termination_policy")

    @insecure_edge_termination_policy.setter
    def insecure_edge_termination_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insecure_edge_termination_policy", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key provides key file contents
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ArgoCDSpecHaArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 redis_proxy_image: Optional[pulumi.Input[str]] = None,
                 redis_proxy_version: Optional[pulumi.Input[str]] = None):
        """
        HA options for High Availability support for the Redis component.
        :param pulumi.Input[bool] enabled: Enabled will toggle HA support globally for Argo CD.
        :param pulumi.Input[str] redis_proxy_image: RedisProxyImage is the Redis HAProxy container image.
        :param pulumi.Input[str] redis_proxy_version: RedisProxyVersion is the Redis HAProxy container image tag.
        """
        pulumi.set(__self__, "enabled", enabled)
        if redis_proxy_image is not None:
            pulumi.set(__self__, "redis_proxy_image", redis_proxy_image)
        if redis_proxy_version is not None:
            pulumi.set(__self__, "redis_proxy_version", redis_proxy_version)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enabled will toggle HA support globally for Argo CD.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="redisProxyImage")
    def redis_proxy_image(self) -> Optional[pulumi.Input[str]]:
        """
        RedisProxyImage is the Redis HAProxy container image.
        """
        return pulumi.get(self, "redis_proxy_image")

    @redis_proxy_image.setter
    def redis_proxy_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_proxy_image", value)

    @property
    @pulumi.getter(name="redisProxyVersion")
    def redis_proxy_version(self) -> Optional[pulumi.Input[str]]:
        """
        RedisProxyVersion is the Redis HAProxy container image tag.
        """
        return pulumi.get(self, "redis_proxy_version")

    @redis_proxy_version.setter
    def redis_proxy_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_proxy_version", value)


@pulumi.input_type
class ArgoCDSpecImportArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        Import is the import/restore options for ArgoCD.
        :param pulumi.Input[str] name: Name of an ArgoCDExport from which to import data.
        :param pulumi.Input[str] namespace: Namespace for the ArgoCDExport, defaults to the same namespace as the ArgoCD.
        """
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of an ArgoCDExport from which to import data.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace for the ArgoCDExport, defaults to the same namespace as the ArgoCD.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ArgoCDSpecInitialSSHKnownHostsArgs:
    def __init__(__self__, *,
                 excludedefaulthosts: Optional[pulumi.Input[bool]] = None,
                 keys: Optional[pulumi.Input[str]] = None):
        """
        InitialSSHKnownHosts defines the SSH known hosts data upon creation of the cluster for connecting Git repositories via SSH.
        :param pulumi.Input[bool] excludedefaulthosts: ExcludeDefaultHosts describes whether you would like to include the default list of SSH Known Hosts provided by ArgoCD.
        :param pulumi.Input[str] keys: Keys describes a custom set of SSH Known Hosts that you would like to have included in your ArgoCD server.
        """
        if excludedefaulthosts is not None:
            pulumi.set(__self__, "excludedefaulthosts", excludedefaulthosts)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)

    @property
    @pulumi.getter
    def excludedefaulthosts(self) -> Optional[pulumi.Input[bool]]:
        """
        ExcludeDefaultHosts describes whether you would like to include the default list of SSH Known Hosts provided by ArgoCD.
        """
        return pulumi.get(self, "excludedefaulthosts")

    @excludedefaulthosts.setter
    def excludedefaulthosts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "excludedefaulthosts", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[str]]:
        """
        Keys describes a custom set of SSH Known Hosts that you would like to have included in your ArgoCD server.
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keys", value)


@pulumi.input_type
class ArgoCDSpecPrometheusArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 host: Optional[pulumi.Input[str]] = None,
                 ingress: Optional[pulumi.Input['ArgoCDSpecPrometheusIngressArgs']] = None,
                 route: Optional[pulumi.Input['ArgoCDSpecPrometheusRouteArgs']] = None,
                 size: Optional[pulumi.Input[int]] = None):
        """
        Prometheus defines the Prometheus server options for ArgoCD.
        :param pulumi.Input[bool] enabled: Enabled will toggle Prometheus support globally for ArgoCD.
        :param pulumi.Input[str] host: Host is the hostname to use for Ingress/Route resources.
        :param pulumi.Input['ArgoCDSpecPrometheusIngressArgs'] ingress: Ingress defines the desired state for an Ingress for the Prometheus component.
        :param pulumi.Input['ArgoCDSpecPrometheusRouteArgs'] route: Route defines the desired state for an OpenShift Route for the Prometheus component.
        :param pulumi.Input[int] size: Size is the replica count for the Prometheus StatefulSet.
        """
        pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enabled will toggle Prometheus support globally for ArgoCD.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host is the hostname to use for Ingress/Route resources.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ArgoCDSpecPrometheusIngressArgs']]:
        """
        Ingress defines the desired state for an Ingress for the Prometheus component.
        """
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ArgoCDSpecPrometheusIngressArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input['ArgoCDSpecPrometheusRouteArgs']]:
        """
        Route defines the desired state for an OpenShift Route for the Prometheus component.
        """
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input['ArgoCDSpecPrometheusRouteArgs']]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Size is the replica count for the Prometheus StatefulSet.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class ArgoCDSpecPrometheusIngressArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input[Sequence[pulumi.Input['ArgoCDSpecPrometheusIngressTlsArgs']]]] = None):
        """
        Ingress defines the desired state for an Ingress for the Prometheus component.
        :param pulumi.Input[bool] enabled: Enabled will toggle the creation of the Ingress.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations is the map of annotations to apply to the Ingress.
        :param pulumi.Input[str] path: Path used for the Ingress resource.
        :param pulumi.Input[Sequence[pulumi.Input['ArgoCDSpecPrometheusIngressTlsArgs']]] tls: TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        """
        pulumi.set(__self__, "enabled", enabled)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enabled will toggle the creation of the Ingress.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations is the map of annotations to apply to the Ingress.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path used for the Ingress resource.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArgoCDSpecPrometheusIngressTlsArgs']]]]:
        """
        TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArgoCDSpecPrometheusIngressTlsArgs']]]]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class ArgoCDSpecPrometheusIngressTlsArgs:
    def __init__(__self__, *,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        """
        IngressTLS describes the transport layer security associated with an Ingress.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
        :param pulumi.Input[str] secret_name: SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ArgoCDSpecPrometheusRouteArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input['ArgoCDSpecPrometheusRouteTlsArgs']] = None,
                 wildcard_policy: Optional[pulumi.Input[str]] = None):
        """
        Route defines the desired state for an OpenShift Route for the Prometheus component.
        :param pulumi.Input[bool] enabled: Enabled will toggle the creation of the OpenShift Route.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations is the map of annotations to use for the Route resource.
        :param pulumi.Input[str] path: Path the router watches for, to route traffic for to the service.
        :param pulumi.Input['ArgoCDSpecPrometheusRouteTlsArgs'] tls: TLS provides the ability to configure certificates and termination for the Route.
        :param pulumi.Input[str] wildcard_policy: WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
        """
        pulumi.set(__self__, "enabled", enabled)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if wildcard_policy is not None:
            pulumi.set(__self__, "wildcard_policy", wildcard_policy)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enabled will toggle the creation of the OpenShift Route.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations is the map of annotations to use for the Route resource.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path the router watches for, to route traffic for to the service.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['ArgoCDSpecPrometheusRouteTlsArgs']]:
        """
        TLS provides the ability to configure certificates and termination for the Route.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['ArgoCDSpecPrometheusRouteTlsArgs']]):
        pulumi.set(self, "tls", value)

    @property
    @pulumi.getter(name="wildcardPolicy")
    def wildcard_policy(self) -> Optional[pulumi.Input[str]]:
        """
        WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
        """
        return pulumi.get(self, "wildcard_policy")

    @wildcard_policy.setter
    def wildcard_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wildcard_policy", value)


@pulumi.input_type
class ArgoCDSpecPrometheusRouteTlsArgs:
    def __init__(__self__, *,
                 termination: pulumi.Input[str],
                 ca_certificate: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 destination_ca_certificate: Optional[pulumi.Input[str]] = None,
                 insecure_edge_termination_policy: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        """
        TLS provides the ability to configure certificates and termination for the Route.
        :param pulumi.Input[str] termination: termination indicates termination type.
        :param pulumi.Input[str] ca_certificate: caCertificate provides the cert authority certificate contents
        :param pulumi.Input[str] certificate: certificate provides certificate contents
        :param pulumi.Input[str] destination_ca_certificate: destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
        :param pulumi.Input[str] insecure_edge_termination_policy: insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. 
                * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
        :param pulumi.Input[str] key: key provides key file contents
        """
        pulumi.set(__self__, "termination", termination)
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if destination_ca_certificate is not None:
            pulumi.set(__self__, "destination_ca_certificate", destination_ca_certificate)
        if insecure_edge_termination_policy is not None:
            pulumi.set(__self__, "insecure_edge_termination_policy", insecure_edge_termination_policy)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def termination(self) -> pulumi.Input[str]:
        """
        termination indicates termination type.
        """
        return pulumi.get(self, "termination")

    @termination.setter
    def termination(self, value: pulumi.Input[str]):
        pulumi.set(self, "termination", value)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        caCertificate provides the cert authority certificate contents
        """
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        certificate provides certificate contents
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="destinationCACertificate")
    def destination_ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
        """
        return pulumi.get(self, "destination_ca_certificate")

    @destination_ca_certificate.setter
    def destination_ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_ca_certificate", value)

    @property
    @pulumi.getter(name="insecureEdgeTerminationPolicy")
    def insecure_edge_termination_policy(self) -> Optional[pulumi.Input[str]]:
        """
        insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. 
         * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
        """
        return pulumi.get(self, "insecure_edge_termination_policy")

    @insecure_edge_termination_policy.setter
    def insecure_edge_termination_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insecure_edge_termination_policy", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key provides key file contents
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ArgoCDSpecRbacArgs:
    def __init__(__self__, *,
                 default_policy: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[str]] = None):
        """
        RBAC defines the RBAC configuration for Argo CD.
        :param pulumi.Input[str] default_policy: DefaultPolicy is the name of the default role which Argo CD will falls back to, when authorizing API requests (optional). If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
        :param pulumi.Input[str] policy: Policy is CSV containing user-defined RBAC policies and role definitions. Policy rules are in the form:   p, subject, resource, action, object, effect Role definitions and bindings are in the form:   g, subject, inherited-subject See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.
        :param pulumi.Input[str] scopes: Scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope). If omitted, defaults to: '[groups]'.
        """
        if default_policy is not None:
            pulumi.set(__self__, "default_policy", default_policy)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter(name="defaultPolicy")
    def default_policy(self) -> Optional[pulumi.Input[str]]:
        """
        DefaultPolicy is the name of the default role which Argo CD will falls back to, when authorizing API requests (optional). If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
        """
        return pulumi.get(self, "default_policy")

    @default_policy.setter
    def default_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_policy", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        """
        Policy is CSV containing user-defined RBAC policies and role definitions. Policy rules are in the form:   p, subject, resource, action, object, effect Role definitions and bindings are in the form:   g, subject, inherited-subject See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[str]]:
        """
        Scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope). If omitted, defaults to: '[groups]'.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scopes", value)


@pulumi.input_type
class ArgoCDSpecRedisArgs:
    def __init__(__self__, *,
                 image: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['ArgoCDSpecRedisResourcesArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Redis defines the Redis server options for ArgoCD.
        :param pulumi.Input[str] image: Image is the Redis container image.
        :param pulumi.Input['ArgoCDSpecRedisResourcesArgs'] resources: Resources defines the Compute Resources required by the container for Redis.
        :param pulumi.Input[str] version: Version is the Redis container image tag.
        """
        if image is not None:
            pulumi.set(__self__, "image", image)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Image is the Redis container image.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ArgoCDSpecRedisResourcesArgs']]:
        """
        Resources defines the Compute Resources required by the container for Redis.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ArgoCDSpecRedisResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version is the Redis container image tag.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ArgoCDSpecRedisResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecRedisResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecRedisResourcesRequestsArgs']]]] = None):
        """
        Resources defines the Compute Resources required by the container for Redis.
        :param pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecRedisResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecRedisResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecRedisResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecRedisResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecRedisResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecRedisResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ArgoCDSpecRedisResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ArgoCDSpecRedisResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ArgoCDSpecRepoArgs:
    def __init__(__self__, *,
                 mountsatoken: Optional[pulumi.Input[bool]] = None,
                 resources: Optional[pulumi.Input['ArgoCDSpecRepoResourcesArgs']] = None,
                 serviceaccount: Optional[pulumi.Input[str]] = None):
        """
        Repo defines the repo server options for Argo CD.
        :param pulumi.Input[bool] mountsatoken: MountSAToken describes whether you would like to have the Repo server mount the service account token
        :param pulumi.Input['ArgoCDSpecRepoResourcesArgs'] resources: Resources defines the Compute Resources required by the container for Redis.
        :param pulumi.Input[str] serviceaccount: ServiceAccount defines the ServiceAccount user that you would like the Repo server to use
        """
        if mountsatoken is not None:
            pulumi.set(__self__, "mountsatoken", mountsatoken)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if serviceaccount is not None:
            pulumi.set(__self__, "serviceaccount", serviceaccount)

    @property
    @pulumi.getter
    def mountsatoken(self) -> Optional[pulumi.Input[bool]]:
        """
        MountSAToken describes whether you would like to have the Repo server mount the service account token
        """
        return pulumi.get(self, "mountsatoken")

    @mountsatoken.setter
    def mountsatoken(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mountsatoken", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ArgoCDSpecRepoResourcesArgs']]:
        """
        Resources defines the Compute Resources required by the container for Redis.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ArgoCDSpecRepoResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def serviceaccount(self) -> Optional[pulumi.Input[str]]:
        """
        ServiceAccount defines the ServiceAccount user that you would like the Repo server to use
        """
        return pulumi.get(self, "serviceaccount")

    @serviceaccount.setter
    def serviceaccount(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serviceaccount", value)


@pulumi.input_type
class ArgoCDSpecRepoResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecRepoResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecRepoResourcesRequestsArgs']]]] = None):
        """
        Resources defines the Compute Resources required by the container for Redis.
        :param pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecRepoResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecRepoResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecRepoResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecRepoResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecRepoResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecRepoResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ArgoCDSpecRepoResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ArgoCDSpecRepoResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ArgoCDSpecServerArgs:
    def __init__(__self__, *,
                 autoscale: Optional[pulumi.Input['ArgoCDSpecServerAutoscaleArgs']] = None,
                 grpc: Optional[pulumi.Input['ArgoCDSpecServerGrpcArgs']] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 ingress: Optional[pulumi.Input['ArgoCDSpecServerIngressArgs']] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 resources: Optional[pulumi.Input['ArgoCDSpecServerResourcesArgs']] = None,
                 route: Optional[pulumi.Input['ArgoCDSpecServerRouteArgs']] = None,
                 service: Optional[pulumi.Input['ArgoCDSpecServerServiceArgs']] = None):
        """
        Server defines the options for the ArgoCD Server component.
        :param pulumi.Input['ArgoCDSpecServerAutoscaleArgs'] autoscale: Autoscale defines the autoscale options for the Argo CD Server component.
        :param pulumi.Input['ArgoCDSpecServerGrpcArgs'] grpc: GRPC defines the state for the Argo CD Server GRPC options.
        :param pulumi.Input[str] host: Host is the hostname to use for Ingress/Route resources.
        :param pulumi.Input['ArgoCDSpecServerIngressArgs'] ingress: Ingress defines the desired state for an Ingress for the Argo CD Server component.
        :param pulumi.Input[bool] insecure: Insecure toggles the insecure flag.
        :param pulumi.Input['ArgoCDSpecServerResourcesArgs'] resources: Resources defines the Compute Resources required by the container for the Argo CD server component.
        :param pulumi.Input['ArgoCDSpecServerRouteArgs'] route: Route defines the desired state for an OpenShift Route for the Argo CD Server component.
        :param pulumi.Input['ArgoCDSpecServerServiceArgs'] service: Service defines the options for the Service backing the ArgoCD Server component.
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if grpc is not None:
            pulumi.set(__self__, "grpc", grpc)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input['ArgoCDSpecServerAutoscaleArgs']]:
        """
        Autoscale defines the autoscale options for the Argo CD Server component.
        """
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input['ArgoCDSpecServerAutoscaleArgs']]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter
    def grpc(self) -> Optional[pulumi.Input['ArgoCDSpecServerGrpcArgs']]:
        """
        GRPC defines the state for the Argo CD Server GRPC options.
        """
        return pulumi.get(self, "grpc")

    @grpc.setter
    def grpc(self, value: Optional[pulumi.Input['ArgoCDSpecServerGrpcArgs']]):
        pulumi.set(self, "grpc", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host is the hostname to use for Ingress/Route resources.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ArgoCDSpecServerIngressArgs']]:
        """
        Ingress defines the desired state for an Ingress for the Argo CD Server component.
        """
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ArgoCDSpecServerIngressArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Insecure toggles the insecure flag.
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ArgoCDSpecServerResourcesArgs']]:
        """
        Resources defines the Compute Resources required by the container for the Argo CD server component.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ArgoCDSpecServerResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input['ArgoCDSpecServerRouteArgs']]:
        """
        Route defines the desired state for an OpenShift Route for the Argo CD Server component.
        """
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input['ArgoCDSpecServerRouteArgs']]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ArgoCDSpecServerServiceArgs']]:
        """
        Service defines the options for the Service backing the ArgoCD Server component.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ArgoCDSpecServerServiceArgs']]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class ArgoCDSpecServerAutoscaleArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 hpa: Optional[pulumi.Input['ArgoCDSpecServerAutoscaleHpaArgs']] = None):
        """
        Autoscale defines the autoscale options for the Argo CD Server component.
        :param pulumi.Input[bool] enabled: Enabled will toggle autoscaling support for the Argo CD Server component.
        :param pulumi.Input['ArgoCDSpecServerAutoscaleHpaArgs'] hpa: HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.
        """
        pulumi.set(__self__, "enabled", enabled)
        if hpa is not None:
            pulumi.set(__self__, "hpa", hpa)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enabled will toggle autoscaling support for the Argo CD Server component.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hpa(self) -> Optional[pulumi.Input['ArgoCDSpecServerAutoscaleHpaArgs']]:
        """
        HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.
        """
        return pulumi.get(self, "hpa")

    @hpa.setter
    def hpa(self, value: Optional[pulumi.Input['ArgoCDSpecServerAutoscaleHpaArgs']]):
        pulumi.set(self, "hpa", value)


@pulumi.input_type
class ArgoCDSpecServerAutoscaleHpaArgs:
    def __init__(__self__, *,
                 max_replicas: pulumi.Input[int],
                 scale_target_ref: pulumi.Input['ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs'],
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 target_cpu_utilization_percentage: Optional[pulumi.Input[int]] = None):
        """
        HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.
        :param pulumi.Input[int] max_replicas: upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
        :param pulumi.Input['ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs'] scale_target_ref: reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
        :param pulumi.Input[int] min_replicas: minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        :param pulumi.Input[int] target_cpu_utilization_percentage: target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
        """
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "scale_target_ref", scale_target_ref)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> pulumi.Input[int]:
        """
        upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
        """
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="scaleTargetRef")
    def scale_target_ref(self) -> pulumi.Input['ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs']:
        """
        reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
        """
        return pulumi.get(self, "scale_target_ref")

    @scale_target_ref.setter
    def scale_target_ref(self, value: pulumi.Input['ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs']):
        pulumi.set(self, "scale_target_ref", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        """
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[pulumi.Input[int]]:
        """
        target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
        """
        return pulumi.get(self, "target_cpu_utilization_percentage")

    @target_cpu_utilization_percentage.setter
    def target_cpu_utilization_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_utilization_percentage", value)


@pulumi.input_type
class ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
        :param pulumi.Input[str] kind: Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        :param pulumi.Input[str] name: Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param pulumi.Input[str] api_version: API version of the referent
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        API version of the referent
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class ArgoCDSpecServerGrpcArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 ingress: Optional[pulumi.Input['ArgoCDSpecServerGrpcIngressArgs']] = None):
        """
        GRPC defines the state for the Argo CD Server GRPC options.
        :param pulumi.Input[str] host: Host is the hostname to use for Ingress/Route resources.
        :param pulumi.Input['ArgoCDSpecServerGrpcIngressArgs'] ingress: Ingress defines the desired state for the Argo CD Server GRPC Ingress.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host is the hostname to use for Ingress/Route resources.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ArgoCDSpecServerGrpcIngressArgs']]:
        """
        Ingress defines the desired state for the Argo CD Server GRPC Ingress.
        """
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ArgoCDSpecServerGrpcIngressArgs']]):
        pulumi.set(self, "ingress", value)


@pulumi.input_type
class ArgoCDSpecServerGrpcIngressArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input[Sequence[pulumi.Input['ArgoCDSpecServerGrpcIngressTlsArgs']]]] = None):
        """
        Ingress defines the desired state for the Argo CD Server GRPC Ingress.
        :param pulumi.Input[bool] enabled: Enabled will toggle the creation of the Ingress.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations is the map of annotations to apply to the Ingress.
        :param pulumi.Input[str] path: Path used for the Ingress resource.
        :param pulumi.Input[Sequence[pulumi.Input['ArgoCDSpecServerGrpcIngressTlsArgs']]] tls: TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        """
        pulumi.set(__self__, "enabled", enabled)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enabled will toggle the creation of the Ingress.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations is the map of annotations to apply to the Ingress.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path used for the Ingress resource.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArgoCDSpecServerGrpcIngressTlsArgs']]]]:
        """
        TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArgoCDSpecServerGrpcIngressTlsArgs']]]]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class ArgoCDSpecServerGrpcIngressTlsArgs:
    def __init__(__self__, *,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        """
        IngressTLS describes the transport layer security associated with an Ingress.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
        :param pulumi.Input[str] secret_name: SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ArgoCDSpecServerIngressArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input[Sequence[pulumi.Input['ArgoCDSpecServerIngressTlsArgs']]]] = None):
        """
        Ingress defines the desired state for an Ingress for the Argo CD Server component.
        :param pulumi.Input[bool] enabled: Enabled will toggle the creation of the Ingress.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations is the map of annotations to apply to the Ingress.
        :param pulumi.Input[str] path: Path used for the Ingress resource.
        :param pulumi.Input[Sequence[pulumi.Input['ArgoCDSpecServerIngressTlsArgs']]] tls: TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        """
        pulumi.set(__self__, "enabled", enabled)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enabled will toggle the creation of the Ingress.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations is the map of annotations to apply to the Ingress.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path used for the Ingress resource.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArgoCDSpecServerIngressTlsArgs']]]]:
        """
        TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArgoCDSpecServerIngressTlsArgs']]]]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class ArgoCDSpecServerIngressTlsArgs:
    def __init__(__self__, *,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        """
        IngressTLS describes the transport layer security associated with an Ingress.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
        :param pulumi.Input[str] secret_name: SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ArgoCDSpecServerResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecServerResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecServerResourcesRequestsArgs']]]] = None):
        """
        Resources defines the Compute Resources required by the container for the Argo CD server component.
        :param pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecServerResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecServerResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecServerResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecServerResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecServerResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ArgoCDSpecServerResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ArgoCDSpecServerResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ArgoCDSpecServerResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ArgoCDSpecServerRouteArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input['ArgoCDSpecServerRouteTlsArgs']] = None,
                 wildcard_policy: Optional[pulumi.Input[str]] = None):
        """
        Route defines the desired state for an OpenShift Route for the Argo CD Server component.
        :param pulumi.Input[bool] enabled: Enabled will toggle the creation of the OpenShift Route.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations is the map of annotations to use for the Route resource.
        :param pulumi.Input[str] path: Path the router watches for, to route traffic for to the service.
        :param pulumi.Input['ArgoCDSpecServerRouteTlsArgs'] tls: TLS provides the ability to configure certificates and termination for the Route.
        :param pulumi.Input[str] wildcard_policy: WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
        """
        pulumi.set(__self__, "enabled", enabled)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if wildcard_policy is not None:
            pulumi.set(__self__, "wildcard_policy", wildcard_policy)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enabled will toggle the creation of the OpenShift Route.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations is the map of annotations to use for the Route resource.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path the router watches for, to route traffic for to the service.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['ArgoCDSpecServerRouteTlsArgs']]:
        """
        TLS provides the ability to configure certificates and termination for the Route.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['ArgoCDSpecServerRouteTlsArgs']]):
        pulumi.set(self, "tls", value)

    @property
    @pulumi.getter(name="wildcardPolicy")
    def wildcard_policy(self) -> Optional[pulumi.Input[str]]:
        """
        WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
        """
        return pulumi.get(self, "wildcard_policy")

    @wildcard_policy.setter
    def wildcard_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wildcard_policy", value)


@pulumi.input_type
class ArgoCDSpecServerRouteTlsArgs:
    def __init__(__self__, *,
                 termination: pulumi.Input[str],
                 ca_certificate: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 destination_ca_certificate: Optional[pulumi.Input[str]] = None,
                 insecure_edge_termination_policy: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        """
        TLS provides the ability to configure certificates and termination for the Route.
        :param pulumi.Input[str] termination: termination indicates termination type.
        :param pulumi.Input[str] ca_certificate: caCertificate provides the cert authority certificate contents
        :param pulumi.Input[str] certificate: certificate provides certificate contents
        :param pulumi.Input[str] destination_ca_certificate: destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
        :param pulumi.Input[str] insecure_edge_termination_policy: insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. 
                * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
        :param pulumi.Input[str] key: key provides key file contents
        """
        pulumi.set(__self__, "termination", termination)
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if destination_ca_certificate is not None:
            pulumi.set(__self__, "destination_ca_certificate", destination_ca_certificate)
        if insecure_edge_termination_policy is not None:
            pulumi.set(__self__, "insecure_edge_termination_policy", insecure_edge_termination_policy)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def termination(self) -> pulumi.Input[str]:
        """
        termination indicates termination type.
        """
        return pulumi.get(self, "termination")

    @termination.setter
    def termination(self, value: pulumi.Input[str]):
        pulumi.set(self, "termination", value)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        caCertificate provides the cert authority certificate contents
        """
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        certificate provides certificate contents
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="destinationCACertificate")
    def destination_ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
        """
        return pulumi.get(self, "destination_ca_certificate")

    @destination_ca_certificate.setter
    def destination_ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_ca_certificate", value)

    @property
    @pulumi.getter(name="insecureEdgeTerminationPolicy")
    def insecure_edge_termination_policy(self) -> Optional[pulumi.Input[str]]:
        """
        insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. 
         * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
        """
        return pulumi.get(self, "insecure_edge_termination_policy")

    @insecure_edge_termination_policy.setter
    def insecure_edge_termination_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insecure_edge_termination_policy", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key provides key file contents
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ArgoCDSpecServerServiceArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str]):
        """
        Service defines the options for the Service backing the ArgoCD Server component.
        :param pulumi.Input[str] type: Type is the ServiceType to use for the Service resource.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type is the ServiceType to use for the Service resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ArgoCDSpecTlsArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input['ArgoCDSpecTlsCaArgs']] = None,
                 initial_certs: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        TLS defines the TLS options for ArgoCD.
        :param pulumi.Input['ArgoCDSpecTlsCaArgs'] ca: CA defines the CA options.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] initial_certs: InitialCerts defines custom TLS certificates upon creation of the cluster for connecting Git repositories via HTTPS.
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if initial_certs is not None:
            pulumi.set(__self__, "initial_certs", initial_certs)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input['ArgoCDSpecTlsCaArgs']]:
        """
        CA defines the CA options.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input['ArgoCDSpecTlsCaArgs']]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="initialCerts")
    def initial_certs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        InitialCerts defines custom TLS certificates upon creation of the cluster for connecting Git repositories via HTTPS.
        """
        return pulumi.get(self, "initial_certs")

    @initial_certs.setter
    def initial_certs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "initial_certs", value)


@pulumi.input_type
class ArgoCDSpecTlsCaArgs:
    def __init__(__self__, *,
                 config_map_name: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        """
        CA defines the CA options.
        :param pulumi.Input[str] config_map_name: ConfigMapName is the name of the ConfigMap containing the CA Certificate.
        :param pulumi.Input[str] secret_name: SecretName is the name of the Secret containing the CA Certificate and Key.
        """
        if config_map_name is not None:
            pulumi.set(__self__, "config_map_name", config_map_name)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="configMapName")
    def config_map_name(self) -> Optional[pulumi.Input[str]]:
        """
        ConfigMapName is the name of the ConfigMap containing the CA Certificate.
        """
        return pulumi.get(self, "config_map_name")

    @config_map_name.setter
    def config_map_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_map_name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        SecretName is the name of the Secret containing the CA Certificate and Key.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ArgoCDStatusArgs:
    def __init__(__self__, *,
                 application_controller: Optional[pulumi.Input[str]] = None,
                 dex: Optional[pulumi.Input[str]] = None,
                 phase: Optional[pulumi.Input[str]] = None,
                 redis: Optional[pulumi.Input[str]] = None,
                 repo: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None):
        """
        ArgoCDStatus defines the observed state of ArgoCD
        :param pulumi.Input[str] application_controller: ApplicationController is a simple, high-level summary of where the Argo CD application controller component is in its lifecycle. There are five possible ApplicationController values: Pending: The Argo CD application controller component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD application controller component are in a Ready state. Failed: At least one of the  Argo CD application controller component Pods had a failure. Unknown: For some reason the state of the Argo CD application controller component could not be obtained.
        :param pulumi.Input[str] dex: Dex is a simple, high-level summary of where the Argo CD Dex component is in its lifecycle. There are five possible dex values: Pending: The Argo CD Dex component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Dex component are in a Ready state. Failed: At least one of the  Argo CD Dex component Pods had a failure. Unknown: For some reason the state of the Argo CD Dex component could not be obtained.
        :param pulumi.Input[str] phase: Phase is a simple, high-level summary of where the ArgoCD is in its lifecycle. There are five possible phase values: Pending: The ArgoCD has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Available: All of the resources for the ArgoCD are ready. Failed: At least one resource has experienced a failure. Unknown: For some reason the state of the ArgoCD phase could not be obtained.
        :param pulumi.Input[str] redis: Redis is a simple, high-level summary of where the Argo CD Redis component is in its lifecycle. There are five possible redis values: Pending: The Argo CD Redis component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Redis component are in a Ready state. Failed: At least one of the  Argo CD Redis component Pods had a failure. Unknown: For some reason the state of the Argo CD Redis component could not be obtained.
        :param pulumi.Input[str] repo: Repo is a simple, high-level summary of where the Argo CD Repo component is in its lifecycle. There are five possible repo values: Pending: The Argo CD Repo component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Repo component are in a Ready state. Failed: At least one of the  Argo CD Repo component Pods had a failure. Unknown: For some reason the state of the Argo CD Repo component could not be obtained.
        :param pulumi.Input[str] server: Server is a simple, high-level summary of where the Argo CD server component is in its lifecycle. There are five possible server values: Pending: The Argo CD server component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD server component are in a Ready state. Failed: At least one of the  Argo CD server component Pods had a failure. Unknown: For some reason the state of the Argo CD server component could not be obtained.
        """
        if application_controller is not None:
            pulumi.set(__self__, "application_controller", application_controller)
        if dex is not None:
            pulumi.set(__self__, "dex", dex)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)
        if repo is not None:
            pulumi.set(__self__, "repo", repo)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="applicationController")
    def application_controller(self) -> Optional[pulumi.Input[str]]:
        """
        ApplicationController is a simple, high-level summary of where the Argo CD application controller component is in its lifecycle. There are five possible ApplicationController values: Pending: The Argo CD application controller component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD application controller component are in a Ready state. Failed: At least one of the  Argo CD application controller component Pods had a failure. Unknown: For some reason the state of the Argo CD application controller component could not be obtained.
        """
        return pulumi.get(self, "application_controller")

    @application_controller.setter
    def application_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_controller", value)

    @property
    @pulumi.getter
    def dex(self) -> Optional[pulumi.Input[str]]:
        """
        Dex is a simple, high-level summary of where the Argo CD Dex component is in its lifecycle. There are five possible dex values: Pending: The Argo CD Dex component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Dex component are in a Ready state. Failed: At least one of the  Argo CD Dex component Pods had a failure. Unknown: For some reason the state of the Argo CD Dex component could not be obtained.
        """
        return pulumi.get(self, "dex")

    @dex.setter
    def dex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dex", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[pulumi.Input[str]]:
        """
        Phase is a simple, high-level summary of where the ArgoCD is in its lifecycle. There are five possible phase values: Pending: The ArgoCD has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Available: All of the resources for the ArgoCD are ready. Failed: At least one resource has experienced a failure. Unknown: For some reason the state of the ArgoCD phase could not be obtained.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[pulumi.Input[str]]:
        """
        Redis is a simple, high-level summary of where the Argo CD Redis component is in its lifecycle. There are five possible redis values: Pending: The Argo CD Redis component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Redis component are in a Ready state. Failed: At least one of the  Argo CD Redis component Pods had a failure. Unknown: For some reason the state of the Argo CD Redis component could not be obtained.
        """
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis", value)

    @property
    @pulumi.getter
    def repo(self) -> Optional[pulumi.Input[str]]:
        """
        Repo is a simple, high-level summary of where the Argo CD Repo component is in its lifecycle. There are five possible repo values: Pending: The Argo CD Repo component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Repo component are in a Ready state. Failed: At least one of the  Argo CD Repo component Pods had a failure. Unknown: For some reason the state of the Argo CD Repo component could not be obtained.
        """
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server is a simple, high-level summary of where the Argo CD server component is in its lifecycle. There are five possible server values: Pending: The Argo CD server component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD server component are in a Ready state. Failed: At least one of the  Argo CD server component Pods had a failure. Unknown: For some reason the state of the Argo CD server component could not be obtained.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)



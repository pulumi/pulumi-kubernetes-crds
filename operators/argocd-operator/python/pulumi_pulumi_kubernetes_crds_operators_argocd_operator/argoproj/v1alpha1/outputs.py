# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'AppProjectSpec',
    'AppProjectSpecClusterResourceBlacklist',
    'AppProjectSpecClusterResourceWhitelist',
    'AppProjectSpecDestinations',
    'AppProjectSpecNamespaceResourceBlacklist',
    'AppProjectSpecNamespaceResourceWhitelist',
    'AppProjectSpecOrphanedResources',
    'AppProjectSpecOrphanedResourcesIgnore',
    'AppProjectSpecRoles',
    'AppProjectSpecRolesJwtTokens',
    'AppProjectSpecSignatureKeys',
    'AppProjectSpecSyncWindows',
    'ApplicationOperation',
    'ApplicationOperationInfo',
    'ApplicationOperationInitiatedBy',
    'ApplicationOperationRetry',
    'ApplicationOperationRetryBackoff',
    'ApplicationOperationSync',
    'ApplicationOperationSyncResources',
    'ApplicationOperationSyncSource',
    'ApplicationOperationSyncSourceDirectory',
    'ApplicationOperationSyncSourceDirectoryJsonnet',
    'ApplicationOperationSyncSourceDirectoryJsonnetExtVars',
    'ApplicationOperationSyncSourceDirectoryJsonnetTlas',
    'ApplicationOperationSyncSourceHelm',
    'ApplicationOperationSyncSourceHelmFileParameters',
    'ApplicationOperationSyncSourceHelmParameters',
    'ApplicationOperationSyncSourceKsonnet',
    'ApplicationOperationSyncSourceKsonnetParameters',
    'ApplicationOperationSyncSourceKustomize',
    'ApplicationOperationSyncSourcePlugin',
    'ApplicationOperationSyncSourcePluginEnv',
    'ApplicationOperationSyncSyncStrategy',
    'ApplicationOperationSyncSyncStrategyApply',
    'ApplicationOperationSyncSyncStrategyHook',
    'ApplicationSpec',
    'ApplicationSpecDestination',
    'ApplicationSpecIgnoreDifferences',
    'ApplicationSpecInfo',
    'ApplicationSpecSource',
    'ApplicationSpecSourceDirectory',
    'ApplicationSpecSourceDirectoryJsonnet',
    'ApplicationSpecSourceDirectoryJsonnetExtVars',
    'ApplicationSpecSourceDirectoryJsonnetTlas',
    'ApplicationSpecSourceHelm',
    'ApplicationSpecSourceHelmFileParameters',
    'ApplicationSpecSourceHelmParameters',
    'ApplicationSpecSourceKsonnet',
    'ApplicationSpecSourceKsonnetParameters',
    'ApplicationSpecSourceKustomize',
    'ApplicationSpecSourcePlugin',
    'ApplicationSpecSourcePluginEnv',
    'ApplicationSpecSyncPolicy',
    'ApplicationSpecSyncPolicyAutomated',
    'ApplicationSpecSyncPolicyRetry',
    'ApplicationSpecSyncPolicyRetryBackoff',
    'ApplicationStatus',
    'ApplicationStatusConditions',
    'ApplicationStatusHealth',
    'ApplicationStatusHistory',
    'ApplicationStatusHistorySource',
    'ApplicationStatusHistorySourceDirectory',
    'ApplicationStatusHistorySourceDirectoryJsonnet',
    'ApplicationStatusHistorySourceDirectoryJsonnetExtVars',
    'ApplicationStatusHistorySourceDirectoryJsonnetTlas',
    'ApplicationStatusHistorySourceHelm',
    'ApplicationStatusHistorySourceHelmFileParameters',
    'ApplicationStatusHistorySourceHelmParameters',
    'ApplicationStatusHistorySourceKsonnet',
    'ApplicationStatusHistorySourceKsonnetParameters',
    'ApplicationStatusHistorySourceKustomize',
    'ApplicationStatusHistorySourcePlugin',
    'ApplicationStatusHistorySourcePluginEnv',
    'ApplicationStatusOperationState',
    'ApplicationStatusOperationStateOperation',
    'ApplicationStatusOperationStateOperationInfo',
    'ApplicationStatusOperationStateOperationInitiatedBy',
    'ApplicationStatusOperationStateOperationRetry',
    'ApplicationStatusOperationStateOperationRetryBackoff',
    'ApplicationStatusOperationStateOperationSync',
    'ApplicationStatusOperationStateOperationSyncResources',
    'ApplicationStatusOperationStateOperationSyncSource',
    'ApplicationStatusOperationStateOperationSyncSourceDirectory',
    'ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet',
    'ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars',
    'ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas',
    'ApplicationStatusOperationStateOperationSyncSourceHelm',
    'ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters',
    'ApplicationStatusOperationStateOperationSyncSourceHelmParameters',
    'ApplicationStatusOperationStateOperationSyncSourceKsonnet',
    'ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters',
    'ApplicationStatusOperationStateOperationSyncSourceKustomize',
    'ApplicationStatusOperationStateOperationSyncSourcePlugin',
    'ApplicationStatusOperationStateOperationSyncSourcePluginEnv',
    'ApplicationStatusOperationStateOperationSyncSyncStrategy',
    'ApplicationStatusOperationStateOperationSyncSyncStrategyApply',
    'ApplicationStatusOperationStateOperationSyncSyncStrategyHook',
    'ApplicationStatusOperationStateSyncResult',
    'ApplicationStatusOperationStateSyncResultResources',
    'ApplicationStatusOperationStateSyncResultSource',
    'ApplicationStatusOperationStateSyncResultSourceDirectory',
    'ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet',
    'ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars',
    'ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas',
    'ApplicationStatusOperationStateSyncResultSourceHelm',
    'ApplicationStatusOperationStateSyncResultSourceHelmFileParameters',
    'ApplicationStatusOperationStateSyncResultSourceHelmParameters',
    'ApplicationStatusOperationStateSyncResultSourceKsonnet',
    'ApplicationStatusOperationStateSyncResultSourceKsonnetParameters',
    'ApplicationStatusOperationStateSyncResultSourceKustomize',
    'ApplicationStatusOperationStateSyncResultSourcePlugin',
    'ApplicationStatusOperationStateSyncResultSourcePluginEnv',
    'ApplicationStatusResources',
    'ApplicationStatusResourcesHealth',
    'ApplicationStatusSummary',
    'ApplicationStatusSync',
    'ApplicationStatusSyncComparedTo',
    'ApplicationStatusSyncComparedToDestination',
    'ApplicationStatusSyncComparedToSource',
    'ApplicationStatusSyncComparedToSourceDirectory',
    'ApplicationStatusSyncComparedToSourceDirectoryJsonnet',
    'ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars',
    'ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas',
    'ApplicationStatusSyncComparedToSourceHelm',
    'ApplicationStatusSyncComparedToSourceHelmFileParameters',
    'ApplicationStatusSyncComparedToSourceHelmParameters',
    'ApplicationStatusSyncComparedToSourceKsonnet',
    'ApplicationStatusSyncComparedToSourceKsonnetParameters',
    'ApplicationStatusSyncComparedToSourceKustomize',
    'ApplicationStatusSyncComparedToSourcePlugin',
    'ApplicationStatusSyncComparedToSourcePluginEnv',
    'ArgoCDExportSpec',
    'ArgoCDExportSpecStorage',
    'ArgoCDExportSpecStoragePvc',
    'ArgoCDExportSpecStoragePvcDataSource',
    'ArgoCDExportSpecStoragePvcResources',
    'ArgoCDExportSpecStoragePvcResourcesLimits',
    'ArgoCDExportSpecStoragePvcResourcesRequests',
    'ArgoCDExportSpecStoragePvcSelector',
    'ArgoCDExportSpecStoragePvcSelectorMatchExpressions',
    'ArgoCDExportStatus',
    'ArgoCDSpec',
    'ArgoCDSpecController',
    'ArgoCDSpecControllerProcessors',
    'ArgoCDSpecControllerResources',
    'ArgoCDSpecControllerResourcesLimits',
    'ArgoCDSpecControllerResourcesRequests',
    'ArgoCDSpecDex',
    'ArgoCDSpecDexResources',
    'ArgoCDSpecDexResourcesLimits',
    'ArgoCDSpecDexResourcesRequests',
    'ArgoCDSpecGrafana',
    'ArgoCDSpecGrafanaIngress',
    'ArgoCDSpecGrafanaIngressTls',
    'ArgoCDSpecGrafanaResources',
    'ArgoCDSpecGrafanaResourcesLimits',
    'ArgoCDSpecGrafanaResourcesRequests',
    'ArgoCDSpecGrafanaRoute',
    'ArgoCDSpecGrafanaRouteTls',
    'ArgoCDSpecHa',
    'ArgoCDSpecImport',
    'ArgoCDSpecInitialSSHKnownHosts',
    'ArgoCDSpecPrometheus',
    'ArgoCDSpecPrometheusIngress',
    'ArgoCDSpecPrometheusIngressTls',
    'ArgoCDSpecPrometheusRoute',
    'ArgoCDSpecPrometheusRouteTls',
    'ArgoCDSpecRbac',
    'ArgoCDSpecRedis',
    'ArgoCDSpecRedisResources',
    'ArgoCDSpecRedisResourcesLimits',
    'ArgoCDSpecRedisResourcesRequests',
    'ArgoCDSpecRepo',
    'ArgoCDSpecRepoResources',
    'ArgoCDSpecRepoResourcesLimits',
    'ArgoCDSpecRepoResourcesRequests',
    'ArgoCDSpecServer',
    'ArgoCDSpecServerAutoscale',
    'ArgoCDSpecServerAutoscaleHpa',
    'ArgoCDSpecServerAutoscaleHpaScaleTargetRef',
    'ArgoCDSpecServerGrpc',
    'ArgoCDSpecServerGrpcIngress',
    'ArgoCDSpecServerGrpcIngressTls',
    'ArgoCDSpecServerIngress',
    'ArgoCDSpecServerIngressTls',
    'ArgoCDSpecServerResources',
    'ArgoCDSpecServerResourcesLimits',
    'ArgoCDSpecServerResourcesRequests',
    'ArgoCDSpecServerRoute',
    'ArgoCDSpecServerRouteTls',
    'ArgoCDSpecServerService',
    'ArgoCDSpecTls',
    'ArgoCDSpecTlsCa',
    'ArgoCDStatus',
]

@pulumi.output_type
class AppProjectSpec(dict):
    """
    AppProjectSpec is the specification of an AppProject
    """
    def __init__(__self__, *,
                 cluster_resource_blacklist: Optional[Sequence['outputs.AppProjectSpecClusterResourceBlacklist']] = None,
                 cluster_resource_whitelist: Optional[Sequence['outputs.AppProjectSpecClusterResourceWhitelist']] = None,
                 description: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.AppProjectSpecDestinations']] = None,
                 namespace_resource_blacklist: Optional[Sequence['outputs.AppProjectSpecNamespaceResourceBlacklist']] = None,
                 namespace_resource_whitelist: Optional[Sequence['outputs.AppProjectSpecNamespaceResourceWhitelist']] = None,
                 orphaned_resources: Optional['outputs.AppProjectSpecOrphanedResources'] = None,
                 roles: Optional[Sequence['outputs.AppProjectSpecRoles']] = None,
                 signature_keys: Optional[Sequence['outputs.AppProjectSpecSignatureKeys']] = None,
                 source_repos: Optional[Sequence[str]] = None,
                 sync_windows: Optional[Sequence['outputs.AppProjectSpecSyncWindows']] = None):
        """
        AppProjectSpec is the specification of an AppProject
        :param Sequence['AppProjectSpecClusterResourceBlacklistArgs'] cluster_resource_blacklist: ClusterResourceBlacklist contains list of blacklisted cluster level resources
        :param Sequence['AppProjectSpecClusterResourceWhitelistArgs'] cluster_resource_whitelist: ClusterResourceWhitelist contains list of whitelisted cluster level resources
        :param str description: Description contains optional project description
        :param Sequence['AppProjectSpecDestinationsArgs'] destinations: Destinations contains list of destinations available for deployment
        :param Sequence['AppProjectSpecNamespaceResourceBlacklistArgs'] namespace_resource_blacklist: NamespaceResourceBlacklist contains list of blacklisted namespace level resources
        :param Sequence['AppProjectSpecNamespaceResourceWhitelistArgs'] namespace_resource_whitelist: NamespaceResourceWhitelist contains list of whitelisted namespace level resources
        :param 'AppProjectSpecOrphanedResourcesArgs' orphaned_resources: OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
        :param Sequence['AppProjectSpecRolesArgs'] roles: Roles are user defined RBAC roles associated with this project
        :param Sequence['AppProjectSpecSignatureKeysArgs'] signature_keys: List of PGP key IDs that commits to be synced to must be signed with
        :param Sequence[str] source_repos: SourceRepos contains list of repository URLs which can be used for deployment
        :param Sequence['AppProjectSpecSyncWindowsArgs'] sync_windows: SyncWindows controls when syncs can be run for apps in this project
        """
        if cluster_resource_blacklist is not None:
            pulumi.set(__self__, "cluster_resource_blacklist", cluster_resource_blacklist)
        if cluster_resource_whitelist is not None:
            pulumi.set(__self__, "cluster_resource_whitelist", cluster_resource_whitelist)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if namespace_resource_blacklist is not None:
            pulumi.set(__self__, "namespace_resource_blacklist", namespace_resource_blacklist)
        if namespace_resource_whitelist is not None:
            pulumi.set(__self__, "namespace_resource_whitelist", namespace_resource_whitelist)
        if orphaned_resources is not None:
            pulumi.set(__self__, "orphaned_resources", orphaned_resources)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if signature_keys is not None:
            pulumi.set(__self__, "signature_keys", signature_keys)
        if source_repos is not None:
            pulumi.set(__self__, "source_repos", source_repos)
        if sync_windows is not None:
            pulumi.set(__self__, "sync_windows", sync_windows)

    @property
    @pulumi.getter(name="clusterResourceBlacklist")
    def cluster_resource_blacklist(self) -> Optional[Sequence['outputs.AppProjectSpecClusterResourceBlacklist']]:
        """
        ClusterResourceBlacklist contains list of blacklisted cluster level resources
        """
        return pulumi.get(self, "cluster_resource_blacklist")

    @property
    @pulumi.getter(name="clusterResourceWhitelist")
    def cluster_resource_whitelist(self) -> Optional[Sequence['outputs.AppProjectSpecClusterResourceWhitelist']]:
        """
        ClusterResourceWhitelist contains list of whitelisted cluster level resources
        """
        return pulumi.get(self, "cluster_resource_whitelist")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description contains optional project description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.AppProjectSpecDestinations']]:
        """
        Destinations contains list of destinations available for deployment
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="namespaceResourceBlacklist")
    def namespace_resource_blacklist(self) -> Optional[Sequence['outputs.AppProjectSpecNamespaceResourceBlacklist']]:
        """
        NamespaceResourceBlacklist contains list of blacklisted namespace level resources
        """
        return pulumi.get(self, "namespace_resource_blacklist")

    @property
    @pulumi.getter(name="namespaceResourceWhitelist")
    def namespace_resource_whitelist(self) -> Optional[Sequence['outputs.AppProjectSpecNamespaceResourceWhitelist']]:
        """
        NamespaceResourceWhitelist contains list of whitelisted namespace level resources
        """
        return pulumi.get(self, "namespace_resource_whitelist")

    @property
    @pulumi.getter(name="orphanedResources")
    def orphaned_resources(self) -> Optional['outputs.AppProjectSpecOrphanedResources']:
        """
        OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
        """
        return pulumi.get(self, "orphaned_resources")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence['outputs.AppProjectSpecRoles']]:
        """
        Roles are user defined RBAC roles associated with this project
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="signatureKeys")
    def signature_keys(self) -> Optional[Sequence['outputs.AppProjectSpecSignatureKeys']]:
        """
        List of PGP key IDs that commits to be synced to must be signed with
        """
        return pulumi.get(self, "signature_keys")

    @property
    @pulumi.getter(name="sourceRepos")
    def source_repos(self) -> Optional[Sequence[str]]:
        """
        SourceRepos contains list of repository URLs which can be used for deployment
        """
        return pulumi.get(self, "source_repos")

    @property
    @pulumi.getter(name="syncWindows")
    def sync_windows(self) -> Optional[Sequence['outputs.AppProjectSpecSyncWindows']]:
        """
        SyncWindows controls when syncs can be run for apps in this project
        """
        return pulumi.get(self, "sync_windows")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppProjectSpecClusterResourceBlacklist(dict):
    """
    GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
    """
    def __init__(__self__, *,
                 group: str,
                 kind: str):
        """
        GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def group(self) -> str:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppProjectSpecClusterResourceWhitelist(dict):
    """
    GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
    """
    def __init__(__self__, *,
                 group: str,
                 kind: str):
        """
        GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def group(self) -> str:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppProjectSpecDestinations(dict):
    """
    ApplicationDestination contains deployment destination information
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        ApplicationDestination contains deployment destination information
        :param str name: Name of the destination cluster which can be used instead of server (url) field
        :param str namespace: Namespace overrides the environment namespace value in the ksonnet app.yaml
        :param str server: Server overrides the environment server value in the ksonnet app.yaml
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the destination cluster which can be used instead of server (url) field
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace overrides the environment namespace value in the ksonnet app.yaml
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        Server overrides the environment server value in the ksonnet app.yaml
        """
        return pulumi.get(self, "server")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppProjectSpecNamespaceResourceBlacklist(dict):
    """
    GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
    """
    def __init__(__self__, *,
                 group: str,
                 kind: str):
        """
        GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def group(self) -> str:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppProjectSpecNamespaceResourceWhitelist(dict):
    """
    GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
    """
    def __init__(__self__, *,
                 group: str,
                 kind: str):
        """
        GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def group(self) -> str:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppProjectSpecOrphanedResources(dict):
    """
    OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
    """
    def __init__(__self__, *,
                 ignore: Optional[Sequence['outputs.AppProjectSpecOrphanedResourcesIgnore']] = None,
                 warn: Optional[bool] = None):
        """
        OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
        :param bool warn: Warn indicates if warning condition should be created for apps which have orphaned resources
        """
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if warn is not None:
            pulumi.set(__self__, "warn", warn)

    @property
    @pulumi.getter
    def ignore(self) -> Optional[Sequence['outputs.AppProjectSpecOrphanedResourcesIgnore']]:
        return pulumi.get(self, "ignore")

    @property
    @pulumi.getter
    def warn(self) -> Optional[bool]:
        """
        Warn indicates if warning condition should be created for apps which have orphaned resources
        """
        return pulumi.get(self, "warn")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppProjectSpecOrphanedResourcesIgnore(dict):
    def __init__(__self__, *,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None):
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppProjectSpecRoles(dict):
    """
    ProjectRole represents a role that has access to a project
    """
    def __init__(__self__, *,
                 name: str,
                 description: Optional[str] = None,
                 groups: Optional[Sequence[str]] = None,
                 jwt_tokens: Optional[Sequence['outputs.AppProjectSpecRolesJwtTokens']] = None,
                 policies: Optional[Sequence[str]] = None):
        """
        ProjectRole represents a role that has access to a project
        :param str name: Name is a name for this role
        :param str description: Description is a description of the role
        :param Sequence[str] groups: Groups are a list of OIDC group claims bound to this role
        :param Sequence['AppProjectSpecRolesJwtTokensArgs'] jwt_tokens: JWTTokens are a list of generated JWT tokens bound to this role
        :param Sequence[str] policies: Policies Stores a list of casbin formated strings that define access policies for the role in the project
        """
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if jwt_tokens is not None:
            pulumi.set(__self__, "jwt_tokens", jwt_tokens)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is a name for this role
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description is a description of the role
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[str]]:
        """
        Groups are a list of OIDC group claims bound to this role
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="jwtTokens")
    def jwt_tokens(self) -> Optional[Sequence['outputs.AppProjectSpecRolesJwtTokens']]:
        """
        JWTTokens are a list of generated JWT tokens bound to this role
        """
        return pulumi.get(self, "jwt_tokens")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence[str]]:
        """
        Policies Stores a list of casbin formated strings that define access policies for the role in the project
        """
        return pulumi.get(self, "policies")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppProjectSpecRolesJwtTokens(dict):
    """
    JWTToken holds the issuedAt and expiresAt values of a token
    """
    def __init__(__self__, *,
                 iat: int,
                 exp: Optional[int] = None,
                 id: Optional[str] = None):
        """
        JWTToken holds the issuedAt and expiresAt values of a token
        """
        pulumi.set(__self__, "iat", iat)
        if exp is not None:
            pulumi.set(__self__, "exp", exp)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def iat(self) -> int:
        return pulumi.get(self, "iat")

    @property
    @pulumi.getter
    def exp(self) -> Optional[int]:
        return pulumi.get(self, "exp")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppProjectSpecSignatureKeys(dict):
    """
    SignatureKey is the specification of a key required to verify commit signatures with
    """
    def __init__(__self__, *,
                 key_id: str):
        """
        SignatureKey is the specification of a key required to verify commit signatures with
        :param str key_id: The ID of the key in hexadecimal notation
        """
        pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="keyID")
    def key_id(self) -> str:
        """
        The ID of the key in hexadecimal notation
        """
        return pulumi.get(self, "key_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppProjectSpecSyncWindows(dict):
    """
    SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps
    """
    def __init__(__self__, *,
                 applications: Optional[Sequence[str]] = None,
                 clusters: Optional[Sequence[str]] = None,
                 duration: Optional[str] = None,
                 kind: Optional[str] = None,
                 manual_sync: Optional[bool] = None,
                 namespaces: Optional[Sequence[str]] = None,
                 schedule: Optional[str] = None):
        """
        SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps
        :param Sequence[str] applications: Applications contains a list of applications that the window will apply to
        :param Sequence[str] clusters: Clusters contains a list of clusters that the window will apply to
        :param str duration: Duration is the amount of time the sync window will be open
        :param str kind: Kind defines if the window allows or blocks syncs
        :param bool manual_sync: ManualSync enables manual syncs when they would otherwise be blocked
        :param Sequence[str] namespaces: Namespaces contains a list of namespaces that the window will apply to
        :param str schedule: Schedule is the time the window will begin, specified in cron format
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if manual_sync is not None:
            pulumi.set(__self__, "manual_sync", manual_sync)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)

    @property
    @pulumi.getter
    def applications(self) -> Optional[Sequence[str]]:
        """
        Applications contains a list of applications that the window will apply to
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter
    def clusters(self) -> Optional[Sequence[str]]:
        """
        Clusters contains a list of clusters that the window will apply to
        """
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount of time the sync window will be open
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind defines if the window allows or blocks syncs
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="manualSync")
    def manual_sync(self) -> Optional[bool]:
        """
        ManualSync enables manual syncs when they would otherwise be blocked
        """
        return pulumi.get(self, "manual_sync")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        Namespaces contains a list of namespaces that the window will apply to
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter
    def schedule(self) -> Optional[str]:
        """
        Schedule is the time the window will begin, specified in cron format
        """
        return pulumi.get(self, "schedule")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperation(dict):
    """
    Operation contains requested operation parameters.
    """
    def __init__(__self__, *,
                 info: Optional[Sequence['outputs.ApplicationOperationInfo']] = None,
                 initiated_by: Optional['outputs.ApplicationOperationInitiatedBy'] = None,
                 retry: Optional['outputs.ApplicationOperationRetry'] = None,
                 sync: Optional['outputs.ApplicationOperationSync'] = None):
        """
        Operation contains requested operation parameters.
        :param 'ApplicationOperationInitiatedByArgs' initiated_by: OperationInitiator holds information about the operation initiator
        :param 'ApplicationOperationRetryArgs' retry: Retry controls failed sync retry behavior
        :param 'ApplicationOperationSyncArgs' sync: SyncOperation contains sync operation details.
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if initiated_by is not None:
            pulumi.set(__self__, "initiated_by", initiated_by)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync is not None:
            pulumi.set(__self__, "sync", sync)

    @property
    @pulumi.getter
    def info(self) -> Optional[Sequence['outputs.ApplicationOperationInfo']]:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="initiatedBy")
    def initiated_by(self) -> Optional['outputs.ApplicationOperationInitiatedBy']:
        """
        OperationInitiator holds information about the operation initiator
        """
        return pulumi.get(self, "initiated_by")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationOperationRetry']:
        """
        Retry controls failed sync retry behavior
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter
    def sync(self) -> Optional['outputs.ApplicationOperationSync']:
        """
        SyncOperation contains sync operation details.
        """
        return pulumi.get(self, "sync")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationInfo(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationInitiatedBy(dict):
    """
    OperationInitiator holds information about the operation initiator
    """
    def __init__(__self__, *,
                 automated: Optional[bool] = None,
                 username: Optional[str] = None):
        """
        OperationInitiator holds information about the operation initiator
        :param bool automated: Automated is set to true if operation was initiated automatically by the application controller.
        :param str username: Name of a user who started operation.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def automated(self) -> Optional[bool]:
        """
        Automated is set to true if operation was initiated automatically by the application controller.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Name of a user who started operation.
        """
        return pulumi.get(self, "username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationRetry(dict):
    """
    Retry controls failed sync retry behavior
    """
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationOperationRetryBackoff'] = None,
                 limit: Optional[int] = None):
        """
        Retry controls failed sync retry behavior
        :param 'ApplicationOperationRetryBackoffArgs' backoff: Backoff is a backoff strategy
        :param int limit: Limit is the maximum number of attempts when retrying a container
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationOperationRetryBackoff']:
        """
        Backoff is a backoff strategy
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        """
        Limit is the maximum number of attempts when retrying a container
        """
        return pulumi.get(self, "limit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationRetryBackoff(dict):
    """
    Backoff is a backoff strategy
    """
    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[int] = None,
                 max_duration: Optional[str] = None):
        """
        Backoff is a backoff strategy
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        :param int factor: Factor is a factor to multiply the base duration after each failed retry
        :param str max_duration: MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[int]:
        """
        Factor is a factor to multiply the base duration after each failed retry
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        return pulumi.get(self, "max_duration")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSync(dict):
    """
    SyncOperation contains sync operation details.
    """
    def __init__(__self__, *,
                 dry_run: Optional[bool] = None,
                 manifests: Optional[Sequence[str]] = None,
                 prune: Optional[bool] = None,
                 resources: Optional[Sequence['outputs.ApplicationOperationSyncResources']] = None,
                 revision: Optional[str] = None,
                 source: Optional['outputs.ApplicationOperationSyncSource'] = None,
                 sync_options: Optional[Sequence[str]] = None,
                 sync_strategy: Optional['outputs.ApplicationOperationSyncSyncStrategy'] = None):
        """
        SyncOperation contains sync operation details.
        :param bool dry_run: DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
        :param Sequence[str] manifests: Manifests is an optional field that overrides sync source with a local directory for development
        :param bool prune: Prune deletes resources that are no longer tracked in git
        :param Sequence['ApplicationOperationSyncResourcesArgs'] resources: Resources describes which resources to sync
        :param str revision: Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
        :param 'ApplicationOperationSyncSourceArgs' source: Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
        :param Sequence[str] sync_options: SyncOptions provide per-sync sync-options, e.g. Validate=false
        :param 'ApplicationOperationSyncSyncStrategyArgs' sync_strategy: SyncStrategy describes how to perform the sync
        """
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if manifests is not None:
            pulumi.set(__self__, "manifests", manifests)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)
        if sync_strategy is not None:
            pulumi.set(__self__, "sync_strategy", sync_strategy)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[bool]:
        """
        DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
        """
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter
    def manifests(self) -> Optional[Sequence[str]]:
        """
        Manifests is an optional field that overrides sync source with a local directory for development
        """
        return pulumi.get(self, "manifests")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Prune deletes resources that are no longer tracked in git
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.ApplicationOperationSyncResources']]:
        """
        Resources describes which resources to sync
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        """
        Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.ApplicationOperationSyncSource']:
        """
        Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        SyncOptions provide per-sync sync-options, e.g. Validate=false
        """
        return pulumi.get(self, "sync_options")

    @property
    @pulumi.getter(name="syncStrategy")
    def sync_strategy(self) -> Optional['outputs.ApplicationOperationSyncSyncStrategy']:
        """
        SyncStrategy describes how to perform the sync
        """
        return pulumi.get(self, "sync_strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncResources(dict):
    """
    SyncOperationResource contains resources to sync.
    """
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 group: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        SyncOperationResource contains resources to sync.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncSource(dict):
    """
    Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
    """
    def __init__(__self__, *,
                 repo_url: str,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationOperationSyncSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationOperationSyncSourceHelm'] = None,
                 ksonnet: Optional['outputs.ApplicationOperationSyncSourceKsonnet'] = None,
                 kustomize: Optional['outputs.ApplicationOperationSyncSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationOperationSyncSourcePlugin'] = None,
                 target_revision: Optional[str] = None):
        """
        Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
        :param str repo_url: RepoURL is the repository URL of the application manifests
        :param str chart: Chart is a Helm chart name
        :param 'ApplicationOperationSyncSourceDirectoryArgs' directory: Directory holds path/directory specific options
        :param 'ApplicationOperationSyncSourceHelmArgs' helm: Helm holds helm specific options
        :param 'ApplicationOperationSyncSourceKsonnetArgs' ksonnet: Ksonnet holds ksonnet specific options
        :param 'ApplicationOperationSyncSourceKustomizeArgs' kustomize: Kustomize holds kustomize specific options
        :param str path: Path is a directory path within the Git repository
        :param 'ApplicationOperationSyncSourcePluginArgs' plugin: ConfigManagementPlugin holds config management plugin specific options
        :param str target_revision: TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> str:
        """
        RepoURL is the repository URL of the application manifests
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Chart is a Helm chart name
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationOperationSyncSourceDirectory']:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationOperationSyncSourceHelm']:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional['outputs.ApplicationOperationSyncSourceKsonnet']:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationOperationSyncSourceKustomize']:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is a directory path within the Git repository
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationOperationSyncSourcePlugin']:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        return pulumi.get(self, "target_revision")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncSourceDirectory(dict):
    """
    Directory holds path/directory specific options
    """
    def __init__(__self__, *,
                 jsonnet: Optional['outputs.ApplicationOperationSyncSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        Directory holds path/directory specific options
        :param 'ApplicationOperationSyncSourceDirectoryJsonnetArgs' jsonnet: ApplicationSourceJsonnet holds jsonnet specific options
        """
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationOperationSyncSourceDirectoryJsonnet']:
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        return pulumi.get(self, "recurse")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncSourceDirectoryJsonnet(dict):
    """
    ApplicationSourceJsonnet holds jsonnet specific options
    """
    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationOperationSyncSourceDirectoryJsonnetExtVars']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationOperationSyncSourceDirectoryJsonnetTlas']] = None):
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        :param Sequence['ApplicationOperationSyncSourceDirectoryJsonnetExtVarsArgs'] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param Sequence[str] libs: Additional library search dirs
        :param Sequence['ApplicationOperationSyncSourceDirectoryJsonnetTlasArgs'] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationOperationSyncSourceDirectoryJsonnetExtVars']]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationOperationSyncSourceDirectoryJsonnetTlas']]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncSourceDirectoryJsonnetExtVars(dict):
    """
    JsonnetVar is a jsonnet variable
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncSourceDirectoryJsonnetTlas(dict):
    """
    JsonnetVar is a jsonnet variable
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncSourceHelm(dict):
    """
    Helm holds helm specific options
    """
    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationOperationSyncSourceHelmFileParameters']] = None,
                 parameters: Optional[Sequence['outputs.ApplicationOperationSyncSourceHelmParameters']] = None,
                 release_name: Optional[str] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        Helm holds helm specific options
        :param Sequence['ApplicationOperationSyncSourceHelmFileParametersArgs'] file_parameters: FileParameters are file parameters to the helm template
        :param Sequence['ApplicationOperationSyncSourceHelmParametersArgs'] parameters: Parameters are parameters to the helm template
        :param str release_name: The Helm release name. If omitted it will use the application name
        :param Sequence[str] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param str values: Values is Helm values, typically defined as a block
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationOperationSyncSourceHelmFileParameters']]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationOperationSyncSourceHelmParameters']]:
        """
        Parameters are parameters to the helm template
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        The Helm release name. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        Values is Helm values, typically defined as a block
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncSourceHelmFileParameters(dict):
    """
    HelmFileParameter is a file parameter to a helm template
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        """
        HelmFileParameter is a file parameter to a helm template
        :param str name: Name is the name of the helm parameter
        :param str path: Path is the path value for the helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is the path value for the helm parameter
        """
        return pulumi.get(self, "path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncSourceHelmParameters(dict):
    """
    HelmParameter is a parameter to a helm template
    """
    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        HelmParameter is a parameter to a helm template
        :param bool force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param str name: Name is the name of the helm parameter
        :param str value: Value is the value for the helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the value for the helm parameter
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncSourceKsonnet(dict):
    """
    Ksonnet holds ksonnet specific options
    """
    def __init__(__self__, *,
                 environment: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ApplicationOperationSyncSourceKsonnetParameters']] = None):
        """
        Ksonnet holds ksonnet specific options
        :param str environment: Environment is a ksonnet application environment name
        :param Sequence['ApplicationOperationSyncSourceKsonnetParametersArgs'] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationOperationSyncSourceKsonnetParameters']]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncSourceKsonnetParameters(dict):
    """
    KsonnetParameter is a ksonnet component parameter
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 component: Optional[str] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def component(self) -> Optional[str]:
        return pulumi.get(self, "component")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncSourceKustomize(dict):
    """
    Kustomize holds kustomize specific options
    """
    def __init__(__self__, *,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Kustomize holds kustomize specific options
        :param Mapping[str, str] common_labels: CommonLabels adds additional kustomize commonLabels
        :param Sequence[str] images: Images are kustomize image overrides
        :param str name_prefix: NamePrefix is a prefix appended to resources for kustomize apps
        :param str name_suffix: NameSuffix is a suffix appended to resources for kustomize apps
        :param str version: Version contains optional Kustomize version
        """
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        CommonLabels adds additional kustomize commonLabels
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        Images are kustomize image overrides
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        NamePrefix is a prefix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        NameSuffix is a suffix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version contains optional Kustomize version
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncSourcePlugin(dict):
    """
    ConfigManagementPlugin holds config management plugin specific options
    """
    def __init__(__self__, *,
                 env: Optional[Sequence['outputs.ApplicationOperationSyncSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.ApplicationOperationSyncSourcePluginEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: the name, usually uppercase
        :param str value: the value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name, usually uppercase
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        the value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncSyncStrategy(dict):
    """
    SyncStrategy describes how to perform the sync
    """
    def __init__(__self__, *,
                 apply: Optional['outputs.ApplicationOperationSyncSyncStrategyApply'] = None,
                 hook: Optional['outputs.ApplicationOperationSyncSyncStrategyHook'] = None):
        """
        SyncStrategy describes how to perform the sync
        :param 'ApplicationOperationSyncSyncStrategyApplyArgs' apply: Apply wil perform a `kubectl apply` to perform the sync.
        :param 'ApplicationOperationSyncSyncStrategyHookArgs' hook: Hook will submit any referenced resources to perform the sync. This is the default strategy
        """
        if apply is not None:
            pulumi.set(__self__, "apply", apply)
        if hook is not None:
            pulumi.set(__self__, "hook", hook)

    @property
    @pulumi.getter
    def apply(self) -> Optional['outputs.ApplicationOperationSyncSyncStrategyApply']:
        """
        Apply wil perform a `kubectl apply` to perform the sync.
        """
        return pulumi.get(self, "apply")

    @property
    @pulumi.getter
    def hook(self) -> Optional['outputs.ApplicationOperationSyncSyncStrategyHook']:
        """
        Hook will submit any referenced resources to perform the sync. This is the default strategy
        """
        return pulumi.get(self, "hook")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncSyncStrategyApply(dict):
    """
    Apply wil perform a `kubectl apply` to perform the sync.
    """
    def __init__(__self__, *,
                 force: Optional[bool] = None):
        """
        Apply wil perform a `kubectl apply` to perform the sync.
        :param bool force: Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        if force is not None:
            pulumi.set(__self__, "force", force)

    @property
    @pulumi.getter
    def force(self) -> Optional[bool]:
        """
        Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        return pulumi.get(self, "force")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationOperationSyncSyncStrategyHook(dict):
    """
    Hook will submit any referenced resources to perform the sync. This is the default strategy
    """
    def __init__(__self__, *,
                 force: Optional[bool] = None):
        """
        Hook will submit any referenced resources to perform the sync. This is the default strategy
        :param bool force: Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        if force is not None:
            pulumi.set(__self__, "force", force)

    @property
    @pulumi.getter
    def force(self) -> Optional[bool]:
        """
        Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        return pulumi.get(self, "force")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpec(dict):
    """
    ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
    """
    def __init__(__self__, *,
                 destination: 'outputs.ApplicationSpecDestination',
                 project: str,
                 source: 'outputs.ApplicationSpecSource',
                 ignore_differences: Optional[Sequence['outputs.ApplicationSpecIgnoreDifferences']] = None,
                 info: Optional[Sequence['outputs.ApplicationSpecInfo']] = None,
                 revision_history_limit: Optional[int] = None,
                 sync_policy: Optional['outputs.ApplicationSpecSyncPolicy'] = None):
        """
        ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
        :param 'ApplicationSpecDestinationArgs' destination: Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
        :param str project: Project is a application project name. Empty name means that application belongs to 'default' project.
        :param 'ApplicationSpecSourceArgs' source: Source is a reference to the location ksonnet application definition
        :param Sequence['ApplicationSpecIgnoreDifferencesArgs'] ignore_differences: IgnoreDifferences controls resources fields which should be ignored during comparison
        :param Sequence['ApplicationSpecInfoArgs'] info: Infos contains a list of useful information (URLs, email addresses, and plain text) that relates to the application
        :param int revision_history_limit: This limits this number of items kept in the apps revision history. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param 'ApplicationSpecSyncPolicyArgs' sync_policy: SyncPolicy controls when a sync will be performed
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "source", source)
        if ignore_differences is not None:
            pulumi.set(__self__, "ignore_differences", ignore_differences)
        if info is not None:
            pulumi.set(__self__, "info", info)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if sync_policy is not None:
            pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.ApplicationSpecDestination':
        """
        Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        Project is a application project name. Empty name means that application belongs to 'default' project.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def source(self) -> 'outputs.ApplicationSpecSource':
        """
        Source is a reference to the location ksonnet application definition
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Optional[Sequence['outputs.ApplicationSpecIgnoreDifferences']]:
        """
        IgnoreDifferences controls resources fields which should be ignored during comparison
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def info(self) -> Optional[Sequence['outputs.ApplicationSpecInfo']]:
        """
        Infos contains a list of useful information (URLs, email addresses, and plain text) that relates to the application
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[int]:
        """
        This limits this number of items kept in the apps revision history. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> Optional['outputs.ApplicationSpecSyncPolicy']:
        """
        SyncPolicy controls when a sync will be performed
        """
        return pulumi.get(self, "sync_policy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecDestination(dict):
    """
    Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
        :param str name: Name of the destination cluster which can be used instead of server (url) field
        :param str namespace: Namespace overrides the environment namespace value in the ksonnet app.yaml
        :param str server: Server overrides the environment server value in the ksonnet app.yaml
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the destination cluster which can be used instead of server (url) field
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace overrides the environment namespace value in the ksonnet app.yaml
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        Server overrides the environment server value in the ksonnet app.yaml
        """
        return pulumi.get(self, "server")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecIgnoreDifferences(dict):
    """
    ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
    """
    def __init__(__self__, *,
                 json_pointers: Sequence[str],
                 kind: str,
                 group: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
        """
        pulumi.set(__self__, "json_pointers", json_pointers)
        pulumi.set(__self__, "kind", kind)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Sequence[str]:
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecInfo(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSource(dict):
    """
    Source is a reference to the location ksonnet application definition
    """
    def __init__(__self__, *,
                 repo_url: str,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationSpecSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationSpecSourceHelm'] = None,
                 ksonnet: Optional['outputs.ApplicationSpecSourceKsonnet'] = None,
                 kustomize: Optional['outputs.ApplicationSpecSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationSpecSourcePlugin'] = None,
                 target_revision: Optional[str] = None):
        """
        Source is a reference to the location ksonnet application definition
        :param str repo_url: RepoURL is the repository URL of the application manifests
        :param str chart: Chart is a Helm chart name
        :param 'ApplicationSpecSourceDirectoryArgs' directory: Directory holds path/directory specific options
        :param 'ApplicationSpecSourceHelmArgs' helm: Helm holds helm specific options
        :param 'ApplicationSpecSourceKsonnetArgs' ksonnet: Ksonnet holds ksonnet specific options
        :param 'ApplicationSpecSourceKustomizeArgs' kustomize: Kustomize holds kustomize specific options
        :param str path: Path is a directory path within the Git repository
        :param 'ApplicationSpecSourcePluginArgs' plugin: ConfigManagementPlugin holds config management plugin specific options
        :param str target_revision: TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> str:
        """
        RepoURL is the repository URL of the application manifests
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Chart is a Helm chart name
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationSpecSourceDirectory']:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationSpecSourceHelm']:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional['outputs.ApplicationSpecSourceKsonnet']:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationSpecSourceKustomize']:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is a directory path within the Git repository
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationSpecSourcePlugin']:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        return pulumi.get(self, "target_revision")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSourceDirectory(dict):
    """
    Directory holds path/directory specific options
    """
    def __init__(__self__, *,
                 jsonnet: Optional['outputs.ApplicationSpecSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        Directory holds path/directory specific options
        :param 'ApplicationSpecSourceDirectoryJsonnetArgs' jsonnet: ApplicationSourceJsonnet holds jsonnet specific options
        """
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationSpecSourceDirectoryJsonnet']:
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        return pulumi.get(self, "recurse")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSourceDirectoryJsonnet(dict):
    """
    ApplicationSourceJsonnet holds jsonnet specific options
    """
    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationSpecSourceDirectoryJsonnetExtVars']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationSpecSourceDirectoryJsonnetTlas']] = None):
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        :param Sequence['ApplicationSpecSourceDirectoryJsonnetExtVarsArgs'] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param Sequence[str] libs: Additional library search dirs
        :param Sequence['ApplicationSpecSourceDirectoryJsonnetTlasArgs'] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationSpecSourceDirectoryJsonnetExtVars']]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationSpecSourceDirectoryJsonnetTlas']]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSourceDirectoryJsonnetExtVars(dict):
    """
    JsonnetVar is a jsonnet variable
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSourceDirectoryJsonnetTlas(dict):
    """
    JsonnetVar is a jsonnet variable
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSourceHelm(dict):
    """
    Helm holds helm specific options
    """
    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationSpecSourceHelmFileParameters']] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSpecSourceHelmParameters']] = None,
                 release_name: Optional[str] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        Helm holds helm specific options
        :param Sequence['ApplicationSpecSourceHelmFileParametersArgs'] file_parameters: FileParameters are file parameters to the helm template
        :param Sequence['ApplicationSpecSourceHelmParametersArgs'] parameters: Parameters are parameters to the helm template
        :param str release_name: The Helm release name. If omitted it will use the application name
        :param Sequence[str] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param str values: Values is Helm values, typically defined as a block
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationSpecSourceHelmFileParameters']]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSpecSourceHelmParameters']]:
        """
        Parameters are parameters to the helm template
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        The Helm release name. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        Values is Helm values, typically defined as a block
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSourceHelmFileParameters(dict):
    """
    HelmFileParameter is a file parameter to a helm template
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        """
        HelmFileParameter is a file parameter to a helm template
        :param str name: Name is the name of the helm parameter
        :param str path: Path is the path value for the helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is the path value for the helm parameter
        """
        return pulumi.get(self, "path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSourceHelmParameters(dict):
    """
    HelmParameter is a parameter to a helm template
    """
    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        HelmParameter is a parameter to a helm template
        :param bool force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param str name: Name is the name of the helm parameter
        :param str value: Value is the value for the helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the value for the helm parameter
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSourceKsonnet(dict):
    """
    Ksonnet holds ksonnet specific options
    """
    def __init__(__self__, *,
                 environment: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ApplicationSpecSourceKsonnetParameters']] = None):
        """
        Ksonnet holds ksonnet specific options
        :param str environment: Environment is a ksonnet application environment name
        :param Sequence['ApplicationSpecSourceKsonnetParametersArgs'] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationSpecSourceKsonnetParameters']]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSourceKsonnetParameters(dict):
    """
    KsonnetParameter is a ksonnet component parameter
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 component: Optional[str] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def component(self) -> Optional[str]:
        return pulumi.get(self, "component")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSourceKustomize(dict):
    """
    Kustomize holds kustomize specific options
    """
    def __init__(__self__, *,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Kustomize holds kustomize specific options
        :param Mapping[str, str] common_labels: CommonLabels adds additional kustomize commonLabels
        :param Sequence[str] images: Images are kustomize image overrides
        :param str name_prefix: NamePrefix is a prefix appended to resources for kustomize apps
        :param str name_suffix: NameSuffix is a suffix appended to resources for kustomize apps
        :param str version: Version contains optional Kustomize version
        """
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        CommonLabels adds additional kustomize commonLabels
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        Images are kustomize image overrides
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        NamePrefix is a prefix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        NameSuffix is a suffix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version contains optional Kustomize version
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSourcePlugin(dict):
    """
    ConfigManagementPlugin holds config management plugin specific options
    """
    def __init__(__self__, *,
                 env: Optional[Sequence['outputs.ApplicationSpecSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.ApplicationSpecSourcePluginEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: the name, usually uppercase
        :param str value: the value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name, usually uppercase
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        the value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSyncPolicy(dict):
    """
    SyncPolicy controls when a sync will be performed
    """
    def __init__(__self__, *,
                 automated: Optional['outputs.ApplicationSpecSyncPolicyAutomated'] = None,
                 retry: Optional['outputs.ApplicationSpecSyncPolicyRetry'] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        SyncPolicy controls when a sync will be performed
        :param 'ApplicationSpecSyncPolicyAutomatedArgs' automated: Automated will keep an application synced to the target revision
        :param 'ApplicationSpecSyncPolicyRetryArgs' retry: Retry controls failed sync retry behavior
        :param Sequence[str] sync_options: Options allow you to specify whole app sync-options
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> Optional['outputs.ApplicationSpecSyncPolicyAutomated']:
        """
        Automated will keep an application synced to the target revision
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationSpecSyncPolicyRetry']:
        """
        Retry controls failed sync retry behavior
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        Options allow you to specify whole app sync-options
        """
        return pulumi.get(self, "sync_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSyncPolicyAutomated(dict):
    """
    Automated will keep an application synced to the target revision
    """
    def __init__(__self__, *,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        Automated will keep an application synced to the target revision
        :param bool prune: Prune will prune resources automatically as part of automated sync (default: false)
        :param bool self_heal: SelfHeal enables auto-syncing if  (default: false)
        """
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Prune will prune resources automatically as part of automated sync (default: false)
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        SelfHeal enables auto-syncing if  (default: false)
        """
        return pulumi.get(self, "self_heal")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSyncPolicyRetry(dict):
    """
    Retry controls failed sync retry behavior
    """
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationSpecSyncPolicyRetryBackoff'] = None,
                 limit: Optional[int] = None):
        """
        Retry controls failed sync retry behavior
        :param 'ApplicationSpecSyncPolicyRetryBackoffArgs' backoff: Backoff is a backoff strategy
        :param int limit: Limit is the maximum number of attempts when retrying a container
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationSpecSyncPolicyRetryBackoff']:
        """
        Backoff is a backoff strategy
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        """
        Limit is the maximum number of attempts when retrying a container
        """
        return pulumi.get(self, "limit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSyncPolicyRetryBackoff(dict):
    """
    Backoff is a backoff strategy
    """
    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[int] = None,
                 max_duration: Optional[str] = None):
        """
        Backoff is a backoff strategy
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        :param int factor: Factor is a factor to multiply the base duration after each failed retry
        :param str max_duration: MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[int]:
        """
        Factor is a factor to multiply the base duration after each failed retry
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        return pulumi.get(self, "max_duration")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatus(dict):
    """
    ApplicationStatus contains information about application sync, health status
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ApplicationStatusConditions']] = None,
                 health: Optional['outputs.ApplicationStatusHealth'] = None,
                 history: Optional[Sequence['outputs.ApplicationStatusHistory']] = None,
                 observed_at: Optional[str] = None,
                 operation_state: Optional['outputs.ApplicationStatusOperationState'] = None,
                 reconciled_at: Optional[str] = None,
                 resources: Optional[Sequence['outputs.ApplicationStatusResources']] = None,
                 source_type: Optional[str] = None,
                 summary: Optional['outputs.ApplicationStatusSummary'] = None,
                 sync: Optional['outputs.ApplicationStatusSync'] = None):
        """
        ApplicationStatus contains information about application sync, health status
        :param Sequence['ApplicationStatusHistoryArgs'] history: RevisionHistories is a array of history, oldest first and newest last
        :param str observed_at: ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field
        :param 'ApplicationStatusOperationStateArgs' operation_state: OperationState contains information about state of currently performing operation on application.
        :param str reconciled_at: ReconciledAt indicates when the application state was reconciled using the latest git version
        :param 'ApplicationStatusSyncArgs' sync: SyncStatus is a comparison result of application spec and deployed application.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if history is not None:
            pulumi.set(__self__, "history", history)
        if observed_at is not None:
            pulumi.set(__self__, "observed_at", observed_at)
        if operation_state is not None:
            pulumi.set(__self__, "operation_state", operation_state)
        if reconciled_at is not None:
            pulumi.set(__self__, "reconciled_at", reconciled_at)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if sync is not None:
            pulumi.set(__self__, "sync", sync)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ApplicationStatusConditions']]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def health(self) -> Optional['outputs.ApplicationStatusHealth']:
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def history(self) -> Optional[Sequence['outputs.ApplicationStatusHistory']]:
        """
        RevisionHistories is a array of history, oldest first and newest last
        """
        return pulumi.get(self, "history")

    @property
    @pulumi.getter(name="observedAt")
    def observed_at(self) -> Optional[str]:
        """
        ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field
        """
        return pulumi.get(self, "observed_at")

    @property
    @pulumi.getter(name="operationState")
    def operation_state(self) -> Optional['outputs.ApplicationStatusOperationState']:
        """
        OperationState contains information about state of currently performing operation on application.
        """
        return pulumi.get(self, "operation_state")

    @property
    @pulumi.getter(name="reconciledAt")
    def reconciled_at(self) -> Optional[str]:
        """
        ReconciledAt indicates when the application state was reconciled using the latest git version
        """
        return pulumi.get(self, "reconciled_at")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.ApplicationStatusResources']]:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def summary(self) -> Optional['outputs.ApplicationStatusSummary']:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def sync(self) -> Optional['outputs.ApplicationStatusSync']:
        """
        SyncStatus is a comparison result of application spec and deployed application.
        """
        return pulumi.get(self, "sync")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusConditions(dict):
    """
    ApplicationCondition contains details about current application condition
    """
    def __init__(__self__, *,
                 message: str,
                 type: str,
                 last_transition_time: Optional[str] = None):
        """
        ApplicationCondition contains details about current application condition
        :param str message: Message contains human-readable message indicating details about condition
        :param str type: Type is an application condition type
        :param str last_transition_time: LastTransitionTime is the time the condition was first observed.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Message contains human-readable message indicating details about condition
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type is an application condition type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        LastTransitionTime is the time the condition was first observed.
        """
        return pulumi.get(self, "last_transition_time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusHealth(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str status: Represents resource health status
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Represents resource health status
        """
        return pulumi.get(self, "status")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusHistory(dict):
    """
    RevisionHistory contains information relevant to an application deployment
    """
    def __init__(__self__, *,
                 deployed_at: str,
                 id: int,
                 revision: str,
                 deploy_started_at: Optional[str] = None,
                 source: Optional['outputs.ApplicationStatusHistorySource'] = None):
        """
        RevisionHistory contains information relevant to an application deployment
        :param str deployed_at: DeployedAt holds the time the deployment completed
        :param int id: ID is an auto incrementing identifier of the RevisionHistory
        :param str revision: Revision holds the revision of the sync
        :param str deploy_started_at: DeployStartedAt holds the time the deployment started
        :param 'ApplicationStatusHistorySourceArgs' source: ApplicationSource contains information about github repository, path within repository and target application environment.
        """
        pulumi.set(__self__, "deployed_at", deployed_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "revision", revision)
        if deploy_started_at is not None:
            pulumi.set(__self__, "deploy_started_at", deploy_started_at)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="deployedAt")
    def deployed_at(self) -> str:
        """
        DeployedAt holds the time the deployment completed
        """
        return pulumi.get(self, "deployed_at")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID is an auto incrementing identifier of the RevisionHistory
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def revision(self) -> str:
        """
        Revision holds the revision of the sync
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter(name="deployStartedAt")
    def deploy_started_at(self) -> Optional[str]:
        """
        DeployStartedAt holds the time the deployment started
        """
        return pulumi.get(self, "deploy_started_at")

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.ApplicationStatusHistorySource']:
        """
        ApplicationSource contains information about github repository, path within repository and target application environment.
        """
        return pulumi.get(self, "source")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusHistorySource(dict):
    """
    ApplicationSource contains information about github repository, path within repository and target application environment.
    """
    def __init__(__self__, *,
                 repo_url: str,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationStatusHistorySourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationStatusHistorySourceHelm'] = None,
                 ksonnet: Optional['outputs.ApplicationStatusHistorySourceKsonnet'] = None,
                 kustomize: Optional['outputs.ApplicationStatusHistorySourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationStatusHistorySourcePlugin'] = None,
                 target_revision: Optional[str] = None):
        """
        ApplicationSource contains information about github repository, path within repository and target application environment.
        :param str repo_url: RepoURL is the repository URL of the application manifests
        :param str chart: Chart is a Helm chart name
        :param 'ApplicationStatusHistorySourceDirectoryArgs' directory: Directory holds path/directory specific options
        :param 'ApplicationStatusHistorySourceHelmArgs' helm: Helm holds helm specific options
        :param 'ApplicationStatusHistorySourceKsonnetArgs' ksonnet: Ksonnet holds ksonnet specific options
        :param 'ApplicationStatusHistorySourceKustomizeArgs' kustomize: Kustomize holds kustomize specific options
        :param str path: Path is a directory path within the Git repository
        :param 'ApplicationStatusHistorySourcePluginArgs' plugin: ConfigManagementPlugin holds config management plugin specific options
        :param str target_revision: TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> str:
        """
        RepoURL is the repository URL of the application manifests
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Chart is a Helm chart name
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationStatusHistorySourceDirectory']:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationStatusHistorySourceHelm']:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional['outputs.ApplicationStatusHistorySourceKsonnet']:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationStatusHistorySourceKustomize']:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is a directory path within the Git repository
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationStatusHistorySourcePlugin']:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        return pulumi.get(self, "target_revision")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusHistorySourceDirectory(dict):
    """
    Directory holds path/directory specific options
    """
    def __init__(__self__, *,
                 jsonnet: Optional['outputs.ApplicationStatusHistorySourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        Directory holds path/directory specific options
        :param 'ApplicationStatusHistorySourceDirectoryJsonnetArgs' jsonnet: ApplicationSourceJsonnet holds jsonnet specific options
        """
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationStatusHistorySourceDirectoryJsonnet']:
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        return pulumi.get(self, "recurse")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusHistorySourceDirectoryJsonnet(dict):
    """
    ApplicationSourceJsonnet holds jsonnet specific options
    """
    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationStatusHistorySourceDirectoryJsonnetExtVars']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationStatusHistorySourceDirectoryJsonnetTlas']] = None):
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        :param Sequence['ApplicationStatusHistorySourceDirectoryJsonnetExtVarsArgs'] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param Sequence[str] libs: Additional library search dirs
        :param Sequence['ApplicationStatusHistorySourceDirectoryJsonnetTlasArgs'] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationStatusHistorySourceDirectoryJsonnetExtVars']]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationStatusHistorySourceDirectoryJsonnetTlas']]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusHistorySourceDirectoryJsonnetExtVars(dict):
    """
    JsonnetVar is a jsonnet variable
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusHistorySourceDirectoryJsonnetTlas(dict):
    """
    JsonnetVar is a jsonnet variable
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusHistorySourceHelm(dict):
    """
    Helm holds helm specific options
    """
    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationStatusHistorySourceHelmFileParameters']] = None,
                 parameters: Optional[Sequence['outputs.ApplicationStatusHistorySourceHelmParameters']] = None,
                 release_name: Optional[str] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        Helm holds helm specific options
        :param Sequence['ApplicationStatusHistorySourceHelmFileParametersArgs'] file_parameters: FileParameters are file parameters to the helm template
        :param Sequence['ApplicationStatusHistorySourceHelmParametersArgs'] parameters: Parameters are parameters to the helm template
        :param str release_name: The Helm release name. If omitted it will use the application name
        :param Sequence[str] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param str values: Values is Helm values, typically defined as a block
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationStatusHistorySourceHelmFileParameters']]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationStatusHistorySourceHelmParameters']]:
        """
        Parameters are parameters to the helm template
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        The Helm release name. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        Values is Helm values, typically defined as a block
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusHistorySourceHelmFileParameters(dict):
    """
    HelmFileParameter is a file parameter to a helm template
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        """
        HelmFileParameter is a file parameter to a helm template
        :param str name: Name is the name of the helm parameter
        :param str path: Path is the path value for the helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is the path value for the helm parameter
        """
        return pulumi.get(self, "path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusHistorySourceHelmParameters(dict):
    """
    HelmParameter is a parameter to a helm template
    """
    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        HelmParameter is a parameter to a helm template
        :param bool force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param str name: Name is the name of the helm parameter
        :param str value: Value is the value for the helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the value for the helm parameter
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusHistorySourceKsonnet(dict):
    """
    Ksonnet holds ksonnet specific options
    """
    def __init__(__self__, *,
                 environment: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ApplicationStatusHistorySourceKsonnetParameters']] = None):
        """
        Ksonnet holds ksonnet specific options
        :param str environment: Environment is a ksonnet application environment name
        :param Sequence['ApplicationStatusHistorySourceKsonnetParametersArgs'] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationStatusHistorySourceKsonnetParameters']]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusHistorySourceKsonnetParameters(dict):
    """
    KsonnetParameter is a ksonnet component parameter
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 component: Optional[str] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def component(self) -> Optional[str]:
        return pulumi.get(self, "component")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusHistorySourceKustomize(dict):
    """
    Kustomize holds kustomize specific options
    """
    def __init__(__self__, *,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Kustomize holds kustomize specific options
        :param Mapping[str, str] common_labels: CommonLabels adds additional kustomize commonLabels
        :param Sequence[str] images: Images are kustomize image overrides
        :param str name_prefix: NamePrefix is a prefix appended to resources for kustomize apps
        :param str name_suffix: NameSuffix is a suffix appended to resources for kustomize apps
        :param str version: Version contains optional Kustomize version
        """
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        CommonLabels adds additional kustomize commonLabels
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        Images are kustomize image overrides
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        NamePrefix is a prefix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        NameSuffix is a suffix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version contains optional Kustomize version
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusHistorySourcePlugin(dict):
    """
    ConfigManagementPlugin holds config management plugin specific options
    """
    def __init__(__self__, *,
                 env: Optional[Sequence['outputs.ApplicationStatusHistorySourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.ApplicationStatusHistorySourcePluginEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusHistorySourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: the name, usually uppercase
        :param str value: the value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name, usually uppercase
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        the value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationState(dict):
    """
    OperationState contains information about state of currently performing operation on application.
    """
    def __init__(__self__, *,
                 operation: 'outputs.ApplicationStatusOperationStateOperation',
                 phase: str,
                 started_at: str,
                 finished_at: Optional[str] = None,
                 message: Optional[str] = None,
                 retry_count: Optional[int] = None,
                 sync_result: Optional['outputs.ApplicationStatusOperationStateSyncResult'] = None):
        """
        OperationState contains information about state of currently performing operation on application.
        :param 'ApplicationStatusOperationStateOperationArgs' operation: Operation is the original requested operation
        :param str phase: Phase is the current phase of the operation
        :param str started_at: StartedAt contains time of operation start
        :param str finished_at: FinishedAt contains time of operation completion
        :param str message: Message hold any pertinent messages when attempting to perform operation (typically errors).
        :param int retry_count: RetryCount contains time of operation retries
        :param 'ApplicationStatusOperationStateSyncResultArgs' sync_result: SyncResult is the result of a Sync operation
        """
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "started_at", started_at)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if sync_result is not None:
            pulumi.set(__self__, "sync_result", sync_result)

    @property
    @pulumi.getter
    def operation(self) -> 'outputs.ApplicationStatusOperationStateOperation':
        """
        Operation is the original requested operation
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        Phase is the current phase of the operation
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> str:
        """
        StartedAt contains time of operation start
        """
        return pulumi.get(self, "started_at")

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[str]:
        """
        FinishedAt contains time of operation completion
        """
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message hold any pertinent messages when attempting to perform operation (typically errors).
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[int]:
        """
        RetryCount contains time of operation retries
        """
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="syncResult")
    def sync_result(self) -> Optional['outputs.ApplicationStatusOperationStateSyncResult']:
        """
        SyncResult is the result of a Sync operation
        """
        return pulumi.get(self, "sync_result")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperation(dict):
    """
    Operation is the original requested operation
    """
    def __init__(__self__, *,
                 info: Optional[Sequence['outputs.ApplicationStatusOperationStateOperationInfo']] = None,
                 initiated_by: Optional['outputs.ApplicationStatusOperationStateOperationInitiatedBy'] = None,
                 retry: Optional['outputs.ApplicationStatusOperationStateOperationRetry'] = None,
                 sync: Optional['outputs.ApplicationStatusOperationStateOperationSync'] = None):
        """
        Operation is the original requested operation
        :param 'ApplicationStatusOperationStateOperationInitiatedByArgs' initiated_by: OperationInitiator holds information about the operation initiator
        :param 'ApplicationStatusOperationStateOperationRetryArgs' retry: Retry controls failed sync retry behavior
        :param 'ApplicationStatusOperationStateOperationSyncArgs' sync: SyncOperation contains sync operation details.
        """
        if info is not None:
            pulumi.set(__self__, "info", info)
        if initiated_by is not None:
            pulumi.set(__self__, "initiated_by", initiated_by)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if sync is not None:
            pulumi.set(__self__, "sync", sync)

    @property
    @pulumi.getter
    def info(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateOperationInfo']]:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="initiatedBy")
    def initiated_by(self) -> Optional['outputs.ApplicationStatusOperationStateOperationInitiatedBy']:
        """
        OperationInitiator holds information about the operation initiator
        """
        return pulumi.get(self, "initiated_by")

    @property
    @pulumi.getter
    def retry(self) -> Optional['outputs.ApplicationStatusOperationStateOperationRetry']:
        """
        Retry controls failed sync retry behavior
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter
    def sync(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSync']:
        """
        SyncOperation contains sync operation details.
        """
        return pulumi.get(self, "sync")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationInfo(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationInitiatedBy(dict):
    """
    OperationInitiator holds information about the operation initiator
    """
    def __init__(__self__, *,
                 automated: Optional[bool] = None,
                 username: Optional[str] = None):
        """
        OperationInitiator holds information about the operation initiator
        :param bool automated: Automated is set to true if operation was initiated automatically by the application controller.
        :param str username: Name of a user who started operation.
        """
        if automated is not None:
            pulumi.set(__self__, "automated", automated)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def automated(self) -> Optional[bool]:
        """
        Automated is set to true if operation was initiated automatically by the application controller.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Name of a user who started operation.
        """
        return pulumi.get(self, "username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationRetry(dict):
    """
    Retry controls failed sync retry behavior
    """
    def __init__(__self__, *,
                 backoff: Optional['outputs.ApplicationStatusOperationStateOperationRetryBackoff'] = None,
                 limit: Optional[int] = None):
        """
        Retry controls failed sync retry behavior
        :param 'ApplicationStatusOperationStateOperationRetryBackoffArgs' backoff: Backoff is a backoff strategy
        :param int limit: Limit is the maximum number of attempts when retrying a container
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> Optional['outputs.ApplicationStatusOperationStateOperationRetryBackoff']:
        """
        Backoff is a backoff strategy
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        """
        Limit is the maximum number of attempts when retrying a container
        """
        return pulumi.get(self, "limit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationRetryBackoff(dict):
    """
    Backoff is a backoff strategy
    """
    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[int] = None,
                 max_duration: Optional[str] = None):
        """
        Backoff is a backoff strategy
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        :param int factor: Factor is a factor to multiply the base duration after each failed retry
        :param str max_duration: MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> Optional[int]:
        """
        Factor is a factor to multiply the base duration after each failed retry
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        MaxDuration is the maximum amount of time allowed for the backoff strategy
        """
        return pulumi.get(self, "max_duration")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSync(dict):
    """
    SyncOperation contains sync operation details.
    """
    def __init__(__self__, *,
                 dry_run: Optional[bool] = None,
                 manifests: Optional[Sequence[str]] = None,
                 prune: Optional[bool] = None,
                 resources: Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncResources']] = None,
                 revision: Optional[str] = None,
                 source: Optional['outputs.ApplicationStatusOperationStateOperationSyncSource'] = None,
                 sync_options: Optional[Sequence[str]] = None,
                 sync_strategy: Optional['outputs.ApplicationStatusOperationStateOperationSyncSyncStrategy'] = None):
        """
        SyncOperation contains sync operation details.
        :param bool dry_run: DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
        :param Sequence[str] manifests: Manifests is an optional field that overrides sync source with a local directory for development
        :param bool prune: Prune deletes resources that are no longer tracked in git
        :param Sequence['ApplicationStatusOperationStateOperationSyncResourcesArgs'] resources: Resources describes which resources to sync
        :param str revision: Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
        :param 'ApplicationStatusOperationStateOperationSyncSourceArgs' source: Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
        :param Sequence[str] sync_options: SyncOptions provide per-sync sync-options, e.g. Validate=false
        :param 'ApplicationStatusOperationStateOperationSyncSyncStrategyArgs' sync_strategy: SyncStrategy describes how to perform the sync
        """
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if manifests is not None:
            pulumi.set(__self__, "manifests", manifests)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)
        if sync_strategy is not None:
            pulumi.set(__self__, "sync_strategy", sync_strategy)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[bool]:
        """
        DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
        """
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter
    def manifests(self) -> Optional[Sequence[str]]:
        """
        Manifests is an optional field that overrides sync source with a local directory for development
        """
        return pulumi.get(self, "manifests")

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Prune deletes resources that are no longer tracked in git
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncResources']]:
        """
        Resources describes which resources to sync
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        """
        Revision is the revision in which to sync the application to. If omitted, will use the revision specified in app spec.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSource']:
        """
        Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        SyncOptions provide per-sync sync-options, e.g. Validate=false
        """
        return pulumi.get(self, "sync_options")

    @property
    @pulumi.getter(name="syncStrategy")
    def sync_strategy(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSyncStrategy']:
        """
        SyncStrategy describes how to perform the sync
        """
        return pulumi.get(self, "sync_strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncResources(dict):
    """
    SyncOperationResource contains resources to sync.
    """
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 group: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        SyncOperationResource contains resources to sync.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSource(dict):
    """
    Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
    """
    def __init__(__self__, *,
                 repo_url: str,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceHelm'] = None,
                 ksonnet: Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceKsonnet'] = None,
                 kustomize: Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationStatusOperationStateOperationSyncSourcePlugin'] = None,
                 target_revision: Optional[str] = None):
        """
        Source overrides the source definition set in the application. This is typically set in a Rollback operation and nil during a Sync operation
        :param str repo_url: RepoURL is the repository URL of the application manifests
        :param str chart: Chart is a Helm chart name
        :param 'ApplicationStatusOperationStateOperationSyncSourceDirectoryArgs' directory: Directory holds path/directory specific options
        :param 'ApplicationStatusOperationStateOperationSyncSourceHelmArgs' helm: Helm holds helm specific options
        :param 'ApplicationStatusOperationStateOperationSyncSourceKsonnetArgs' ksonnet: Ksonnet holds ksonnet specific options
        :param 'ApplicationStatusOperationStateOperationSyncSourceKustomizeArgs' kustomize: Kustomize holds kustomize specific options
        :param str path: Path is a directory path within the Git repository
        :param 'ApplicationStatusOperationStateOperationSyncSourcePluginArgs' plugin: ConfigManagementPlugin holds config management plugin specific options
        :param str target_revision: TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> str:
        """
        RepoURL is the repository URL of the application manifests
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Chart is a Helm chart name
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceDirectory']:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceHelm']:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceKsonnet']:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceKustomize']:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is a directory path within the Git repository
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSourcePlugin']:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        return pulumi.get(self, "target_revision")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceDirectory(dict):
    """
    Directory holds path/directory specific options
    """
    def __init__(__self__, *,
                 jsonnet: Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        Directory holds path/directory specific options
        :param 'ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetArgs' jsonnet: ApplicationSourceJsonnet holds jsonnet specific options
        """
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet']:
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        return pulumi.get(self, "recurse")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet(dict):
    """
    ApplicationSourceJsonnet holds jsonnet specific options
    """
    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas']] = None):
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        :param Sequence['ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVarsArgs'] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param Sequence[str] libs: Additional library search dirs
        :param Sequence['ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlasArgs'] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars']]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas']]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars(dict):
    """
    JsonnetVar is a jsonnet variable
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas(dict):
    """
    JsonnetVar is a jsonnet variable
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceHelm(dict):
    """
    Helm holds helm specific options
    """
    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters']] = None,
                 parameters: Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceHelmParameters']] = None,
                 release_name: Optional[str] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        Helm holds helm specific options
        :param Sequence['ApplicationStatusOperationStateOperationSyncSourceHelmFileParametersArgs'] file_parameters: FileParameters are file parameters to the helm template
        :param Sequence['ApplicationStatusOperationStateOperationSyncSourceHelmParametersArgs'] parameters: Parameters are parameters to the helm template
        :param str release_name: The Helm release name. If omitted it will use the application name
        :param Sequence[str] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param str values: Values is Helm values, typically defined as a block
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters']]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceHelmParameters']]:
        """
        Parameters are parameters to the helm template
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        The Helm release name. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        Values is Helm values, typically defined as a block
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters(dict):
    """
    HelmFileParameter is a file parameter to a helm template
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        """
        HelmFileParameter is a file parameter to a helm template
        :param str name: Name is the name of the helm parameter
        :param str path: Path is the path value for the helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is the path value for the helm parameter
        """
        return pulumi.get(self, "path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceHelmParameters(dict):
    """
    HelmParameter is a parameter to a helm template
    """
    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        HelmParameter is a parameter to a helm template
        :param bool force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param str name: Name is the name of the helm parameter
        :param str value: Value is the value for the helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the value for the helm parameter
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceKsonnet(dict):
    """
    Ksonnet holds ksonnet specific options
    """
    def __init__(__self__, *,
                 environment: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters']] = None):
        """
        Ksonnet holds ksonnet specific options
        :param str environment: Environment is a ksonnet application environment name
        :param Sequence['ApplicationStatusOperationStateOperationSyncSourceKsonnetParametersArgs'] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters']]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceKsonnetParameters(dict):
    """
    KsonnetParameter is a ksonnet component parameter
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 component: Optional[str] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def component(self) -> Optional[str]:
        return pulumi.get(self, "component")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourceKustomize(dict):
    """
    Kustomize holds kustomize specific options
    """
    def __init__(__self__, *,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Kustomize holds kustomize specific options
        :param Mapping[str, str] common_labels: CommonLabels adds additional kustomize commonLabels
        :param Sequence[str] images: Images are kustomize image overrides
        :param str name_prefix: NamePrefix is a prefix appended to resources for kustomize apps
        :param str name_suffix: NameSuffix is a suffix appended to resources for kustomize apps
        :param str version: Version contains optional Kustomize version
        """
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        CommonLabels adds additional kustomize commonLabels
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        Images are kustomize image overrides
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        NamePrefix is a prefix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        NameSuffix is a suffix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version contains optional Kustomize version
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourcePlugin(dict):
    """
    ConfigManagementPlugin holds config management plugin specific options
    """
    def __init__(__self__, *,
                 env: Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateOperationSyncSourcePluginEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: the name, usually uppercase
        :param str value: the value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name, usually uppercase
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        the value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSyncStrategy(dict):
    """
    SyncStrategy describes how to perform the sync
    """
    def __init__(__self__, *,
                 apply: Optional['outputs.ApplicationStatusOperationStateOperationSyncSyncStrategyApply'] = None,
                 hook: Optional['outputs.ApplicationStatusOperationStateOperationSyncSyncStrategyHook'] = None):
        """
        SyncStrategy describes how to perform the sync
        :param 'ApplicationStatusOperationStateOperationSyncSyncStrategyApplyArgs' apply: Apply wil perform a `kubectl apply` to perform the sync.
        :param 'ApplicationStatusOperationStateOperationSyncSyncStrategyHookArgs' hook: Hook will submit any referenced resources to perform the sync. This is the default strategy
        """
        if apply is not None:
            pulumi.set(__self__, "apply", apply)
        if hook is not None:
            pulumi.set(__self__, "hook", hook)

    @property
    @pulumi.getter
    def apply(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSyncStrategyApply']:
        """
        Apply wil perform a `kubectl apply` to perform the sync.
        """
        return pulumi.get(self, "apply")

    @property
    @pulumi.getter
    def hook(self) -> Optional['outputs.ApplicationStatusOperationStateOperationSyncSyncStrategyHook']:
        """
        Hook will submit any referenced resources to perform the sync. This is the default strategy
        """
        return pulumi.get(self, "hook")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSyncStrategyApply(dict):
    """
    Apply wil perform a `kubectl apply` to perform the sync.
    """
    def __init__(__self__, *,
                 force: Optional[bool] = None):
        """
        Apply wil perform a `kubectl apply` to perform the sync.
        :param bool force: Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        if force is not None:
            pulumi.set(__self__, "force", force)

    @property
    @pulumi.getter
    def force(self) -> Optional[bool]:
        """
        Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        return pulumi.get(self, "force")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateOperationSyncSyncStrategyHook(dict):
    """
    Hook will submit any referenced resources to perform the sync. This is the default strategy
    """
    def __init__(__self__, *,
                 force: Optional[bool] = None):
        """
        Hook will submit any referenced resources to perform the sync. This is the default strategy
        :param bool force: Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        if force is not None:
            pulumi.set(__self__, "force", force)

    @property
    @pulumi.getter
    def force(self) -> Optional[bool]:
        """
        Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
        """
        return pulumi.get(self, "force")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateSyncResult(dict):
    """
    SyncResult is the result of a Sync operation
    """
    def __init__(__self__, *,
                 revision: str,
                 resources: Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultResources']] = None,
                 source: Optional['outputs.ApplicationStatusOperationStateSyncResultSource'] = None):
        """
        SyncResult is the result of a Sync operation
        :param str revision: Revision holds the revision of the sync
        :param Sequence['ApplicationStatusOperationStateSyncResultResourcesArgs'] resources: Resources holds the sync result of each individual resource
        :param 'ApplicationStatusOperationStateSyncResultSourceArgs' source: Source records the application source information of the sync, used for comparing auto-sync
        """
        pulumi.set(__self__, "revision", revision)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def revision(self) -> str:
        """
        Revision holds the revision of the sync
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultResources']]:
        """
        Resources holds the sync result of each individual resource
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.ApplicationStatusOperationStateSyncResultSource']:
        """
        Source records the application source information of the sync, used for comparing auto-sync
        """
        return pulumi.get(self, "source")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultResources(dict):
    """
    ResourceResult holds the operation result details of a specific resource
    """
    def __init__(__self__, *,
                 group: str,
                 kind: str,
                 name: str,
                 namespace: str,
                 version: str,
                 hook_phase: Optional[str] = None,
                 hook_type: Optional[str] = None,
                 message: Optional[str] = None,
                 status: Optional[str] = None,
                 sync_phase: Optional[str] = None):
        """
        ResourceResult holds the operation result details of a specific resource
        :param str hook_phase: the state of any operation associated with this resource OR hook note: can contain values for non-hook resources
        :param str hook_type: the type of the hook, empty for non-hook resources
        :param str message: message for the last sync OR operation
        :param str status: the final result of the sync, this is be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
        :param str sync_phase: indicates the particular phase of the sync that this is for
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "version", version)
        if hook_phase is not None:
            pulumi.set(__self__, "hook_phase", hook_phase)
        if hook_type is not None:
            pulumi.set(__self__, "hook_type", hook_type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sync_phase is not None:
            pulumi.set(__self__, "sync_phase", sync_phase)

    @property
    @pulumi.getter
    def group(self) -> str:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="hookPhase")
    def hook_phase(self) -> Optional[str]:
        """
        the state of any operation associated with this resource OR hook note: can contain values for non-hook resources
        """
        return pulumi.get(self, "hook_phase")

    @property
    @pulumi.getter(name="hookType")
    def hook_type(self) -> Optional[str]:
        """
        the type of the hook, empty for non-hook resources
        """
        return pulumi.get(self, "hook_type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        message for the last sync OR operation
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        the final result of the sync, this is be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="syncPhase")
    def sync_phase(self) -> Optional[str]:
        """
        indicates the particular phase of the sync that this is for
        """
        return pulumi.get(self, "sync_phase")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSource(dict):
    """
    Source records the application source information of the sync, used for comparing auto-sync
    """
    def __init__(__self__, *,
                 repo_url: str,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationStatusOperationStateSyncResultSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationStatusOperationStateSyncResultSourceHelm'] = None,
                 ksonnet: Optional['outputs.ApplicationStatusOperationStateSyncResultSourceKsonnet'] = None,
                 kustomize: Optional['outputs.ApplicationStatusOperationStateSyncResultSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationStatusOperationStateSyncResultSourcePlugin'] = None,
                 target_revision: Optional[str] = None):
        """
        Source records the application source information of the sync, used for comparing auto-sync
        :param str repo_url: RepoURL is the repository URL of the application manifests
        :param str chart: Chart is a Helm chart name
        :param 'ApplicationStatusOperationStateSyncResultSourceDirectoryArgs' directory: Directory holds path/directory specific options
        :param 'ApplicationStatusOperationStateSyncResultSourceHelmArgs' helm: Helm holds helm specific options
        :param 'ApplicationStatusOperationStateSyncResultSourceKsonnetArgs' ksonnet: Ksonnet holds ksonnet specific options
        :param 'ApplicationStatusOperationStateSyncResultSourceKustomizeArgs' kustomize: Kustomize holds kustomize specific options
        :param str path: Path is a directory path within the Git repository
        :param 'ApplicationStatusOperationStateSyncResultSourcePluginArgs' plugin: ConfigManagementPlugin holds config management plugin specific options
        :param str target_revision: TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> str:
        """
        RepoURL is the repository URL of the application manifests
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Chart is a Helm chart name
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationStatusOperationStateSyncResultSourceDirectory']:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationStatusOperationStateSyncResultSourceHelm']:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional['outputs.ApplicationStatusOperationStateSyncResultSourceKsonnet']:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationStatusOperationStateSyncResultSourceKustomize']:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is a directory path within the Git repository
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationStatusOperationStateSyncResultSourcePlugin']:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        return pulumi.get(self, "target_revision")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceDirectory(dict):
    """
    Directory holds path/directory specific options
    """
    def __init__(__self__, *,
                 jsonnet: Optional['outputs.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        Directory holds path/directory specific options
        :param 'ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetArgs' jsonnet: ApplicationSourceJsonnet holds jsonnet specific options
        """
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet']:
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        return pulumi.get(self, "recurse")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet(dict):
    """
    ApplicationSourceJsonnet holds jsonnet specific options
    """
    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas']] = None):
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        :param Sequence['ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVarsArgs'] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param Sequence[str] libs: Additional library search dirs
        :param Sequence['ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlasArgs'] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars']]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas']]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars(dict):
    """
    JsonnetVar is a jsonnet variable
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas(dict):
    """
    JsonnetVar is a jsonnet variable
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceHelm(dict):
    """
    Helm holds helm specific options
    """
    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceHelmFileParameters']] = None,
                 parameters: Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceHelmParameters']] = None,
                 release_name: Optional[str] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        Helm holds helm specific options
        :param Sequence['ApplicationStatusOperationStateSyncResultSourceHelmFileParametersArgs'] file_parameters: FileParameters are file parameters to the helm template
        :param Sequence['ApplicationStatusOperationStateSyncResultSourceHelmParametersArgs'] parameters: Parameters are parameters to the helm template
        :param str release_name: The Helm release name. If omitted it will use the application name
        :param Sequence[str] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param str values: Values is Helm values, typically defined as a block
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceHelmFileParameters']]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceHelmParameters']]:
        """
        Parameters are parameters to the helm template
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        The Helm release name. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        Values is Helm values, typically defined as a block
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceHelmFileParameters(dict):
    """
    HelmFileParameter is a file parameter to a helm template
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        """
        HelmFileParameter is a file parameter to a helm template
        :param str name: Name is the name of the helm parameter
        :param str path: Path is the path value for the helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is the path value for the helm parameter
        """
        return pulumi.get(self, "path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceHelmParameters(dict):
    """
    HelmParameter is a parameter to a helm template
    """
    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        HelmParameter is a parameter to a helm template
        :param bool force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param str name: Name is the name of the helm parameter
        :param str value: Value is the value for the helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the value for the helm parameter
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceKsonnet(dict):
    """
    Ksonnet holds ksonnet specific options
    """
    def __init__(__self__, *,
                 environment: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceKsonnetParameters']] = None):
        """
        Ksonnet holds ksonnet specific options
        :param str environment: Environment is a ksonnet application environment name
        :param Sequence['ApplicationStatusOperationStateSyncResultSourceKsonnetParametersArgs'] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourceKsonnetParameters']]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceKsonnetParameters(dict):
    """
    KsonnetParameter is a ksonnet component parameter
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 component: Optional[str] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def component(self) -> Optional[str]:
        return pulumi.get(self, "component")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourceKustomize(dict):
    """
    Kustomize holds kustomize specific options
    """
    def __init__(__self__, *,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Kustomize holds kustomize specific options
        :param Mapping[str, str] common_labels: CommonLabels adds additional kustomize commonLabels
        :param Sequence[str] images: Images are kustomize image overrides
        :param str name_prefix: NamePrefix is a prefix appended to resources for kustomize apps
        :param str name_suffix: NameSuffix is a suffix appended to resources for kustomize apps
        :param str version: Version contains optional Kustomize version
        """
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        CommonLabels adds additional kustomize commonLabels
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        Images are kustomize image overrides
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        NamePrefix is a prefix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        NameSuffix is a suffix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version contains optional Kustomize version
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourcePlugin(dict):
    """
    ConfigManagementPlugin holds config management plugin specific options
    """
    def __init__(__self__, *,
                 env: Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.ApplicationStatusOperationStateSyncResultSourcePluginEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusOperationStateSyncResultSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: the name, usually uppercase
        :param str value: the value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name, usually uppercase
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        the value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusResources(dict):
    """
    ResourceStatus holds the current sync and health status of a resource
    """
    def __init__(__self__, *,
                 group: Optional[str] = None,
                 health: Optional['outputs.ApplicationStatusResourcesHealth'] = None,
                 hook: Optional[bool] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 requires_pruning: Optional[bool] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        ResourceStatus holds the current sync and health status of a resource
        :param str status: SyncStatusCode is a type which represents possible comparison results
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if hook is not None:
            pulumi.set(__self__, "hook", hook)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if requires_pruning is not None:
            pulumi.set(__self__, "requires_pruning", requires_pruning)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def health(self) -> Optional['outputs.ApplicationStatusResourcesHealth']:
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def hook(self) -> Optional[bool]:
        return pulumi.get(self, "hook")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="requiresPruning")
    def requires_pruning(self) -> Optional[bool]:
        return pulumi.get(self, "requires_pruning")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        SyncStatusCode is a type which represents possible comparison results
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusResourcesHealth(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str status: Represents resource health status
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Represents resource health status
        """
        return pulumi.get(self, "status")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSummary(dict):
    def __init__(__self__, *,
                 external_urls: Optional[Sequence[str]] = None,
                 images: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] external_urls: ExternalURLs holds all external URLs of application child resources.
        :param Sequence[str] images: Images holds all images of application child resources.
        """
        if external_urls is not None:
            pulumi.set(__self__, "external_urls", external_urls)
        if images is not None:
            pulumi.set(__self__, "images", images)

    @property
    @pulumi.getter(name="externalURLs")
    def external_urls(self) -> Optional[Sequence[str]]:
        """
        ExternalURLs holds all external URLs of application child resources.
        """
        return pulumi.get(self, "external_urls")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        Images holds all images of application child resources.
        """
        return pulumi.get(self, "images")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSync(dict):
    """
    SyncStatus is a comparison result of application spec and deployed application.
    """
    def __init__(__self__, *,
                 status: str,
                 compared_to: Optional['outputs.ApplicationStatusSyncComparedTo'] = None,
                 revision: Optional[str] = None):
        """
        SyncStatus is a comparison result of application spec and deployed application.
        :param str status: SyncStatusCode is a type which represents possible comparison results
        :param 'ApplicationStatusSyncComparedToArgs' compared_to: ComparedTo contains application source and target which was used for resources comparison
        """
        pulumi.set(__self__, "status", status)
        if compared_to is not None:
            pulumi.set(__self__, "compared_to", compared_to)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        SyncStatusCode is a type which represents possible comparison results
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="comparedTo")
    def compared_to(self) -> Optional['outputs.ApplicationStatusSyncComparedTo']:
        """
        ComparedTo contains application source and target which was used for resources comparison
        """
        return pulumi.get(self, "compared_to")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        return pulumi.get(self, "revision")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSyncComparedTo(dict):
    """
    ComparedTo contains application source and target which was used for resources comparison
    """
    def __init__(__self__, *,
                 destination: 'outputs.ApplicationStatusSyncComparedToDestination',
                 source: 'outputs.ApplicationStatusSyncComparedToSource'):
        """
        ComparedTo contains application source and target which was used for resources comparison
        :param 'ApplicationStatusSyncComparedToDestinationArgs' destination: ApplicationDestination contains deployment destination information
        :param 'ApplicationStatusSyncComparedToSourceArgs' source: ApplicationSource contains information about github repository, path within repository and target application environment.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.ApplicationStatusSyncComparedToDestination':
        """
        ApplicationDestination contains deployment destination information
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def source(self) -> 'outputs.ApplicationStatusSyncComparedToSource':
        """
        ApplicationSource contains information about github repository, path within repository and target application environment.
        """
        return pulumi.get(self, "source")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSyncComparedToDestination(dict):
    """
    ApplicationDestination contains deployment destination information
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        ApplicationDestination contains deployment destination information
        :param str name: Name of the destination cluster which can be used instead of server (url) field
        :param str namespace: Namespace overrides the environment namespace value in the ksonnet app.yaml
        :param str server: Server overrides the environment server value in the ksonnet app.yaml
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the destination cluster which can be used instead of server (url) field
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace overrides the environment namespace value in the ksonnet app.yaml
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        Server overrides the environment server value in the ksonnet app.yaml
        """
        return pulumi.get(self, "server")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSyncComparedToSource(dict):
    """
    ApplicationSource contains information about github repository, path within repository and target application environment.
    """
    def __init__(__self__, *,
                 repo_url: str,
                 chart: Optional[str] = None,
                 directory: Optional['outputs.ApplicationStatusSyncComparedToSourceDirectory'] = None,
                 helm: Optional['outputs.ApplicationStatusSyncComparedToSourceHelm'] = None,
                 ksonnet: Optional['outputs.ApplicationStatusSyncComparedToSourceKsonnet'] = None,
                 kustomize: Optional['outputs.ApplicationStatusSyncComparedToSourceKustomize'] = None,
                 path: Optional[str] = None,
                 plugin: Optional['outputs.ApplicationStatusSyncComparedToSourcePlugin'] = None,
                 target_revision: Optional[str] = None):
        """
        ApplicationSource contains information about github repository, path within repository and target application environment.
        :param str repo_url: RepoURL is the repository URL of the application manifests
        :param str chart: Chart is a Helm chart name
        :param 'ApplicationStatusSyncComparedToSourceDirectoryArgs' directory: Directory holds path/directory specific options
        :param 'ApplicationStatusSyncComparedToSourceHelmArgs' helm: Helm holds helm specific options
        :param 'ApplicationStatusSyncComparedToSourceKsonnetArgs' ksonnet: Ksonnet holds ksonnet specific options
        :param 'ApplicationStatusSyncComparedToSourceKustomizeArgs' kustomize: Kustomize holds kustomize specific options
        :param str path: Path is a directory path within the Git repository
        :param 'ApplicationStatusSyncComparedToSourcePluginArgs' plugin: ConfigManagementPlugin holds config management plugin specific options
        :param str target_revision: TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        pulumi.set(__self__, "repo_url", repo_url)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if helm is not None:
            pulumi.set(__self__, "helm", helm)
        if ksonnet is not None:
            pulumi.set(__self__, "ksonnet", ksonnet)
        if kustomize is not None:
            pulumi.set(__self__, "kustomize", kustomize)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter(name="repoURL")
    def repo_url(self) -> str:
        """
        RepoURL is the repository URL of the application manifests
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Chart is a Helm chart name
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> Optional['outputs.ApplicationStatusSyncComparedToSourceDirectory']:
        """
        Directory holds path/directory specific options
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> Optional['outputs.ApplicationStatusSyncComparedToSourceHelm']:
        """
        Helm holds helm specific options
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def ksonnet(self) -> Optional['outputs.ApplicationStatusSyncComparedToSourceKsonnet']:
        """
        Ksonnet holds ksonnet specific options
        """
        return pulumi.get(self, "ksonnet")

    @property
    @pulumi.getter
    def kustomize(self) -> Optional['outputs.ApplicationStatusSyncComparedToSourceKustomize']:
        """
        Kustomize holds kustomize specific options
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is a directory path within the Git repository
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> Optional['outputs.ApplicationStatusSyncComparedToSourcePlugin']:
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        TargetRevision defines the commit, tag, or branch in which to sync the application to. If omitted, will sync to HEAD
        """
        return pulumi.get(self, "target_revision")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceDirectory(dict):
    """
    Directory holds path/directory specific options
    """
    def __init__(__self__, *,
                 jsonnet: Optional['outputs.ApplicationStatusSyncComparedToSourceDirectoryJsonnet'] = None,
                 recurse: Optional[bool] = None):
        """
        Directory holds path/directory specific options
        :param 'ApplicationStatusSyncComparedToSourceDirectoryJsonnetArgs' jsonnet: ApplicationSourceJsonnet holds jsonnet specific options
        """
        if jsonnet is not None:
            pulumi.set(__self__, "jsonnet", jsonnet)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def jsonnet(self) -> Optional['outputs.ApplicationStatusSyncComparedToSourceDirectoryJsonnet']:
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        return pulumi.get(self, "recurse")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceDirectoryJsonnet(dict):
    """
    ApplicationSourceJsonnet holds jsonnet specific options
    """
    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas']] = None):
        """
        ApplicationSourceJsonnet holds jsonnet specific options
        :param Sequence['ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVarsArgs'] ext_vars: ExtVars is a list of Jsonnet External Variables
        :param Sequence[str] libs: Additional library search dirs
        :param Sequence['ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlasArgs'] tlas: TLAS is a list of Jsonnet Top-level Arguments
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars']]:
        """
        ExtVars is a list of Jsonnet External Variables
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas']]:
        """
        TLAS is a list of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars(dict):
    """
    JsonnetVar is a jsonnet variable
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas(dict):
    """
    JsonnetVar is a jsonnet variable
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 code: Optional[bool] = None):
        """
        JsonnetVar is a jsonnet variable
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        return pulumi.get(self, "code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceHelm(dict):
    """
    Helm holds helm specific options
    """
    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceHelmFileParameters']] = None,
                 parameters: Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceHelmParameters']] = None,
                 release_name: Optional[str] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None):
        """
        Helm holds helm specific options
        :param Sequence['ApplicationStatusSyncComparedToSourceHelmFileParametersArgs'] file_parameters: FileParameters are file parameters to the helm template
        :param Sequence['ApplicationStatusSyncComparedToSourceHelmParametersArgs'] parameters: Parameters are parameters to the helm template
        :param str release_name: The Helm release name. If omitted it will use the application name
        :param Sequence[str] value_files: ValuesFiles is a list of Helm value files to use when generating a template
        :param str values: Values is Helm values, typically defined as a block
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceHelmFileParameters']]:
        """
        FileParameters are file parameters to the helm template
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceHelmParameters']]:
        """
        Parameters are parameters to the helm template
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        The Helm release name. If omitted it will use the application name
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        ValuesFiles is a list of Helm value files to use when generating a template
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        Values is Helm values, typically defined as a block
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceHelmFileParameters(dict):
    """
    HelmFileParameter is a file parameter to a helm template
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        """
        HelmFileParameter is a file parameter to a helm template
        :param str name: Name is the name of the helm parameter
        :param str path: Path is the path value for the helm parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is the path value for the helm parameter
        """
        return pulumi.get(self, "path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceHelmParameters(dict):
    """
    HelmParameter is a parameter to a helm template
    """
    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        HelmParameter is a parameter to a helm template
        :param bool force_string: ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        :param str name: Name is the name of the helm parameter
        :param str value: Value is the value for the helm parameter
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        ForceString determines whether to tell Helm to interpret booleans and numbers as strings
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the helm parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the value for the helm parameter
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceKsonnet(dict):
    """
    Ksonnet holds ksonnet specific options
    """
    def __init__(__self__, *,
                 environment: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceKsonnetParameters']] = None):
        """
        Ksonnet holds ksonnet specific options
        :param str environment: Environment is a ksonnet application environment name
        :param Sequence['ApplicationStatusSyncComparedToSourceKsonnetParametersArgs'] parameters: Parameters are a list of ksonnet component parameter override values
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        """
        Environment is a ksonnet application environment name
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourceKsonnetParameters']]:
        """
        Parameters are a list of ksonnet component parameter override values
        """
        return pulumi.get(self, "parameters")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceKsonnetParameters(dict):
    """
    KsonnetParameter is a ksonnet component parameter
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 component: Optional[str] = None):
        """
        KsonnetParameter is a ksonnet component parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def component(self) -> Optional[str]:
        return pulumi.get(self, "component")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSyncComparedToSourceKustomize(dict):
    """
    Kustomize holds kustomize specific options
    """
    def __init__(__self__, *,
                 common_labels: Optional[Mapping[str, str]] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Kustomize holds kustomize specific options
        :param Mapping[str, str] common_labels: CommonLabels adds additional kustomize commonLabels
        :param Sequence[str] images: Images are kustomize image overrides
        :param str name_prefix: NamePrefix is a prefix appended to resources for kustomize apps
        :param str name_suffix: NameSuffix is a suffix appended to resources for kustomize apps
        :param str version: Version contains optional Kustomize version
        """
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        CommonLabels adds additional kustomize commonLabels
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        Images are kustomize image overrides
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        NamePrefix is a prefix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        NameSuffix is a suffix appended to resources for kustomize apps
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version contains optional Kustomize version
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSyncComparedToSourcePlugin(dict):
    """
    ConfigManagementPlugin holds config management plugin specific options
    """
    def __init__(__self__, *,
                 env: Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourcePluginEnv']] = None,
                 name: Optional[str] = None):
        """
        ConfigManagementPlugin holds config management plugin specific options
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.ApplicationStatusSyncComparedToSourcePluginEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusSyncComparedToSourcePluginEnv(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: the name, usually uppercase
        :param str value: the value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name, usually uppercase
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        the value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDExportSpec(dict):
    """
    ArgoCDExportSpec defines the desired state of ArgoCDExport
    """
    def __init__(__self__, *,
                 argocd: str,
                 image: Optional[str] = None,
                 schedule: Optional[str] = None,
                 storage: Optional['outputs.ArgoCDExportSpecStorage'] = None,
                 version: Optional[str] = None):
        """
        ArgoCDExportSpec defines the desired state of ArgoCDExport
        :param str argocd: Argocd is the name of the ArgoCD instance to export.
        :param str image: Image is the container image to use for the export Job.
        :param str schedule: Schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
        :param 'ArgoCDExportSpecStorageArgs' storage: Storage defines the storage configuration options.
        :param str version: Version is the tag/digest to use for the export Job container image.
        """
        pulumi.set(__self__, "argocd", argocd)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def argocd(self) -> str:
        """
        Argocd is the name of the ArgoCD instance to export.
        """
        return pulumi.get(self, "argocd")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Image is the container image to use for the export Job.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def schedule(self) -> Optional[str]:
        """
        Schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def storage(self) -> Optional['outputs.ArgoCDExportSpecStorage']:
        """
        Storage defines the storage configuration options.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version is the tag/digest to use for the export Job container image.
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDExportSpecStorage(dict):
    """
    Storage defines the storage configuration options.
    """
    def __init__(__self__, *,
                 backend: Optional[str] = None,
                 pvc: Optional['outputs.ArgoCDExportSpecStoragePvc'] = None,
                 secret_name: Optional[str] = None):
        """
        Storage defines the storage configuration options.
        :param str backend: Backend defines the storage backend to use, must be "local" (the default), "aws", "azure" or "gcp".
        :param 'ArgoCDExportSpecStoragePvcArgs' pvc: PVC is the desired characteristics for a PersistentVolumeClaim.
        :param str secret_name: SecretName is the name of a Secret with encryption key, credentials, etc.
        """
        if backend is not None:
            pulumi.set(__self__, "backend", backend)
        if pvc is not None:
            pulumi.set(__self__, "pvc", pvc)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def backend(self) -> Optional[str]:
        """
        Backend defines the storage backend to use, must be "local" (the default), "aws", "azure" or "gcp".
        """
        return pulumi.get(self, "backend")

    @property
    @pulumi.getter
    def pvc(self) -> Optional['outputs.ArgoCDExportSpecStoragePvc']:
        """
        PVC is the desired characteristics for a PersistentVolumeClaim.
        """
        return pulumi.get(self, "pvc")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        SecretName is the name of a Secret with encryption key, credentials, etc.
        """
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDExportSpecStoragePvc(dict):
    """
    PVC is the desired characteristics for a PersistentVolumeClaim.
    """
    def __init__(__self__, *,
                 access_modes: Optional[Sequence[str]] = None,
                 data_source: Optional['outputs.ArgoCDExportSpecStoragePvcDataSource'] = None,
                 resources: Optional['outputs.ArgoCDExportSpecStoragePvcResources'] = None,
                 selector: Optional['outputs.ArgoCDExportSpecStoragePvcSelector'] = None,
                 storage_class_name: Optional[str] = None,
                 volume_mode: Optional[str] = None,
                 volume_name: Optional[str] = None):
        """
        PVC is the desired characteristics for a PersistentVolumeClaim.
        :param Sequence[str] access_modes: AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        :param 'ArgoCDExportSpecStoragePvcDataSourceArgs' data_source: This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
        :param 'ArgoCDExportSpecStoragePvcResourcesArgs' resources: Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        :param 'ArgoCDExportSpecStoragePvcSelectorArgs' selector: A label query over volumes to consider for binding.
        :param str storage_class_name: Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        :param str volume_mode: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
        :param str volume_name: VolumeName is the binding reference to the PersistentVolume backing this claim.
        """
        if access_modes is not None:
            pulumi.set(__self__, "access_modes", access_modes)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if volume_mode is not None:
            pulumi.set(__self__, "volume_mode", volume_mode)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> Optional[Sequence[str]]:
        """
        AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        """
        return pulumi.get(self, "access_modes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional['outputs.ArgoCDExportSpecStoragePvcDataSource']:
        """
        This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
        """
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ArgoCDExportSpecStoragePvcResources']:
        """
        Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ArgoCDExportSpecStoragePvcSelector']:
        """
        A label query over volumes to consider for binding.
        """
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        """
        Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        """
        return pulumi.get(self, "storage_class_name")

    @property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> Optional[str]:
        """
        volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
        """
        return pulumi.get(self, "volume_mode")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        """
        VolumeName is the binding reference to the PersistentVolume backing this claim.
        """
        return pulumi.get(self, "volume_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDExportSpecStoragePvcDataSource(dict):
    """
    This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
    """
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 api_group: Optional[str] = None):
        """
        This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
        :param str kind: Kind is the type of resource being referenced
        :param str name: Name is the name of resource being referenced
        :param str api_group: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if api_group is not None:
            pulumi.set(__self__, "api_group", api_group)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind is the type of resource being referenced
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of resource being referenced
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="apiGroup")
    def api_group(self) -> Optional[str]:
        """
        APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        """
        return pulumi.get(self, "api_group")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDExportSpecStoragePvcResources(dict):
    """
    Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    """
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ArgoCDExportSpecStoragePvcResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ArgoCDExportSpecStoragePvcResourcesRequests']] = None):
        """
        Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        :param Mapping[str, 'ArgoCDExportSpecStoragePvcResourcesLimitsArgs'] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param Mapping[str, 'ArgoCDExportSpecStoragePvcResourcesRequestsArgs'] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ArgoCDExportSpecStoragePvcResourcesLimits']]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ArgoCDExportSpecStoragePvcResourcesRequests']]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDExportSpecStoragePvcResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDExportSpecStoragePvcResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDExportSpecStoragePvcSelector(dict):
    """
    A label query over volumes to consider for binding.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ArgoCDExportSpecStoragePvcSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over volumes to consider for binding.
        :param Sequence['ArgoCDExportSpecStoragePvcSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ArgoCDExportSpecStoragePvcSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDExportSpecStoragePvcSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDExportStatus(dict):
    """
    ArgoCDExportStatus defines the observed state of ArgoCDExport
    """
    def __init__(__self__, *,
                 phase: str):
        """
        ArgoCDExportStatus defines the observed state of ArgoCDExport
        :param str phase: Phase is a simple, high-level summary of where the ArgoCDExport is in its lifecycle. There are five possible phase values: Pending: The ArgoCDExport has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the containers for the ArgoCDExport are still running, or in the process of starting or restarting. Succeeded: All containers for the ArgoCDExport have terminated in success, and will not be restarted. Failed: At least one container has terminated in failure, either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the ArgoCDExport could not be obtained.
        """
        pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        Phase is a simple, high-level summary of where the ArgoCDExport is in its lifecycle. There are five possible phase values: Pending: The ArgoCDExport has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the containers for the ArgoCDExport are still running, or in the process of starting or restarting. Succeeded: All containers for the ArgoCDExport have terminated in success, and will not be restarted. Failed: At least one container has terminated in failure, either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the ArgoCDExport could not be obtained.
        """
        return pulumi.get(self, "phase")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpec(dict):
    """
    ArgoCDSpec defines the desired state of ArgoCD
    """
    def __init__(__self__, *,
                 application_instance_label_key: Optional[str] = None,
                 config_management_plugins: Optional[str] = None,
                 controller: Optional['outputs.ArgoCDSpecController'] = None,
                 dex: Optional['outputs.ArgoCDSpecDex'] = None,
                 ga_anonymize_users: Optional[bool] = None,
                 ga_tracking_id: Optional[str] = None,
                 grafana: Optional['outputs.ArgoCDSpecGrafana'] = None,
                 ha: Optional['outputs.ArgoCDSpecHa'] = None,
                 help_chat_text: Optional[str] = None,
                 help_chat_url: Optional[str] = None,
                 image: Optional[str] = None,
                 import_: Optional['outputs.ArgoCDSpecImport'] = None,
                 initial_repositories: Optional[str] = None,
                 initial_ssh_known_hosts: Optional['outputs.ArgoCDSpecInitialSSHKnownHosts'] = None,
                 kustomize_build_options: Optional[str] = None,
                 oidc_config: Optional[str] = None,
                 prometheus: Optional['outputs.ArgoCDSpecPrometheus'] = None,
                 rbac: Optional['outputs.ArgoCDSpecRbac'] = None,
                 redis: Optional['outputs.ArgoCDSpecRedis'] = None,
                 repo: Optional['outputs.ArgoCDSpecRepo'] = None,
                 repository_credentials: Optional[str] = None,
                 resource_customizations: Optional[str] = None,
                 resource_exclusions: Optional[str] = None,
                 resource_inclusions: Optional[str] = None,
                 server: Optional['outputs.ArgoCDSpecServer'] = None,
                 status_badge_enabled: Optional[bool] = None,
                 tls: Optional['outputs.ArgoCDSpecTls'] = None,
                 users_anonymous_enabled: Optional[bool] = None,
                 version: Optional[str] = None):
        """
        ArgoCDSpec defines the desired state of ArgoCD
        :param str application_instance_label_key: ApplicationInstanceLabelKey is the key name where Argo CD injects the app name as a tracking label.
        :param str config_management_plugins: ConfigManagementPlugins is used to specify additional config management plugins.
        :param 'ArgoCDSpecControllerArgs' controller: Controller defines the Application Controller options for ArgoCD.
        :param 'ArgoCDSpecDexArgs' dex: Dex defines the Dex server options for ArgoCD.
        :param bool ga_anonymize_users: GAAnonymizeUsers toggles user IDs being hashed before sending to google analytics.
        :param str ga_tracking_id: GATrackingID is the google analytics tracking ID to use.
        :param 'ArgoCDSpecGrafanaArgs' grafana: Grafana defines the Grafana server options for ArgoCD.
        :param 'ArgoCDSpecHaArgs' ha: HA options for High Availability support for the Redis component.
        :param str help_chat_text: HelpChatText is the text for getting chat help, defaults to "Chat now!"
        :param str help_chat_url: HelpChatURL is the URL for getting chat help, this will typically be your Slack channel for support.
        :param str image: Image is the ArgoCD container image for all ArgoCD components.
        :param 'ArgoCDSpecImportArgs' import_: Import is the import/restore options for ArgoCD.
        :param str initial_repositories: InitialRepositories to configure Argo CD with upon creation of the cluster.
        :param 'ArgoCDSpecInitialSSHKnownHostsArgs' initial_ssh_known_hosts: InitialSSHKnownHosts defines the SSH known hosts data upon creation of the cluster for connecting Git repositories via SSH.
        :param str kustomize_build_options: KustomizeBuildOptions is used to specify build options/parameters to use with `kustomize build`.
        :param str oidc_config: OIDCConfig is the OIDC configuration as an alternative to dex.
        :param 'ArgoCDSpecPrometheusArgs' prometheus: Prometheus defines the Prometheus server options for ArgoCD.
        :param 'ArgoCDSpecRbacArgs' rbac: RBAC defines the RBAC configuration for Argo CD.
        :param 'ArgoCDSpecRedisArgs' redis: Redis defines the Redis server options for ArgoCD.
        :param 'ArgoCDSpecRepoArgs' repo: Repo defines the repo server options for Argo CD.
        :param str repository_credentials: RepositoryCredentials are the Git pull credentials to configure Argo CD with upon creation of the cluster.
        :param str resource_customizations: ResourceCustomizations customizes resource behavior. Keys are in the form: group/Kind.
        :param str resource_exclusions: ResourceExclusions is used to completely ignore entire classes of resource group/kinds.
        :param str resource_inclusions: ResourceInclusions is used to only include specific group/kinds in the reconciliation process.
        :param 'ArgoCDSpecServerArgs' server: Server defines the options for the ArgoCD Server component.
        :param bool status_badge_enabled: StatusBadgeEnabled toggles application status badge feature.
        :param 'ArgoCDSpecTlsArgs' tls: TLS defines the TLS options for ArgoCD.
        :param bool users_anonymous_enabled: UsersAnonymousEnabled toggles anonymous user access. The anonymous users get default role permissions specified argocd-rbac-cm.
        :param str version: Version is the tag to use with the ArgoCD container image for all ArgoCD components.
        """
        if application_instance_label_key is not None:
            pulumi.set(__self__, "application_instance_label_key", application_instance_label_key)
        if config_management_plugins is not None:
            pulumi.set(__self__, "config_management_plugins", config_management_plugins)
        if controller is not None:
            pulumi.set(__self__, "controller", controller)
        if dex is not None:
            pulumi.set(__self__, "dex", dex)
        if ga_anonymize_users is not None:
            pulumi.set(__self__, "ga_anonymize_users", ga_anonymize_users)
        if ga_tracking_id is not None:
            pulumi.set(__self__, "ga_tracking_id", ga_tracking_id)
        if grafana is not None:
            pulumi.set(__self__, "grafana", grafana)
        if ha is not None:
            pulumi.set(__self__, "ha", ha)
        if help_chat_text is not None:
            pulumi.set(__self__, "help_chat_text", help_chat_text)
        if help_chat_url is not None:
            pulumi.set(__self__, "help_chat_url", help_chat_url)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if import_ is not None:
            pulumi.set(__self__, "import_", import_)
        if initial_repositories is not None:
            pulumi.set(__self__, "initial_repositories", initial_repositories)
        if initial_ssh_known_hosts is not None:
            pulumi.set(__self__, "initial_ssh_known_hosts", initial_ssh_known_hosts)
        if kustomize_build_options is not None:
            pulumi.set(__self__, "kustomize_build_options", kustomize_build_options)
        if oidc_config is not None:
            pulumi.set(__self__, "oidc_config", oidc_config)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if rbac is not None:
            pulumi.set(__self__, "rbac", rbac)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)
        if repo is not None:
            pulumi.set(__self__, "repo", repo)
        if repository_credentials is not None:
            pulumi.set(__self__, "repository_credentials", repository_credentials)
        if resource_customizations is not None:
            pulumi.set(__self__, "resource_customizations", resource_customizations)
        if resource_exclusions is not None:
            pulumi.set(__self__, "resource_exclusions", resource_exclusions)
        if resource_inclusions is not None:
            pulumi.set(__self__, "resource_inclusions", resource_inclusions)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if status_badge_enabled is not None:
            pulumi.set(__self__, "status_badge_enabled", status_badge_enabled)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if users_anonymous_enabled is not None:
            pulumi.set(__self__, "users_anonymous_enabled", users_anonymous_enabled)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="applicationInstanceLabelKey")
    def application_instance_label_key(self) -> Optional[str]:
        """
        ApplicationInstanceLabelKey is the key name where Argo CD injects the app name as a tracking label.
        """
        return pulumi.get(self, "application_instance_label_key")

    @property
    @pulumi.getter(name="configManagementPlugins")
    def config_management_plugins(self) -> Optional[str]:
        """
        ConfigManagementPlugins is used to specify additional config management plugins.
        """
        return pulumi.get(self, "config_management_plugins")

    @property
    @pulumi.getter
    def controller(self) -> Optional['outputs.ArgoCDSpecController']:
        """
        Controller defines the Application Controller options for ArgoCD.
        """
        return pulumi.get(self, "controller")

    @property
    @pulumi.getter
    def dex(self) -> Optional['outputs.ArgoCDSpecDex']:
        """
        Dex defines the Dex server options for ArgoCD.
        """
        return pulumi.get(self, "dex")

    @property
    @pulumi.getter(name="gaAnonymizeUsers")
    def ga_anonymize_users(self) -> Optional[bool]:
        """
        GAAnonymizeUsers toggles user IDs being hashed before sending to google analytics.
        """
        return pulumi.get(self, "ga_anonymize_users")

    @property
    @pulumi.getter(name="gaTrackingID")
    def ga_tracking_id(self) -> Optional[str]:
        """
        GATrackingID is the google analytics tracking ID to use.
        """
        return pulumi.get(self, "ga_tracking_id")

    @property
    @pulumi.getter
    def grafana(self) -> Optional['outputs.ArgoCDSpecGrafana']:
        """
        Grafana defines the Grafana server options for ArgoCD.
        """
        return pulumi.get(self, "grafana")

    @property
    @pulumi.getter
    def ha(self) -> Optional['outputs.ArgoCDSpecHa']:
        """
        HA options for High Availability support for the Redis component.
        """
        return pulumi.get(self, "ha")

    @property
    @pulumi.getter(name="helpChatText")
    def help_chat_text(self) -> Optional[str]:
        """
        HelpChatText is the text for getting chat help, defaults to "Chat now!"
        """
        return pulumi.get(self, "help_chat_text")

    @property
    @pulumi.getter(name="helpChatURL")
    def help_chat_url(self) -> Optional[str]:
        """
        HelpChatURL is the URL for getting chat help, this will typically be your Slack channel for support.
        """
        return pulumi.get(self, "help_chat_url")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Image is the ArgoCD container image for all ArgoCD components.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="import")
    def import_(self) -> Optional['outputs.ArgoCDSpecImport']:
        """
        Import is the import/restore options for ArgoCD.
        """
        return pulumi.get(self, "import_")

    @property
    @pulumi.getter(name="initialRepositories")
    def initial_repositories(self) -> Optional[str]:
        """
        InitialRepositories to configure Argo CD with upon creation of the cluster.
        """
        return pulumi.get(self, "initial_repositories")

    @property
    @pulumi.getter(name="initialSSHKnownHosts")
    def initial_ssh_known_hosts(self) -> Optional['outputs.ArgoCDSpecInitialSSHKnownHosts']:
        """
        InitialSSHKnownHosts defines the SSH known hosts data upon creation of the cluster for connecting Git repositories via SSH.
        """
        return pulumi.get(self, "initial_ssh_known_hosts")

    @property
    @pulumi.getter(name="kustomizeBuildOptions")
    def kustomize_build_options(self) -> Optional[str]:
        """
        KustomizeBuildOptions is used to specify build options/parameters to use with `kustomize build`.
        """
        return pulumi.get(self, "kustomize_build_options")

    @property
    @pulumi.getter(name="oidcConfig")
    def oidc_config(self) -> Optional[str]:
        """
        OIDCConfig is the OIDC configuration as an alternative to dex.
        """
        return pulumi.get(self, "oidc_config")

    @property
    @pulumi.getter
    def prometheus(self) -> Optional['outputs.ArgoCDSpecPrometheus']:
        """
        Prometheus defines the Prometheus server options for ArgoCD.
        """
        return pulumi.get(self, "prometheus")

    @property
    @pulumi.getter
    def rbac(self) -> Optional['outputs.ArgoCDSpecRbac']:
        """
        RBAC defines the RBAC configuration for Argo CD.
        """
        return pulumi.get(self, "rbac")

    @property
    @pulumi.getter
    def redis(self) -> Optional['outputs.ArgoCDSpecRedis']:
        """
        Redis defines the Redis server options for ArgoCD.
        """
        return pulumi.get(self, "redis")

    @property
    @pulumi.getter
    def repo(self) -> Optional['outputs.ArgoCDSpecRepo']:
        """
        Repo defines the repo server options for Argo CD.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter(name="repositoryCredentials")
    def repository_credentials(self) -> Optional[str]:
        """
        RepositoryCredentials are the Git pull credentials to configure Argo CD with upon creation of the cluster.
        """
        return pulumi.get(self, "repository_credentials")

    @property
    @pulumi.getter(name="resourceCustomizations")
    def resource_customizations(self) -> Optional[str]:
        """
        ResourceCustomizations customizes resource behavior. Keys are in the form: group/Kind.
        """
        return pulumi.get(self, "resource_customizations")

    @property
    @pulumi.getter(name="resourceExclusions")
    def resource_exclusions(self) -> Optional[str]:
        """
        ResourceExclusions is used to completely ignore entire classes of resource group/kinds.
        """
        return pulumi.get(self, "resource_exclusions")

    @property
    @pulumi.getter(name="resourceInclusions")
    def resource_inclusions(self) -> Optional[str]:
        """
        ResourceInclusions is used to only include specific group/kinds in the reconciliation process.
        """
        return pulumi.get(self, "resource_inclusions")

    @property
    @pulumi.getter
    def server(self) -> Optional['outputs.ArgoCDSpecServer']:
        """
        Server defines the options for the ArgoCD Server component.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="statusBadgeEnabled")
    def status_badge_enabled(self) -> Optional[bool]:
        """
        StatusBadgeEnabled toggles application status badge feature.
        """
        return pulumi.get(self, "status_badge_enabled")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.ArgoCDSpecTls']:
        """
        TLS defines the TLS options for ArgoCD.
        """
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter(name="usersAnonymousEnabled")
    def users_anonymous_enabled(self) -> Optional[bool]:
        """
        UsersAnonymousEnabled toggles anonymous user access. The anonymous users get default role permissions specified argocd-rbac-cm.
        """
        return pulumi.get(self, "users_anonymous_enabled")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version is the tag to use with the ArgoCD container image for all ArgoCD components.
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecController(dict):
    """
    Controller defines the Application Controller options for ArgoCD.
    """
    def __init__(__self__, *,
                 app_sync: Optional[str] = None,
                 processors: Optional['outputs.ArgoCDSpecControllerProcessors'] = None,
                 resources: Optional['outputs.ArgoCDSpecControllerResources'] = None):
        """
        Controller defines the Application Controller options for ArgoCD.
        :param str app_sync: AppSync is used to control the sync frequency, by default the ArgoCD controller polls Git every 3m by default. 
                Set this to a duration, e.g. 10m or 600s to control the synchronisation frequency.
        :param 'ArgoCDSpecControllerProcessorsArgs' processors: Processors contains the options for the Application Controller processors.
        :param 'ArgoCDSpecControllerResourcesArgs' resources: Resources defines the Compute Resources required by the container for the Application Controller.
        """
        if app_sync is not None:
            pulumi.set(__self__, "app_sync", app_sync)
        if processors is not None:
            pulumi.set(__self__, "processors", processors)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="appSync")
    def app_sync(self) -> Optional[str]:
        """
        AppSync is used to control the sync frequency, by default the ArgoCD controller polls Git every 3m by default. 
         Set this to a duration, e.g. 10m or 600s to control the synchronisation frequency.
        """
        return pulumi.get(self, "app_sync")

    @property
    @pulumi.getter
    def processors(self) -> Optional['outputs.ArgoCDSpecControllerProcessors']:
        """
        Processors contains the options for the Application Controller processors.
        """
        return pulumi.get(self, "processors")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ArgoCDSpecControllerResources']:
        """
        Resources defines the Compute Resources required by the container for the Application Controller.
        """
        return pulumi.get(self, "resources")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecControllerProcessors(dict):
    """
    Processors contains the options for the Application Controller processors.
    """
    def __init__(__self__, *,
                 operation: Optional[int] = None,
                 status: Optional[int] = None):
        """
        Processors contains the options for the Application Controller processors.
        :param int operation: Operation is the number of application operation processors.
        :param int status: Status is the number of application status processors.
        """
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def operation(self) -> Optional[int]:
        """
        Operation is the number of application operation processors.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        """
        Status is the number of application status processors.
        """
        return pulumi.get(self, "status")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecControllerResources(dict):
    """
    Resources defines the Compute Resources required by the container for the Application Controller.
    """
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ArgoCDSpecControllerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ArgoCDSpecControllerResourcesRequests']] = None):
        """
        Resources defines the Compute Resources required by the container for the Application Controller.
        :param Mapping[str, 'ArgoCDSpecControllerResourcesLimitsArgs'] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param Mapping[str, 'ArgoCDSpecControllerResourcesRequestsArgs'] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ArgoCDSpecControllerResourcesLimits']]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ArgoCDSpecControllerResourcesRequests']]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecControllerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecControllerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecDex(dict):
    """
    Dex defines the Dex server options for ArgoCD.
    """
    def __init__(__self__, *,
                 config: Optional[str] = None,
                 image: Optional[str] = None,
                 open_shift_o_auth: Optional[bool] = None,
                 resources: Optional['outputs.ArgoCDSpecDexResources'] = None,
                 version: Optional[str] = None):
        """
        Dex defines the Dex server options for ArgoCD.
        :param str config: Config is the dex connector configuration.
        :param str image: Image is the Dex container image.
        :param bool open_shift_o_auth: OpenShiftOAuth enables OpenShift OAuth authentication for the Dex server.
        :param 'ArgoCDSpecDexResourcesArgs' resources: Resources defines the Compute Resources required by the container for Dex.
        :param str version: Version is the Dex container image tag.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if open_shift_o_auth is not None:
            pulumi.set(__self__, "open_shift_o_auth", open_shift_o_auth)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def config(self) -> Optional[str]:
        """
        Config is the dex connector configuration.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Image is the Dex container image.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="openShiftOAuth")
    def open_shift_o_auth(self) -> Optional[bool]:
        """
        OpenShiftOAuth enables OpenShift OAuth authentication for the Dex server.
        """
        return pulumi.get(self, "open_shift_o_auth")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ArgoCDSpecDexResources']:
        """
        Resources defines the Compute Resources required by the container for Dex.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version is the Dex container image tag.
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecDexResources(dict):
    """
    Resources defines the Compute Resources required by the container for Dex.
    """
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ArgoCDSpecDexResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ArgoCDSpecDexResourcesRequests']] = None):
        """
        Resources defines the Compute Resources required by the container for Dex.
        :param Mapping[str, 'ArgoCDSpecDexResourcesLimitsArgs'] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param Mapping[str, 'ArgoCDSpecDexResourcesRequestsArgs'] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ArgoCDSpecDexResourcesLimits']]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ArgoCDSpecDexResourcesRequests']]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecDexResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecDexResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecGrafana(dict):
    """
    Grafana defines the Grafana server options for ArgoCD.
    """
    def __init__(__self__, *,
                 enabled: bool,
                 host: Optional[str] = None,
                 image: Optional[str] = None,
                 ingress: Optional['outputs.ArgoCDSpecGrafanaIngress'] = None,
                 resources: Optional['outputs.ArgoCDSpecGrafanaResources'] = None,
                 route: Optional['outputs.ArgoCDSpecGrafanaRoute'] = None,
                 size: Optional[int] = None,
                 version: Optional[str] = None):
        """
        Grafana defines the Grafana server options for ArgoCD.
        :param bool enabled: Enabled will toggle Grafana support globally for ArgoCD.
        :param str host: Host is the hostname to use for Ingress/Route resources.
        :param str image: Image is the Grafana container image.
        :param 'ArgoCDSpecGrafanaIngressArgs' ingress: Ingress defines the desired state for an Ingress for the Grafana component.
        :param 'ArgoCDSpecGrafanaResourcesArgs' resources: Resources defines the Compute Resources required by the container for Grafana.
        :param 'ArgoCDSpecGrafanaRouteArgs' route: Route defines the desired state for an OpenShift Route for the Grafana component.
        :param int size: Size is the replica count for the Grafana Deployment.
        :param str version: Version is the Grafana container image tag.
        """
        pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enabled will toggle Grafana support globally for ArgoCD.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host is the hostname to use for Ingress/Route resources.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Image is the Grafana container image.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.ArgoCDSpecGrafanaIngress']:
        """
        Ingress defines the desired state for an Ingress for the Grafana component.
        """
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ArgoCDSpecGrafanaResources']:
        """
        Resources defines the Compute Resources required by the container for Grafana.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def route(self) -> Optional['outputs.ArgoCDSpecGrafanaRoute']:
        """
        Route defines the desired state for an OpenShift Route for the Grafana component.
        """
        return pulumi.get(self, "route")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        Size is the replica count for the Grafana Deployment.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version is the Grafana container image tag.
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecGrafanaIngress(dict):
    """
    Ingress defines the desired state for an Ingress for the Grafana component.
    """
    def __init__(__self__, *,
                 enabled: bool,
                 annotations: Optional[Mapping[str, str]] = None,
                 path: Optional[str] = None,
                 tls: Optional[Sequence['outputs.ArgoCDSpecGrafanaIngressTls']] = None):
        """
        Ingress defines the desired state for an Ingress for the Grafana component.
        :param bool enabled: Enabled will toggle the creation of the Ingress.
        :param Mapping[str, str] annotations: Annotations is the map of annotations to apply to the Ingress.
        :param str path: Path used for the Ingress resource.
        :param Sequence['ArgoCDSpecGrafanaIngressTlsArgs'] tls: TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        """
        pulumi.set(__self__, "enabled", enabled)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enabled will toggle the creation of the Ingress.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations is the map of annotations to apply to the Ingress.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path used for the Ingress resource.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def tls(self) -> Optional[Sequence['outputs.ArgoCDSpecGrafanaIngressTls']]:
        """
        TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        """
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecGrafanaIngressTls(dict):
    """
    IngressTLS describes the transport layer security associated with an Ingress.
    """
    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 secret_name: Optional[str] = None):
        """
        IngressTLS describes the transport layer security associated with an Ingress.
        :param Sequence[str] hosts: Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
        :param str secret_name: SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        """
        Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
        """
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecGrafanaResources(dict):
    """
    Resources defines the Compute Resources required by the container for Grafana.
    """
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ArgoCDSpecGrafanaResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ArgoCDSpecGrafanaResourcesRequests']] = None):
        """
        Resources defines the Compute Resources required by the container for Grafana.
        :param Mapping[str, 'ArgoCDSpecGrafanaResourcesLimitsArgs'] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param Mapping[str, 'ArgoCDSpecGrafanaResourcesRequestsArgs'] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ArgoCDSpecGrafanaResourcesLimits']]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ArgoCDSpecGrafanaResourcesRequests']]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecGrafanaResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecGrafanaResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecGrafanaRoute(dict):
    """
    Route defines the desired state for an OpenShift Route for the Grafana component.
    """
    def __init__(__self__, *,
                 enabled: bool,
                 annotations: Optional[Mapping[str, str]] = None,
                 path: Optional[str] = None,
                 tls: Optional['outputs.ArgoCDSpecGrafanaRouteTls'] = None,
                 wildcard_policy: Optional[str] = None):
        """
        Route defines the desired state for an OpenShift Route for the Grafana component.
        :param bool enabled: Enabled will toggle the creation of the OpenShift Route.
        :param Mapping[str, str] annotations: Annotations is the map of annotations to use for the Route resource.
        :param str path: Path the router watches for, to route traffic for to the service.
        :param 'ArgoCDSpecGrafanaRouteTlsArgs' tls: TLS provides the ability to configure certificates and termination for the Route.
        :param str wildcard_policy: WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
        """
        pulumi.set(__self__, "enabled", enabled)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if wildcard_policy is not None:
            pulumi.set(__self__, "wildcard_policy", wildcard_policy)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enabled will toggle the creation of the OpenShift Route.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations is the map of annotations to use for the Route resource.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path the router watches for, to route traffic for to the service.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.ArgoCDSpecGrafanaRouteTls']:
        """
        TLS provides the ability to configure certificates and termination for the Route.
        """
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter(name="wildcardPolicy")
    def wildcard_policy(self) -> Optional[str]:
        """
        WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
        """
        return pulumi.get(self, "wildcard_policy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecGrafanaRouteTls(dict):
    """
    TLS provides the ability to configure certificates and termination for the Route.
    """
    def __init__(__self__, *,
                 termination: str,
                 ca_certificate: Optional[str] = None,
                 certificate: Optional[str] = None,
                 destination_ca_certificate: Optional[str] = None,
                 insecure_edge_termination_policy: Optional[str] = None,
                 key: Optional[str] = None):
        """
        TLS provides the ability to configure certificates and termination for the Route.
        :param str termination: termination indicates termination type.
        :param str ca_certificate: caCertificate provides the cert authority certificate contents
        :param str certificate: certificate provides certificate contents
        :param str destination_ca_certificate: destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
        :param str insecure_edge_termination_policy: insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. 
                * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
        :param str key: key provides key file contents
        """
        pulumi.set(__self__, "termination", termination)
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if destination_ca_certificate is not None:
            pulumi.set(__self__, "destination_ca_certificate", destination_ca_certificate)
        if insecure_edge_termination_policy is not None:
            pulumi.set(__self__, "insecure_edge_termination_policy", insecure_edge_termination_policy)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def termination(self) -> str:
        """
        termination indicates termination type.
        """
        return pulumi.get(self, "termination")

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        caCertificate provides the cert authority certificate contents
        """
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        """
        certificate provides certificate contents
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="destinationCACertificate")
    def destination_ca_certificate(self) -> Optional[str]:
        """
        destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
        """
        return pulumi.get(self, "destination_ca_certificate")

    @property
    @pulumi.getter(name="insecureEdgeTerminationPolicy")
    def insecure_edge_termination_policy(self) -> Optional[str]:
        """
        insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. 
         * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
        """
        return pulumi.get(self, "insecure_edge_termination_policy")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key provides key file contents
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecHa(dict):
    """
    HA options for High Availability support for the Redis component.
    """
    def __init__(__self__, *,
                 enabled: bool,
                 redis_proxy_image: Optional[str] = None,
                 redis_proxy_version: Optional[str] = None):
        """
        HA options for High Availability support for the Redis component.
        :param bool enabled: Enabled will toggle HA support globally for Argo CD.
        :param str redis_proxy_image: RedisProxyImage is the Redis HAProxy container image.
        :param str redis_proxy_version: RedisProxyVersion is the Redis HAProxy container image tag.
        """
        pulumi.set(__self__, "enabled", enabled)
        if redis_proxy_image is not None:
            pulumi.set(__self__, "redis_proxy_image", redis_proxy_image)
        if redis_proxy_version is not None:
            pulumi.set(__self__, "redis_proxy_version", redis_proxy_version)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enabled will toggle HA support globally for Argo CD.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="redisProxyImage")
    def redis_proxy_image(self) -> Optional[str]:
        """
        RedisProxyImage is the Redis HAProxy container image.
        """
        return pulumi.get(self, "redis_proxy_image")

    @property
    @pulumi.getter(name="redisProxyVersion")
    def redis_proxy_version(self) -> Optional[str]:
        """
        RedisProxyVersion is the Redis HAProxy container image tag.
        """
        return pulumi.get(self, "redis_proxy_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecImport(dict):
    """
    Import is the import/restore options for ArgoCD.
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: Optional[str] = None):
        """
        Import is the import/restore options for ArgoCD.
        :param str name: Name of an ArgoCDExport from which to import data.
        :param str namespace: Namespace for the ArgoCDExport, defaults to the same namespace as the ArgoCD.
        """
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of an ArgoCDExport from which to import data.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace for the ArgoCDExport, defaults to the same namespace as the ArgoCD.
        """
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecInitialSSHKnownHosts(dict):
    """
    InitialSSHKnownHosts defines the SSH known hosts data upon creation of the cluster for connecting Git repositories via SSH.
    """
    def __init__(__self__, *,
                 excludedefaulthosts: Optional[bool] = None,
                 keys: Optional[str] = None):
        """
        InitialSSHKnownHosts defines the SSH known hosts data upon creation of the cluster for connecting Git repositories via SSH.
        :param bool excludedefaulthosts: ExcludeDefaultHosts describes whether you would like to include the default list of SSH Known Hosts provided by ArgoCD.
        :param str keys: Keys describes a custom set of SSH Known Hosts that you would like to have included in your ArgoCD server.
        """
        if excludedefaulthosts is not None:
            pulumi.set(__self__, "excludedefaulthosts", excludedefaulthosts)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)

    @property
    @pulumi.getter
    def excludedefaulthosts(self) -> Optional[bool]:
        """
        ExcludeDefaultHosts describes whether you would like to include the default list of SSH Known Hosts provided by ArgoCD.
        """
        return pulumi.get(self, "excludedefaulthosts")

    @property
    @pulumi.getter
    def keys(self) -> Optional[str]:
        """
        Keys describes a custom set of SSH Known Hosts that you would like to have included in your ArgoCD server.
        """
        return pulumi.get(self, "keys")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecPrometheus(dict):
    """
    Prometheus defines the Prometheus server options for ArgoCD.
    """
    def __init__(__self__, *,
                 enabled: bool,
                 host: Optional[str] = None,
                 ingress: Optional['outputs.ArgoCDSpecPrometheusIngress'] = None,
                 route: Optional['outputs.ArgoCDSpecPrometheusRoute'] = None,
                 size: Optional[int] = None):
        """
        Prometheus defines the Prometheus server options for ArgoCD.
        :param bool enabled: Enabled will toggle Prometheus support globally for ArgoCD.
        :param str host: Host is the hostname to use for Ingress/Route resources.
        :param 'ArgoCDSpecPrometheusIngressArgs' ingress: Ingress defines the desired state for an Ingress for the Prometheus component.
        :param 'ArgoCDSpecPrometheusRouteArgs' route: Route defines the desired state for an OpenShift Route for the Prometheus component.
        :param int size: Size is the replica count for the Prometheus StatefulSet.
        """
        pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enabled will toggle Prometheus support globally for ArgoCD.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host is the hostname to use for Ingress/Route resources.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.ArgoCDSpecPrometheusIngress']:
        """
        Ingress defines the desired state for an Ingress for the Prometheus component.
        """
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter
    def route(self) -> Optional['outputs.ArgoCDSpecPrometheusRoute']:
        """
        Route defines the desired state for an OpenShift Route for the Prometheus component.
        """
        return pulumi.get(self, "route")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        Size is the replica count for the Prometheus StatefulSet.
        """
        return pulumi.get(self, "size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecPrometheusIngress(dict):
    """
    Ingress defines the desired state for an Ingress for the Prometheus component.
    """
    def __init__(__self__, *,
                 enabled: bool,
                 annotations: Optional[Mapping[str, str]] = None,
                 path: Optional[str] = None,
                 tls: Optional[Sequence['outputs.ArgoCDSpecPrometheusIngressTls']] = None):
        """
        Ingress defines the desired state for an Ingress for the Prometheus component.
        :param bool enabled: Enabled will toggle the creation of the Ingress.
        :param Mapping[str, str] annotations: Annotations is the map of annotations to apply to the Ingress.
        :param str path: Path used for the Ingress resource.
        :param Sequence['ArgoCDSpecPrometheusIngressTlsArgs'] tls: TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        """
        pulumi.set(__self__, "enabled", enabled)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enabled will toggle the creation of the Ingress.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations is the map of annotations to apply to the Ingress.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path used for the Ingress resource.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def tls(self) -> Optional[Sequence['outputs.ArgoCDSpecPrometheusIngressTls']]:
        """
        TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        """
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecPrometheusIngressTls(dict):
    """
    IngressTLS describes the transport layer security associated with an Ingress.
    """
    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 secret_name: Optional[str] = None):
        """
        IngressTLS describes the transport layer security associated with an Ingress.
        :param Sequence[str] hosts: Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
        :param str secret_name: SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        """
        Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
        """
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecPrometheusRoute(dict):
    """
    Route defines the desired state for an OpenShift Route for the Prometheus component.
    """
    def __init__(__self__, *,
                 enabled: bool,
                 annotations: Optional[Mapping[str, str]] = None,
                 path: Optional[str] = None,
                 tls: Optional['outputs.ArgoCDSpecPrometheusRouteTls'] = None,
                 wildcard_policy: Optional[str] = None):
        """
        Route defines the desired state for an OpenShift Route for the Prometheus component.
        :param bool enabled: Enabled will toggle the creation of the OpenShift Route.
        :param Mapping[str, str] annotations: Annotations is the map of annotations to use for the Route resource.
        :param str path: Path the router watches for, to route traffic for to the service.
        :param 'ArgoCDSpecPrometheusRouteTlsArgs' tls: TLS provides the ability to configure certificates and termination for the Route.
        :param str wildcard_policy: WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
        """
        pulumi.set(__self__, "enabled", enabled)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if wildcard_policy is not None:
            pulumi.set(__self__, "wildcard_policy", wildcard_policy)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enabled will toggle the creation of the OpenShift Route.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations is the map of annotations to use for the Route resource.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path the router watches for, to route traffic for to the service.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.ArgoCDSpecPrometheusRouteTls']:
        """
        TLS provides the ability to configure certificates and termination for the Route.
        """
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter(name="wildcardPolicy")
    def wildcard_policy(self) -> Optional[str]:
        """
        WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
        """
        return pulumi.get(self, "wildcard_policy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecPrometheusRouteTls(dict):
    """
    TLS provides the ability to configure certificates and termination for the Route.
    """
    def __init__(__self__, *,
                 termination: str,
                 ca_certificate: Optional[str] = None,
                 certificate: Optional[str] = None,
                 destination_ca_certificate: Optional[str] = None,
                 insecure_edge_termination_policy: Optional[str] = None,
                 key: Optional[str] = None):
        """
        TLS provides the ability to configure certificates and termination for the Route.
        :param str termination: termination indicates termination type.
        :param str ca_certificate: caCertificate provides the cert authority certificate contents
        :param str certificate: certificate provides certificate contents
        :param str destination_ca_certificate: destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
        :param str insecure_edge_termination_policy: insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. 
                * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
        :param str key: key provides key file contents
        """
        pulumi.set(__self__, "termination", termination)
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if destination_ca_certificate is not None:
            pulumi.set(__self__, "destination_ca_certificate", destination_ca_certificate)
        if insecure_edge_termination_policy is not None:
            pulumi.set(__self__, "insecure_edge_termination_policy", insecure_edge_termination_policy)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def termination(self) -> str:
        """
        termination indicates termination type.
        """
        return pulumi.get(self, "termination")

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        caCertificate provides the cert authority certificate contents
        """
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        """
        certificate provides certificate contents
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="destinationCACertificate")
    def destination_ca_certificate(self) -> Optional[str]:
        """
        destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
        """
        return pulumi.get(self, "destination_ca_certificate")

    @property
    @pulumi.getter(name="insecureEdgeTerminationPolicy")
    def insecure_edge_termination_policy(self) -> Optional[str]:
        """
        insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. 
         * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
        """
        return pulumi.get(self, "insecure_edge_termination_policy")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key provides key file contents
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecRbac(dict):
    """
    RBAC defines the RBAC configuration for Argo CD.
    """
    def __init__(__self__, *,
                 default_policy: Optional[str] = None,
                 policy: Optional[str] = None,
                 scopes: Optional[str] = None):
        """
        RBAC defines the RBAC configuration for Argo CD.
        :param str default_policy: DefaultPolicy is the name of the default role which Argo CD will falls back to, when authorizing API requests (optional). If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
        :param str policy: Policy is CSV containing user-defined RBAC policies and role definitions. Policy rules are in the form:   p, subject, resource, action, object, effect Role definitions and bindings are in the form:   g, subject, inherited-subject See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.
        :param str scopes: Scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope). If omitted, defaults to: '[groups]'.
        """
        if default_policy is not None:
            pulumi.set(__self__, "default_policy", default_policy)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter(name="defaultPolicy")
    def default_policy(self) -> Optional[str]:
        """
        DefaultPolicy is the name of the default role which Argo CD will falls back to, when authorizing API requests (optional). If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
        """
        return pulumi.get(self, "default_policy")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        """
        Policy is CSV containing user-defined RBAC policies and role definitions. Policy rules are in the form:   p, subject, resource, action, object, effect Role definitions and bindings are in the form:   g, subject, inherited-subject See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[str]:
        """
        Scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope). If omitted, defaults to: '[groups]'.
        """
        return pulumi.get(self, "scopes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecRedis(dict):
    """
    Redis defines the Redis server options for ArgoCD.
    """
    def __init__(__self__, *,
                 image: Optional[str] = None,
                 resources: Optional['outputs.ArgoCDSpecRedisResources'] = None,
                 version: Optional[str] = None):
        """
        Redis defines the Redis server options for ArgoCD.
        :param str image: Image is the Redis container image.
        :param 'ArgoCDSpecRedisResourcesArgs' resources: Resources defines the Compute Resources required by the container for Redis.
        :param str version: Version is the Redis container image tag.
        """
        if image is not None:
            pulumi.set(__self__, "image", image)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Image is the Redis container image.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ArgoCDSpecRedisResources']:
        """
        Resources defines the Compute Resources required by the container for Redis.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version is the Redis container image tag.
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecRedisResources(dict):
    """
    Resources defines the Compute Resources required by the container for Redis.
    """
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ArgoCDSpecRedisResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ArgoCDSpecRedisResourcesRequests']] = None):
        """
        Resources defines the Compute Resources required by the container for Redis.
        :param Mapping[str, 'ArgoCDSpecRedisResourcesLimitsArgs'] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param Mapping[str, 'ArgoCDSpecRedisResourcesRequestsArgs'] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ArgoCDSpecRedisResourcesLimits']]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ArgoCDSpecRedisResourcesRequests']]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecRedisResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecRedisResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecRepo(dict):
    """
    Repo defines the repo server options for Argo CD.
    """
    def __init__(__self__, *,
                 mountsatoken: Optional[bool] = None,
                 resources: Optional['outputs.ArgoCDSpecRepoResources'] = None,
                 serviceaccount: Optional[str] = None):
        """
        Repo defines the repo server options for Argo CD.
        :param bool mountsatoken: MountSAToken describes whether you would like to have the Repo server mount the service account token
        :param 'ArgoCDSpecRepoResourcesArgs' resources: Resources defines the Compute Resources required by the container for Redis.
        :param str serviceaccount: ServiceAccount defines the ServiceAccount user that you would like the Repo server to use
        """
        if mountsatoken is not None:
            pulumi.set(__self__, "mountsatoken", mountsatoken)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if serviceaccount is not None:
            pulumi.set(__self__, "serviceaccount", serviceaccount)

    @property
    @pulumi.getter
    def mountsatoken(self) -> Optional[bool]:
        """
        MountSAToken describes whether you would like to have the Repo server mount the service account token
        """
        return pulumi.get(self, "mountsatoken")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ArgoCDSpecRepoResources']:
        """
        Resources defines the Compute Resources required by the container for Redis.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def serviceaccount(self) -> Optional[str]:
        """
        ServiceAccount defines the ServiceAccount user that you would like the Repo server to use
        """
        return pulumi.get(self, "serviceaccount")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecRepoResources(dict):
    """
    Resources defines the Compute Resources required by the container for Redis.
    """
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ArgoCDSpecRepoResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ArgoCDSpecRepoResourcesRequests']] = None):
        """
        Resources defines the Compute Resources required by the container for Redis.
        :param Mapping[str, 'ArgoCDSpecRepoResourcesLimitsArgs'] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param Mapping[str, 'ArgoCDSpecRepoResourcesRequestsArgs'] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ArgoCDSpecRepoResourcesLimits']]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ArgoCDSpecRepoResourcesRequests']]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecRepoResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecRepoResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecServer(dict):
    """
    Server defines the options for the ArgoCD Server component.
    """
    def __init__(__self__, *,
                 autoscale: Optional['outputs.ArgoCDSpecServerAutoscale'] = None,
                 grpc: Optional['outputs.ArgoCDSpecServerGrpc'] = None,
                 host: Optional[str] = None,
                 ingress: Optional['outputs.ArgoCDSpecServerIngress'] = None,
                 insecure: Optional[bool] = None,
                 resources: Optional['outputs.ArgoCDSpecServerResources'] = None,
                 route: Optional['outputs.ArgoCDSpecServerRoute'] = None,
                 service: Optional['outputs.ArgoCDSpecServerService'] = None):
        """
        Server defines the options for the ArgoCD Server component.
        :param 'ArgoCDSpecServerAutoscaleArgs' autoscale: Autoscale defines the autoscale options for the Argo CD Server component.
        :param 'ArgoCDSpecServerGrpcArgs' grpc: GRPC defines the state for the Argo CD Server GRPC options.
        :param str host: Host is the hostname to use for Ingress/Route resources.
        :param 'ArgoCDSpecServerIngressArgs' ingress: Ingress defines the desired state for an Ingress for the Argo CD Server component.
        :param bool insecure: Insecure toggles the insecure flag.
        :param 'ArgoCDSpecServerResourcesArgs' resources: Resources defines the Compute Resources required by the container for the Argo CD server component.
        :param 'ArgoCDSpecServerRouteArgs' route: Route defines the desired state for an OpenShift Route for the Argo CD Server component.
        :param 'ArgoCDSpecServerServiceArgs' service: Service defines the options for the Service backing the ArgoCD Server component.
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if grpc is not None:
            pulumi.set(__self__, "grpc", grpc)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional['outputs.ArgoCDSpecServerAutoscale']:
        """
        Autoscale defines the autoscale options for the Argo CD Server component.
        """
        return pulumi.get(self, "autoscale")

    @property
    @pulumi.getter
    def grpc(self) -> Optional['outputs.ArgoCDSpecServerGrpc']:
        """
        GRPC defines the state for the Argo CD Server GRPC options.
        """
        return pulumi.get(self, "grpc")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host is the hostname to use for Ingress/Route resources.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.ArgoCDSpecServerIngress']:
        """
        Ingress defines the desired state for an Ingress for the Argo CD Server component.
        """
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        Insecure toggles the insecure flag.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ArgoCDSpecServerResources']:
        """
        Resources defines the Compute Resources required by the container for the Argo CD server component.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def route(self) -> Optional['outputs.ArgoCDSpecServerRoute']:
        """
        Route defines the desired state for an OpenShift Route for the Argo CD Server component.
        """
        return pulumi.get(self, "route")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ArgoCDSpecServerService']:
        """
        Service defines the options for the Service backing the ArgoCD Server component.
        """
        return pulumi.get(self, "service")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecServerAutoscale(dict):
    """
    Autoscale defines the autoscale options for the Argo CD Server component.
    """
    def __init__(__self__, *,
                 enabled: bool,
                 hpa: Optional['outputs.ArgoCDSpecServerAutoscaleHpa'] = None):
        """
        Autoscale defines the autoscale options for the Argo CD Server component.
        :param bool enabled: Enabled will toggle autoscaling support for the Argo CD Server component.
        :param 'ArgoCDSpecServerAutoscaleHpaArgs' hpa: HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.
        """
        pulumi.set(__self__, "enabled", enabled)
        if hpa is not None:
            pulumi.set(__self__, "hpa", hpa)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enabled will toggle autoscaling support for the Argo CD Server component.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hpa(self) -> Optional['outputs.ArgoCDSpecServerAutoscaleHpa']:
        """
        HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.
        """
        return pulumi.get(self, "hpa")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecServerAutoscaleHpa(dict):
    """
    HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.
    """
    def __init__(__self__, *,
                 max_replicas: int,
                 scale_target_ref: 'outputs.ArgoCDSpecServerAutoscaleHpaScaleTargetRef',
                 min_replicas: Optional[int] = None,
                 target_cpu_utilization_percentage: Optional[int] = None):
        """
        HPA defines the HorizontalPodAutoscaler options for the Argo CD Server component.
        :param int max_replicas: upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
        :param 'ArgoCDSpecServerAutoscaleHpaScaleTargetRefArgs' scale_target_ref: reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
        :param int min_replicas: minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        :param int target_cpu_utilization_percentage: target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
        """
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "scale_target_ref", scale_target_ref)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            pulumi.set(__self__, "target_cpu_utilization_percentage", target_cpu_utilization_percentage)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> int:
        """
        upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
        """
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="scaleTargetRef")
    def scale_target_ref(self) -> 'outputs.ArgoCDSpecServerAutoscaleHpaScaleTargetRef':
        """
        reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
        """
        return pulumi.get(self, "scale_target_ref")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        """
        minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        """
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[int]:
        """
        target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
        """
        return pulumi.get(self, "target_cpu_utilization_percentage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecServerAutoscaleHpaScaleTargetRef(dict):
    """
    reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
    """
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 api_version: Optional[str] = None):
        """
        reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
        :param str kind: Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        :param str name: Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str api_version: API version of the referent
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        API version of the referent
        """
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecServerGrpc(dict):
    """
    GRPC defines the state for the Argo CD Server GRPC options.
    """
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 ingress: Optional['outputs.ArgoCDSpecServerGrpcIngress'] = None):
        """
        GRPC defines the state for the Argo CD Server GRPC options.
        :param str host: Host is the hostname to use for Ingress/Route resources.
        :param 'ArgoCDSpecServerGrpcIngressArgs' ingress: Ingress defines the desired state for the Argo CD Server GRPC Ingress.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host is the hostname to use for Ingress/Route resources.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.ArgoCDSpecServerGrpcIngress']:
        """
        Ingress defines the desired state for the Argo CD Server GRPC Ingress.
        """
        return pulumi.get(self, "ingress")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecServerGrpcIngress(dict):
    """
    Ingress defines the desired state for the Argo CD Server GRPC Ingress.
    """
    def __init__(__self__, *,
                 enabled: bool,
                 annotations: Optional[Mapping[str, str]] = None,
                 path: Optional[str] = None,
                 tls: Optional[Sequence['outputs.ArgoCDSpecServerGrpcIngressTls']] = None):
        """
        Ingress defines the desired state for the Argo CD Server GRPC Ingress.
        :param bool enabled: Enabled will toggle the creation of the Ingress.
        :param Mapping[str, str] annotations: Annotations is the map of annotations to apply to the Ingress.
        :param str path: Path used for the Ingress resource.
        :param Sequence['ArgoCDSpecServerGrpcIngressTlsArgs'] tls: TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        """
        pulumi.set(__self__, "enabled", enabled)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enabled will toggle the creation of the Ingress.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations is the map of annotations to apply to the Ingress.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path used for the Ingress resource.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def tls(self) -> Optional[Sequence['outputs.ArgoCDSpecServerGrpcIngressTls']]:
        """
        TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        """
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecServerGrpcIngressTls(dict):
    """
    IngressTLS describes the transport layer security associated with an Ingress.
    """
    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 secret_name: Optional[str] = None):
        """
        IngressTLS describes the transport layer security associated with an Ingress.
        :param Sequence[str] hosts: Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
        :param str secret_name: SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        """
        Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
        """
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecServerIngress(dict):
    """
    Ingress defines the desired state for an Ingress for the Argo CD Server component.
    """
    def __init__(__self__, *,
                 enabled: bool,
                 annotations: Optional[Mapping[str, str]] = None,
                 path: Optional[str] = None,
                 tls: Optional[Sequence['outputs.ArgoCDSpecServerIngressTls']] = None):
        """
        Ingress defines the desired state for an Ingress for the Argo CD Server component.
        :param bool enabled: Enabled will toggle the creation of the Ingress.
        :param Mapping[str, str] annotations: Annotations is the map of annotations to apply to the Ingress.
        :param str path: Path used for the Ingress resource.
        :param Sequence['ArgoCDSpecServerIngressTlsArgs'] tls: TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        """
        pulumi.set(__self__, "enabled", enabled)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enabled will toggle the creation of the Ingress.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations is the map of annotations to apply to the Ingress.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path used for the Ingress resource.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def tls(self) -> Optional[Sequence['outputs.ArgoCDSpecServerIngressTls']]:
        """
        TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        """
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecServerIngressTls(dict):
    """
    IngressTLS describes the transport layer security associated with an Ingress.
    """
    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 secret_name: Optional[str] = None):
        """
        IngressTLS describes the transport layer security associated with an Ingress.
        :param Sequence[str] hosts: Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
        :param str secret_name: SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        """
        Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
        """
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecServerResources(dict):
    """
    Resources defines the Compute Resources required by the container for the Argo CD server component.
    """
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ArgoCDSpecServerResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ArgoCDSpecServerResourcesRequests']] = None):
        """
        Resources defines the Compute Resources required by the container for the Argo CD server component.
        :param Mapping[str, 'ArgoCDSpecServerResourcesLimitsArgs'] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param Mapping[str, 'ArgoCDSpecServerResourcesRequestsArgs'] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ArgoCDSpecServerResourcesLimits']]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ArgoCDSpecServerResourcesRequests']]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecServerResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecServerResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecServerRoute(dict):
    """
    Route defines the desired state for an OpenShift Route for the Argo CD Server component.
    """
    def __init__(__self__, *,
                 enabled: bool,
                 annotations: Optional[Mapping[str, str]] = None,
                 path: Optional[str] = None,
                 tls: Optional['outputs.ArgoCDSpecServerRouteTls'] = None,
                 wildcard_policy: Optional[str] = None):
        """
        Route defines the desired state for an OpenShift Route for the Argo CD Server component.
        :param bool enabled: Enabled will toggle the creation of the OpenShift Route.
        :param Mapping[str, str] annotations: Annotations is the map of annotations to use for the Route resource.
        :param str path: Path the router watches for, to route traffic for to the service.
        :param 'ArgoCDSpecServerRouteTlsArgs' tls: TLS provides the ability to configure certificates and termination for the Route.
        :param str wildcard_policy: WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
        """
        pulumi.set(__self__, "enabled", enabled)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if wildcard_policy is not None:
            pulumi.set(__self__, "wildcard_policy", wildcard_policy)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enabled will toggle the creation of the OpenShift Route.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations is the map of annotations to use for the Route resource.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path the router watches for, to route traffic for to the service.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.ArgoCDSpecServerRouteTls']:
        """
        TLS provides the ability to configure certificates and termination for the Route.
        """
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter(name="wildcardPolicy")
    def wildcard_policy(self) -> Optional[str]:
        """
        WildcardPolicy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
        """
        return pulumi.get(self, "wildcard_policy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecServerRouteTls(dict):
    """
    TLS provides the ability to configure certificates and termination for the Route.
    """
    def __init__(__self__, *,
                 termination: str,
                 ca_certificate: Optional[str] = None,
                 certificate: Optional[str] = None,
                 destination_ca_certificate: Optional[str] = None,
                 insecure_edge_termination_policy: Optional[str] = None,
                 key: Optional[str] = None):
        """
        TLS provides the ability to configure certificates and termination for the Route.
        :param str termination: termination indicates termination type.
        :param str ca_certificate: caCertificate provides the cert authority certificate contents
        :param str certificate: certificate provides certificate contents
        :param str destination_ca_certificate: destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
        :param str insecure_edge_termination_policy: insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. 
                * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
        :param str key: key provides key file contents
        """
        pulumi.set(__self__, "termination", termination)
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if destination_ca_certificate is not None:
            pulumi.set(__self__, "destination_ca_certificate", destination_ca_certificate)
        if insecure_edge_termination_policy is not None:
            pulumi.set(__self__, "insecure_edge_termination_policy", insecure_edge_termination_policy)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def termination(self) -> str:
        """
        termination indicates termination type.
        """
        return pulumi.get(self, "termination")

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        caCertificate provides the cert authority certificate contents
        """
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        """
        certificate provides certificate contents
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="destinationCACertificate")
    def destination_ca_certificate(self) -> Optional[str]:
        """
        destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
        """
        return pulumi.get(self, "destination_ca_certificate")

    @property
    @pulumi.getter(name="insecureEdgeTerminationPolicy")
    def insecure_edge_termination_policy(self) -> Optional[str]:
        """
        insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80. 
         * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
        """
        return pulumi.get(self, "insecure_edge_termination_policy")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key provides key file contents
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecServerService(dict):
    """
    Service defines the options for the Service backing the ArgoCD Server component.
    """
    def __init__(__self__, *,
                 type: str):
        """
        Service defines the options for the Service backing the ArgoCD Server component.
        :param str type: Type is the ServiceType to use for the Service resource.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type is the ServiceType to use for the Service resource.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecTls(dict):
    """
    TLS defines the TLS options for ArgoCD.
    """
    def __init__(__self__, *,
                 ca: Optional['outputs.ArgoCDSpecTlsCa'] = None,
                 initial_certs: Optional[Mapping[str, str]] = None):
        """
        TLS defines the TLS options for ArgoCD.
        :param 'ArgoCDSpecTlsCaArgs' ca: CA defines the CA options.
        :param Mapping[str, str] initial_certs: InitialCerts defines custom TLS certificates upon creation of the cluster for connecting Git repositories via HTTPS.
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if initial_certs is not None:
            pulumi.set(__self__, "initial_certs", initial_certs)

    @property
    @pulumi.getter
    def ca(self) -> Optional['outputs.ArgoCDSpecTlsCa']:
        """
        CA defines the CA options.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter(name="initialCerts")
    def initial_certs(self) -> Optional[Mapping[str, str]]:
        """
        InitialCerts defines custom TLS certificates upon creation of the cluster for connecting Git repositories via HTTPS.
        """
        return pulumi.get(self, "initial_certs")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDSpecTlsCa(dict):
    """
    CA defines the CA options.
    """
    def __init__(__self__, *,
                 config_map_name: Optional[str] = None,
                 secret_name: Optional[str] = None):
        """
        CA defines the CA options.
        :param str config_map_name: ConfigMapName is the name of the ConfigMap containing the CA Certificate.
        :param str secret_name: SecretName is the name of the Secret containing the CA Certificate and Key.
        """
        if config_map_name is not None:
            pulumi.set(__self__, "config_map_name", config_map_name)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="configMapName")
    def config_map_name(self) -> Optional[str]:
        """
        ConfigMapName is the name of the ConfigMap containing the CA Certificate.
        """
        return pulumi.get(self, "config_map_name")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        SecretName is the name of the Secret containing the CA Certificate and Key.
        """
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ArgoCDStatus(dict):
    """
    ArgoCDStatus defines the observed state of ArgoCD
    """
    def __init__(__self__, *,
                 application_controller: Optional[str] = None,
                 dex: Optional[str] = None,
                 phase: Optional[str] = None,
                 redis: Optional[str] = None,
                 repo: Optional[str] = None,
                 server: Optional[str] = None):
        """
        ArgoCDStatus defines the observed state of ArgoCD
        :param str application_controller: ApplicationController is a simple, high-level summary of where the Argo CD application controller component is in its lifecycle. There are five possible ApplicationController values: Pending: The Argo CD application controller component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD application controller component are in a Ready state. Failed: At least one of the  Argo CD application controller component Pods had a failure. Unknown: For some reason the state of the Argo CD application controller component could not be obtained.
        :param str dex: Dex is a simple, high-level summary of where the Argo CD Dex component is in its lifecycle. There are five possible dex values: Pending: The Argo CD Dex component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Dex component are in a Ready state. Failed: At least one of the  Argo CD Dex component Pods had a failure. Unknown: For some reason the state of the Argo CD Dex component could not be obtained.
        :param str phase: Phase is a simple, high-level summary of where the ArgoCD is in its lifecycle. There are five possible phase values: Pending: The ArgoCD has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Available: All of the resources for the ArgoCD are ready. Failed: At least one resource has experienced a failure. Unknown: For some reason the state of the ArgoCD phase could not be obtained.
        :param str redis: Redis is a simple, high-level summary of where the Argo CD Redis component is in its lifecycle. There are five possible redis values: Pending: The Argo CD Redis component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Redis component are in a Ready state. Failed: At least one of the  Argo CD Redis component Pods had a failure. Unknown: For some reason the state of the Argo CD Redis component could not be obtained.
        :param str repo: Repo is a simple, high-level summary of where the Argo CD Repo component is in its lifecycle. There are five possible repo values: Pending: The Argo CD Repo component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Repo component are in a Ready state. Failed: At least one of the  Argo CD Repo component Pods had a failure. Unknown: For some reason the state of the Argo CD Repo component could not be obtained.
        :param str server: Server is a simple, high-level summary of where the Argo CD server component is in its lifecycle. There are five possible server values: Pending: The Argo CD server component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD server component are in a Ready state. Failed: At least one of the  Argo CD server component Pods had a failure. Unknown: For some reason the state of the Argo CD server component could not be obtained.
        """
        if application_controller is not None:
            pulumi.set(__self__, "application_controller", application_controller)
        if dex is not None:
            pulumi.set(__self__, "dex", dex)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)
        if repo is not None:
            pulumi.set(__self__, "repo", repo)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="applicationController")
    def application_controller(self) -> Optional[str]:
        """
        ApplicationController is a simple, high-level summary of where the Argo CD application controller component is in its lifecycle. There are five possible ApplicationController values: Pending: The Argo CD application controller component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD application controller component are in a Ready state. Failed: At least one of the  Argo CD application controller component Pods had a failure. Unknown: For some reason the state of the Argo CD application controller component could not be obtained.
        """
        return pulumi.get(self, "application_controller")

    @property
    @pulumi.getter
    def dex(self) -> Optional[str]:
        """
        Dex is a simple, high-level summary of where the Argo CD Dex component is in its lifecycle. There are five possible dex values: Pending: The Argo CD Dex component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Dex component are in a Ready state. Failed: At least one of the  Argo CD Dex component Pods had a failure. Unknown: For some reason the state of the Argo CD Dex component could not be obtained.
        """
        return pulumi.get(self, "dex")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        Phase is a simple, high-level summary of where the ArgoCD is in its lifecycle. There are five possible phase values: Pending: The ArgoCD has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Available: All of the resources for the ArgoCD are ready. Failed: At least one resource has experienced a failure. Unknown: For some reason the state of the ArgoCD phase could not be obtained.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def redis(self) -> Optional[str]:
        """
        Redis is a simple, high-level summary of where the Argo CD Redis component is in its lifecycle. There are five possible redis values: Pending: The Argo CD Redis component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Redis component are in a Ready state. Failed: At least one of the  Argo CD Redis component Pods had a failure. Unknown: For some reason the state of the Argo CD Redis component could not be obtained.
        """
        return pulumi.get(self, "redis")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        """
        Repo is a simple, high-level summary of where the Argo CD Repo component is in its lifecycle. There are five possible repo values: Pending: The Argo CD Repo component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD Repo component are in a Ready state. Failed: At least one of the  Argo CD Repo component Pods had a failure. Unknown: For some reason the state of the Argo CD Repo component could not be obtained.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        Server is a simple, high-level summary of where the Argo CD server component is in its lifecycle. There are five possible server values: Pending: The Argo CD server component has been accepted by the Kubernetes system, but one or more of the required resources have not been created. Running: All of the required Pods for the Argo CD server component are in a Ready state. Failed: At least one of the  Argo CD server component Pods had a failure. Unknown: For some reason the state of the Argo CD server component could not be obtained.
        """
        return pulumi.get(self, "server")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



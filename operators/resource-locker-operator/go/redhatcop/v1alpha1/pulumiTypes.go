// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ResourceLocker is the Schema for the resourcelockers API
type ResourceLockerType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ResourceLockerSpec defines the desired state of ResourceLocker
	Spec *ResourceLockerSpec `pulumi:"spec"`
	// ResourceLockerStatus defines the observed state of ResourceLocker
	Status *ResourceLockerStatus `pulumi:"status"`
}

// ResourceLockerTypeInput is an input type that accepts ResourceLockerTypeArgs and ResourceLockerTypeOutput values.
// You can construct a concrete instance of `ResourceLockerTypeInput` via:
//
//          ResourceLockerTypeArgs{...}
type ResourceLockerTypeInput interface {
	pulumi.Input

	ToResourceLockerTypeOutput() ResourceLockerTypeOutput
	ToResourceLockerTypeOutputWithContext(context.Context) ResourceLockerTypeOutput
}

// ResourceLocker is the Schema for the resourcelockers API
type ResourceLockerTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// ResourceLockerSpec defines the desired state of ResourceLocker
	Spec ResourceLockerSpecPtrInput `pulumi:"spec"`
	// ResourceLockerStatus defines the observed state of ResourceLocker
	Status ResourceLockerStatusPtrInput `pulumi:"status"`
}

func (ResourceLockerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerType)(nil)).Elem()
}

func (i ResourceLockerTypeArgs) ToResourceLockerTypeOutput() ResourceLockerTypeOutput {
	return i.ToResourceLockerTypeOutputWithContext(context.Background())
}

func (i ResourceLockerTypeArgs) ToResourceLockerTypeOutputWithContext(ctx context.Context) ResourceLockerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerTypeOutput)
}

// ResourceLocker is the Schema for the resourcelockers API
type ResourceLockerTypeOutput struct{ *pulumi.OutputState }

func (ResourceLockerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerType)(nil)).Elem()
}

func (o ResourceLockerTypeOutput) ToResourceLockerTypeOutput() ResourceLockerTypeOutput {
	return o
}

func (o ResourceLockerTypeOutput) ToResourceLockerTypeOutputWithContext(ctx context.Context) ResourceLockerTypeOutput {
	return o
}

func (o ResourceLockerTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ResourceLockerTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ResourceLockerTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ResourceLockerType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ResourceLockerSpec defines the desired state of ResourceLocker
func (o ResourceLockerTypeOutput) Spec() ResourceLockerSpecPtrOutput {
	return o.ApplyT(func(v ResourceLockerType) *ResourceLockerSpec { return v.Spec }).(ResourceLockerSpecPtrOutput)
}

// ResourceLockerStatus defines the observed state of ResourceLocker
func (o ResourceLockerTypeOutput) Status() ResourceLockerStatusPtrOutput {
	return o.ApplyT(func(v ResourceLockerType) *ResourceLockerStatus { return v.Status }).(ResourceLockerStatusPtrOutput)
}

type ResourceLockerMetadata struct {
}

// ResourceLockerMetadataInput is an input type that accepts ResourceLockerMetadataArgs and ResourceLockerMetadataOutput values.
// You can construct a concrete instance of `ResourceLockerMetadataInput` via:
//
//          ResourceLockerMetadataArgs{...}
type ResourceLockerMetadataInput interface {
	pulumi.Input

	ToResourceLockerMetadataOutput() ResourceLockerMetadataOutput
	ToResourceLockerMetadataOutputWithContext(context.Context) ResourceLockerMetadataOutput
}

type ResourceLockerMetadataArgs struct {
}

func (ResourceLockerMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerMetadata)(nil)).Elem()
}

func (i ResourceLockerMetadataArgs) ToResourceLockerMetadataOutput() ResourceLockerMetadataOutput {
	return i.ToResourceLockerMetadataOutputWithContext(context.Background())
}

func (i ResourceLockerMetadataArgs) ToResourceLockerMetadataOutputWithContext(ctx context.Context) ResourceLockerMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerMetadataOutput)
}

type ResourceLockerMetadataOutput struct{ *pulumi.OutputState }

func (ResourceLockerMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerMetadata)(nil)).Elem()
}

func (o ResourceLockerMetadataOutput) ToResourceLockerMetadataOutput() ResourceLockerMetadataOutput {
	return o
}

func (o ResourceLockerMetadataOutput) ToResourceLockerMetadataOutputWithContext(ctx context.Context) ResourceLockerMetadataOutput {
	return o
}

// ResourceLockerSpec defines the desired state of ResourceLocker
type ResourceLockerSpec struct {
	// Patches is a list of patches that should be enforced at runtime.
	Patches []ResourceLockerSpecPatches `pulumi:"patches"`
	// Resources is a list of resource manifests that should be locked into the specified configuration
	Resources []ResourceLockerSpecResources `pulumi:"resources"`
	// ServiceAccountRef is the service account to be used to run the controllers associated with this configuration kubebuilder:default:="{Name: &#34;default&#34;}"
	ServiceAccountRef *ResourceLockerSpecServiceAccountRef `pulumi:"serviceAccountRef"`
}

// ResourceLockerSpecInput is an input type that accepts ResourceLockerSpecArgs and ResourceLockerSpecOutput values.
// You can construct a concrete instance of `ResourceLockerSpecInput` via:
//
//          ResourceLockerSpecArgs{...}
type ResourceLockerSpecInput interface {
	pulumi.Input

	ToResourceLockerSpecOutput() ResourceLockerSpecOutput
	ToResourceLockerSpecOutputWithContext(context.Context) ResourceLockerSpecOutput
}

// ResourceLockerSpec defines the desired state of ResourceLocker
type ResourceLockerSpecArgs struct {
	// Patches is a list of patches that should be enforced at runtime.
	Patches ResourceLockerSpecPatchesArrayInput `pulumi:"patches"`
	// Resources is a list of resource manifests that should be locked into the specified configuration
	Resources ResourceLockerSpecResourcesArrayInput `pulumi:"resources"`
	// ServiceAccountRef is the service account to be used to run the controllers associated with this configuration kubebuilder:default:="{Name: &#34;default&#34;}"
	ServiceAccountRef ResourceLockerSpecServiceAccountRefPtrInput `pulumi:"serviceAccountRef"`
}

func (ResourceLockerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerSpec)(nil)).Elem()
}

func (i ResourceLockerSpecArgs) ToResourceLockerSpecOutput() ResourceLockerSpecOutput {
	return i.ToResourceLockerSpecOutputWithContext(context.Background())
}

func (i ResourceLockerSpecArgs) ToResourceLockerSpecOutputWithContext(ctx context.Context) ResourceLockerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerSpecOutput)
}

func (i ResourceLockerSpecArgs) ToResourceLockerSpecPtrOutput() ResourceLockerSpecPtrOutput {
	return i.ToResourceLockerSpecPtrOutputWithContext(context.Background())
}

func (i ResourceLockerSpecArgs) ToResourceLockerSpecPtrOutputWithContext(ctx context.Context) ResourceLockerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerSpecOutput).ToResourceLockerSpecPtrOutputWithContext(ctx)
}

// ResourceLockerSpecPtrInput is an input type that accepts ResourceLockerSpecArgs, ResourceLockerSpecPtr and ResourceLockerSpecPtrOutput values.
// You can construct a concrete instance of `ResourceLockerSpecPtrInput` via:
//
//          ResourceLockerSpecArgs{...}
//
//  or:
//
//          nil
type ResourceLockerSpecPtrInput interface {
	pulumi.Input

	ToResourceLockerSpecPtrOutput() ResourceLockerSpecPtrOutput
	ToResourceLockerSpecPtrOutputWithContext(context.Context) ResourceLockerSpecPtrOutput
}

type resourceLockerSpecPtrType ResourceLockerSpecArgs

func ResourceLockerSpecPtr(v *ResourceLockerSpecArgs) ResourceLockerSpecPtrInput {
	return (*resourceLockerSpecPtrType)(v)
}

func (*resourceLockerSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLockerSpec)(nil)).Elem()
}

func (i *resourceLockerSpecPtrType) ToResourceLockerSpecPtrOutput() ResourceLockerSpecPtrOutput {
	return i.ToResourceLockerSpecPtrOutputWithContext(context.Background())
}

func (i *resourceLockerSpecPtrType) ToResourceLockerSpecPtrOutputWithContext(ctx context.Context) ResourceLockerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerSpecPtrOutput)
}

// ResourceLockerSpec defines the desired state of ResourceLocker
type ResourceLockerSpecOutput struct{ *pulumi.OutputState }

func (ResourceLockerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerSpec)(nil)).Elem()
}

func (o ResourceLockerSpecOutput) ToResourceLockerSpecOutput() ResourceLockerSpecOutput {
	return o
}

func (o ResourceLockerSpecOutput) ToResourceLockerSpecOutputWithContext(ctx context.Context) ResourceLockerSpecOutput {
	return o
}

func (o ResourceLockerSpecOutput) ToResourceLockerSpecPtrOutput() ResourceLockerSpecPtrOutput {
	return o.ToResourceLockerSpecPtrOutputWithContext(context.Background())
}

func (o ResourceLockerSpecOutput) ToResourceLockerSpecPtrOutputWithContext(ctx context.Context) ResourceLockerSpecPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpec) *ResourceLockerSpec {
		return &v
	}).(ResourceLockerSpecPtrOutput)
}

// Patches is a list of patches that should be enforced at runtime.
func (o ResourceLockerSpecOutput) Patches() ResourceLockerSpecPatchesArrayOutput {
	return o.ApplyT(func(v ResourceLockerSpec) []ResourceLockerSpecPatches { return v.Patches }).(ResourceLockerSpecPatchesArrayOutput)
}

// Resources is a list of resource manifests that should be locked into the specified configuration
func (o ResourceLockerSpecOutput) Resources() ResourceLockerSpecResourcesArrayOutput {
	return o.ApplyT(func(v ResourceLockerSpec) []ResourceLockerSpecResources { return v.Resources }).(ResourceLockerSpecResourcesArrayOutput)
}

// ServiceAccountRef is the service account to be used to run the controllers associated with this configuration kubebuilder:default:="{Name: &#34;default&#34;}"
func (o ResourceLockerSpecOutput) ServiceAccountRef() ResourceLockerSpecServiceAccountRefPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpec) *ResourceLockerSpecServiceAccountRef { return v.ServiceAccountRef }).(ResourceLockerSpecServiceAccountRefPtrOutput)
}

type ResourceLockerSpecPtrOutput struct{ *pulumi.OutputState }

func (ResourceLockerSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLockerSpec)(nil)).Elem()
}

func (o ResourceLockerSpecPtrOutput) ToResourceLockerSpecPtrOutput() ResourceLockerSpecPtrOutput {
	return o
}

func (o ResourceLockerSpecPtrOutput) ToResourceLockerSpecPtrOutputWithContext(ctx context.Context) ResourceLockerSpecPtrOutput {
	return o
}

func (o ResourceLockerSpecPtrOutput) Elem() ResourceLockerSpecOutput {
	return o.ApplyT(func(v *ResourceLockerSpec) ResourceLockerSpec { return *v }).(ResourceLockerSpecOutput)
}

// Patches is a list of patches that should be enforced at runtime.
func (o ResourceLockerSpecPtrOutput) Patches() ResourceLockerSpecPatchesArrayOutput {
	return o.ApplyT(func(v *ResourceLockerSpec) []ResourceLockerSpecPatches {
		if v == nil {
			return nil
		}
		return v.Patches
	}).(ResourceLockerSpecPatchesArrayOutput)
}

// Resources is a list of resource manifests that should be locked into the specified configuration
func (o ResourceLockerSpecPtrOutput) Resources() ResourceLockerSpecResourcesArrayOutput {
	return o.ApplyT(func(v *ResourceLockerSpec) []ResourceLockerSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ResourceLockerSpecResourcesArrayOutput)
}

// ServiceAccountRef is the service account to be used to run the controllers associated with this configuration kubebuilder:default:="{Name: &#34;default&#34;}"
func (o ResourceLockerSpecPtrOutput) ServiceAccountRef() ResourceLockerSpecServiceAccountRefPtrOutput {
	return o.ApplyT(func(v *ResourceLockerSpec) *ResourceLockerSpecServiceAccountRef {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(ResourceLockerSpecServiceAccountRefPtrOutput)
}

// Patch describe a patch to be enforced at runtime
type ResourceLockerSpecPatches struct {
	// ID represent a unique identifier for the patch in the array of patches oc this CR
	Id string `pulumi:"id"`
	// PatchTemplate is a go template that will be resolved using the SourceObjectRefs as parameters. The result must be a valid patch based on the patch type and the target object.
	PatchTemplate string `pulumi:"patchTemplate"`
	// PatchType is the type of patch to be applied, one of "application/json-patch+json"'"application/merge-patch+json","application/strategic-merge-patch+json","application/apply-patch+yaml" kubebuilder:default:="application/strategic-merge-patch+json"
	PatchType *string `pulumi:"patchType"`
	// SourceObject refs is an array of references to source objects that will be used as input for the template processing
	SourceObjectRefs []ResourceLockerSpecPatchesSourceObjectRefs `pulumi:"sourceObjectRefs"`
	// TargetObjectRef is a reference to the object to which the patch should be applied.
	TargetObjectRef ResourceLockerSpecPatchesTargetObjectRef `pulumi:"targetObjectRef"`
}

// ResourceLockerSpecPatchesInput is an input type that accepts ResourceLockerSpecPatchesArgs and ResourceLockerSpecPatchesOutput values.
// You can construct a concrete instance of `ResourceLockerSpecPatchesInput` via:
//
//          ResourceLockerSpecPatchesArgs{...}
type ResourceLockerSpecPatchesInput interface {
	pulumi.Input

	ToResourceLockerSpecPatchesOutput() ResourceLockerSpecPatchesOutput
	ToResourceLockerSpecPatchesOutputWithContext(context.Context) ResourceLockerSpecPatchesOutput
}

// Patch describe a patch to be enforced at runtime
type ResourceLockerSpecPatchesArgs struct {
	// ID represent a unique identifier for the patch in the array of patches oc this CR
	Id pulumi.StringInput `pulumi:"id"`
	// PatchTemplate is a go template that will be resolved using the SourceObjectRefs as parameters. The result must be a valid patch based on the patch type and the target object.
	PatchTemplate pulumi.StringInput `pulumi:"patchTemplate"`
	// PatchType is the type of patch to be applied, one of "application/json-patch+json"'"application/merge-patch+json","application/strategic-merge-patch+json","application/apply-patch+yaml" kubebuilder:default:="application/strategic-merge-patch+json"
	PatchType pulumi.StringPtrInput `pulumi:"patchType"`
	// SourceObject refs is an array of references to source objects that will be used as input for the template processing
	SourceObjectRefs ResourceLockerSpecPatchesSourceObjectRefsArrayInput `pulumi:"sourceObjectRefs"`
	// TargetObjectRef is a reference to the object to which the patch should be applied.
	TargetObjectRef ResourceLockerSpecPatchesTargetObjectRefInput `pulumi:"targetObjectRef"`
}

func (ResourceLockerSpecPatchesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerSpecPatches)(nil)).Elem()
}

func (i ResourceLockerSpecPatchesArgs) ToResourceLockerSpecPatchesOutput() ResourceLockerSpecPatchesOutput {
	return i.ToResourceLockerSpecPatchesOutputWithContext(context.Background())
}

func (i ResourceLockerSpecPatchesArgs) ToResourceLockerSpecPatchesOutputWithContext(ctx context.Context) ResourceLockerSpecPatchesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerSpecPatchesOutput)
}

// ResourceLockerSpecPatchesArrayInput is an input type that accepts ResourceLockerSpecPatchesArray and ResourceLockerSpecPatchesArrayOutput values.
// You can construct a concrete instance of `ResourceLockerSpecPatchesArrayInput` via:
//
//          ResourceLockerSpecPatchesArray{ ResourceLockerSpecPatchesArgs{...} }
type ResourceLockerSpecPatchesArrayInput interface {
	pulumi.Input

	ToResourceLockerSpecPatchesArrayOutput() ResourceLockerSpecPatchesArrayOutput
	ToResourceLockerSpecPatchesArrayOutputWithContext(context.Context) ResourceLockerSpecPatchesArrayOutput
}

type ResourceLockerSpecPatchesArray []ResourceLockerSpecPatchesInput

func (ResourceLockerSpecPatchesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLockerSpecPatches)(nil)).Elem()
}

func (i ResourceLockerSpecPatchesArray) ToResourceLockerSpecPatchesArrayOutput() ResourceLockerSpecPatchesArrayOutput {
	return i.ToResourceLockerSpecPatchesArrayOutputWithContext(context.Background())
}

func (i ResourceLockerSpecPatchesArray) ToResourceLockerSpecPatchesArrayOutputWithContext(ctx context.Context) ResourceLockerSpecPatchesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerSpecPatchesArrayOutput)
}

// Patch describe a patch to be enforced at runtime
type ResourceLockerSpecPatchesOutput struct{ *pulumi.OutputState }

func (ResourceLockerSpecPatchesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerSpecPatches)(nil)).Elem()
}

func (o ResourceLockerSpecPatchesOutput) ToResourceLockerSpecPatchesOutput() ResourceLockerSpecPatchesOutput {
	return o
}

func (o ResourceLockerSpecPatchesOutput) ToResourceLockerSpecPatchesOutputWithContext(ctx context.Context) ResourceLockerSpecPatchesOutput {
	return o
}

// ID represent a unique identifier for the patch in the array of patches oc this CR
func (o ResourceLockerSpecPatchesOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatches) string { return v.Id }).(pulumi.StringOutput)
}

// PatchTemplate is a go template that will be resolved using the SourceObjectRefs as parameters. The result must be a valid patch based on the patch type and the target object.
func (o ResourceLockerSpecPatchesOutput) PatchTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatches) string { return v.PatchTemplate }).(pulumi.StringOutput)
}

// PatchType is the type of patch to be applied, one of "application/json-patch+json"'"application/merge-patch+json","application/strategic-merge-patch+json","application/apply-patch+yaml" kubebuilder:default:="application/strategic-merge-patch+json"
func (o ResourceLockerSpecPatchesOutput) PatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatches) *string { return v.PatchType }).(pulumi.StringPtrOutput)
}

// SourceObject refs is an array of references to source objects that will be used as input for the template processing
func (o ResourceLockerSpecPatchesOutput) SourceObjectRefs() ResourceLockerSpecPatchesSourceObjectRefsArrayOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatches) []ResourceLockerSpecPatchesSourceObjectRefs {
		return v.SourceObjectRefs
	}).(ResourceLockerSpecPatchesSourceObjectRefsArrayOutput)
}

// TargetObjectRef is a reference to the object to which the patch should be applied.
func (o ResourceLockerSpecPatchesOutput) TargetObjectRef() ResourceLockerSpecPatchesTargetObjectRefOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatches) ResourceLockerSpecPatchesTargetObjectRef { return v.TargetObjectRef }).(ResourceLockerSpecPatchesTargetObjectRefOutput)
}

type ResourceLockerSpecPatchesArrayOutput struct{ *pulumi.OutputState }

func (ResourceLockerSpecPatchesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLockerSpecPatches)(nil)).Elem()
}

func (o ResourceLockerSpecPatchesArrayOutput) ToResourceLockerSpecPatchesArrayOutput() ResourceLockerSpecPatchesArrayOutput {
	return o
}

func (o ResourceLockerSpecPatchesArrayOutput) ToResourceLockerSpecPatchesArrayOutputWithContext(ctx context.Context) ResourceLockerSpecPatchesArrayOutput {
	return o
}

func (o ResourceLockerSpecPatchesArrayOutput) Index(i pulumi.IntInput) ResourceLockerSpecPatchesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceLockerSpecPatches {
		return vs[0].([]ResourceLockerSpecPatches)[vs[1].(int)]
	}).(ResourceLockerSpecPatchesOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
type ResourceLockerSpecPatchesSourceObjectRefs struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// ResourceLockerSpecPatchesSourceObjectRefsInput is an input type that accepts ResourceLockerSpecPatchesSourceObjectRefsArgs and ResourceLockerSpecPatchesSourceObjectRefsOutput values.
// You can construct a concrete instance of `ResourceLockerSpecPatchesSourceObjectRefsInput` via:
//
//          ResourceLockerSpecPatchesSourceObjectRefsArgs{...}
type ResourceLockerSpecPatchesSourceObjectRefsInput interface {
	pulumi.Input

	ToResourceLockerSpecPatchesSourceObjectRefsOutput() ResourceLockerSpecPatchesSourceObjectRefsOutput
	ToResourceLockerSpecPatchesSourceObjectRefsOutputWithContext(context.Context) ResourceLockerSpecPatchesSourceObjectRefsOutput
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
type ResourceLockerSpecPatchesSourceObjectRefsArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ResourceLockerSpecPatchesSourceObjectRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerSpecPatchesSourceObjectRefs)(nil)).Elem()
}

func (i ResourceLockerSpecPatchesSourceObjectRefsArgs) ToResourceLockerSpecPatchesSourceObjectRefsOutput() ResourceLockerSpecPatchesSourceObjectRefsOutput {
	return i.ToResourceLockerSpecPatchesSourceObjectRefsOutputWithContext(context.Background())
}

func (i ResourceLockerSpecPatchesSourceObjectRefsArgs) ToResourceLockerSpecPatchesSourceObjectRefsOutputWithContext(ctx context.Context) ResourceLockerSpecPatchesSourceObjectRefsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerSpecPatchesSourceObjectRefsOutput)
}

// ResourceLockerSpecPatchesSourceObjectRefsArrayInput is an input type that accepts ResourceLockerSpecPatchesSourceObjectRefsArray and ResourceLockerSpecPatchesSourceObjectRefsArrayOutput values.
// You can construct a concrete instance of `ResourceLockerSpecPatchesSourceObjectRefsArrayInput` via:
//
//          ResourceLockerSpecPatchesSourceObjectRefsArray{ ResourceLockerSpecPatchesSourceObjectRefsArgs{...} }
type ResourceLockerSpecPatchesSourceObjectRefsArrayInput interface {
	pulumi.Input

	ToResourceLockerSpecPatchesSourceObjectRefsArrayOutput() ResourceLockerSpecPatchesSourceObjectRefsArrayOutput
	ToResourceLockerSpecPatchesSourceObjectRefsArrayOutputWithContext(context.Context) ResourceLockerSpecPatchesSourceObjectRefsArrayOutput
}

type ResourceLockerSpecPatchesSourceObjectRefsArray []ResourceLockerSpecPatchesSourceObjectRefsInput

func (ResourceLockerSpecPatchesSourceObjectRefsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLockerSpecPatchesSourceObjectRefs)(nil)).Elem()
}

func (i ResourceLockerSpecPatchesSourceObjectRefsArray) ToResourceLockerSpecPatchesSourceObjectRefsArrayOutput() ResourceLockerSpecPatchesSourceObjectRefsArrayOutput {
	return i.ToResourceLockerSpecPatchesSourceObjectRefsArrayOutputWithContext(context.Background())
}

func (i ResourceLockerSpecPatchesSourceObjectRefsArray) ToResourceLockerSpecPatchesSourceObjectRefsArrayOutputWithContext(ctx context.Context) ResourceLockerSpecPatchesSourceObjectRefsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerSpecPatchesSourceObjectRefsArrayOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
type ResourceLockerSpecPatchesSourceObjectRefsOutput struct{ *pulumi.OutputState }

func (ResourceLockerSpecPatchesSourceObjectRefsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerSpecPatchesSourceObjectRefs)(nil)).Elem()
}

func (o ResourceLockerSpecPatchesSourceObjectRefsOutput) ToResourceLockerSpecPatchesSourceObjectRefsOutput() ResourceLockerSpecPatchesSourceObjectRefsOutput {
	return o
}

func (o ResourceLockerSpecPatchesSourceObjectRefsOutput) ToResourceLockerSpecPatchesSourceObjectRefsOutputWithContext(ctx context.Context) ResourceLockerSpecPatchesSourceObjectRefsOutput {
	return o
}

// API version of the referent.
func (o ResourceLockerSpecPatchesSourceObjectRefsOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatchesSourceObjectRefs) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ResourceLockerSpecPatchesSourceObjectRefsOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatchesSourceObjectRefs) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceLockerSpecPatchesSourceObjectRefsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatchesSourceObjectRefs) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ResourceLockerSpecPatchesSourceObjectRefsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatchesSourceObjectRefs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ResourceLockerSpecPatchesSourceObjectRefsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatchesSourceObjectRefs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ResourceLockerSpecPatchesSourceObjectRefsOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatchesSourceObjectRefs) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ResourceLockerSpecPatchesSourceObjectRefsOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatchesSourceObjectRefs) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ResourceLockerSpecPatchesSourceObjectRefsArrayOutput struct{ *pulumi.OutputState }

func (ResourceLockerSpecPatchesSourceObjectRefsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLockerSpecPatchesSourceObjectRefs)(nil)).Elem()
}

func (o ResourceLockerSpecPatchesSourceObjectRefsArrayOutput) ToResourceLockerSpecPatchesSourceObjectRefsArrayOutput() ResourceLockerSpecPatchesSourceObjectRefsArrayOutput {
	return o
}

func (o ResourceLockerSpecPatchesSourceObjectRefsArrayOutput) ToResourceLockerSpecPatchesSourceObjectRefsArrayOutputWithContext(ctx context.Context) ResourceLockerSpecPatchesSourceObjectRefsArrayOutput {
	return o
}

func (o ResourceLockerSpecPatchesSourceObjectRefsArrayOutput) Index(i pulumi.IntInput) ResourceLockerSpecPatchesSourceObjectRefsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceLockerSpecPatchesSourceObjectRefs {
		return vs[0].([]ResourceLockerSpecPatchesSourceObjectRefs)[vs[1].(int)]
	}).(ResourceLockerSpecPatchesSourceObjectRefsOutput)
}

// TargetObjectRef is a reference to the object to which the patch should be applied.
type ResourceLockerSpecPatchesTargetObjectRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// ResourceLockerSpecPatchesTargetObjectRefInput is an input type that accepts ResourceLockerSpecPatchesTargetObjectRefArgs and ResourceLockerSpecPatchesTargetObjectRefOutput values.
// You can construct a concrete instance of `ResourceLockerSpecPatchesTargetObjectRefInput` via:
//
//          ResourceLockerSpecPatchesTargetObjectRefArgs{...}
type ResourceLockerSpecPatchesTargetObjectRefInput interface {
	pulumi.Input

	ToResourceLockerSpecPatchesTargetObjectRefOutput() ResourceLockerSpecPatchesTargetObjectRefOutput
	ToResourceLockerSpecPatchesTargetObjectRefOutputWithContext(context.Context) ResourceLockerSpecPatchesTargetObjectRefOutput
}

// TargetObjectRef is a reference to the object to which the patch should be applied.
type ResourceLockerSpecPatchesTargetObjectRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ResourceLockerSpecPatchesTargetObjectRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerSpecPatchesTargetObjectRef)(nil)).Elem()
}

func (i ResourceLockerSpecPatchesTargetObjectRefArgs) ToResourceLockerSpecPatchesTargetObjectRefOutput() ResourceLockerSpecPatchesTargetObjectRefOutput {
	return i.ToResourceLockerSpecPatchesTargetObjectRefOutputWithContext(context.Background())
}

func (i ResourceLockerSpecPatchesTargetObjectRefArgs) ToResourceLockerSpecPatchesTargetObjectRefOutputWithContext(ctx context.Context) ResourceLockerSpecPatchesTargetObjectRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerSpecPatchesTargetObjectRefOutput)
}

// TargetObjectRef is a reference to the object to which the patch should be applied.
type ResourceLockerSpecPatchesTargetObjectRefOutput struct{ *pulumi.OutputState }

func (ResourceLockerSpecPatchesTargetObjectRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerSpecPatchesTargetObjectRef)(nil)).Elem()
}

func (o ResourceLockerSpecPatchesTargetObjectRefOutput) ToResourceLockerSpecPatchesTargetObjectRefOutput() ResourceLockerSpecPatchesTargetObjectRefOutput {
	return o
}

func (o ResourceLockerSpecPatchesTargetObjectRefOutput) ToResourceLockerSpecPatchesTargetObjectRefOutputWithContext(ctx context.Context) ResourceLockerSpecPatchesTargetObjectRefOutput {
	return o
}

// API version of the referent.
func (o ResourceLockerSpecPatchesTargetObjectRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatchesTargetObjectRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ResourceLockerSpecPatchesTargetObjectRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatchesTargetObjectRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ResourceLockerSpecPatchesTargetObjectRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatchesTargetObjectRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ResourceLockerSpecPatchesTargetObjectRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatchesTargetObjectRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ResourceLockerSpecPatchesTargetObjectRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatchesTargetObjectRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ResourceLockerSpecPatchesTargetObjectRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatchesTargetObjectRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ResourceLockerSpecPatchesTargetObjectRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecPatchesTargetObjectRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// Resource represent a resource to be enforced
type ResourceLockerSpecResources struct {
	ExcludedPaths []string               `pulumi:"excludedPaths"`
	Object        map[string]interface{} `pulumi:"object"`
}

// ResourceLockerSpecResourcesInput is an input type that accepts ResourceLockerSpecResourcesArgs and ResourceLockerSpecResourcesOutput values.
// You can construct a concrete instance of `ResourceLockerSpecResourcesInput` via:
//
//          ResourceLockerSpecResourcesArgs{...}
type ResourceLockerSpecResourcesInput interface {
	pulumi.Input

	ToResourceLockerSpecResourcesOutput() ResourceLockerSpecResourcesOutput
	ToResourceLockerSpecResourcesOutputWithContext(context.Context) ResourceLockerSpecResourcesOutput
}

// Resource represent a resource to be enforced
type ResourceLockerSpecResourcesArgs struct {
	ExcludedPaths pulumi.StringArrayInput `pulumi:"excludedPaths"`
	Object        pulumi.MapInput         `pulumi:"object"`
}

func (ResourceLockerSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerSpecResources)(nil)).Elem()
}

func (i ResourceLockerSpecResourcesArgs) ToResourceLockerSpecResourcesOutput() ResourceLockerSpecResourcesOutput {
	return i.ToResourceLockerSpecResourcesOutputWithContext(context.Background())
}

func (i ResourceLockerSpecResourcesArgs) ToResourceLockerSpecResourcesOutputWithContext(ctx context.Context) ResourceLockerSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerSpecResourcesOutput)
}

// ResourceLockerSpecResourcesArrayInput is an input type that accepts ResourceLockerSpecResourcesArray and ResourceLockerSpecResourcesArrayOutput values.
// You can construct a concrete instance of `ResourceLockerSpecResourcesArrayInput` via:
//
//          ResourceLockerSpecResourcesArray{ ResourceLockerSpecResourcesArgs{...} }
type ResourceLockerSpecResourcesArrayInput interface {
	pulumi.Input

	ToResourceLockerSpecResourcesArrayOutput() ResourceLockerSpecResourcesArrayOutput
	ToResourceLockerSpecResourcesArrayOutputWithContext(context.Context) ResourceLockerSpecResourcesArrayOutput
}

type ResourceLockerSpecResourcesArray []ResourceLockerSpecResourcesInput

func (ResourceLockerSpecResourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLockerSpecResources)(nil)).Elem()
}

func (i ResourceLockerSpecResourcesArray) ToResourceLockerSpecResourcesArrayOutput() ResourceLockerSpecResourcesArrayOutput {
	return i.ToResourceLockerSpecResourcesArrayOutputWithContext(context.Background())
}

func (i ResourceLockerSpecResourcesArray) ToResourceLockerSpecResourcesArrayOutputWithContext(ctx context.Context) ResourceLockerSpecResourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerSpecResourcesArrayOutput)
}

// Resource represent a resource to be enforced
type ResourceLockerSpecResourcesOutput struct{ *pulumi.OutputState }

func (ResourceLockerSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerSpecResources)(nil)).Elem()
}

func (o ResourceLockerSpecResourcesOutput) ToResourceLockerSpecResourcesOutput() ResourceLockerSpecResourcesOutput {
	return o
}

func (o ResourceLockerSpecResourcesOutput) ToResourceLockerSpecResourcesOutputWithContext(ctx context.Context) ResourceLockerSpecResourcesOutput {
	return o
}

func (o ResourceLockerSpecResourcesOutput) ExcludedPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceLockerSpecResources) []string { return v.ExcludedPaths }).(pulumi.StringArrayOutput)
}

func (o ResourceLockerSpecResourcesOutput) Object() pulumi.MapOutput {
	return o.ApplyT(func(v ResourceLockerSpecResources) map[string]interface{} { return v.Object }).(pulumi.MapOutput)
}

type ResourceLockerSpecResourcesArrayOutput struct{ *pulumi.OutputState }

func (ResourceLockerSpecResourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLockerSpecResources)(nil)).Elem()
}

func (o ResourceLockerSpecResourcesArrayOutput) ToResourceLockerSpecResourcesArrayOutput() ResourceLockerSpecResourcesArrayOutput {
	return o
}

func (o ResourceLockerSpecResourcesArrayOutput) ToResourceLockerSpecResourcesArrayOutputWithContext(ctx context.Context) ResourceLockerSpecResourcesArrayOutput {
	return o
}

func (o ResourceLockerSpecResourcesArrayOutput) Index(i pulumi.IntInput) ResourceLockerSpecResourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceLockerSpecResources {
		return vs[0].([]ResourceLockerSpecResources)[vs[1].(int)]
	}).(ResourceLockerSpecResourcesOutput)
}

// ServiceAccountRef is the service account to be used to run the controllers associated with this configuration kubebuilder:default:="{Name: &#34;default&#34;}"
type ResourceLockerSpecServiceAccountRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// ResourceLockerSpecServiceAccountRefInput is an input type that accepts ResourceLockerSpecServiceAccountRefArgs and ResourceLockerSpecServiceAccountRefOutput values.
// You can construct a concrete instance of `ResourceLockerSpecServiceAccountRefInput` via:
//
//          ResourceLockerSpecServiceAccountRefArgs{...}
type ResourceLockerSpecServiceAccountRefInput interface {
	pulumi.Input

	ToResourceLockerSpecServiceAccountRefOutput() ResourceLockerSpecServiceAccountRefOutput
	ToResourceLockerSpecServiceAccountRefOutputWithContext(context.Context) ResourceLockerSpecServiceAccountRefOutput
}

// ServiceAccountRef is the service account to be used to run the controllers associated with this configuration kubebuilder:default:="{Name: &#34;default&#34;}"
type ResourceLockerSpecServiceAccountRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ResourceLockerSpecServiceAccountRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerSpecServiceAccountRef)(nil)).Elem()
}

func (i ResourceLockerSpecServiceAccountRefArgs) ToResourceLockerSpecServiceAccountRefOutput() ResourceLockerSpecServiceAccountRefOutput {
	return i.ToResourceLockerSpecServiceAccountRefOutputWithContext(context.Background())
}

func (i ResourceLockerSpecServiceAccountRefArgs) ToResourceLockerSpecServiceAccountRefOutputWithContext(ctx context.Context) ResourceLockerSpecServiceAccountRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerSpecServiceAccountRefOutput)
}

func (i ResourceLockerSpecServiceAccountRefArgs) ToResourceLockerSpecServiceAccountRefPtrOutput() ResourceLockerSpecServiceAccountRefPtrOutput {
	return i.ToResourceLockerSpecServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i ResourceLockerSpecServiceAccountRefArgs) ToResourceLockerSpecServiceAccountRefPtrOutputWithContext(ctx context.Context) ResourceLockerSpecServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerSpecServiceAccountRefOutput).ToResourceLockerSpecServiceAccountRefPtrOutputWithContext(ctx)
}

// ResourceLockerSpecServiceAccountRefPtrInput is an input type that accepts ResourceLockerSpecServiceAccountRefArgs, ResourceLockerSpecServiceAccountRefPtr and ResourceLockerSpecServiceAccountRefPtrOutput values.
// You can construct a concrete instance of `ResourceLockerSpecServiceAccountRefPtrInput` via:
//
//          ResourceLockerSpecServiceAccountRefArgs{...}
//
//  or:
//
//          nil
type ResourceLockerSpecServiceAccountRefPtrInput interface {
	pulumi.Input

	ToResourceLockerSpecServiceAccountRefPtrOutput() ResourceLockerSpecServiceAccountRefPtrOutput
	ToResourceLockerSpecServiceAccountRefPtrOutputWithContext(context.Context) ResourceLockerSpecServiceAccountRefPtrOutput
}

type resourceLockerSpecServiceAccountRefPtrType ResourceLockerSpecServiceAccountRefArgs

func ResourceLockerSpecServiceAccountRefPtr(v *ResourceLockerSpecServiceAccountRefArgs) ResourceLockerSpecServiceAccountRefPtrInput {
	return (*resourceLockerSpecServiceAccountRefPtrType)(v)
}

func (*resourceLockerSpecServiceAccountRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLockerSpecServiceAccountRef)(nil)).Elem()
}

func (i *resourceLockerSpecServiceAccountRefPtrType) ToResourceLockerSpecServiceAccountRefPtrOutput() ResourceLockerSpecServiceAccountRefPtrOutput {
	return i.ToResourceLockerSpecServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i *resourceLockerSpecServiceAccountRefPtrType) ToResourceLockerSpecServiceAccountRefPtrOutputWithContext(ctx context.Context) ResourceLockerSpecServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerSpecServiceAccountRefPtrOutput)
}

// ServiceAccountRef is the service account to be used to run the controllers associated with this configuration kubebuilder:default:="{Name: &#34;default&#34;}"
type ResourceLockerSpecServiceAccountRefOutput struct{ *pulumi.OutputState }

func (ResourceLockerSpecServiceAccountRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerSpecServiceAccountRef)(nil)).Elem()
}

func (o ResourceLockerSpecServiceAccountRefOutput) ToResourceLockerSpecServiceAccountRefOutput() ResourceLockerSpecServiceAccountRefOutput {
	return o
}

func (o ResourceLockerSpecServiceAccountRefOutput) ToResourceLockerSpecServiceAccountRefOutputWithContext(ctx context.Context) ResourceLockerSpecServiceAccountRefOutput {
	return o
}

func (o ResourceLockerSpecServiceAccountRefOutput) ToResourceLockerSpecServiceAccountRefPtrOutput() ResourceLockerSpecServiceAccountRefPtrOutput {
	return o.ToResourceLockerSpecServiceAccountRefPtrOutputWithContext(context.Background())
}

func (o ResourceLockerSpecServiceAccountRefOutput) ToResourceLockerSpecServiceAccountRefPtrOutputWithContext(ctx context.Context) ResourceLockerSpecServiceAccountRefPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecServiceAccountRef) *ResourceLockerSpecServiceAccountRef {
		return &v
	}).(ResourceLockerSpecServiceAccountRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o ResourceLockerSpecServiceAccountRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerSpecServiceAccountRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ResourceLockerSpecServiceAccountRefPtrOutput struct{ *pulumi.OutputState }

func (ResourceLockerSpecServiceAccountRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLockerSpecServiceAccountRef)(nil)).Elem()
}

func (o ResourceLockerSpecServiceAccountRefPtrOutput) ToResourceLockerSpecServiceAccountRefPtrOutput() ResourceLockerSpecServiceAccountRefPtrOutput {
	return o
}

func (o ResourceLockerSpecServiceAccountRefPtrOutput) ToResourceLockerSpecServiceAccountRefPtrOutputWithContext(ctx context.Context) ResourceLockerSpecServiceAccountRefPtrOutput {
	return o
}

func (o ResourceLockerSpecServiceAccountRefPtrOutput) Elem() ResourceLockerSpecServiceAccountRefOutput {
	return o.ApplyT(func(v *ResourceLockerSpecServiceAccountRef) ResourceLockerSpecServiceAccountRef { return *v }).(ResourceLockerSpecServiceAccountRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o ResourceLockerSpecServiceAccountRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceLockerSpecServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ResourceLockerStatus defines the observed state of ResourceLocker
type ResourceLockerStatus struct {
	// ReconcileStatus this is the general status of the main reconciler
	Conditions []ResourceLockerStatusConditions `pulumi:"conditions"`
	// LockedResourceStatuses contains the reconcile status for each of the managed resources
	LockedPatchStatuses map[string][]ResourceLockerStatusLockedPatchStatuses `pulumi:"lockedPatchStatuses"`
	// LockedResourceStatuses contains the reconcile status for each of the managed resources
	LockedResourceStatuses map[string][]ResourceLockerStatusLockedResourceStatuses `pulumi:"lockedResourceStatuses"`
}

// ResourceLockerStatusInput is an input type that accepts ResourceLockerStatusArgs and ResourceLockerStatusOutput values.
// You can construct a concrete instance of `ResourceLockerStatusInput` via:
//
//          ResourceLockerStatusArgs{...}
type ResourceLockerStatusInput interface {
	pulumi.Input

	ToResourceLockerStatusOutput() ResourceLockerStatusOutput
	ToResourceLockerStatusOutputWithContext(context.Context) ResourceLockerStatusOutput
}

// ResourceLockerStatus defines the observed state of ResourceLocker
type ResourceLockerStatusArgs struct {
	// ReconcileStatus this is the general status of the main reconciler
	Conditions ResourceLockerStatusConditionsArrayInput `pulumi:"conditions"`
	// LockedResourceStatuses contains the reconcile status for each of the managed resources
	LockedPatchStatuses ResourceLockerStatusLockedPatchStatusesArrayMapInput `pulumi:"lockedPatchStatuses"`
	// LockedResourceStatuses contains the reconcile status for each of the managed resources
	LockedResourceStatuses ResourceLockerStatusLockedResourceStatusesArrayMapInput `pulumi:"lockedResourceStatuses"`
}

func (ResourceLockerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerStatus)(nil)).Elem()
}

func (i ResourceLockerStatusArgs) ToResourceLockerStatusOutput() ResourceLockerStatusOutput {
	return i.ToResourceLockerStatusOutputWithContext(context.Background())
}

func (i ResourceLockerStatusArgs) ToResourceLockerStatusOutputWithContext(ctx context.Context) ResourceLockerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerStatusOutput)
}

func (i ResourceLockerStatusArgs) ToResourceLockerStatusPtrOutput() ResourceLockerStatusPtrOutput {
	return i.ToResourceLockerStatusPtrOutputWithContext(context.Background())
}

func (i ResourceLockerStatusArgs) ToResourceLockerStatusPtrOutputWithContext(ctx context.Context) ResourceLockerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerStatusOutput).ToResourceLockerStatusPtrOutputWithContext(ctx)
}

// ResourceLockerStatusPtrInput is an input type that accepts ResourceLockerStatusArgs, ResourceLockerStatusPtr and ResourceLockerStatusPtrOutput values.
// You can construct a concrete instance of `ResourceLockerStatusPtrInput` via:
//
//          ResourceLockerStatusArgs{...}
//
//  or:
//
//          nil
type ResourceLockerStatusPtrInput interface {
	pulumi.Input

	ToResourceLockerStatusPtrOutput() ResourceLockerStatusPtrOutput
	ToResourceLockerStatusPtrOutputWithContext(context.Context) ResourceLockerStatusPtrOutput
}

type resourceLockerStatusPtrType ResourceLockerStatusArgs

func ResourceLockerStatusPtr(v *ResourceLockerStatusArgs) ResourceLockerStatusPtrInput {
	return (*resourceLockerStatusPtrType)(v)
}

func (*resourceLockerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLockerStatus)(nil)).Elem()
}

func (i *resourceLockerStatusPtrType) ToResourceLockerStatusPtrOutput() ResourceLockerStatusPtrOutput {
	return i.ToResourceLockerStatusPtrOutputWithContext(context.Background())
}

func (i *resourceLockerStatusPtrType) ToResourceLockerStatusPtrOutputWithContext(ctx context.Context) ResourceLockerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerStatusPtrOutput)
}

// ResourceLockerStatus defines the observed state of ResourceLocker
type ResourceLockerStatusOutput struct{ *pulumi.OutputState }

func (ResourceLockerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerStatus)(nil)).Elem()
}

func (o ResourceLockerStatusOutput) ToResourceLockerStatusOutput() ResourceLockerStatusOutput {
	return o
}

func (o ResourceLockerStatusOutput) ToResourceLockerStatusOutputWithContext(ctx context.Context) ResourceLockerStatusOutput {
	return o
}

func (o ResourceLockerStatusOutput) ToResourceLockerStatusPtrOutput() ResourceLockerStatusPtrOutput {
	return o.ToResourceLockerStatusPtrOutputWithContext(context.Background())
}

func (o ResourceLockerStatusOutput) ToResourceLockerStatusPtrOutputWithContext(ctx context.Context) ResourceLockerStatusPtrOutput {
	return o.ApplyT(func(v ResourceLockerStatus) *ResourceLockerStatus {
		return &v
	}).(ResourceLockerStatusPtrOutput)
}

// ReconcileStatus this is the general status of the main reconciler
func (o ResourceLockerStatusOutput) Conditions() ResourceLockerStatusConditionsArrayOutput {
	return o.ApplyT(func(v ResourceLockerStatus) []ResourceLockerStatusConditions { return v.Conditions }).(ResourceLockerStatusConditionsArrayOutput)
}

// LockedResourceStatuses contains the reconcile status for each of the managed resources
func (o ResourceLockerStatusOutput) LockedPatchStatuses() ResourceLockerStatusLockedPatchStatusesArrayMapOutput {
	return o.ApplyT(func(v ResourceLockerStatus) map[string][]ResourceLockerStatusLockedPatchStatuses {
		return v.LockedPatchStatuses
	}).(ResourceLockerStatusLockedPatchStatusesArrayMapOutput)
}

// LockedResourceStatuses contains the reconcile status for each of the managed resources
func (o ResourceLockerStatusOutput) LockedResourceStatuses() ResourceLockerStatusLockedResourceStatusesArrayMapOutput {
	return o.ApplyT(func(v ResourceLockerStatus) map[string][]ResourceLockerStatusLockedResourceStatuses {
		return v.LockedResourceStatuses
	}).(ResourceLockerStatusLockedResourceStatusesArrayMapOutput)
}

type ResourceLockerStatusPtrOutput struct{ *pulumi.OutputState }

func (ResourceLockerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLockerStatus)(nil)).Elem()
}

func (o ResourceLockerStatusPtrOutput) ToResourceLockerStatusPtrOutput() ResourceLockerStatusPtrOutput {
	return o
}

func (o ResourceLockerStatusPtrOutput) ToResourceLockerStatusPtrOutputWithContext(ctx context.Context) ResourceLockerStatusPtrOutput {
	return o
}

func (o ResourceLockerStatusPtrOutput) Elem() ResourceLockerStatusOutput {
	return o.ApplyT(func(v *ResourceLockerStatus) ResourceLockerStatus { return *v }).(ResourceLockerStatusOutput)
}

// ReconcileStatus this is the general status of the main reconciler
func (o ResourceLockerStatusPtrOutput) Conditions() ResourceLockerStatusConditionsArrayOutput {
	return o.ApplyT(func(v *ResourceLockerStatus) []ResourceLockerStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ResourceLockerStatusConditionsArrayOutput)
}

// LockedResourceStatuses contains the reconcile status for each of the managed resources
func (o ResourceLockerStatusPtrOutput) LockedPatchStatuses() ResourceLockerStatusLockedPatchStatusesArrayMapOutput {
	return o.ApplyT(func(v *ResourceLockerStatus) map[string][]ResourceLockerStatusLockedPatchStatuses {
		if v == nil {
			return nil
		}
		return v.LockedPatchStatuses
	}).(ResourceLockerStatusLockedPatchStatusesArrayMapOutput)
}

// LockedResourceStatuses contains the reconcile status for each of the managed resources
func (o ResourceLockerStatusPtrOutput) LockedResourceStatuses() ResourceLockerStatusLockedResourceStatusesArrayMapOutput {
	return o.ApplyT(func(v *ResourceLockerStatus) map[string][]ResourceLockerStatusLockedResourceStatuses {
		if v == nil {
			return nil
		}
		return v.LockedResourceStatuses
	}).(ResourceLockerStatusLockedResourceStatusesArrayMapOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type ResourceLockerStatusConditions struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type string `pulumi:"type"`
}

// ResourceLockerStatusConditionsInput is an input type that accepts ResourceLockerStatusConditionsArgs and ResourceLockerStatusConditionsOutput values.
// You can construct a concrete instance of `ResourceLockerStatusConditionsInput` via:
//
//          ResourceLockerStatusConditionsArgs{...}
type ResourceLockerStatusConditionsInput interface {
	pulumi.Input

	ToResourceLockerStatusConditionsOutput() ResourceLockerStatusConditionsOutput
	ToResourceLockerStatusConditionsOutputWithContext(context.Context) ResourceLockerStatusConditionsOutput
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type ResourceLockerStatusConditionsArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type pulumi.StringInput `pulumi:"type"`
}

func (ResourceLockerStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerStatusConditions)(nil)).Elem()
}

func (i ResourceLockerStatusConditionsArgs) ToResourceLockerStatusConditionsOutput() ResourceLockerStatusConditionsOutput {
	return i.ToResourceLockerStatusConditionsOutputWithContext(context.Background())
}

func (i ResourceLockerStatusConditionsArgs) ToResourceLockerStatusConditionsOutputWithContext(ctx context.Context) ResourceLockerStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerStatusConditionsOutput)
}

// ResourceLockerStatusConditionsArrayInput is an input type that accepts ResourceLockerStatusConditionsArray and ResourceLockerStatusConditionsArrayOutput values.
// You can construct a concrete instance of `ResourceLockerStatusConditionsArrayInput` via:
//
//          ResourceLockerStatusConditionsArray{ ResourceLockerStatusConditionsArgs{...} }
type ResourceLockerStatusConditionsArrayInput interface {
	pulumi.Input

	ToResourceLockerStatusConditionsArrayOutput() ResourceLockerStatusConditionsArrayOutput
	ToResourceLockerStatusConditionsArrayOutputWithContext(context.Context) ResourceLockerStatusConditionsArrayOutput
}

type ResourceLockerStatusConditionsArray []ResourceLockerStatusConditionsInput

func (ResourceLockerStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLockerStatusConditions)(nil)).Elem()
}

func (i ResourceLockerStatusConditionsArray) ToResourceLockerStatusConditionsArrayOutput() ResourceLockerStatusConditionsArrayOutput {
	return i.ToResourceLockerStatusConditionsArrayOutputWithContext(context.Background())
}

func (i ResourceLockerStatusConditionsArray) ToResourceLockerStatusConditionsArrayOutputWithContext(ctx context.Context) ResourceLockerStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerStatusConditionsArrayOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type ResourceLockerStatusConditionsOutput struct{ *pulumi.OutputState }

func (ResourceLockerStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerStatusConditions)(nil)).Elem()
}

func (o ResourceLockerStatusConditionsOutput) ToResourceLockerStatusConditionsOutput() ResourceLockerStatusConditionsOutput {
	return o
}

func (o ResourceLockerStatusConditionsOutput) ToResourceLockerStatusConditionsOutputWithContext(ctx context.Context) ResourceLockerStatusConditionsOutput {
	return o
}

func (o ResourceLockerStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o ResourceLockerStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
func (o ResourceLockerStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o ResourceLockerStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceLockerStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
func (o ResourceLockerStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceLockerStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type ResourceLockerStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (ResourceLockerStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLockerStatusConditions)(nil)).Elem()
}

func (o ResourceLockerStatusConditionsArrayOutput) ToResourceLockerStatusConditionsArrayOutput() ResourceLockerStatusConditionsArrayOutput {
	return o
}

func (o ResourceLockerStatusConditionsArrayOutput) ToResourceLockerStatusConditionsArrayOutputWithContext(ctx context.Context) ResourceLockerStatusConditionsArrayOutput {
	return o
}

func (o ResourceLockerStatusConditionsArrayOutput) Index(i pulumi.IntInput) ResourceLockerStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceLockerStatusConditions {
		return vs[0].([]ResourceLockerStatusConditions)[vs[1].(int)]
	}).(ResourceLockerStatusConditionsOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type ResourceLockerStatusLockedPatchStatuses struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type string `pulumi:"type"`
}

// ResourceLockerStatusLockedPatchStatusesInput is an input type that accepts ResourceLockerStatusLockedPatchStatusesArgs and ResourceLockerStatusLockedPatchStatusesOutput values.
// You can construct a concrete instance of `ResourceLockerStatusLockedPatchStatusesInput` via:
//
//          ResourceLockerStatusLockedPatchStatusesArgs{...}
type ResourceLockerStatusLockedPatchStatusesInput interface {
	pulumi.Input

	ToResourceLockerStatusLockedPatchStatusesOutput() ResourceLockerStatusLockedPatchStatusesOutput
	ToResourceLockerStatusLockedPatchStatusesOutputWithContext(context.Context) ResourceLockerStatusLockedPatchStatusesOutput
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type ResourceLockerStatusLockedPatchStatusesArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type pulumi.StringInput `pulumi:"type"`
}

func (ResourceLockerStatusLockedPatchStatusesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerStatusLockedPatchStatuses)(nil)).Elem()
}

func (i ResourceLockerStatusLockedPatchStatusesArgs) ToResourceLockerStatusLockedPatchStatusesOutput() ResourceLockerStatusLockedPatchStatusesOutput {
	return i.ToResourceLockerStatusLockedPatchStatusesOutputWithContext(context.Background())
}

func (i ResourceLockerStatusLockedPatchStatusesArgs) ToResourceLockerStatusLockedPatchStatusesOutputWithContext(ctx context.Context) ResourceLockerStatusLockedPatchStatusesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerStatusLockedPatchStatusesOutput)
}

// ResourceLockerStatusLockedPatchStatusesArrayInput is an input type that accepts ResourceLockerStatusLockedPatchStatusesArray and ResourceLockerStatusLockedPatchStatusesArrayOutput values.
// You can construct a concrete instance of `ResourceLockerStatusLockedPatchStatusesArrayInput` via:
//
//          ResourceLockerStatusLockedPatchStatusesArray{ ResourceLockerStatusLockedPatchStatusesArgs{...} }
type ResourceLockerStatusLockedPatchStatusesArrayInput interface {
	pulumi.Input

	ToResourceLockerStatusLockedPatchStatusesArrayOutput() ResourceLockerStatusLockedPatchStatusesArrayOutput
	ToResourceLockerStatusLockedPatchStatusesArrayOutputWithContext(context.Context) ResourceLockerStatusLockedPatchStatusesArrayOutput
}

type ResourceLockerStatusLockedPatchStatusesArray []ResourceLockerStatusLockedPatchStatusesInput

func (ResourceLockerStatusLockedPatchStatusesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLockerStatusLockedPatchStatuses)(nil)).Elem()
}

func (i ResourceLockerStatusLockedPatchStatusesArray) ToResourceLockerStatusLockedPatchStatusesArrayOutput() ResourceLockerStatusLockedPatchStatusesArrayOutput {
	return i.ToResourceLockerStatusLockedPatchStatusesArrayOutputWithContext(context.Background())
}

func (i ResourceLockerStatusLockedPatchStatusesArray) ToResourceLockerStatusLockedPatchStatusesArrayOutputWithContext(ctx context.Context) ResourceLockerStatusLockedPatchStatusesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerStatusLockedPatchStatusesArrayOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type ResourceLockerStatusLockedPatchStatusesOutput struct{ *pulumi.OutputState }

func (ResourceLockerStatusLockedPatchStatusesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerStatusLockedPatchStatuses)(nil)).Elem()
}

func (o ResourceLockerStatusLockedPatchStatusesOutput) ToResourceLockerStatusLockedPatchStatusesOutput() ResourceLockerStatusLockedPatchStatusesOutput {
	return o
}

func (o ResourceLockerStatusLockedPatchStatusesOutput) ToResourceLockerStatusLockedPatchStatusesOutputWithContext(ctx context.Context) ResourceLockerStatusLockedPatchStatusesOutput {
	return o
}

func (o ResourceLockerStatusLockedPatchStatusesOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerStatusLockedPatchStatuses) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o ResourceLockerStatusLockedPatchStatusesOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerStatusLockedPatchStatuses) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
func (o ResourceLockerStatusLockedPatchStatusesOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerStatusLockedPatchStatuses) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o ResourceLockerStatusLockedPatchStatusesOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceLockerStatusLockedPatchStatuses) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
func (o ResourceLockerStatusLockedPatchStatusesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceLockerStatusLockedPatchStatuses) string { return v.Type }).(pulumi.StringOutput)
}

type ResourceLockerStatusLockedPatchStatusesArrayOutput struct{ *pulumi.OutputState }

func (ResourceLockerStatusLockedPatchStatusesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLockerStatusLockedPatchStatuses)(nil)).Elem()
}

func (o ResourceLockerStatusLockedPatchStatusesArrayOutput) ToResourceLockerStatusLockedPatchStatusesArrayOutput() ResourceLockerStatusLockedPatchStatusesArrayOutput {
	return o
}

func (o ResourceLockerStatusLockedPatchStatusesArrayOutput) ToResourceLockerStatusLockedPatchStatusesArrayOutputWithContext(ctx context.Context) ResourceLockerStatusLockedPatchStatusesArrayOutput {
	return o
}

func (o ResourceLockerStatusLockedPatchStatusesArrayOutput) Index(i pulumi.IntInput) ResourceLockerStatusLockedPatchStatusesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceLockerStatusLockedPatchStatuses {
		return vs[0].([]ResourceLockerStatusLockedPatchStatuses)[vs[1].(int)]
	}).(ResourceLockerStatusLockedPatchStatusesOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type ResourceLockerStatusLockedResourceStatuses struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type string `pulumi:"type"`
}

// ResourceLockerStatusLockedResourceStatusesInput is an input type that accepts ResourceLockerStatusLockedResourceStatusesArgs and ResourceLockerStatusLockedResourceStatusesOutput values.
// You can construct a concrete instance of `ResourceLockerStatusLockedResourceStatusesInput` via:
//
//          ResourceLockerStatusLockedResourceStatusesArgs{...}
type ResourceLockerStatusLockedResourceStatusesInput interface {
	pulumi.Input

	ToResourceLockerStatusLockedResourceStatusesOutput() ResourceLockerStatusLockedResourceStatusesOutput
	ToResourceLockerStatusLockedResourceStatusesOutputWithContext(context.Context) ResourceLockerStatusLockedResourceStatusesOutput
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type ResourceLockerStatusLockedResourceStatusesArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type pulumi.StringInput `pulumi:"type"`
}

func (ResourceLockerStatusLockedResourceStatusesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerStatusLockedResourceStatuses)(nil)).Elem()
}

func (i ResourceLockerStatusLockedResourceStatusesArgs) ToResourceLockerStatusLockedResourceStatusesOutput() ResourceLockerStatusLockedResourceStatusesOutput {
	return i.ToResourceLockerStatusLockedResourceStatusesOutputWithContext(context.Background())
}

func (i ResourceLockerStatusLockedResourceStatusesArgs) ToResourceLockerStatusLockedResourceStatusesOutputWithContext(ctx context.Context) ResourceLockerStatusLockedResourceStatusesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerStatusLockedResourceStatusesOutput)
}

// ResourceLockerStatusLockedResourceStatusesArrayInput is an input type that accepts ResourceLockerStatusLockedResourceStatusesArray and ResourceLockerStatusLockedResourceStatusesArrayOutput values.
// You can construct a concrete instance of `ResourceLockerStatusLockedResourceStatusesArrayInput` via:
//
//          ResourceLockerStatusLockedResourceStatusesArray{ ResourceLockerStatusLockedResourceStatusesArgs{...} }
type ResourceLockerStatusLockedResourceStatusesArrayInput interface {
	pulumi.Input

	ToResourceLockerStatusLockedResourceStatusesArrayOutput() ResourceLockerStatusLockedResourceStatusesArrayOutput
	ToResourceLockerStatusLockedResourceStatusesArrayOutputWithContext(context.Context) ResourceLockerStatusLockedResourceStatusesArrayOutput
}

type ResourceLockerStatusLockedResourceStatusesArray []ResourceLockerStatusLockedResourceStatusesInput

func (ResourceLockerStatusLockedResourceStatusesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLockerStatusLockedResourceStatuses)(nil)).Elem()
}

func (i ResourceLockerStatusLockedResourceStatusesArray) ToResourceLockerStatusLockedResourceStatusesArrayOutput() ResourceLockerStatusLockedResourceStatusesArrayOutput {
	return i.ToResourceLockerStatusLockedResourceStatusesArrayOutputWithContext(context.Background())
}

func (i ResourceLockerStatusLockedResourceStatusesArray) ToResourceLockerStatusLockedResourceStatusesArrayOutputWithContext(ctx context.Context) ResourceLockerStatusLockedResourceStatusesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLockerStatusLockedResourceStatusesArrayOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type ResourceLockerStatusLockedResourceStatusesOutput struct{ *pulumi.OutputState }

func (ResourceLockerStatusLockedResourceStatusesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLockerStatusLockedResourceStatuses)(nil)).Elem()
}

func (o ResourceLockerStatusLockedResourceStatusesOutput) ToResourceLockerStatusLockedResourceStatusesOutput() ResourceLockerStatusLockedResourceStatusesOutput {
	return o
}

func (o ResourceLockerStatusLockedResourceStatusesOutput) ToResourceLockerStatusLockedResourceStatusesOutputWithContext(ctx context.Context) ResourceLockerStatusLockedResourceStatusesOutput {
	return o
}

func (o ResourceLockerStatusLockedResourceStatusesOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerStatusLockedResourceStatuses) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o ResourceLockerStatusLockedResourceStatusesOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerStatusLockedResourceStatuses) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
func (o ResourceLockerStatusLockedResourceStatusesOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLockerStatusLockedResourceStatuses) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o ResourceLockerStatusLockedResourceStatusesOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceLockerStatusLockedResourceStatuses) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
func (o ResourceLockerStatusLockedResourceStatusesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceLockerStatusLockedResourceStatuses) string { return v.Type }).(pulumi.StringOutput)
}

type ResourceLockerStatusLockedResourceStatusesArrayOutput struct{ *pulumi.OutputState }

func (ResourceLockerStatusLockedResourceStatusesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLockerStatusLockedResourceStatuses)(nil)).Elem()
}

func (o ResourceLockerStatusLockedResourceStatusesArrayOutput) ToResourceLockerStatusLockedResourceStatusesArrayOutput() ResourceLockerStatusLockedResourceStatusesArrayOutput {
	return o
}

func (o ResourceLockerStatusLockedResourceStatusesArrayOutput) ToResourceLockerStatusLockedResourceStatusesArrayOutputWithContext(ctx context.Context) ResourceLockerStatusLockedResourceStatusesArrayOutput {
	return o
}

func (o ResourceLockerStatusLockedResourceStatusesArrayOutput) Index(i pulumi.IntInput) ResourceLockerStatusLockedResourceStatusesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceLockerStatusLockedResourceStatuses {
		return vs[0].([]ResourceLockerStatusLockedResourceStatuses)[vs[1].(int)]
	}).(ResourceLockerStatusLockedResourceStatusesOutput)
}

func init() {
	pulumi.RegisterOutputType(ResourceLockerTypeOutput{})
	pulumi.RegisterOutputType(ResourceLockerMetadataOutput{})
	pulumi.RegisterOutputType(ResourceLockerSpecOutput{})
	pulumi.RegisterOutputType(ResourceLockerSpecPtrOutput{})
	pulumi.RegisterOutputType(ResourceLockerSpecPatchesOutput{})
	pulumi.RegisterOutputType(ResourceLockerSpecPatchesArrayOutput{})
	pulumi.RegisterOutputType(ResourceLockerSpecPatchesSourceObjectRefsOutput{})
	pulumi.RegisterOutputType(ResourceLockerSpecPatchesSourceObjectRefsArrayOutput{})
	pulumi.RegisterOutputType(ResourceLockerSpecPatchesTargetObjectRefOutput{})
	pulumi.RegisterOutputType(ResourceLockerSpecResourcesOutput{})
	pulumi.RegisterOutputType(ResourceLockerSpecResourcesArrayOutput{})
	pulumi.RegisterOutputType(ResourceLockerSpecServiceAccountRefOutput{})
	pulumi.RegisterOutputType(ResourceLockerSpecServiceAccountRefPtrOutput{})
	pulumi.RegisterOutputType(ResourceLockerStatusOutput{})
	pulumi.RegisterOutputType(ResourceLockerStatusPtrOutput{})
	pulumi.RegisterOutputType(ResourceLockerStatusConditionsOutput{})
	pulumi.RegisterOutputType(ResourceLockerStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(ResourceLockerStatusLockedPatchStatusesOutput{})
	pulumi.RegisterOutputType(ResourceLockerStatusLockedPatchStatusesArrayOutput{})
	pulumi.RegisterOutputType(ResourceLockerStatusLockedResourceStatusesOutput{})
	pulumi.RegisterOutputType(ResourceLockerStatusLockedResourceStatusesArrayOutput{})
}

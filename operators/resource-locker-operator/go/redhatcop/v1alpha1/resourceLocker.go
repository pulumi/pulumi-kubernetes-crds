// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ResourceLocker is the Schema for the resourcelockers API
type ResourceLocker struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// ResourceLockerSpec defines the desired state of ResourceLocker
	Spec ResourceLockerSpecPtrOutput `pulumi:"spec"`
	// ResourceLockerStatus defines the observed state of ResourceLocker
	Status ResourceLockerStatusPtrOutput `pulumi:"status"`
}

// NewResourceLocker registers a new resource with the given unique name, arguments, and options.
func NewResourceLocker(ctx *pulumi.Context,
	name string, args *ResourceLockerArgs, opts ...pulumi.ResourceOption) (*ResourceLocker, error) {
	if args == nil {
		args = &ResourceLockerArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("redhatcop.redhat.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ResourceLocker")
	var resource ResourceLocker
	err := ctx.RegisterResource("kubernetes:redhatcop.redhat.io/v1alpha1:ResourceLocker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceLocker gets an existing ResourceLocker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceLocker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceLockerState, opts ...pulumi.ResourceOption) (*ResourceLocker, error) {
	var resource ResourceLocker
	err := ctx.ReadResource("kubernetes:redhatcop.redhat.io/v1alpha1:ResourceLocker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceLocker resources.
type resourceLockerState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ResourceLockerSpec defines the desired state of ResourceLocker
	Spec *ResourceLockerSpec `pulumi:"spec"`
	// ResourceLockerStatus defines the observed state of ResourceLocker
	Status *ResourceLockerStatus `pulumi:"status"`
}

type ResourceLockerState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ResourceLockerSpec defines the desired state of ResourceLocker
	Spec ResourceLockerSpecPtrInput
	// ResourceLockerStatus defines the observed state of ResourceLocker
	Status ResourceLockerStatusPtrInput
}

func (ResourceLockerState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceLockerState)(nil)).Elem()
}

type resourceLockerArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ResourceLockerSpec defines the desired state of ResourceLocker
	Spec *ResourceLockerSpec `pulumi:"spec"`
	// ResourceLockerStatus defines the observed state of ResourceLocker
	Status *ResourceLockerStatus `pulumi:"status"`
}

// The set of arguments for constructing a ResourceLocker resource.
type ResourceLockerArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ResourceLockerSpec defines the desired state of ResourceLocker
	Spec ResourceLockerSpecPtrInput
	// ResourceLockerStatus defines the observed state of ResourceLocker
	Status ResourceLockerStatusPtrInput
}

func (ResourceLockerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceLockerArgs)(nil)).Elem()
}

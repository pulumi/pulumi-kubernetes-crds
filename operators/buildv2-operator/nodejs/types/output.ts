// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace build {
    export namespace v1alpha1 {
        /**
         * BuildRunSpec defines the desired state of BuildRun
         */
        export interface BuildRunSpec {
            /**
             * BuildRef refers to the Build
             */
            buildRef: outputs.build.v1alpha1.BuildRunSpecBuildRef;
            /**
             * Output refers to the location where the generated image would be pushed to. It will overwrite the output image in build spec
             */
            output?: outputs.build.v1alpha1.BuildRunSpecOutput;
            /**
             * ServiceAccount refers to the kubernetes serviceaccount which is used for resource control. Default serviceaccount will be set if it is empty
             */
            serviceAccount?: outputs.build.v1alpha1.BuildRunSpecServiceAccount;
            /**
             * Timeout defines the maximum run time of this build run.
             */
            timeout?: string;
        }

        /**
         * BuildRef refers to the Build
         */
        export interface BuildRunSpecBuildRef {
            /**
             * API version of the referent
             */
            apiVersion?: string;
            /**
             * Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
             */
            name: string;
        }

        /**
         * Output refers to the location where the generated image would be pushed to. It will overwrite the output image in build spec
         */
        export interface BuildRunSpecOutput {
            /**
             * SecretRef is a reference to the Secret containing the credentials to push the image to the registry
             */
            credentials?: outputs.build.v1alpha1.BuildRunSpecOutputCredentials;
            /**
             * ImageURL is the URL where the image will be pushed to.
             */
            image: string;
        }

        /**
         * SecretRef is a reference to the Secret containing the credentials to push the image to the registry
         */
        export interface BuildRunSpecOutputCredentials {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * ServiceAccount refers to the kubernetes serviceaccount which is used for resource control. Default serviceaccount will be set if it is empty
         */
        export interface BuildRunSpecServiceAccount {
            /**
             * If generates a new ServiceAccount for the build
             */
            generate?: boolean;
            /**
             * Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
             */
            name?: string;
        }

        /**
         * BuildRunStatus defines the observed state of BuildRun
         */
        export interface BuildRunStatus {
            /**
             * BuildSpec is the Build Spec of this BuildRun.
             */
            buildSpec?: outputs.build.v1alpha1.BuildRunStatusBuildSpec;
            /**
             * CompletionTime is the time the build completed.
             */
            completionTime?: string;
            /**
             * PodName is the name of the pod responsible for executing this task's steps.
             */
            latestTaskRunRef?: string;
            /**
             * The Succeeded reason of the TaskRun
             */
            reason?: string;
            /**
             * StartTime is the time the build is actually started.
             */
            startTime?: string;
            /**
             * The Succeeded status of the TaskRun
             */
            succeeded?: string;
        }

        /**
         * BuildSpec is the Build Spec of this BuildRun.
         */
        export interface BuildRunStatusBuildSpec {
            /**
             * BuilderImage refers to the image containing the build tools inside which the source code would be built.
             */
            builder?: outputs.build.v1alpha1.BuildRunStatusBuildSpecBuilder;
            /**
             * Dockerfile is the path to the Dockerfile to be used for build strategies which bank on the Dockerfile for building an image.
             */
            dockerfile?: string;
            /**
             * Output refers to the location where the generated image would be pushed to.
             */
            output: outputs.build.v1alpha1.BuildRunStatusBuildSpecOutput;
            /**
             * Parameters contains name-value that could be used to loosely type parameters in the BuildStrategy.
             */
            parameters?: outputs.build.v1alpha1.BuildRunStatusBuildSpecParameters[];
            /**
             * Runtime represents the runtime-image
             */
            runtime?: outputs.build.v1alpha1.BuildRunStatusBuildSpecRuntime;
            /**
             * Source refers to the Git repository containing the source code to be built.
             */
            source: outputs.build.v1alpha1.BuildRunStatusBuildSpecSource;
            /**
             * StrategyRef refers to the BuildStrategy to be used to build the container image. There are namespaced scope and cluster scope BuildStrategy
             */
            strategy: outputs.build.v1alpha1.BuildRunStatusBuildSpecStrategy;
            /**
             * Timeout defines the maximum run time of a build run.
             */
            timeout?: string;
        }

        /**
         * BuilderImage refers to the image containing the build tools inside which the source code would be built.
         */
        export interface BuildRunStatusBuildSpecBuilder {
            /**
             * SecretRef is a reference to the Secret containing the credentials to push the image to the registry
             */
            credentials?: outputs.build.v1alpha1.BuildRunStatusBuildSpecBuilderCredentials;
            /**
             * ImageURL is the URL where the image will be pushed to.
             */
            image: string;
        }

        /**
         * SecretRef is a reference to the Secret containing the credentials to push the image to the registry
         */
        export interface BuildRunStatusBuildSpecBuilderCredentials {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * Output refers to the location where the generated image would be pushed to.
         */
        export interface BuildRunStatusBuildSpecOutput {
            /**
             * SecretRef is a reference to the Secret containing the credentials to push the image to the registry
             */
            credentials?: outputs.build.v1alpha1.BuildRunStatusBuildSpecOutputCredentials;
            /**
             * ImageURL is the URL where the image will be pushed to.
             */
            image: string;
        }

        /**
         * SecretRef is a reference to the Secret containing the credentials to push the image to the registry
         */
        export interface BuildRunStatusBuildSpecOutputCredentials {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * Parameter defines the data structure that would be used for expressing arbitrary key/value pairs for the execution of a build
         */
        export interface BuildRunStatusBuildSpecParameters {
            name: string;
            value: string;
        }

        /**
         * Runtime represents the runtime-image
         */
        export interface BuildRunStatusBuildSpecRuntime {
            /**
             * Base runtime base image.
             */
            base?: outputs.build.v1alpha1.BuildRunStatusBuildSpecRuntimeBase;
            /**
             * Entrypoint runtime-image entrypoint.
             */
            entrypoint?: string[];
            /**
             * Env environment variables for runtime.
             */
            env?: {[key: string]: string};
            /**
             * Labels map of additional labels to be applied on image.
             */
            labels?: {[key: string]: string};
            /**
             * Paths list of directories/files to be copied into runtime-image, using colon ":" to split up source and destination paths.
             */
            paths?: string[];
            /**
             * Run arbitrary commands to run before copying data into runtime-image.
             */
            run?: string[];
            /**
             * User definitions of user and group for runtime-image.
             */
            user?: outputs.build.v1alpha1.BuildRunStatusBuildSpecRuntimeUser;
            /**
             * WorkDir runtime image working directory `WORKDIR`.
             */
            workDir?: string;
        }

        /**
         * Base runtime base image.
         */
        export interface BuildRunStatusBuildSpecRuntimeBase {
            /**
             * SecretRef is a reference to the Secret containing the credentials to push the image to the registry
             */
            credentials?: outputs.build.v1alpha1.BuildRunStatusBuildSpecRuntimeBaseCredentials;
            /**
             * ImageURL is the URL where the image will be pushed to.
             */
            image: string;
        }

        /**
         * SecretRef is a reference to the Secret containing the credentials to push the image to the registry
         */
        export interface BuildRunStatusBuildSpecRuntimeBaseCredentials {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * User definitions of user and group for runtime-image.
         */
        export interface BuildRunStatusBuildSpecRuntimeUser {
            /**
             * Group group name or GID employed in runtime-image.
             */
            group?: string;
            /**
             * Name user name to be employed in runtime-image.
             */
            name: string;
        }

        /**
         * Source refers to the Git repository containing the source code to be built.
         */
        export interface BuildRunStatusBuildSpecSource {
            /**
             * ContextDir is a path to subfolder in the repo. Optional.
             */
            contextDir?: string;
            /**
             * SecretRef refers to the secret that contains credentials to access the git repo. Optional.
             */
            credentials?: outputs.build.v1alpha1.BuildRunStatusBuildSpecSourceCredentials;
            /**
             * Flavor of the git provider like github, gitlab, bitbucket, generic, etc. Optional.
             */
            flavor?: string;
            /**
             * HTTPProxy is optional.
             */
            httpProxy?: string;
            /**
             * HTTPSProxy is optional.
             */
            httpsProxy?: string;
            /**
             * NoProxy can be used to specify domains for which no proxying should be performed. Optional.
             */
            noProxy?: string;
            /**
             * Ref is a git reference. Optional. "master" is used by default.
             */
            revision?: string;
            /**
             * URL of the git repo
             */
            url: string;
        }

        /**
         * SecretRef refers to the secret that contains credentials to access the git repo. Optional.
         */
        export interface BuildRunStatusBuildSpecSourceCredentials {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * StrategyRef refers to the BuildStrategy to be used to build the container image. There are namespaced scope and cluster scope BuildStrategy
         */
        export interface BuildRunStatusBuildSpecStrategy {
            /**
             * API version of the referent
             */
            apiVersion?: string;
            /**
             * BuildStrategyKind indicates the kind of the buildstrategy, namespaced or cluster scoped.
             */
            kind?: string;
            /**
             * Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
             */
            name: string;
        }

        /**
         * BuildSpec defines the desired state of Build
         */
        export interface BuildSpec {
            /**
             * BuilderImage refers to the image containing the build tools inside which the source code would be built.
             */
            builder?: outputs.build.v1alpha1.BuildSpecBuilder;
            /**
             * Dockerfile is the path to the Dockerfile to be used for build strategies which bank on the Dockerfile for building an image.
             */
            dockerfile?: string;
            /**
             * Output refers to the location where the generated image would be pushed to.
             */
            output: outputs.build.v1alpha1.BuildSpecOutput;
            /**
             * Parameters contains name-value that could be used to loosely type parameters in the BuildStrategy.
             */
            parameters?: outputs.build.v1alpha1.BuildSpecParameters[];
            /**
             * Runtime represents the runtime-image
             */
            runtime?: outputs.build.v1alpha1.BuildSpecRuntime;
            /**
             * Source refers to the Git repository containing the source code to be built.
             */
            source: outputs.build.v1alpha1.BuildSpecSource;
            /**
             * StrategyRef refers to the BuildStrategy to be used to build the container image. There are namespaced scope and cluster scope BuildStrategy
             */
            strategy: outputs.build.v1alpha1.BuildSpecStrategy;
            /**
             * Timeout defines the maximum run time of a build run.
             */
            timeout?: string;
        }

        /**
         * BuilderImage refers to the image containing the build tools inside which the source code would be built.
         */
        export interface BuildSpecBuilder {
            /**
             * SecretRef is a reference to the Secret containing the credentials to push the image to the registry
             */
            credentials?: outputs.build.v1alpha1.BuildSpecBuilderCredentials;
            /**
             * ImageURL is the URL where the image will be pushed to.
             */
            image: string;
        }

        /**
         * SecretRef is a reference to the Secret containing the credentials to push the image to the registry
         */
        export interface BuildSpecBuilderCredentials {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * Output refers to the location where the generated image would be pushed to.
         */
        export interface BuildSpecOutput {
            /**
             * SecretRef is a reference to the Secret containing the credentials to push the image to the registry
             */
            credentials?: outputs.build.v1alpha1.BuildSpecOutputCredentials;
            /**
             * ImageURL is the URL where the image will be pushed to.
             */
            image: string;
        }

        /**
         * SecretRef is a reference to the Secret containing the credentials to push the image to the registry
         */
        export interface BuildSpecOutputCredentials {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * Parameter defines the data structure that would be used for expressing arbitrary key/value pairs for the execution of a build
         */
        export interface BuildSpecParameters {
            name: string;
            value: string;
        }

        /**
         * Runtime represents the runtime-image
         */
        export interface BuildSpecRuntime {
            /**
             * Base runtime base image.
             */
            base?: outputs.build.v1alpha1.BuildSpecRuntimeBase;
            /**
             * Entrypoint runtime-image entrypoint.
             */
            entrypoint?: string[];
            /**
             * Env environment variables for runtime.
             */
            env?: {[key: string]: string};
            /**
             * Labels map of additional labels to be applied on image.
             */
            labels?: {[key: string]: string};
            /**
             * Paths list of directories/files to be copied into runtime-image, using colon ":" to split up source and destination paths.
             */
            paths?: string[];
            /**
             * Run arbitrary commands to run before copying data into runtime-image.
             */
            run?: string[];
            /**
             * User definitions of user and group for runtime-image.
             */
            user?: outputs.build.v1alpha1.BuildSpecRuntimeUser;
            /**
             * WorkDir runtime image working directory `WORKDIR`.
             */
            workDir?: string;
        }

        /**
         * Base runtime base image.
         */
        export interface BuildSpecRuntimeBase {
            /**
             * SecretRef is a reference to the Secret containing the credentials to push the image to the registry
             */
            credentials?: outputs.build.v1alpha1.BuildSpecRuntimeBaseCredentials;
            /**
             * ImageURL is the URL where the image will be pushed to.
             */
            image: string;
        }

        /**
         * SecretRef is a reference to the Secret containing the credentials to push the image to the registry
         */
        export interface BuildSpecRuntimeBaseCredentials {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * User definitions of user and group for runtime-image.
         */
        export interface BuildSpecRuntimeUser {
            /**
             * Group group name or GID employed in runtime-image.
             */
            group?: string;
            /**
             * Name user name to be employed in runtime-image.
             */
            name: string;
        }

        /**
         * Source refers to the Git repository containing the source code to be built.
         */
        export interface BuildSpecSource {
            /**
             * ContextDir is a path to subfolder in the repo. Optional.
             */
            contextDir?: string;
            /**
             * SecretRef refers to the secret that contains credentials to access the git repo. Optional.
             */
            credentials?: outputs.build.v1alpha1.BuildSpecSourceCredentials;
            /**
             * Flavor of the git provider like github, gitlab, bitbucket, generic, etc. Optional.
             */
            flavor?: string;
            /**
             * HTTPProxy is optional.
             */
            httpProxy?: string;
            /**
             * HTTPSProxy is optional.
             */
            httpsProxy?: string;
            /**
             * NoProxy can be used to specify domains for which no proxying should be performed. Optional.
             */
            noProxy?: string;
            /**
             * Ref is a git reference. Optional. "master" is used by default.
             */
            revision?: string;
            /**
             * URL of the git repo
             */
            url: string;
        }

        /**
         * SecretRef refers to the secret that contains credentials to access the git repo. Optional.
         */
        export interface BuildSpecSourceCredentials {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * StrategyRef refers to the BuildStrategy to be used to build the container image. There are namespaced scope and cluster scope BuildStrategy
         */
        export interface BuildSpecStrategy {
            /**
             * API version of the referent
             */
            apiVersion?: string;
            /**
             * BuildStrategyKind indicates the kind of the buildstrategy, namespaced or cluster scoped.
             */
            kind?: string;
            /**
             * Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
             */
            name: string;
        }

        /**
         * BuildStatus defines the observed state of Build
         */
        export interface BuildStatus {
            /**
             * The reason of the registered Build, either an error or succeed message
             */
            reason?: string;
            /**
             * The Register status of the Build
             */
            registered?: string;
        }

        /**
         * BuildStrategySpec defines the desired state of BuildStrategy
         */
        export interface BuildStrategySpec {
            buildSteps?: outputs.build.v1alpha1.BuildStrategySpecBuildSteps[];
        }

        /**
         * BuildStep defines a partial step that needs to run in container for building the image.
         */
        export interface BuildStrategySpecBuildSteps {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: string[];
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsEnvFrom[];
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: string;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLifecycle;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsPorts[];
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsReadinessProbe;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            resources?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsResources;
            /**
             * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsSecurityContext;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container. This is a beta feature.
             */
            volumeDevices?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface BuildStrategySpecBuildStepsEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: string;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface BuildStrategySpecBuildStepsEnvFrom {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: string;
            /**
             * The Secret to select from
             */
            secretRef?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface BuildStrategySpecBuildStepsEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface BuildStrategySpecBuildStepsEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: boolean;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface BuildStrategySpecBuildStepsEnvValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsEnvValueFromConfigMapKeyRef;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsEnvValueFromFieldRef;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsEnvValueFromResourceFieldRef;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface BuildStrategySpecBuildStepsEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface BuildStrategySpecBuildStepsEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface BuildStrategySpecBuildStepsEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsEnvValueFromResourceFieldRefDivisor;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        export interface BuildStrategySpecBuildStepsEnvValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface BuildStrategySpecBuildStepsEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface BuildStrategySpecBuildStepsLifecycle {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLifecyclePostStart;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLifecyclePreStop;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface BuildStrategySpecBuildStepsLifecyclePostStart {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLifecyclePostStartExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLifecyclePostStartHttpGet;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLifecyclePostStartTcpSocket;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface BuildStrategySpecBuildStepsLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface BuildStrategySpecBuildStepsLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLifecyclePostStartHttpGetPort;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface BuildStrategySpecBuildStepsLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        export interface BuildStrategySpecBuildStepsLifecyclePostStartHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface BuildStrategySpecBuildStepsLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLifecyclePostStartTcpSocketPort;
        }

        export interface BuildStrategySpecBuildStepsLifecyclePostStartTcpSocketPort {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface BuildStrategySpecBuildStepsLifecyclePreStop {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLifecyclePreStopExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLifecyclePreStopHttpGet;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLifecyclePreStopTcpSocket;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface BuildStrategySpecBuildStepsLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface BuildStrategySpecBuildStepsLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLifecyclePreStopHttpGetPort;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface BuildStrategySpecBuildStepsLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        export interface BuildStrategySpecBuildStepsLifecyclePreStopHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface BuildStrategySpecBuildStepsLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLifecyclePreStopTcpSocketPort;
        }

        export interface BuildStrategySpecBuildStepsLifecyclePreStopTcpSocketPort {
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface BuildStrategySpecBuildStepsLivenessProbe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLivenessProbeTcpSocket;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface BuildStrategySpecBuildStepsLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface BuildStrategySpecBuildStepsLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLivenessProbeHttpGetPort;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface BuildStrategySpecBuildStepsLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        export interface BuildStrategySpecBuildStepsLivenessProbeHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface BuildStrategySpecBuildStepsLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.BuildStrategySpecBuildStepsLivenessProbeTcpSocketPort;
        }

        export interface BuildStrategySpecBuildStepsLivenessProbeTcpSocketPort {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface BuildStrategySpecBuildStepsPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: string;
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface BuildStrategySpecBuildStepsReadinessProbe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsReadinessProbeTcpSocket;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface BuildStrategySpecBuildStepsReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface BuildStrategySpecBuildStepsReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.BuildStrategySpecBuildStepsReadinessProbeHttpGetPort;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface BuildStrategySpecBuildStepsReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        export interface BuildStrategySpecBuildStepsReadinessProbeHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface BuildStrategySpecBuildStepsReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.BuildStrategySpecBuildStepsReadinessProbeTcpSocketPort;
        }

        export interface BuildStrategySpecBuildStepsReadinessProbeTcpSocketPort {
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
         */
        export interface BuildStrategySpecBuildStepsResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: {[key: string]: outputs.build.v1alpha1.BuildStrategySpecBuildStepsResourcesLimits};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: {[key: string]: outputs.build.v1alpha1.BuildStrategySpecBuildStepsResourcesRequests};
        }

        export interface BuildStrategySpecBuildStepsResourcesLimits {
        }

        export interface BuildStrategySpecBuildStepsResourcesRequests {
        }

        /**
         * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface BuildStrategySpecBuildStepsSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
             */
            allowPrivilegeEscalation?: boolean;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
             */
            capabilities?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
             */
            privileged?: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
             */
            procMount?: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false.
             */
            readOnlyRootFilesystem?: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsGroup?: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUser?: number;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            seLinuxOptions?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsSecurityContextSeLinuxOptions;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            windowsOptions?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsSecurityContextWindowsOptions;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
         */
        export interface BuildStrategySpecBuildStepsSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add?: string[];
            /**
             * Removed capabilities
             */
            drop?: string[];
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         */
        export interface BuildStrategySpecBuildStepsSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: string;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         */
        export interface BuildStrategySpecBuildStepsSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
             */
            gmsaCredentialSpec?: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
             */
            gmsaCredentialSpecName?: string;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. This field is beta-level and may be disabled with the WindowsRunAsUserName feature flag.
             */
            runAsUserName?: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface BuildStrategySpecBuildStepsStartupProbe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsStartupProbeTcpSocket;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface BuildStrategySpecBuildStepsStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface BuildStrategySpecBuildStepsStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.build.v1alpha1.BuildStrategySpecBuildStepsStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.BuildStrategySpecBuildStepsStartupProbeHttpGetPort;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface BuildStrategySpecBuildStepsStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        export interface BuildStrategySpecBuildStepsStartupProbeHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface BuildStrategySpecBuildStepsStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.BuildStrategySpecBuildStepsStartupProbeTcpSocketPort;
        }

        export interface BuildStrategySpecBuildStepsStartupProbeTcpSocketPort {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface BuildStrategySpecBuildStepsVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface BuildStrategySpecBuildStepsVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: string;
        }

        /**
         * BuildStrategySpec defines the desired state of BuildStrategy
         */
        export interface ClusterBuildStrategySpec {
            buildSteps?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildSteps[];
        }

        /**
         * BuildStep defines a partial step that needs to run in container for building the image.
         */
        export interface ClusterBuildStrategySpecBuildSteps {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: string[];
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsEnvFrom[];
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: string;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLifecycle;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsPorts[];
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsReadinessProbe;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            resources?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsResources;
            /**
             * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsSecurityContext;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container. This is a beta feature.
             */
            volumeDevices?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface ClusterBuildStrategySpecBuildStepsEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: string;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface ClusterBuildStrategySpecBuildStepsEnvFrom {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: string;
            /**
             * The Secret to select from
             */
            secretRef?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface ClusterBuildStrategySpecBuildStepsEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface ClusterBuildStrategySpecBuildStepsEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: boolean;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface ClusterBuildStrategySpecBuildStepsEnvValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsEnvValueFromConfigMapKeyRef;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsEnvValueFromFieldRef;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsEnvValueFromResourceFieldRef;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ClusterBuildStrategySpecBuildStepsEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface ClusterBuildStrategySpecBuildStepsEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface ClusterBuildStrategySpecBuildStepsEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsEnvValueFromResourceFieldRefDivisor;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        export interface ClusterBuildStrategySpecBuildStepsEnvValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface ClusterBuildStrategySpecBuildStepsEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface ClusterBuildStrategySpecBuildStepsLifecycle {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLifecyclePostStart;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLifecyclePreStop;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ClusterBuildStrategySpecBuildStepsLifecyclePostStart {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLifecyclePostStartExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLifecyclePostStartHttpGet;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLifecyclePostStartTcpSocket;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterBuildStrategySpecBuildStepsLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterBuildStrategySpecBuildStepsLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLifecyclePostStartHttpGetPort;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterBuildStrategySpecBuildStepsLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        export interface ClusterBuildStrategySpecBuildStepsLifecyclePostStartHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterBuildStrategySpecBuildStepsLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLifecyclePostStartTcpSocketPort;
        }

        export interface ClusterBuildStrategySpecBuildStepsLifecyclePostStartTcpSocketPort {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ClusterBuildStrategySpecBuildStepsLifecyclePreStop {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLifecyclePreStopExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLifecyclePreStopHttpGet;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLifecyclePreStopTcpSocket;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterBuildStrategySpecBuildStepsLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterBuildStrategySpecBuildStepsLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLifecyclePreStopHttpGetPort;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterBuildStrategySpecBuildStepsLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        export interface ClusterBuildStrategySpecBuildStepsLifecyclePreStopHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterBuildStrategySpecBuildStepsLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLifecyclePreStopTcpSocketPort;
        }

        export interface ClusterBuildStrategySpecBuildStepsLifecyclePreStopTcpSocketPort {
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ClusterBuildStrategySpecBuildStepsLivenessProbe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLivenessProbeTcpSocket;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterBuildStrategySpecBuildStepsLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterBuildStrategySpecBuildStepsLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLivenessProbeHttpGetPort;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterBuildStrategySpecBuildStepsLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        export interface ClusterBuildStrategySpecBuildStepsLivenessProbeHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterBuildStrategySpecBuildStepsLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsLivenessProbeTcpSocketPort;
        }

        export interface ClusterBuildStrategySpecBuildStepsLivenessProbeTcpSocketPort {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface ClusterBuildStrategySpecBuildStepsPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: string;
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ClusterBuildStrategySpecBuildStepsReadinessProbe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsReadinessProbeTcpSocket;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterBuildStrategySpecBuildStepsReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterBuildStrategySpecBuildStepsReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsReadinessProbeHttpGetPort;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterBuildStrategySpecBuildStepsReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        export interface ClusterBuildStrategySpecBuildStepsReadinessProbeHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterBuildStrategySpecBuildStepsReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsReadinessProbeTcpSocketPort;
        }

        export interface ClusterBuildStrategySpecBuildStepsReadinessProbeTcpSocketPort {
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
         */
        export interface ClusterBuildStrategySpecBuildStepsResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: {[key: string]: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsResourcesLimits};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: {[key: string]: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsResourcesRequests};
        }

        export interface ClusterBuildStrategySpecBuildStepsResourcesLimits {
        }

        export interface ClusterBuildStrategySpecBuildStepsResourcesRequests {
        }

        /**
         * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface ClusterBuildStrategySpecBuildStepsSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
             */
            allowPrivilegeEscalation?: boolean;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
             */
            capabilities?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
             */
            privileged?: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
             */
            procMount?: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false.
             */
            readOnlyRootFilesystem?: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsGroup?: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUser?: number;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            seLinuxOptions?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsSecurityContextSeLinuxOptions;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            windowsOptions?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsSecurityContextWindowsOptions;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
         */
        export interface ClusterBuildStrategySpecBuildStepsSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add?: string[];
            /**
             * Removed capabilities
             */
            drop?: string[];
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         */
        export interface ClusterBuildStrategySpecBuildStepsSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: string;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         */
        export interface ClusterBuildStrategySpecBuildStepsSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
             */
            gmsaCredentialSpec?: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
             */
            gmsaCredentialSpecName?: string;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. This field is beta-level and may be disabled with the WindowsRunAsUserName feature flag.
             */
            runAsUserName?: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ClusterBuildStrategySpecBuildStepsStartupProbe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsStartupProbeTcpSocket;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterBuildStrategySpecBuildStepsStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterBuildStrategySpecBuildStepsStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsStartupProbeHttpGetPort;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterBuildStrategySpecBuildStepsStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        export interface ClusterBuildStrategySpecBuildStepsStartupProbeHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterBuildStrategySpecBuildStepsStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: outputs.build.v1alpha1.ClusterBuildStrategySpecBuildStepsStartupProbeTcpSocketPort;
        }

        export interface ClusterBuildStrategySpecBuildStepsStartupProbeTcpSocketPort {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface ClusterBuildStrategySpecBuildStepsVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface ClusterBuildStrategySpecBuildStepsVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: string;
        }

    }
}

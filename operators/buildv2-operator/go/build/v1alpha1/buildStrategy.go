// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// BuildStrategy is the Schema representing a strategy in the namespace scope to build images from source code.
type BuildStrategy struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// BuildStrategySpec defines the desired state of BuildStrategy
	Spec BuildStrategySpecPtrOutput `pulumi:"spec"`
	// BuildStrategyStatus defines the observed state of BuildStrategy
	Status pulumi.MapOutput `pulumi:"status"`
}

// NewBuildStrategy registers a new resource with the given unique name, arguments, and options.
func NewBuildStrategy(ctx *pulumi.Context,
	name string, args *BuildStrategyArgs, opts ...pulumi.ResourceOption) (*BuildStrategy, error) {
	if args == nil {
		args = &BuildStrategyArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("build.dev/v1alpha1")
	args.Kind = pulumi.StringPtr("BuildStrategy")
	var resource BuildStrategy
	err := ctx.RegisterResource("kubernetes:build.dev/v1alpha1:BuildStrategy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuildStrategy gets an existing BuildStrategy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuildStrategy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildStrategyState, opts ...pulumi.ResourceOption) (*BuildStrategy, error) {
	var resource BuildStrategy
	err := ctx.ReadResource("kubernetes:build.dev/v1alpha1:BuildStrategy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BuildStrategy resources.
type buildStrategyState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// BuildStrategySpec defines the desired state of BuildStrategy
	Spec *BuildStrategySpec `pulumi:"spec"`
	// BuildStrategyStatus defines the observed state of BuildStrategy
	Status map[string]interface{} `pulumi:"status"`
}

type BuildStrategyState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// BuildStrategySpec defines the desired state of BuildStrategy
	Spec BuildStrategySpecPtrInput
	// BuildStrategyStatus defines the observed state of BuildStrategy
	Status pulumi.MapInput
}

func (BuildStrategyState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildStrategyState)(nil)).Elem()
}

type buildStrategyArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// BuildStrategySpec defines the desired state of BuildStrategy
	Spec *BuildStrategySpec `pulumi:"spec"`
	// BuildStrategyStatus defines the observed state of BuildStrategy
	Status map[string]interface{} `pulumi:"status"`
}

// The set of arguments for constructing a BuildStrategy resource.
type BuildStrategyArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// BuildStrategySpec defines the desired state of BuildStrategy
	Spec BuildStrategySpecPtrInput
	// BuildStrategyStatus defines the observed state of BuildStrategy
	Status pulumi.MapInput
}

func (BuildStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildStrategyArgs)(nil)).Elem()
}

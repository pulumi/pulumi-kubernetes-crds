# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'KubernetesImagePullerSpecArgs',
]

@pulumi.input_type
class KubernetesImagePullerSpecArgs:
    def __init__(__self__, *,
                 caching_cpu_limit: Optional[pulumi.Input[str]] = None,
                 caching_cpu_request: Optional[pulumi.Input[str]] = None,
                 caching_interval_hours: Optional[pulumi.Input[str]] = None,
                 caching_memory_limit: Optional[pulumi.Input[str]] = None,
                 caching_memory_request: Optional[pulumi.Input[str]] = None,
                 config_map_name: Optional[pulumi.Input[str]] = None,
                 daemonset_name: Optional[pulumi.Input[str]] = None,
                 deployment_name: Optional[pulumi.Input[str]] = None,
                 images: Optional[pulumi.Input[str]] = None,
                 node_selector: Optional[pulumi.Input[str]] = None):
        """
        KubernetesImagePullerSpec defines the desired state of KubernetesImagePuller
        """
        if caching_cpu_limit is not None:
            pulumi.set(__self__, "caching_cpu_limit", caching_cpu_limit)
        if caching_cpu_request is not None:
            pulumi.set(__self__, "caching_cpu_request", caching_cpu_request)
        if caching_interval_hours is not None:
            pulumi.set(__self__, "caching_interval_hours", caching_interval_hours)
        if caching_memory_limit is not None:
            pulumi.set(__self__, "caching_memory_limit", caching_memory_limit)
        if caching_memory_request is not None:
            pulumi.set(__self__, "caching_memory_request", caching_memory_request)
        if config_map_name is not None:
            pulumi.set(__self__, "config_map_name", config_map_name)
        if daemonset_name is not None:
            pulumi.set(__self__, "daemonset_name", daemonset_name)
        if deployment_name is not None:
            pulumi.set(__self__, "deployment_name", deployment_name)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)

    @property
    @pulumi.getter(name="cachingCPULimit")
    def caching_cpu_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "caching_cpu_limit")

    @caching_cpu_limit.setter
    def caching_cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caching_cpu_limit", value)

    @property
    @pulumi.getter(name="cachingCPURequest")
    def caching_cpu_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "caching_cpu_request")

    @caching_cpu_request.setter
    def caching_cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caching_cpu_request", value)

    @property
    @pulumi.getter(name="cachingIntervalHours")
    def caching_interval_hours(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "caching_interval_hours")

    @caching_interval_hours.setter
    def caching_interval_hours(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caching_interval_hours", value)

    @property
    @pulumi.getter(name="cachingMemoryLimit")
    def caching_memory_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "caching_memory_limit")

    @caching_memory_limit.setter
    def caching_memory_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caching_memory_limit", value)

    @property
    @pulumi.getter(name="cachingMemoryRequest")
    def caching_memory_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "caching_memory_request")

    @caching_memory_request.setter
    def caching_memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caching_memory_request", value)

    @property
    @pulumi.getter(name="configMapName")
    def config_map_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_map_name")

    @config_map_name.setter
    def config_map_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_map_name", value)

    @property
    @pulumi.getter(name="daemonsetName")
    def daemonset_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "daemonset_name")

    @daemonset_name.setter
    def daemonset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "daemonset_name", value)

    @property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deployment_name")

    @deployment_name.setter
    def deployment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_name", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_selector", value)



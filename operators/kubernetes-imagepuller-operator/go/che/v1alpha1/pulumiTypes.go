// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// KubernetesImagePuller is the Schema for the kubernetesimagepullers API
type KubernetesImagePullerType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KubernetesImagePullerSpec defines the desired state of KubernetesImagePuller
	Spec *KubernetesImagePullerSpec `pulumi:"spec"`
	// KubernetesImagePullerStatus defines the observed state of KubernetesImagePuller
	Status map[string]interface{} `pulumi:"status"`
}

// KubernetesImagePullerTypeInput is an input type that accepts KubernetesImagePullerTypeArgs and KubernetesImagePullerTypeOutput values.
// You can construct a concrete instance of `KubernetesImagePullerTypeInput` via:
//
//          KubernetesImagePullerTypeArgs{...}
type KubernetesImagePullerTypeInput interface {
	pulumi.Input

	ToKubernetesImagePullerTypeOutput() KubernetesImagePullerTypeOutput
	ToKubernetesImagePullerTypeOutputWithContext(context.Context) KubernetesImagePullerTypeOutput
}

// KubernetesImagePuller is the Schema for the kubernetesimagepullers API
type KubernetesImagePullerTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KubernetesImagePullerSpec defines the desired state of KubernetesImagePuller
	Spec KubernetesImagePullerSpecPtrInput `pulumi:"spec"`
	// KubernetesImagePullerStatus defines the observed state of KubernetesImagePuller
	Status pulumi.MapInput `pulumi:"status"`
}

func (KubernetesImagePullerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesImagePullerType)(nil)).Elem()
}

func (i KubernetesImagePullerTypeArgs) ToKubernetesImagePullerTypeOutput() KubernetesImagePullerTypeOutput {
	return i.ToKubernetesImagePullerTypeOutputWithContext(context.Background())
}

func (i KubernetesImagePullerTypeArgs) ToKubernetesImagePullerTypeOutputWithContext(ctx context.Context) KubernetesImagePullerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesImagePullerTypeOutput)
}

// KubernetesImagePuller is the Schema for the kubernetesimagepullers API
type KubernetesImagePullerTypeOutput struct{ *pulumi.OutputState }

func (KubernetesImagePullerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesImagePullerType)(nil)).Elem()
}

func (o KubernetesImagePullerTypeOutput) ToKubernetesImagePullerTypeOutput() KubernetesImagePullerTypeOutput {
	return o
}

func (o KubernetesImagePullerTypeOutput) ToKubernetesImagePullerTypeOutputWithContext(ctx context.Context) KubernetesImagePullerTypeOutput {
	return o
}

func (o KubernetesImagePullerTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesImagePullerType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesImagePullerType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KubernetesImagePullerType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KubernetesImagePullerSpec defines the desired state of KubernetesImagePuller
func (o KubernetesImagePullerTypeOutput) Spec() KubernetesImagePullerSpecPtrOutput {
	return o.ApplyT(func(v KubernetesImagePullerType) *KubernetesImagePullerSpec { return v.Spec }).(KubernetesImagePullerSpecPtrOutput)
}

// KubernetesImagePullerStatus defines the observed state of KubernetesImagePuller
func (o KubernetesImagePullerTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v KubernetesImagePullerType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type KubernetesImagePullerMetadata struct {
}

// KubernetesImagePullerMetadataInput is an input type that accepts KubernetesImagePullerMetadataArgs and KubernetesImagePullerMetadataOutput values.
// You can construct a concrete instance of `KubernetesImagePullerMetadataInput` via:
//
//          KubernetesImagePullerMetadataArgs{...}
type KubernetesImagePullerMetadataInput interface {
	pulumi.Input

	ToKubernetesImagePullerMetadataOutput() KubernetesImagePullerMetadataOutput
	ToKubernetesImagePullerMetadataOutputWithContext(context.Context) KubernetesImagePullerMetadataOutput
}

type KubernetesImagePullerMetadataArgs struct {
}

func (KubernetesImagePullerMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesImagePullerMetadata)(nil)).Elem()
}

func (i KubernetesImagePullerMetadataArgs) ToKubernetesImagePullerMetadataOutput() KubernetesImagePullerMetadataOutput {
	return i.ToKubernetesImagePullerMetadataOutputWithContext(context.Background())
}

func (i KubernetesImagePullerMetadataArgs) ToKubernetesImagePullerMetadataOutputWithContext(ctx context.Context) KubernetesImagePullerMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesImagePullerMetadataOutput)
}

type KubernetesImagePullerMetadataOutput struct{ *pulumi.OutputState }

func (KubernetesImagePullerMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesImagePullerMetadata)(nil)).Elem()
}

func (o KubernetesImagePullerMetadataOutput) ToKubernetesImagePullerMetadataOutput() KubernetesImagePullerMetadataOutput {
	return o
}

func (o KubernetesImagePullerMetadataOutput) ToKubernetesImagePullerMetadataOutputWithContext(ctx context.Context) KubernetesImagePullerMetadataOutput {
	return o
}

// KubernetesImagePullerSpec defines the desired state of KubernetesImagePuller
type KubernetesImagePullerSpec struct {
	CachingCPULimit      *string `pulumi:"cachingCPULimit"`
	CachingCPURequest    *string `pulumi:"cachingCPURequest"`
	CachingIntervalHours *string `pulumi:"cachingIntervalHours"`
	CachingMemoryLimit   *string `pulumi:"cachingMemoryLimit"`
	CachingMemoryRequest *string `pulumi:"cachingMemoryRequest"`
	ConfigMapName        *string `pulumi:"configMapName"`
	DaemonsetName        *string `pulumi:"daemonsetName"`
	DeploymentName       *string `pulumi:"deploymentName"`
	Images               *string `pulumi:"images"`
	NodeSelector         *string `pulumi:"nodeSelector"`
}

// KubernetesImagePullerSpecInput is an input type that accepts KubernetesImagePullerSpecArgs and KubernetesImagePullerSpecOutput values.
// You can construct a concrete instance of `KubernetesImagePullerSpecInput` via:
//
//          KubernetesImagePullerSpecArgs{...}
type KubernetesImagePullerSpecInput interface {
	pulumi.Input

	ToKubernetesImagePullerSpecOutput() KubernetesImagePullerSpecOutput
	ToKubernetesImagePullerSpecOutputWithContext(context.Context) KubernetesImagePullerSpecOutput
}

// KubernetesImagePullerSpec defines the desired state of KubernetesImagePuller
type KubernetesImagePullerSpecArgs struct {
	CachingCPULimit      pulumi.StringPtrInput `pulumi:"cachingCPULimit"`
	CachingCPURequest    pulumi.StringPtrInput `pulumi:"cachingCPURequest"`
	CachingIntervalHours pulumi.StringPtrInput `pulumi:"cachingIntervalHours"`
	CachingMemoryLimit   pulumi.StringPtrInput `pulumi:"cachingMemoryLimit"`
	CachingMemoryRequest pulumi.StringPtrInput `pulumi:"cachingMemoryRequest"`
	ConfigMapName        pulumi.StringPtrInput `pulumi:"configMapName"`
	DaemonsetName        pulumi.StringPtrInput `pulumi:"daemonsetName"`
	DeploymentName       pulumi.StringPtrInput `pulumi:"deploymentName"`
	Images               pulumi.StringPtrInput `pulumi:"images"`
	NodeSelector         pulumi.StringPtrInput `pulumi:"nodeSelector"`
}

func (KubernetesImagePullerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesImagePullerSpec)(nil)).Elem()
}

func (i KubernetesImagePullerSpecArgs) ToKubernetesImagePullerSpecOutput() KubernetesImagePullerSpecOutput {
	return i.ToKubernetesImagePullerSpecOutputWithContext(context.Background())
}

func (i KubernetesImagePullerSpecArgs) ToKubernetesImagePullerSpecOutputWithContext(ctx context.Context) KubernetesImagePullerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesImagePullerSpecOutput)
}

func (i KubernetesImagePullerSpecArgs) ToKubernetesImagePullerSpecPtrOutput() KubernetesImagePullerSpecPtrOutput {
	return i.ToKubernetesImagePullerSpecPtrOutputWithContext(context.Background())
}

func (i KubernetesImagePullerSpecArgs) ToKubernetesImagePullerSpecPtrOutputWithContext(ctx context.Context) KubernetesImagePullerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesImagePullerSpecOutput).ToKubernetesImagePullerSpecPtrOutputWithContext(ctx)
}

// KubernetesImagePullerSpecPtrInput is an input type that accepts KubernetesImagePullerSpecArgs, KubernetesImagePullerSpecPtr and KubernetesImagePullerSpecPtrOutput values.
// You can construct a concrete instance of `KubernetesImagePullerSpecPtrInput` via:
//
//          KubernetesImagePullerSpecArgs{...}
//
//  or:
//
//          nil
type KubernetesImagePullerSpecPtrInput interface {
	pulumi.Input

	ToKubernetesImagePullerSpecPtrOutput() KubernetesImagePullerSpecPtrOutput
	ToKubernetesImagePullerSpecPtrOutputWithContext(context.Context) KubernetesImagePullerSpecPtrOutput
}

type kubernetesImagePullerSpecPtrType KubernetesImagePullerSpecArgs

func KubernetesImagePullerSpecPtr(v *KubernetesImagePullerSpecArgs) KubernetesImagePullerSpecPtrInput {
	return (*kubernetesImagePullerSpecPtrType)(v)
}

func (*kubernetesImagePullerSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesImagePullerSpec)(nil)).Elem()
}

func (i *kubernetesImagePullerSpecPtrType) ToKubernetesImagePullerSpecPtrOutput() KubernetesImagePullerSpecPtrOutput {
	return i.ToKubernetesImagePullerSpecPtrOutputWithContext(context.Background())
}

func (i *kubernetesImagePullerSpecPtrType) ToKubernetesImagePullerSpecPtrOutputWithContext(ctx context.Context) KubernetesImagePullerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesImagePullerSpecPtrOutput)
}

// KubernetesImagePullerSpec defines the desired state of KubernetesImagePuller
type KubernetesImagePullerSpecOutput struct{ *pulumi.OutputState }

func (KubernetesImagePullerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesImagePullerSpec)(nil)).Elem()
}

func (o KubernetesImagePullerSpecOutput) ToKubernetesImagePullerSpecOutput() KubernetesImagePullerSpecOutput {
	return o
}

func (o KubernetesImagePullerSpecOutput) ToKubernetesImagePullerSpecOutputWithContext(ctx context.Context) KubernetesImagePullerSpecOutput {
	return o
}

func (o KubernetesImagePullerSpecOutput) ToKubernetesImagePullerSpecPtrOutput() KubernetesImagePullerSpecPtrOutput {
	return o.ToKubernetesImagePullerSpecPtrOutputWithContext(context.Background())
}

func (o KubernetesImagePullerSpecOutput) ToKubernetesImagePullerSpecPtrOutputWithContext(ctx context.Context) KubernetesImagePullerSpecPtrOutput {
	return o.ApplyT(func(v KubernetesImagePullerSpec) *KubernetesImagePullerSpec {
		return &v
	}).(KubernetesImagePullerSpecPtrOutput)
}
func (o KubernetesImagePullerSpecOutput) CachingCPULimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesImagePullerSpec) *string { return v.CachingCPULimit }).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecOutput) CachingCPURequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesImagePullerSpec) *string { return v.CachingCPURequest }).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecOutput) CachingIntervalHours() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesImagePullerSpec) *string { return v.CachingIntervalHours }).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecOutput) CachingMemoryLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesImagePullerSpec) *string { return v.CachingMemoryLimit }).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecOutput) CachingMemoryRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesImagePullerSpec) *string { return v.CachingMemoryRequest }).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecOutput) ConfigMapName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesImagePullerSpec) *string { return v.ConfigMapName }).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecOutput) DaemonsetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesImagePullerSpec) *string { return v.DaemonsetName }).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesImagePullerSpec) *string { return v.DeploymentName }).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecOutput) Images() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesImagePullerSpec) *string { return v.Images }).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecOutput) NodeSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesImagePullerSpec) *string { return v.NodeSelector }).(pulumi.StringPtrOutput)
}

type KubernetesImagePullerSpecPtrOutput struct{ *pulumi.OutputState }

func (KubernetesImagePullerSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesImagePullerSpec)(nil)).Elem()
}

func (o KubernetesImagePullerSpecPtrOutput) ToKubernetesImagePullerSpecPtrOutput() KubernetesImagePullerSpecPtrOutput {
	return o
}

func (o KubernetesImagePullerSpecPtrOutput) ToKubernetesImagePullerSpecPtrOutputWithContext(ctx context.Context) KubernetesImagePullerSpecPtrOutput {
	return o
}

func (o KubernetesImagePullerSpecPtrOutput) Elem() KubernetesImagePullerSpecOutput {
	return o.ApplyT(func(v *KubernetesImagePullerSpec) KubernetesImagePullerSpec { return *v }).(KubernetesImagePullerSpecOutput)
}

func (o KubernetesImagePullerSpecPtrOutput) CachingCPULimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.CachingCPULimit
	}).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecPtrOutput) CachingCPURequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.CachingCPURequest
	}).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecPtrOutput) CachingIntervalHours() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.CachingIntervalHours
	}).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecPtrOutput) CachingMemoryLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.CachingMemoryLimit
	}).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecPtrOutput) CachingMemoryRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.CachingMemoryRequest
	}).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecPtrOutput) ConfigMapName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMapName
	}).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecPtrOutput) DaemonsetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.DaemonsetName
	}).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecPtrOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentName
	}).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecPtrOutput) Images() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringPtrOutput)
}

func (o KubernetesImagePullerSpecPtrOutput) NodeSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringPtrOutput)
}

// KubernetesImagePullerStatus defines the observed state of KubernetesImagePuller
type KubernetesImagePullerStatus struct {
}

// KubernetesImagePullerStatusInput is an input type that accepts KubernetesImagePullerStatusArgs and KubernetesImagePullerStatusOutput values.
// You can construct a concrete instance of `KubernetesImagePullerStatusInput` via:
//
//          KubernetesImagePullerStatusArgs{...}
type KubernetesImagePullerStatusInput interface {
	pulumi.Input

	ToKubernetesImagePullerStatusOutput() KubernetesImagePullerStatusOutput
	ToKubernetesImagePullerStatusOutputWithContext(context.Context) KubernetesImagePullerStatusOutput
}

// KubernetesImagePullerStatus defines the observed state of KubernetesImagePuller
type KubernetesImagePullerStatusArgs struct {
}

func (KubernetesImagePullerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesImagePullerStatus)(nil)).Elem()
}

func (i KubernetesImagePullerStatusArgs) ToKubernetesImagePullerStatusOutput() KubernetesImagePullerStatusOutput {
	return i.ToKubernetesImagePullerStatusOutputWithContext(context.Background())
}

func (i KubernetesImagePullerStatusArgs) ToKubernetesImagePullerStatusOutputWithContext(ctx context.Context) KubernetesImagePullerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesImagePullerStatusOutput)
}

// KubernetesImagePullerStatus defines the observed state of KubernetesImagePuller
type KubernetesImagePullerStatusOutput struct{ *pulumi.OutputState }

func (KubernetesImagePullerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesImagePullerStatus)(nil)).Elem()
}

func (o KubernetesImagePullerStatusOutput) ToKubernetesImagePullerStatusOutput() KubernetesImagePullerStatusOutput {
	return o
}

func (o KubernetesImagePullerStatusOutput) ToKubernetesImagePullerStatusOutputWithContext(ctx context.Context) KubernetesImagePullerStatusOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(KubernetesImagePullerTypeOutput{})
	pulumi.RegisterOutputType(KubernetesImagePullerMetadataOutput{})
	pulumi.RegisterOutputType(KubernetesImagePullerSpecOutput{})
	pulumi.RegisterOutputType(KubernetesImagePullerSpecPtrOutput{})
	pulumi.RegisterOutputType(KubernetesImagePullerStatusOutput{})
}

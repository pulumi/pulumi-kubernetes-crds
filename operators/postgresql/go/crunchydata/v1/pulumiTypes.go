// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type PgclusterType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       interface{}        `pulumi:"spec"`
	Status     interface{}        `pulumi:"status"`
}

// PgclusterTypeInput is an input type that accepts PgclusterTypeArgs and PgclusterTypeOutput values.
// You can construct a concrete instance of `PgclusterTypeInput` via:
//
//          PgclusterTypeArgs{...}
type PgclusterTypeInput interface {
	pulumi.Input

	ToPgclusterTypeOutput() PgclusterTypeOutput
	ToPgclusterTypeOutputWithContext(context.Context) PgclusterTypeOutput
}

type PgclusterTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       pulumi.Input              `pulumi:"spec"`
	Status     pulumi.Input              `pulumi:"status"`
}

func (PgclusterTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PgclusterType)(nil)).Elem()
}

func (i PgclusterTypeArgs) ToPgclusterTypeOutput() PgclusterTypeOutput {
	return i.ToPgclusterTypeOutputWithContext(context.Background())
}

func (i PgclusterTypeArgs) ToPgclusterTypeOutputWithContext(ctx context.Context) PgclusterTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgclusterTypeOutput)
}

type PgclusterTypeOutput struct{ *pulumi.OutputState }

func (PgclusterTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PgclusterType)(nil)).Elem()
}

func (o PgclusterTypeOutput) ToPgclusterTypeOutput() PgclusterTypeOutput {
	return o
}

func (o PgclusterTypeOutput) ToPgclusterTypeOutputWithContext(ctx context.Context) PgclusterTypeOutput {
	return o
}

func (o PgclusterTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgclusterType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o PgclusterTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgclusterType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o PgclusterTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PgclusterType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o PgclusterTypeOutput) Spec() pulumi.AnyOutput {
	return o.ApplyT(func(v PgclusterType) interface{} { return v.Spec }).(pulumi.AnyOutput)
}

func (o PgclusterTypeOutput) Status() pulumi.AnyOutput {
	return o.ApplyT(func(v PgclusterType) interface{} { return v.Status }).(pulumi.AnyOutput)
}

type PgpolicyType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Status     interface{}        `pulumi:"status"`
}

// PgpolicyTypeInput is an input type that accepts PgpolicyTypeArgs and PgpolicyTypeOutput values.
// You can construct a concrete instance of `PgpolicyTypeInput` via:
//
//          PgpolicyTypeArgs{...}
type PgpolicyTypeInput interface {
	pulumi.Input

	ToPgpolicyTypeOutput() PgpolicyTypeOutput
	ToPgpolicyTypeOutputWithContext(context.Context) PgpolicyTypeOutput
}

type PgpolicyTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Status     pulumi.Input              `pulumi:"status"`
}

func (PgpolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PgpolicyType)(nil)).Elem()
}

func (i PgpolicyTypeArgs) ToPgpolicyTypeOutput() PgpolicyTypeOutput {
	return i.ToPgpolicyTypeOutputWithContext(context.Background())
}

func (i PgpolicyTypeArgs) ToPgpolicyTypeOutputWithContext(ctx context.Context) PgpolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgpolicyTypeOutput)
}

type PgpolicyTypeOutput struct{ *pulumi.OutputState }

func (PgpolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PgpolicyType)(nil)).Elem()
}

func (o PgpolicyTypeOutput) ToPgpolicyTypeOutput() PgpolicyTypeOutput {
	return o
}

func (o PgpolicyTypeOutput) ToPgpolicyTypeOutputWithContext(ctx context.Context) PgpolicyTypeOutput {
	return o
}

func (o PgpolicyTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgpolicyType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o PgpolicyTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgpolicyType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o PgpolicyTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PgpolicyType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o PgpolicyTypeOutput) Status() pulumi.AnyOutput {
	return o.ApplyT(func(v PgpolicyType) interface{} { return v.Status }).(pulumi.AnyOutput)
}

type PgreplicaType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Status     interface{}        `pulumi:"status"`
}

// PgreplicaTypeInput is an input type that accepts PgreplicaTypeArgs and PgreplicaTypeOutput values.
// You can construct a concrete instance of `PgreplicaTypeInput` via:
//
//          PgreplicaTypeArgs{...}
type PgreplicaTypeInput interface {
	pulumi.Input

	ToPgreplicaTypeOutput() PgreplicaTypeOutput
	ToPgreplicaTypeOutputWithContext(context.Context) PgreplicaTypeOutput
}

type PgreplicaTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Status     pulumi.Input              `pulumi:"status"`
}

func (PgreplicaTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PgreplicaType)(nil)).Elem()
}

func (i PgreplicaTypeArgs) ToPgreplicaTypeOutput() PgreplicaTypeOutput {
	return i.ToPgreplicaTypeOutputWithContext(context.Background())
}

func (i PgreplicaTypeArgs) ToPgreplicaTypeOutputWithContext(ctx context.Context) PgreplicaTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgreplicaTypeOutput)
}

type PgreplicaTypeOutput struct{ *pulumi.OutputState }

func (PgreplicaTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PgreplicaType)(nil)).Elem()
}

func (o PgreplicaTypeOutput) ToPgreplicaTypeOutput() PgreplicaTypeOutput {
	return o
}

func (o PgreplicaTypeOutput) ToPgreplicaTypeOutputWithContext(ctx context.Context) PgreplicaTypeOutput {
	return o
}

func (o PgreplicaTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgreplicaType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o PgreplicaTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgreplicaType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o PgreplicaTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PgreplicaType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o PgreplicaTypeOutput) Status() pulumi.AnyOutput {
	return o.ApplyT(func(v PgreplicaType) interface{} { return v.Status }).(pulumi.AnyOutput)
}

type PgtaskType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Status     interface{}        `pulumi:"status"`
}

// PgtaskTypeInput is an input type that accepts PgtaskTypeArgs and PgtaskTypeOutput values.
// You can construct a concrete instance of `PgtaskTypeInput` via:
//
//          PgtaskTypeArgs{...}
type PgtaskTypeInput interface {
	pulumi.Input

	ToPgtaskTypeOutput() PgtaskTypeOutput
	ToPgtaskTypeOutputWithContext(context.Context) PgtaskTypeOutput
}

type PgtaskTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Status     pulumi.Input              `pulumi:"status"`
}

func (PgtaskTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PgtaskType)(nil)).Elem()
}

func (i PgtaskTypeArgs) ToPgtaskTypeOutput() PgtaskTypeOutput {
	return i.ToPgtaskTypeOutputWithContext(context.Background())
}

func (i PgtaskTypeArgs) ToPgtaskTypeOutputWithContext(ctx context.Context) PgtaskTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgtaskTypeOutput)
}

type PgtaskTypeOutput struct{ *pulumi.OutputState }

func (PgtaskTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PgtaskType)(nil)).Elem()
}

func (o PgtaskTypeOutput) ToPgtaskTypeOutput() PgtaskTypeOutput {
	return o
}

func (o PgtaskTypeOutput) ToPgtaskTypeOutputWithContext(ctx context.Context) PgtaskTypeOutput {
	return o
}

func (o PgtaskTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgtaskType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o PgtaskTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PgtaskType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o PgtaskTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PgtaskType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o PgtaskTypeOutput) Status() pulumi.AnyOutput {
	return o.ApplyT(func(v PgtaskType) interface{} { return v.Status }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterOutputType(PgclusterTypeOutput{})
	pulumi.RegisterOutputType(PgpolicyTypeOutput{})
	pulumi.RegisterOutputType(PgreplicaTypeOutput{})
	pulumi.RegisterOutputType(PgtaskTypeOutput{})
}

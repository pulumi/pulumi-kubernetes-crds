// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Org.V1
{

    /// <summary>
    /// Configuration settings related to the database used by the Che installation.
    /// </summary>
    public class CheClusterSpecDatabaseArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Postgres database name that the Che server uses to connect to the DB. Defaults to `dbche`.
        /// </summary>
        [Input("chePostgresDb")]
        public Input<string>? ChePostgresDb { get; set; }

        /// <summary>
        /// Postgres Database hostname that the Che server uses to connect to. Defaults to postgres. This value should be overridden ONLY when using an external database (see field `externalDb`). In the default case it will be automatically set by the operator.
        /// </summary>
        [Input("chePostgresHostName")]
        public Input<string>? ChePostgresHostName { get; set; }

        /// <summary>
        /// Postgres password that the Che server should use to connect to the DB. If omitted or left blank, it will be set to an auto-generated value.
        /// </summary>
        [Input("chePostgresPassword")]
        public Input<string>? ChePostgresPassword { get; set; }

        /// <summary>
        /// Postgres Database port that the Che server uses to connect to. Defaults to 5432. This value should be overridden ONLY when using an external database (see field `externalDb`). In the default case it will be automatically set by the operator.
        /// </summary>
        [Input("chePostgresPort")]
        public Input<string>? ChePostgresPort { get; set; }

        /// <summary>
        /// The secret that contains Postgres `user` and `password` that the Che server should use to connect to the DB. If the secret is defined then `chePostgresUser` and `chePostgresPassword` are ignored. If the value is omitted or left blank then there are two scenarios: 1. `chePostgresUser` and `chePostgresPassword` are defined, then they will be used to connect to the DB. 2. `chePostgresUser` or `chePostgresPassword` are not defined, then a new secret with the name `che-postgres-secret` will be created with default value of `pgche` for `user` and with an auto-generated value for `password`.
        /// </summary>
        [Input("chePostgresSecret")]
        public Input<string>? ChePostgresSecret { get; set; }

        /// <summary>
        /// Postgres user that the Che server should use to connect to the DB. Defaults to `pgche`.
        /// </summary>
        [Input("chePostgresUser")]
        public Input<string>? ChePostgresUser { get; set; }

        /// <summary>
        /// Instructs the operator on whether or not to deploy a dedicated database. By default a dedicated Postgres database is deployed as part of the Che installation. But if `externalDb` is `true`, then no dedicated database will be deployed by the operator and you might need to provide connection details to the external DB you want to use. See also all the fields starting with: `chePostgres`.
        /// </summary>
        [Input("externalDb")]
        public Input<bool>? ExternalDb { get; set; }

        /// <summary>
        /// Overrides the container image used in the Postgres database deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
        /// </summary>
        [Input("postgresImage")]
        public Input<string>? PostgresImage { get; set; }

        /// <summary>
        /// Overrides the image pull policy used in the Postgres database deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
        /// </summary>
        [Input("postgresImagePullPolicy")]
        public Input<string>? PostgresImagePullPolicy { get; set; }

        public CheClusterSpecDatabaseArgs()
        {
        }
    }
}

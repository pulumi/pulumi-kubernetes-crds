// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The `CheCluster` custom resource allows defining and managing a Che server installation
type CheClusterType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Desired configuration of the Che installation. Based on these settings, the operator automatically creates and maintains several config maps that will contain the appropriate environment variables the various components of the Che installation. These generated config maps should NOT be updated manually.
	Spec *CheClusterSpec `pulumi:"spec"`
	// CheClusterStatus defines the observed state of Che installation
	Status *CheClusterStatus `pulumi:"status"`
}

// CheClusterTypeInput is an input type that accepts CheClusterTypeArgs and CheClusterTypeOutput values.
// You can construct a concrete instance of `CheClusterTypeInput` via:
//
//          CheClusterTypeArgs{...}
type CheClusterTypeInput interface {
	pulumi.Input

	ToCheClusterTypeOutput() CheClusterTypeOutput
	ToCheClusterTypeOutputWithContext(context.Context) CheClusterTypeOutput
}

// The `CheCluster` custom resource allows defining and managing a Che server installation
type CheClusterTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Desired configuration of the Che installation. Based on these settings, the operator automatically creates and maintains several config maps that will contain the appropriate environment variables the various components of the Che installation. These generated config maps should NOT be updated manually.
	Spec CheClusterSpecPtrInput `pulumi:"spec"`
	// CheClusterStatus defines the observed state of Che installation
	Status CheClusterStatusPtrInput `pulumi:"status"`
}

func (CheClusterTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterType)(nil)).Elem()
}

func (i CheClusterTypeArgs) ToCheClusterTypeOutput() CheClusterTypeOutput {
	return i.ToCheClusterTypeOutputWithContext(context.Background())
}

func (i CheClusterTypeArgs) ToCheClusterTypeOutputWithContext(ctx context.Context) CheClusterTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterTypeOutput)
}

// The `CheCluster` custom resource allows defining and managing a Che server installation
type CheClusterTypeOutput struct{ *pulumi.OutputState }

func (CheClusterTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterType)(nil)).Elem()
}

func (o CheClusterTypeOutput) ToCheClusterTypeOutput() CheClusterTypeOutput {
	return o
}

func (o CheClusterTypeOutput) ToCheClusterTypeOutputWithContext(ctx context.Context) CheClusterTypeOutput {
	return o
}

func (o CheClusterTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CheClusterTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CheClusterTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CheClusterType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Desired configuration of the Che installation. Based on these settings, the operator automatically creates and maintains several config maps that will contain the appropriate environment variables the various components of the Che installation. These generated config maps should NOT be updated manually.
func (o CheClusterTypeOutput) Spec() CheClusterSpecPtrOutput {
	return o.ApplyT(func(v CheClusterType) *CheClusterSpec { return v.Spec }).(CheClusterSpecPtrOutput)
}

// CheClusterStatus defines the observed state of Che installation
func (o CheClusterTypeOutput) Status() CheClusterStatusPtrOutput {
	return o.ApplyT(func(v CheClusterType) *CheClusterStatus { return v.Status }).(CheClusterStatusPtrOutput)
}

type CheClusterMetadata struct {
}

// CheClusterMetadataInput is an input type that accepts CheClusterMetadataArgs and CheClusterMetadataOutput values.
// You can construct a concrete instance of `CheClusterMetadataInput` via:
//
//          CheClusterMetadataArgs{...}
type CheClusterMetadataInput interface {
	pulumi.Input

	ToCheClusterMetadataOutput() CheClusterMetadataOutput
	ToCheClusterMetadataOutputWithContext(context.Context) CheClusterMetadataOutput
}

type CheClusterMetadataArgs struct {
}

func (CheClusterMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterMetadata)(nil)).Elem()
}

func (i CheClusterMetadataArgs) ToCheClusterMetadataOutput() CheClusterMetadataOutput {
	return i.ToCheClusterMetadataOutputWithContext(context.Background())
}

func (i CheClusterMetadataArgs) ToCheClusterMetadataOutputWithContext(ctx context.Context) CheClusterMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterMetadataOutput)
}

type CheClusterMetadataOutput struct{ *pulumi.OutputState }

func (CheClusterMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterMetadata)(nil)).Elem()
}

func (o CheClusterMetadataOutput) ToCheClusterMetadataOutput() CheClusterMetadataOutput {
	return o
}

func (o CheClusterMetadataOutput) ToCheClusterMetadataOutputWithContext(ctx context.Context) CheClusterMetadataOutput {
	return o
}

// Desired configuration of the Che installation. Based on these settings, the operator automatically creates and maintains several config maps that will contain the appropriate environment variables the various components of the Che installation. These generated config maps should NOT be updated manually.
type CheClusterSpec struct {
	// Configuration settings related to the Authentication used by the Che installation.
	Auth *CheClusterSpecAuth `pulumi:"auth"`
	// Configuration settings related to the database used by the Che installation.
	Database *CheClusterSpecDatabase `pulumi:"database"`
	// Kubernetes Image Puller configuration
	ImagePuller *CheClusterSpecImagePuller `pulumi:"imagePuller"`
	// Configuration settings specific to Che installations made on upstream Kubernetes.
	K8s *CheClusterSpecK8s `pulumi:"k8s"`
	// Configuration settings related to the metrics collection used by the Che installation.
	Metrics *CheClusterSpecMetrics `pulumi:"metrics"`
	// General configuration settings related to the Che server and the plugin and devfile registries
	Server *CheClusterSpecServer `pulumi:"server"`
	// Configuration settings related to the persistent storage used by the Che installation.
	Storage *CheClusterSpecStorage `pulumi:"storage"`
}

// CheClusterSpecInput is an input type that accepts CheClusterSpecArgs and CheClusterSpecOutput values.
// You can construct a concrete instance of `CheClusterSpecInput` via:
//
//          CheClusterSpecArgs{...}
type CheClusterSpecInput interface {
	pulumi.Input

	ToCheClusterSpecOutput() CheClusterSpecOutput
	ToCheClusterSpecOutputWithContext(context.Context) CheClusterSpecOutput
}

// Desired configuration of the Che installation. Based on these settings, the operator automatically creates and maintains several config maps that will contain the appropriate environment variables the various components of the Che installation. These generated config maps should NOT be updated manually.
type CheClusterSpecArgs struct {
	// Configuration settings related to the Authentication used by the Che installation.
	Auth CheClusterSpecAuthPtrInput `pulumi:"auth"`
	// Configuration settings related to the database used by the Che installation.
	Database CheClusterSpecDatabasePtrInput `pulumi:"database"`
	// Kubernetes Image Puller configuration
	ImagePuller CheClusterSpecImagePullerPtrInput `pulumi:"imagePuller"`
	// Configuration settings specific to Che installations made on upstream Kubernetes.
	K8s CheClusterSpecK8sPtrInput `pulumi:"k8s"`
	// Configuration settings related to the metrics collection used by the Che installation.
	Metrics CheClusterSpecMetricsPtrInput `pulumi:"metrics"`
	// General configuration settings related to the Che server and the plugin and devfile registries
	Server CheClusterSpecServerPtrInput `pulumi:"server"`
	// Configuration settings related to the persistent storage used by the Che installation.
	Storage CheClusterSpecStoragePtrInput `pulumi:"storage"`
}

func (CheClusterSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpec)(nil)).Elem()
}

func (i CheClusterSpecArgs) ToCheClusterSpecOutput() CheClusterSpecOutput {
	return i.ToCheClusterSpecOutputWithContext(context.Background())
}

func (i CheClusterSpecArgs) ToCheClusterSpecOutputWithContext(ctx context.Context) CheClusterSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecOutput)
}

func (i CheClusterSpecArgs) ToCheClusterSpecPtrOutput() CheClusterSpecPtrOutput {
	return i.ToCheClusterSpecPtrOutputWithContext(context.Background())
}

func (i CheClusterSpecArgs) ToCheClusterSpecPtrOutputWithContext(ctx context.Context) CheClusterSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecOutput).ToCheClusterSpecPtrOutputWithContext(ctx)
}

// CheClusterSpecPtrInput is an input type that accepts CheClusterSpecArgs, CheClusterSpecPtr and CheClusterSpecPtrOutput values.
// You can construct a concrete instance of `CheClusterSpecPtrInput` via:
//
//          CheClusterSpecArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecPtrInput interface {
	pulumi.Input

	ToCheClusterSpecPtrOutput() CheClusterSpecPtrOutput
	ToCheClusterSpecPtrOutputWithContext(context.Context) CheClusterSpecPtrOutput
}

type cheClusterSpecPtrType CheClusterSpecArgs

func CheClusterSpecPtr(v *CheClusterSpecArgs) CheClusterSpecPtrInput {
	return (*cheClusterSpecPtrType)(v)
}

func (*cheClusterSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpec)(nil)).Elem()
}

func (i *cheClusterSpecPtrType) ToCheClusterSpecPtrOutput() CheClusterSpecPtrOutput {
	return i.ToCheClusterSpecPtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecPtrType) ToCheClusterSpecPtrOutputWithContext(ctx context.Context) CheClusterSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecPtrOutput)
}

// Desired configuration of the Che installation. Based on these settings, the operator automatically creates and maintains several config maps that will contain the appropriate environment variables the various components of the Che installation. These generated config maps should NOT be updated manually.
type CheClusterSpecOutput struct{ *pulumi.OutputState }

func (CheClusterSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpec)(nil)).Elem()
}

func (o CheClusterSpecOutput) ToCheClusterSpecOutput() CheClusterSpecOutput {
	return o
}

func (o CheClusterSpecOutput) ToCheClusterSpecOutputWithContext(ctx context.Context) CheClusterSpecOutput {
	return o
}

func (o CheClusterSpecOutput) ToCheClusterSpecPtrOutput() CheClusterSpecPtrOutput {
	return o.ToCheClusterSpecPtrOutputWithContext(context.Background())
}

func (o CheClusterSpecOutput) ToCheClusterSpecPtrOutputWithContext(ctx context.Context) CheClusterSpecPtrOutput {
	return o.ApplyT(func(v CheClusterSpec) *CheClusterSpec {
		return &v
	}).(CheClusterSpecPtrOutput)
}

// Configuration settings related to the Authentication used by the Che installation.
func (o CheClusterSpecOutput) Auth() CheClusterSpecAuthPtrOutput {
	return o.ApplyT(func(v CheClusterSpec) *CheClusterSpecAuth { return v.Auth }).(CheClusterSpecAuthPtrOutput)
}

// Configuration settings related to the database used by the Che installation.
func (o CheClusterSpecOutput) Database() CheClusterSpecDatabasePtrOutput {
	return o.ApplyT(func(v CheClusterSpec) *CheClusterSpecDatabase { return v.Database }).(CheClusterSpecDatabasePtrOutput)
}

// Kubernetes Image Puller configuration
func (o CheClusterSpecOutput) ImagePuller() CheClusterSpecImagePullerPtrOutput {
	return o.ApplyT(func(v CheClusterSpec) *CheClusterSpecImagePuller { return v.ImagePuller }).(CheClusterSpecImagePullerPtrOutput)
}

// Configuration settings specific to Che installations made on upstream Kubernetes.
func (o CheClusterSpecOutput) K8s() CheClusterSpecK8sPtrOutput {
	return o.ApplyT(func(v CheClusterSpec) *CheClusterSpecK8s { return v.K8s }).(CheClusterSpecK8sPtrOutput)
}

// Configuration settings related to the metrics collection used by the Che installation.
func (o CheClusterSpecOutput) Metrics() CheClusterSpecMetricsPtrOutput {
	return o.ApplyT(func(v CheClusterSpec) *CheClusterSpecMetrics { return v.Metrics }).(CheClusterSpecMetricsPtrOutput)
}

// General configuration settings related to the Che server and the plugin and devfile registries
func (o CheClusterSpecOutput) Server() CheClusterSpecServerPtrOutput {
	return o.ApplyT(func(v CheClusterSpec) *CheClusterSpecServer { return v.Server }).(CheClusterSpecServerPtrOutput)
}

// Configuration settings related to the persistent storage used by the Che installation.
func (o CheClusterSpecOutput) Storage() CheClusterSpecStoragePtrOutput {
	return o.ApplyT(func(v CheClusterSpec) *CheClusterSpecStorage { return v.Storage }).(CheClusterSpecStoragePtrOutput)
}

type CheClusterSpecPtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpec)(nil)).Elem()
}

func (o CheClusterSpecPtrOutput) ToCheClusterSpecPtrOutput() CheClusterSpecPtrOutput {
	return o
}

func (o CheClusterSpecPtrOutput) ToCheClusterSpecPtrOutputWithContext(ctx context.Context) CheClusterSpecPtrOutput {
	return o
}

func (o CheClusterSpecPtrOutput) Elem() CheClusterSpecOutput {
	return o.ApplyT(func(v *CheClusterSpec) CheClusterSpec { return *v }).(CheClusterSpecOutput)
}

// Configuration settings related to the Authentication used by the Che installation.
func (o CheClusterSpecPtrOutput) Auth() CheClusterSpecAuthPtrOutput {
	return o.ApplyT(func(v *CheClusterSpec) *CheClusterSpecAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(CheClusterSpecAuthPtrOutput)
}

// Configuration settings related to the database used by the Che installation.
func (o CheClusterSpecPtrOutput) Database() CheClusterSpecDatabasePtrOutput {
	return o.ApplyT(func(v *CheClusterSpec) *CheClusterSpecDatabase {
		if v == nil {
			return nil
		}
		return v.Database
	}).(CheClusterSpecDatabasePtrOutput)
}

// Kubernetes Image Puller configuration
func (o CheClusterSpecPtrOutput) ImagePuller() CheClusterSpecImagePullerPtrOutput {
	return o.ApplyT(func(v *CheClusterSpec) *CheClusterSpecImagePuller {
		if v == nil {
			return nil
		}
		return v.ImagePuller
	}).(CheClusterSpecImagePullerPtrOutput)
}

// Configuration settings specific to Che installations made on upstream Kubernetes.
func (o CheClusterSpecPtrOutput) K8s() CheClusterSpecK8sPtrOutput {
	return o.ApplyT(func(v *CheClusterSpec) *CheClusterSpecK8s {
		if v == nil {
			return nil
		}
		return v.K8s
	}).(CheClusterSpecK8sPtrOutput)
}

// Configuration settings related to the metrics collection used by the Che installation.
func (o CheClusterSpecPtrOutput) Metrics() CheClusterSpecMetricsPtrOutput {
	return o.ApplyT(func(v *CheClusterSpec) *CheClusterSpecMetrics {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(CheClusterSpecMetricsPtrOutput)
}

// General configuration settings related to the Che server and the plugin and devfile registries
func (o CheClusterSpecPtrOutput) Server() CheClusterSpecServerPtrOutput {
	return o.ApplyT(func(v *CheClusterSpec) *CheClusterSpecServer {
		if v == nil {
			return nil
		}
		return v.Server
	}).(CheClusterSpecServerPtrOutput)
}

// Configuration settings related to the persistent storage used by the Che installation.
func (o CheClusterSpecPtrOutput) Storage() CheClusterSpecStoragePtrOutput {
	return o.ApplyT(func(v *CheClusterSpec) *CheClusterSpecStorage {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(CheClusterSpecStoragePtrOutput)
}

// Configuration settings related to the Authentication used by the Che installation.
type CheClusterSpecAuth struct {
	// Instructs the operator on whether or not to deploy a dedicated Identity Provider (Keycloak or RH SSO instance). By default a dedicated Identity Provider server is deployed as part of the Che installation. But if `externalIdentityProvider` is `true`, then no dedicated identity provider will be deployed by the operator and you might need to provide details about the external identity provider you want to use. See also all the other fields starting with: `identityProvider`.
	ExternalIdentityProvider *bool `pulumi:"externalIdentityProvider"`
	// Overrides the name of the Identity Provider admin user. Defaults to `admin`.
	IdentityProviderAdminUserName *string `pulumi:"identityProviderAdminUserName"`
	// Name of a Identity provider (Keycloak / RH SSO) `client-id` that should be used for Che. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to the value of the `flavour` field suffixed with `-public`.
	IdentityProviderClientId *string `pulumi:"identityProviderClientId"`
	// Overrides the container image used in the Identity Provider (Keycloak / RH SSO) deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
	IdentityProviderImage *string `pulumi:"identityProviderImage"`
	// Overrides the image pull policy used in the Identity Provider (Keycloak / RH SSO) deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
	IdentityProviderImagePullPolicy *string `pulumi:"identityProviderImagePullPolicy"`
	// Ingress custom settings
	IdentityProviderIngress *CheClusterSpecAuthIdentityProviderIngress `pulumi:"identityProviderIngress"`
	// Overrides the password of Keycloak admin user. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to an auto-generated password.
	IdentityProviderPassword *string `pulumi:"identityProviderPassword"`
	// Password for The Identity Provider (Keycloak / RH SSO) to connect to the database. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to an auto-generated password.
	IdentityProviderPostgresPassword *string `pulumi:"identityProviderPostgresPassword"`
	// The secret that contains `password` for The Identity Provider (Keycloak / RH SSO) to connect to the database. If the secret is defined then `identityProviderPostgresPassword` will be ignored. If the value is omitted or left blank then there are two scenarios: 1. `identityProviderPostgresPassword` is defined, then it will be used to connect to the database. 2. `identityProviderPostgresPassword` is not defined, then a new secret with the name `che-identity-postgres-secret` will be created with an auto-generated value for `password`.
	IdentityProviderPostgresSecret *string `pulumi:"identityProviderPostgresSecret"`
	// Name of a Identity provider (Keycloak / RH SSO) realm that should be used for Che. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to the value of the `flavour` field.
	IdentityProviderRealm *string `pulumi:"identityProviderRealm"`
	// Route custom settings
	IdentityProviderRoute *CheClusterSpecAuthIdentityProviderRoute `pulumi:"identityProviderRoute"`
	// The secret that contains `user` and `password` for Identity Provider. If the secret is defined then `identityProviderAdminUserName` and `identityProviderPassword` are ignored. If the value is omitted or left blank then there are two scenarios: 1. `identityProviderAdminUserName` and `identityProviderPassword` are defined, then they will be used. 2. `identityProviderAdminUserName` or `identityProviderPassword` are not defined, then a new secret with the name `che-identity-secret` will be created with default value `admin` for `user` and with an auto-generated value for `password`.
	IdentityProviderSecret *string `pulumi:"identityProviderSecret"`
	// Public URL of the Identity Provider server (Keycloak / RH SSO server). You should set it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). By default this will be automatically calculated and set by the operator.
	IdentityProviderURL *string `pulumi:"identityProviderURL"`
	// Name of the OpenShift `OAuthClient` resource used to setup identity federation on the OpenShift side. Auto-generated if left blank. See also the `OpenShiftoAuth` field.
	OAuthClientName *string `pulumi:"oAuthClientName"`
	// Name of the secret set in the OpenShift `OAuthClient` resource used to setup identity federation on the OpenShift side. Auto-generated if left blank. See also the `OAuthClientName` field.
	OAuthSecret *string `pulumi:"oAuthSecret"`
	// Enables the integration of the identity provider (Keycloak / RHSSO) with OpenShift OAuth. Enabled by default on OpenShift. This will allow users to directly login with their Openshift user through the Openshift login, and have their workspaces created under personal OpenShift namespaces. WARNING: the `kubeadmin` user is NOT supported, and logging through it will NOT allow accessing the Che Dashboard.
	OpenShiftoAuth *bool `pulumi:"openShiftoAuth"`
	// Forces the default `admin` Che user to update password on first login. Defaults to `false`.
	UpdateAdminPassword *bool `pulumi:"updateAdminPassword"`
}

// CheClusterSpecAuthInput is an input type that accepts CheClusterSpecAuthArgs and CheClusterSpecAuthOutput values.
// You can construct a concrete instance of `CheClusterSpecAuthInput` via:
//
//          CheClusterSpecAuthArgs{...}
type CheClusterSpecAuthInput interface {
	pulumi.Input

	ToCheClusterSpecAuthOutput() CheClusterSpecAuthOutput
	ToCheClusterSpecAuthOutputWithContext(context.Context) CheClusterSpecAuthOutput
}

// Configuration settings related to the Authentication used by the Che installation.
type CheClusterSpecAuthArgs struct {
	// Instructs the operator on whether or not to deploy a dedicated Identity Provider (Keycloak or RH SSO instance). By default a dedicated Identity Provider server is deployed as part of the Che installation. But if `externalIdentityProvider` is `true`, then no dedicated identity provider will be deployed by the operator and you might need to provide details about the external identity provider you want to use. See also all the other fields starting with: `identityProvider`.
	ExternalIdentityProvider pulumi.BoolPtrInput `pulumi:"externalIdentityProvider"`
	// Overrides the name of the Identity Provider admin user. Defaults to `admin`.
	IdentityProviderAdminUserName pulumi.StringPtrInput `pulumi:"identityProviderAdminUserName"`
	// Name of a Identity provider (Keycloak / RH SSO) `client-id` that should be used for Che. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to the value of the `flavour` field suffixed with `-public`.
	IdentityProviderClientId pulumi.StringPtrInput `pulumi:"identityProviderClientId"`
	// Overrides the container image used in the Identity Provider (Keycloak / RH SSO) deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
	IdentityProviderImage pulumi.StringPtrInput `pulumi:"identityProviderImage"`
	// Overrides the image pull policy used in the Identity Provider (Keycloak / RH SSO) deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
	IdentityProviderImagePullPolicy pulumi.StringPtrInput `pulumi:"identityProviderImagePullPolicy"`
	// Ingress custom settings
	IdentityProviderIngress CheClusterSpecAuthIdentityProviderIngressPtrInput `pulumi:"identityProviderIngress"`
	// Overrides the password of Keycloak admin user. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to an auto-generated password.
	IdentityProviderPassword pulumi.StringPtrInput `pulumi:"identityProviderPassword"`
	// Password for The Identity Provider (Keycloak / RH SSO) to connect to the database. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to an auto-generated password.
	IdentityProviderPostgresPassword pulumi.StringPtrInput `pulumi:"identityProviderPostgresPassword"`
	// The secret that contains `password` for The Identity Provider (Keycloak / RH SSO) to connect to the database. If the secret is defined then `identityProviderPostgresPassword` will be ignored. If the value is omitted or left blank then there are two scenarios: 1. `identityProviderPostgresPassword` is defined, then it will be used to connect to the database. 2. `identityProviderPostgresPassword` is not defined, then a new secret with the name `che-identity-postgres-secret` will be created with an auto-generated value for `password`.
	IdentityProviderPostgresSecret pulumi.StringPtrInput `pulumi:"identityProviderPostgresSecret"`
	// Name of a Identity provider (Keycloak / RH SSO) realm that should be used for Che. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to the value of the `flavour` field.
	IdentityProviderRealm pulumi.StringPtrInput `pulumi:"identityProviderRealm"`
	// Route custom settings
	IdentityProviderRoute CheClusterSpecAuthIdentityProviderRoutePtrInput `pulumi:"identityProviderRoute"`
	// The secret that contains `user` and `password` for Identity Provider. If the secret is defined then `identityProviderAdminUserName` and `identityProviderPassword` are ignored. If the value is omitted or left blank then there are two scenarios: 1. `identityProviderAdminUserName` and `identityProviderPassword` are defined, then they will be used. 2. `identityProviderAdminUserName` or `identityProviderPassword` are not defined, then a new secret with the name `che-identity-secret` will be created with default value `admin` for `user` and with an auto-generated value for `password`.
	IdentityProviderSecret pulumi.StringPtrInput `pulumi:"identityProviderSecret"`
	// Public URL of the Identity Provider server (Keycloak / RH SSO server). You should set it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). By default this will be automatically calculated and set by the operator.
	IdentityProviderURL pulumi.StringPtrInput `pulumi:"identityProviderURL"`
	// Name of the OpenShift `OAuthClient` resource used to setup identity federation on the OpenShift side. Auto-generated if left blank. See also the `OpenShiftoAuth` field.
	OAuthClientName pulumi.StringPtrInput `pulumi:"oAuthClientName"`
	// Name of the secret set in the OpenShift `OAuthClient` resource used to setup identity federation on the OpenShift side. Auto-generated if left blank. See also the `OAuthClientName` field.
	OAuthSecret pulumi.StringPtrInput `pulumi:"oAuthSecret"`
	// Enables the integration of the identity provider (Keycloak / RHSSO) with OpenShift OAuth. Enabled by default on OpenShift. This will allow users to directly login with their Openshift user through the Openshift login, and have their workspaces created under personal OpenShift namespaces. WARNING: the `kubeadmin` user is NOT supported, and logging through it will NOT allow accessing the Che Dashboard.
	OpenShiftoAuth pulumi.BoolPtrInput `pulumi:"openShiftoAuth"`
	// Forces the default `admin` Che user to update password on first login. Defaults to `false`.
	UpdateAdminPassword pulumi.BoolPtrInput `pulumi:"updateAdminPassword"`
}

func (CheClusterSpecAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecAuth)(nil)).Elem()
}

func (i CheClusterSpecAuthArgs) ToCheClusterSpecAuthOutput() CheClusterSpecAuthOutput {
	return i.ToCheClusterSpecAuthOutputWithContext(context.Background())
}

func (i CheClusterSpecAuthArgs) ToCheClusterSpecAuthOutputWithContext(ctx context.Context) CheClusterSpecAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecAuthOutput)
}

func (i CheClusterSpecAuthArgs) ToCheClusterSpecAuthPtrOutput() CheClusterSpecAuthPtrOutput {
	return i.ToCheClusterSpecAuthPtrOutputWithContext(context.Background())
}

func (i CheClusterSpecAuthArgs) ToCheClusterSpecAuthPtrOutputWithContext(ctx context.Context) CheClusterSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecAuthOutput).ToCheClusterSpecAuthPtrOutputWithContext(ctx)
}

// CheClusterSpecAuthPtrInput is an input type that accepts CheClusterSpecAuthArgs, CheClusterSpecAuthPtr and CheClusterSpecAuthPtrOutput values.
// You can construct a concrete instance of `CheClusterSpecAuthPtrInput` via:
//
//          CheClusterSpecAuthArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecAuthPtrInput interface {
	pulumi.Input

	ToCheClusterSpecAuthPtrOutput() CheClusterSpecAuthPtrOutput
	ToCheClusterSpecAuthPtrOutputWithContext(context.Context) CheClusterSpecAuthPtrOutput
}

type cheClusterSpecAuthPtrType CheClusterSpecAuthArgs

func CheClusterSpecAuthPtr(v *CheClusterSpecAuthArgs) CheClusterSpecAuthPtrInput {
	return (*cheClusterSpecAuthPtrType)(v)
}

func (*cheClusterSpecAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecAuth)(nil)).Elem()
}

func (i *cheClusterSpecAuthPtrType) ToCheClusterSpecAuthPtrOutput() CheClusterSpecAuthPtrOutput {
	return i.ToCheClusterSpecAuthPtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecAuthPtrType) ToCheClusterSpecAuthPtrOutputWithContext(ctx context.Context) CheClusterSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecAuthPtrOutput)
}

// Configuration settings related to the Authentication used by the Che installation.
type CheClusterSpecAuthOutput struct{ *pulumi.OutputState }

func (CheClusterSpecAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecAuth)(nil)).Elem()
}

func (o CheClusterSpecAuthOutput) ToCheClusterSpecAuthOutput() CheClusterSpecAuthOutput {
	return o
}

func (o CheClusterSpecAuthOutput) ToCheClusterSpecAuthOutputWithContext(ctx context.Context) CheClusterSpecAuthOutput {
	return o
}

func (o CheClusterSpecAuthOutput) ToCheClusterSpecAuthPtrOutput() CheClusterSpecAuthPtrOutput {
	return o.ToCheClusterSpecAuthPtrOutputWithContext(context.Background())
}

func (o CheClusterSpecAuthOutput) ToCheClusterSpecAuthPtrOutputWithContext(ctx context.Context) CheClusterSpecAuthPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *CheClusterSpecAuth {
		return &v
	}).(CheClusterSpecAuthPtrOutput)
}

// Instructs the operator on whether or not to deploy a dedicated Identity Provider (Keycloak or RH SSO instance). By default a dedicated Identity Provider server is deployed as part of the Che installation. But if `externalIdentityProvider` is `true`, then no dedicated identity provider will be deployed by the operator and you might need to provide details about the external identity provider you want to use. See also all the other fields starting with: `identityProvider`.
func (o CheClusterSpecAuthOutput) ExternalIdentityProvider() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *bool { return v.ExternalIdentityProvider }).(pulumi.BoolPtrOutput)
}

// Overrides the name of the Identity Provider admin user. Defaults to `admin`.
func (o CheClusterSpecAuthOutput) IdentityProviderAdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *string { return v.IdentityProviderAdminUserName }).(pulumi.StringPtrOutput)
}

// Name of a Identity provider (Keycloak / RH SSO) `client-id` that should be used for Che. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to the value of the `flavour` field suffixed with `-public`.
func (o CheClusterSpecAuthOutput) IdentityProviderClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *string { return v.IdentityProviderClientId }).(pulumi.StringPtrOutput)
}

// Overrides the container image used in the Identity Provider (Keycloak / RH SSO) deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
func (o CheClusterSpecAuthOutput) IdentityProviderImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *string { return v.IdentityProviderImage }).(pulumi.StringPtrOutput)
}

// Overrides the image pull policy used in the Identity Provider (Keycloak / RH SSO) deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
func (o CheClusterSpecAuthOutput) IdentityProviderImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *string { return v.IdentityProviderImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Ingress custom settings
func (o CheClusterSpecAuthOutput) IdentityProviderIngress() CheClusterSpecAuthIdentityProviderIngressPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *CheClusterSpecAuthIdentityProviderIngress {
		return v.IdentityProviderIngress
	}).(CheClusterSpecAuthIdentityProviderIngressPtrOutput)
}

// Overrides the password of Keycloak admin user. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to an auto-generated password.
func (o CheClusterSpecAuthOutput) IdentityProviderPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *string { return v.IdentityProviderPassword }).(pulumi.StringPtrOutput)
}

// Password for The Identity Provider (Keycloak / RH SSO) to connect to the database. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to an auto-generated password.
func (o CheClusterSpecAuthOutput) IdentityProviderPostgresPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *string { return v.IdentityProviderPostgresPassword }).(pulumi.StringPtrOutput)
}

// The secret that contains `password` for The Identity Provider (Keycloak / RH SSO) to connect to the database. If the secret is defined then `identityProviderPostgresPassword` will be ignored. If the value is omitted or left blank then there are two scenarios: 1. `identityProviderPostgresPassword` is defined, then it will be used to connect to the database. 2. `identityProviderPostgresPassword` is not defined, then a new secret with the name `che-identity-postgres-secret` will be created with an auto-generated value for `password`.
func (o CheClusterSpecAuthOutput) IdentityProviderPostgresSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *string { return v.IdentityProviderPostgresSecret }).(pulumi.StringPtrOutput)
}

// Name of a Identity provider (Keycloak / RH SSO) realm that should be used for Che. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to the value of the `flavour` field.
func (o CheClusterSpecAuthOutput) IdentityProviderRealm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *string { return v.IdentityProviderRealm }).(pulumi.StringPtrOutput)
}

// Route custom settings
func (o CheClusterSpecAuthOutput) IdentityProviderRoute() CheClusterSpecAuthIdentityProviderRoutePtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *CheClusterSpecAuthIdentityProviderRoute { return v.IdentityProviderRoute }).(CheClusterSpecAuthIdentityProviderRoutePtrOutput)
}

// The secret that contains `user` and `password` for Identity Provider. If the secret is defined then `identityProviderAdminUserName` and `identityProviderPassword` are ignored. If the value is omitted or left blank then there are two scenarios: 1. `identityProviderAdminUserName` and `identityProviderPassword` are defined, then they will be used. 2. `identityProviderAdminUserName` or `identityProviderPassword` are not defined, then a new secret with the name `che-identity-secret` will be created with default value `admin` for `user` and with an auto-generated value for `password`.
func (o CheClusterSpecAuthOutput) IdentityProviderSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *string { return v.IdentityProviderSecret }).(pulumi.StringPtrOutput)
}

// Public URL of the Identity Provider server (Keycloak / RH SSO server). You should set it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). By default this will be automatically calculated and set by the operator.
func (o CheClusterSpecAuthOutput) IdentityProviderURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *string { return v.IdentityProviderURL }).(pulumi.StringPtrOutput)
}

// Name of the OpenShift `OAuthClient` resource used to setup identity federation on the OpenShift side. Auto-generated if left blank. See also the `OpenShiftoAuth` field.
func (o CheClusterSpecAuthOutput) OAuthClientName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *string { return v.OAuthClientName }).(pulumi.StringPtrOutput)
}

// Name of the secret set in the OpenShift `OAuthClient` resource used to setup identity federation on the OpenShift side. Auto-generated if left blank. See also the `OAuthClientName` field.
func (o CheClusterSpecAuthOutput) OAuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *string { return v.OAuthSecret }).(pulumi.StringPtrOutput)
}

// Enables the integration of the identity provider (Keycloak / RHSSO) with OpenShift OAuth. Enabled by default on OpenShift. This will allow users to directly login with their Openshift user through the Openshift login, and have their workspaces created under personal OpenShift namespaces. WARNING: the `kubeadmin` user is NOT supported, and logging through it will NOT allow accessing the Che Dashboard.
func (o CheClusterSpecAuthOutput) OpenShiftoAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *bool { return v.OpenShiftoAuth }).(pulumi.BoolPtrOutput)
}

// Forces the default `admin` Che user to update password on first login. Defaults to `false`.
func (o CheClusterSpecAuthOutput) UpdateAdminPassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuth) *bool { return v.UpdateAdminPassword }).(pulumi.BoolPtrOutput)
}

type CheClusterSpecAuthPtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecAuth)(nil)).Elem()
}

func (o CheClusterSpecAuthPtrOutput) ToCheClusterSpecAuthPtrOutput() CheClusterSpecAuthPtrOutput {
	return o
}

func (o CheClusterSpecAuthPtrOutput) ToCheClusterSpecAuthPtrOutputWithContext(ctx context.Context) CheClusterSpecAuthPtrOutput {
	return o
}

func (o CheClusterSpecAuthPtrOutput) Elem() CheClusterSpecAuthOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) CheClusterSpecAuth { return *v }).(CheClusterSpecAuthOutput)
}

// Instructs the operator on whether or not to deploy a dedicated Identity Provider (Keycloak or RH SSO instance). By default a dedicated Identity Provider server is deployed as part of the Che installation. But if `externalIdentityProvider` is `true`, then no dedicated identity provider will be deployed by the operator and you might need to provide details about the external identity provider you want to use. See also all the other fields starting with: `identityProvider`.
func (o CheClusterSpecAuthPtrOutput) ExternalIdentityProvider() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *bool {
		if v == nil {
			return nil
		}
		return v.ExternalIdentityProvider
	}).(pulumi.BoolPtrOutput)
}

// Overrides the name of the Identity Provider admin user. Defaults to `admin`.
func (o CheClusterSpecAuthPtrOutput) IdentityProviderAdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *string {
		if v == nil {
			return nil
		}
		return v.IdentityProviderAdminUserName
	}).(pulumi.StringPtrOutput)
}

// Name of a Identity provider (Keycloak / RH SSO) `client-id` that should be used for Che. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to the value of the `flavour` field suffixed with `-public`.
func (o CheClusterSpecAuthPtrOutput) IdentityProviderClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *string {
		if v == nil {
			return nil
		}
		return v.IdentityProviderClientId
	}).(pulumi.StringPtrOutput)
}

// Overrides the container image used in the Identity Provider (Keycloak / RH SSO) deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
func (o CheClusterSpecAuthPtrOutput) IdentityProviderImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *string {
		if v == nil {
			return nil
		}
		return v.IdentityProviderImage
	}).(pulumi.StringPtrOutput)
}

// Overrides the image pull policy used in the Identity Provider (Keycloak / RH SSO) deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
func (o CheClusterSpecAuthPtrOutput) IdentityProviderImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *string {
		if v == nil {
			return nil
		}
		return v.IdentityProviderImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Ingress custom settings
func (o CheClusterSpecAuthPtrOutput) IdentityProviderIngress() CheClusterSpecAuthIdentityProviderIngressPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *CheClusterSpecAuthIdentityProviderIngress {
		if v == nil {
			return nil
		}
		return v.IdentityProviderIngress
	}).(CheClusterSpecAuthIdentityProviderIngressPtrOutput)
}

// Overrides the password of Keycloak admin user. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to an auto-generated password.
func (o CheClusterSpecAuthPtrOutput) IdentityProviderPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *string {
		if v == nil {
			return nil
		}
		return v.IdentityProviderPassword
	}).(pulumi.StringPtrOutput)
}

// Password for The Identity Provider (Keycloak / RH SSO) to connect to the database. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to an auto-generated password.
func (o CheClusterSpecAuthPtrOutput) IdentityProviderPostgresPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *string {
		if v == nil {
			return nil
		}
		return v.IdentityProviderPostgresPassword
	}).(pulumi.StringPtrOutput)
}

// The secret that contains `password` for The Identity Provider (Keycloak / RH SSO) to connect to the database. If the secret is defined then `identityProviderPostgresPassword` will be ignored. If the value is omitted or left blank then there are two scenarios: 1. `identityProviderPostgresPassword` is defined, then it will be used to connect to the database. 2. `identityProviderPostgresPassword` is not defined, then a new secret with the name `che-identity-postgres-secret` will be created with an auto-generated value for `password`.
func (o CheClusterSpecAuthPtrOutput) IdentityProviderPostgresSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *string {
		if v == nil {
			return nil
		}
		return v.IdentityProviderPostgresSecret
	}).(pulumi.StringPtrOutput)
}

// Name of a Identity provider (Keycloak / RH SSO) realm that should be used for Che. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to the value of the `flavour` field.
func (o CheClusterSpecAuthPtrOutput) IdentityProviderRealm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *string {
		if v == nil {
			return nil
		}
		return v.IdentityProviderRealm
	}).(pulumi.StringPtrOutput)
}

// Route custom settings
func (o CheClusterSpecAuthPtrOutput) IdentityProviderRoute() CheClusterSpecAuthIdentityProviderRoutePtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *CheClusterSpecAuthIdentityProviderRoute {
		if v == nil {
			return nil
		}
		return v.IdentityProviderRoute
	}).(CheClusterSpecAuthIdentityProviderRoutePtrOutput)
}

// The secret that contains `user` and `password` for Identity Provider. If the secret is defined then `identityProviderAdminUserName` and `identityProviderPassword` are ignored. If the value is omitted or left blank then there are two scenarios: 1. `identityProviderAdminUserName` and `identityProviderPassword` are defined, then they will be used. 2. `identityProviderAdminUserName` or `identityProviderPassword` are not defined, then a new secret with the name `che-identity-secret` will be created with default value `admin` for `user` and with an auto-generated value for `password`.
func (o CheClusterSpecAuthPtrOutput) IdentityProviderSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *string {
		if v == nil {
			return nil
		}
		return v.IdentityProviderSecret
	}).(pulumi.StringPtrOutput)
}

// Public URL of the Identity Provider server (Keycloak / RH SSO server). You should set it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). By default this will be automatically calculated and set by the operator.
func (o CheClusterSpecAuthPtrOutput) IdentityProviderURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *string {
		if v == nil {
			return nil
		}
		return v.IdentityProviderURL
	}).(pulumi.StringPtrOutput)
}

// Name of the OpenShift `OAuthClient` resource used to setup identity federation on the OpenShift side. Auto-generated if left blank. See also the `OpenShiftoAuth` field.
func (o CheClusterSpecAuthPtrOutput) OAuthClientName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *string {
		if v == nil {
			return nil
		}
		return v.OAuthClientName
	}).(pulumi.StringPtrOutput)
}

// Name of the secret set in the OpenShift `OAuthClient` resource used to setup identity federation on the OpenShift side. Auto-generated if left blank. See also the `OAuthClientName` field.
func (o CheClusterSpecAuthPtrOutput) OAuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *string {
		if v == nil {
			return nil
		}
		return v.OAuthSecret
	}).(pulumi.StringPtrOutput)
}

// Enables the integration of the identity provider (Keycloak / RHSSO) with OpenShift OAuth. Enabled by default on OpenShift. This will allow users to directly login with their Openshift user through the Openshift login, and have their workspaces created under personal OpenShift namespaces. WARNING: the `kubeadmin` user is NOT supported, and logging through it will NOT allow accessing the Che Dashboard.
func (o CheClusterSpecAuthPtrOutput) OpenShiftoAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *bool {
		if v == nil {
			return nil
		}
		return v.OpenShiftoAuth
	}).(pulumi.BoolPtrOutput)
}

// Forces the default `admin` Che user to update password on first login. Defaults to `false`.
func (o CheClusterSpecAuthPtrOutput) UpdateAdminPassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuth) *bool {
		if v == nil {
			return nil
		}
		return v.UpdateAdminPassword
	}).(pulumi.BoolPtrOutput)
}

// Ingress custom settings
type CheClusterSpecAuthIdentityProviderIngress struct {
	// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
	Labels *string `pulumi:"labels"`
}

// CheClusterSpecAuthIdentityProviderIngressInput is an input type that accepts CheClusterSpecAuthIdentityProviderIngressArgs and CheClusterSpecAuthIdentityProviderIngressOutput values.
// You can construct a concrete instance of `CheClusterSpecAuthIdentityProviderIngressInput` via:
//
//          CheClusterSpecAuthIdentityProviderIngressArgs{...}
type CheClusterSpecAuthIdentityProviderIngressInput interface {
	pulumi.Input

	ToCheClusterSpecAuthIdentityProviderIngressOutput() CheClusterSpecAuthIdentityProviderIngressOutput
	ToCheClusterSpecAuthIdentityProviderIngressOutputWithContext(context.Context) CheClusterSpecAuthIdentityProviderIngressOutput
}

// Ingress custom settings
type CheClusterSpecAuthIdentityProviderIngressArgs struct {
	// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
	Labels pulumi.StringPtrInput `pulumi:"labels"`
}

func (CheClusterSpecAuthIdentityProviderIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecAuthIdentityProviderIngress)(nil)).Elem()
}

func (i CheClusterSpecAuthIdentityProviderIngressArgs) ToCheClusterSpecAuthIdentityProviderIngressOutput() CheClusterSpecAuthIdentityProviderIngressOutput {
	return i.ToCheClusterSpecAuthIdentityProviderIngressOutputWithContext(context.Background())
}

func (i CheClusterSpecAuthIdentityProviderIngressArgs) ToCheClusterSpecAuthIdentityProviderIngressOutputWithContext(ctx context.Context) CheClusterSpecAuthIdentityProviderIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecAuthIdentityProviderIngressOutput)
}

func (i CheClusterSpecAuthIdentityProviderIngressArgs) ToCheClusterSpecAuthIdentityProviderIngressPtrOutput() CheClusterSpecAuthIdentityProviderIngressPtrOutput {
	return i.ToCheClusterSpecAuthIdentityProviderIngressPtrOutputWithContext(context.Background())
}

func (i CheClusterSpecAuthIdentityProviderIngressArgs) ToCheClusterSpecAuthIdentityProviderIngressPtrOutputWithContext(ctx context.Context) CheClusterSpecAuthIdentityProviderIngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecAuthIdentityProviderIngressOutput).ToCheClusterSpecAuthIdentityProviderIngressPtrOutputWithContext(ctx)
}

// CheClusterSpecAuthIdentityProviderIngressPtrInput is an input type that accepts CheClusterSpecAuthIdentityProviderIngressArgs, CheClusterSpecAuthIdentityProviderIngressPtr and CheClusterSpecAuthIdentityProviderIngressPtrOutput values.
// You can construct a concrete instance of `CheClusterSpecAuthIdentityProviderIngressPtrInput` via:
//
//          CheClusterSpecAuthIdentityProviderIngressArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecAuthIdentityProviderIngressPtrInput interface {
	pulumi.Input

	ToCheClusterSpecAuthIdentityProviderIngressPtrOutput() CheClusterSpecAuthIdentityProviderIngressPtrOutput
	ToCheClusterSpecAuthIdentityProviderIngressPtrOutputWithContext(context.Context) CheClusterSpecAuthIdentityProviderIngressPtrOutput
}

type cheClusterSpecAuthIdentityProviderIngressPtrType CheClusterSpecAuthIdentityProviderIngressArgs

func CheClusterSpecAuthIdentityProviderIngressPtr(v *CheClusterSpecAuthIdentityProviderIngressArgs) CheClusterSpecAuthIdentityProviderIngressPtrInput {
	return (*cheClusterSpecAuthIdentityProviderIngressPtrType)(v)
}

func (*cheClusterSpecAuthIdentityProviderIngressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecAuthIdentityProviderIngress)(nil)).Elem()
}

func (i *cheClusterSpecAuthIdentityProviderIngressPtrType) ToCheClusterSpecAuthIdentityProviderIngressPtrOutput() CheClusterSpecAuthIdentityProviderIngressPtrOutput {
	return i.ToCheClusterSpecAuthIdentityProviderIngressPtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecAuthIdentityProviderIngressPtrType) ToCheClusterSpecAuthIdentityProviderIngressPtrOutputWithContext(ctx context.Context) CheClusterSpecAuthIdentityProviderIngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecAuthIdentityProviderIngressPtrOutput)
}

// Ingress custom settings
type CheClusterSpecAuthIdentityProviderIngressOutput struct{ *pulumi.OutputState }

func (CheClusterSpecAuthIdentityProviderIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecAuthIdentityProviderIngress)(nil)).Elem()
}

func (o CheClusterSpecAuthIdentityProviderIngressOutput) ToCheClusterSpecAuthIdentityProviderIngressOutput() CheClusterSpecAuthIdentityProviderIngressOutput {
	return o
}

func (o CheClusterSpecAuthIdentityProviderIngressOutput) ToCheClusterSpecAuthIdentityProviderIngressOutputWithContext(ctx context.Context) CheClusterSpecAuthIdentityProviderIngressOutput {
	return o
}

func (o CheClusterSpecAuthIdentityProviderIngressOutput) ToCheClusterSpecAuthIdentityProviderIngressPtrOutput() CheClusterSpecAuthIdentityProviderIngressPtrOutput {
	return o.ToCheClusterSpecAuthIdentityProviderIngressPtrOutputWithContext(context.Background())
}

func (o CheClusterSpecAuthIdentityProviderIngressOutput) ToCheClusterSpecAuthIdentityProviderIngressPtrOutputWithContext(ctx context.Context) CheClusterSpecAuthIdentityProviderIngressPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuthIdentityProviderIngress) *CheClusterSpecAuthIdentityProviderIngress {
		return &v
	}).(CheClusterSpecAuthIdentityProviderIngressPtrOutput)
}

// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
func (o CheClusterSpecAuthIdentityProviderIngressOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuthIdentityProviderIngress) *string { return v.Labels }).(pulumi.StringPtrOutput)
}

type CheClusterSpecAuthIdentityProviderIngressPtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecAuthIdentityProviderIngressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecAuthIdentityProviderIngress)(nil)).Elem()
}

func (o CheClusterSpecAuthIdentityProviderIngressPtrOutput) ToCheClusterSpecAuthIdentityProviderIngressPtrOutput() CheClusterSpecAuthIdentityProviderIngressPtrOutput {
	return o
}

func (o CheClusterSpecAuthIdentityProviderIngressPtrOutput) ToCheClusterSpecAuthIdentityProviderIngressPtrOutputWithContext(ctx context.Context) CheClusterSpecAuthIdentityProviderIngressPtrOutput {
	return o
}

func (o CheClusterSpecAuthIdentityProviderIngressPtrOutput) Elem() CheClusterSpecAuthIdentityProviderIngressOutput {
	return o.ApplyT(func(v *CheClusterSpecAuthIdentityProviderIngress) CheClusterSpecAuthIdentityProviderIngress {
		return *v
	}).(CheClusterSpecAuthIdentityProviderIngressOutput)
}

// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
func (o CheClusterSpecAuthIdentityProviderIngressPtrOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuthIdentityProviderIngress) *string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringPtrOutput)
}

// Route custom settings
type CheClusterSpecAuthIdentityProviderRoute struct {
	// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
	Labels *string `pulumi:"labels"`
}

// CheClusterSpecAuthIdentityProviderRouteInput is an input type that accepts CheClusterSpecAuthIdentityProviderRouteArgs and CheClusterSpecAuthIdentityProviderRouteOutput values.
// You can construct a concrete instance of `CheClusterSpecAuthIdentityProviderRouteInput` via:
//
//          CheClusterSpecAuthIdentityProviderRouteArgs{...}
type CheClusterSpecAuthIdentityProviderRouteInput interface {
	pulumi.Input

	ToCheClusterSpecAuthIdentityProviderRouteOutput() CheClusterSpecAuthIdentityProviderRouteOutput
	ToCheClusterSpecAuthIdentityProviderRouteOutputWithContext(context.Context) CheClusterSpecAuthIdentityProviderRouteOutput
}

// Route custom settings
type CheClusterSpecAuthIdentityProviderRouteArgs struct {
	// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
	Labels pulumi.StringPtrInput `pulumi:"labels"`
}

func (CheClusterSpecAuthIdentityProviderRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecAuthIdentityProviderRoute)(nil)).Elem()
}

func (i CheClusterSpecAuthIdentityProviderRouteArgs) ToCheClusterSpecAuthIdentityProviderRouteOutput() CheClusterSpecAuthIdentityProviderRouteOutput {
	return i.ToCheClusterSpecAuthIdentityProviderRouteOutputWithContext(context.Background())
}

func (i CheClusterSpecAuthIdentityProviderRouteArgs) ToCheClusterSpecAuthIdentityProviderRouteOutputWithContext(ctx context.Context) CheClusterSpecAuthIdentityProviderRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecAuthIdentityProviderRouteOutput)
}

func (i CheClusterSpecAuthIdentityProviderRouteArgs) ToCheClusterSpecAuthIdentityProviderRoutePtrOutput() CheClusterSpecAuthIdentityProviderRoutePtrOutput {
	return i.ToCheClusterSpecAuthIdentityProviderRoutePtrOutputWithContext(context.Background())
}

func (i CheClusterSpecAuthIdentityProviderRouteArgs) ToCheClusterSpecAuthIdentityProviderRoutePtrOutputWithContext(ctx context.Context) CheClusterSpecAuthIdentityProviderRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecAuthIdentityProviderRouteOutput).ToCheClusterSpecAuthIdentityProviderRoutePtrOutputWithContext(ctx)
}

// CheClusterSpecAuthIdentityProviderRoutePtrInput is an input type that accepts CheClusterSpecAuthIdentityProviderRouteArgs, CheClusterSpecAuthIdentityProviderRoutePtr and CheClusterSpecAuthIdentityProviderRoutePtrOutput values.
// You can construct a concrete instance of `CheClusterSpecAuthIdentityProviderRoutePtrInput` via:
//
//          CheClusterSpecAuthIdentityProviderRouteArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecAuthIdentityProviderRoutePtrInput interface {
	pulumi.Input

	ToCheClusterSpecAuthIdentityProviderRoutePtrOutput() CheClusterSpecAuthIdentityProviderRoutePtrOutput
	ToCheClusterSpecAuthIdentityProviderRoutePtrOutputWithContext(context.Context) CheClusterSpecAuthIdentityProviderRoutePtrOutput
}

type cheClusterSpecAuthIdentityProviderRoutePtrType CheClusterSpecAuthIdentityProviderRouteArgs

func CheClusterSpecAuthIdentityProviderRoutePtr(v *CheClusterSpecAuthIdentityProviderRouteArgs) CheClusterSpecAuthIdentityProviderRoutePtrInput {
	return (*cheClusterSpecAuthIdentityProviderRoutePtrType)(v)
}

func (*cheClusterSpecAuthIdentityProviderRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecAuthIdentityProviderRoute)(nil)).Elem()
}

func (i *cheClusterSpecAuthIdentityProviderRoutePtrType) ToCheClusterSpecAuthIdentityProviderRoutePtrOutput() CheClusterSpecAuthIdentityProviderRoutePtrOutput {
	return i.ToCheClusterSpecAuthIdentityProviderRoutePtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecAuthIdentityProviderRoutePtrType) ToCheClusterSpecAuthIdentityProviderRoutePtrOutputWithContext(ctx context.Context) CheClusterSpecAuthIdentityProviderRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecAuthIdentityProviderRoutePtrOutput)
}

// Route custom settings
type CheClusterSpecAuthIdentityProviderRouteOutput struct{ *pulumi.OutputState }

func (CheClusterSpecAuthIdentityProviderRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecAuthIdentityProviderRoute)(nil)).Elem()
}

func (o CheClusterSpecAuthIdentityProviderRouteOutput) ToCheClusterSpecAuthIdentityProviderRouteOutput() CheClusterSpecAuthIdentityProviderRouteOutput {
	return o
}

func (o CheClusterSpecAuthIdentityProviderRouteOutput) ToCheClusterSpecAuthIdentityProviderRouteOutputWithContext(ctx context.Context) CheClusterSpecAuthIdentityProviderRouteOutput {
	return o
}

func (o CheClusterSpecAuthIdentityProviderRouteOutput) ToCheClusterSpecAuthIdentityProviderRoutePtrOutput() CheClusterSpecAuthIdentityProviderRoutePtrOutput {
	return o.ToCheClusterSpecAuthIdentityProviderRoutePtrOutputWithContext(context.Background())
}

func (o CheClusterSpecAuthIdentityProviderRouteOutput) ToCheClusterSpecAuthIdentityProviderRoutePtrOutputWithContext(ctx context.Context) CheClusterSpecAuthIdentityProviderRoutePtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuthIdentityProviderRoute) *CheClusterSpecAuthIdentityProviderRoute {
		return &v
	}).(CheClusterSpecAuthIdentityProviderRoutePtrOutput)
}

// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
func (o CheClusterSpecAuthIdentityProviderRouteOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecAuthIdentityProviderRoute) *string { return v.Labels }).(pulumi.StringPtrOutput)
}

type CheClusterSpecAuthIdentityProviderRoutePtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecAuthIdentityProviderRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecAuthIdentityProviderRoute)(nil)).Elem()
}

func (o CheClusterSpecAuthIdentityProviderRoutePtrOutput) ToCheClusterSpecAuthIdentityProviderRoutePtrOutput() CheClusterSpecAuthIdentityProviderRoutePtrOutput {
	return o
}

func (o CheClusterSpecAuthIdentityProviderRoutePtrOutput) ToCheClusterSpecAuthIdentityProviderRoutePtrOutputWithContext(ctx context.Context) CheClusterSpecAuthIdentityProviderRoutePtrOutput {
	return o
}

func (o CheClusterSpecAuthIdentityProviderRoutePtrOutput) Elem() CheClusterSpecAuthIdentityProviderRouteOutput {
	return o.ApplyT(func(v *CheClusterSpecAuthIdentityProviderRoute) CheClusterSpecAuthIdentityProviderRoute { return *v }).(CheClusterSpecAuthIdentityProviderRouteOutput)
}

// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
func (o CheClusterSpecAuthIdentityProviderRoutePtrOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecAuthIdentityProviderRoute) *string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringPtrOutput)
}

// Configuration settings related to the database used by the Che installation.
type CheClusterSpecDatabase struct {
	// Postgres database name that the Che server uses to connect to the DB. Defaults to `dbche`.
	ChePostgresDb *string `pulumi:"chePostgresDb"`
	// Postgres Database hostname that the Che server uses to connect to. Defaults to postgres. This value should be overridden ONLY when using an external database (see field `externalDb`). In the default case it will be automatically set by the operator.
	ChePostgresHostName *string `pulumi:"chePostgresHostName"`
	// Postgres password that the Che server should use to connect to the DB. If omitted or left blank, it will be set to an auto-generated value.
	ChePostgresPassword *string `pulumi:"chePostgresPassword"`
	// Postgres Database port that the Che server uses to connect to. Defaults to 5432. This value should be overridden ONLY when using an external database (see field `externalDb`). In the default case it will be automatically set by the operator.
	ChePostgresPort *string `pulumi:"chePostgresPort"`
	// The secret that contains Postgres `user` and `password` that the Che server should use to connect to the DB. If the secret is defined then `chePostgresUser` and `chePostgresPassword` are ignored. If the value is omitted or left blank then there are two scenarios: 1. `chePostgresUser` and `chePostgresPassword` are defined, then they will be used to connect to the DB. 2. `chePostgresUser` or `chePostgresPassword` are not defined, then a new secret with the name `che-postgres-secret` will be created with default value of `pgche` for `user` and with an auto-generated value for `password`.
	ChePostgresSecret *string `pulumi:"chePostgresSecret"`
	// Postgres user that the Che server should use to connect to the DB. Defaults to `pgche`.
	ChePostgresUser *string `pulumi:"chePostgresUser"`
	// Instructs the operator on whether or not to deploy a dedicated database. By default a dedicated Postgres database is deployed as part of the Che installation. But if `externalDb` is `true`, then no dedicated database will be deployed by the operator and you might need to provide connection details to the external DB you want to use. See also all the fields starting with: `chePostgres`.
	ExternalDb *bool `pulumi:"externalDb"`
	// Overrides the container image used in the Postgres database deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
	PostgresImage *string `pulumi:"postgresImage"`
	// Overrides the image pull policy used in the Postgres database deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
	PostgresImagePullPolicy *string `pulumi:"postgresImagePullPolicy"`
}

// CheClusterSpecDatabaseInput is an input type that accepts CheClusterSpecDatabaseArgs and CheClusterSpecDatabaseOutput values.
// You can construct a concrete instance of `CheClusterSpecDatabaseInput` via:
//
//          CheClusterSpecDatabaseArgs{...}
type CheClusterSpecDatabaseInput interface {
	pulumi.Input

	ToCheClusterSpecDatabaseOutput() CheClusterSpecDatabaseOutput
	ToCheClusterSpecDatabaseOutputWithContext(context.Context) CheClusterSpecDatabaseOutput
}

// Configuration settings related to the database used by the Che installation.
type CheClusterSpecDatabaseArgs struct {
	// Postgres database name that the Che server uses to connect to the DB. Defaults to `dbche`.
	ChePostgresDb pulumi.StringPtrInput `pulumi:"chePostgresDb"`
	// Postgres Database hostname that the Che server uses to connect to. Defaults to postgres. This value should be overridden ONLY when using an external database (see field `externalDb`). In the default case it will be automatically set by the operator.
	ChePostgresHostName pulumi.StringPtrInput `pulumi:"chePostgresHostName"`
	// Postgres password that the Che server should use to connect to the DB. If omitted or left blank, it will be set to an auto-generated value.
	ChePostgresPassword pulumi.StringPtrInput `pulumi:"chePostgresPassword"`
	// Postgres Database port that the Che server uses to connect to. Defaults to 5432. This value should be overridden ONLY when using an external database (see field `externalDb`). In the default case it will be automatically set by the operator.
	ChePostgresPort pulumi.StringPtrInput `pulumi:"chePostgresPort"`
	// The secret that contains Postgres `user` and `password` that the Che server should use to connect to the DB. If the secret is defined then `chePostgresUser` and `chePostgresPassword` are ignored. If the value is omitted or left blank then there are two scenarios: 1. `chePostgresUser` and `chePostgresPassword` are defined, then they will be used to connect to the DB. 2. `chePostgresUser` or `chePostgresPassword` are not defined, then a new secret with the name `che-postgres-secret` will be created with default value of `pgche` for `user` and with an auto-generated value for `password`.
	ChePostgresSecret pulumi.StringPtrInput `pulumi:"chePostgresSecret"`
	// Postgres user that the Che server should use to connect to the DB. Defaults to `pgche`.
	ChePostgresUser pulumi.StringPtrInput `pulumi:"chePostgresUser"`
	// Instructs the operator on whether or not to deploy a dedicated database. By default a dedicated Postgres database is deployed as part of the Che installation. But if `externalDb` is `true`, then no dedicated database will be deployed by the operator and you might need to provide connection details to the external DB you want to use. See also all the fields starting with: `chePostgres`.
	ExternalDb pulumi.BoolPtrInput `pulumi:"externalDb"`
	// Overrides the container image used in the Postgres database deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
	PostgresImage pulumi.StringPtrInput `pulumi:"postgresImage"`
	// Overrides the image pull policy used in the Postgres database deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
	PostgresImagePullPolicy pulumi.StringPtrInput `pulumi:"postgresImagePullPolicy"`
}

func (CheClusterSpecDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecDatabase)(nil)).Elem()
}

func (i CheClusterSpecDatabaseArgs) ToCheClusterSpecDatabaseOutput() CheClusterSpecDatabaseOutput {
	return i.ToCheClusterSpecDatabaseOutputWithContext(context.Background())
}

func (i CheClusterSpecDatabaseArgs) ToCheClusterSpecDatabaseOutputWithContext(ctx context.Context) CheClusterSpecDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecDatabaseOutput)
}

func (i CheClusterSpecDatabaseArgs) ToCheClusterSpecDatabasePtrOutput() CheClusterSpecDatabasePtrOutput {
	return i.ToCheClusterSpecDatabasePtrOutputWithContext(context.Background())
}

func (i CheClusterSpecDatabaseArgs) ToCheClusterSpecDatabasePtrOutputWithContext(ctx context.Context) CheClusterSpecDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecDatabaseOutput).ToCheClusterSpecDatabasePtrOutputWithContext(ctx)
}

// CheClusterSpecDatabasePtrInput is an input type that accepts CheClusterSpecDatabaseArgs, CheClusterSpecDatabasePtr and CheClusterSpecDatabasePtrOutput values.
// You can construct a concrete instance of `CheClusterSpecDatabasePtrInput` via:
//
//          CheClusterSpecDatabaseArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecDatabasePtrInput interface {
	pulumi.Input

	ToCheClusterSpecDatabasePtrOutput() CheClusterSpecDatabasePtrOutput
	ToCheClusterSpecDatabasePtrOutputWithContext(context.Context) CheClusterSpecDatabasePtrOutput
}

type cheClusterSpecDatabasePtrType CheClusterSpecDatabaseArgs

func CheClusterSpecDatabasePtr(v *CheClusterSpecDatabaseArgs) CheClusterSpecDatabasePtrInput {
	return (*cheClusterSpecDatabasePtrType)(v)
}

func (*cheClusterSpecDatabasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecDatabase)(nil)).Elem()
}

func (i *cheClusterSpecDatabasePtrType) ToCheClusterSpecDatabasePtrOutput() CheClusterSpecDatabasePtrOutput {
	return i.ToCheClusterSpecDatabasePtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecDatabasePtrType) ToCheClusterSpecDatabasePtrOutputWithContext(ctx context.Context) CheClusterSpecDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecDatabasePtrOutput)
}

// Configuration settings related to the database used by the Che installation.
type CheClusterSpecDatabaseOutput struct{ *pulumi.OutputState }

func (CheClusterSpecDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecDatabase)(nil)).Elem()
}

func (o CheClusterSpecDatabaseOutput) ToCheClusterSpecDatabaseOutput() CheClusterSpecDatabaseOutput {
	return o
}

func (o CheClusterSpecDatabaseOutput) ToCheClusterSpecDatabaseOutputWithContext(ctx context.Context) CheClusterSpecDatabaseOutput {
	return o
}

func (o CheClusterSpecDatabaseOutput) ToCheClusterSpecDatabasePtrOutput() CheClusterSpecDatabasePtrOutput {
	return o.ToCheClusterSpecDatabasePtrOutputWithContext(context.Background())
}

func (o CheClusterSpecDatabaseOutput) ToCheClusterSpecDatabasePtrOutputWithContext(ctx context.Context) CheClusterSpecDatabasePtrOutput {
	return o.ApplyT(func(v CheClusterSpecDatabase) *CheClusterSpecDatabase {
		return &v
	}).(CheClusterSpecDatabasePtrOutput)
}

// Postgres database name that the Che server uses to connect to the DB. Defaults to `dbche`.
func (o CheClusterSpecDatabaseOutput) ChePostgresDb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecDatabase) *string { return v.ChePostgresDb }).(pulumi.StringPtrOutput)
}

// Postgres Database hostname that the Che server uses to connect to. Defaults to postgres. This value should be overridden ONLY when using an external database (see field `externalDb`). In the default case it will be automatically set by the operator.
func (o CheClusterSpecDatabaseOutput) ChePostgresHostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecDatabase) *string { return v.ChePostgresHostName }).(pulumi.StringPtrOutput)
}

// Postgres password that the Che server should use to connect to the DB. If omitted or left blank, it will be set to an auto-generated value.
func (o CheClusterSpecDatabaseOutput) ChePostgresPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecDatabase) *string { return v.ChePostgresPassword }).(pulumi.StringPtrOutput)
}

// Postgres Database port that the Che server uses to connect to. Defaults to 5432. This value should be overridden ONLY when using an external database (see field `externalDb`). In the default case it will be automatically set by the operator.
func (o CheClusterSpecDatabaseOutput) ChePostgresPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecDatabase) *string { return v.ChePostgresPort }).(pulumi.StringPtrOutput)
}

// The secret that contains Postgres `user` and `password` that the Che server should use to connect to the DB. If the secret is defined then `chePostgresUser` and `chePostgresPassword` are ignored. If the value is omitted or left blank then there are two scenarios: 1. `chePostgresUser` and `chePostgresPassword` are defined, then they will be used to connect to the DB. 2. `chePostgresUser` or `chePostgresPassword` are not defined, then a new secret with the name `che-postgres-secret` will be created with default value of `pgche` for `user` and with an auto-generated value for `password`.
func (o CheClusterSpecDatabaseOutput) ChePostgresSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecDatabase) *string { return v.ChePostgresSecret }).(pulumi.StringPtrOutput)
}

// Postgres user that the Che server should use to connect to the DB. Defaults to `pgche`.
func (o CheClusterSpecDatabaseOutput) ChePostgresUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecDatabase) *string { return v.ChePostgresUser }).(pulumi.StringPtrOutput)
}

// Instructs the operator on whether or not to deploy a dedicated database. By default a dedicated Postgres database is deployed as part of the Che installation. But if `externalDb` is `true`, then no dedicated database will be deployed by the operator and you might need to provide connection details to the external DB you want to use. See also all the fields starting with: `chePostgres`.
func (o CheClusterSpecDatabaseOutput) ExternalDb() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterSpecDatabase) *bool { return v.ExternalDb }).(pulumi.BoolPtrOutput)
}

// Overrides the container image used in the Postgres database deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
func (o CheClusterSpecDatabaseOutput) PostgresImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecDatabase) *string { return v.PostgresImage }).(pulumi.StringPtrOutput)
}

// Overrides the image pull policy used in the Postgres database deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
func (o CheClusterSpecDatabaseOutput) PostgresImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecDatabase) *string { return v.PostgresImagePullPolicy }).(pulumi.StringPtrOutput)
}

type CheClusterSpecDatabasePtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecDatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecDatabase)(nil)).Elem()
}

func (o CheClusterSpecDatabasePtrOutput) ToCheClusterSpecDatabasePtrOutput() CheClusterSpecDatabasePtrOutput {
	return o
}

func (o CheClusterSpecDatabasePtrOutput) ToCheClusterSpecDatabasePtrOutputWithContext(ctx context.Context) CheClusterSpecDatabasePtrOutput {
	return o
}

func (o CheClusterSpecDatabasePtrOutput) Elem() CheClusterSpecDatabaseOutput {
	return o.ApplyT(func(v *CheClusterSpecDatabase) CheClusterSpecDatabase { return *v }).(CheClusterSpecDatabaseOutput)
}

// Postgres database name that the Che server uses to connect to the DB. Defaults to `dbche`.
func (o CheClusterSpecDatabasePtrOutput) ChePostgresDb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return v.ChePostgresDb
	}).(pulumi.StringPtrOutput)
}

// Postgres Database hostname that the Che server uses to connect to. Defaults to postgres. This value should be overridden ONLY when using an external database (see field `externalDb`). In the default case it will be automatically set by the operator.
func (o CheClusterSpecDatabasePtrOutput) ChePostgresHostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return v.ChePostgresHostName
	}).(pulumi.StringPtrOutput)
}

// Postgres password that the Che server should use to connect to the DB. If omitted or left blank, it will be set to an auto-generated value.
func (o CheClusterSpecDatabasePtrOutput) ChePostgresPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return v.ChePostgresPassword
	}).(pulumi.StringPtrOutput)
}

// Postgres Database port that the Che server uses to connect to. Defaults to 5432. This value should be overridden ONLY when using an external database (see field `externalDb`). In the default case it will be automatically set by the operator.
func (o CheClusterSpecDatabasePtrOutput) ChePostgresPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return v.ChePostgresPort
	}).(pulumi.StringPtrOutput)
}

// The secret that contains Postgres `user` and `password` that the Che server should use to connect to the DB. If the secret is defined then `chePostgresUser` and `chePostgresPassword` are ignored. If the value is omitted or left blank then there are two scenarios: 1. `chePostgresUser` and `chePostgresPassword` are defined, then they will be used to connect to the DB. 2. `chePostgresUser` or `chePostgresPassword` are not defined, then a new secret with the name `che-postgres-secret` will be created with default value of `pgche` for `user` and with an auto-generated value for `password`.
func (o CheClusterSpecDatabasePtrOutput) ChePostgresSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return v.ChePostgresSecret
	}).(pulumi.StringPtrOutput)
}

// Postgres user that the Che server should use to connect to the DB. Defaults to `pgche`.
func (o CheClusterSpecDatabasePtrOutput) ChePostgresUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return v.ChePostgresUser
	}).(pulumi.StringPtrOutput)
}

// Instructs the operator on whether or not to deploy a dedicated database. By default a dedicated Postgres database is deployed as part of the Che installation. But if `externalDb` is `true`, then no dedicated database will be deployed by the operator and you might need to provide connection details to the external DB you want to use. See also all the fields starting with: `chePostgres`.
func (o CheClusterSpecDatabasePtrOutput) ExternalDb() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecDatabase) *bool {
		if v == nil {
			return nil
		}
		return v.ExternalDb
	}).(pulumi.BoolPtrOutput)
}

// Overrides the container image used in the Postgres database deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
func (o CheClusterSpecDatabasePtrOutput) PostgresImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return v.PostgresImage
	}).(pulumi.StringPtrOutput)
}

// Overrides the image pull policy used in the Postgres database deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
func (o CheClusterSpecDatabasePtrOutput) PostgresImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return v.PostgresImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Kubernetes Image Puller configuration
type CheClusterSpecImagePuller struct {
	// Install and configure the Kubernetes Image Puller Operator. If true and no spec is provided, it will create a default KubernetesImagePuller object to be managed by the Operator. If false, the KubernetesImagePuller object will be deleted, and the operator will be uninstalled, regardless of whether or not a spec is provided.
	Enable *bool `pulumi:"enable"`
	// A KubernetesImagePullerSpec to configure the image puller in the CheCluster
	Spec *CheClusterSpecImagePullerSpec `pulumi:"spec"`
}

// CheClusterSpecImagePullerInput is an input type that accepts CheClusterSpecImagePullerArgs and CheClusterSpecImagePullerOutput values.
// You can construct a concrete instance of `CheClusterSpecImagePullerInput` via:
//
//          CheClusterSpecImagePullerArgs{...}
type CheClusterSpecImagePullerInput interface {
	pulumi.Input

	ToCheClusterSpecImagePullerOutput() CheClusterSpecImagePullerOutput
	ToCheClusterSpecImagePullerOutputWithContext(context.Context) CheClusterSpecImagePullerOutput
}

// Kubernetes Image Puller configuration
type CheClusterSpecImagePullerArgs struct {
	// Install and configure the Kubernetes Image Puller Operator. If true and no spec is provided, it will create a default KubernetesImagePuller object to be managed by the Operator. If false, the KubernetesImagePuller object will be deleted, and the operator will be uninstalled, regardless of whether or not a spec is provided.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// A KubernetesImagePullerSpec to configure the image puller in the CheCluster
	Spec CheClusterSpecImagePullerSpecPtrInput `pulumi:"spec"`
}

func (CheClusterSpecImagePullerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecImagePuller)(nil)).Elem()
}

func (i CheClusterSpecImagePullerArgs) ToCheClusterSpecImagePullerOutput() CheClusterSpecImagePullerOutput {
	return i.ToCheClusterSpecImagePullerOutputWithContext(context.Background())
}

func (i CheClusterSpecImagePullerArgs) ToCheClusterSpecImagePullerOutputWithContext(ctx context.Context) CheClusterSpecImagePullerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecImagePullerOutput)
}

func (i CheClusterSpecImagePullerArgs) ToCheClusterSpecImagePullerPtrOutput() CheClusterSpecImagePullerPtrOutput {
	return i.ToCheClusterSpecImagePullerPtrOutputWithContext(context.Background())
}

func (i CheClusterSpecImagePullerArgs) ToCheClusterSpecImagePullerPtrOutputWithContext(ctx context.Context) CheClusterSpecImagePullerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecImagePullerOutput).ToCheClusterSpecImagePullerPtrOutputWithContext(ctx)
}

// CheClusterSpecImagePullerPtrInput is an input type that accepts CheClusterSpecImagePullerArgs, CheClusterSpecImagePullerPtr and CheClusterSpecImagePullerPtrOutput values.
// You can construct a concrete instance of `CheClusterSpecImagePullerPtrInput` via:
//
//          CheClusterSpecImagePullerArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecImagePullerPtrInput interface {
	pulumi.Input

	ToCheClusterSpecImagePullerPtrOutput() CheClusterSpecImagePullerPtrOutput
	ToCheClusterSpecImagePullerPtrOutputWithContext(context.Context) CheClusterSpecImagePullerPtrOutput
}

type cheClusterSpecImagePullerPtrType CheClusterSpecImagePullerArgs

func CheClusterSpecImagePullerPtr(v *CheClusterSpecImagePullerArgs) CheClusterSpecImagePullerPtrInput {
	return (*cheClusterSpecImagePullerPtrType)(v)
}

func (*cheClusterSpecImagePullerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecImagePuller)(nil)).Elem()
}

func (i *cheClusterSpecImagePullerPtrType) ToCheClusterSpecImagePullerPtrOutput() CheClusterSpecImagePullerPtrOutput {
	return i.ToCheClusterSpecImagePullerPtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecImagePullerPtrType) ToCheClusterSpecImagePullerPtrOutputWithContext(ctx context.Context) CheClusterSpecImagePullerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecImagePullerPtrOutput)
}

// Kubernetes Image Puller configuration
type CheClusterSpecImagePullerOutput struct{ *pulumi.OutputState }

func (CheClusterSpecImagePullerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecImagePuller)(nil)).Elem()
}

func (o CheClusterSpecImagePullerOutput) ToCheClusterSpecImagePullerOutput() CheClusterSpecImagePullerOutput {
	return o
}

func (o CheClusterSpecImagePullerOutput) ToCheClusterSpecImagePullerOutputWithContext(ctx context.Context) CheClusterSpecImagePullerOutput {
	return o
}

func (o CheClusterSpecImagePullerOutput) ToCheClusterSpecImagePullerPtrOutput() CheClusterSpecImagePullerPtrOutput {
	return o.ToCheClusterSpecImagePullerPtrOutputWithContext(context.Background())
}

func (o CheClusterSpecImagePullerOutput) ToCheClusterSpecImagePullerPtrOutputWithContext(ctx context.Context) CheClusterSpecImagePullerPtrOutput {
	return o.ApplyT(func(v CheClusterSpecImagePuller) *CheClusterSpecImagePuller {
		return &v
	}).(CheClusterSpecImagePullerPtrOutput)
}

// Install and configure the Kubernetes Image Puller Operator. If true and no spec is provided, it will create a default KubernetesImagePuller object to be managed by the Operator. If false, the KubernetesImagePuller object will be deleted, and the operator will be uninstalled, regardless of whether or not a spec is provided.
func (o CheClusterSpecImagePullerOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterSpecImagePuller) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// A KubernetesImagePullerSpec to configure the image puller in the CheCluster
func (o CheClusterSpecImagePullerOutput) Spec() CheClusterSpecImagePullerSpecPtrOutput {
	return o.ApplyT(func(v CheClusterSpecImagePuller) *CheClusterSpecImagePullerSpec { return v.Spec }).(CheClusterSpecImagePullerSpecPtrOutput)
}

type CheClusterSpecImagePullerPtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecImagePullerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecImagePuller)(nil)).Elem()
}

func (o CheClusterSpecImagePullerPtrOutput) ToCheClusterSpecImagePullerPtrOutput() CheClusterSpecImagePullerPtrOutput {
	return o
}

func (o CheClusterSpecImagePullerPtrOutput) ToCheClusterSpecImagePullerPtrOutputWithContext(ctx context.Context) CheClusterSpecImagePullerPtrOutput {
	return o
}

func (o CheClusterSpecImagePullerPtrOutput) Elem() CheClusterSpecImagePullerOutput {
	return o.ApplyT(func(v *CheClusterSpecImagePuller) CheClusterSpecImagePuller { return *v }).(CheClusterSpecImagePullerOutput)
}

// Install and configure the Kubernetes Image Puller Operator. If true and no spec is provided, it will create a default KubernetesImagePuller object to be managed by the Operator. If false, the KubernetesImagePuller object will be deleted, and the operator will be uninstalled, regardless of whether or not a spec is provided.
func (o CheClusterSpecImagePullerPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecImagePuller) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// A KubernetesImagePullerSpec to configure the image puller in the CheCluster
func (o CheClusterSpecImagePullerPtrOutput) Spec() CheClusterSpecImagePullerSpecPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecImagePuller) *CheClusterSpecImagePullerSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(CheClusterSpecImagePullerSpecPtrOutput)
}

// A KubernetesImagePullerSpec to configure the image puller in the CheCluster
type CheClusterSpecImagePullerSpec struct {
	CachingCPULimit      *string `pulumi:"cachingCPULimit"`
	CachingCPURequest    *string `pulumi:"cachingCPURequest"`
	CachingIntervalHours *string `pulumi:"cachingIntervalHours"`
	CachingMemoryLimit   *string `pulumi:"cachingMemoryLimit"`
	CachingMemoryRequest *string `pulumi:"cachingMemoryRequest"`
	ConfigMapName        *string `pulumi:"configMapName"`
	DaemonsetName        *string `pulumi:"daemonsetName"`
	DeploymentName       *string `pulumi:"deploymentName"`
	Images               *string `pulumi:"images"`
	NodeSelector         *string `pulumi:"nodeSelector"`
}

// CheClusterSpecImagePullerSpecInput is an input type that accepts CheClusterSpecImagePullerSpecArgs and CheClusterSpecImagePullerSpecOutput values.
// You can construct a concrete instance of `CheClusterSpecImagePullerSpecInput` via:
//
//          CheClusterSpecImagePullerSpecArgs{...}
type CheClusterSpecImagePullerSpecInput interface {
	pulumi.Input

	ToCheClusterSpecImagePullerSpecOutput() CheClusterSpecImagePullerSpecOutput
	ToCheClusterSpecImagePullerSpecOutputWithContext(context.Context) CheClusterSpecImagePullerSpecOutput
}

// A KubernetesImagePullerSpec to configure the image puller in the CheCluster
type CheClusterSpecImagePullerSpecArgs struct {
	CachingCPULimit      pulumi.StringPtrInput `pulumi:"cachingCPULimit"`
	CachingCPURequest    pulumi.StringPtrInput `pulumi:"cachingCPURequest"`
	CachingIntervalHours pulumi.StringPtrInput `pulumi:"cachingIntervalHours"`
	CachingMemoryLimit   pulumi.StringPtrInput `pulumi:"cachingMemoryLimit"`
	CachingMemoryRequest pulumi.StringPtrInput `pulumi:"cachingMemoryRequest"`
	ConfigMapName        pulumi.StringPtrInput `pulumi:"configMapName"`
	DaemonsetName        pulumi.StringPtrInput `pulumi:"daemonsetName"`
	DeploymentName       pulumi.StringPtrInput `pulumi:"deploymentName"`
	Images               pulumi.StringPtrInput `pulumi:"images"`
	NodeSelector         pulumi.StringPtrInput `pulumi:"nodeSelector"`
}

func (CheClusterSpecImagePullerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecImagePullerSpec)(nil)).Elem()
}

func (i CheClusterSpecImagePullerSpecArgs) ToCheClusterSpecImagePullerSpecOutput() CheClusterSpecImagePullerSpecOutput {
	return i.ToCheClusterSpecImagePullerSpecOutputWithContext(context.Background())
}

func (i CheClusterSpecImagePullerSpecArgs) ToCheClusterSpecImagePullerSpecOutputWithContext(ctx context.Context) CheClusterSpecImagePullerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecImagePullerSpecOutput)
}

func (i CheClusterSpecImagePullerSpecArgs) ToCheClusterSpecImagePullerSpecPtrOutput() CheClusterSpecImagePullerSpecPtrOutput {
	return i.ToCheClusterSpecImagePullerSpecPtrOutputWithContext(context.Background())
}

func (i CheClusterSpecImagePullerSpecArgs) ToCheClusterSpecImagePullerSpecPtrOutputWithContext(ctx context.Context) CheClusterSpecImagePullerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecImagePullerSpecOutput).ToCheClusterSpecImagePullerSpecPtrOutputWithContext(ctx)
}

// CheClusterSpecImagePullerSpecPtrInput is an input type that accepts CheClusterSpecImagePullerSpecArgs, CheClusterSpecImagePullerSpecPtr and CheClusterSpecImagePullerSpecPtrOutput values.
// You can construct a concrete instance of `CheClusterSpecImagePullerSpecPtrInput` via:
//
//          CheClusterSpecImagePullerSpecArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecImagePullerSpecPtrInput interface {
	pulumi.Input

	ToCheClusterSpecImagePullerSpecPtrOutput() CheClusterSpecImagePullerSpecPtrOutput
	ToCheClusterSpecImagePullerSpecPtrOutputWithContext(context.Context) CheClusterSpecImagePullerSpecPtrOutput
}

type cheClusterSpecImagePullerSpecPtrType CheClusterSpecImagePullerSpecArgs

func CheClusterSpecImagePullerSpecPtr(v *CheClusterSpecImagePullerSpecArgs) CheClusterSpecImagePullerSpecPtrInput {
	return (*cheClusterSpecImagePullerSpecPtrType)(v)
}

func (*cheClusterSpecImagePullerSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecImagePullerSpec)(nil)).Elem()
}

func (i *cheClusterSpecImagePullerSpecPtrType) ToCheClusterSpecImagePullerSpecPtrOutput() CheClusterSpecImagePullerSpecPtrOutput {
	return i.ToCheClusterSpecImagePullerSpecPtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecImagePullerSpecPtrType) ToCheClusterSpecImagePullerSpecPtrOutputWithContext(ctx context.Context) CheClusterSpecImagePullerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecImagePullerSpecPtrOutput)
}

// A KubernetesImagePullerSpec to configure the image puller in the CheCluster
type CheClusterSpecImagePullerSpecOutput struct{ *pulumi.OutputState }

func (CheClusterSpecImagePullerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecImagePullerSpec)(nil)).Elem()
}

func (o CheClusterSpecImagePullerSpecOutput) ToCheClusterSpecImagePullerSpecOutput() CheClusterSpecImagePullerSpecOutput {
	return o
}

func (o CheClusterSpecImagePullerSpecOutput) ToCheClusterSpecImagePullerSpecOutputWithContext(ctx context.Context) CheClusterSpecImagePullerSpecOutput {
	return o
}

func (o CheClusterSpecImagePullerSpecOutput) ToCheClusterSpecImagePullerSpecPtrOutput() CheClusterSpecImagePullerSpecPtrOutput {
	return o.ToCheClusterSpecImagePullerSpecPtrOutputWithContext(context.Background())
}

func (o CheClusterSpecImagePullerSpecOutput) ToCheClusterSpecImagePullerSpecPtrOutputWithContext(ctx context.Context) CheClusterSpecImagePullerSpecPtrOutput {
	return o.ApplyT(func(v CheClusterSpecImagePullerSpec) *CheClusterSpecImagePullerSpec {
		return &v
	}).(CheClusterSpecImagePullerSpecPtrOutput)
}
func (o CheClusterSpecImagePullerSpecOutput) CachingCPULimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecImagePullerSpec) *string { return v.CachingCPULimit }).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecOutput) CachingCPURequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecImagePullerSpec) *string { return v.CachingCPURequest }).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecOutput) CachingIntervalHours() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecImagePullerSpec) *string { return v.CachingIntervalHours }).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecOutput) CachingMemoryLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecImagePullerSpec) *string { return v.CachingMemoryLimit }).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecOutput) CachingMemoryRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecImagePullerSpec) *string { return v.CachingMemoryRequest }).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecOutput) ConfigMapName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecImagePullerSpec) *string { return v.ConfigMapName }).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecOutput) DaemonsetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecImagePullerSpec) *string { return v.DaemonsetName }).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecImagePullerSpec) *string { return v.DeploymentName }).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecOutput) Images() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecImagePullerSpec) *string { return v.Images }).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecOutput) NodeSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecImagePullerSpec) *string { return v.NodeSelector }).(pulumi.StringPtrOutput)
}

type CheClusterSpecImagePullerSpecPtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecImagePullerSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecImagePullerSpec)(nil)).Elem()
}

func (o CheClusterSpecImagePullerSpecPtrOutput) ToCheClusterSpecImagePullerSpecPtrOutput() CheClusterSpecImagePullerSpecPtrOutput {
	return o
}

func (o CheClusterSpecImagePullerSpecPtrOutput) ToCheClusterSpecImagePullerSpecPtrOutputWithContext(ctx context.Context) CheClusterSpecImagePullerSpecPtrOutput {
	return o
}

func (o CheClusterSpecImagePullerSpecPtrOutput) Elem() CheClusterSpecImagePullerSpecOutput {
	return o.ApplyT(func(v *CheClusterSpecImagePullerSpec) CheClusterSpecImagePullerSpec { return *v }).(CheClusterSpecImagePullerSpecOutput)
}

func (o CheClusterSpecImagePullerSpecPtrOutput) CachingCPULimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.CachingCPULimit
	}).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecPtrOutput) CachingCPURequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.CachingCPURequest
	}).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecPtrOutput) CachingIntervalHours() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.CachingIntervalHours
	}).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecPtrOutput) CachingMemoryLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.CachingMemoryLimit
	}).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecPtrOutput) CachingMemoryRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.CachingMemoryRequest
	}).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecPtrOutput) ConfigMapName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMapName
	}).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecPtrOutput) DaemonsetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.DaemonsetName
	}).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecPtrOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentName
	}).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecPtrOutput) Images() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringPtrOutput)
}

func (o CheClusterSpecImagePullerSpecPtrOutput) NodeSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecImagePullerSpec) *string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringPtrOutput)
}

// Configuration settings specific to Che installations made on upstream Kubernetes.
type CheClusterSpecK8s struct {
	// Ingress class that will define the which controler will manage ingresses. Defaults to `nginx`. NB: This drives the `is kubernetes.io/ingress.class` annotation on Che-related ingresses.
	IngressClass *string `pulumi:"ingressClass"`
	// Global ingress domain for a K8S cluster. This MUST be explicitly specified: there are no defaults.
	IngressDomain *string `pulumi:"ingressDomain"`
	// Strategy for ingress creation. This can be `multi-host` (host is explicitly provided in ingress), `single-host` (host is provided, path-based rules) and `default-host.*`(no host is provided, path-based rules). Defaults to `"multi-host` Deprecated in favor of "serverExposureStrategy" in the "server" section, which defines this regardless of the cluster type. If both are defined, `serverExposureStrategy` takes precedence.
	IngressStrategy *string `pulumi:"ingressStrategy"`
	// FSGroup the Che pod and Workspace pods containers should run in. Defaults to `1724`.
	SecurityContextFsGroup *string `pulumi:"securityContextFsGroup"`
	// ID of the user the Che pod and Workspace pods containers should run as. Default to `1724`.
	SecurityContextRunAsUser *string `pulumi:"securityContextRunAsUser"`
	// When the serverExposureStrategy is set to "single-host", the way the server, registries and workspaces are exposed is further configured by this property. The possible values are "native" (which means that the server and workspaces are exposed using ingresses on K8s) or "gateway" where the server and workspaces are exposed using a custom gateway based on Traefik. All the endpoints whether backed by the ingress or gateway "route" always point to the subpaths on the same domain. Defaults to "native".
	SingleHostExposureType *string `pulumi:"singleHostExposureType"`
	// Name of a secret that will be used to setup ingress TLS termination if TLS is enabled. If the field is empty string, then default cluster certificate will be used. See also the `tlsSupport` field.
	TlsSecretName *string `pulumi:"tlsSecretName"`
}

// CheClusterSpecK8sInput is an input type that accepts CheClusterSpecK8sArgs and CheClusterSpecK8sOutput values.
// You can construct a concrete instance of `CheClusterSpecK8sInput` via:
//
//          CheClusterSpecK8sArgs{...}
type CheClusterSpecK8sInput interface {
	pulumi.Input

	ToCheClusterSpecK8sOutput() CheClusterSpecK8sOutput
	ToCheClusterSpecK8sOutputWithContext(context.Context) CheClusterSpecK8sOutput
}

// Configuration settings specific to Che installations made on upstream Kubernetes.
type CheClusterSpecK8sArgs struct {
	// Ingress class that will define the which controler will manage ingresses. Defaults to `nginx`. NB: This drives the `is kubernetes.io/ingress.class` annotation on Che-related ingresses.
	IngressClass pulumi.StringPtrInput `pulumi:"ingressClass"`
	// Global ingress domain for a K8S cluster. This MUST be explicitly specified: there are no defaults.
	IngressDomain pulumi.StringPtrInput `pulumi:"ingressDomain"`
	// Strategy for ingress creation. This can be `multi-host` (host is explicitly provided in ingress), `single-host` (host is provided, path-based rules) and `default-host.*`(no host is provided, path-based rules). Defaults to `"multi-host` Deprecated in favor of "serverExposureStrategy" in the "server" section, which defines this regardless of the cluster type. If both are defined, `serverExposureStrategy` takes precedence.
	IngressStrategy pulumi.StringPtrInput `pulumi:"ingressStrategy"`
	// FSGroup the Che pod and Workspace pods containers should run in. Defaults to `1724`.
	SecurityContextFsGroup pulumi.StringPtrInput `pulumi:"securityContextFsGroup"`
	// ID of the user the Che pod and Workspace pods containers should run as. Default to `1724`.
	SecurityContextRunAsUser pulumi.StringPtrInput `pulumi:"securityContextRunAsUser"`
	// When the serverExposureStrategy is set to "single-host", the way the server, registries and workspaces are exposed is further configured by this property. The possible values are "native" (which means that the server and workspaces are exposed using ingresses on K8s) or "gateway" where the server and workspaces are exposed using a custom gateway based on Traefik. All the endpoints whether backed by the ingress or gateway "route" always point to the subpaths on the same domain. Defaults to "native".
	SingleHostExposureType pulumi.StringPtrInput `pulumi:"singleHostExposureType"`
	// Name of a secret that will be used to setup ingress TLS termination if TLS is enabled. If the field is empty string, then default cluster certificate will be used. See also the `tlsSupport` field.
	TlsSecretName pulumi.StringPtrInput `pulumi:"tlsSecretName"`
}

func (CheClusterSpecK8sArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecK8s)(nil)).Elem()
}

func (i CheClusterSpecK8sArgs) ToCheClusterSpecK8sOutput() CheClusterSpecK8sOutput {
	return i.ToCheClusterSpecK8sOutputWithContext(context.Background())
}

func (i CheClusterSpecK8sArgs) ToCheClusterSpecK8sOutputWithContext(ctx context.Context) CheClusterSpecK8sOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecK8sOutput)
}

func (i CheClusterSpecK8sArgs) ToCheClusterSpecK8sPtrOutput() CheClusterSpecK8sPtrOutput {
	return i.ToCheClusterSpecK8sPtrOutputWithContext(context.Background())
}

func (i CheClusterSpecK8sArgs) ToCheClusterSpecK8sPtrOutputWithContext(ctx context.Context) CheClusterSpecK8sPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecK8sOutput).ToCheClusterSpecK8sPtrOutputWithContext(ctx)
}

// CheClusterSpecK8sPtrInput is an input type that accepts CheClusterSpecK8sArgs, CheClusterSpecK8sPtr and CheClusterSpecK8sPtrOutput values.
// You can construct a concrete instance of `CheClusterSpecK8sPtrInput` via:
//
//          CheClusterSpecK8sArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecK8sPtrInput interface {
	pulumi.Input

	ToCheClusterSpecK8sPtrOutput() CheClusterSpecK8sPtrOutput
	ToCheClusterSpecK8sPtrOutputWithContext(context.Context) CheClusterSpecK8sPtrOutput
}

type cheClusterSpecK8sPtrType CheClusterSpecK8sArgs

func CheClusterSpecK8sPtr(v *CheClusterSpecK8sArgs) CheClusterSpecK8sPtrInput {
	return (*cheClusterSpecK8sPtrType)(v)
}

func (*cheClusterSpecK8sPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecK8s)(nil)).Elem()
}

func (i *cheClusterSpecK8sPtrType) ToCheClusterSpecK8sPtrOutput() CheClusterSpecK8sPtrOutput {
	return i.ToCheClusterSpecK8sPtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecK8sPtrType) ToCheClusterSpecK8sPtrOutputWithContext(ctx context.Context) CheClusterSpecK8sPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecK8sPtrOutput)
}

// Configuration settings specific to Che installations made on upstream Kubernetes.
type CheClusterSpecK8sOutput struct{ *pulumi.OutputState }

func (CheClusterSpecK8sOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecK8s)(nil)).Elem()
}

func (o CheClusterSpecK8sOutput) ToCheClusterSpecK8sOutput() CheClusterSpecK8sOutput {
	return o
}

func (o CheClusterSpecK8sOutput) ToCheClusterSpecK8sOutputWithContext(ctx context.Context) CheClusterSpecK8sOutput {
	return o
}

func (o CheClusterSpecK8sOutput) ToCheClusterSpecK8sPtrOutput() CheClusterSpecK8sPtrOutput {
	return o.ToCheClusterSpecK8sPtrOutputWithContext(context.Background())
}

func (o CheClusterSpecK8sOutput) ToCheClusterSpecK8sPtrOutputWithContext(ctx context.Context) CheClusterSpecK8sPtrOutput {
	return o.ApplyT(func(v CheClusterSpecK8s) *CheClusterSpecK8s {
		return &v
	}).(CheClusterSpecK8sPtrOutput)
}

// Ingress class that will define the which controler will manage ingresses. Defaults to `nginx`. NB: This drives the `is kubernetes.io/ingress.class` annotation on Che-related ingresses.
func (o CheClusterSpecK8sOutput) IngressClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecK8s) *string { return v.IngressClass }).(pulumi.StringPtrOutput)
}

// Global ingress domain for a K8S cluster. This MUST be explicitly specified: there are no defaults.
func (o CheClusterSpecK8sOutput) IngressDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecK8s) *string { return v.IngressDomain }).(pulumi.StringPtrOutput)
}

// Strategy for ingress creation. This can be `multi-host` (host is explicitly provided in ingress), `single-host` (host is provided, path-based rules) and `default-host.*`(no host is provided, path-based rules). Defaults to `"multi-host` Deprecated in favor of "serverExposureStrategy" in the "server" section, which defines this regardless of the cluster type. If both are defined, `serverExposureStrategy` takes precedence.
func (o CheClusterSpecK8sOutput) IngressStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecK8s) *string { return v.IngressStrategy }).(pulumi.StringPtrOutput)
}

// FSGroup the Che pod and Workspace pods containers should run in. Defaults to `1724`.
func (o CheClusterSpecK8sOutput) SecurityContextFsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecK8s) *string { return v.SecurityContextFsGroup }).(pulumi.StringPtrOutput)
}

// ID of the user the Che pod and Workspace pods containers should run as. Default to `1724`.
func (o CheClusterSpecK8sOutput) SecurityContextRunAsUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecK8s) *string { return v.SecurityContextRunAsUser }).(pulumi.StringPtrOutput)
}

// When the serverExposureStrategy is set to "single-host", the way the server, registries and workspaces are exposed is further configured by this property. The possible values are "native" (which means that the server and workspaces are exposed using ingresses on K8s) or "gateway" where the server and workspaces are exposed using a custom gateway based on Traefik. All the endpoints whether backed by the ingress or gateway "route" always point to the subpaths on the same domain. Defaults to "native".
func (o CheClusterSpecK8sOutput) SingleHostExposureType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecK8s) *string { return v.SingleHostExposureType }).(pulumi.StringPtrOutput)
}

// Name of a secret that will be used to setup ingress TLS termination if TLS is enabled. If the field is empty string, then default cluster certificate will be used. See also the `tlsSupport` field.
func (o CheClusterSpecK8sOutput) TlsSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecK8s) *string { return v.TlsSecretName }).(pulumi.StringPtrOutput)
}

type CheClusterSpecK8sPtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecK8sPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecK8s)(nil)).Elem()
}

func (o CheClusterSpecK8sPtrOutput) ToCheClusterSpecK8sPtrOutput() CheClusterSpecK8sPtrOutput {
	return o
}

func (o CheClusterSpecK8sPtrOutput) ToCheClusterSpecK8sPtrOutputWithContext(ctx context.Context) CheClusterSpecK8sPtrOutput {
	return o
}

func (o CheClusterSpecK8sPtrOutput) Elem() CheClusterSpecK8sOutput {
	return o.ApplyT(func(v *CheClusterSpecK8s) CheClusterSpecK8s { return *v }).(CheClusterSpecK8sOutput)
}

// Ingress class that will define the which controler will manage ingresses. Defaults to `nginx`. NB: This drives the `is kubernetes.io/ingress.class` annotation on Che-related ingresses.
func (o CheClusterSpecK8sPtrOutput) IngressClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecK8s) *string {
		if v == nil {
			return nil
		}
		return v.IngressClass
	}).(pulumi.StringPtrOutput)
}

// Global ingress domain for a K8S cluster. This MUST be explicitly specified: there are no defaults.
func (o CheClusterSpecK8sPtrOutput) IngressDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecK8s) *string {
		if v == nil {
			return nil
		}
		return v.IngressDomain
	}).(pulumi.StringPtrOutput)
}

// Strategy for ingress creation. This can be `multi-host` (host is explicitly provided in ingress), `single-host` (host is provided, path-based rules) and `default-host.*`(no host is provided, path-based rules). Defaults to `"multi-host` Deprecated in favor of "serverExposureStrategy" in the "server" section, which defines this regardless of the cluster type. If both are defined, `serverExposureStrategy` takes precedence.
func (o CheClusterSpecK8sPtrOutput) IngressStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecK8s) *string {
		if v == nil {
			return nil
		}
		return v.IngressStrategy
	}).(pulumi.StringPtrOutput)
}

// FSGroup the Che pod and Workspace pods containers should run in. Defaults to `1724`.
func (o CheClusterSpecK8sPtrOutput) SecurityContextFsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecK8s) *string {
		if v == nil {
			return nil
		}
		return v.SecurityContextFsGroup
	}).(pulumi.StringPtrOutput)
}

// ID of the user the Che pod and Workspace pods containers should run as. Default to `1724`.
func (o CheClusterSpecK8sPtrOutput) SecurityContextRunAsUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecK8s) *string {
		if v == nil {
			return nil
		}
		return v.SecurityContextRunAsUser
	}).(pulumi.StringPtrOutput)
}

// When the serverExposureStrategy is set to "single-host", the way the server, registries and workspaces are exposed is further configured by this property. The possible values are "native" (which means that the server and workspaces are exposed using ingresses on K8s) or "gateway" where the server and workspaces are exposed using a custom gateway based on Traefik. All the endpoints whether backed by the ingress or gateway "route" always point to the subpaths on the same domain. Defaults to "native".
func (o CheClusterSpecK8sPtrOutput) SingleHostExposureType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecK8s) *string {
		if v == nil {
			return nil
		}
		return v.SingleHostExposureType
	}).(pulumi.StringPtrOutput)
}

// Name of a secret that will be used to setup ingress TLS termination if TLS is enabled. If the field is empty string, then default cluster certificate will be used. See also the `tlsSupport` field.
func (o CheClusterSpecK8sPtrOutput) TlsSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecK8s) *string {
		if v == nil {
			return nil
		}
		return v.TlsSecretName
	}).(pulumi.StringPtrOutput)
}

// Configuration settings related to the metrics collection used by the Che installation.
type CheClusterSpecMetrics struct {
	// Enables `metrics` Che server endpoint. Default to `true`.
	Enable *bool `pulumi:"enable"`
}

// CheClusterSpecMetricsInput is an input type that accepts CheClusterSpecMetricsArgs and CheClusterSpecMetricsOutput values.
// You can construct a concrete instance of `CheClusterSpecMetricsInput` via:
//
//          CheClusterSpecMetricsArgs{...}
type CheClusterSpecMetricsInput interface {
	pulumi.Input

	ToCheClusterSpecMetricsOutput() CheClusterSpecMetricsOutput
	ToCheClusterSpecMetricsOutputWithContext(context.Context) CheClusterSpecMetricsOutput
}

// Configuration settings related to the metrics collection used by the Che installation.
type CheClusterSpecMetricsArgs struct {
	// Enables `metrics` Che server endpoint. Default to `true`.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
}

func (CheClusterSpecMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecMetrics)(nil)).Elem()
}

func (i CheClusterSpecMetricsArgs) ToCheClusterSpecMetricsOutput() CheClusterSpecMetricsOutput {
	return i.ToCheClusterSpecMetricsOutputWithContext(context.Background())
}

func (i CheClusterSpecMetricsArgs) ToCheClusterSpecMetricsOutputWithContext(ctx context.Context) CheClusterSpecMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecMetricsOutput)
}

func (i CheClusterSpecMetricsArgs) ToCheClusterSpecMetricsPtrOutput() CheClusterSpecMetricsPtrOutput {
	return i.ToCheClusterSpecMetricsPtrOutputWithContext(context.Background())
}

func (i CheClusterSpecMetricsArgs) ToCheClusterSpecMetricsPtrOutputWithContext(ctx context.Context) CheClusterSpecMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecMetricsOutput).ToCheClusterSpecMetricsPtrOutputWithContext(ctx)
}

// CheClusterSpecMetricsPtrInput is an input type that accepts CheClusterSpecMetricsArgs, CheClusterSpecMetricsPtr and CheClusterSpecMetricsPtrOutput values.
// You can construct a concrete instance of `CheClusterSpecMetricsPtrInput` via:
//
//          CheClusterSpecMetricsArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecMetricsPtrInput interface {
	pulumi.Input

	ToCheClusterSpecMetricsPtrOutput() CheClusterSpecMetricsPtrOutput
	ToCheClusterSpecMetricsPtrOutputWithContext(context.Context) CheClusterSpecMetricsPtrOutput
}

type cheClusterSpecMetricsPtrType CheClusterSpecMetricsArgs

func CheClusterSpecMetricsPtr(v *CheClusterSpecMetricsArgs) CheClusterSpecMetricsPtrInput {
	return (*cheClusterSpecMetricsPtrType)(v)
}

func (*cheClusterSpecMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecMetrics)(nil)).Elem()
}

func (i *cheClusterSpecMetricsPtrType) ToCheClusterSpecMetricsPtrOutput() CheClusterSpecMetricsPtrOutput {
	return i.ToCheClusterSpecMetricsPtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecMetricsPtrType) ToCheClusterSpecMetricsPtrOutputWithContext(ctx context.Context) CheClusterSpecMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecMetricsPtrOutput)
}

// Configuration settings related to the metrics collection used by the Che installation.
type CheClusterSpecMetricsOutput struct{ *pulumi.OutputState }

func (CheClusterSpecMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecMetrics)(nil)).Elem()
}

func (o CheClusterSpecMetricsOutput) ToCheClusterSpecMetricsOutput() CheClusterSpecMetricsOutput {
	return o
}

func (o CheClusterSpecMetricsOutput) ToCheClusterSpecMetricsOutputWithContext(ctx context.Context) CheClusterSpecMetricsOutput {
	return o
}

func (o CheClusterSpecMetricsOutput) ToCheClusterSpecMetricsPtrOutput() CheClusterSpecMetricsPtrOutput {
	return o.ToCheClusterSpecMetricsPtrOutputWithContext(context.Background())
}

func (o CheClusterSpecMetricsOutput) ToCheClusterSpecMetricsPtrOutputWithContext(ctx context.Context) CheClusterSpecMetricsPtrOutput {
	return o.ApplyT(func(v CheClusterSpecMetrics) *CheClusterSpecMetrics {
		return &v
	}).(CheClusterSpecMetricsPtrOutput)
}

// Enables `metrics` Che server endpoint. Default to `true`.
func (o CheClusterSpecMetricsOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterSpecMetrics) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

type CheClusterSpecMetricsPtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecMetrics)(nil)).Elem()
}

func (o CheClusterSpecMetricsPtrOutput) ToCheClusterSpecMetricsPtrOutput() CheClusterSpecMetricsPtrOutput {
	return o
}

func (o CheClusterSpecMetricsPtrOutput) ToCheClusterSpecMetricsPtrOutputWithContext(ctx context.Context) CheClusterSpecMetricsPtrOutput {
	return o
}

func (o CheClusterSpecMetricsPtrOutput) Elem() CheClusterSpecMetricsOutput {
	return o.ApplyT(func(v *CheClusterSpecMetrics) CheClusterSpecMetrics { return *v }).(CheClusterSpecMetricsOutput)
}

// Enables `metrics` Che server endpoint. Default to `true`.
func (o CheClusterSpecMetricsPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecMetrics) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// General configuration settings related to the Che server and the plugin and devfile registries
type CheClusterSpecServer struct {
	// Optional hostname (or url) to an alternate container registry to pull images from. This value overrides the container registry hostname defined in all the default container images involved in a Che deployment. This is particularly useful to install Che in an air-gapped environment.
	AirGapContainerRegistryHostname *string `pulumi:"airGapContainerRegistryHostname"`
	// Optional repository name of an alternate container registry to pull images from. This value overrides the container registry organization defined in all the default container images involved in a Che deployment. This is particularly useful to install Che in an air-gapped environment.
	AirGapContainerRegistryOrganization *string `pulumi:"airGapContainerRegistryOrganization"`
	// Defines if a user is able to specify Kubernetes namespace (or OpenShift project) different from the default. It's NOT RECOMMENDED to configured true without OAuth configured. This property is also used by the OpenShift infra.
	AllowUserDefinedWorkspaceNamespaces *bool `pulumi:"allowUserDefinedWorkspaceNamespaces"`
	// Comma-separated list of ClusterRoles that will be assigned to che ServiceAccount. Be aware that che-operator has to already have all permissions in these ClusterRoles to be able to grant them.
	CheClusterRoles *string `pulumi:"cheClusterRoles"`
	// Enables the debug mode for Che server. Defaults to `false`.
	CheDebug *string `pulumi:"cheDebug"`
	// Flavor of the installation. This is either `che` for upstream Che installations, or `codeready` for CodeReady Workspaces installation. In most cases the default value should not be overridden.
	CheFlavor *string `pulumi:"cheFlavor"`
	// Public hostname of the installed Che server. If value is omitted then it will be automatically set by the operator. (see the `cheHostTLSSecret` field).
	CheHost *string `pulumi:"cheHost"`
	// Name of a secret containing certificates to secure ingress/route for the custom hostname of the installed Che server. (see the `cheHost` field).
	CheHostTLSSecret *string `pulumi:"cheHostTLSSecret"`
	// Overrides the container image used in Che deployment. This does NOT include the container image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
	CheImage *string `pulumi:"cheImage"`
	// Overrides the image pull policy used in Che deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
	CheImagePullPolicy *string `pulumi:"cheImagePullPolicy"`
	// Overrides the tag of the container image used in Che deployment. Omit it or leave it empty to use the defaut image tag provided by the operator.
	CheImageTag *string `pulumi:"cheImageTag"`
	// Log level for the Che server: `INFO` or `DEBUG`. Defaults to `INFO`.
	CheLogLevel *string `pulumi:"cheLogLevel"`
	// Che server ingress custom settings
	CheServerIngress *CheClusterSpecServerCheServerIngress `pulumi:"cheServerIngress"`
	// Che server route custom settings
	CheServerRoute *CheClusterSpecServerCheServerRoute `pulumi:"cheServerRoute"`
	// Custom cluster role bound to the user for the Che workspaces. The default roles are used if this is omitted or left blank.
	CheWorkspaceClusterRole *string `pulumi:"cheWorkspaceClusterRole"`
	// Map of additional environment variables that will be applied in the generated `che` config map to be used by the Che server, in addition to the values already generated from other fields of the `CheCluster` custom resource (CR). If `customCheProperties` contains a property that would be normally generated in `che` config map from other CR fields, then the value defined in the `customCheProperties` will be used instead.
	CustomCheProperties map[string]string `pulumi:"customCheProperties"`
	// Overrides the container image used in the Devfile registry deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
	DevfileRegistryImage *string `pulumi:"devfileRegistryImage"`
	// Devfile registry ingress custom settings
	DevfileRegistryIngress *CheClusterSpecServerDevfileRegistryIngress `pulumi:"devfileRegistryIngress"`
	// Overrides the memory limit used in the Devfile registry deployment. Defaults to 256Mi.
	DevfileRegistryMemoryLimit *string `pulumi:"devfileRegistryMemoryLimit"`
	// Overrides the memory request used in the Devfile registry deployment. Defaults to 16Mi.
	DevfileRegistryMemoryRequest *string `pulumi:"devfileRegistryMemoryRequest"`
	// Overrides the image pull policy used in the Devfile registry deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
	DevfileRegistryPullPolicy *string `pulumi:"devfileRegistryPullPolicy"`
	// Devfile registry route custom settings
	DevfileRegistryRoute *CheClusterSpecServerDevfileRegistryRoute `pulumi:"devfileRegistryRoute"`
	// Public URL of the Devfile registry, that serves sample, ready-to-use devfiles. You should set it ONLY if you use an external devfile registry (see the `externalDevfileRegistry` field). By default this will be automatically calculated by the operator.
	DevfileRegistryUrl *string `pulumi:"devfileRegistryUrl"`
	// Instructs the operator on whether or not to deploy a dedicated Devfile registry server. By default a dedicated devfile registry server is started. But if `externalDevfileRegistry` is `true`, then no such dedicated server will be started by the operator and you will have to manually set the `devfileRegistryUrl` field
	ExternalDevfileRegistry *bool `pulumi:"externalDevfileRegistry"`
	// Instructs the operator on whether or not to deploy a dedicated Plugin registry server. By default a dedicated plugin registry server is started. But if `externalPluginRegistry` is `true`, then no such dedicated server will be started by the operator and you will have to manually set the `pluginRegistryUrl` field.
	ExternalPluginRegistry *bool `pulumi:"externalPluginRegistry"`
	// If enabled, then the certificate from `che-git-self-signed-cert` config map will be propagated to the Che components and provide particular configuration for Git.
	GitSelfSignedCert *bool `pulumi:"gitSelfSignedCert"`
	// List of hosts that should not use the configured proxy. So specify wild card domain use the following form `.<DOMAIN>` and `|` as delimiter, eg: `localhost|.my.host.com|123.42.12.32` Only use when configuring a proxy is required. Operator respects OpenShift cluster wide proxy configuration and no additional configuration is required, but defining `nonProxyHosts` in a custom resource leads to merging non proxy hosts lists from the cluster proxy configuration and ones defined in the custom resources. (see the doc https://docs.openshift.com/container-platform/4.4/networking/enable-cluster-wide-proxy.html) (see also the `proxyURL` fields).
	NonProxyHosts *string `pulumi:"nonProxyHosts"`
	// Overrides the container image used in the Plugin registry deployment. This includes the image tag. Omit it or leave it empty to use the default container image provided by the operator.
	PluginRegistryImage *string `pulumi:"pluginRegistryImage"`
	// Plugin registry ingress custom settings
	PluginRegistryIngress *CheClusterSpecServerPluginRegistryIngress `pulumi:"pluginRegistryIngress"`
	// Overrides the memory limit used in the Plugin registry deployment. Defaults to 256Mi.
	PluginRegistryMemoryLimit *string `pulumi:"pluginRegistryMemoryLimit"`
	// Overrides the memory request used in the Plugin registry deployment. Defaults to 16Mi.
	PluginRegistryMemoryRequest *string `pulumi:"pluginRegistryMemoryRequest"`
	// Overrides the image pull policy used in the Plugin registry deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
	PluginRegistryPullPolicy *string `pulumi:"pluginRegistryPullPolicy"`
	// Plugin registry route custom settings
	PluginRegistryRoute *CheClusterSpecServerPluginRegistryRoute `pulumi:"pluginRegistryRoute"`
	// Public URL of the Plugin registry, that serves sample ready-to-use devfiles. You should set it ONLY if you use an external devfile registry (see the `externalPluginRegistry` field). By default this will be automatically calculated by the operator.
	PluginRegistryUrl *string `pulumi:"pluginRegistryUrl"`
	// Password of the proxy server Only use when proxy configuration is required (see also the `proxyURL`, `proxyUser` and `proxySecret` fields).
	ProxyPassword *string `pulumi:"proxyPassword"`
	// Port of the proxy server. Only use when configuring a proxy is required. (see also the `proxyURL` and `nonProxyHosts` fields).
	ProxyPort *string `pulumi:"proxyPort"`
	// The secret that contains `user` and `password` for a proxy server. If the secret is defined then `proxyUser` and `proxyPassword` are ignored
	ProxySecret *string `pulumi:"proxySecret"`
	// URL (protocol+hostname) of the proxy server. This drives the appropriate changes in the `JAVA_OPTS` and `https(s)_proxy` variables in the Che server and workspaces containers. Only use when configuring a proxy is required. Operator respects OpenShift cluster wide proxy configuration and no additional configuration is required, but defining `proxyUrl` in a custom resource leads to overrides the cluster proxy configuration with fields `proxyUrl`, `proxyPort`, `proxyUser` and `proxyPassword` from the custom resource. (see the doc https://docs.openshift.com/container-platform/4.4/networking/enable-cluster-wide-proxy.html) (see also the `proxyPort` and `nonProxyHosts` fields).
	ProxyURL *string `pulumi:"proxyURL"`
	// User name of the proxy server. Only use when configuring a proxy is required (see also the `proxyURL`, `proxyPassword` and `proxySecret` fields).
	ProxyUser *string `pulumi:"proxyUser"`
	// Deprecated. The value of this flag is ignored. Che operator will automatically detect if router certificate is self-signed. If so it will be propagated to Che server and some other components.
	SelfSignedCert *bool `pulumi:"selfSignedCert"`
	// Sets the server and workspaces exposure type. Possible values are "multi-host", "single-host", "default-host". Defaults to "multi-host" which creates a separate ingress (or route on OpenShift) for every required endpoint. "single-host" makes Che exposed on a single hostname with workspaces exposed on subpaths. Please read the docs to learn about the limitations of this approach. Also consult the `singleHostExposureType` property to further configure how the operator and Che server make that happen on Kubernetes. "default-host" exposes che server on the host of the cluster. Please read the docs to learn about the limitations of this approach.
	ServerExposureStrategy *string `pulumi:"serverExposureStrategy"`
	// Overrides the memory limit used in the Che server deployment. Defaults to 1Gi.
	ServerMemoryLimit *string `pulumi:"serverMemoryLimit"`
	// Overrides the memory request used in the Che server deployment. Defaults to 512Mi.
	ServerMemoryRequest *string `pulumi:"serverMemoryRequest"`
	// Name of the config-map with public certificates to add to Java trust store of the Che server. This is usually required when adding the OpenShift OAuth provider which has https endpoint signed with self-signed cert. So, Che server must be aware of its CA cert to be able to request it. This is disabled by default.
	ServerTrustStoreConfigMapName *string `pulumi:"serverTrustStoreConfigMapName"`
	// The labels that need to be present (and are put) on the configmaps representing the gateway configuration.
	SingleHostGatewayConfigMapLabels map[string]string `pulumi:"singleHostGatewayConfigMapLabels"`
	// The image used for the gateway sidecar that provides configuration to the gateway. Omit it or leave it empty to use the defaut container image provided by the operator.
	SingleHostGatewayConfigSidecarImage *string `pulumi:"singleHostGatewayConfigSidecarImage"`
	// The image used for the gateway in the single host mode. Omit it or leave it empty to use the defaut container image provided by the operator.
	SingleHostGatewayImage *string `pulumi:"singleHostGatewayImage"`
	// Deprecated. Instructs the operator to deploy Che in TLS mode. This is enabled by default. Disabling TLS may cause malfunction of some Che components.
	TlsSupport *bool `pulumi:"tlsSupport"`
	// Use internal cluster svc names to communicate between components to speed up the traffic and avoid proxy issues. The default value is `true`.
	UseInternalClusterSVCNames *bool `pulumi:"useInternalClusterSVCNames"`
	// Defines Kubernetes default namespace in which user's workspaces are created if user does not override it. It's possible to use <username>, <userid> and <workspaceid> placeholders (e.g.: che-workspace-<username>). In that case, new namespace will be created for each user (or workspace). Is used by OpenShift infra as well to specify Project
	WorkspaceNamespaceDefault *string `pulumi:"workspaceNamespaceDefault"`
}

// CheClusterSpecServerInput is an input type that accepts CheClusterSpecServerArgs and CheClusterSpecServerOutput values.
// You can construct a concrete instance of `CheClusterSpecServerInput` via:
//
//          CheClusterSpecServerArgs{...}
type CheClusterSpecServerInput interface {
	pulumi.Input

	ToCheClusterSpecServerOutput() CheClusterSpecServerOutput
	ToCheClusterSpecServerOutputWithContext(context.Context) CheClusterSpecServerOutput
}

// General configuration settings related to the Che server and the plugin and devfile registries
type CheClusterSpecServerArgs struct {
	// Optional hostname (or url) to an alternate container registry to pull images from. This value overrides the container registry hostname defined in all the default container images involved in a Che deployment. This is particularly useful to install Che in an air-gapped environment.
	AirGapContainerRegistryHostname pulumi.StringPtrInput `pulumi:"airGapContainerRegistryHostname"`
	// Optional repository name of an alternate container registry to pull images from. This value overrides the container registry organization defined in all the default container images involved in a Che deployment. This is particularly useful to install Che in an air-gapped environment.
	AirGapContainerRegistryOrganization pulumi.StringPtrInput `pulumi:"airGapContainerRegistryOrganization"`
	// Defines if a user is able to specify Kubernetes namespace (or OpenShift project) different from the default. It's NOT RECOMMENDED to configured true without OAuth configured. This property is also used by the OpenShift infra.
	AllowUserDefinedWorkspaceNamespaces pulumi.BoolPtrInput `pulumi:"allowUserDefinedWorkspaceNamespaces"`
	// Comma-separated list of ClusterRoles that will be assigned to che ServiceAccount. Be aware that che-operator has to already have all permissions in these ClusterRoles to be able to grant them.
	CheClusterRoles pulumi.StringPtrInput `pulumi:"cheClusterRoles"`
	// Enables the debug mode for Che server. Defaults to `false`.
	CheDebug pulumi.StringPtrInput `pulumi:"cheDebug"`
	// Flavor of the installation. This is either `che` for upstream Che installations, or `codeready` for CodeReady Workspaces installation. In most cases the default value should not be overridden.
	CheFlavor pulumi.StringPtrInput `pulumi:"cheFlavor"`
	// Public hostname of the installed Che server. If value is omitted then it will be automatically set by the operator. (see the `cheHostTLSSecret` field).
	CheHost pulumi.StringPtrInput `pulumi:"cheHost"`
	// Name of a secret containing certificates to secure ingress/route for the custom hostname of the installed Che server. (see the `cheHost` field).
	CheHostTLSSecret pulumi.StringPtrInput `pulumi:"cheHostTLSSecret"`
	// Overrides the container image used in Che deployment. This does NOT include the container image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
	CheImage pulumi.StringPtrInput `pulumi:"cheImage"`
	// Overrides the image pull policy used in Che deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
	CheImagePullPolicy pulumi.StringPtrInput `pulumi:"cheImagePullPolicy"`
	// Overrides the tag of the container image used in Che deployment. Omit it or leave it empty to use the defaut image tag provided by the operator.
	CheImageTag pulumi.StringPtrInput `pulumi:"cheImageTag"`
	// Log level for the Che server: `INFO` or `DEBUG`. Defaults to `INFO`.
	CheLogLevel pulumi.StringPtrInput `pulumi:"cheLogLevel"`
	// Che server ingress custom settings
	CheServerIngress CheClusterSpecServerCheServerIngressPtrInput `pulumi:"cheServerIngress"`
	// Che server route custom settings
	CheServerRoute CheClusterSpecServerCheServerRoutePtrInput `pulumi:"cheServerRoute"`
	// Custom cluster role bound to the user for the Che workspaces. The default roles are used if this is omitted or left blank.
	CheWorkspaceClusterRole pulumi.StringPtrInput `pulumi:"cheWorkspaceClusterRole"`
	// Map of additional environment variables that will be applied in the generated `che` config map to be used by the Che server, in addition to the values already generated from other fields of the `CheCluster` custom resource (CR). If `customCheProperties` contains a property that would be normally generated in `che` config map from other CR fields, then the value defined in the `customCheProperties` will be used instead.
	CustomCheProperties pulumi.StringMapInput `pulumi:"customCheProperties"`
	// Overrides the container image used in the Devfile registry deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
	DevfileRegistryImage pulumi.StringPtrInput `pulumi:"devfileRegistryImage"`
	// Devfile registry ingress custom settings
	DevfileRegistryIngress CheClusterSpecServerDevfileRegistryIngressPtrInput `pulumi:"devfileRegistryIngress"`
	// Overrides the memory limit used in the Devfile registry deployment. Defaults to 256Mi.
	DevfileRegistryMemoryLimit pulumi.StringPtrInput `pulumi:"devfileRegistryMemoryLimit"`
	// Overrides the memory request used in the Devfile registry deployment. Defaults to 16Mi.
	DevfileRegistryMemoryRequest pulumi.StringPtrInput `pulumi:"devfileRegistryMemoryRequest"`
	// Overrides the image pull policy used in the Devfile registry deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
	DevfileRegistryPullPolicy pulumi.StringPtrInput `pulumi:"devfileRegistryPullPolicy"`
	// Devfile registry route custom settings
	DevfileRegistryRoute CheClusterSpecServerDevfileRegistryRoutePtrInput `pulumi:"devfileRegistryRoute"`
	// Public URL of the Devfile registry, that serves sample, ready-to-use devfiles. You should set it ONLY if you use an external devfile registry (see the `externalDevfileRegistry` field). By default this will be automatically calculated by the operator.
	DevfileRegistryUrl pulumi.StringPtrInput `pulumi:"devfileRegistryUrl"`
	// Instructs the operator on whether or not to deploy a dedicated Devfile registry server. By default a dedicated devfile registry server is started. But if `externalDevfileRegistry` is `true`, then no such dedicated server will be started by the operator and you will have to manually set the `devfileRegistryUrl` field
	ExternalDevfileRegistry pulumi.BoolPtrInput `pulumi:"externalDevfileRegistry"`
	// Instructs the operator on whether or not to deploy a dedicated Plugin registry server. By default a dedicated plugin registry server is started. But if `externalPluginRegistry` is `true`, then no such dedicated server will be started by the operator and you will have to manually set the `pluginRegistryUrl` field.
	ExternalPluginRegistry pulumi.BoolPtrInput `pulumi:"externalPluginRegistry"`
	// If enabled, then the certificate from `che-git-self-signed-cert` config map will be propagated to the Che components and provide particular configuration for Git.
	GitSelfSignedCert pulumi.BoolPtrInput `pulumi:"gitSelfSignedCert"`
	// List of hosts that should not use the configured proxy. So specify wild card domain use the following form `.<DOMAIN>` and `|` as delimiter, eg: `localhost|.my.host.com|123.42.12.32` Only use when configuring a proxy is required. Operator respects OpenShift cluster wide proxy configuration and no additional configuration is required, but defining `nonProxyHosts` in a custom resource leads to merging non proxy hosts lists from the cluster proxy configuration and ones defined in the custom resources. (see the doc https://docs.openshift.com/container-platform/4.4/networking/enable-cluster-wide-proxy.html) (see also the `proxyURL` fields).
	NonProxyHosts pulumi.StringPtrInput `pulumi:"nonProxyHosts"`
	// Overrides the container image used in the Plugin registry deployment. This includes the image tag. Omit it or leave it empty to use the default container image provided by the operator.
	PluginRegistryImage pulumi.StringPtrInput `pulumi:"pluginRegistryImage"`
	// Plugin registry ingress custom settings
	PluginRegistryIngress CheClusterSpecServerPluginRegistryIngressPtrInput `pulumi:"pluginRegistryIngress"`
	// Overrides the memory limit used in the Plugin registry deployment. Defaults to 256Mi.
	PluginRegistryMemoryLimit pulumi.StringPtrInput `pulumi:"pluginRegistryMemoryLimit"`
	// Overrides the memory request used in the Plugin registry deployment. Defaults to 16Mi.
	PluginRegistryMemoryRequest pulumi.StringPtrInput `pulumi:"pluginRegistryMemoryRequest"`
	// Overrides the image pull policy used in the Plugin registry deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
	PluginRegistryPullPolicy pulumi.StringPtrInput `pulumi:"pluginRegistryPullPolicy"`
	// Plugin registry route custom settings
	PluginRegistryRoute CheClusterSpecServerPluginRegistryRoutePtrInput `pulumi:"pluginRegistryRoute"`
	// Public URL of the Plugin registry, that serves sample ready-to-use devfiles. You should set it ONLY if you use an external devfile registry (see the `externalPluginRegistry` field). By default this will be automatically calculated by the operator.
	PluginRegistryUrl pulumi.StringPtrInput `pulumi:"pluginRegistryUrl"`
	// Password of the proxy server Only use when proxy configuration is required (see also the `proxyURL`, `proxyUser` and `proxySecret` fields).
	ProxyPassword pulumi.StringPtrInput `pulumi:"proxyPassword"`
	// Port of the proxy server. Only use when configuring a proxy is required. (see also the `proxyURL` and `nonProxyHosts` fields).
	ProxyPort pulumi.StringPtrInput `pulumi:"proxyPort"`
	// The secret that contains `user` and `password` for a proxy server. If the secret is defined then `proxyUser` and `proxyPassword` are ignored
	ProxySecret pulumi.StringPtrInput `pulumi:"proxySecret"`
	// URL (protocol+hostname) of the proxy server. This drives the appropriate changes in the `JAVA_OPTS` and `https(s)_proxy` variables in the Che server and workspaces containers. Only use when configuring a proxy is required. Operator respects OpenShift cluster wide proxy configuration and no additional configuration is required, but defining `proxyUrl` in a custom resource leads to overrides the cluster proxy configuration with fields `proxyUrl`, `proxyPort`, `proxyUser` and `proxyPassword` from the custom resource. (see the doc https://docs.openshift.com/container-platform/4.4/networking/enable-cluster-wide-proxy.html) (see also the `proxyPort` and `nonProxyHosts` fields).
	ProxyURL pulumi.StringPtrInput `pulumi:"proxyURL"`
	// User name of the proxy server. Only use when configuring a proxy is required (see also the `proxyURL`, `proxyPassword` and `proxySecret` fields).
	ProxyUser pulumi.StringPtrInput `pulumi:"proxyUser"`
	// Deprecated. The value of this flag is ignored. Che operator will automatically detect if router certificate is self-signed. If so it will be propagated to Che server and some other components.
	SelfSignedCert pulumi.BoolPtrInput `pulumi:"selfSignedCert"`
	// Sets the server and workspaces exposure type. Possible values are "multi-host", "single-host", "default-host". Defaults to "multi-host" which creates a separate ingress (or route on OpenShift) for every required endpoint. "single-host" makes Che exposed on a single hostname with workspaces exposed on subpaths. Please read the docs to learn about the limitations of this approach. Also consult the `singleHostExposureType` property to further configure how the operator and Che server make that happen on Kubernetes. "default-host" exposes che server on the host of the cluster. Please read the docs to learn about the limitations of this approach.
	ServerExposureStrategy pulumi.StringPtrInput `pulumi:"serverExposureStrategy"`
	// Overrides the memory limit used in the Che server deployment. Defaults to 1Gi.
	ServerMemoryLimit pulumi.StringPtrInput `pulumi:"serverMemoryLimit"`
	// Overrides the memory request used in the Che server deployment. Defaults to 512Mi.
	ServerMemoryRequest pulumi.StringPtrInput `pulumi:"serverMemoryRequest"`
	// Name of the config-map with public certificates to add to Java trust store of the Che server. This is usually required when adding the OpenShift OAuth provider which has https endpoint signed with self-signed cert. So, Che server must be aware of its CA cert to be able to request it. This is disabled by default.
	ServerTrustStoreConfigMapName pulumi.StringPtrInput `pulumi:"serverTrustStoreConfigMapName"`
	// The labels that need to be present (and are put) on the configmaps representing the gateway configuration.
	SingleHostGatewayConfigMapLabels pulumi.StringMapInput `pulumi:"singleHostGatewayConfigMapLabels"`
	// The image used for the gateway sidecar that provides configuration to the gateway. Omit it or leave it empty to use the defaut container image provided by the operator.
	SingleHostGatewayConfigSidecarImage pulumi.StringPtrInput `pulumi:"singleHostGatewayConfigSidecarImage"`
	// The image used for the gateway in the single host mode. Omit it or leave it empty to use the defaut container image provided by the operator.
	SingleHostGatewayImage pulumi.StringPtrInput `pulumi:"singleHostGatewayImage"`
	// Deprecated. Instructs the operator to deploy Che in TLS mode. This is enabled by default. Disabling TLS may cause malfunction of some Che components.
	TlsSupport pulumi.BoolPtrInput `pulumi:"tlsSupport"`
	// Use internal cluster svc names to communicate between components to speed up the traffic and avoid proxy issues. The default value is `true`.
	UseInternalClusterSVCNames pulumi.BoolPtrInput `pulumi:"useInternalClusterSVCNames"`
	// Defines Kubernetes default namespace in which user's workspaces are created if user does not override it. It's possible to use <username>, <userid> and <workspaceid> placeholders (e.g.: che-workspace-<username>). In that case, new namespace will be created for each user (or workspace). Is used by OpenShift infra as well to specify Project
	WorkspaceNamespaceDefault pulumi.StringPtrInput `pulumi:"workspaceNamespaceDefault"`
}

func (CheClusterSpecServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServer)(nil)).Elem()
}

func (i CheClusterSpecServerArgs) ToCheClusterSpecServerOutput() CheClusterSpecServerOutput {
	return i.ToCheClusterSpecServerOutputWithContext(context.Background())
}

func (i CheClusterSpecServerArgs) ToCheClusterSpecServerOutputWithContext(ctx context.Context) CheClusterSpecServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerOutput)
}

func (i CheClusterSpecServerArgs) ToCheClusterSpecServerPtrOutput() CheClusterSpecServerPtrOutput {
	return i.ToCheClusterSpecServerPtrOutputWithContext(context.Background())
}

func (i CheClusterSpecServerArgs) ToCheClusterSpecServerPtrOutputWithContext(ctx context.Context) CheClusterSpecServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerOutput).ToCheClusterSpecServerPtrOutputWithContext(ctx)
}

// CheClusterSpecServerPtrInput is an input type that accepts CheClusterSpecServerArgs, CheClusterSpecServerPtr and CheClusterSpecServerPtrOutput values.
// You can construct a concrete instance of `CheClusterSpecServerPtrInput` via:
//
//          CheClusterSpecServerArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecServerPtrInput interface {
	pulumi.Input

	ToCheClusterSpecServerPtrOutput() CheClusterSpecServerPtrOutput
	ToCheClusterSpecServerPtrOutputWithContext(context.Context) CheClusterSpecServerPtrOutput
}

type cheClusterSpecServerPtrType CheClusterSpecServerArgs

func CheClusterSpecServerPtr(v *CheClusterSpecServerArgs) CheClusterSpecServerPtrInput {
	return (*cheClusterSpecServerPtrType)(v)
}

func (*cheClusterSpecServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecServer)(nil)).Elem()
}

func (i *cheClusterSpecServerPtrType) ToCheClusterSpecServerPtrOutput() CheClusterSpecServerPtrOutput {
	return i.ToCheClusterSpecServerPtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecServerPtrType) ToCheClusterSpecServerPtrOutputWithContext(ctx context.Context) CheClusterSpecServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerPtrOutput)
}

// General configuration settings related to the Che server and the plugin and devfile registries
type CheClusterSpecServerOutput struct{ *pulumi.OutputState }

func (CheClusterSpecServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServer)(nil)).Elem()
}

func (o CheClusterSpecServerOutput) ToCheClusterSpecServerOutput() CheClusterSpecServerOutput {
	return o
}

func (o CheClusterSpecServerOutput) ToCheClusterSpecServerOutputWithContext(ctx context.Context) CheClusterSpecServerOutput {
	return o
}

func (o CheClusterSpecServerOutput) ToCheClusterSpecServerPtrOutput() CheClusterSpecServerPtrOutput {
	return o.ToCheClusterSpecServerPtrOutputWithContext(context.Background())
}

func (o CheClusterSpecServerOutput) ToCheClusterSpecServerPtrOutputWithContext(ctx context.Context) CheClusterSpecServerPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *CheClusterSpecServer {
		return &v
	}).(CheClusterSpecServerPtrOutput)
}

// Optional hostname (or url) to an alternate container registry to pull images from. This value overrides the container registry hostname defined in all the default container images involved in a Che deployment. This is particularly useful to install Che in an air-gapped environment.
func (o CheClusterSpecServerOutput) AirGapContainerRegistryHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.AirGapContainerRegistryHostname }).(pulumi.StringPtrOutput)
}

// Optional repository name of an alternate container registry to pull images from. This value overrides the container registry organization defined in all the default container images involved in a Che deployment. This is particularly useful to install Che in an air-gapped environment.
func (o CheClusterSpecServerOutput) AirGapContainerRegistryOrganization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.AirGapContainerRegistryOrganization }).(pulumi.StringPtrOutput)
}

// Defines if a user is able to specify Kubernetes namespace (or OpenShift project) different from the default. It's NOT RECOMMENDED to configured true without OAuth configured. This property is also used by the OpenShift infra.
func (o CheClusterSpecServerOutput) AllowUserDefinedWorkspaceNamespaces() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *bool { return v.AllowUserDefinedWorkspaceNamespaces }).(pulumi.BoolPtrOutput)
}

// Comma-separated list of ClusterRoles that will be assigned to che ServiceAccount. Be aware that che-operator has to already have all permissions in these ClusterRoles to be able to grant them.
func (o CheClusterSpecServerOutput) CheClusterRoles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.CheClusterRoles }).(pulumi.StringPtrOutput)
}

// Enables the debug mode for Che server. Defaults to `false`.
func (o CheClusterSpecServerOutput) CheDebug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.CheDebug }).(pulumi.StringPtrOutput)
}

// Flavor of the installation. This is either `che` for upstream Che installations, or `codeready` for CodeReady Workspaces installation. In most cases the default value should not be overridden.
func (o CheClusterSpecServerOutput) CheFlavor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.CheFlavor }).(pulumi.StringPtrOutput)
}

// Public hostname of the installed Che server. If value is omitted then it will be automatically set by the operator. (see the `cheHostTLSSecret` field).
func (o CheClusterSpecServerOutput) CheHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.CheHost }).(pulumi.StringPtrOutput)
}

// Name of a secret containing certificates to secure ingress/route for the custom hostname of the installed Che server. (see the `cheHost` field).
func (o CheClusterSpecServerOutput) CheHostTLSSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.CheHostTLSSecret }).(pulumi.StringPtrOutput)
}

// Overrides the container image used in Che deployment. This does NOT include the container image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
func (o CheClusterSpecServerOutput) CheImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.CheImage }).(pulumi.StringPtrOutput)
}

// Overrides the image pull policy used in Che deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
func (o CheClusterSpecServerOutput) CheImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.CheImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Overrides the tag of the container image used in Che deployment. Omit it or leave it empty to use the defaut image tag provided by the operator.
func (o CheClusterSpecServerOutput) CheImageTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.CheImageTag }).(pulumi.StringPtrOutput)
}

// Log level for the Che server: `INFO` or `DEBUG`. Defaults to `INFO`.
func (o CheClusterSpecServerOutput) CheLogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.CheLogLevel }).(pulumi.StringPtrOutput)
}

// Che server ingress custom settings
func (o CheClusterSpecServerOutput) CheServerIngress() CheClusterSpecServerCheServerIngressPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *CheClusterSpecServerCheServerIngress { return v.CheServerIngress }).(CheClusterSpecServerCheServerIngressPtrOutput)
}

// Che server route custom settings
func (o CheClusterSpecServerOutput) CheServerRoute() CheClusterSpecServerCheServerRoutePtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *CheClusterSpecServerCheServerRoute { return v.CheServerRoute }).(CheClusterSpecServerCheServerRoutePtrOutput)
}

// Custom cluster role bound to the user for the Che workspaces. The default roles are used if this is omitted or left blank.
func (o CheClusterSpecServerOutput) CheWorkspaceClusterRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.CheWorkspaceClusterRole }).(pulumi.StringPtrOutput)
}

// Map of additional environment variables that will be applied in the generated `che` config map to be used by the Che server, in addition to the values already generated from other fields of the `CheCluster` custom resource (CR). If `customCheProperties` contains a property that would be normally generated in `che` config map from other CR fields, then the value defined in the `customCheProperties` will be used instead.
func (o CheClusterSpecServerOutput) CustomCheProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CheClusterSpecServer) map[string]string { return v.CustomCheProperties }).(pulumi.StringMapOutput)
}

// Overrides the container image used in the Devfile registry deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
func (o CheClusterSpecServerOutput) DevfileRegistryImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.DevfileRegistryImage }).(pulumi.StringPtrOutput)
}

// Devfile registry ingress custom settings
func (o CheClusterSpecServerOutput) DevfileRegistryIngress() CheClusterSpecServerDevfileRegistryIngressPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *CheClusterSpecServerDevfileRegistryIngress {
		return v.DevfileRegistryIngress
	}).(CheClusterSpecServerDevfileRegistryIngressPtrOutput)
}

// Overrides the memory limit used in the Devfile registry deployment. Defaults to 256Mi.
func (o CheClusterSpecServerOutput) DevfileRegistryMemoryLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.DevfileRegistryMemoryLimit }).(pulumi.StringPtrOutput)
}

// Overrides the memory request used in the Devfile registry deployment. Defaults to 16Mi.
func (o CheClusterSpecServerOutput) DevfileRegistryMemoryRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.DevfileRegistryMemoryRequest }).(pulumi.StringPtrOutput)
}

// Overrides the image pull policy used in the Devfile registry deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
func (o CheClusterSpecServerOutput) DevfileRegistryPullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.DevfileRegistryPullPolicy }).(pulumi.StringPtrOutput)
}

// Devfile registry route custom settings
func (o CheClusterSpecServerOutput) DevfileRegistryRoute() CheClusterSpecServerDevfileRegistryRoutePtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *CheClusterSpecServerDevfileRegistryRoute { return v.DevfileRegistryRoute }).(CheClusterSpecServerDevfileRegistryRoutePtrOutput)
}

// Public URL of the Devfile registry, that serves sample, ready-to-use devfiles. You should set it ONLY if you use an external devfile registry (see the `externalDevfileRegistry` field). By default this will be automatically calculated by the operator.
func (o CheClusterSpecServerOutput) DevfileRegistryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.DevfileRegistryUrl }).(pulumi.StringPtrOutput)
}

// Instructs the operator on whether or not to deploy a dedicated Devfile registry server. By default a dedicated devfile registry server is started. But if `externalDevfileRegistry` is `true`, then no such dedicated server will be started by the operator and you will have to manually set the `devfileRegistryUrl` field
func (o CheClusterSpecServerOutput) ExternalDevfileRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *bool { return v.ExternalDevfileRegistry }).(pulumi.BoolPtrOutput)
}

// Instructs the operator on whether or not to deploy a dedicated Plugin registry server. By default a dedicated plugin registry server is started. But if `externalPluginRegistry` is `true`, then no such dedicated server will be started by the operator and you will have to manually set the `pluginRegistryUrl` field.
func (o CheClusterSpecServerOutput) ExternalPluginRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *bool { return v.ExternalPluginRegistry }).(pulumi.BoolPtrOutput)
}

// If enabled, then the certificate from `che-git-self-signed-cert` config map will be propagated to the Che components and provide particular configuration for Git.
func (o CheClusterSpecServerOutput) GitSelfSignedCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *bool { return v.GitSelfSignedCert }).(pulumi.BoolPtrOutput)
}

// List of hosts that should not use the configured proxy. So specify wild card domain use the following form `.<DOMAIN>` and `|` as delimiter, eg: `localhost|.my.host.com|123.42.12.32` Only use when configuring a proxy is required. Operator respects OpenShift cluster wide proxy configuration and no additional configuration is required, but defining `nonProxyHosts` in a custom resource leads to merging non proxy hosts lists from the cluster proxy configuration and ones defined in the custom resources. (see the doc https://docs.openshift.com/container-platform/4.4/networking/enable-cluster-wide-proxy.html) (see also the `proxyURL` fields).
func (o CheClusterSpecServerOutput) NonProxyHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.NonProxyHosts }).(pulumi.StringPtrOutput)
}

// Overrides the container image used in the Plugin registry deployment. This includes the image tag. Omit it or leave it empty to use the default container image provided by the operator.
func (o CheClusterSpecServerOutput) PluginRegistryImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.PluginRegistryImage }).(pulumi.StringPtrOutput)
}

// Plugin registry ingress custom settings
func (o CheClusterSpecServerOutput) PluginRegistryIngress() CheClusterSpecServerPluginRegistryIngressPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *CheClusterSpecServerPluginRegistryIngress {
		return v.PluginRegistryIngress
	}).(CheClusterSpecServerPluginRegistryIngressPtrOutput)
}

// Overrides the memory limit used in the Plugin registry deployment. Defaults to 256Mi.
func (o CheClusterSpecServerOutput) PluginRegistryMemoryLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.PluginRegistryMemoryLimit }).(pulumi.StringPtrOutput)
}

// Overrides the memory request used in the Plugin registry deployment. Defaults to 16Mi.
func (o CheClusterSpecServerOutput) PluginRegistryMemoryRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.PluginRegistryMemoryRequest }).(pulumi.StringPtrOutput)
}

// Overrides the image pull policy used in the Plugin registry deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
func (o CheClusterSpecServerOutput) PluginRegistryPullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.PluginRegistryPullPolicy }).(pulumi.StringPtrOutput)
}

// Plugin registry route custom settings
func (o CheClusterSpecServerOutput) PluginRegistryRoute() CheClusterSpecServerPluginRegistryRoutePtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *CheClusterSpecServerPluginRegistryRoute { return v.PluginRegistryRoute }).(CheClusterSpecServerPluginRegistryRoutePtrOutput)
}

// Public URL of the Plugin registry, that serves sample ready-to-use devfiles. You should set it ONLY if you use an external devfile registry (see the `externalPluginRegistry` field). By default this will be automatically calculated by the operator.
func (o CheClusterSpecServerOutput) PluginRegistryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.PluginRegistryUrl }).(pulumi.StringPtrOutput)
}

// Password of the proxy server Only use when proxy configuration is required (see also the `proxyURL`, `proxyUser` and `proxySecret` fields).
func (o CheClusterSpecServerOutput) ProxyPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.ProxyPassword }).(pulumi.StringPtrOutput)
}

// Port of the proxy server. Only use when configuring a proxy is required. (see also the `proxyURL` and `nonProxyHosts` fields).
func (o CheClusterSpecServerOutput) ProxyPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.ProxyPort }).(pulumi.StringPtrOutput)
}

// The secret that contains `user` and `password` for a proxy server. If the secret is defined then `proxyUser` and `proxyPassword` are ignored
func (o CheClusterSpecServerOutput) ProxySecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.ProxySecret }).(pulumi.StringPtrOutput)
}

// URL (protocol+hostname) of the proxy server. This drives the appropriate changes in the `JAVA_OPTS` and `https(s)_proxy` variables in the Che server and workspaces containers. Only use when configuring a proxy is required. Operator respects OpenShift cluster wide proxy configuration and no additional configuration is required, but defining `proxyUrl` in a custom resource leads to overrides the cluster proxy configuration with fields `proxyUrl`, `proxyPort`, `proxyUser` and `proxyPassword` from the custom resource. (see the doc https://docs.openshift.com/container-platform/4.4/networking/enable-cluster-wide-proxy.html) (see also the `proxyPort` and `nonProxyHosts` fields).
func (o CheClusterSpecServerOutput) ProxyURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.ProxyURL }).(pulumi.StringPtrOutput)
}

// User name of the proxy server. Only use when configuring a proxy is required (see also the `proxyURL`, `proxyPassword` and `proxySecret` fields).
func (o CheClusterSpecServerOutput) ProxyUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.ProxyUser }).(pulumi.StringPtrOutput)
}

// Deprecated. The value of this flag is ignored. Che operator will automatically detect if router certificate is self-signed. If so it will be propagated to Che server and some other components.
func (o CheClusterSpecServerOutput) SelfSignedCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *bool { return v.SelfSignedCert }).(pulumi.BoolPtrOutput)
}

// Sets the server and workspaces exposure type. Possible values are "multi-host", "single-host", "default-host". Defaults to "multi-host" which creates a separate ingress (or route on OpenShift) for every required endpoint. "single-host" makes Che exposed on a single hostname with workspaces exposed on subpaths. Please read the docs to learn about the limitations of this approach. Also consult the `singleHostExposureType` property to further configure how the operator and Che server make that happen on Kubernetes. "default-host" exposes che server on the host of the cluster. Please read the docs to learn about the limitations of this approach.
func (o CheClusterSpecServerOutput) ServerExposureStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.ServerExposureStrategy }).(pulumi.StringPtrOutput)
}

// Overrides the memory limit used in the Che server deployment. Defaults to 1Gi.
func (o CheClusterSpecServerOutput) ServerMemoryLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.ServerMemoryLimit }).(pulumi.StringPtrOutput)
}

// Overrides the memory request used in the Che server deployment. Defaults to 512Mi.
func (o CheClusterSpecServerOutput) ServerMemoryRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.ServerMemoryRequest }).(pulumi.StringPtrOutput)
}

// Name of the config-map with public certificates to add to Java trust store of the Che server. This is usually required when adding the OpenShift OAuth provider which has https endpoint signed with self-signed cert. So, Che server must be aware of its CA cert to be able to request it. This is disabled by default.
func (o CheClusterSpecServerOutput) ServerTrustStoreConfigMapName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.ServerTrustStoreConfigMapName }).(pulumi.StringPtrOutput)
}

// The labels that need to be present (and are put) on the configmaps representing the gateway configuration.
func (o CheClusterSpecServerOutput) SingleHostGatewayConfigMapLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v CheClusterSpecServer) map[string]string { return v.SingleHostGatewayConfigMapLabels }).(pulumi.StringMapOutput)
}

// The image used for the gateway sidecar that provides configuration to the gateway. Omit it or leave it empty to use the defaut container image provided by the operator.
func (o CheClusterSpecServerOutput) SingleHostGatewayConfigSidecarImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.SingleHostGatewayConfigSidecarImage }).(pulumi.StringPtrOutput)
}

// The image used for the gateway in the single host mode. Omit it or leave it empty to use the defaut container image provided by the operator.
func (o CheClusterSpecServerOutput) SingleHostGatewayImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.SingleHostGatewayImage }).(pulumi.StringPtrOutput)
}

// Deprecated. Instructs the operator to deploy Che in TLS mode. This is enabled by default. Disabling TLS may cause malfunction of some Che components.
func (o CheClusterSpecServerOutput) TlsSupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *bool { return v.TlsSupport }).(pulumi.BoolPtrOutput)
}

// Use internal cluster svc names to communicate between components to speed up the traffic and avoid proxy issues. The default value is `true`.
func (o CheClusterSpecServerOutput) UseInternalClusterSVCNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *bool { return v.UseInternalClusterSVCNames }).(pulumi.BoolPtrOutput)
}

// Defines Kubernetes default namespace in which user's workspaces are created if user does not override it. It's possible to use <username>, <userid> and <workspaceid> placeholders (e.g.: che-workspace-<username>). In that case, new namespace will be created for each user (or workspace). Is used by OpenShift infra as well to specify Project
func (o CheClusterSpecServerOutput) WorkspaceNamespaceDefault() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServer) *string { return v.WorkspaceNamespaceDefault }).(pulumi.StringPtrOutput)
}

type CheClusterSpecServerPtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecServer)(nil)).Elem()
}

func (o CheClusterSpecServerPtrOutput) ToCheClusterSpecServerPtrOutput() CheClusterSpecServerPtrOutput {
	return o
}

func (o CheClusterSpecServerPtrOutput) ToCheClusterSpecServerPtrOutputWithContext(ctx context.Context) CheClusterSpecServerPtrOutput {
	return o
}

func (o CheClusterSpecServerPtrOutput) Elem() CheClusterSpecServerOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) CheClusterSpecServer { return *v }).(CheClusterSpecServerOutput)
}

// Optional hostname (or url) to an alternate container registry to pull images from. This value overrides the container registry hostname defined in all the default container images involved in a Che deployment. This is particularly useful to install Che in an air-gapped environment.
func (o CheClusterSpecServerPtrOutput) AirGapContainerRegistryHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.AirGapContainerRegistryHostname
	}).(pulumi.StringPtrOutput)
}

// Optional repository name of an alternate container registry to pull images from. This value overrides the container registry organization defined in all the default container images involved in a Che deployment. This is particularly useful to install Che in an air-gapped environment.
func (o CheClusterSpecServerPtrOutput) AirGapContainerRegistryOrganization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.AirGapContainerRegistryOrganization
	}).(pulumi.StringPtrOutput)
}

// Defines if a user is able to specify Kubernetes namespace (or OpenShift project) different from the default. It's NOT RECOMMENDED to configured true without OAuth configured. This property is also used by the OpenShift infra.
func (o CheClusterSpecServerPtrOutput) AllowUserDefinedWorkspaceNamespaces() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *bool {
		if v == nil {
			return nil
		}
		return v.AllowUserDefinedWorkspaceNamespaces
	}).(pulumi.BoolPtrOutput)
}

// Comma-separated list of ClusterRoles that will be assigned to che ServiceAccount. Be aware that che-operator has to already have all permissions in these ClusterRoles to be able to grant them.
func (o CheClusterSpecServerPtrOutput) CheClusterRoles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.CheClusterRoles
	}).(pulumi.StringPtrOutput)
}

// Enables the debug mode for Che server. Defaults to `false`.
func (o CheClusterSpecServerPtrOutput) CheDebug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.CheDebug
	}).(pulumi.StringPtrOutput)
}

// Flavor of the installation. This is either `che` for upstream Che installations, or `codeready` for CodeReady Workspaces installation. In most cases the default value should not be overridden.
func (o CheClusterSpecServerPtrOutput) CheFlavor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.CheFlavor
	}).(pulumi.StringPtrOutput)
}

// Public hostname of the installed Che server. If value is omitted then it will be automatically set by the operator. (see the `cheHostTLSSecret` field).
func (o CheClusterSpecServerPtrOutput) CheHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.CheHost
	}).(pulumi.StringPtrOutput)
}

// Name of a secret containing certificates to secure ingress/route for the custom hostname of the installed Che server. (see the `cheHost` field).
func (o CheClusterSpecServerPtrOutput) CheHostTLSSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.CheHostTLSSecret
	}).(pulumi.StringPtrOutput)
}

// Overrides the container image used in Che deployment. This does NOT include the container image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
func (o CheClusterSpecServerPtrOutput) CheImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.CheImage
	}).(pulumi.StringPtrOutput)
}

// Overrides the image pull policy used in Che deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
func (o CheClusterSpecServerPtrOutput) CheImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.CheImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Overrides the tag of the container image used in Che deployment. Omit it or leave it empty to use the defaut image tag provided by the operator.
func (o CheClusterSpecServerPtrOutput) CheImageTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.CheImageTag
	}).(pulumi.StringPtrOutput)
}

// Log level for the Che server: `INFO` or `DEBUG`. Defaults to `INFO`.
func (o CheClusterSpecServerPtrOutput) CheLogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.CheLogLevel
	}).(pulumi.StringPtrOutput)
}

// Che server ingress custom settings
func (o CheClusterSpecServerPtrOutput) CheServerIngress() CheClusterSpecServerCheServerIngressPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *CheClusterSpecServerCheServerIngress {
		if v == nil {
			return nil
		}
		return v.CheServerIngress
	}).(CheClusterSpecServerCheServerIngressPtrOutput)
}

// Che server route custom settings
func (o CheClusterSpecServerPtrOutput) CheServerRoute() CheClusterSpecServerCheServerRoutePtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *CheClusterSpecServerCheServerRoute {
		if v == nil {
			return nil
		}
		return v.CheServerRoute
	}).(CheClusterSpecServerCheServerRoutePtrOutput)
}

// Custom cluster role bound to the user for the Che workspaces. The default roles are used if this is omitted or left blank.
func (o CheClusterSpecServerPtrOutput) CheWorkspaceClusterRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.CheWorkspaceClusterRole
	}).(pulumi.StringPtrOutput)
}

// Map of additional environment variables that will be applied in the generated `che` config map to be used by the Che server, in addition to the values already generated from other fields of the `CheCluster` custom resource (CR). If `customCheProperties` contains a property that would be normally generated in `che` config map from other CR fields, then the value defined in the `customCheProperties` will be used instead.
func (o CheClusterSpecServerPtrOutput) CustomCheProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) map[string]string {
		if v == nil {
			return nil
		}
		return v.CustomCheProperties
	}).(pulumi.StringMapOutput)
}

// Overrides the container image used in the Devfile registry deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
func (o CheClusterSpecServerPtrOutput) DevfileRegistryImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.DevfileRegistryImage
	}).(pulumi.StringPtrOutput)
}

// Devfile registry ingress custom settings
func (o CheClusterSpecServerPtrOutput) DevfileRegistryIngress() CheClusterSpecServerDevfileRegistryIngressPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *CheClusterSpecServerDevfileRegistryIngress {
		if v == nil {
			return nil
		}
		return v.DevfileRegistryIngress
	}).(CheClusterSpecServerDevfileRegistryIngressPtrOutput)
}

// Overrides the memory limit used in the Devfile registry deployment. Defaults to 256Mi.
func (o CheClusterSpecServerPtrOutput) DevfileRegistryMemoryLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.DevfileRegistryMemoryLimit
	}).(pulumi.StringPtrOutput)
}

// Overrides the memory request used in the Devfile registry deployment. Defaults to 16Mi.
func (o CheClusterSpecServerPtrOutput) DevfileRegistryMemoryRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.DevfileRegistryMemoryRequest
	}).(pulumi.StringPtrOutput)
}

// Overrides the image pull policy used in the Devfile registry deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
func (o CheClusterSpecServerPtrOutput) DevfileRegistryPullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.DevfileRegistryPullPolicy
	}).(pulumi.StringPtrOutput)
}

// Devfile registry route custom settings
func (o CheClusterSpecServerPtrOutput) DevfileRegistryRoute() CheClusterSpecServerDevfileRegistryRoutePtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *CheClusterSpecServerDevfileRegistryRoute {
		if v == nil {
			return nil
		}
		return v.DevfileRegistryRoute
	}).(CheClusterSpecServerDevfileRegistryRoutePtrOutput)
}

// Public URL of the Devfile registry, that serves sample, ready-to-use devfiles. You should set it ONLY if you use an external devfile registry (see the `externalDevfileRegistry` field). By default this will be automatically calculated by the operator.
func (o CheClusterSpecServerPtrOutput) DevfileRegistryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.DevfileRegistryUrl
	}).(pulumi.StringPtrOutput)
}

// Instructs the operator on whether or not to deploy a dedicated Devfile registry server. By default a dedicated devfile registry server is started. But if `externalDevfileRegistry` is `true`, then no such dedicated server will be started by the operator and you will have to manually set the `devfileRegistryUrl` field
func (o CheClusterSpecServerPtrOutput) ExternalDevfileRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *bool {
		if v == nil {
			return nil
		}
		return v.ExternalDevfileRegistry
	}).(pulumi.BoolPtrOutput)
}

// Instructs the operator on whether or not to deploy a dedicated Plugin registry server. By default a dedicated plugin registry server is started. But if `externalPluginRegistry` is `true`, then no such dedicated server will be started by the operator and you will have to manually set the `pluginRegistryUrl` field.
func (o CheClusterSpecServerPtrOutput) ExternalPluginRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *bool {
		if v == nil {
			return nil
		}
		return v.ExternalPluginRegistry
	}).(pulumi.BoolPtrOutput)
}

// If enabled, then the certificate from `che-git-self-signed-cert` config map will be propagated to the Che components and provide particular configuration for Git.
func (o CheClusterSpecServerPtrOutput) GitSelfSignedCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *bool {
		if v == nil {
			return nil
		}
		return v.GitSelfSignedCert
	}).(pulumi.BoolPtrOutput)
}

// List of hosts that should not use the configured proxy. So specify wild card domain use the following form `.<DOMAIN>` and `|` as delimiter, eg: `localhost|.my.host.com|123.42.12.32` Only use when configuring a proxy is required. Operator respects OpenShift cluster wide proxy configuration and no additional configuration is required, but defining `nonProxyHosts` in a custom resource leads to merging non proxy hosts lists from the cluster proxy configuration and ones defined in the custom resources. (see the doc https://docs.openshift.com/container-platform/4.4/networking/enable-cluster-wide-proxy.html) (see also the `proxyURL` fields).
func (o CheClusterSpecServerPtrOutput) NonProxyHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.NonProxyHosts
	}).(pulumi.StringPtrOutput)
}

// Overrides the container image used in the Plugin registry deployment. This includes the image tag. Omit it or leave it empty to use the default container image provided by the operator.
func (o CheClusterSpecServerPtrOutput) PluginRegistryImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.PluginRegistryImage
	}).(pulumi.StringPtrOutput)
}

// Plugin registry ingress custom settings
func (o CheClusterSpecServerPtrOutput) PluginRegistryIngress() CheClusterSpecServerPluginRegistryIngressPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *CheClusterSpecServerPluginRegistryIngress {
		if v == nil {
			return nil
		}
		return v.PluginRegistryIngress
	}).(CheClusterSpecServerPluginRegistryIngressPtrOutput)
}

// Overrides the memory limit used in the Plugin registry deployment. Defaults to 256Mi.
func (o CheClusterSpecServerPtrOutput) PluginRegistryMemoryLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.PluginRegistryMemoryLimit
	}).(pulumi.StringPtrOutput)
}

// Overrides the memory request used in the Plugin registry deployment. Defaults to 16Mi.
func (o CheClusterSpecServerPtrOutput) PluginRegistryMemoryRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.PluginRegistryMemoryRequest
	}).(pulumi.StringPtrOutput)
}

// Overrides the image pull policy used in the Plugin registry deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
func (o CheClusterSpecServerPtrOutput) PluginRegistryPullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.PluginRegistryPullPolicy
	}).(pulumi.StringPtrOutput)
}

// Plugin registry route custom settings
func (o CheClusterSpecServerPtrOutput) PluginRegistryRoute() CheClusterSpecServerPluginRegistryRoutePtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *CheClusterSpecServerPluginRegistryRoute {
		if v == nil {
			return nil
		}
		return v.PluginRegistryRoute
	}).(CheClusterSpecServerPluginRegistryRoutePtrOutput)
}

// Public URL of the Plugin registry, that serves sample ready-to-use devfiles. You should set it ONLY if you use an external devfile registry (see the `externalPluginRegistry` field). By default this will be automatically calculated by the operator.
func (o CheClusterSpecServerPtrOutput) PluginRegistryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.PluginRegistryUrl
	}).(pulumi.StringPtrOutput)
}

// Password of the proxy server Only use when proxy configuration is required (see also the `proxyURL`, `proxyUser` and `proxySecret` fields).
func (o CheClusterSpecServerPtrOutput) ProxyPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.ProxyPassword
	}).(pulumi.StringPtrOutput)
}

// Port of the proxy server. Only use when configuring a proxy is required. (see also the `proxyURL` and `nonProxyHosts` fields).
func (o CheClusterSpecServerPtrOutput) ProxyPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.ProxyPort
	}).(pulumi.StringPtrOutput)
}

// The secret that contains `user` and `password` for a proxy server. If the secret is defined then `proxyUser` and `proxyPassword` are ignored
func (o CheClusterSpecServerPtrOutput) ProxySecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.ProxySecret
	}).(pulumi.StringPtrOutput)
}

// URL (protocol+hostname) of the proxy server. This drives the appropriate changes in the `JAVA_OPTS` and `https(s)_proxy` variables in the Che server and workspaces containers. Only use when configuring a proxy is required. Operator respects OpenShift cluster wide proxy configuration and no additional configuration is required, but defining `proxyUrl` in a custom resource leads to overrides the cluster proxy configuration with fields `proxyUrl`, `proxyPort`, `proxyUser` and `proxyPassword` from the custom resource. (see the doc https://docs.openshift.com/container-platform/4.4/networking/enable-cluster-wide-proxy.html) (see also the `proxyPort` and `nonProxyHosts` fields).
func (o CheClusterSpecServerPtrOutput) ProxyURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.ProxyURL
	}).(pulumi.StringPtrOutput)
}

// User name of the proxy server. Only use when configuring a proxy is required (see also the `proxyURL`, `proxyPassword` and `proxySecret` fields).
func (o CheClusterSpecServerPtrOutput) ProxyUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.ProxyUser
	}).(pulumi.StringPtrOutput)
}

// Deprecated. The value of this flag is ignored. Che operator will automatically detect if router certificate is self-signed. If so it will be propagated to Che server and some other components.
func (o CheClusterSpecServerPtrOutput) SelfSignedCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *bool {
		if v == nil {
			return nil
		}
		return v.SelfSignedCert
	}).(pulumi.BoolPtrOutput)
}

// Sets the server and workspaces exposure type. Possible values are "multi-host", "single-host", "default-host". Defaults to "multi-host" which creates a separate ingress (or route on OpenShift) for every required endpoint. "single-host" makes Che exposed on a single hostname with workspaces exposed on subpaths. Please read the docs to learn about the limitations of this approach. Also consult the `singleHostExposureType` property to further configure how the operator and Che server make that happen on Kubernetes. "default-host" exposes che server on the host of the cluster. Please read the docs to learn about the limitations of this approach.
func (o CheClusterSpecServerPtrOutput) ServerExposureStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.ServerExposureStrategy
	}).(pulumi.StringPtrOutput)
}

// Overrides the memory limit used in the Che server deployment. Defaults to 1Gi.
func (o CheClusterSpecServerPtrOutput) ServerMemoryLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.ServerMemoryLimit
	}).(pulumi.StringPtrOutput)
}

// Overrides the memory request used in the Che server deployment. Defaults to 512Mi.
func (o CheClusterSpecServerPtrOutput) ServerMemoryRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.ServerMemoryRequest
	}).(pulumi.StringPtrOutput)
}

// Name of the config-map with public certificates to add to Java trust store of the Che server. This is usually required when adding the OpenShift OAuth provider which has https endpoint signed with self-signed cert. So, Che server must be aware of its CA cert to be able to request it. This is disabled by default.
func (o CheClusterSpecServerPtrOutput) ServerTrustStoreConfigMapName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.ServerTrustStoreConfigMapName
	}).(pulumi.StringPtrOutput)
}

// The labels that need to be present (and are put) on the configmaps representing the gateway configuration.
func (o CheClusterSpecServerPtrOutput) SingleHostGatewayConfigMapLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) map[string]string {
		if v == nil {
			return nil
		}
		return v.SingleHostGatewayConfigMapLabels
	}).(pulumi.StringMapOutput)
}

// The image used for the gateway sidecar that provides configuration to the gateway. Omit it or leave it empty to use the defaut container image provided by the operator.
func (o CheClusterSpecServerPtrOutput) SingleHostGatewayConfigSidecarImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.SingleHostGatewayConfigSidecarImage
	}).(pulumi.StringPtrOutput)
}

// The image used for the gateway in the single host mode. Omit it or leave it empty to use the defaut container image provided by the operator.
func (o CheClusterSpecServerPtrOutput) SingleHostGatewayImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.SingleHostGatewayImage
	}).(pulumi.StringPtrOutput)
}

// Deprecated. Instructs the operator to deploy Che in TLS mode. This is enabled by default. Disabling TLS may cause malfunction of some Che components.
func (o CheClusterSpecServerPtrOutput) TlsSupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *bool {
		if v == nil {
			return nil
		}
		return v.TlsSupport
	}).(pulumi.BoolPtrOutput)
}

// Use internal cluster svc names to communicate between components to speed up the traffic and avoid proxy issues. The default value is `true`.
func (o CheClusterSpecServerPtrOutput) UseInternalClusterSVCNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *bool {
		if v == nil {
			return nil
		}
		return v.UseInternalClusterSVCNames
	}).(pulumi.BoolPtrOutput)
}

// Defines Kubernetes default namespace in which user's workspaces are created if user does not override it. It's possible to use <username>, <userid> and <workspaceid> placeholders (e.g.: che-workspace-<username>). In that case, new namespace will be created for each user (or workspace). Is used by OpenShift infra as well to specify Project
func (o CheClusterSpecServerPtrOutput) WorkspaceNamespaceDefault() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServer) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceNamespaceDefault
	}).(pulumi.StringPtrOutput)
}

// Che server ingress custom settings
type CheClusterSpecServerCheServerIngress struct {
	// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
	Labels *string `pulumi:"labels"`
}

// CheClusterSpecServerCheServerIngressInput is an input type that accepts CheClusterSpecServerCheServerIngressArgs and CheClusterSpecServerCheServerIngressOutput values.
// You can construct a concrete instance of `CheClusterSpecServerCheServerIngressInput` via:
//
//          CheClusterSpecServerCheServerIngressArgs{...}
type CheClusterSpecServerCheServerIngressInput interface {
	pulumi.Input

	ToCheClusterSpecServerCheServerIngressOutput() CheClusterSpecServerCheServerIngressOutput
	ToCheClusterSpecServerCheServerIngressOutputWithContext(context.Context) CheClusterSpecServerCheServerIngressOutput
}

// Che server ingress custom settings
type CheClusterSpecServerCheServerIngressArgs struct {
	// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
	Labels pulumi.StringPtrInput `pulumi:"labels"`
}

func (CheClusterSpecServerCheServerIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServerCheServerIngress)(nil)).Elem()
}

func (i CheClusterSpecServerCheServerIngressArgs) ToCheClusterSpecServerCheServerIngressOutput() CheClusterSpecServerCheServerIngressOutput {
	return i.ToCheClusterSpecServerCheServerIngressOutputWithContext(context.Background())
}

func (i CheClusterSpecServerCheServerIngressArgs) ToCheClusterSpecServerCheServerIngressOutputWithContext(ctx context.Context) CheClusterSpecServerCheServerIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerCheServerIngressOutput)
}

func (i CheClusterSpecServerCheServerIngressArgs) ToCheClusterSpecServerCheServerIngressPtrOutput() CheClusterSpecServerCheServerIngressPtrOutput {
	return i.ToCheClusterSpecServerCheServerIngressPtrOutputWithContext(context.Background())
}

func (i CheClusterSpecServerCheServerIngressArgs) ToCheClusterSpecServerCheServerIngressPtrOutputWithContext(ctx context.Context) CheClusterSpecServerCheServerIngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerCheServerIngressOutput).ToCheClusterSpecServerCheServerIngressPtrOutputWithContext(ctx)
}

// CheClusterSpecServerCheServerIngressPtrInput is an input type that accepts CheClusterSpecServerCheServerIngressArgs, CheClusterSpecServerCheServerIngressPtr and CheClusterSpecServerCheServerIngressPtrOutput values.
// You can construct a concrete instance of `CheClusterSpecServerCheServerIngressPtrInput` via:
//
//          CheClusterSpecServerCheServerIngressArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecServerCheServerIngressPtrInput interface {
	pulumi.Input

	ToCheClusterSpecServerCheServerIngressPtrOutput() CheClusterSpecServerCheServerIngressPtrOutput
	ToCheClusterSpecServerCheServerIngressPtrOutputWithContext(context.Context) CheClusterSpecServerCheServerIngressPtrOutput
}

type cheClusterSpecServerCheServerIngressPtrType CheClusterSpecServerCheServerIngressArgs

func CheClusterSpecServerCheServerIngressPtr(v *CheClusterSpecServerCheServerIngressArgs) CheClusterSpecServerCheServerIngressPtrInput {
	return (*cheClusterSpecServerCheServerIngressPtrType)(v)
}

func (*cheClusterSpecServerCheServerIngressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecServerCheServerIngress)(nil)).Elem()
}

func (i *cheClusterSpecServerCheServerIngressPtrType) ToCheClusterSpecServerCheServerIngressPtrOutput() CheClusterSpecServerCheServerIngressPtrOutput {
	return i.ToCheClusterSpecServerCheServerIngressPtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecServerCheServerIngressPtrType) ToCheClusterSpecServerCheServerIngressPtrOutputWithContext(ctx context.Context) CheClusterSpecServerCheServerIngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerCheServerIngressPtrOutput)
}

// Che server ingress custom settings
type CheClusterSpecServerCheServerIngressOutput struct{ *pulumi.OutputState }

func (CheClusterSpecServerCheServerIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServerCheServerIngress)(nil)).Elem()
}

func (o CheClusterSpecServerCheServerIngressOutput) ToCheClusterSpecServerCheServerIngressOutput() CheClusterSpecServerCheServerIngressOutput {
	return o
}

func (o CheClusterSpecServerCheServerIngressOutput) ToCheClusterSpecServerCheServerIngressOutputWithContext(ctx context.Context) CheClusterSpecServerCheServerIngressOutput {
	return o
}

func (o CheClusterSpecServerCheServerIngressOutput) ToCheClusterSpecServerCheServerIngressPtrOutput() CheClusterSpecServerCheServerIngressPtrOutput {
	return o.ToCheClusterSpecServerCheServerIngressPtrOutputWithContext(context.Background())
}

func (o CheClusterSpecServerCheServerIngressOutput) ToCheClusterSpecServerCheServerIngressPtrOutputWithContext(ctx context.Context) CheClusterSpecServerCheServerIngressPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServerCheServerIngress) *CheClusterSpecServerCheServerIngress {
		return &v
	}).(CheClusterSpecServerCheServerIngressPtrOutput)
}

// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
func (o CheClusterSpecServerCheServerIngressOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServerCheServerIngress) *string { return v.Labels }).(pulumi.StringPtrOutput)
}

type CheClusterSpecServerCheServerIngressPtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecServerCheServerIngressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecServerCheServerIngress)(nil)).Elem()
}

func (o CheClusterSpecServerCheServerIngressPtrOutput) ToCheClusterSpecServerCheServerIngressPtrOutput() CheClusterSpecServerCheServerIngressPtrOutput {
	return o
}

func (o CheClusterSpecServerCheServerIngressPtrOutput) ToCheClusterSpecServerCheServerIngressPtrOutputWithContext(ctx context.Context) CheClusterSpecServerCheServerIngressPtrOutput {
	return o
}

func (o CheClusterSpecServerCheServerIngressPtrOutput) Elem() CheClusterSpecServerCheServerIngressOutput {
	return o.ApplyT(func(v *CheClusterSpecServerCheServerIngress) CheClusterSpecServerCheServerIngress { return *v }).(CheClusterSpecServerCheServerIngressOutput)
}

// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
func (o CheClusterSpecServerCheServerIngressPtrOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServerCheServerIngress) *string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringPtrOutput)
}

// Che server route custom settings
type CheClusterSpecServerCheServerRoute struct {
	// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
	Labels *string `pulumi:"labels"`
}

// CheClusterSpecServerCheServerRouteInput is an input type that accepts CheClusterSpecServerCheServerRouteArgs and CheClusterSpecServerCheServerRouteOutput values.
// You can construct a concrete instance of `CheClusterSpecServerCheServerRouteInput` via:
//
//          CheClusterSpecServerCheServerRouteArgs{...}
type CheClusterSpecServerCheServerRouteInput interface {
	pulumi.Input

	ToCheClusterSpecServerCheServerRouteOutput() CheClusterSpecServerCheServerRouteOutput
	ToCheClusterSpecServerCheServerRouteOutputWithContext(context.Context) CheClusterSpecServerCheServerRouteOutput
}

// Che server route custom settings
type CheClusterSpecServerCheServerRouteArgs struct {
	// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
	Labels pulumi.StringPtrInput `pulumi:"labels"`
}

func (CheClusterSpecServerCheServerRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServerCheServerRoute)(nil)).Elem()
}

func (i CheClusterSpecServerCheServerRouteArgs) ToCheClusterSpecServerCheServerRouteOutput() CheClusterSpecServerCheServerRouteOutput {
	return i.ToCheClusterSpecServerCheServerRouteOutputWithContext(context.Background())
}

func (i CheClusterSpecServerCheServerRouteArgs) ToCheClusterSpecServerCheServerRouteOutputWithContext(ctx context.Context) CheClusterSpecServerCheServerRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerCheServerRouteOutput)
}

func (i CheClusterSpecServerCheServerRouteArgs) ToCheClusterSpecServerCheServerRoutePtrOutput() CheClusterSpecServerCheServerRoutePtrOutput {
	return i.ToCheClusterSpecServerCheServerRoutePtrOutputWithContext(context.Background())
}

func (i CheClusterSpecServerCheServerRouteArgs) ToCheClusterSpecServerCheServerRoutePtrOutputWithContext(ctx context.Context) CheClusterSpecServerCheServerRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerCheServerRouteOutput).ToCheClusterSpecServerCheServerRoutePtrOutputWithContext(ctx)
}

// CheClusterSpecServerCheServerRoutePtrInput is an input type that accepts CheClusterSpecServerCheServerRouteArgs, CheClusterSpecServerCheServerRoutePtr and CheClusterSpecServerCheServerRoutePtrOutput values.
// You can construct a concrete instance of `CheClusterSpecServerCheServerRoutePtrInput` via:
//
//          CheClusterSpecServerCheServerRouteArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecServerCheServerRoutePtrInput interface {
	pulumi.Input

	ToCheClusterSpecServerCheServerRoutePtrOutput() CheClusterSpecServerCheServerRoutePtrOutput
	ToCheClusterSpecServerCheServerRoutePtrOutputWithContext(context.Context) CheClusterSpecServerCheServerRoutePtrOutput
}

type cheClusterSpecServerCheServerRoutePtrType CheClusterSpecServerCheServerRouteArgs

func CheClusterSpecServerCheServerRoutePtr(v *CheClusterSpecServerCheServerRouteArgs) CheClusterSpecServerCheServerRoutePtrInput {
	return (*cheClusterSpecServerCheServerRoutePtrType)(v)
}

func (*cheClusterSpecServerCheServerRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecServerCheServerRoute)(nil)).Elem()
}

func (i *cheClusterSpecServerCheServerRoutePtrType) ToCheClusterSpecServerCheServerRoutePtrOutput() CheClusterSpecServerCheServerRoutePtrOutput {
	return i.ToCheClusterSpecServerCheServerRoutePtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecServerCheServerRoutePtrType) ToCheClusterSpecServerCheServerRoutePtrOutputWithContext(ctx context.Context) CheClusterSpecServerCheServerRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerCheServerRoutePtrOutput)
}

// Che server route custom settings
type CheClusterSpecServerCheServerRouteOutput struct{ *pulumi.OutputState }

func (CheClusterSpecServerCheServerRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServerCheServerRoute)(nil)).Elem()
}

func (o CheClusterSpecServerCheServerRouteOutput) ToCheClusterSpecServerCheServerRouteOutput() CheClusterSpecServerCheServerRouteOutput {
	return o
}

func (o CheClusterSpecServerCheServerRouteOutput) ToCheClusterSpecServerCheServerRouteOutputWithContext(ctx context.Context) CheClusterSpecServerCheServerRouteOutput {
	return o
}

func (o CheClusterSpecServerCheServerRouteOutput) ToCheClusterSpecServerCheServerRoutePtrOutput() CheClusterSpecServerCheServerRoutePtrOutput {
	return o.ToCheClusterSpecServerCheServerRoutePtrOutputWithContext(context.Background())
}

func (o CheClusterSpecServerCheServerRouteOutput) ToCheClusterSpecServerCheServerRoutePtrOutputWithContext(ctx context.Context) CheClusterSpecServerCheServerRoutePtrOutput {
	return o.ApplyT(func(v CheClusterSpecServerCheServerRoute) *CheClusterSpecServerCheServerRoute {
		return &v
	}).(CheClusterSpecServerCheServerRoutePtrOutput)
}

// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
func (o CheClusterSpecServerCheServerRouteOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServerCheServerRoute) *string { return v.Labels }).(pulumi.StringPtrOutput)
}

type CheClusterSpecServerCheServerRoutePtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecServerCheServerRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecServerCheServerRoute)(nil)).Elem()
}

func (o CheClusterSpecServerCheServerRoutePtrOutput) ToCheClusterSpecServerCheServerRoutePtrOutput() CheClusterSpecServerCheServerRoutePtrOutput {
	return o
}

func (o CheClusterSpecServerCheServerRoutePtrOutput) ToCheClusterSpecServerCheServerRoutePtrOutputWithContext(ctx context.Context) CheClusterSpecServerCheServerRoutePtrOutput {
	return o
}

func (o CheClusterSpecServerCheServerRoutePtrOutput) Elem() CheClusterSpecServerCheServerRouteOutput {
	return o.ApplyT(func(v *CheClusterSpecServerCheServerRoute) CheClusterSpecServerCheServerRoute { return *v }).(CheClusterSpecServerCheServerRouteOutput)
}

// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
func (o CheClusterSpecServerCheServerRoutePtrOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServerCheServerRoute) *string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringPtrOutput)
}

// Map of additional environment variables that will be applied in the generated `che` config map to be used by the Che server, in addition to the values already generated from other fields of the `CheCluster` custom resource (CR). If `customCheProperties` contains a property that would be normally generated in `che` config map from other CR fields, then the value defined in the `customCheProperties` will be used instead.
type CheClusterSpecServerCustomCheProperties struct {
}

// CheClusterSpecServerCustomChePropertiesInput is an input type that accepts CheClusterSpecServerCustomChePropertiesArgs and CheClusterSpecServerCustomChePropertiesOutput values.
// You can construct a concrete instance of `CheClusterSpecServerCustomChePropertiesInput` via:
//
//          CheClusterSpecServerCustomChePropertiesArgs{...}
type CheClusterSpecServerCustomChePropertiesInput interface {
	pulumi.Input

	ToCheClusterSpecServerCustomChePropertiesOutput() CheClusterSpecServerCustomChePropertiesOutput
	ToCheClusterSpecServerCustomChePropertiesOutputWithContext(context.Context) CheClusterSpecServerCustomChePropertiesOutput
}

// Map of additional environment variables that will be applied in the generated `che` config map to be used by the Che server, in addition to the values already generated from other fields of the `CheCluster` custom resource (CR). If `customCheProperties` contains a property that would be normally generated in `che` config map from other CR fields, then the value defined in the `customCheProperties` will be used instead.
type CheClusterSpecServerCustomChePropertiesArgs struct {
}

func (CheClusterSpecServerCustomChePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServerCustomCheProperties)(nil)).Elem()
}

func (i CheClusterSpecServerCustomChePropertiesArgs) ToCheClusterSpecServerCustomChePropertiesOutput() CheClusterSpecServerCustomChePropertiesOutput {
	return i.ToCheClusterSpecServerCustomChePropertiesOutputWithContext(context.Background())
}

func (i CheClusterSpecServerCustomChePropertiesArgs) ToCheClusterSpecServerCustomChePropertiesOutputWithContext(ctx context.Context) CheClusterSpecServerCustomChePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerCustomChePropertiesOutput)
}

// Map of additional environment variables that will be applied in the generated `che` config map to be used by the Che server, in addition to the values already generated from other fields of the `CheCluster` custom resource (CR). If `customCheProperties` contains a property that would be normally generated in `che` config map from other CR fields, then the value defined in the `customCheProperties` will be used instead.
type CheClusterSpecServerCustomChePropertiesOutput struct{ *pulumi.OutputState }

func (CheClusterSpecServerCustomChePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServerCustomCheProperties)(nil)).Elem()
}

func (o CheClusterSpecServerCustomChePropertiesOutput) ToCheClusterSpecServerCustomChePropertiesOutput() CheClusterSpecServerCustomChePropertiesOutput {
	return o
}

func (o CheClusterSpecServerCustomChePropertiesOutput) ToCheClusterSpecServerCustomChePropertiesOutputWithContext(ctx context.Context) CheClusterSpecServerCustomChePropertiesOutput {
	return o
}

// Devfile registry ingress custom settings
type CheClusterSpecServerDevfileRegistryIngress struct {
	// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
	Labels *string `pulumi:"labels"`
}

// CheClusterSpecServerDevfileRegistryIngressInput is an input type that accepts CheClusterSpecServerDevfileRegistryIngressArgs and CheClusterSpecServerDevfileRegistryIngressOutput values.
// You can construct a concrete instance of `CheClusterSpecServerDevfileRegistryIngressInput` via:
//
//          CheClusterSpecServerDevfileRegistryIngressArgs{...}
type CheClusterSpecServerDevfileRegistryIngressInput interface {
	pulumi.Input

	ToCheClusterSpecServerDevfileRegistryIngressOutput() CheClusterSpecServerDevfileRegistryIngressOutput
	ToCheClusterSpecServerDevfileRegistryIngressOutputWithContext(context.Context) CheClusterSpecServerDevfileRegistryIngressOutput
}

// Devfile registry ingress custom settings
type CheClusterSpecServerDevfileRegistryIngressArgs struct {
	// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
	Labels pulumi.StringPtrInput `pulumi:"labels"`
}

func (CheClusterSpecServerDevfileRegistryIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServerDevfileRegistryIngress)(nil)).Elem()
}

func (i CheClusterSpecServerDevfileRegistryIngressArgs) ToCheClusterSpecServerDevfileRegistryIngressOutput() CheClusterSpecServerDevfileRegistryIngressOutput {
	return i.ToCheClusterSpecServerDevfileRegistryIngressOutputWithContext(context.Background())
}

func (i CheClusterSpecServerDevfileRegistryIngressArgs) ToCheClusterSpecServerDevfileRegistryIngressOutputWithContext(ctx context.Context) CheClusterSpecServerDevfileRegistryIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerDevfileRegistryIngressOutput)
}

func (i CheClusterSpecServerDevfileRegistryIngressArgs) ToCheClusterSpecServerDevfileRegistryIngressPtrOutput() CheClusterSpecServerDevfileRegistryIngressPtrOutput {
	return i.ToCheClusterSpecServerDevfileRegistryIngressPtrOutputWithContext(context.Background())
}

func (i CheClusterSpecServerDevfileRegistryIngressArgs) ToCheClusterSpecServerDevfileRegistryIngressPtrOutputWithContext(ctx context.Context) CheClusterSpecServerDevfileRegistryIngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerDevfileRegistryIngressOutput).ToCheClusterSpecServerDevfileRegistryIngressPtrOutputWithContext(ctx)
}

// CheClusterSpecServerDevfileRegistryIngressPtrInput is an input type that accepts CheClusterSpecServerDevfileRegistryIngressArgs, CheClusterSpecServerDevfileRegistryIngressPtr and CheClusterSpecServerDevfileRegistryIngressPtrOutput values.
// You can construct a concrete instance of `CheClusterSpecServerDevfileRegistryIngressPtrInput` via:
//
//          CheClusterSpecServerDevfileRegistryIngressArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecServerDevfileRegistryIngressPtrInput interface {
	pulumi.Input

	ToCheClusterSpecServerDevfileRegistryIngressPtrOutput() CheClusterSpecServerDevfileRegistryIngressPtrOutput
	ToCheClusterSpecServerDevfileRegistryIngressPtrOutputWithContext(context.Context) CheClusterSpecServerDevfileRegistryIngressPtrOutput
}

type cheClusterSpecServerDevfileRegistryIngressPtrType CheClusterSpecServerDevfileRegistryIngressArgs

func CheClusterSpecServerDevfileRegistryIngressPtr(v *CheClusterSpecServerDevfileRegistryIngressArgs) CheClusterSpecServerDevfileRegistryIngressPtrInput {
	return (*cheClusterSpecServerDevfileRegistryIngressPtrType)(v)
}

func (*cheClusterSpecServerDevfileRegistryIngressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecServerDevfileRegistryIngress)(nil)).Elem()
}

func (i *cheClusterSpecServerDevfileRegistryIngressPtrType) ToCheClusterSpecServerDevfileRegistryIngressPtrOutput() CheClusterSpecServerDevfileRegistryIngressPtrOutput {
	return i.ToCheClusterSpecServerDevfileRegistryIngressPtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecServerDevfileRegistryIngressPtrType) ToCheClusterSpecServerDevfileRegistryIngressPtrOutputWithContext(ctx context.Context) CheClusterSpecServerDevfileRegistryIngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerDevfileRegistryIngressPtrOutput)
}

// Devfile registry ingress custom settings
type CheClusterSpecServerDevfileRegistryIngressOutput struct{ *pulumi.OutputState }

func (CheClusterSpecServerDevfileRegistryIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServerDevfileRegistryIngress)(nil)).Elem()
}

func (o CheClusterSpecServerDevfileRegistryIngressOutput) ToCheClusterSpecServerDevfileRegistryIngressOutput() CheClusterSpecServerDevfileRegistryIngressOutput {
	return o
}

func (o CheClusterSpecServerDevfileRegistryIngressOutput) ToCheClusterSpecServerDevfileRegistryIngressOutputWithContext(ctx context.Context) CheClusterSpecServerDevfileRegistryIngressOutput {
	return o
}

func (o CheClusterSpecServerDevfileRegistryIngressOutput) ToCheClusterSpecServerDevfileRegistryIngressPtrOutput() CheClusterSpecServerDevfileRegistryIngressPtrOutput {
	return o.ToCheClusterSpecServerDevfileRegistryIngressPtrOutputWithContext(context.Background())
}

func (o CheClusterSpecServerDevfileRegistryIngressOutput) ToCheClusterSpecServerDevfileRegistryIngressPtrOutputWithContext(ctx context.Context) CheClusterSpecServerDevfileRegistryIngressPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServerDevfileRegistryIngress) *CheClusterSpecServerDevfileRegistryIngress {
		return &v
	}).(CheClusterSpecServerDevfileRegistryIngressPtrOutput)
}

// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
func (o CheClusterSpecServerDevfileRegistryIngressOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServerDevfileRegistryIngress) *string { return v.Labels }).(pulumi.StringPtrOutput)
}

type CheClusterSpecServerDevfileRegistryIngressPtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecServerDevfileRegistryIngressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecServerDevfileRegistryIngress)(nil)).Elem()
}

func (o CheClusterSpecServerDevfileRegistryIngressPtrOutput) ToCheClusterSpecServerDevfileRegistryIngressPtrOutput() CheClusterSpecServerDevfileRegistryIngressPtrOutput {
	return o
}

func (o CheClusterSpecServerDevfileRegistryIngressPtrOutput) ToCheClusterSpecServerDevfileRegistryIngressPtrOutputWithContext(ctx context.Context) CheClusterSpecServerDevfileRegistryIngressPtrOutput {
	return o
}

func (o CheClusterSpecServerDevfileRegistryIngressPtrOutput) Elem() CheClusterSpecServerDevfileRegistryIngressOutput {
	return o.ApplyT(func(v *CheClusterSpecServerDevfileRegistryIngress) CheClusterSpecServerDevfileRegistryIngress {
		return *v
	}).(CheClusterSpecServerDevfileRegistryIngressOutput)
}

// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
func (o CheClusterSpecServerDevfileRegistryIngressPtrOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServerDevfileRegistryIngress) *string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringPtrOutput)
}

// Devfile registry route custom settings
type CheClusterSpecServerDevfileRegistryRoute struct {
	// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
	Labels *string `pulumi:"labels"`
}

// CheClusterSpecServerDevfileRegistryRouteInput is an input type that accepts CheClusterSpecServerDevfileRegistryRouteArgs and CheClusterSpecServerDevfileRegistryRouteOutput values.
// You can construct a concrete instance of `CheClusterSpecServerDevfileRegistryRouteInput` via:
//
//          CheClusterSpecServerDevfileRegistryRouteArgs{...}
type CheClusterSpecServerDevfileRegistryRouteInput interface {
	pulumi.Input

	ToCheClusterSpecServerDevfileRegistryRouteOutput() CheClusterSpecServerDevfileRegistryRouteOutput
	ToCheClusterSpecServerDevfileRegistryRouteOutputWithContext(context.Context) CheClusterSpecServerDevfileRegistryRouteOutput
}

// Devfile registry route custom settings
type CheClusterSpecServerDevfileRegistryRouteArgs struct {
	// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
	Labels pulumi.StringPtrInput `pulumi:"labels"`
}

func (CheClusterSpecServerDevfileRegistryRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServerDevfileRegistryRoute)(nil)).Elem()
}

func (i CheClusterSpecServerDevfileRegistryRouteArgs) ToCheClusterSpecServerDevfileRegistryRouteOutput() CheClusterSpecServerDevfileRegistryRouteOutput {
	return i.ToCheClusterSpecServerDevfileRegistryRouteOutputWithContext(context.Background())
}

func (i CheClusterSpecServerDevfileRegistryRouteArgs) ToCheClusterSpecServerDevfileRegistryRouteOutputWithContext(ctx context.Context) CheClusterSpecServerDevfileRegistryRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerDevfileRegistryRouteOutput)
}

func (i CheClusterSpecServerDevfileRegistryRouteArgs) ToCheClusterSpecServerDevfileRegistryRoutePtrOutput() CheClusterSpecServerDevfileRegistryRoutePtrOutput {
	return i.ToCheClusterSpecServerDevfileRegistryRoutePtrOutputWithContext(context.Background())
}

func (i CheClusterSpecServerDevfileRegistryRouteArgs) ToCheClusterSpecServerDevfileRegistryRoutePtrOutputWithContext(ctx context.Context) CheClusterSpecServerDevfileRegistryRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerDevfileRegistryRouteOutput).ToCheClusterSpecServerDevfileRegistryRoutePtrOutputWithContext(ctx)
}

// CheClusterSpecServerDevfileRegistryRoutePtrInput is an input type that accepts CheClusterSpecServerDevfileRegistryRouteArgs, CheClusterSpecServerDevfileRegistryRoutePtr and CheClusterSpecServerDevfileRegistryRoutePtrOutput values.
// You can construct a concrete instance of `CheClusterSpecServerDevfileRegistryRoutePtrInput` via:
//
//          CheClusterSpecServerDevfileRegistryRouteArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecServerDevfileRegistryRoutePtrInput interface {
	pulumi.Input

	ToCheClusterSpecServerDevfileRegistryRoutePtrOutput() CheClusterSpecServerDevfileRegistryRoutePtrOutput
	ToCheClusterSpecServerDevfileRegistryRoutePtrOutputWithContext(context.Context) CheClusterSpecServerDevfileRegistryRoutePtrOutput
}

type cheClusterSpecServerDevfileRegistryRoutePtrType CheClusterSpecServerDevfileRegistryRouteArgs

func CheClusterSpecServerDevfileRegistryRoutePtr(v *CheClusterSpecServerDevfileRegistryRouteArgs) CheClusterSpecServerDevfileRegistryRoutePtrInput {
	return (*cheClusterSpecServerDevfileRegistryRoutePtrType)(v)
}

func (*cheClusterSpecServerDevfileRegistryRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecServerDevfileRegistryRoute)(nil)).Elem()
}

func (i *cheClusterSpecServerDevfileRegistryRoutePtrType) ToCheClusterSpecServerDevfileRegistryRoutePtrOutput() CheClusterSpecServerDevfileRegistryRoutePtrOutput {
	return i.ToCheClusterSpecServerDevfileRegistryRoutePtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecServerDevfileRegistryRoutePtrType) ToCheClusterSpecServerDevfileRegistryRoutePtrOutputWithContext(ctx context.Context) CheClusterSpecServerDevfileRegistryRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerDevfileRegistryRoutePtrOutput)
}

// Devfile registry route custom settings
type CheClusterSpecServerDevfileRegistryRouteOutput struct{ *pulumi.OutputState }

func (CheClusterSpecServerDevfileRegistryRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServerDevfileRegistryRoute)(nil)).Elem()
}

func (o CheClusterSpecServerDevfileRegistryRouteOutput) ToCheClusterSpecServerDevfileRegistryRouteOutput() CheClusterSpecServerDevfileRegistryRouteOutput {
	return o
}

func (o CheClusterSpecServerDevfileRegistryRouteOutput) ToCheClusterSpecServerDevfileRegistryRouteOutputWithContext(ctx context.Context) CheClusterSpecServerDevfileRegistryRouteOutput {
	return o
}

func (o CheClusterSpecServerDevfileRegistryRouteOutput) ToCheClusterSpecServerDevfileRegistryRoutePtrOutput() CheClusterSpecServerDevfileRegistryRoutePtrOutput {
	return o.ToCheClusterSpecServerDevfileRegistryRoutePtrOutputWithContext(context.Background())
}

func (o CheClusterSpecServerDevfileRegistryRouteOutput) ToCheClusterSpecServerDevfileRegistryRoutePtrOutputWithContext(ctx context.Context) CheClusterSpecServerDevfileRegistryRoutePtrOutput {
	return o.ApplyT(func(v CheClusterSpecServerDevfileRegistryRoute) *CheClusterSpecServerDevfileRegistryRoute {
		return &v
	}).(CheClusterSpecServerDevfileRegistryRoutePtrOutput)
}

// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
func (o CheClusterSpecServerDevfileRegistryRouteOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServerDevfileRegistryRoute) *string { return v.Labels }).(pulumi.StringPtrOutput)
}

type CheClusterSpecServerDevfileRegistryRoutePtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecServerDevfileRegistryRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecServerDevfileRegistryRoute)(nil)).Elem()
}

func (o CheClusterSpecServerDevfileRegistryRoutePtrOutput) ToCheClusterSpecServerDevfileRegistryRoutePtrOutput() CheClusterSpecServerDevfileRegistryRoutePtrOutput {
	return o
}

func (o CheClusterSpecServerDevfileRegistryRoutePtrOutput) ToCheClusterSpecServerDevfileRegistryRoutePtrOutputWithContext(ctx context.Context) CheClusterSpecServerDevfileRegistryRoutePtrOutput {
	return o
}

func (o CheClusterSpecServerDevfileRegistryRoutePtrOutput) Elem() CheClusterSpecServerDevfileRegistryRouteOutput {
	return o.ApplyT(func(v *CheClusterSpecServerDevfileRegistryRoute) CheClusterSpecServerDevfileRegistryRoute { return *v }).(CheClusterSpecServerDevfileRegistryRouteOutput)
}

// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
func (o CheClusterSpecServerDevfileRegistryRoutePtrOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServerDevfileRegistryRoute) *string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringPtrOutput)
}

// Plugin registry ingress custom settings
type CheClusterSpecServerPluginRegistryIngress struct {
	// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
	Labels *string `pulumi:"labels"`
}

// CheClusterSpecServerPluginRegistryIngressInput is an input type that accepts CheClusterSpecServerPluginRegistryIngressArgs and CheClusterSpecServerPluginRegistryIngressOutput values.
// You can construct a concrete instance of `CheClusterSpecServerPluginRegistryIngressInput` via:
//
//          CheClusterSpecServerPluginRegistryIngressArgs{...}
type CheClusterSpecServerPluginRegistryIngressInput interface {
	pulumi.Input

	ToCheClusterSpecServerPluginRegistryIngressOutput() CheClusterSpecServerPluginRegistryIngressOutput
	ToCheClusterSpecServerPluginRegistryIngressOutputWithContext(context.Context) CheClusterSpecServerPluginRegistryIngressOutput
}

// Plugin registry ingress custom settings
type CheClusterSpecServerPluginRegistryIngressArgs struct {
	// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
	Labels pulumi.StringPtrInput `pulumi:"labels"`
}

func (CheClusterSpecServerPluginRegistryIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServerPluginRegistryIngress)(nil)).Elem()
}

func (i CheClusterSpecServerPluginRegistryIngressArgs) ToCheClusterSpecServerPluginRegistryIngressOutput() CheClusterSpecServerPluginRegistryIngressOutput {
	return i.ToCheClusterSpecServerPluginRegistryIngressOutputWithContext(context.Background())
}

func (i CheClusterSpecServerPluginRegistryIngressArgs) ToCheClusterSpecServerPluginRegistryIngressOutputWithContext(ctx context.Context) CheClusterSpecServerPluginRegistryIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerPluginRegistryIngressOutput)
}

func (i CheClusterSpecServerPluginRegistryIngressArgs) ToCheClusterSpecServerPluginRegistryIngressPtrOutput() CheClusterSpecServerPluginRegistryIngressPtrOutput {
	return i.ToCheClusterSpecServerPluginRegistryIngressPtrOutputWithContext(context.Background())
}

func (i CheClusterSpecServerPluginRegistryIngressArgs) ToCheClusterSpecServerPluginRegistryIngressPtrOutputWithContext(ctx context.Context) CheClusterSpecServerPluginRegistryIngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerPluginRegistryIngressOutput).ToCheClusterSpecServerPluginRegistryIngressPtrOutputWithContext(ctx)
}

// CheClusterSpecServerPluginRegistryIngressPtrInput is an input type that accepts CheClusterSpecServerPluginRegistryIngressArgs, CheClusterSpecServerPluginRegistryIngressPtr and CheClusterSpecServerPluginRegistryIngressPtrOutput values.
// You can construct a concrete instance of `CheClusterSpecServerPluginRegistryIngressPtrInput` via:
//
//          CheClusterSpecServerPluginRegistryIngressArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecServerPluginRegistryIngressPtrInput interface {
	pulumi.Input

	ToCheClusterSpecServerPluginRegistryIngressPtrOutput() CheClusterSpecServerPluginRegistryIngressPtrOutput
	ToCheClusterSpecServerPluginRegistryIngressPtrOutputWithContext(context.Context) CheClusterSpecServerPluginRegistryIngressPtrOutput
}

type cheClusterSpecServerPluginRegistryIngressPtrType CheClusterSpecServerPluginRegistryIngressArgs

func CheClusterSpecServerPluginRegistryIngressPtr(v *CheClusterSpecServerPluginRegistryIngressArgs) CheClusterSpecServerPluginRegistryIngressPtrInput {
	return (*cheClusterSpecServerPluginRegistryIngressPtrType)(v)
}

func (*cheClusterSpecServerPluginRegistryIngressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecServerPluginRegistryIngress)(nil)).Elem()
}

func (i *cheClusterSpecServerPluginRegistryIngressPtrType) ToCheClusterSpecServerPluginRegistryIngressPtrOutput() CheClusterSpecServerPluginRegistryIngressPtrOutput {
	return i.ToCheClusterSpecServerPluginRegistryIngressPtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecServerPluginRegistryIngressPtrType) ToCheClusterSpecServerPluginRegistryIngressPtrOutputWithContext(ctx context.Context) CheClusterSpecServerPluginRegistryIngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerPluginRegistryIngressPtrOutput)
}

// Plugin registry ingress custom settings
type CheClusterSpecServerPluginRegistryIngressOutput struct{ *pulumi.OutputState }

func (CheClusterSpecServerPluginRegistryIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServerPluginRegistryIngress)(nil)).Elem()
}

func (o CheClusterSpecServerPluginRegistryIngressOutput) ToCheClusterSpecServerPluginRegistryIngressOutput() CheClusterSpecServerPluginRegistryIngressOutput {
	return o
}

func (o CheClusterSpecServerPluginRegistryIngressOutput) ToCheClusterSpecServerPluginRegistryIngressOutputWithContext(ctx context.Context) CheClusterSpecServerPluginRegistryIngressOutput {
	return o
}

func (o CheClusterSpecServerPluginRegistryIngressOutput) ToCheClusterSpecServerPluginRegistryIngressPtrOutput() CheClusterSpecServerPluginRegistryIngressPtrOutput {
	return o.ToCheClusterSpecServerPluginRegistryIngressPtrOutputWithContext(context.Background())
}

func (o CheClusterSpecServerPluginRegistryIngressOutput) ToCheClusterSpecServerPluginRegistryIngressPtrOutputWithContext(ctx context.Context) CheClusterSpecServerPluginRegistryIngressPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServerPluginRegistryIngress) *CheClusterSpecServerPluginRegistryIngress {
		return &v
	}).(CheClusterSpecServerPluginRegistryIngressPtrOutput)
}

// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
func (o CheClusterSpecServerPluginRegistryIngressOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServerPluginRegistryIngress) *string { return v.Labels }).(pulumi.StringPtrOutput)
}

type CheClusterSpecServerPluginRegistryIngressPtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecServerPluginRegistryIngressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecServerPluginRegistryIngress)(nil)).Elem()
}

func (o CheClusterSpecServerPluginRegistryIngressPtrOutput) ToCheClusterSpecServerPluginRegistryIngressPtrOutput() CheClusterSpecServerPluginRegistryIngressPtrOutput {
	return o
}

func (o CheClusterSpecServerPluginRegistryIngressPtrOutput) ToCheClusterSpecServerPluginRegistryIngressPtrOutputWithContext(ctx context.Context) CheClusterSpecServerPluginRegistryIngressPtrOutput {
	return o
}

func (o CheClusterSpecServerPluginRegistryIngressPtrOutput) Elem() CheClusterSpecServerPluginRegistryIngressOutput {
	return o.ApplyT(func(v *CheClusterSpecServerPluginRegistryIngress) CheClusterSpecServerPluginRegistryIngress {
		return *v
	}).(CheClusterSpecServerPluginRegistryIngressOutput)
}

// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
func (o CheClusterSpecServerPluginRegistryIngressPtrOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServerPluginRegistryIngress) *string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringPtrOutput)
}

// Plugin registry route custom settings
type CheClusterSpecServerPluginRegistryRoute struct {
	// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
	Labels *string `pulumi:"labels"`
}

// CheClusterSpecServerPluginRegistryRouteInput is an input type that accepts CheClusterSpecServerPluginRegistryRouteArgs and CheClusterSpecServerPluginRegistryRouteOutput values.
// You can construct a concrete instance of `CheClusterSpecServerPluginRegistryRouteInput` via:
//
//          CheClusterSpecServerPluginRegistryRouteArgs{...}
type CheClusterSpecServerPluginRegistryRouteInput interface {
	pulumi.Input

	ToCheClusterSpecServerPluginRegistryRouteOutput() CheClusterSpecServerPluginRegistryRouteOutput
	ToCheClusterSpecServerPluginRegistryRouteOutputWithContext(context.Context) CheClusterSpecServerPluginRegistryRouteOutput
}

// Plugin registry route custom settings
type CheClusterSpecServerPluginRegistryRouteArgs struct {
	// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
	Labels pulumi.StringPtrInput `pulumi:"labels"`
}

func (CheClusterSpecServerPluginRegistryRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServerPluginRegistryRoute)(nil)).Elem()
}

func (i CheClusterSpecServerPluginRegistryRouteArgs) ToCheClusterSpecServerPluginRegistryRouteOutput() CheClusterSpecServerPluginRegistryRouteOutput {
	return i.ToCheClusterSpecServerPluginRegistryRouteOutputWithContext(context.Background())
}

func (i CheClusterSpecServerPluginRegistryRouteArgs) ToCheClusterSpecServerPluginRegistryRouteOutputWithContext(ctx context.Context) CheClusterSpecServerPluginRegistryRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerPluginRegistryRouteOutput)
}

func (i CheClusterSpecServerPluginRegistryRouteArgs) ToCheClusterSpecServerPluginRegistryRoutePtrOutput() CheClusterSpecServerPluginRegistryRoutePtrOutput {
	return i.ToCheClusterSpecServerPluginRegistryRoutePtrOutputWithContext(context.Background())
}

func (i CheClusterSpecServerPluginRegistryRouteArgs) ToCheClusterSpecServerPluginRegistryRoutePtrOutputWithContext(ctx context.Context) CheClusterSpecServerPluginRegistryRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerPluginRegistryRouteOutput).ToCheClusterSpecServerPluginRegistryRoutePtrOutputWithContext(ctx)
}

// CheClusterSpecServerPluginRegistryRoutePtrInput is an input type that accepts CheClusterSpecServerPluginRegistryRouteArgs, CheClusterSpecServerPluginRegistryRoutePtr and CheClusterSpecServerPluginRegistryRoutePtrOutput values.
// You can construct a concrete instance of `CheClusterSpecServerPluginRegistryRoutePtrInput` via:
//
//          CheClusterSpecServerPluginRegistryRouteArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecServerPluginRegistryRoutePtrInput interface {
	pulumi.Input

	ToCheClusterSpecServerPluginRegistryRoutePtrOutput() CheClusterSpecServerPluginRegistryRoutePtrOutput
	ToCheClusterSpecServerPluginRegistryRoutePtrOutputWithContext(context.Context) CheClusterSpecServerPluginRegistryRoutePtrOutput
}

type cheClusterSpecServerPluginRegistryRoutePtrType CheClusterSpecServerPluginRegistryRouteArgs

func CheClusterSpecServerPluginRegistryRoutePtr(v *CheClusterSpecServerPluginRegistryRouteArgs) CheClusterSpecServerPluginRegistryRoutePtrInput {
	return (*cheClusterSpecServerPluginRegistryRoutePtrType)(v)
}

func (*cheClusterSpecServerPluginRegistryRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecServerPluginRegistryRoute)(nil)).Elem()
}

func (i *cheClusterSpecServerPluginRegistryRoutePtrType) ToCheClusterSpecServerPluginRegistryRoutePtrOutput() CheClusterSpecServerPluginRegistryRoutePtrOutput {
	return i.ToCheClusterSpecServerPluginRegistryRoutePtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecServerPluginRegistryRoutePtrType) ToCheClusterSpecServerPluginRegistryRoutePtrOutputWithContext(ctx context.Context) CheClusterSpecServerPluginRegistryRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerPluginRegistryRoutePtrOutput)
}

// Plugin registry route custom settings
type CheClusterSpecServerPluginRegistryRouteOutput struct{ *pulumi.OutputState }

func (CheClusterSpecServerPluginRegistryRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServerPluginRegistryRoute)(nil)).Elem()
}

func (o CheClusterSpecServerPluginRegistryRouteOutput) ToCheClusterSpecServerPluginRegistryRouteOutput() CheClusterSpecServerPluginRegistryRouteOutput {
	return o
}

func (o CheClusterSpecServerPluginRegistryRouteOutput) ToCheClusterSpecServerPluginRegistryRouteOutputWithContext(ctx context.Context) CheClusterSpecServerPluginRegistryRouteOutput {
	return o
}

func (o CheClusterSpecServerPluginRegistryRouteOutput) ToCheClusterSpecServerPluginRegistryRoutePtrOutput() CheClusterSpecServerPluginRegistryRoutePtrOutput {
	return o.ToCheClusterSpecServerPluginRegistryRoutePtrOutputWithContext(context.Background())
}

func (o CheClusterSpecServerPluginRegistryRouteOutput) ToCheClusterSpecServerPluginRegistryRoutePtrOutputWithContext(ctx context.Context) CheClusterSpecServerPluginRegistryRoutePtrOutput {
	return o.ApplyT(func(v CheClusterSpecServerPluginRegistryRoute) *CheClusterSpecServerPluginRegistryRoute {
		return &v
	}).(CheClusterSpecServerPluginRegistryRoutePtrOutput)
}

// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
func (o CheClusterSpecServerPluginRegistryRouteOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecServerPluginRegistryRoute) *string { return v.Labels }).(pulumi.StringPtrOutput)
}

type CheClusterSpecServerPluginRegistryRoutePtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecServerPluginRegistryRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecServerPluginRegistryRoute)(nil)).Elem()
}

func (o CheClusterSpecServerPluginRegistryRoutePtrOutput) ToCheClusterSpecServerPluginRegistryRoutePtrOutput() CheClusterSpecServerPluginRegistryRoutePtrOutput {
	return o
}

func (o CheClusterSpecServerPluginRegistryRoutePtrOutput) ToCheClusterSpecServerPluginRegistryRoutePtrOutputWithContext(ctx context.Context) CheClusterSpecServerPluginRegistryRoutePtrOutput {
	return o
}

func (o CheClusterSpecServerPluginRegistryRoutePtrOutput) Elem() CheClusterSpecServerPluginRegistryRouteOutput {
	return o.ApplyT(func(v *CheClusterSpecServerPluginRegistryRoute) CheClusterSpecServerPluginRegistryRoute { return *v }).(CheClusterSpecServerPluginRegistryRouteOutput)
}

// Comma separated list of labels that can be used to organize and categorize (scope and select) objects.
func (o CheClusterSpecServerPluginRegistryRoutePtrOutput) Labels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecServerPluginRegistryRoute) *string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringPtrOutput)
}

// The labels that need to be present (and are put) on the configmaps representing the gateway configuration.
type CheClusterSpecServerSingleHostGatewayConfigMapLabels struct {
}

// CheClusterSpecServerSingleHostGatewayConfigMapLabelsInput is an input type that accepts CheClusterSpecServerSingleHostGatewayConfigMapLabelsArgs and CheClusterSpecServerSingleHostGatewayConfigMapLabelsOutput values.
// You can construct a concrete instance of `CheClusterSpecServerSingleHostGatewayConfigMapLabelsInput` via:
//
//          CheClusterSpecServerSingleHostGatewayConfigMapLabelsArgs{...}
type CheClusterSpecServerSingleHostGatewayConfigMapLabelsInput interface {
	pulumi.Input

	ToCheClusterSpecServerSingleHostGatewayConfigMapLabelsOutput() CheClusterSpecServerSingleHostGatewayConfigMapLabelsOutput
	ToCheClusterSpecServerSingleHostGatewayConfigMapLabelsOutputWithContext(context.Context) CheClusterSpecServerSingleHostGatewayConfigMapLabelsOutput
}

// The labels that need to be present (and are put) on the configmaps representing the gateway configuration.
type CheClusterSpecServerSingleHostGatewayConfigMapLabelsArgs struct {
}

func (CheClusterSpecServerSingleHostGatewayConfigMapLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServerSingleHostGatewayConfigMapLabels)(nil)).Elem()
}

func (i CheClusterSpecServerSingleHostGatewayConfigMapLabelsArgs) ToCheClusterSpecServerSingleHostGatewayConfigMapLabelsOutput() CheClusterSpecServerSingleHostGatewayConfigMapLabelsOutput {
	return i.ToCheClusterSpecServerSingleHostGatewayConfigMapLabelsOutputWithContext(context.Background())
}

func (i CheClusterSpecServerSingleHostGatewayConfigMapLabelsArgs) ToCheClusterSpecServerSingleHostGatewayConfigMapLabelsOutputWithContext(ctx context.Context) CheClusterSpecServerSingleHostGatewayConfigMapLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecServerSingleHostGatewayConfigMapLabelsOutput)
}

// The labels that need to be present (and are put) on the configmaps representing the gateway configuration.
type CheClusterSpecServerSingleHostGatewayConfigMapLabelsOutput struct{ *pulumi.OutputState }

func (CheClusterSpecServerSingleHostGatewayConfigMapLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecServerSingleHostGatewayConfigMapLabels)(nil)).Elem()
}

func (o CheClusterSpecServerSingleHostGatewayConfigMapLabelsOutput) ToCheClusterSpecServerSingleHostGatewayConfigMapLabelsOutput() CheClusterSpecServerSingleHostGatewayConfigMapLabelsOutput {
	return o
}

func (o CheClusterSpecServerSingleHostGatewayConfigMapLabelsOutput) ToCheClusterSpecServerSingleHostGatewayConfigMapLabelsOutputWithContext(ctx context.Context) CheClusterSpecServerSingleHostGatewayConfigMapLabelsOutput {
	return o
}

// Configuration settings related to the persistent storage used by the Che installation.
type CheClusterSpecStorage struct {
	// Storage class for the Persistent Volume Claim dedicated to the Postgres database. If omitted or left blank, default storage class is used.
	PostgresPVCStorageClassName *string `pulumi:"postgresPVCStorageClassName"`
	// Instructs the Che server to launch a special pod to pre-create a subpath in the Persistent Volumes. Defaults to `false`, however it might need to enable it according to the configuration of your K8S cluster.
	PreCreateSubPaths *bool `pulumi:"preCreateSubPaths"`
	// Size of the persistent volume claim for workspaces. Defaults to `1Gi`
	PvcClaimSize *string `pulumi:"pvcClaimSize"`
	// Overrides the container image used to create sub-paths in the Persistent Volumes. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator. See also the `preCreateSubPaths` field.
	PvcJobsImage *string `pulumi:"pvcJobsImage"`
	// Persistent volume claim strategy for the Che server. This Can be:`common` (all workspaces PVCs in one volume), `per-workspace` (one PVC per workspace for all declared volumes) and `unique` (one PVC per declared volume). Defaults to `common`.
	PvcStrategy *string `pulumi:"pvcStrategy"`
	// Storage class for the Persistent Volume Claims dedicated to the Che workspaces. If omitted or left blank, default storage class is used.
	WorkspacePVCStorageClassName *string `pulumi:"workspacePVCStorageClassName"`
}

// CheClusterSpecStorageInput is an input type that accepts CheClusterSpecStorageArgs and CheClusterSpecStorageOutput values.
// You can construct a concrete instance of `CheClusterSpecStorageInput` via:
//
//          CheClusterSpecStorageArgs{...}
type CheClusterSpecStorageInput interface {
	pulumi.Input

	ToCheClusterSpecStorageOutput() CheClusterSpecStorageOutput
	ToCheClusterSpecStorageOutputWithContext(context.Context) CheClusterSpecStorageOutput
}

// Configuration settings related to the persistent storage used by the Che installation.
type CheClusterSpecStorageArgs struct {
	// Storage class for the Persistent Volume Claim dedicated to the Postgres database. If omitted or left blank, default storage class is used.
	PostgresPVCStorageClassName pulumi.StringPtrInput `pulumi:"postgresPVCStorageClassName"`
	// Instructs the Che server to launch a special pod to pre-create a subpath in the Persistent Volumes. Defaults to `false`, however it might need to enable it according to the configuration of your K8S cluster.
	PreCreateSubPaths pulumi.BoolPtrInput `pulumi:"preCreateSubPaths"`
	// Size of the persistent volume claim for workspaces. Defaults to `1Gi`
	PvcClaimSize pulumi.StringPtrInput `pulumi:"pvcClaimSize"`
	// Overrides the container image used to create sub-paths in the Persistent Volumes. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator. See also the `preCreateSubPaths` field.
	PvcJobsImage pulumi.StringPtrInput `pulumi:"pvcJobsImage"`
	// Persistent volume claim strategy for the Che server. This Can be:`common` (all workspaces PVCs in one volume), `per-workspace` (one PVC per workspace for all declared volumes) and `unique` (one PVC per declared volume). Defaults to `common`.
	PvcStrategy pulumi.StringPtrInput `pulumi:"pvcStrategy"`
	// Storage class for the Persistent Volume Claims dedicated to the Che workspaces. If omitted or left blank, default storage class is used.
	WorkspacePVCStorageClassName pulumi.StringPtrInput `pulumi:"workspacePVCStorageClassName"`
}

func (CheClusterSpecStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecStorage)(nil)).Elem()
}

func (i CheClusterSpecStorageArgs) ToCheClusterSpecStorageOutput() CheClusterSpecStorageOutput {
	return i.ToCheClusterSpecStorageOutputWithContext(context.Background())
}

func (i CheClusterSpecStorageArgs) ToCheClusterSpecStorageOutputWithContext(ctx context.Context) CheClusterSpecStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecStorageOutput)
}

func (i CheClusterSpecStorageArgs) ToCheClusterSpecStoragePtrOutput() CheClusterSpecStoragePtrOutput {
	return i.ToCheClusterSpecStoragePtrOutputWithContext(context.Background())
}

func (i CheClusterSpecStorageArgs) ToCheClusterSpecStoragePtrOutputWithContext(ctx context.Context) CheClusterSpecStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecStorageOutput).ToCheClusterSpecStoragePtrOutputWithContext(ctx)
}

// CheClusterSpecStoragePtrInput is an input type that accepts CheClusterSpecStorageArgs, CheClusterSpecStoragePtr and CheClusterSpecStoragePtrOutput values.
// You can construct a concrete instance of `CheClusterSpecStoragePtrInput` via:
//
//          CheClusterSpecStorageArgs{...}
//
//  or:
//
//          nil
type CheClusterSpecStoragePtrInput interface {
	pulumi.Input

	ToCheClusterSpecStoragePtrOutput() CheClusterSpecStoragePtrOutput
	ToCheClusterSpecStoragePtrOutputWithContext(context.Context) CheClusterSpecStoragePtrOutput
}

type cheClusterSpecStoragePtrType CheClusterSpecStorageArgs

func CheClusterSpecStoragePtr(v *CheClusterSpecStorageArgs) CheClusterSpecStoragePtrInput {
	return (*cheClusterSpecStoragePtrType)(v)
}

func (*cheClusterSpecStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecStorage)(nil)).Elem()
}

func (i *cheClusterSpecStoragePtrType) ToCheClusterSpecStoragePtrOutput() CheClusterSpecStoragePtrOutput {
	return i.ToCheClusterSpecStoragePtrOutputWithContext(context.Background())
}

func (i *cheClusterSpecStoragePtrType) ToCheClusterSpecStoragePtrOutputWithContext(ctx context.Context) CheClusterSpecStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterSpecStoragePtrOutput)
}

// Configuration settings related to the persistent storage used by the Che installation.
type CheClusterSpecStorageOutput struct{ *pulumi.OutputState }

func (CheClusterSpecStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterSpecStorage)(nil)).Elem()
}

func (o CheClusterSpecStorageOutput) ToCheClusterSpecStorageOutput() CheClusterSpecStorageOutput {
	return o
}

func (o CheClusterSpecStorageOutput) ToCheClusterSpecStorageOutputWithContext(ctx context.Context) CheClusterSpecStorageOutput {
	return o
}

func (o CheClusterSpecStorageOutput) ToCheClusterSpecStoragePtrOutput() CheClusterSpecStoragePtrOutput {
	return o.ToCheClusterSpecStoragePtrOutputWithContext(context.Background())
}

func (o CheClusterSpecStorageOutput) ToCheClusterSpecStoragePtrOutputWithContext(ctx context.Context) CheClusterSpecStoragePtrOutput {
	return o.ApplyT(func(v CheClusterSpecStorage) *CheClusterSpecStorage {
		return &v
	}).(CheClusterSpecStoragePtrOutput)
}

// Storage class for the Persistent Volume Claim dedicated to the Postgres database. If omitted or left blank, default storage class is used.
func (o CheClusterSpecStorageOutput) PostgresPVCStorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecStorage) *string { return v.PostgresPVCStorageClassName }).(pulumi.StringPtrOutput)
}

// Instructs the Che server to launch a special pod to pre-create a subpath in the Persistent Volumes. Defaults to `false`, however it might need to enable it according to the configuration of your K8S cluster.
func (o CheClusterSpecStorageOutput) PreCreateSubPaths() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterSpecStorage) *bool { return v.PreCreateSubPaths }).(pulumi.BoolPtrOutput)
}

// Size of the persistent volume claim for workspaces. Defaults to `1Gi`
func (o CheClusterSpecStorageOutput) PvcClaimSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecStorage) *string { return v.PvcClaimSize }).(pulumi.StringPtrOutput)
}

// Overrides the container image used to create sub-paths in the Persistent Volumes. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator. See also the `preCreateSubPaths` field.
func (o CheClusterSpecStorageOutput) PvcJobsImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecStorage) *string { return v.PvcJobsImage }).(pulumi.StringPtrOutput)
}

// Persistent volume claim strategy for the Che server. This Can be:`common` (all workspaces PVCs in one volume), `per-workspace` (one PVC per workspace for all declared volumes) and `unique` (one PVC per declared volume). Defaults to `common`.
func (o CheClusterSpecStorageOutput) PvcStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecStorage) *string { return v.PvcStrategy }).(pulumi.StringPtrOutput)
}

// Storage class for the Persistent Volume Claims dedicated to the Che workspaces. If omitted or left blank, default storage class is used.
func (o CheClusterSpecStorageOutput) WorkspacePVCStorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterSpecStorage) *string { return v.WorkspacePVCStorageClassName }).(pulumi.StringPtrOutput)
}

type CheClusterSpecStoragePtrOutput struct{ *pulumi.OutputState }

func (CheClusterSpecStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterSpecStorage)(nil)).Elem()
}

func (o CheClusterSpecStoragePtrOutput) ToCheClusterSpecStoragePtrOutput() CheClusterSpecStoragePtrOutput {
	return o
}

func (o CheClusterSpecStoragePtrOutput) ToCheClusterSpecStoragePtrOutputWithContext(ctx context.Context) CheClusterSpecStoragePtrOutput {
	return o
}

func (o CheClusterSpecStoragePtrOutput) Elem() CheClusterSpecStorageOutput {
	return o.ApplyT(func(v *CheClusterSpecStorage) CheClusterSpecStorage { return *v }).(CheClusterSpecStorageOutput)
}

// Storage class for the Persistent Volume Claim dedicated to the Postgres database. If omitted or left blank, default storage class is used.
func (o CheClusterSpecStoragePtrOutput) PostgresPVCStorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecStorage) *string {
		if v == nil {
			return nil
		}
		return v.PostgresPVCStorageClassName
	}).(pulumi.StringPtrOutput)
}

// Instructs the Che server to launch a special pod to pre-create a subpath in the Persistent Volumes. Defaults to `false`, however it might need to enable it according to the configuration of your K8S cluster.
func (o CheClusterSpecStoragePtrOutput) PreCreateSubPaths() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecStorage) *bool {
		if v == nil {
			return nil
		}
		return v.PreCreateSubPaths
	}).(pulumi.BoolPtrOutput)
}

// Size of the persistent volume claim for workspaces. Defaults to `1Gi`
func (o CheClusterSpecStoragePtrOutput) PvcClaimSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecStorage) *string {
		if v == nil {
			return nil
		}
		return v.PvcClaimSize
	}).(pulumi.StringPtrOutput)
}

// Overrides the container image used to create sub-paths in the Persistent Volumes. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator. See also the `preCreateSubPaths` field.
func (o CheClusterSpecStoragePtrOutput) PvcJobsImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecStorage) *string {
		if v == nil {
			return nil
		}
		return v.PvcJobsImage
	}).(pulumi.StringPtrOutput)
}

// Persistent volume claim strategy for the Che server. This Can be:`common` (all workspaces PVCs in one volume), `per-workspace` (one PVC per workspace for all declared volumes) and `unique` (one PVC per declared volume). Defaults to `common`.
func (o CheClusterSpecStoragePtrOutput) PvcStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecStorage) *string {
		if v == nil {
			return nil
		}
		return v.PvcStrategy
	}).(pulumi.StringPtrOutput)
}

// Storage class for the Persistent Volume Claims dedicated to the Che workspaces. If omitted or left blank, default storage class is used.
func (o CheClusterSpecStoragePtrOutput) WorkspacePVCStorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterSpecStorage) *string {
		if v == nil {
			return nil
		}
		return v.WorkspacePVCStorageClassName
	}).(pulumi.StringPtrOutput)
}

// CheClusterStatus defines the observed state of Che installation
type CheClusterStatus struct {
	// Status of a Che installation. Can be `Available`, `Unavailable`, or `Available, Rolling Update in Progress`
	CheClusterRunning *string `pulumi:"cheClusterRunning"`
	// Public URL to the Che server
	CheURL *string `pulumi:"cheURL"`
	// Current installed Che version
	CheVersion *string `pulumi:"cheVersion"`
	// Indicates if or not a Postgres instance has been correctly provisioned
	DbProvisioned *bool `pulumi:"dbProvisioned"`
	// Public URL to the Devfile registry
	DevfileRegistryURL *string `pulumi:"devfileRegistryURL"`
	// A URL that can point to some URL where to find help related to the current Operator status.
	HelpLink *string `pulumi:"helpLink"`
	// Indicates whether an Identity Provider instance (Keycloak / RH SSO) has been provisioned with realm, client and user
	KeycloakProvisioned *bool `pulumi:"keycloakProvisioned"`
	// Public URL to the Identity Provider server (Keycloak / RH SSO).
	KeycloakURL *string `pulumi:"keycloakURL"`
	// A human readable message indicating details about why the pod is in this condition.
	Message *string `pulumi:"message"`
	// Indicates whether an Identity Provider instance (Keycloak / RH SSO) has been configured to integrate with the OpenShift OAuth.
	OpenShiftoAuthProvisioned *bool `pulumi:"openShiftoAuthProvisioned"`
	// Public URL to the Plugin registry
	PluginRegistryURL *string `pulumi:"pluginRegistryURL"`
	// A brief CamelCase message indicating details about why the pod is in this state.
	Reason *string `pulumi:"reason"`
}

// CheClusterStatusInput is an input type that accepts CheClusterStatusArgs and CheClusterStatusOutput values.
// You can construct a concrete instance of `CheClusterStatusInput` via:
//
//          CheClusterStatusArgs{...}
type CheClusterStatusInput interface {
	pulumi.Input

	ToCheClusterStatusOutput() CheClusterStatusOutput
	ToCheClusterStatusOutputWithContext(context.Context) CheClusterStatusOutput
}

// CheClusterStatus defines the observed state of Che installation
type CheClusterStatusArgs struct {
	// Status of a Che installation. Can be `Available`, `Unavailable`, or `Available, Rolling Update in Progress`
	CheClusterRunning pulumi.StringPtrInput `pulumi:"cheClusterRunning"`
	// Public URL to the Che server
	CheURL pulumi.StringPtrInput `pulumi:"cheURL"`
	// Current installed Che version
	CheVersion pulumi.StringPtrInput `pulumi:"cheVersion"`
	// Indicates if or not a Postgres instance has been correctly provisioned
	DbProvisioned pulumi.BoolPtrInput `pulumi:"dbProvisioned"`
	// Public URL to the Devfile registry
	DevfileRegistryURL pulumi.StringPtrInput `pulumi:"devfileRegistryURL"`
	// A URL that can point to some URL where to find help related to the current Operator status.
	HelpLink pulumi.StringPtrInput `pulumi:"helpLink"`
	// Indicates whether an Identity Provider instance (Keycloak / RH SSO) has been provisioned with realm, client and user
	KeycloakProvisioned pulumi.BoolPtrInput `pulumi:"keycloakProvisioned"`
	// Public URL to the Identity Provider server (Keycloak / RH SSO).
	KeycloakURL pulumi.StringPtrInput `pulumi:"keycloakURL"`
	// A human readable message indicating details about why the pod is in this condition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Indicates whether an Identity Provider instance (Keycloak / RH SSO) has been configured to integrate with the OpenShift OAuth.
	OpenShiftoAuthProvisioned pulumi.BoolPtrInput `pulumi:"openShiftoAuthProvisioned"`
	// Public URL to the Plugin registry
	PluginRegistryURL pulumi.StringPtrInput `pulumi:"pluginRegistryURL"`
	// A brief CamelCase message indicating details about why the pod is in this state.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (CheClusterStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterStatus)(nil)).Elem()
}

func (i CheClusterStatusArgs) ToCheClusterStatusOutput() CheClusterStatusOutput {
	return i.ToCheClusterStatusOutputWithContext(context.Background())
}

func (i CheClusterStatusArgs) ToCheClusterStatusOutputWithContext(ctx context.Context) CheClusterStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterStatusOutput)
}

func (i CheClusterStatusArgs) ToCheClusterStatusPtrOutput() CheClusterStatusPtrOutput {
	return i.ToCheClusterStatusPtrOutputWithContext(context.Background())
}

func (i CheClusterStatusArgs) ToCheClusterStatusPtrOutputWithContext(ctx context.Context) CheClusterStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterStatusOutput).ToCheClusterStatusPtrOutputWithContext(ctx)
}

// CheClusterStatusPtrInput is an input type that accepts CheClusterStatusArgs, CheClusterStatusPtr and CheClusterStatusPtrOutput values.
// You can construct a concrete instance of `CheClusterStatusPtrInput` via:
//
//          CheClusterStatusArgs{...}
//
//  or:
//
//          nil
type CheClusterStatusPtrInput interface {
	pulumi.Input

	ToCheClusterStatusPtrOutput() CheClusterStatusPtrOutput
	ToCheClusterStatusPtrOutputWithContext(context.Context) CheClusterStatusPtrOutput
}

type cheClusterStatusPtrType CheClusterStatusArgs

func CheClusterStatusPtr(v *CheClusterStatusArgs) CheClusterStatusPtrInput {
	return (*cheClusterStatusPtrType)(v)
}

func (*cheClusterStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterStatus)(nil)).Elem()
}

func (i *cheClusterStatusPtrType) ToCheClusterStatusPtrOutput() CheClusterStatusPtrOutput {
	return i.ToCheClusterStatusPtrOutputWithContext(context.Background())
}

func (i *cheClusterStatusPtrType) ToCheClusterStatusPtrOutputWithContext(ctx context.Context) CheClusterStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheClusterStatusPtrOutput)
}

// CheClusterStatus defines the observed state of Che installation
type CheClusterStatusOutput struct{ *pulumi.OutputState }

func (CheClusterStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheClusterStatus)(nil)).Elem()
}

func (o CheClusterStatusOutput) ToCheClusterStatusOutput() CheClusterStatusOutput {
	return o
}

func (o CheClusterStatusOutput) ToCheClusterStatusOutputWithContext(ctx context.Context) CheClusterStatusOutput {
	return o
}

func (o CheClusterStatusOutput) ToCheClusterStatusPtrOutput() CheClusterStatusPtrOutput {
	return o.ToCheClusterStatusPtrOutputWithContext(context.Background())
}

func (o CheClusterStatusOutput) ToCheClusterStatusPtrOutputWithContext(ctx context.Context) CheClusterStatusPtrOutput {
	return o.ApplyT(func(v CheClusterStatus) *CheClusterStatus {
		return &v
	}).(CheClusterStatusPtrOutput)
}

// Status of a Che installation. Can be `Available`, `Unavailable`, or `Available, Rolling Update in Progress`
func (o CheClusterStatusOutput) CheClusterRunning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterStatus) *string { return v.CheClusterRunning }).(pulumi.StringPtrOutput)
}

// Public URL to the Che server
func (o CheClusterStatusOutput) CheURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterStatus) *string { return v.CheURL }).(pulumi.StringPtrOutput)
}

// Current installed Che version
func (o CheClusterStatusOutput) CheVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterStatus) *string { return v.CheVersion }).(pulumi.StringPtrOutput)
}

// Indicates if or not a Postgres instance has been correctly provisioned
func (o CheClusterStatusOutput) DbProvisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterStatus) *bool { return v.DbProvisioned }).(pulumi.BoolPtrOutput)
}

// Public URL to the Devfile registry
func (o CheClusterStatusOutput) DevfileRegistryURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterStatus) *string { return v.DevfileRegistryURL }).(pulumi.StringPtrOutput)
}

// A URL that can point to some URL where to find help related to the current Operator status.
func (o CheClusterStatusOutput) HelpLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterStatus) *string { return v.HelpLink }).(pulumi.StringPtrOutput)
}

// Indicates whether an Identity Provider instance (Keycloak / RH SSO) has been provisioned with realm, client and user
func (o CheClusterStatusOutput) KeycloakProvisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterStatus) *bool { return v.KeycloakProvisioned }).(pulumi.BoolPtrOutput)
}

// Public URL to the Identity Provider server (Keycloak / RH SSO).
func (o CheClusterStatusOutput) KeycloakURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterStatus) *string { return v.KeycloakURL }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about why the pod is in this condition.
func (o CheClusterStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Indicates whether an Identity Provider instance (Keycloak / RH SSO) has been configured to integrate with the OpenShift OAuth.
func (o CheClusterStatusOutput) OpenShiftoAuthProvisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheClusterStatus) *bool { return v.OpenShiftoAuthProvisioned }).(pulumi.BoolPtrOutput)
}

// Public URL to the Plugin registry
func (o CheClusterStatusOutput) PluginRegistryURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterStatus) *string { return v.PluginRegistryURL }).(pulumi.StringPtrOutput)
}

// A brief CamelCase message indicating details about why the pod is in this state.
func (o CheClusterStatusOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheClusterStatus) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type CheClusterStatusPtrOutput struct{ *pulumi.OutputState }

func (CheClusterStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheClusterStatus)(nil)).Elem()
}

func (o CheClusterStatusPtrOutput) ToCheClusterStatusPtrOutput() CheClusterStatusPtrOutput {
	return o
}

func (o CheClusterStatusPtrOutput) ToCheClusterStatusPtrOutputWithContext(ctx context.Context) CheClusterStatusPtrOutput {
	return o
}

func (o CheClusterStatusPtrOutput) Elem() CheClusterStatusOutput {
	return o.ApplyT(func(v *CheClusterStatus) CheClusterStatus { return *v }).(CheClusterStatusOutput)
}

// Status of a Che installation. Can be `Available`, `Unavailable`, or `Available, Rolling Update in Progress`
func (o CheClusterStatusPtrOutput) CheClusterRunning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.CheClusterRunning
	}).(pulumi.StringPtrOutput)
}

// Public URL to the Che server
func (o CheClusterStatusPtrOutput) CheURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.CheURL
	}).(pulumi.StringPtrOutput)
}

// Current installed Che version
func (o CheClusterStatusPtrOutput) CheVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.CheVersion
	}).(pulumi.StringPtrOutput)
}

// Indicates if or not a Postgres instance has been correctly provisioned
func (o CheClusterStatusPtrOutput) DbProvisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterStatus) *bool {
		if v == nil {
			return nil
		}
		return v.DbProvisioned
	}).(pulumi.BoolPtrOutput)
}

// Public URL to the Devfile registry
func (o CheClusterStatusPtrOutput) DevfileRegistryURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.DevfileRegistryURL
	}).(pulumi.StringPtrOutput)
}

// A URL that can point to some URL where to find help related to the current Operator status.
func (o CheClusterStatusPtrOutput) HelpLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.HelpLink
	}).(pulumi.StringPtrOutput)
}

// Indicates whether an Identity Provider instance (Keycloak / RH SSO) has been provisioned with realm, client and user
func (o CheClusterStatusPtrOutput) KeycloakProvisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterStatus) *bool {
		if v == nil {
			return nil
		}
		return v.KeycloakProvisioned
	}).(pulumi.BoolPtrOutput)
}

// Public URL to the Identity Provider server (Keycloak / RH SSO).
func (o CheClusterStatusPtrOutput) KeycloakURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.KeycloakURL
	}).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about why the pod is in this condition.
func (o CheClusterStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Indicates whether an Identity Provider instance (Keycloak / RH SSO) has been configured to integrate with the OpenShift OAuth.
func (o CheClusterStatusPtrOutput) OpenShiftoAuthProvisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheClusterStatus) *bool {
		if v == nil {
			return nil
		}
		return v.OpenShiftoAuthProvisioned
	}).(pulumi.BoolPtrOutput)
}

// Public URL to the Plugin registry
func (o CheClusterStatusPtrOutput) PluginRegistryURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.PluginRegistryURL
	}).(pulumi.StringPtrOutput)
}

// A brief CamelCase message indicating details about why the pod is in this state.
func (o CheClusterStatusPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheClusterStatus) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CheClusterTypeOutput{})
	pulumi.RegisterOutputType(CheClusterMetadataOutput{})
	pulumi.RegisterOutputType(CheClusterSpecOutput{})
	pulumi.RegisterOutputType(CheClusterSpecPtrOutput{})
	pulumi.RegisterOutputType(CheClusterSpecAuthOutput{})
	pulumi.RegisterOutputType(CheClusterSpecAuthPtrOutput{})
	pulumi.RegisterOutputType(CheClusterSpecAuthIdentityProviderIngressOutput{})
	pulumi.RegisterOutputType(CheClusterSpecAuthIdentityProviderIngressPtrOutput{})
	pulumi.RegisterOutputType(CheClusterSpecAuthIdentityProviderRouteOutput{})
	pulumi.RegisterOutputType(CheClusterSpecAuthIdentityProviderRoutePtrOutput{})
	pulumi.RegisterOutputType(CheClusterSpecDatabaseOutput{})
	pulumi.RegisterOutputType(CheClusterSpecDatabasePtrOutput{})
	pulumi.RegisterOutputType(CheClusterSpecImagePullerOutput{})
	pulumi.RegisterOutputType(CheClusterSpecImagePullerPtrOutput{})
	pulumi.RegisterOutputType(CheClusterSpecImagePullerSpecOutput{})
	pulumi.RegisterOutputType(CheClusterSpecImagePullerSpecPtrOutput{})
	pulumi.RegisterOutputType(CheClusterSpecK8sOutput{})
	pulumi.RegisterOutputType(CheClusterSpecK8sPtrOutput{})
	pulumi.RegisterOutputType(CheClusterSpecMetricsOutput{})
	pulumi.RegisterOutputType(CheClusterSpecMetricsPtrOutput{})
	pulumi.RegisterOutputType(CheClusterSpecServerOutput{})
	pulumi.RegisterOutputType(CheClusterSpecServerPtrOutput{})
	pulumi.RegisterOutputType(CheClusterSpecServerCheServerIngressOutput{})
	pulumi.RegisterOutputType(CheClusterSpecServerCheServerIngressPtrOutput{})
	pulumi.RegisterOutputType(CheClusterSpecServerCheServerRouteOutput{})
	pulumi.RegisterOutputType(CheClusterSpecServerCheServerRoutePtrOutput{})
	pulumi.RegisterOutputType(CheClusterSpecServerCustomChePropertiesOutput{})
	pulumi.RegisterOutputType(CheClusterSpecServerDevfileRegistryIngressOutput{})
	pulumi.RegisterOutputType(CheClusterSpecServerDevfileRegistryIngressPtrOutput{})
	pulumi.RegisterOutputType(CheClusterSpecServerDevfileRegistryRouteOutput{})
	pulumi.RegisterOutputType(CheClusterSpecServerDevfileRegistryRoutePtrOutput{})
	pulumi.RegisterOutputType(CheClusterSpecServerPluginRegistryIngressOutput{})
	pulumi.RegisterOutputType(CheClusterSpecServerPluginRegistryIngressPtrOutput{})
	pulumi.RegisterOutputType(CheClusterSpecServerPluginRegistryRouteOutput{})
	pulumi.RegisterOutputType(CheClusterSpecServerPluginRegistryRoutePtrOutput{})
	pulumi.RegisterOutputType(CheClusterSpecServerSingleHostGatewayConfigMapLabelsOutput{})
	pulumi.RegisterOutputType(CheClusterSpecStorageOutput{})
	pulumi.RegisterOutputType(CheClusterSpecStoragePtrOutput{})
	pulumi.RegisterOutputType(CheClusterStatusOutput{})
	pulumi.RegisterOutputType(CheClusterStatusPtrOutput{})
}

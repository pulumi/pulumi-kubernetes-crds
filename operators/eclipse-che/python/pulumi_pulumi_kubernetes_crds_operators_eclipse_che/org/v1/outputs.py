# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'CheClusterSpec',
    'CheClusterSpecAuth',
    'CheClusterSpecDatabase',
    'CheClusterSpecK8s',
    'CheClusterSpecMetrics',
    'CheClusterSpecServer',
    'CheClusterSpecStorage',
    'CheClusterStatus',
]

@pulumi.output_type
class CheClusterSpec(dict):
    """
    Desired configuration of the Che installation. Based on these settings, the operator automatically creates and maintains several config maps that will contain the appropriate environment variables the various components of the Che installation. These generated config maps should NOT be updated manually.
    """
    def __init__(__self__, *,
                 auth: Optional['outputs.CheClusterSpecAuth'] = None,
                 database: Optional['outputs.CheClusterSpecDatabase'] = None,
                 k8s: Optional['outputs.CheClusterSpecK8s'] = None,
                 metrics: Optional['outputs.CheClusterSpecMetrics'] = None,
                 server: Optional['outputs.CheClusterSpecServer'] = None,
                 storage: Optional['outputs.CheClusterSpecStorage'] = None):
        """
        Desired configuration of the Che installation. Based on these settings, the operator automatically creates and maintains several config maps that will contain the appropriate environment variables the various components of the Che installation. These generated config maps should NOT be updated manually.
        :param 'CheClusterSpecAuthArgs' auth: Configuration settings related to the Authentication used by the Che installation.
        :param 'CheClusterSpecDatabaseArgs' database: Configuration settings related to the database used by the Che installation.
        :param 'CheClusterSpecK8sArgs' k8s: Configuration settings specific to Che installations made on upstream Kubernetes.
        :param 'CheClusterSpecMetricsArgs' metrics: Configuration settings related to the metrics collection used by the Che installation.
        :param 'CheClusterSpecServerArgs' server: General configuration settings related to the Che server and the plugin and devfile registries
        :param 'CheClusterSpecStorageArgs' storage: Configuration settings related to the persistent storage used by the Che installation.
        """
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if k8s is not None:
            pulumi.set(__self__, "k8s", k8s)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def auth(self) -> Optional['outputs.CheClusterSpecAuth']:
        """
        Configuration settings related to the Authentication used by the Che installation.
        """
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter
    def database(self) -> Optional['outputs.CheClusterSpecDatabase']:
        """
        Configuration settings related to the database used by the Che installation.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def k8s(self) -> Optional['outputs.CheClusterSpecK8s']:
        """
        Configuration settings specific to Che installations made on upstream Kubernetes.
        """
        return pulumi.get(self, "k8s")

    @property
    @pulumi.getter
    def metrics(self) -> Optional['outputs.CheClusterSpecMetrics']:
        """
        Configuration settings related to the metrics collection used by the Che installation.
        """
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter
    def server(self) -> Optional['outputs.CheClusterSpecServer']:
        """
        General configuration settings related to the Che server and the plugin and devfile registries
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def storage(self) -> Optional['outputs.CheClusterSpecStorage']:
        """
        Configuration settings related to the persistent storage used by the Che installation.
        """
        return pulumi.get(self, "storage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CheClusterSpecAuth(dict):
    """
    Configuration settings related to the Authentication used by the Che installation.
    """
    def __init__(__self__, *,
                 external_identity_provider: Optional[bool] = None,
                 identity_provider_admin_user_name: Optional[str] = None,
                 identity_provider_client_id: Optional[str] = None,
                 identity_provider_image: Optional[str] = None,
                 identity_provider_image_pull_policy: Optional[str] = None,
                 identity_provider_password: Optional[str] = None,
                 identity_provider_postgres_password: Optional[str] = None,
                 identity_provider_postgres_secret: Optional[str] = None,
                 identity_provider_realm: Optional[str] = None,
                 identity_provider_secret: Optional[str] = None,
                 identity_provider_url: Optional[str] = None,
                 o_auth_client_name: Optional[str] = None,
                 o_auth_secret: Optional[str] = None,
                 open_shifto_auth: Optional[bool] = None,
                 update_admin_password: Optional[bool] = None):
        """
        Configuration settings related to the Authentication used by the Che installation.
        :param bool external_identity_provider: Instructs the operator on whether or not to deploy a dedicated Identity Provider (Keycloak or RH SSO instance). By default a dedicated Identity Provider server is deployed as part of the Che installation. But if `externalIdentityProvider` is `true`, then no dedicated identity provider will be deployed by the operator and you might need to provide details about the external identity provider you want to use. See also all the other fields starting with: `identityProvider`.
        :param str identity_provider_admin_user_name: Overrides the name of the Identity Provider admin user. Defaults to `admin`.
        :param str identity_provider_client_id: Name of a Identity provider (Keycloak / RH SSO) `client-id` that should be used for Che. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to the value of the `flavour` field suffixed with `-public`.
        :param str identity_provider_image: Overrides the container image used in the Identity Provider (Keycloak / RH SSO) deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
        :param str identity_provider_image_pull_policy: Overrides the image pull policy used in the Identity Provider (Keycloak / RH SSO) deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
        :param str identity_provider_password: Overrides the password of Keycloak admin user. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to an auto-generated password.
        :param str identity_provider_postgres_password: Password for The Identity Provider (Keycloak / RH SSO) to connect to the database. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to an auto-generated password.
        :param str identity_provider_postgres_secret: The secret that contains `password` for The Identity Provider (Keycloak / RH SSO) to connect to the database. If the secret is defined then `identityProviderPostgresPassword` will be ignored. If the value is omitted or left blank then there are two scenarios: 1. `identityProviderPostgresPassword` is defined, then it will be used to connect to the database. 2. `identityProviderPostgresPassword` is not defined, then a new secret with the name `che-identity-postgres-secret` will be created with an auto-generated value for `password`.
        :param str identity_provider_realm: Name of a Identity provider (Keycloak / RH SSO) realm that should be used for Che. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to the value of the `flavour` field.
        :param str identity_provider_secret: The secret that contains `user` and `password` for Identity Provider. If the secret is defined then `identityProviderAdminUserName` and `identityProviderPassword` are ignored. If the value is omitted or left blank then there are two scenarios: 1. `identityProviderAdminUserName` and `identityProviderPassword` are defined, then they will be used. 2. `identityProviderAdminUserName` or `identityProviderPassword` are not defined, then a new secret with the name `che-identity-secret` will be created with default value `admin` for `user` and with an auto-generated value for `password`.
        :param str identity_provider_url: Public URL of the Identity Provider server (Keycloak / RH SSO server). You should set it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). By default this will be automatically calculated and set by the operator.
        :param str o_auth_client_name: Name of the OpenShift `OAuthClient` resource used to setup identity federation on the OpenShift side. Auto-generated if left blank. See also the `OpenShiftoAuth` field.
        :param str o_auth_secret: Name of the secret set in the OpenShift `OAuthClient` resource used to setup identity federation on the OpenShift side. Auto-generated if left blank. See also the `OAuthClientName` field.
        :param bool open_shifto_auth: Enables the integration of the identity provider (Keycloak / RHSSO) with OpenShift OAuth. Enabled by default on OpenShift. This will allow users to directly login with their Openshift user through the Openshift login, and have their workspaces created under personal OpenShift namespaces. WARNING: the `kubeadmin` user is NOT supported, and logging through it will NOT allow accessing the Che Dashboard.
        :param bool update_admin_password: Forces the default `admin` Che user to update password on first login. Defaults to `false`.
        """
        if external_identity_provider is not None:
            pulumi.set(__self__, "external_identity_provider", external_identity_provider)
        if identity_provider_admin_user_name is not None:
            pulumi.set(__self__, "identity_provider_admin_user_name", identity_provider_admin_user_name)
        if identity_provider_client_id is not None:
            pulumi.set(__self__, "identity_provider_client_id", identity_provider_client_id)
        if identity_provider_image is not None:
            pulumi.set(__self__, "identity_provider_image", identity_provider_image)
        if identity_provider_image_pull_policy is not None:
            pulumi.set(__self__, "identity_provider_image_pull_policy", identity_provider_image_pull_policy)
        if identity_provider_password is not None:
            pulumi.set(__self__, "identity_provider_password", identity_provider_password)
        if identity_provider_postgres_password is not None:
            pulumi.set(__self__, "identity_provider_postgres_password", identity_provider_postgres_password)
        if identity_provider_postgres_secret is not None:
            pulumi.set(__self__, "identity_provider_postgres_secret", identity_provider_postgres_secret)
        if identity_provider_realm is not None:
            pulumi.set(__self__, "identity_provider_realm", identity_provider_realm)
        if identity_provider_secret is not None:
            pulumi.set(__self__, "identity_provider_secret", identity_provider_secret)
        if identity_provider_url is not None:
            pulumi.set(__self__, "identity_provider_url", identity_provider_url)
        if o_auth_client_name is not None:
            pulumi.set(__self__, "o_auth_client_name", o_auth_client_name)
        if o_auth_secret is not None:
            pulumi.set(__self__, "o_auth_secret", o_auth_secret)
        if open_shifto_auth is not None:
            pulumi.set(__self__, "open_shifto_auth", open_shifto_auth)
        if update_admin_password is not None:
            pulumi.set(__self__, "update_admin_password", update_admin_password)

    @property
    @pulumi.getter(name="externalIdentityProvider")
    def external_identity_provider(self) -> Optional[bool]:
        """
        Instructs the operator on whether or not to deploy a dedicated Identity Provider (Keycloak or RH SSO instance). By default a dedicated Identity Provider server is deployed as part of the Che installation. But if `externalIdentityProvider` is `true`, then no dedicated identity provider will be deployed by the operator and you might need to provide details about the external identity provider you want to use. See also all the other fields starting with: `identityProvider`.
        """
        return pulumi.get(self, "external_identity_provider")

    @property
    @pulumi.getter(name="identityProviderAdminUserName")
    def identity_provider_admin_user_name(self) -> Optional[str]:
        """
        Overrides the name of the Identity Provider admin user. Defaults to `admin`.
        """
        return pulumi.get(self, "identity_provider_admin_user_name")

    @property
    @pulumi.getter(name="identityProviderClientId")
    def identity_provider_client_id(self) -> Optional[str]:
        """
        Name of a Identity provider (Keycloak / RH SSO) `client-id` that should be used for Che. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to the value of the `flavour` field suffixed with `-public`.
        """
        return pulumi.get(self, "identity_provider_client_id")

    @property
    @pulumi.getter(name="identityProviderImage")
    def identity_provider_image(self) -> Optional[str]:
        """
        Overrides the container image used in the Identity Provider (Keycloak / RH SSO) deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
        """
        return pulumi.get(self, "identity_provider_image")

    @property
    @pulumi.getter(name="identityProviderImagePullPolicy")
    def identity_provider_image_pull_policy(self) -> Optional[str]:
        """
        Overrides the image pull policy used in the Identity Provider (Keycloak / RH SSO) deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
        """
        return pulumi.get(self, "identity_provider_image_pull_policy")

    @property
    @pulumi.getter(name="identityProviderPassword")
    def identity_provider_password(self) -> Optional[str]:
        """
        Overrides the password of Keycloak admin user. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to an auto-generated password.
        """
        return pulumi.get(self, "identity_provider_password")

    @property
    @pulumi.getter(name="identityProviderPostgresPassword")
    def identity_provider_postgres_password(self) -> Optional[str]:
        """
        Password for The Identity Provider (Keycloak / RH SSO) to connect to the database. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to an auto-generated password.
        """
        return pulumi.get(self, "identity_provider_postgres_password")

    @property
    @pulumi.getter(name="identityProviderPostgresSecret")
    def identity_provider_postgres_secret(self) -> Optional[str]:
        """
        The secret that contains `password` for The Identity Provider (Keycloak / RH SSO) to connect to the database. If the secret is defined then `identityProviderPostgresPassword` will be ignored. If the value is omitted or left blank then there are two scenarios: 1. `identityProviderPostgresPassword` is defined, then it will be used to connect to the database. 2. `identityProviderPostgresPassword` is not defined, then a new secret with the name `che-identity-postgres-secret` will be created with an auto-generated value for `password`.
        """
        return pulumi.get(self, "identity_provider_postgres_secret")

    @property
    @pulumi.getter(name="identityProviderRealm")
    def identity_provider_realm(self) -> Optional[str]:
        """
        Name of a Identity provider (Keycloak / RH SSO) realm that should be used for Che. This is useful to override it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). If omitted or left blank, it will be set to the value of the `flavour` field.
        """
        return pulumi.get(self, "identity_provider_realm")

    @property
    @pulumi.getter(name="identityProviderSecret")
    def identity_provider_secret(self) -> Optional[str]:
        """
        The secret that contains `user` and `password` for Identity Provider. If the secret is defined then `identityProviderAdminUserName` and `identityProviderPassword` are ignored. If the value is omitted or left blank then there are two scenarios: 1. `identityProviderAdminUserName` and `identityProviderPassword` are defined, then they will be used. 2. `identityProviderAdminUserName` or `identityProviderPassword` are not defined, then a new secret with the name `che-identity-secret` will be created with default value `admin` for `user` and with an auto-generated value for `password`.
        """
        return pulumi.get(self, "identity_provider_secret")

    @property
    @pulumi.getter(name="identityProviderURL")
    def identity_provider_url(self) -> Optional[str]:
        """
        Public URL of the Identity Provider server (Keycloak / RH SSO server). You should set it ONLY if you use an external Identity Provider (see the `externalIdentityProvider` field). By default this will be automatically calculated and set by the operator.
        """
        return pulumi.get(self, "identity_provider_url")

    @property
    @pulumi.getter(name="oAuthClientName")
    def o_auth_client_name(self) -> Optional[str]:
        """
        Name of the OpenShift `OAuthClient` resource used to setup identity federation on the OpenShift side. Auto-generated if left blank. See also the `OpenShiftoAuth` field.
        """
        return pulumi.get(self, "o_auth_client_name")

    @property
    @pulumi.getter(name="oAuthSecret")
    def o_auth_secret(self) -> Optional[str]:
        """
        Name of the secret set in the OpenShift `OAuthClient` resource used to setup identity federation on the OpenShift side. Auto-generated if left blank. See also the `OAuthClientName` field.
        """
        return pulumi.get(self, "o_auth_secret")

    @property
    @pulumi.getter(name="openShiftoAuth")
    def open_shifto_auth(self) -> Optional[bool]:
        """
        Enables the integration of the identity provider (Keycloak / RHSSO) with OpenShift OAuth. Enabled by default on OpenShift. This will allow users to directly login with their Openshift user through the Openshift login, and have their workspaces created under personal OpenShift namespaces. WARNING: the `kubeadmin` user is NOT supported, and logging through it will NOT allow accessing the Che Dashboard.
        """
        return pulumi.get(self, "open_shifto_auth")

    @property
    @pulumi.getter(name="updateAdminPassword")
    def update_admin_password(self) -> Optional[bool]:
        """
        Forces the default `admin` Che user to update password on first login. Defaults to `false`.
        """
        return pulumi.get(self, "update_admin_password")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CheClusterSpecDatabase(dict):
    """
    Configuration settings related to the database used by the Che installation.
    """
    def __init__(__self__, *,
                 che_postgres_db: Optional[str] = None,
                 che_postgres_host_name: Optional[str] = None,
                 che_postgres_password: Optional[str] = None,
                 che_postgres_port: Optional[str] = None,
                 che_postgres_secret: Optional[str] = None,
                 che_postgres_user: Optional[str] = None,
                 external_db: Optional[bool] = None,
                 postgres_image: Optional[str] = None,
                 postgres_image_pull_policy: Optional[str] = None):
        """
        Configuration settings related to the database used by the Che installation.
        :param str che_postgres_db: Postgres database name that the Che server uses to connect to the DB. Defaults to `dbche`.
        :param str che_postgres_host_name: Postgres Database hostname that the Che server uses to connect to. Defaults to postgres. This value should be overridden ONLY when using an external database (see field `externalDb`). In the default case it will be automatically set by the operator.
        :param str che_postgres_password: Postgres password that the Che server should use to connect to the DB. If omitted or left blank, it will be set to an auto-generated value.
        :param str che_postgres_port: Postgres Database port that the Che server uses to connect to. Defaults to 5432. This value should be overridden ONLY when using an external database (see field `externalDb`). In the default case it will be automatically set by the operator.
        :param str che_postgres_secret: The secret that contains Postgres `user` and `password` that the Che server should use to connect to the DB. If the secret is defined then `chePostgresUser` and `chePostgresPassword` are ignored. If the value is omitted or left blank then there are two scenarios: 1. `chePostgresUser` and `chePostgresPassword` are defined, then they will be used to connect to the DB. 2. `chePostgresUser` or `chePostgresPassword` are not defined, then a new secret with the name `che-postgres-secret` will be created with default value of `pgche` for `user` and with an auto-generated value for `password`.
        :param str che_postgres_user: Postgres user that the Che server should use to connect to the DB. Defaults to `pgche`.
        :param bool external_db: Instructs the operator on whether or not to deploy a dedicated database. By default a dedicated Postgres database is deployed as part of the Che installation. But if `externalDb` is `true`, then no dedicated database will be deployed by the operator and you might need to provide connection details to the external DB you want to use. See also all the fields starting with: `chePostgres`.
        :param str postgres_image: Overrides the container image used in the Postgres database deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
        :param str postgres_image_pull_policy: Overrides the image pull policy used in the Postgres database deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
        """
        if che_postgres_db is not None:
            pulumi.set(__self__, "che_postgres_db", che_postgres_db)
        if che_postgres_host_name is not None:
            pulumi.set(__self__, "che_postgres_host_name", che_postgres_host_name)
        if che_postgres_password is not None:
            pulumi.set(__self__, "che_postgres_password", che_postgres_password)
        if che_postgres_port is not None:
            pulumi.set(__self__, "che_postgres_port", che_postgres_port)
        if che_postgres_secret is not None:
            pulumi.set(__self__, "che_postgres_secret", che_postgres_secret)
        if che_postgres_user is not None:
            pulumi.set(__self__, "che_postgres_user", che_postgres_user)
        if external_db is not None:
            pulumi.set(__self__, "external_db", external_db)
        if postgres_image is not None:
            pulumi.set(__self__, "postgres_image", postgres_image)
        if postgres_image_pull_policy is not None:
            pulumi.set(__self__, "postgres_image_pull_policy", postgres_image_pull_policy)

    @property
    @pulumi.getter(name="chePostgresDb")
    def che_postgres_db(self) -> Optional[str]:
        """
        Postgres database name that the Che server uses to connect to the DB. Defaults to `dbche`.
        """
        return pulumi.get(self, "che_postgres_db")

    @property
    @pulumi.getter(name="chePostgresHostName")
    def che_postgres_host_name(self) -> Optional[str]:
        """
        Postgres Database hostname that the Che server uses to connect to. Defaults to postgres. This value should be overridden ONLY when using an external database (see field `externalDb`). In the default case it will be automatically set by the operator.
        """
        return pulumi.get(self, "che_postgres_host_name")

    @property
    @pulumi.getter(name="chePostgresPassword")
    def che_postgres_password(self) -> Optional[str]:
        """
        Postgres password that the Che server should use to connect to the DB. If omitted or left blank, it will be set to an auto-generated value.
        """
        return pulumi.get(self, "che_postgres_password")

    @property
    @pulumi.getter(name="chePostgresPort")
    def che_postgres_port(self) -> Optional[str]:
        """
        Postgres Database port that the Che server uses to connect to. Defaults to 5432. This value should be overridden ONLY when using an external database (see field `externalDb`). In the default case it will be automatically set by the operator.
        """
        return pulumi.get(self, "che_postgres_port")

    @property
    @pulumi.getter(name="chePostgresSecret")
    def che_postgres_secret(self) -> Optional[str]:
        """
        The secret that contains Postgres `user` and `password` that the Che server should use to connect to the DB. If the secret is defined then `chePostgresUser` and `chePostgresPassword` are ignored. If the value is omitted or left blank then there are two scenarios: 1. `chePostgresUser` and `chePostgresPassword` are defined, then they will be used to connect to the DB. 2. `chePostgresUser` or `chePostgresPassword` are not defined, then a new secret with the name `che-postgres-secret` will be created with default value of `pgche` for `user` and with an auto-generated value for `password`.
        """
        return pulumi.get(self, "che_postgres_secret")

    @property
    @pulumi.getter(name="chePostgresUser")
    def che_postgres_user(self) -> Optional[str]:
        """
        Postgres user that the Che server should use to connect to the DB. Defaults to `pgche`.
        """
        return pulumi.get(self, "che_postgres_user")

    @property
    @pulumi.getter(name="externalDb")
    def external_db(self) -> Optional[bool]:
        """
        Instructs the operator on whether or not to deploy a dedicated database. By default a dedicated Postgres database is deployed as part of the Che installation. But if `externalDb` is `true`, then no dedicated database will be deployed by the operator and you might need to provide connection details to the external DB you want to use. See also all the fields starting with: `chePostgres`.
        """
        return pulumi.get(self, "external_db")

    @property
    @pulumi.getter(name="postgresImage")
    def postgres_image(self) -> Optional[str]:
        """
        Overrides the container image used in the Postgres database deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
        """
        return pulumi.get(self, "postgres_image")

    @property
    @pulumi.getter(name="postgresImagePullPolicy")
    def postgres_image_pull_policy(self) -> Optional[str]:
        """
        Overrides the image pull policy used in the Postgres database deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
        """
        return pulumi.get(self, "postgres_image_pull_policy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CheClusterSpecK8s(dict):
    """
    Configuration settings specific to Che installations made on upstream Kubernetes.
    """
    def __init__(__self__, *,
                 ingress_class: Optional[str] = None,
                 ingress_domain: Optional[str] = None,
                 ingress_strategy: Optional[str] = None,
                 security_context_fs_group: Optional[str] = None,
                 security_context_run_as_user: Optional[str] = None,
                 tls_secret_name: Optional[str] = None):
        """
        Configuration settings specific to Che installations made on upstream Kubernetes.
        :param str ingress_class: Ingress class that will define the which controler will manage ingresses. Defaults to `nginx`. NB: This drives the `is kubernetes.io/ingress.class` annotation on Che-related ingresses.
        :param str ingress_domain: Global ingress domain for a K8S cluster. This MUST be explicitly specified: there are no defaults.
        :param str ingress_strategy: Strategy for ingress creation. This can be `multi-host` (host is explicitly provided in ingress), `single-host` (host is provided, path-based rules) and `default-host.*`(no host is provided, path-based rules). Defaults to `"multi-host`
        :param str security_context_fs_group: FSGroup the Che pod and Workspace pods containers should run in. Defaults to `1724`.
        :param str security_context_run_as_user: ID of the user the Che pod and Workspace pods containers should run as. Default to `1724`.
        :param str tls_secret_name: Name of a secret that will be used to setup ingress TLS termination if TLS is enabled. See also the `tlsSupport` field.
        """
        if ingress_class is not None:
            pulumi.set(__self__, "ingress_class", ingress_class)
        if ingress_domain is not None:
            pulumi.set(__self__, "ingress_domain", ingress_domain)
        if ingress_strategy is not None:
            pulumi.set(__self__, "ingress_strategy", ingress_strategy)
        if security_context_fs_group is not None:
            pulumi.set(__self__, "security_context_fs_group", security_context_fs_group)
        if security_context_run_as_user is not None:
            pulumi.set(__self__, "security_context_run_as_user", security_context_run_as_user)
        if tls_secret_name is not None:
            pulumi.set(__self__, "tls_secret_name", tls_secret_name)

    @property
    @pulumi.getter(name="ingressClass")
    def ingress_class(self) -> Optional[str]:
        """
        Ingress class that will define the which controler will manage ingresses. Defaults to `nginx`. NB: This drives the `is kubernetes.io/ingress.class` annotation on Che-related ingresses.
        """
        return pulumi.get(self, "ingress_class")

    @property
    @pulumi.getter(name="ingressDomain")
    def ingress_domain(self) -> Optional[str]:
        """
        Global ingress domain for a K8S cluster. This MUST be explicitly specified: there are no defaults.
        """
        return pulumi.get(self, "ingress_domain")

    @property
    @pulumi.getter(name="ingressStrategy")
    def ingress_strategy(self) -> Optional[str]:
        """
        Strategy for ingress creation. This can be `multi-host` (host is explicitly provided in ingress), `single-host` (host is provided, path-based rules) and `default-host.*`(no host is provided, path-based rules). Defaults to `"multi-host`
        """
        return pulumi.get(self, "ingress_strategy")

    @property
    @pulumi.getter(name="securityContextFsGroup")
    def security_context_fs_group(self) -> Optional[str]:
        """
        FSGroup the Che pod and Workspace pods containers should run in. Defaults to `1724`.
        """
        return pulumi.get(self, "security_context_fs_group")

    @property
    @pulumi.getter(name="securityContextRunAsUser")
    def security_context_run_as_user(self) -> Optional[str]:
        """
        ID of the user the Che pod and Workspace pods containers should run as. Default to `1724`.
        """
        return pulumi.get(self, "security_context_run_as_user")

    @property
    @pulumi.getter(name="tlsSecretName")
    def tls_secret_name(self) -> Optional[str]:
        """
        Name of a secret that will be used to setup ingress TLS termination if TLS is enabled. See also the `tlsSupport` field.
        """
        return pulumi.get(self, "tls_secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CheClusterSpecMetrics(dict):
    """
    Configuration settings related to the metrics collection used by the Che installation.
    """
    def __init__(__self__, *,
                 enable: Optional[bool] = None):
        """
        Configuration settings related to the metrics collection used by the Che installation.
        :param bool enable: Enables `metrics` Che server endpoint. Default to `true`.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Enables `metrics` Che server endpoint. Default to `true`.
        """
        return pulumi.get(self, "enable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CheClusterSpecServer(dict):
    """
    General configuration settings related to the Che server and the plugin and devfile registries
    """
    def __init__(__self__, *,
                 air_gap_container_registry_hostname: Optional[str] = None,
                 air_gap_container_registry_organization: Optional[str] = None,
                 allow_user_defined_workspace_namespaces: Optional[bool] = None,
                 che_debug: Optional[str] = None,
                 che_flavor: Optional[str] = None,
                 che_host: Optional[str] = None,
                 che_host_tls_secret: Optional[str] = None,
                 che_image: Optional[str] = None,
                 che_image_pull_policy: Optional[str] = None,
                 che_image_tag: Optional[str] = None,
                 che_log_level: Optional[str] = None,
                 che_workspace_cluster_role: Optional[str] = None,
                 custom_che_properties: Optional[Mapping[str, str]] = None,
                 devfile_registry_image: Optional[str] = None,
                 devfile_registry_memory_limit: Optional[str] = None,
                 devfile_registry_memory_request: Optional[str] = None,
                 devfile_registry_pull_policy: Optional[str] = None,
                 devfile_registry_url: Optional[str] = None,
                 external_devfile_registry: Optional[bool] = None,
                 external_plugin_registry: Optional[bool] = None,
                 git_self_signed_cert: Optional[bool] = None,
                 non_proxy_hosts: Optional[str] = None,
                 plugin_registry_image: Optional[str] = None,
                 plugin_registry_memory_limit: Optional[str] = None,
                 plugin_registry_memory_request: Optional[str] = None,
                 plugin_registry_pull_policy: Optional[str] = None,
                 plugin_registry_url: Optional[str] = None,
                 proxy_password: Optional[str] = None,
                 proxy_port: Optional[str] = None,
                 proxy_secret: Optional[str] = None,
                 proxy_url: Optional[str] = None,
                 proxy_user: Optional[str] = None,
                 self_signed_cert: Optional[bool] = None,
                 server_memory_limit: Optional[str] = None,
                 server_memory_request: Optional[str] = None,
                 server_trust_store_config_map_name: Optional[str] = None,
                 tls_support: Optional[bool] = None,
                 workspace_namespace_default: Optional[str] = None):
        """
        General configuration settings related to the Che server and the plugin and devfile registries
        :param str air_gap_container_registry_hostname: Optional hostname (or url) to an alternate container registry to pull images from. This value overrides the container registry hostname defined in all the default container images involved in a Che deployment. This is particularly useful to install Che in an air-gapped environment.
        :param str air_gap_container_registry_organization: Optional repository name of an alternate container registry to pull images from. This value overrides the container registry organization defined in all the default container images involved in a Che deployment. This is particularly useful to install Che in an air-gapped environment.
        :param bool allow_user_defined_workspace_namespaces: Defines if a user is able to specify Kubernetes namespace (or OpenShift project) different from the default. It's NOT RECOMMENDED to configured true without OAuth configured. This property is also used by the OpenShift infra.
        :param str che_debug: Enables the debug mode for Che server. Defaults to `false`.
        :param str che_flavor: Flavor of the installation. This is either `che` for upstream Che installations, or `codeready` for CodeReady Workspaces installation. In most cases the default value should not be overridden.
        :param str che_host: Public hostname of the installed Che server. If value is omitted then it will be automatically set by the operator. (see the `cheHostTLSSecret` field).
        :param str che_host_tls_secret: Name of a secret containing certificates to secure ingress/route for the custom hostname of the installed Che server. (see the `cheHost` field).
        :param str che_image: Overrides the container image used in Che deployment. This does NOT include the container image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
        :param str che_image_pull_policy: Overrides the image pull policy used in Che deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
        :param str che_image_tag: Overrides the tag of the container image used in Che deployment. Omit it or leave it empty to use the defaut image tag provided by the operator.
        :param str che_log_level: Log level for the Che server: `INFO` or `DEBUG`. Defaults to `INFO`.
        :param str che_workspace_cluster_role: Custom cluster role bound to the user for the Che workspaces. The default roles are used if this is omitted or left blank.
        :param Mapping[str, str] custom_che_properties: Map of additional environment variables that will be applied in the generated `che` config map to be used by the Che server, in addition to the values already generated from other fields of the `CheCluster` custom resource (CR). If `customCheProperties` contains a property that would be normally generated in `che` config map from other CR fields, then the value defined in the `customCheProperties` will be used instead.
        :param str devfile_registry_image: Overrides the container image used in the Devfile registry deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
        :param str devfile_registry_memory_limit: Overrides the memory limit used in the Devfile registry deployment. Defaults to 256Mi.
        :param str devfile_registry_memory_request: Overrides the memory request used in the Devfile registry deployment. Defaults to 16Mi.
        :param str devfile_registry_pull_policy: Overrides the image pull policy used in the Devfile registry deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
        :param str devfile_registry_url: Public URL of the Devfile registry, that serves sample, ready-to-use devfiles. You should set it ONLY if you use an external devfile registry (see the `externalDevfileRegistry` field). By default this will be automatically calculated by the operator.
        :param bool external_devfile_registry: Instructs the operator on whether or not to deploy a dedicated Devfile registry server. By default a dedicated devfile registry server is started. But if `externalDevfileRegistry` is `true`, then no such dedicated server will be started by the operator and you will have to manually set the `devfileRegistryUrl` field
        :param bool external_plugin_registry: Instructs the operator on whether or not to deploy a dedicated Plugin registry server. By default a dedicated plugin registry server is started. But if `externalPluginRegistry` is `true`, then no such dedicated server will be started by the operator and you will have to manually set the `pluginRegistryUrl` field.
        :param bool git_self_signed_cert: If enabled, then the certificate from `che-git-self-signed-cert` config map will be propagated to the Che components and provide particular configuration for Git.
        :param str non_proxy_hosts: List of hosts that should not use the configured proxy. Use `|`` as delimiter, eg `localhost|my.host.com|123.42.12.32` Only use when configuring a proxy is required. Operator respects OpenShift cluster wide proxy configuration and no additional configuration is required, but defining `nonProxyHosts` in a custom resource leads to merging non proxy hosts lists from the cluster proxy configuration and ones defined in the custom resources. (see the doc https://docs.openshift.com/container-platform/4.4/networking/enable-cluster-wide-proxy.html) (see also the `proxyURL` fields).
        :param str plugin_registry_image: Overrides the container image used in the Plugin registry deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
        :param str plugin_registry_memory_limit: Overrides the memory limit used in the Plugin registry deployment. Defaults to 256Mi.
        :param str plugin_registry_memory_request: Overrides the memory request used in the Plugin registry deployment. Defaults to 16Mi.
        :param str plugin_registry_pull_policy: Overrides the image pull policy used in the Plugin registry deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
        :param str plugin_registry_url: Public URL of the Plugin registry, that serves sample ready-to-use devfiles. You should set it ONLY if you use an external devfile registry (see the `externalPluginRegistry` field). By default this will be automatically calculated by the operator.
        :param str proxy_password: Password of the proxy server Only use when proxy configuration is required (see also the `proxyURL`, `proxyUser` and `proxySecret` fields).
        :param str proxy_port: Port of the proxy server. Only use when configuring a proxy is required. (see also the `proxyURL` and `nonProxyHosts` fields).
        :param str proxy_secret: The secret that contains `user` and `password` for a proxy server. If the secret is defined then `proxyUser` and `proxyPassword` are ignored
        :param str proxy_url: URL (protocol+hostname) of the proxy server. This drives the appropriate changes in the `JAVA_OPTS` and `https(s)_proxy` variables in the Che server and workspaces containers. Only use when configuring a proxy is required. Operator respects OpenShift cluster wide proxy configuration and no additional configuration is required, but defining `proxyUrl` in a custom resource leads to overrides the cluster proxy configuration with fields `proxyUrl`, `proxyPort`, `proxyUser` and `proxyPassword` from the custom resource. (see the doc https://docs.openshift.com/container-platform/4.4/networking/enable-cluster-wide-proxy.html) (see also the `proxyPort` and `nonProxyHosts` fields).
        :param str proxy_user: User name of the proxy server. Only use when configuring a proxy is required (see also the `proxyURL`, `proxyPassword` and `proxySecret` fields).
        :param bool self_signed_cert: Deprecated. The value of this flag is ignored. Che operator will automatically detect if router certificate is self-signed. If so it will be propagated to Che server and some other components.
        :param str server_memory_limit: Overrides the memory limit used in the Che server deployment. Defaults to 1Gi.
        :param str server_memory_request: Overrides the memory request used in the Che server deployment. Defaults to 512Mi.
        :param str server_trust_store_config_map_name: Name of the config-map with public certificates to add to Java trust store of the Che server. This is usually required when adding the OpenShift OAuth provider which has https endpoint signed with self-signed cert. So, Che server must be aware of its CA cert to be able to request it. This is disabled by default.
        :param bool tls_support: Deprecated. Instructs the operator to deploy Che in TLS mode. This is enabled by default. Disabling TLS may cause malfunction of some Che components.
        :param str workspace_namespace_default: Defines Kubernetes default namespace in which user's workspaces are created if user does not override it. It's possible to use <username>, <userid> and <workspaceid> placeholders (e.g.: che-workspace-<username>). In that case, new namespace will be created for each user (or workspace). Is used by OpenShift infra as well to specify Project
        """
        if air_gap_container_registry_hostname is not None:
            pulumi.set(__self__, "air_gap_container_registry_hostname", air_gap_container_registry_hostname)
        if air_gap_container_registry_organization is not None:
            pulumi.set(__self__, "air_gap_container_registry_organization", air_gap_container_registry_organization)
        if allow_user_defined_workspace_namespaces is not None:
            pulumi.set(__self__, "allow_user_defined_workspace_namespaces", allow_user_defined_workspace_namespaces)
        if che_debug is not None:
            pulumi.set(__self__, "che_debug", che_debug)
        if che_flavor is not None:
            pulumi.set(__self__, "che_flavor", che_flavor)
        if che_host is not None:
            pulumi.set(__self__, "che_host", che_host)
        if che_host_tls_secret is not None:
            pulumi.set(__self__, "che_host_tls_secret", che_host_tls_secret)
        if che_image is not None:
            pulumi.set(__self__, "che_image", che_image)
        if che_image_pull_policy is not None:
            pulumi.set(__self__, "che_image_pull_policy", che_image_pull_policy)
        if che_image_tag is not None:
            pulumi.set(__self__, "che_image_tag", che_image_tag)
        if che_log_level is not None:
            pulumi.set(__self__, "che_log_level", che_log_level)
        if che_workspace_cluster_role is not None:
            pulumi.set(__self__, "che_workspace_cluster_role", che_workspace_cluster_role)
        if custom_che_properties is not None:
            pulumi.set(__self__, "custom_che_properties", custom_che_properties)
        if devfile_registry_image is not None:
            pulumi.set(__self__, "devfile_registry_image", devfile_registry_image)
        if devfile_registry_memory_limit is not None:
            pulumi.set(__self__, "devfile_registry_memory_limit", devfile_registry_memory_limit)
        if devfile_registry_memory_request is not None:
            pulumi.set(__self__, "devfile_registry_memory_request", devfile_registry_memory_request)
        if devfile_registry_pull_policy is not None:
            pulumi.set(__self__, "devfile_registry_pull_policy", devfile_registry_pull_policy)
        if devfile_registry_url is not None:
            pulumi.set(__self__, "devfile_registry_url", devfile_registry_url)
        if external_devfile_registry is not None:
            pulumi.set(__self__, "external_devfile_registry", external_devfile_registry)
        if external_plugin_registry is not None:
            pulumi.set(__self__, "external_plugin_registry", external_plugin_registry)
        if git_self_signed_cert is not None:
            pulumi.set(__self__, "git_self_signed_cert", git_self_signed_cert)
        if non_proxy_hosts is not None:
            pulumi.set(__self__, "non_proxy_hosts", non_proxy_hosts)
        if plugin_registry_image is not None:
            pulumi.set(__self__, "plugin_registry_image", plugin_registry_image)
        if plugin_registry_memory_limit is not None:
            pulumi.set(__self__, "plugin_registry_memory_limit", plugin_registry_memory_limit)
        if plugin_registry_memory_request is not None:
            pulumi.set(__self__, "plugin_registry_memory_request", plugin_registry_memory_request)
        if plugin_registry_pull_policy is not None:
            pulumi.set(__self__, "plugin_registry_pull_policy", plugin_registry_pull_policy)
        if plugin_registry_url is not None:
            pulumi.set(__self__, "plugin_registry_url", plugin_registry_url)
        if proxy_password is not None:
            pulumi.set(__self__, "proxy_password", proxy_password)
        if proxy_port is not None:
            pulumi.set(__self__, "proxy_port", proxy_port)
        if proxy_secret is not None:
            pulumi.set(__self__, "proxy_secret", proxy_secret)
        if proxy_url is not None:
            pulumi.set(__self__, "proxy_url", proxy_url)
        if proxy_user is not None:
            pulumi.set(__self__, "proxy_user", proxy_user)
        if self_signed_cert is not None:
            pulumi.set(__self__, "self_signed_cert", self_signed_cert)
        if server_memory_limit is not None:
            pulumi.set(__self__, "server_memory_limit", server_memory_limit)
        if server_memory_request is not None:
            pulumi.set(__self__, "server_memory_request", server_memory_request)
        if server_trust_store_config_map_name is not None:
            pulumi.set(__self__, "server_trust_store_config_map_name", server_trust_store_config_map_name)
        if tls_support is not None:
            pulumi.set(__self__, "tls_support", tls_support)
        if workspace_namespace_default is not None:
            pulumi.set(__self__, "workspace_namespace_default", workspace_namespace_default)

    @property
    @pulumi.getter(name="airGapContainerRegistryHostname")
    def air_gap_container_registry_hostname(self) -> Optional[str]:
        """
        Optional hostname (or url) to an alternate container registry to pull images from. This value overrides the container registry hostname defined in all the default container images involved in a Che deployment. This is particularly useful to install Che in an air-gapped environment.
        """
        return pulumi.get(self, "air_gap_container_registry_hostname")

    @property
    @pulumi.getter(name="airGapContainerRegistryOrganization")
    def air_gap_container_registry_organization(self) -> Optional[str]:
        """
        Optional repository name of an alternate container registry to pull images from. This value overrides the container registry organization defined in all the default container images involved in a Che deployment. This is particularly useful to install Che in an air-gapped environment.
        """
        return pulumi.get(self, "air_gap_container_registry_organization")

    @property
    @pulumi.getter(name="allowUserDefinedWorkspaceNamespaces")
    def allow_user_defined_workspace_namespaces(self) -> Optional[bool]:
        """
        Defines if a user is able to specify Kubernetes namespace (or OpenShift project) different from the default. It's NOT RECOMMENDED to configured true without OAuth configured. This property is also used by the OpenShift infra.
        """
        return pulumi.get(self, "allow_user_defined_workspace_namespaces")

    @property
    @pulumi.getter(name="cheDebug")
    def che_debug(self) -> Optional[str]:
        """
        Enables the debug mode for Che server. Defaults to `false`.
        """
        return pulumi.get(self, "che_debug")

    @property
    @pulumi.getter(name="cheFlavor")
    def che_flavor(self) -> Optional[str]:
        """
        Flavor of the installation. This is either `che` for upstream Che installations, or `codeready` for CodeReady Workspaces installation. In most cases the default value should not be overridden.
        """
        return pulumi.get(self, "che_flavor")

    @property
    @pulumi.getter(name="cheHost")
    def che_host(self) -> Optional[str]:
        """
        Public hostname of the installed Che server. If value is omitted then it will be automatically set by the operator. (see the `cheHostTLSSecret` field).
        """
        return pulumi.get(self, "che_host")

    @property
    @pulumi.getter(name="cheHostTLSSecret")
    def che_host_tls_secret(self) -> Optional[str]:
        """
        Name of a secret containing certificates to secure ingress/route for the custom hostname of the installed Che server. (see the `cheHost` field).
        """
        return pulumi.get(self, "che_host_tls_secret")

    @property
    @pulumi.getter(name="cheImage")
    def che_image(self) -> Optional[str]:
        """
        Overrides the container image used in Che deployment. This does NOT include the container image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
        """
        return pulumi.get(self, "che_image")

    @property
    @pulumi.getter(name="cheImagePullPolicy")
    def che_image_pull_policy(self) -> Optional[str]:
        """
        Overrides the image pull policy used in Che deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
        """
        return pulumi.get(self, "che_image_pull_policy")

    @property
    @pulumi.getter(name="cheImageTag")
    def che_image_tag(self) -> Optional[str]:
        """
        Overrides the tag of the container image used in Che deployment. Omit it or leave it empty to use the defaut image tag provided by the operator.
        """
        return pulumi.get(self, "che_image_tag")

    @property
    @pulumi.getter(name="cheLogLevel")
    def che_log_level(self) -> Optional[str]:
        """
        Log level for the Che server: `INFO` or `DEBUG`. Defaults to `INFO`.
        """
        return pulumi.get(self, "che_log_level")

    @property
    @pulumi.getter(name="cheWorkspaceClusterRole")
    def che_workspace_cluster_role(self) -> Optional[str]:
        """
        Custom cluster role bound to the user for the Che workspaces. The default roles are used if this is omitted or left blank.
        """
        return pulumi.get(self, "che_workspace_cluster_role")

    @property
    @pulumi.getter(name="customCheProperties")
    def custom_che_properties(self) -> Optional[Mapping[str, str]]:
        """
        Map of additional environment variables that will be applied in the generated `che` config map to be used by the Che server, in addition to the values already generated from other fields of the `CheCluster` custom resource (CR). If `customCheProperties` contains a property that would be normally generated in `che` config map from other CR fields, then the value defined in the `customCheProperties` will be used instead.
        """
        return pulumi.get(self, "custom_che_properties")

    @property
    @pulumi.getter(name="devfileRegistryImage")
    def devfile_registry_image(self) -> Optional[str]:
        """
        Overrides the container image used in the Devfile registry deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
        """
        return pulumi.get(self, "devfile_registry_image")

    @property
    @pulumi.getter(name="devfileRegistryMemoryLimit")
    def devfile_registry_memory_limit(self) -> Optional[str]:
        """
        Overrides the memory limit used in the Devfile registry deployment. Defaults to 256Mi.
        """
        return pulumi.get(self, "devfile_registry_memory_limit")

    @property
    @pulumi.getter(name="devfileRegistryMemoryRequest")
    def devfile_registry_memory_request(self) -> Optional[str]:
        """
        Overrides the memory request used in the Devfile registry deployment. Defaults to 16Mi.
        """
        return pulumi.get(self, "devfile_registry_memory_request")

    @property
    @pulumi.getter(name="devfileRegistryPullPolicy")
    def devfile_registry_pull_policy(self) -> Optional[str]:
        """
        Overrides the image pull policy used in the Devfile registry deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
        """
        return pulumi.get(self, "devfile_registry_pull_policy")

    @property
    @pulumi.getter(name="devfileRegistryUrl")
    def devfile_registry_url(self) -> Optional[str]:
        """
        Public URL of the Devfile registry, that serves sample, ready-to-use devfiles. You should set it ONLY if you use an external devfile registry (see the `externalDevfileRegistry` field). By default this will be automatically calculated by the operator.
        """
        return pulumi.get(self, "devfile_registry_url")

    @property
    @pulumi.getter(name="externalDevfileRegistry")
    def external_devfile_registry(self) -> Optional[bool]:
        """
        Instructs the operator on whether or not to deploy a dedicated Devfile registry server. By default a dedicated devfile registry server is started. But if `externalDevfileRegistry` is `true`, then no such dedicated server will be started by the operator and you will have to manually set the `devfileRegistryUrl` field
        """
        return pulumi.get(self, "external_devfile_registry")

    @property
    @pulumi.getter(name="externalPluginRegistry")
    def external_plugin_registry(self) -> Optional[bool]:
        """
        Instructs the operator on whether or not to deploy a dedicated Plugin registry server. By default a dedicated plugin registry server is started. But if `externalPluginRegistry` is `true`, then no such dedicated server will be started by the operator and you will have to manually set the `pluginRegistryUrl` field.
        """
        return pulumi.get(self, "external_plugin_registry")

    @property
    @pulumi.getter(name="gitSelfSignedCert")
    def git_self_signed_cert(self) -> Optional[bool]:
        """
        If enabled, then the certificate from `che-git-self-signed-cert` config map will be propagated to the Che components and provide particular configuration for Git.
        """
        return pulumi.get(self, "git_self_signed_cert")

    @property
    @pulumi.getter(name="nonProxyHosts")
    def non_proxy_hosts(self) -> Optional[str]:
        """
        List of hosts that should not use the configured proxy. Use `|`` as delimiter, eg `localhost|my.host.com|123.42.12.32` Only use when configuring a proxy is required. Operator respects OpenShift cluster wide proxy configuration and no additional configuration is required, but defining `nonProxyHosts` in a custom resource leads to merging non proxy hosts lists from the cluster proxy configuration and ones defined in the custom resources. (see the doc https://docs.openshift.com/container-platform/4.4/networking/enable-cluster-wide-proxy.html) (see also the `proxyURL` fields).
        """
        return pulumi.get(self, "non_proxy_hosts")

    @property
    @pulumi.getter(name="pluginRegistryImage")
    def plugin_registry_image(self) -> Optional[str]:
        """
        Overrides the container image used in the Plugin registry deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
        """
        return pulumi.get(self, "plugin_registry_image")

    @property
    @pulumi.getter(name="pluginRegistryMemoryLimit")
    def plugin_registry_memory_limit(self) -> Optional[str]:
        """
        Overrides the memory limit used in the Plugin registry deployment. Defaults to 256Mi.
        """
        return pulumi.get(self, "plugin_registry_memory_limit")

    @property
    @pulumi.getter(name="pluginRegistryMemoryRequest")
    def plugin_registry_memory_request(self) -> Optional[str]:
        """
        Overrides the memory request used in the Plugin registry deployment. Defaults to 16Mi.
        """
        return pulumi.get(self, "plugin_registry_memory_request")

    @property
    @pulumi.getter(name="pluginRegistryPullPolicy")
    def plugin_registry_pull_policy(self) -> Optional[str]:
        """
        Overrides the image pull policy used in the Plugin registry deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
        """
        return pulumi.get(self, "plugin_registry_pull_policy")

    @property
    @pulumi.getter(name="pluginRegistryUrl")
    def plugin_registry_url(self) -> Optional[str]:
        """
        Public URL of the Plugin registry, that serves sample ready-to-use devfiles. You should set it ONLY if you use an external devfile registry (see the `externalPluginRegistry` field). By default this will be automatically calculated by the operator.
        """
        return pulumi.get(self, "plugin_registry_url")

    @property
    @pulumi.getter(name="proxyPassword")
    def proxy_password(self) -> Optional[str]:
        """
        Password of the proxy server Only use when proxy configuration is required (see also the `proxyURL`, `proxyUser` and `proxySecret` fields).
        """
        return pulumi.get(self, "proxy_password")

    @property
    @pulumi.getter(name="proxyPort")
    def proxy_port(self) -> Optional[str]:
        """
        Port of the proxy server. Only use when configuring a proxy is required. (see also the `proxyURL` and `nonProxyHosts` fields).
        """
        return pulumi.get(self, "proxy_port")

    @property
    @pulumi.getter(name="proxySecret")
    def proxy_secret(self) -> Optional[str]:
        """
        The secret that contains `user` and `password` for a proxy server. If the secret is defined then `proxyUser` and `proxyPassword` are ignored
        """
        return pulumi.get(self, "proxy_secret")

    @property
    @pulumi.getter(name="proxyURL")
    def proxy_url(self) -> Optional[str]:
        """
        URL (protocol+hostname) of the proxy server. This drives the appropriate changes in the `JAVA_OPTS` and `https(s)_proxy` variables in the Che server and workspaces containers. Only use when configuring a proxy is required. Operator respects OpenShift cluster wide proxy configuration and no additional configuration is required, but defining `proxyUrl` in a custom resource leads to overrides the cluster proxy configuration with fields `proxyUrl`, `proxyPort`, `proxyUser` and `proxyPassword` from the custom resource. (see the doc https://docs.openshift.com/container-platform/4.4/networking/enable-cluster-wide-proxy.html) (see also the `proxyPort` and `nonProxyHosts` fields).
        """
        return pulumi.get(self, "proxy_url")

    @property
    @pulumi.getter(name="proxyUser")
    def proxy_user(self) -> Optional[str]:
        """
        User name of the proxy server. Only use when configuring a proxy is required (see also the `proxyURL`, `proxyPassword` and `proxySecret` fields).
        """
        return pulumi.get(self, "proxy_user")

    @property
    @pulumi.getter(name="selfSignedCert")
    def self_signed_cert(self) -> Optional[bool]:
        """
        Deprecated. The value of this flag is ignored. Che operator will automatically detect if router certificate is self-signed. If so it will be propagated to Che server and some other components.
        """
        return pulumi.get(self, "self_signed_cert")

    @property
    @pulumi.getter(name="serverMemoryLimit")
    def server_memory_limit(self) -> Optional[str]:
        """
        Overrides the memory limit used in the Che server deployment. Defaults to 1Gi.
        """
        return pulumi.get(self, "server_memory_limit")

    @property
    @pulumi.getter(name="serverMemoryRequest")
    def server_memory_request(self) -> Optional[str]:
        """
        Overrides the memory request used in the Che server deployment. Defaults to 512Mi.
        """
        return pulumi.get(self, "server_memory_request")

    @property
    @pulumi.getter(name="serverTrustStoreConfigMapName")
    def server_trust_store_config_map_name(self) -> Optional[str]:
        """
        Name of the config-map with public certificates to add to Java trust store of the Che server. This is usually required when adding the OpenShift OAuth provider which has https endpoint signed with self-signed cert. So, Che server must be aware of its CA cert to be able to request it. This is disabled by default.
        """
        return pulumi.get(self, "server_trust_store_config_map_name")

    @property
    @pulumi.getter(name="tlsSupport")
    def tls_support(self) -> Optional[bool]:
        """
        Deprecated. Instructs the operator to deploy Che in TLS mode. This is enabled by default. Disabling TLS may cause malfunction of some Che components.
        """
        return pulumi.get(self, "tls_support")

    @property
    @pulumi.getter(name="workspaceNamespaceDefault")
    def workspace_namespace_default(self) -> Optional[str]:
        """
        Defines Kubernetes default namespace in which user's workspaces are created if user does not override it. It's possible to use <username>, <userid> and <workspaceid> placeholders (e.g.: che-workspace-<username>). In that case, new namespace will be created for each user (or workspace). Is used by OpenShift infra as well to specify Project
        """
        return pulumi.get(self, "workspace_namespace_default")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CheClusterSpecStorage(dict):
    """
    Configuration settings related to the persistent storage used by the Che installation.
    """
    def __init__(__self__, *,
                 postgres_pvc_storage_class_name: Optional[str] = None,
                 pre_create_sub_paths: Optional[bool] = None,
                 pvc_claim_size: Optional[str] = None,
                 pvc_jobs_image: Optional[str] = None,
                 pvc_strategy: Optional[str] = None,
                 workspace_pvc_storage_class_name: Optional[str] = None):
        """
        Configuration settings related to the persistent storage used by the Che installation.
        :param str postgres_pvc_storage_class_name: Storage class for the Persistent Volume Claim dedicated to the Postgres database. If omitted or left blank, default storage class is used.
        :param bool pre_create_sub_paths: Instructs the Che server to launch a special pod to pre-create a subpath in the Persistent Volumes. Defaults to `false`, however it might need to enable it according to the configuration of your K8S cluster.
        :param str pvc_claim_size: Size of the persistent volume claim for workspaces. Defaults to `1Gi`
        :param str pvc_jobs_image: Overrides the container image used to create sub-paths in the Persistent Volumes. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator. See also the `preCreateSubPaths` field.
        :param str pvc_strategy: Persistent volume claim strategy for the Che server. This Can be:`common` (all workspaces PVCs in one volume), `per-workspace` (one PVC per workspace for all declared volumes) and `unique` (one PVC per declared volume). Defaults to `common`.
        :param str workspace_pvc_storage_class_name: Storage class for the Persistent Volume Claims dedicated to the Che workspaces. If omitted or left blank, default storage class is used.
        """
        if postgres_pvc_storage_class_name is not None:
            pulumi.set(__self__, "postgres_pvc_storage_class_name", postgres_pvc_storage_class_name)
        if pre_create_sub_paths is not None:
            pulumi.set(__self__, "pre_create_sub_paths", pre_create_sub_paths)
        if pvc_claim_size is not None:
            pulumi.set(__self__, "pvc_claim_size", pvc_claim_size)
        if pvc_jobs_image is not None:
            pulumi.set(__self__, "pvc_jobs_image", pvc_jobs_image)
        if pvc_strategy is not None:
            pulumi.set(__self__, "pvc_strategy", pvc_strategy)
        if workspace_pvc_storage_class_name is not None:
            pulumi.set(__self__, "workspace_pvc_storage_class_name", workspace_pvc_storage_class_name)

    @property
    @pulumi.getter(name="postgresPVCStorageClassName")
    def postgres_pvc_storage_class_name(self) -> Optional[str]:
        """
        Storage class for the Persistent Volume Claim dedicated to the Postgres database. If omitted or left blank, default storage class is used.
        """
        return pulumi.get(self, "postgres_pvc_storage_class_name")

    @property
    @pulumi.getter(name="preCreateSubPaths")
    def pre_create_sub_paths(self) -> Optional[bool]:
        """
        Instructs the Che server to launch a special pod to pre-create a subpath in the Persistent Volumes. Defaults to `false`, however it might need to enable it according to the configuration of your K8S cluster.
        """
        return pulumi.get(self, "pre_create_sub_paths")

    @property
    @pulumi.getter(name="pvcClaimSize")
    def pvc_claim_size(self) -> Optional[str]:
        """
        Size of the persistent volume claim for workspaces. Defaults to `1Gi`
        """
        return pulumi.get(self, "pvc_claim_size")

    @property
    @pulumi.getter(name="pvcJobsImage")
    def pvc_jobs_image(self) -> Optional[str]:
        """
        Overrides the container image used to create sub-paths in the Persistent Volumes. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator. See also the `preCreateSubPaths` field.
        """
        return pulumi.get(self, "pvc_jobs_image")

    @property
    @pulumi.getter(name="pvcStrategy")
    def pvc_strategy(self) -> Optional[str]:
        """
        Persistent volume claim strategy for the Che server. This Can be:`common` (all workspaces PVCs in one volume), `per-workspace` (one PVC per workspace for all declared volumes) and `unique` (one PVC per declared volume). Defaults to `common`.
        """
        return pulumi.get(self, "pvc_strategy")

    @property
    @pulumi.getter(name="workspacePVCStorageClassName")
    def workspace_pvc_storage_class_name(self) -> Optional[str]:
        """
        Storage class for the Persistent Volume Claims dedicated to the Che workspaces. If omitted or left blank, default storage class is used.
        """
        return pulumi.get(self, "workspace_pvc_storage_class_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CheClusterStatus(dict):
    """
    CheClusterStatus defines the observed state of Che installation
    """
    def __init__(__self__, *,
                 che_cluster_running: Optional[str] = None,
                 che_url: Optional[str] = None,
                 che_version: Optional[str] = None,
                 db_provisioned: Optional[bool] = None,
                 devfile_registry_url: Optional[str] = None,
                 help_link: Optional[str] = None,
                 keycloak_provisioned: Optional[bool] = None,
                 keycloak_url: Optional[str] = None,
                 message: Optional[str] = None,
                 open_shifto_auth_provisioned: Optional[bool] = None,
                 plugin_registry_url: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        CheClusterStatus defines the observed state of Che installation
        :param str che_cluster_running: Status of a Che installation. Can be `Available`, `Unavailable`, or `Available, Rolling Update in Progress`
        :param str che_url: Public URL to the Che server
        :param str che_version: Current installed Che version
        :param bool db_provisioned: Indicates if or not a Postgres instance has been correctly provisioned
        :param str devfile_registry_url: Public URL to the Devfile registry
        :param str help_link: A URL that can point to some URL where to find help related to the current Operator status.
        :param bool keycloak_provisioned: Indicates whether an Identity Provider instance (Keycloak / RH SSO) has been provisioned with realm, client and user
        :param str keycloak_url: Public URL to the Identity Provider server (Keycloak / RH SSO).
        :param str message: A human readable message indicating details about why the pod is in this condition.
        :param bool open_shifto_auth_provisioned: Indicates whether an Identity Provider instance (Keycloak / RH SSO) has been configured to integrate with the OpenShift OAuth.
        :param str plugin_registry_url: Public URL to the Plugin registry
        :param str reason: A brief CamelCase message indicating details about why the pod is in this state.
        """
        if che_cluster_running is not None:
            pulumi.set(__self__, "che_cluster_running", che_cluster_running)
        if che_url is not None:
            pulumi.set(__self__, "che_url", che_url)
        if che_version is not None:
            pulumi.set(__self__, "che_version", che_version)
        if db_provisioned is not None:
            pulumi.set(__self__, "db_provisioned", db_provisioned)
        if devfile_registry_url is not None:
            pulumi.set(__self__, "devfile_registry_url", devfile_registry_url)
        if help_link is not None:
            pulumi.set(__self__, "help_link", help_link)
        if keycloak_provisioned is not None:
            pulumi.set(__self__, "keycloak_provisioned", keycloak_provisioned)
        if keycloak_url is not None:
            pulumi.set(__self__, "keycloak_url", keycloak_url)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if open_shifto_auth_provisioned is not None:
            pulumi.set(__self__, "open_shifto_auth_provisioned", open_shifto_auth_provisioned)
        if plugin_registry_url is not None:
            pulumi.set(__self__, "plugin_registry_url", plugin_registry_url)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter(name="cheClusterRunning")
    def che_cluster_running(self) -> Optional[str]:
        """
        Status of a Che installation. Can be `Available`, `Unavailable`, or `Available, Rolling Update in Progress`
        """
        return pulumi.get(self, "che_cluster_running")

    @property
    @pulumi.getter(name="cheURL")
    def che_url(self) -> Optional[str]:
        """
        Public URL to the Che server
        """
        return pulumi.get(self, "che_url")

    @property
    @pulumi.getter(name="cheVersion")
    def che_version(self) -> Optional[str]:
        """
        Current installed Che version
        """
        return pulumi.get(self, "che_version")

    @property
    @pulumi.getter(name="dbProvisioned")
    def db_provisioned(self) -> Optional[bool]:
        """
        Indicates if or not a Postgres instance has been correctly provisioned
        """
        return pulumi.get(self, "db_provisioned")

    @property
    @pulumi.getter(name="devfileRegistryURL")
    def devfile_registry_url(self) -> Optional[str]:
        """
        Public URL to the Devfile registry
        """
        return pulumi.get(self, "devfile_registry_url")

    @property
    @pulumi.getter(name="helpLink")
    def help_link(self) -> Optional[str]:
        """
        A URL that can point to some URL where to find help related to the current Operator status.
        """
        return pulumi.get(self, "help_link")

    @property
    @pulumi.getter(name="keycloakProvisioned")
    def keycloak_provisioned(self) -> Optional[bool]:
        """
        Indicates whether an Identity Provider instance (Keycloak / RH SSO) has been provisioned with realm, client and user
        """
        return pulumi.get(self, "keycloak_provisioned")

    @property
    @pulumi.getter(name="keycloakURL")
    def keycloak_url(self) -> Optional[str]:
        """
        Public URL to the Identity Provider server (Keycloak / RH SSO).
        """
        return pulumi.get(self, "keycloak_url")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A human readable message indicating details about why the pod is in this condition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="openShiftoAuthProvisioned")
    def open_shifto_auth_provisioned(self) -> Optional[bool]:
        """
        Indicates whether an Identity Provider instance (Keycloak / RH SSO) has been configured to integrate with the OpenShift OAuth.
        """
        return pulumi.get(self, "open_shifto_auth_provisioned")

    @property
    @pulumi.getter(name="pluginRegistryURL")
    def plugin_registry_url(self) -> Optional[str]:
        """
        Public URL to the Plugin registry
        """
        return pulumi.get(self, "plugin_registry_url")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        A brief CamelCase message indicating details about why the pod is in this state.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



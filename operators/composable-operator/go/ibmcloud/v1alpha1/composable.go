// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Composable represents a composable resource that can wrap any resource (native kubernetes or CRDs) to allow it to be dynamically configurable
type Composable struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput  `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput  `pulumi:"kind"`
	Metadata   metav1.ObjectMetaOutput `pulumi:"metadata"`
	// ComposableSpec defines the desired state of Composable
	Spec ComposableSpecOutput `pulumi:"spec"`
	// ComposableStatus defines the observed state of Composable
	Status ComposableStatusPtrOutput `pulumi:"status"`
}

// NewComposable registers a new resource with the given unique name, arguments, and options.
func NewComposable(ctx *pulumi.Context,
	name string, args *ComposableArgs, opts ...pulumi.ResourceOption) (*Composable, error) {
	if args == nil {
		args = &ComposableArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("ibmcloud.ibm.com/v1alpha1")
	args.Kind = pulumi.StringPtr("Composable")
	var resource Composable
	err := ctx.RegisterResource("kubernetes:ibmcloud.ibm.com/v1alpha1:Composable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComposable gets an existing Composable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComposable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComposableState, opts ...pulumi.ResourceOption) (*Composable, error) {
	var resource Composable
	err := ctx.ReadResource("kubernetes:ibmcloud.ibm.com/v1alpha1:Composable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Composable resources.
type composableState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ComposableSpec defines the desired state of Composable
	Spec *ComposableSpec `pulumi:"spec"`
	// ComposableStatus defines the observed state of Composable
	Status *ComposableStatus `pulumi:"status"`
}

type ComposableState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ComposableSpec defines the desired state of Composable
	Spec ComposableSpecPtrInput
	// ComposableStatus defines the observed state of Composable
	Status ComposableStatusPtrInput
}

func (ComposableState) ElementType() reflect.Type {
	return reflect.TypeOf((*composableState)(nil)).Elem()
}

type composableArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ComposableSpec defines the desired state of Composable
	Spec *ComposableSpec `pulumi:"spec"`
	// ComposableStatus defines the observed state of Composable
	Status *ComposableStatus `pulumi:"status"`
}

// The set of arguments for constructing a Composable resource.
type ComposableArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ComposableSpec defines the desired state of Composable
	Spec ComposableSpecPtrInput
	// ComposableStatus defines the observed state of Composable
	Status ComposableStatusPtrInput
}

func (ComposableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*composableArgs)(nil)).Elem()
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Composable represents a composable resource that can wrap any resource (native kubernetes or CRDs) to allow it to be dynamically configurable
type ComposableType struct {
	ApiVersion *string           `pulumi:"apiVersion"`
	Kind       *string           `pulumi:"kind"`
	Metadata   metav1.ObjectMeta `pulumi:"metadata"`
	// ComposableSpec defines the desired state of Composable
	Spec ComposableSpec `pulumi:"spec"`
	// ComposableStatus defines the observed state of Composable
	Status *ComposableStatus `pulumi:"status"`
}

// ComposableTypeInput is an input type that accepts ComposableTypeArgs and ComposableTypeOutput values.
// You can construct a concrete instance of `ComposableTypeInput` via:
//
//          ComposableTypeArgs{...}
type ComposableTypeInput interface {
	pulumi.Input

	ToComposableTypeOutput() ComposableTypeOutput
	ToComposableTypeOutputWithContext(context.Context) ComposableTypeOutput
}

// Composable represents a composable resource that can wrap any resource (native kubernetes or CRDs) to allow it to be dynamically configurable
type ComposableTypeArgs struct {
	ApiVersion pulumi.StringPtrInput  `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput  `pulumi:"kind"`
	Metadata   metav1.ObjectMetaInput `pulumi:"metadata"`
	// ComposableSpec defines the desired state of Composable
	Spec ComposableSpecInput `pulumi:"spec"`
	// ComposableStatus defines the observed state of Composable
	Status ComposableStatusPtrInput `pulumi:"status"`
}

func (ComposableTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComposableType)(nil)).Elem()
}

func (i ComposableTypeArgs) ToComposableTypeOutput() ComposableTypeOutput {
	return i.ToComposableTypeOutputWithContext(context.Background())
}

func (i ComposableTypeArgs) ToComposableTypeOutputWithContext(ctx context.Context) ComposableTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComposableTypeOutput)
}

// Composable represents a composable resource that can wrap any resource (native kubernetes or CRDs) to allow it to be dynamically configurable
type ComposableTypeOutput struct{ *pulumi.OutputState }

func (ComposableTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComposableType)(nil)).Elem()
}

func (o ComposableTypeOutput) ToComposableTypeOutput() ComposableTypeOutput {
	return o
}

func (o ComposableTypeOutput) ToComposableTypeOutputWithContext(ctx context.Context) ComposableTypeOutput {
	return o
}

func (o ComposableTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComposableType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ComposableTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComposableType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ComposableTypeOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v ComposableType) metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// ComposableSpec defines the desired state of Composable
func (o ComposableTypeOutput) Spec() ComposableSpecOutput {
	return o.ApplyT(func(v ComposableType) ComposableSpec { return v.Spec }).(ComposableSpecOutput)
}

// ComposableStatus defines the observed state of Composable
func (o ComposableTypeOutput) Status() ComposableStatusPtrOutput {
	return o.ApplyT(func(v ComposableType) *ComposableStatus { return v.Status }).(ComposableStatusPtrOutput)
}

type ComposableMetadata struct {
}

// ComposableMetadataInput is an input type that accepts ComposableMetadataArgs and ComposableMetadataOutput values.
// You can construct a concrete instance of `ComposableMetadataInput` via:
//
//          ComposableMetadataArgs{...}
type ComposableMetadataInput interface {
	pulumi.Input

	ToComposableMetadataOutput() ComposableMetadataOutput
	ToComposableMetadataOutputWithContext(context.Context) ComposableMetadataOutput
}

type ComposableMetadataArgs struct {
}

func (ComposableMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComposableMetadata)(nil)).Elem()
}

func (i ComposableMetadataArgs) ToComposableMetadataOutput() ComposableMetadataOutput {
	return i.ToComposableMetadataOutputWithContext(context.Background())
}

func (i ComposableMetadataArgs) ToComposableMetadataOutputWithContext(ctx context.Context) ComposableMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComposableMetadataOutput)
}

type ComposableMetadataOutput struct{ *pulumi.OutputState }

func (ComposableMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComposableMetadata)(nil)).Elem()
}

func (o ComposableMetadataOutput) ToComposableMetadataOutput() ComposableMetadataOutput {
	return o
}

func (o ComposableMetadataOutput) ToComposableMetadataOutputWithContext(ctx context.Context) ComposableMetadataOutput {
	return o
}

// ComposableSpec defines the desired state of Composable
type ComposableSpec struct {
	// Template defines the underlying object
	Template map[string]interface{} `pulumi:"template"`
}

// ComposableSpecInput is an input type that accepts ComposableSpecArgs and ComposableSpecOutput values.
// You can construct a concrete instance of `ComposableSpecInput` via:
//
//          ComposableSpecArgs{...}
type ComposableSpecInput interface {
	pulumi.Input

	ToComposableSpecOutput() ComposableSpecOutput
	ToComposableSpecOutputWithContext(context.Context) ComposableSpecOutput
}

// ComposableSpec defines the desired state of Composable
type ComposableSpecArgs struct {
	// Template defines the underlying object
	Template pulumi.MapInput `pulumi:"template"`
}

func (ComposableSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComposableSpec)(nil)).Elem()
}

func (i ComposableSpecArgs) ToComposableSpecOutput() ComposableSpecOutput {
	return i.ToComposableSpecOutputWithContext(context.Background())
}

func (i ComposableSpecArgs) ToComposableSpecOutputWithContext(ctx context.Context) ComposableSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComposableSpecOutput)
}

func (i ComposableSpecArgs) ToComposableSpecPtrOutput() ComposableSpecPtrOutput {
	return i.ToComposableSpecPtrOutputWithContext(context.Background())
}

func (i ComposableSpecArgs) ToComposableSpecPtrOutputWithContext(ctx context.Context) ComposableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComposableSpecOutput).ToComposableSpecPtrOutputWithContext(ctx)
}

// ComposableSpecPtrInput is an input type that accepts ComposableSpecArgs, ComposableSpecPtr and ComposableSpecPtrOutput values.
// You can construct a concrete instance of `ComposableSpecPtrInput` via:
//
//          ComposableSpecArgs{...}
//
//  or:
//
//          nil
type ComposableSpecPtrInput interface {
	pulumi.Input

	ToComposableSpecPtrOutput() ComposableSpecPtrOutput
	ToComposableSpecPtrOutputWithContext(context.Context) ComposableSpecPtrOutput
}

type composableSpecPtrType ComposableSpecArgs

func ComposableSpecPtr(v *ComposableSpecArgs) ComposableSpecPtrInput {
	return (*composableSpecPtrType)(v)
}

func (*composableSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComposableSpec)(nil)).Elem()
}

func (i *composableSpecPtrType) ToComposableSpecPtrOutput() ComposableSpecPtrOutput {
	return i.ToComposableSpecPtrOutputWithContext(context.Background())
}

func (i *composableSpecPtrType) ToComposableSpecPtrOutputWithContext(ctx context.Context) ComposableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComposableSpecPtrOutput)
}

// ComposableSpec defines the desired state of Composable
type ComposableSpecOutput struct{ *pulumi.OutputState }

func (ComposableSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComposableSpec)(nil)).Elem()
}

func (o ComposableSpecOutput) ToComposableSpecOutput() ComposableSpecOutput {
	return o
}

func (o ComposableSpecOutput) ToComposableSpecOutputWithContext(ctx context.Context) ComposableSpecOutput {
	return o
}

func (o ComposableSpecOutput) ToComposableSpecPtrOutput() ComposableSpecPtrOutput {
	return o.ToComposableSpecPtrOutputWithContext(context.Background())
}

func (o ComposableSpecOutput) ToComposableSpecPtrOutputWithContext(ctx context.Context) ComposableSpecPtrOutput {
	return o.ApplyT(func(v ComposableSpec) *ComposableSpec {
		return &v
	}).(ComposableSpecPtrOutput)
}

// Template defines the underlying object
func (o ComposableSpecOutput) Template() pulumi.MapOutput {
	return o.ApplyT(func(v ComposableSpec) map[string]interface{} { return v.Template }).(pulumi.MapOutput)
}

type ComposableSpecPtrOutput struct{ *pulumi.OutputState }

func (ComposableSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComposableSpec)(nil)).Elem()
}

func (o ComposableSpecPtrOutput) ToComposableSpecPtrOutput() ComposableSpecPtrOutput {
	return o
}

func (o ComposableSpecPtrOutput) ToComposableSpecPtrOutputWithContext(ctx context.Context) ComposableSpecPtrOutput {
	return o
}

func (o ComposableSpecPtrOutput) Elem() ComposableSpecOutput {
	return o.ApplyT(func(v *ComposableSpec) ComposableSpec { return *v }).(ComposableSpecOutput)
}

// Template defines the underlying object
func (o ComposableSpecPtrOutput) Template() pulumi.MapOutput {
	return o.ApplyT(func(v *ComposableSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Template
	}).(pulumi.MapOutput)
}

// Template defines the underlying object
type ComposableSpecTemplate struct {
}

// ComposableSpecTemplateInput is an input type that accepts ComposableSpecTemplateArgs and ComposableSpecTemplateOutput values.
// You can construct a concrete instance of `ComposableSpecTemplateInput` via:
//
//          ComposableSpecTemplateArgs{...}
type ComposableSpecTemplateInput interface {
	pulumi.Input

	ToComposableSpecTemplateOutput() ComposableSpecTemplateOutput
	ToComposableSpecTemplateOutputWithContext(context.Context) ComposableSpecTemplateOutput
}

// Template defines the underlying object
type ComposableSpecTemplateArgs struct {
}

func (ComposableSpecTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComposableSpecTemplate)(nil)).Elem()
}

func (i ComposableSpecTemplateArgs) ToComposableSpecTemplateOutput() ComposableSpecTemplateOutput {
	return i.ToComposableSpecTemplateOutputWithContext(context.Background())
}

func (i ComposableSpecTemplateArgs) ToComposableSpecTemplateOutputWithContext(ctx context.Context) ComposableSpecTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComposableSpecTemplateOutput)
}

// Template defines the underlying object
type ComposableSpecTemplateOutput struct{ *pulumi.OutputState }

func (ComposableSpecTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComposableSpecTemplate)(nil)).Elem()
}

func (o ComposableSpecTemplateOutput) ToComposableSpecTemplateOutput() ComposableSpecTemplateOutput {
	return o
}

func (o ComposableSpecTemplateOutput) ToComposableSpecTemplateOutputWithContext(ctx context.Context) ComposableSpecTemplateOutput {
	return o
}

// ComposableStatus defines the observed state of Composable
type ComposableStatus struct {
	// Message - provides human readable explanation of the Composable status
	Message *string `pulumi:"message"`
	// State shows the composable object state
	State *string `pulumi:"state"`
}

// ComposableStatusInput is an input type that accepts ComposableStatusArgs and ComposableStatusOutput values.
// You can construct a concrete instance of `ComposableStatusInput` via:
//
//          ComposableStatusArgs{...}
type ComposableStatusInput interface {
	pulumi.Input

	ToComposableStatusOutput() ComposableStatusOutput
	ToComposableStatusOutputWithContext(context.Context) ComposableStatusOutput
}

// ComposableStatus defines the observed state of Composable
type ComposableStatusArgs struct {
	// Message - provides human readable explanation of the Composable status
	Message pulumi.StringPtrInput `pulumi:"message"`
	// State shows the composable object state
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (ComposableStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComposableStatus)(nil)).Elem()
}

func (i ComposableStatusArgs) ToComposableStatusOutput() ComposableStatusOutput {
	return i.ToComposableStatusOutputWithContext(context.Background())
}

func (i ComposableStatusArgs) ToComposableStatusOutputWithContext(ctx context.Context) ComposableStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComposableStatusOutput)
}

func (i ComposableStatusArgs) ToComposableStatusPtrOutput() ComposableStatusPtrOutput {
	return i.ToComposableStatusPtrOutputWithContext(context.Background())
}

func (i ComposableStatusArgs) ToComposableStatusPtrOutputWithContext(ctx context.Context) ComposableStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComposableStatusOutput).ToComposableStatusPtrOutputWithContext(ctx)
}

// ComposableStatusPtrInput is an input type that accepts ComposableStatusArgs, ComposableStatusPtr and ComposableStatusPtrOutput values.
// You can construct a concrete instance of `ComposableStatusPtrInput` via:
//
//          ComposableStatusArgs{...}
//
//  or:
//
//          nil
type ComposableStatusPtrInput interface {
	pulumi.Input

	ToComposableStatusPtrOutput() ComposableStatusPtrOutput
	ToComposableStatusPtrOutputWithContext(context.Context) ComposableStatusPtrOutput
}

type composableStatusPtrType ComposableStatusArgs

func ComposableStatusPtr(v *ComposableStatusArgs) ComposableStatusPtrInput {
	return (*composableStatusPtrType)(v)
}

func (*composableStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComposableStatus)(nil)).Elem()
}

func (i *composableStatusPtrType) ToComposableStatusPtrOutput() ComposableStatusPtrOutput {
	return i.ToComposableStatusPtrOutputWithContext(context.Background())
}

func (i *composableStatusPtrType) ToComposableStatusPtrOutputWithContext(ctx context.Context) ComposableStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComposableStatusPtrOutput)
}

// ComposableStatus defines the observed state of Composable
type ComposableStatusOutput struct{ *pulumi.OutputState }

func (ComposableStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComposableStatus)(nil)).Elem()
}

func (o ComposableStatusOutput) ToComposableStatusOutput() ComposableStatusOutput {
	return o
}

func (o ComposableStatusOutput) ToComposableStatusOutputWithContext(ctx context.Context) ComposableStatusOutput {
	return o
}

func (o ComposableStatusOutput) ToComposableStatusPtrOutput() ComposableStatusPtrOutput {
	return o.ToComposableStatusPtrOutputWithContext(context.Background())
}

func (o ComposableStatusOutput) ToComposableStatusPtrOutputWithContext(ctx context.Context) ComposableStatusPtrOutput {
	return o.ApplyT(func(v ComposableStatus) *ComposableStatus {
		return &v
	}).(ComposableStatusPtrOutput)
}

// Message - provides human readable explanation of the Composable status
func (o ComposableStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComposableStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// State shows the composable object state
func (o ComposableStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComposableStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type ComposableStatusPtrOutput struct{ *pulumi.OutputState }

func (ComposableStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComposableStatus)(nil)).Elem()
}

func (o ComposableStatusPtrOutput) ToComposableStatusPtrOutput() ComposableStatusPtrOutput {
	return o
}

func (o ComposableStatusPtrOutput) ToComposableStatusPtrOutputWithContext(ctx context.Context) ComposableStatusPtrOutput {
	return o
}

func (o ComposableStatusPtrOutput) Elem() ComposableStatusOutput {
	return o.ApplyT(func(v *ComposableStatus) ComposableStatus { return *v }).(ComposableStatusOutput)
}

// Message - provides human readable explanation of the Composable status
func (o ComposableStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComposableStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// State shows the composable object state
func (o ComposableStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComposableStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ComposableTypeOutput{})
	pulumi.RegisterOutputType(ComposableMetadataOutput{})
	pulumi.RegisterOutputType(ComposableSpecOutput{})
	pulumi.RegisterOutputType(ComposableSpecPtrOutput{})
	pulumi.RegisterOutputType(ComposableSpecTemplateOutput{})
	pulumi.RegisterOutputType(ComposableStatusOutput{})
	pulumi.RegisterOutputType(ComposableStatusPtrOutput{})
}

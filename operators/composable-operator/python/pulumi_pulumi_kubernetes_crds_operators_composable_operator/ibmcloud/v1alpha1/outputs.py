# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'ComposableSpec',
    'ComposableStatus',
]

@pulumi.output_type
class ComposableSpec(dict):
    """
    ComposableSpec defines the desired state of Composable
    """
    def __init__(__self__, *,
                 template: Mapping[str, Any]):
        """
        ComposableSpec defines the desired state of Composable
        :param Mapping[str, Any] template: Template defines the underlying object
        """
        pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def template(self) -> Mapping[str, Any]:
        """
        Template defines the underlying object
        """
        return pulumi.get(self, "template")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ComposableStatus(dict):
    """
    ComposableStatus defines the observed state of Composable
    """
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ComposableStatus defines the observed state of Composable
        :param str message: Message - provides human readable explanation of the Composable status
        :param str state: State shows the composable object state
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message - provides human readable explanation of the Composable status
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        State shows the composable object state
        """
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'ComposableSpecArgs',
    'ComposableStatusArgs',
]

@pulumi.input_type
class ComposableSpecArgs:
    def __init__(__self__, *,
                 template: pulumi.Input[Mapping[str, Any]]):
        """
        ComposableSpec defines the desired state of Composable
        :param pulumi.Input[Mapping[str, Any]] template: Template defines the underlying object
        """
        pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input[Mapping[str, Any]]:
        """
        Template defines the underlying object
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "template", value)


@pulumi.input_type
class ComposableStatusArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ComposableStatus defines the observed state of Composable
        :param pulumi.Input[str] message: Message - provides human readable explanation of the Composable status
        :param pulumi.Input[str] state: State shows the composable object state
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message - provides human readable explanation of the Composable status
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State shows the composable object state
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)



// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type TopicType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *TopicSpec         `pulumi:"spec"`
	Status     *TopicStatus       `pulumi:"status"`
}

// TopicTypeInput is an input type that accepts TopicTypeArgs and TopicTypeOutput values.
// You can construct a concrete instance of `TopicTypeInput` via:
//
//          TopicTypeArgs{...}
type TopicTypeInput interface {
	pulumi.Input

	ToTopicTypeOutput() TopicTypeOutput
	ToTopicTypeOutputWithContext(context.Context) TopicTypeOutput
}

type TopicTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       TopicSpecPtrInput         `pulumi:"spec"`
	Status     TopicStatusPtrInput       `pulumi:"status"`
}

func (TopicTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicType)(nil)).Elem()
}

func (i TopicTypeArgs) ToTopicTypeOutput() TopicTypeOutput {
	return i.ToTopicTypeOutputWithContext(context.Background())
}

func (i TopicTypeArgs) ToTopicTypeOutputWithContext(ctx context.Context) TopicTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicTypeOutput)
}

type TopicTypeOutput struct{ *pulumi.OutputState }

func (TopicTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicType)(nil)).Elem()
}

func (o TopicTypeOutput) ToTopicTypeOutput() TopicTypeOutput {
	return o
}

func (o TopicTypeOutput) ToTopicTypeOutputWithContext(ctx context.Context) TopicTypeOutput {
	return o
}

func (o TopicTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o TopicTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o TopicTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v TopicType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o TopicTypeOutput) Spec() TopicSpecPtrOutput {
	return o.ApplyT(func(v TopicType) *TopicSpec { return v.Spec }).(TopicSpecPtrOutput)
}

func (o TopicTypeOutput) Status() TopicStatusPtrOutput {
	return o.ApplyT(func(v TopicType) *TopicStatus { return v.Status }).(TopicStatusPtrOutput)
}

type TopicMetadata struct {
}

// TopicMetadataInput is an input type that accepts TopicMetadataArgs and TopicMetadataOutput values.
// You can construct a concrete instance of `TopicMetadataInput` via:
//
//          TopicMetadataArgs{...}
type TopicMetadataInput interface {
	pulumi.Input

	ToTopicMetadataOutput() TopicMetadataOutput
	ToTopicMetadataOutputWithContext(context.Context) TopicMetadataOutput
}

type TopicMetadataArgs struct {
}

func (TopicMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicMetadata)(nil)).Elem()
}

func (i TopicMetadataArgs) ToTopicMetadataOutput() TopicMetadataOutput {
	return i.ToTopicMetadataOutputWithContext(context.Background())
}

func (i TopicMetadataArgs) ToTopicMetadataOutputWithContext(ctx context.Context) TopicMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicMetadataOutput)
}

type TopicMetadataOutput struct{ *pulumi.OutputState }

func (TopicMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicMetadata)(nil)).Elem()
}

func (o TopicMetadataOutput) ToTopicMetadataOutput() TopicMetadataOutput {
	return o
}

func (o TopicMetadataOutput) ToTopicMetadataOutputWithContext(ctx context.Context) TopicMetadataOutput {
	return o
}

type TopicSpec struct {
	ApiKey            *TopicSpecApiKey        `pulumi:"apiKey"`
	BindingFrom       *TopicSpecBindingFrom   `pulumi:"bindingFrom"`
	Configs           []TopicSpecConfigs      `pulumi:"configs"`
	KafkaAdminUrl     *TopicSpecKafkaAdminUrl `pulumi:"kafkaAdminUrl"`
	NumPartitions     *int                    `pulumi:"numPartitions"`
	ReplicationFactor *int                    `pulumi:"replicationFactor"`
	TopicName         string                  `pulumi:"topicName"`
}

// TopicSpecInput is an input type that accepts TopicSpecArgs and TopicSpecOutput values.
// You can construct a concrete instance of `TopicSpecInput` via:
//
//          TopicSpecArgs{...}
type TopicSpecInput interface {
	pulumi.Input

	ToTopicSpecOutput() TopicSpecOutput
	ToTopicSpecOutputWithContext(context.Context) TopicSpecOutput
}

type TopicSpecArgs struct {
	ApiKey            TopicSpecApiKeyPtrInput        `pulumi:"apiKey"`
	BindingFrom       TopicSpecBindingFromPtrInput   `pulumi:"bindingFrom"`
	Configs           TopicSpecConfigsArrayInput     `pulumi:"configs"`
	KafkaAdminUrl     TopicSpecKafkaAdminUrlPtrInput `pulumi:"kafkaAdminUrl"`
	NumPartitions     pulumi.IntPtrInput             `pulumi:"numPartitions"`
	ReplicationFactor pulumi.IntPtrInput             `pulumi:"replicationFactor"`
	TopicName         pulumi.StringInput             `pulumi:"topicName"`
}

func (TopicSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpec)(nil)).Elem()
}

func (i TopicSpecArgs) ToTopicSpecOutput() TopicSpecOutput {
	return i.ToTopicSpecOutputWithContext(context.Background())
}

func (i TopicSpecArgs) ToTopicSpecOutputWithContext(ctx context.Context) TopicSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecOutput)
}

func (i TopicSpecArgs) ToTopicSpecPtrOutput() TopicSpecPtrOutput {
	return i.ToTopicSpecPtrOutputWithContext(context.Background())
}

func (i TopicSpecArgs) ToTopicSpecPtrOutputWithContext(ctx context.Context) TopicSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecOutput).ToTopicSpecPtrOutputWithContext(ctx)
}

// TopicSpecPtrInput is an input type that accepts TopicSpecArgs, TopicSpecPtr and TopicSpecPtrOutput values.
// You can construct a concrete instance of `TopicSpecPtrInput` via:
//
//          TopicSpecArgs{...}
//
//  or:
//
//          nil
type TopicSpecPtrInput interface {
	pulumi.Input

	ToTopicSpecPtrOutput() TopicSpecPtrOutput
	ToTopicSpecPtrOutputWithContext(context.Context) TopicSpecPtrOutput
}

type topicSpecPtrType TopicSpecArgs

func TopicSpecPtr(v *TopicSpecArgs) TopicSpecPtrInput {
	return (*topicSpecPtrType)(v)
}

func (*topicSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSpec)(nil)).Elem()
}

func (i *topicSpecPtrType) ToTopicSpecPtrOutput() TopicSpecPtrOutput {
	return i.ToTopicSpecPtrOutputWithContext(context.Background())
}

func (i *topicSpecPtrType) ToTopicSpecPtrOutputWithContext(ctx context.Context) TopicSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecPtrOutput)
}

type TopicSpecOutput struct{ *pulumi.OutputState }

func (TopicSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpec)(nil)).Elem()
}

func (o TopicSpecOutput) ToTopicSpecOutput() TopicSpecOutput {
	return o
}

func (o TopicSpecOutput) ToTopicSpecOutputWithContext(ctx context.Context) TopicSpecOutput {
	return o
}

func (o TopicSpecOutput) ToTopicSpecPtrOutput() TopicSpecPtrOutput {
	return o.ToTopicSpecPtrOutputWithContext(context.Background())
}

func (o TopicSpecOutput) ToTopicSpecPtrOutputWithContext(ctx context.Context) TopicSpecPtrOutput {
	return o.ApplyT(func(v TopicSpec) *TopicSpec {
		return &v
	}).(TopicSpecPtrOutput)
}
func (o TopicSpecOutput) ApiKey() TopicSpecApiKeyPtrOutput {
	return o.ApplyT(func(v TopicSpec) *TopicSpecApiKey { return v.ApiKey }).(TopicSpecApiKeyPtrOutput)
}

func (o TopicSpecOutput) BindingFrom() TopicSpecBindingFromPtrOutput {
	return o.ApplyT(func(v TopicSpec) *TopicSpecBindingFrom { return v.BindingFrom }).(TopicSpecBindingFromPtrOutput)
}

func (o TopicSpecOutput) Configs() TopicSpecConfigsArrayOutput {
	return o.ApplyT(func(v TopicSpec) []TopicSpecConfigs { return v.Configs }).(TopicSpecConfigsArrayOutput)
}

func (o TopicSpecOutput) KafkaAdminUrl() TopicSpecKafkaAdminUrlPtrOutput {
	return o.ApplyT(func(v TopicSpec) *TopicSpecKafkaAdminUrl { return v.KafkaAdminUrl }).(TopicSpecKafkaAdminUrlPtrOutput)
}

func (o TopicSpecOutput) NumPartitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopicSpec) *int { return v.NumPartitions }).(pulumi.IntPtrOutput)
}

func (o TopicSpecOutput) ReplicationFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopicSpec) *int { return v.ReplicationFactor }).(pulumi.IntPtrOutput)
}

func (o TopicSpecOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicSpec) string { return v.TopicName }).(pulumi.StringOutput)
}

type TopicSpecPtrOutput struct{ *pulumi.OutputState }

func (TopicSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSpec)(nil)).Elem()
}

func (o TopicSpecPtrOutput) ToTopicSpecPtrOutput() TopicSpecPtrOutput {
	return o
}

func (o TopicSpecPtrOutput) ToTopicSpecPtrOutputWithContext(ctx context.Context) TopicSpecPtrOutput {
	return o
}

func (o TopicSpecPtrOutput) Elem() TopicSpecOutput {
	return o.ApplyT(func(v *TopicSpec) TopicSpec { return *v }).(TopicSpecOutput)
}

func (o TopicSpecPtrOutput) ApiKey() TopicSpecApiKeyPtrOutput {
	return o.ApplyT(func(v *TopicSpec) *TopicSpecApiKey {
		if v == nil {
			return nil
		}
		return v.ApiKey
	}).(TopicSpecApiKeyPtrOutput)
}

func (o TopicSpecPtrOutput) BindingFrom() TopicSpecBindingFromPtrOutput {
	return o.ApplyT(func(v *TopicSpec) *TopicSpecBindingFrom {
		if v == nil {
			return nil
		}
		return v.BindingFrom
	}).(TopicSpecBindingFromPtrOutput)
}

func (o TopicSpecPtrOutput) Configs() TopicSpecConfigsArrayOutput {
	return o.ApplyT(func(v *TopicSpec) []TopicSpecConfigs {
		if v == nil {
			return nil
		}
		return v.Configs
	}).(TopicSpecConfigsArrayOutput)
}

func (o TopicSpecPtrOutput) KafkaAdminUrl() TopicSpecKafkaAdminUrlPtrOutput {
	return o.ApplyT(func(v *TopicSpec) *TopicSpecKafkaAdminUrl {
		if v == nil {
			return nil
		}
		return v.KafkaAdminUrl
	}).(TopicSpecKafkaAdminUrlPtrOutput)
}

func (o TopicSpecPtrOutput) NumPartitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicSpec) *int {
		if v == nil {
			return nil
		}
		return v.NumPartitions
	}).(pulumi.IntPtrOutput)
}

func (o TopicSpecPtrOutput) ReplicationFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicSpec) *int {
		if v == nil {
			return nil
		}
		return v.ReplicationFactor
	}).(pulumi.IntPtrOutput)
}

func (o TopicSpecPtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSpec) *string {
		if v == nil {
			return nil
		}
		return &v.TopicName
	}).(pulumi.StringPtrOutput)
}

type TopicSpecApiKey struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef map[string]interface{} `pulumi:"configMapKeyRef"`
	// Selects a key of a secret in the resource namespace
	SecretKeyRef map[string]interface{} `pulumi:"secretKeyRef"`
}

// TopicSpecApiKeyInput is an input type that accepts TopicSpecApiKeyArgs and TopicSpecApiKeyOutput values.
// You can construct a concrete instance of `TopicSpecApiKeyInput` via:
//
//          TopicSpecApiKeyArgs{...}
type TopicSpecApiKeyInput interface {
	pulumi.Input

	ToTopicSpecApiKeyOutput() TopicSpecApiKeyOutput
	ToTopicSpecApiKeyOutputWithContext(context.Context) TopicSpecApiKeyOutput
}

type TopicSpecApiKeyArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef pulumi.MapInput `pulumi:"configMapKeyRef"`
	// Selects a key of a secret in the resource namespace
	SecretKeyRef pulumi.MapInput `pulumi:"secretKeyRef"`
}

func (TopicSpecApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecApiKey)(nil)).Elem()
}

func (i TopicSpecApiKeyArgs) ToTopicSpecApiKeyOutput() TopicSpecApiKeyOutput {
	return i.ToTopicSpecApiKeyOutputWithContext(context.Background())
}

func (i TopicSpecApiKeyArgs) ToTopicSpecApiKeyOutputWithContext(ctx context.Context) TopicSpecApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecApiKeyOutput)
}

func (i TopicSpecApiKeyArgs) ToTopicSpecApiKeyPtrOutput() TopicSpecApiKeyPtrOutput {
	return i.ToTopicSpecApiKeyPtrOutputWithContext(context.Background())
}

func (i TopicSpecApiKeyArgs) ToTopicSpecApiKeyPtrOutputWithContext(ctx context.Context) TopicSpecApiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecApiKeyOutput).ToTopicSpecApiKeyPtrOutputWithContext(ctx)
}

// TopicSpecApiKeyPtrInput is an input type that accepts TopicSpecApiKeyArgs, TopicSpecApiKeyPtr and TopicSpecApiKeyPtrOutput values.
// You can construct a concrete instance of `TopicSpecApiKeyPtrInput` via:
//
//          TopicSpecApiKeyArgs{...}
//
//  or:
//
//          nil
type TopicSpecApiKeyPtrInput interface {
	pulumi.Input

	ToTopicSpecApiKeyPtrOutput() TopicSpecApiKeyPtrOutput
	ToTopicSpecApiKeyPtrOutputWithContext(context.Context) TopicSpecApiKeyPtrOutput
}

type topicSpecApiKeyPtrType TopicSpecApiKeyArgs

func TopicSpecApiKeyPtr(v *TopicSpecApiKeyArgs) TopicSpecApiKeyPtrInput {
	return (*topicSpecApiKeyPtrType)(v)
}

func (*topicSpecApiKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSpecApiKey)(nil)).Elem()
}

func (i *topicSpecApiKeyPtrType) ToTopicSpecApiKeyPtrOutput() TopicSpecApiKeyPtrOutput {
	return i.ToTopicSpecApiKeyPtrOutputWithContext(context.Background())
}

func (i *topicSpecApiKeyPtrType) ToTopicSpecApiKeyPtrOutputWithContext(ctx context.Context) TopicSpecApiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecApiKeyPtrOutput)
}

type TopicSpecApiKeyOutput struct{ *pulumi.OutputState }

func (TopicSpecApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecApiKey)(nil)).Elem()
}

func (o TopicSpecApiKeyOutput) ToTopicSpecApiKeyOutput() TopicSpecApiKeyOutput {
	return o
}

func (o TopicSpecApiKeyOutput) ToTopicSpecApiKeyOutputWithContext(ctx context.Context) TopicSpecApiKeyOutput {
	return o
}

func (o TopicSpecApiKeyOutput) ToTopicSpecApiKeyPtrOutput() TopicSpecApiKeyPtrOutput {
	return o.ToTopicSpecApiKeyPtrOutputWithContext(context.Background())
}

func (o TopicSpecApiKeyOutput) ToTopicSpecApiKeyPtrOutputWithContext(ctx context.Context) TopicSpecApiKeyPtrOutput {
	return o.ApplyT(func(v TopicSpecApiKey) *TopicSpecApiKey {
		return &v
	}).(TopicSpecApiKeyPtrOutput)
}

// Selects a key of a ConfigMap.
func (o TopicSpecApiKeyOutput) ConfigMapKeyRef() pulumi.MapOutput {
	return o.ApplyT(func(v TopicSpecApiKey) map[string]interface{} { return v.ConfigMapKeyRef }).(pulumi.MapOutput)
}

// Selects a key of a secret in the resource namespace
func (o TopicSpecApiKeyOutput) SecretKeyRef() pulumi.MapOutput {
	return o.ApplyT(func(v TopicSpecApiKey) map[string]interface{} { return v.SecretKeyRef }).(pulumi.MapOutput)
}

type TopicSpecApiKeyPtrOutput struct{ *pulumi.OutputState }

func (TopicSpecApiKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSpecApiKey)(nil)).Elem()
}

func (o TopicSpecApiKeyPtrOutput) ToTopicSpecApiKeyPtrOutput() TopicSpecApiKeyPtrOutput {
	return o
}

func (o TopicSpecApiKeyPtrOutput) ToTopicSpecApiKeyPtrOutputWithContext(ctx context.Context) TopicSpecApiKeyPtrOutput {
	return o
}

func (o TopicSpecApiKeyPtrOutput) Elem() TopicSpecApiKeyOutput {
	return o.ApplyT(func(v *TopicSpecApiKey) TopicSpecApiKey { return *v }).(TopicSpecApiKeyOutput)
}

// Selects a key of a ConfigMap.
func (o TopicSpecApiKeyPtrOutput) ConfigMapKeyRef() pulumi.MapOutput {
	return o.ApplyT(func(v *TopicSpecApiKey) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(pulumi.MapOutput)
}

// Selects a key of a secret in the resource namespace
func (o TopicSpecApiKeyPtrOutput) SecretKeyRef() pulumi.MapOutput {
	return o.ApplyT(func(v *TopicSpecApiKey) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(pulumi.MapOutput)
}

// Selects a key of a ConfigMap.
type TopicSpecApiKeyConfigMapKeyRef struct {
}

// TopicSpecApiKeyConfigMapKeyRefInput is an input type that accepts TopicSpecApiKeyConfigMapKeyRefArgs and TopicSpecApiKeyConfigMapKeyRefOutput values.
// You can construct a concrete instance of `TopicSpecApiKeyConfigMapKeyRefInput` via:
//
//          TopicSpecApiKeyConfigMapKeyRefArgs{...}
type TopicSpecApiKeyConfigMapKeyRefInput interface {
	pulumi.Input

	ToTopicSpecApiKeyConfigMapKeyRefOutput() TopicSpecApiKeyConfigMapKeyRefOutput
	ToTopicSpecApiKeyConfigMapKeyRefOutputWithContext(context.Context) TopicSpecApiKeyConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type TopicSpecApiKeyConfigMapKeyRefArgs struct {
}

func (TopicSpecApiKeyConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecApiKeyConfigMapKeyRef)(nil)).Elem()
}

func (i TopicSpecApiKeyConfigMapKeyRefArgs) ToTopicSpecApiKeyConfigMapKeyRefOutput() TopicSpecApiKeyConfigMapKeyRefOutput {
	return i.ToTopicSpecApiKeyConfigMapKeyRefOutputWithContext(context.Background())
}

func (i TopicSpecApiKeyConfigMapKeyRefArgs) ToTopicSpecApiKeyConfigMapKeyRefOutputWithContext(ctx context.Context) TopicSpecApiKeyConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecApiKeyConfigMapKeyRefOutput)
}

// Selects a key of a ConfigMap.
type TopicSpecApiKeyConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (TopicSpecApiKeyConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecApiKeyConfigMapKeyRef)(nil)).Elem()
}

func (o TopicSpecApiKeyConfigMapKeyRefOutput) ToTopicSpecApiKeyConfigMapKeyRefOutput() TopicSpecApiKeyConfigMapKeyRefOutput {
	return o
}

func (o TopicSpecApiKeyConfigMapKeyRefOutput) ToTopicSpecApiKeyConfigMapKeyRefOutputWithContext(ctx context.Context) TopicSpecApiKeyConfigMapKeyRefOutput {
	return o
}

// Selects a key of a secret in the resource namespace
type TopicSpecApiKeySecretKeyRef struct {
}

// TopicSpecApiKeySecretKeyRefInput is an input type that accepts TopicSpecApiKeySecretKeyRefArgs and TopicSpecApiKeySecretKeyRefOutput values.
// You can construct a concrete instance of `TopicSpecApiKeySecretKeyRefInput` via:
//
//          TopicSpecApiKeySecretKeyRefArgs{...}
type TopicSpecApiKeySecretKeyRefInput interface {
	pulumi.Input

	ToTopicSpecApiKeySecretKeyRefOutput() TopicSpecApiKeySecretKeyRefOutput
	ToTopicSpecApiKeySecretKeyRefOutputWithContext(context.Context) TopicSpecApiKeySecretKeyRefOutput
}

// Selects a key of a secret in the resource namespace
type TopicSpecApiKeySecretKeyRefArgs struct {
}

func (TopicSpecApiKeySecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecApiKeySecretKeyRef)(nil)).Elem()
}

func (i TopicSpecApiKeySecretKeyRefArgs) ToTopicSpecApiKeySecretKeyRefOutput() TopicSpecApiKeySecretKeyRefOutput {
	return i.ToTopicSpecApiKeySecretKeyRefOutputWithContext(context.Background())
}

func (i TopicSpecApiKeySecretKeyRefArgs) ToTopicSpecApiKeySecretKeyRefOutputWithContext(ctx context.Context) TopicSpecApiKeySecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecApiKeySecretKeyRefOutput)
}

// Selects a key of a secret in the resource namespace
type TopicSpecApiKeySecretKeyRefOutput struct{ *pulumi.OutputState }

func (TopicSpecApiKeySecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecApiKeySecretKeyRef)(nil)).Elem()
}

func (o TopicSpecApiKeySecretKeyRefOutput) ToTopicSpecApiKeySecretKeyRefOutput() TopicSpecApiKeySecretKeyRefOutput {
	return o
}

func (o TopicSpecApiKeySecretKeyRefOutput) ToTopicSpecApiKeySecretKeyRefOutputWithContext(ctx context.Context) TopicSpecApiKeySecretKeyRefOutput {
	return o
}

type TopicSpecBindingFrom struct {
	Name      string  `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
}

// TopicSpecBindingFromInput is an input type that accepts TopicSpecBindingFromArgs and TopicSpecBindingFromOutput values.
// You can construct a concrete instance of `TopicSpecBindingFromInput` via:
//
//          TopicSpecBindingFromArgs{...}
type TopicSpecBindingFromInput interface {
	pulumi.Input

	ToTopicSpecBindingFromOutput() TopicSpecBindingFromOutput
	ToTopicSpecBindingFromOutputWithContext(context.Context) TopicSpecBindingFromOutput
}

type TopicSpecBindingFromArgs struct {
	Name      pulumi.StringInput    `pulumi:"name"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (TopicSpecBindingFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecBindingFrom)(nil)).Elem()
}

func (i TopicSpecBindingFromArgs) ToTopicSpecBindingFromOutput() TopicSpecBindingFromOutput {
	return i.ToTopicSpecBindingFromOutputWithContext(context.Background())
}

func (i TopicSpecBindingFromArgs) ToTopicSpecBindingFromOutputWithContext(ctx context.Context) TopicSpecBindingFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecBindingFromOutput)
}

func (i TopicSpecBindingFromArgs) ToTopicSpecBindingFromPtrOutput() TopicSpecBindingFromPtrOutput {
	return i.ToTopicSpecBindingFromPtrOutputWithContext(context.Background())
}

func (i TopicSpecBindingFromArgs) ToTopicSpecBindingFromPtrOutputWithContext(ctx context.Context) TopicSpecBindingFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecBindingFromOutput).ToTopicSpecBindingFromPtrOutputWithContext(ctx)
}

// TopicSpecBindingFromPtrInput is an input type that accepts TopicSpecBindingFromArgs, TopicSpecBindingFromPtr and TopicSpecBindingFromPtrOutput values.
// You can construct a concrete instance of `TopicSpecBindingFromPtrInput` via:
//
//          TopicSpecBindingFromArgs{...}
//
//  or:
//
//          nil
type TopicSpecBindingFromPtrInput interface {
	pulumi.Input

	ToTopicSpecBindingFromPtrOutput() TopicSpecBindingFromPtrOutput
	ToTopicSpecBindingFromPtrOutputWithContext(context.Context) TopicSpecBindingFromPtrOutput
}

type topicSpecBindingFromPtrType TopicSpecBindingFromArgs

func TopicSpecBindingFromPtr(v *TopicSpecBindingFromArgs) TopicSpecBindingFromPtrInput {
	return (*topicSpecBindingFromPtrType)(v)
}

func (*topicSpecBindingFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSpecBindingFrom)(nil)).Elem()
}

func (i *topicSpecBindingFromPtrType) ToTopicSpecBindingFromPtrOutput() TopicSpecBindingFromPtrOutput {
	return i.ToTopicSpecBindingFromPtrOutputWithContext(context.Background())
}

func (i *topicSpecBindingFromPtrType) ToTopicSpecBindingFromPtrOutputWithContext(ctx context.Context) TopicSpecBindingFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecBindingFromPtrOutput)
}

type TopicSpecBindingFromOutput struct{ *pulumi.OutputState }

func (TopicSpecBindingFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecBindingFrom)(nil)).Elem()
}

func (o TopicSpecBindingFromOutput) ToTopicSpecBindingFromOutput() TopicSpecBindingFromOutput {
	return o
}

func (o TopicSpecBindingFromOutput) ToTopicSpecBindingFromOutputWithContext(ctx context.Context) TopicSpecBindingFromOutput {
	return o
}

func (o TopicSpecBindingFromOutput) ToTopicSpecBindingFromPtrOutput() TopicSpecBindingFromPtrOutput {
	return o.ToTopicSpecBindingFromPtrOutputWithContext(context.Background())
}

func (o TopicSpecBindingFromOutput) ToTopicSpecBindingFromPtrOutputWithContext(ctx context.Context) TopicSpecBindingFromPtrOutput {
	return o.ApplyT(func(v TopicSpecBindingFrom) *TopicSpecBindingFrom {
		return &v
	}).(TopicSpecBindingFromPtrOutput)
}
func (o TopicSpecBindingFromOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TopicSpecBindingFrom) string { return v.Name }).(pulumi.StringOutput)
}

func (o TopicSpecBindingFromOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSpecBindingFrom) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type TopicSpecBindingFromPtrOutput struct{ *pulumi.OutputState }

func (TopicSpecBindingFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSpecBindingFrom)(nil)).Elem()
}

func (o TopicSpecBindingFromPtrOutput) ToTopicSpecBindingFromPtrOutput() TopicSpecBindingFromPtrOutput {
	return o
}

func (o TopicSpecBindingFromPtrOutput) ToTopicSpecBindingFromPtrOutputWithContext(ctx context.Context) TopicSpecBindingFromPtrOutput {
	return o
}

func (o TopicSpecBindingFromPtrOutput) Elem() TopicSpecBindingFromOutput {
	return o.ApplyT(func(v *TopicSpecBindingFrom) TopicSpecBindingFrom { return *v }).(TopicSpecBindingFromOutput)
}

func (o TopicSpecBindingFromPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSpecBindingFrom) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o TopicSpecBindingFromPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSpecBindingFrom) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type TopicSpecConfigs struct {
	// A parameter may have attributes (e.g. message hub topic might have partitions)
	Attributes map[string]interface{} `pulumi:"attributes"`
	// Name representing the key.
	Name string `pulumi:"name"`
	// Defaults to null.
	Value interface{} `pulumi:"value"`
	// Source for the value. Cannot be used if value is not empty.
	ValueFrom *TopicSpecConfigsValueFrom `pulumi:"valueFrom"`
}

// TopicSpecConfigsInput is an input type that accepts TopicSpecConfigsArgs and TopicSpecConfigsOutput values.
// You can construct a concrete instance of `TopicSpecConfigsInput` via:
//
//          TopicSpecConfigsArgs{...}
type TopicSpecConfigsInput interface {
	pulumi.Input

	ToTopicSpecConfigsOutput() TopicSpecConfigsOutput
	ToTopicSpecConfigsOutputWithContext(context.Context) TopicSpecConfigsOutput
}

type TopicSpecConfigsArgs struct {
	// A parameter may have attributes (e.g. message hub topic might have partitions)
	Attributes pulumi.MapInput `pulumi:"attributes"`
	// Name representing the key.
	Name pulumi.StringInput `pulumi:"name"`
	// Defaults to null.
	Value pulumi.Input `pulumi:"value"`
	// Source for the value. Cannot be used if value is not empty.
	ValueFrom TopicSpecConfigsValueFromPtrInput `pulumi:"valueFrom"`
}

func (TopicSpecConfigsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecConfigs)(nil)).Elem()
}

func (i TopicSpecConfigsArgs) ToTopicSpecConfigsOutput() TopicSpecConfigsOutput {
	return i.ToTopicSpecConfigsOutputWithContext(context.Background())
}

func (i TopicSpecConfigsArgs) ToTopicSpecConfigsOutputWithContext(ctx context.Context) TopicSpecConfigsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecConfigsOutput)
}

// TopicSpecConfigsArrayInput is an input type that accepts TopicSpecConfigsArray and TopicSpecConfigsArrayOutput values.
// You can construct a concrete instance of `TopicSpecConfigsArrayInput` via:
//
//          TopicSpecConfigsArray{ TopicSpecConfigsArgs{...} }
type TopicSpecConfigsArrayInput interface {
	pulumi.Input

	ToTopicSpecConfigsArrayOutput() TopicSpecConfigsArrayOutput
	ToTopicSpecConfigsArrayOutputWithContext(context.Context) TopicSpecConfigsArrayOutput
}

type TopicSpecConfigsArray []TopicSpecConfigsInput

func (TopicSpecConfigsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicSpecConfigs)(nil)).Elem()
}

func (i TopicSpecConfigsArray) ToTopicSpecConfigsArrayOutput() TopicSpecConfigsArrayOutput {
	return i.ToTopicSpecConfigsArrayOutputWithContext(context.Background())
}

func (i TopicSpecConfigsArray) ToTopicSpecConfigsArrayOutputWithContext(ctx context.Context) TopicSpecConfigsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecConfigsArrayOutput)
}

type TopicSpecConfigsOutput struct{ *pulumi.OutputState }

func (TopicSpecConfigsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecConfigs)(nil)).Elem()
}

func (o TopicSpecConfigsOutput) ToTopicSpecConfigsOutput() TopicSpecConfigsOutput {
	return o
}

func (o TopicSpecConfigsOutput) ToTopicSpecConfigsOutputWithContext(ctx context.Context) TopicSpecConfigsOutput {
	return o
}

// A parameter may have attributes (e.g. message hub topic might have partitions)
func (o TopicSpecConfigsOutput) Attributes() pulumi.MapOutput {
	return o.ApplyT(func(v TopicSpecConfigs) map[string]interface{} { return v.Attributes }).(pulumi.MapOutput)
}

// Name representing the key.
func (o TopicSpecConfigsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TopicSpecConfigs) string { return v.Name }).(pulumi.StringOutput)
}

// Defaults to null.
func (o TopicSpecConfigsOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v TopicSpecConfigs) interface{} { return v.Value }).(pulumi.AnyOutput)
}

// Source for the value. Cannot be used if value is not empty.
func (o TopicSpecConfigsOutput) ValueFrom() TopicSpecConfigsValueFromPtrOutput {
	return o.ApplyT(func(v TopicSpecConfigs) *TopicSpecConfigsValueFrom { return v.ValueFrom }).(TopicSpecConfigsValueFromPtrOutput)
}

type TopicSpecConfigsArrayOutput struct{ *pulumi.OutputState }

func (TopicSpecConfigsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicSpecConfigs)(nil)).Elem()
}

func (o TopicSpecConfigsArrayOutput) ToTopicSpecConfigsArrayOutput() TopicSpecConfigsArrayOutput {
	return o
}

func (o TopicSpecConfigsArrayOutput) ToTopicSpecConfigsArrayOutputWithContext(ctx context.Context) TopicSpecConfigsArrayOutput {
	return o
}

func (o TopicSpecConfigsArrayOutput) Index(i pulumi.IntInput) TopicSpecConfigsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicSpecConfigs {
		return vs[0].([]TopicSpecConfigs)[vs[1].(int)]
	}).(TopicSpecConfigsOutput)
}

// A parameter may have attributes (e.g. message hub topic might have partitions)
type TopicSpecConfigsAttributes struct {
}

// TopicSpecConfigsAttributesInput is an input type that accepts TopicSpecConfigsAttributesArgs and TopicSpecConfigsAttributesOutput values.
// You can construct a concrete instance of `TopicSpecConfigsAttributesInput` via:
//
//          TopicSpecConfigsAttributesArgs{...}
type TopicSpecConfigsAttributesInput interface {
	pulumi.Input

	ToTopicSpecConfigsAttributesOutput() TopicSpecConfigsAttributesOutput
	ToTopicSpecConfigsAttributesOutputWithContext(context.Context) TopicSpecConfigsAttributesOutput
}

// A parameter may have attributes (e.g. message hub topic might have partitions)
type TopicSpecConfigsAttributesArgs struct {
}

func (TopicSpecConfigsAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecConfigsAttributes)(nil)).Elem()
}

func (i TopicSpecConfigsAttributesArgs) ToTopicSpecConfigsAttributesOutput() TopicSpecConfigsAttributesOutput {
	return i.ToTopicSpecConfigsAttributesOutputWithContext(context.Background())
}

func (i TopicSpecConfigsAttributesArgs) ToTopicSpecConfigsAttributesOutputWithContext(ctx context.Context) TopicSpecConfigsAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecConfigsAttributesOutput)
}

// A parameter may have attributes (e.g. message hub topic might have partitions)
type TopicSpecConfigsAttributesOutput struct{ *pulumi.OutputState }

func (TopicSpecConfigsAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecConfigsAttributes)(nil)).Elem()
}

func (o TopicSpecConfigsAttributesOutput) ToTopicSpecConfigsAttributesOutput() TopicSpecConfigsAttributesOutput {
	return o
}

func (o TopicSpecConfigsAttributesOutput) ToTopicSpecConfigsAttributesOutputWithContext(ctx context.Context) TopicSpecConfigsAttributesOutput {
	return o
}

// Source for the value. Cannot be used if value is not empty.
type TopicSpecConfigsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef map[string]interface{} `pulumi:"configMapKeyRef"`
	// Selects a key of a secret in the resource namespace
	SecretKeyRef map[string]interface{} `pulumi:"secretKeyRef"`
}

// TopicSpecConfigsValueFromInput is an input type that accepts TopicSpecConfigsValueFromArgs and TopicSpecConfigsValueFromOutput values.
// You can construct a concrete instance of `TopicSpecConfigsValueFromInput` via:
//
//          TopicSpecConfigsValueFromArgs{...}
type TopicSpecConfigsValueFromInput interface {
	pulumi.Input

	ToTopicSpecConfigsValueFromOutput() TopicSpecConfigsValueFromOutput
	ToTopicSpecConfigsValueFromOutputWithContext(context.Context) TopicSpecConfigsValueFromOutput
}

// Source for the value. Cannot be used if value is not empty.
type TopicSpecConfigsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef pulumi.MapInput `pulumi:"configMapKeyRef"`
	// Selects a key of a secret in the resource namespace
	SecretKeyRef pulumi.MapInput `pulumi:"secretKeyRef"`
}

func (TopicSpecConfigsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecConfigsValueFrom)(nil)).Elem()
}

func (i TopicSpecConfigsValueFromArgs) ToTopicSpecConfigsValueFromOutput() TopicSpecConfigsValueFromOutput {
	return i.ToTopicSpecConfigsValueFromOutputWithContext(context.Background())
}

func (i TopicSpecConfigsValueFromArgs) ToTopicSpecConfigsValueFromOutputWithContext(ctx context.Context) TopicSpecConfigsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecConfigsValueFromOutput)
}

func (i TopicSpecConfigsValueFromArgs) ToTopicSpecConfigsValueFromPtrOutput() TopicSpecConfigsValueFromPtrOutput {
	return i.ToTopicSpecConfigsValueFromPtrOutputWithContext(context.Background())
}

func (i TopicSpecConfigsValueFromArgs) ToTopicSpecConfigsValueFromPtrOutputWithContext(ctx context.Context) TopicSpecConfigsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecConfigsValueFromOutput).ToTopicSpecConfigsValueFromPtrOutputWithContext(ctx)
}

// TopicSpecConfigsValueFromPtrInput is an input type that accepts TopicSpecConfigsValueFromArgs, TopicSpecConfigsValueFromPtr and TopicSpecConfigsValueFromPtrOutput values.
// You can construct a concrete instance of `TopicSpecConfigsValueFromPtrInput` via:
//
//          TopicSpecConfigsValueFromArgs{...}
//
//  or:
//
//          nil
type TopicSpecConfigsValueFromPtrInput interface {
	pulumi.Input

	ToTopicSpecConfigsValueFromPtrOutput() TopicSpecConfigsValueFromPtrOutput
	ToTopicSpecConfigsValueFromPtrOutputWithContext(context.Context) TopicSpecConfigsValueFromPtrOutput
}

type topicSpecConfigsValueFromPtrType TopicSpecConfigsValueFromArgs

func TopicSpecConfigsValueFromPtr(v *TopicSpecConfigsValueFromArgs) TopicSpecConfigsValueFromPtrInput {
	return (*topicSpecConfigsValueFromPtrType)(v)
}

func (*topicSpecConfigsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSpecConfigsValueFrom)(nil)).Elem()
}

func (i *topicSpecConfigsValueFromPtrType) ToTopicSpecConfigsValueFromPtrOutput() TopicSpecConfigsValueFromPtrOutput {
	return i.ToTopicSpecConfigsValueFromPtrOutputWithContext(context.Background())
}

func (i *topicSpecConfigsValueFromPtrType) ToTopicSpecConfigsValueFromPtrOutputWithContext(ctx context.Context) TopicSpecConfigsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecConfigsValueFromPtrOutput)
}

// Source for the value. Cannot be used if value is not empty.
type TopicSpecConfigsValueFromOutput struct{ *pulumi.OutputState }

func (TopicSpecConfigsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecConfigsValueFrom)(nil)).Elem()
}

func (o TopicSpecConfigsValueFromOutput) ToTopicSpecConfigsValueFromOutput() TopicSpecConfigsValueFromOutput {
	return o
}

func (o TopicSpecConfigsValueFromOutput) ToTopicSpecConfigsValueFromOutputWithContext(ctx context.Context) TopicSpecConfigsValueFromOutput {
	return o
}

func (o TopicSpecConfigsValueFromOutput) ToTopicSpecConfigsValueFromPtrOutput() TopicSpecConfigsValueFromPtrOutput {
	return o.ToTopicSpecConfigsValueFromPtrOutputWithContext(context.Background())
}

func (o TopicSpecConfigsValueFromOutput) ToTopicSpecConfigsValueFromPtrOutputWithContext(ctx context.Context) TopicSpecConfigsValueFromPtrOutput {
	return o.ApplyT(func(v TopicSpecConfigsValueFrom) *TopicSpecConfigsValueFrom {
		return &v
	}).(TopicSpecConfigsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o TopicSpecConfigsValueFromOutput) ConfigMapKeyRef() pulumi.MapOutput {
	return o.ApplyT(func(v TopicSpecConfigsValueFrom) map[string]interface{} { return v.ConfigMapKeyRef }).(pulumi.MapOutput)
}

// Selects a key of a secret in the resource namespace
func (o TopicSpecConfigsValueFromOutput) SecretKeyRef() pulumi.MapOutput {
	return o.ApplyT(func(v TopicSpecConfigsValueFrom) map[string]interface{} { return v.SecretKeyRef }).(pulumi.MapOutput)
}

type TopicSpecConfigsValueFromPtrOutput struct{ *pulumi.OutputState }

func (TopicSpecConfigsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSpecConfigsValueFrom)(nil)).Elem()
}

func (o TopicSpecConfigsValueFromPtrOutput) ToTopicSpecConfigsValueFromPtrOutput() TopicSpecConfigsValueFromPtrOutput {
	return o
}

func (o TopicSpecConfigsValueFromPtrOutput) ToTopicSpecConfigsValueFromPtrOutputWithContext(ctx context.Context) TopicSpecConfigsValueFromPtrOutput {
	return o
}

func (o TopicSpecConfigsValueFromPtrOutput) Elem() TopicSpecConfigsValueFromOutput {
	return o.ApplyT(func(v *TopicSpecConfigsValueFrom) TopicSpecConfigsValueFrom { return *v }).(TopicSpecConfigsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o TopicSpecConfigsValueFromPtrOutput) ConfigMapKeyRef() pulumi.MapOutput {
	return o.ApplyT(func(v *TopicSpecConfigsValueFrom) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(pulumi.MapOutput)
}

// Selects a key of a secret in the resource namespace
func (o TopicSpecConfigsValueFromPtrOutput) SecretKeyRef() pulumi.MapOutput {
	return o.ApplyT(func(v *TopicSpecConfigsValueFrom) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(pulumi.MapOutput)
}

// Selects a key of a ConfigMap.
type TopicSpecConfigsValueFromConfigMapKeyRef struct {
}

// TopicSpecConfigsValueFromConfigMapKeyRefInput is an input type that accepts TopicSpecConfigsValueFromConfigMapKeyRefArgs and TopicSpecConfigsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `TopicSpecConfigsValueFromConfigMapKeyRefInput` via:
//
//          TopicSpecConfigsValueFromConfigMapKeyRefArgs{...}
type TopicSpecConfigsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToTopicSpecConfigsValueFromConfigMapKeyRefOutput() TopicSpecConfigsValueFromConfigMapKeyRefOutput
	ToTopicSpecConfigsValueFromConfigMapKeyRefOutputWithContext(context.Context) TopicSpecConfigsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type TopicSpecConfigsValueFromConfigMapKeyRefArgs struct {
}

func (TopicSpecConfigsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecConfigsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i TopicSpecConfigsValueFromConfigMapKeyRefArgs) ToTopicSpecConfigsValueFromConfigMapKeyRefOutput() TopicSpecConfigsValueFromConfigMapKeyRefOutput {
	return i.ToTopicSpecConfigsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i TopicSpecConfigsValueFromConfigMapKeyRefArgs) ToTopicSpecConfigsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) TopicSpecConfigsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecConfigsValueFromConfigMapKeyRefOutput)
}

// Selects a key of a ConfigMap.
type TopicSpecConfigsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (TopicSpecConfigsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecConfigsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o TopicSpecConfigsValueFromConfigMapKeyRefOutput) ToTopicSpecConfigsValueFromConfigMapKeyRefOutput() TopicSpecConfigsValueFromConfigMapKeyRefOutput {
	return o
}

func (o TopicSpecConfigsValueFromConfigMapKeyRefOutput) ToTopicSpecConfigsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) TopicSpecConfigsValueFromConfigMapKeyRefOutput {
	return o
}

// Selects a key of a secret in the resource namespace
type TopicSpecConfigsValueFromSecretKeyRef struct {
}

// TopicSpecConfigsValueFromSecretKeyRefInput is an input type that accepts TopicSpecConfigsValueFromSecretKeyRefArgs and TopicSpecConfigsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `TopicSpecConfigsValueFromSecretKeyRefInput` via:
//
//          TopicSpecConfigsValueFromSecretKeyRefArgs{...}
type TopicSpecConfigsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToTopicSpecConfigsValueFromSecretKeyRefOutput() TopicSpecConfigsValueFromSecretKeyRefOutput
	ToTopicSpecConfigsValueFromSecretKeyRefOutputWithContext(context.Context) TopicSpecConfigsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the resource namespace
type TopicSpecConfigsValueFromSecretKeyRefArgs struct {
}

func (TopicSpecConfigsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecConfigsValueFromSecretKeyRef)(nil)).Elem()
}

func (i TopicSpecConfigsValueFromSecretKeyRefArgs) ToTopicSpecConfigsValueFromSecretKeyRefOutput() TopicSpecConfigsValueFromSecretKeyRefOutput {
	return i.ToTopicSpecConfigsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i TopicSpecConfigsValueFromSecretKeyRefArgs) ToTopicSpecConfigsValueFromSecretKeyRefOutputWithContext(ctx context.Context) TopicSpecConfigsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecConfigsValueFromSecretKeyRefOutput)
}

// Selects a key of a secret in the resource namespace
type TopicSpecConfigsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (TopicSpecConfigsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecConfigsValueFromSecretKeyRef)(nil)).Elem()
}

func (o TopicSpecConfigsValueFromSecretKeyRefOutput) ToTopicSpecConfigsValueFromSecretKeyRefOutput() TopicSpecConfigsValueFromSecretKeyRefOutput {
	return o
}

func (o TopicSpecConfigsValueFromSecretKeyRefOutput) ToTopicSpecConfigsValueFromSecretKeyRefOutputWithContext(ctx context.Context) TopicSpecConfigsValueFromSecretKeyRefOutput {
	return o
}

type TopicSpecKafkaAdminUrl struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef map[string]interface{} `pulumi:"configMapKeyRef"`
	// Selects a key of a secret in the resource namespace
	SecretKeyRef map[string]interface{} `pulumi:"secretKeyRef"`
}

// TopicSpecKafkaAdminUrlInput is an input type that accepts TopicSpecKafkaAdminUrlArgs and TopicSpecKafkaAdminUrlOutput values.
// You can construct a concrete instance of `TopicSpecKafkaAdminUrlInput` via:
//
//          TopicSpecKafkaAdminUrlArgs{...}
type TopicSpecKafkaAdminUrlInput interface {
	pulumi.Input

	ToTopicSpecKafkaAdminUrlOutput() TopicSpecKafkaAdminUrlOutput
	ToTopicSpecKafkaAdminUrlOutputWithContext(context.Context) TopicSpecKafkaAdminUrlOutput
}

type TopicSpecKafkaAdminUrlArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef pulumi.MapInput `pulumi:"configMapKeyRef"`
	// Selects a key of a secret in the resource namespace
	SecretKeyRef pulumi.MapInput `pulumi:"secretKeyRef"`
}

func (TopicSpecKafkaAdminUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecKafkaAdminUrl)(nil)).Elem()
}

func (i TopicSpecKafkaAdminUrlArgs) ToTopicSpecKafkaAdminUrlOutput() TopicSpecKafkaAdminUrlOutput {
	return i.ToTopicSpecKafkaAdminUrlOutputWithContext(context.Background())
}

func (i TopicSpecKafkaAdminUrlArgs) ToTopicSpecKafkaAdminUrlOutputWithContext(ctx context.Context) TopicSpecKafkaAdminUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecKafkaAdminUrlOutput)
}

func (i TopicSpecKafkaAdminUrlArgs) ToTopicSpecKafkaAdminUrlPtrOutput() TopicSpecKafkaAdminUrlPtrOutput {
	return i.ToTopicSpecKafkaAdminUrlPtrOutputWithContext(context.Background())
}

func (i TopicSpecKafkaAdminUrlArgs) ToTopicSpecKafkaAdminUrlPtrOutputWithContext(ctx context.Context) TopicSpecKafkaAdminUrlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecKafkaAdminUrlOutput).ToTopicSpecKafkaAdminUrlPtrOutputWithContext(ctx)
}

// TopicSpecKafkaAdminUrlPtrInput is an input type that accepts TopicSpecKafkaAdminUrlArgs, TopicSpecKafkaAdminUrlPtr and TopicSpecKafkaAdminUrlPtrOutput values.
// You can construct a concrete instance of `TopicSpecKafkaAdminUrlPtrInput` via:
//
//          TopicSpecKafkaAdminUrlArgs{...}
//
//  or:
//
//          nil
type TopicSpecKafkaAdminUrlPtrInput interface {
	pulumi.Input

	ToTopicSpecKafkaAdminUrlPtrOutput() TopicSpecKafkaAdminUrlPtrOutput
	ToTopicSpecKafkaAdminUrlPtrOutputWithContext(context.Context) TopicSpecKafkaAdminUrlPtrOutput
}

type topicSpecKafkaAdminUrlPtrType TopicSpecKafkaAdminUrlArgs

func TopicSpecKafkaAdminUrlPtr(v *TopicSpecKafkaAdminUrlArgs) TopicSpecKafkaAdminUrlPtrInput {
	return (*topicSpecKafkaAdminUrlPtrType)(v)
}

func (*topicSpecKafkaAdminUrlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSpecKafkaAdminUrl)(nil)).Elem()
}

func (i *topicSpecKafkaAdminUrlPtrType) ToTopicSpecKafkaAdminUrlPtrOutput() TopicSpecKafkaAdminUrlPtrOutput {
	return i.ToTopicSpecKafkaAdminUrlPtrOutputWithContext(context.Background())
}

func (i *topicSpecKafkaAdminUrlPtrType) ToTopicSpecKafkaAdminUrlPtrOutputWithContext(ctx context.Context) TopicSpecKafkaAdminUrlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecKafkaAdminUrlPtrOutput)
}

type TopicSpecKafkaAdminUrlOutput struct{ *pulumi.OutputState }

func (TopicSpecKafkaAdminUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecKafkaAdminUrl)(nil)).Elem()
}

func (o TopicSpecKafkaAdminUrlOutput) ToTopicSpecKafkaAdminUrlOutput() TopicSpecKafkaAdminUrlOutput {
	return o
}

func (o TopicSpecKafkaAdminUrlOutput) ToTopicSpecKafkaAdminUrlOutputWithContext(ctx context.Context) TopicSpecKafkaAdminUrlOutput {
	return o
}

func (o TopicSpecKafkaAdminUrlOutput) ToTopicSpecKafkaAdminUrlPtrOutput() TopicSpecKafkaAdminUrlPtrOutput {
	return o.ToTopicSpecKafkaAdminUrlPtrOutputWithContext(context.Background())
}

func (o TopicSpecKafkaAdminUrlOutput) ToTopicSpecKafkaAdminUrlPtrOutputWithContext(ctx context.Context) TopicSpecKafkaAdminUrlPtrOutput {
	return o.ApplyT(func(v TopicSpecKafkaAdminUrl) *TopicSpecKafkaAdminUrl {
		return &v
	}).(TopicSpecKafkaAdminUrlPtrOutput)
}

// Selects a key of a ConfigMap.
func (o TopicSpecKafkaAdminUrlOutput) ConfigMapKeyRef() pulumi.MapOutput {
	return o.ApplyT(func(v TopicSpecKafkaAdminUrl) map[string]interface{} { return v.ConfigMapKeyRef }).(pulumi.MapOutput)
}

// Selects a key of a secret in the resource namespace
func (o TopicSpecKafkaAdminUrlOutput) SecretKeyRef() pulumi.MapOutput {
	return o.ApplyT(func(v TopicSpecKafkaAdminUrl) map[string]interface{} { return v.SecretKeyRef }).(pulumi.MapOutput)
}

type TopicSpecKafkaAdminUrlPtrOutput struct{ *pulumi.OutputState }

func (TopicSpecKafkaAdminUrlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSpecKafkaAdminUrl)(nil)).Elem()
}

func (o TopicSpecKafkaAdminUrlPtrOutput) ToTopicSpecKafkaAdminUrlPtrOutput() TopicSpecKafkaAdminUrlPtrOutput {
	return o
}

func (o TopicSpecKafkaAdminUrlPtrOutput) ToTopicSpecKafkaAdminUrlPtrOutputWithContext(ctx context.Context) TopicSpecKafkaAdminUrlPtrOutput {
	return o
}

func (o TopicSpecKafkaAdminUrlPtrOutput) Elem() TopicSpecKafkaAdminUrlOutput {
	return o.ApplyT(func(v *TopicSpecKafkaAdminUrl) TopicSpecKafkaAdminUrl { return *v }).(TopicSpecKafkaAdminUrlOutput)
}

// Selects a key of a ConfigMap.
func (o TopicSpecKafkaAdminUrlPtrOutput) ConfigMapKeyRef() pulumi.MapOutput {
	return o.ApplyT(func(v *TopicSpecKafkaAdminUrl) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(pulumi.MapOutput)
}

// Selects a key of a secret in the resource namespace
func (o TopicSpecKafkaAdminUrlPtrOutput) SecretKeyRef() pulumi.MapOutput {
	return o.ApplyT(func(v *TopicSpecKafkaAdminUrl) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(pulumi.MapOutput)
}

// Selects a key of a ConfigMap.
type TopicSpecKafkaAdminUrlConfigMapKeyRef struct {
}

// TopicSpecKafkaAdminUrlConfigMapKeyRefInput is an input type that accepts TopicSpecKafkaAdminUrlConfigMapKeyRefArgs and TopicSpecKafkaAdminUrlConfigMapKeyRefOutput values.
// You can construct a concrete instance of `TopicSpecKafkaAdminUrlConfigMapKeyRefInput` via:
//
//          TopicSpecKafkaAdminUrlConfigMapKeyRefArgs{...}
type TopicSpecKafkaAdminUrlConfigMapKeyRefInput interface {
	pulumi.Input

	ToTopicSpecKafkaAdminUrlConfigMapKeyRefOutput() TopicSpecKafkaAdminUrlConfigMapKeyRefOutput
	ToTopicSpecKafkaAdminUrlConfigMapKeyRefOutputWithContext(context.Context) TopicSpecKafkaAdminUrlConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type TopicSpecKafkaAdminUrlConfigMapKeyRefArgs struct {
}

func (TopicSpecKafkaAdminUrlConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecKafkaAdminUrlConfigMapKeyRef)(nil)).Elem()
}

func (i TopicSpecKafkaAdminUrlConfigMapKeyRefArgs) ToTopicSpecKafkaAdminUrlConfigMapKeyRefOutput() TopicSpecKafkaAdminUrlConfigMapKeyRefOutput {
	return i.ToTopicSpecKafkaAdminUrlConfigMapKeyRefOutputWithContext(context.Background())
}

func (i TopicSpecKafkaAdminUrlConfigMapKeyRefArgs) ToTopicSpecKafkaAdminUrlConfigMapKeyRefOutputWithContext(ctx context.Context) TopicSpecKafkaAdminUrlConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecKafkaAdminUrlConfigMapKeyRefOutput)
}

// Selects a key of a ConfigMap.
type TopicSpecKafkaAdminUrlConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (TopicSpecKafkaAdminUrlConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecKafkaAdminUrlConfigMapKeyRef)(nil)).Elem()
}

func (o TopicSpecKafkaAdminUrlConfigMapKeyRefOutput) ToTopicSpecKafkaAdminUrlConfigMapKeyRefOutput() TopicSpecKafkaAdminUrlConfigMapKeyRefOutput {
	return o
}

func (o TopicSpecKafkaAdminUrlConfigMapKeyRefOutput) ToTopicSpecKafkaAdminUrlConfigMapKeyRefOutputWithContext(ctx context.Context) TopicSpecKafkaAdminUrlConfigMapKeyRefOutput {
	return o
}

// Selects a key of a secret in the resource namespace
type TopicSpecKafkaAdminUrlSecretKeyRef struct {
}

// TopicSpecKafkaAdminUrlSecretKeyRefInput is an input type that accepts TopicSpecKafkaAdminUrlSecretKeyRefArgs and TopicSpecKafkaAdminUrlSecretKeyRefOutput values.
// You can construct a concrete instance of `TopicSpecKafkaAdminUrlSecretKeyRefInput` via:
//
//          TopicSpecKafkaAdminUrlSecretKeyRefArgs{...}
type TopicSpecKafkaAdminUrlSecretKeyRefInput interface {
	pulumi.Input

	ToTopicSpecKafkaAdminUrlSecretKeyRefOutput() TopicSpecKafkaAdminUrlSecretKeyRefOutput
	ToTopicSpecKafkaAdminUrlSecretKeyRefOutputWithContext(context.Context) TopicSpecKafkaAdminUrlSecretKeyRefOutput
}

// Selects a key of a secret in the resource namespace
type TopicSpecKafkaAdminUrlSecretKeyRefArgs struct {
}

func (TopicSpecKafkaAdminUrlSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecKafkaAdminUrlSecretKeyRef)(nil)).Elem()
}

func (i TopicSpecKafkaAdminUrlSecretKeyRefArgs) ToTopicSpecKafkaAdminUrlSecretKeyRefOutput() TopicSpecKafkaAdminUrlSecretKeyRefOutput {
	return i.ToTopicSpecKafkaAdminUrlSecretKeyRefOutputWithContext(context.Background())
}

func (i TopicSpecKafkaAdminUrlSecretKeyRefArgs) ToTopicSpecKafkaAdminUrlSecretKeyRefOutputWithContext(ctx context.Context) TopicSpecKafkaAdminUrlSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpecKafkaAdminUrlSecretKeyRefOutput)
}

// Selects a key of a secret in the resource namespace
type TopicSpecKafkaAdminUrlSecretKeyRefOutput struct{ *pulumi.OutputState }

func (TopicSpecKafkaAdminUrlSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpecKafkaAdminUrlSecretKeyRef)(nil)).Elem()
}

func (o TopicSpecKafkaAdminUrlSecretKeyRefOutput) ToTopicSpecKafkaAdminUrlSecretKeyRefOutput() TopicSpecKafkaAdminUrlSecretKeyRefOutput {
	return o
}

func (o TopicSpecKafkaAdminUrlSecretKeyRefOutput) ToTopicSpecKafkaAdminUrlSecretKeyRefOutputWithContext(ctx context.Context) TopicSpecKafkaAdminUrlSecretKeyRefOutput {
	return o
}

type TopicStatus struct {
	Message *string `pulumi:"message"`
	State   *string `pulumi:"state"`
}

// TopicStatusInput is an input type that accepts TopicStatusArgs and TopicStatusOutput values.
// You can construct a concrete instance of `TopicStatusInput` via:
//
//          TopicStatusArgs{...}
type TopicStatusInput interface {
	pulumi.Input

	ToTopicStatusOutput() TopicStatusOutput
	ToTopicStatusOutputWithContext(context.Context) TopicStatusOutput
}

type TopicStatusArgs struct {
	Message pulumi.StringPtrInput `pulumi:"message"`
	State   pulumi.StringPtrInput `pulumi:"state"`
}

func (TopicStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicStatus)(nil)).Elem()
}

func (i TopicStatusArgs) ToTopicStatusOutput() TopicStatusOutput {
	return i.ToTopicStatusOutputWithContext(context.Background())
}

func (i TopicStatusArgs) ToTopicStatusOutputWithContext(ctx context.Context) TopicStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicStatusOutput)
}

func (i TopicStatusArgs) ToTopicStatusPtrOutput() TopicStatusPtrOutput {
	return i.ToTopicStatusPtrOutputWithContext(context.Background())
}

func (i TopicStatusArgs) ToTopicStatusPtrOutputWithContext(ctx context.Context) TopicStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicStatusOutput).ToTopicStatusPtrOutputWithContext(ctx)
}

// TopicStatusPtrInput is an input type that accepts TopicStatusArgs, TopicStatusPtr and TopicStatusPtrOutput values.
// You can construct a concrete instance of `TopicStatusPtrInput` via:
//
//          TopicStatusArgs{...}
//
//  or:
//
//          nil
type TopicStatusPtrInput interface {
	pulumi.Input

	ToTopicStatusPtrOutput() TopicStatusPtrOutput
	ToTopicStatusPtrOutputWithContext(context.Context) TopicStatusPtrOutput
}

type topicStatusPtrType TopicStatusArgs

func TopicStatusPtr(v *TopicStatusArgs) TopicStatusPtrInput {
	return (*topicStatusPtrType)(v)
}

func (*topicStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicStatus)(nil)).Elem()
}

func (i *topicStatusPtrType) ToTopicStatusPtrOutput() TopicStatusPtrOutput {
	return i.ToTopicStatusPtrOutputWithContext(context.Background())
}

func (i *topicStatusPtrType) ToTopicStatusPtrOutputWithContext(ctx context.Context) TopicStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicStatusPtrOutput)
}

type TopicStatusOutput struct{ *pulumi.OutputState }

func (TopicStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicStatus)(nil)).Elem()
}

func (o TopicStatusOutput) ToTopicStatusOutput() TopicStatusOutput {
	return o
}

func (o TopicStatusOutput) ToTopicStatusOutputWithContext(ctx context.Context) TopicStatusOutput {
	return o
}

func (o TopicStatusOutput) ToTopicStatusPtrOutput() TopicStatusPtrOutput {
	return o.ToTopicStatusPtrOutputWithContext(context.Background())
}

func (o TopicStatusOutput) ToTopicStatusPtrOutputWithContext(ctx context.Context) TopicStatusPtrOutput {
	return o.ApplyT(func(v TopicStatus) *TopicStatus {
		return &v
	}).(TopicStatusPtrOutput)
}
func (o TopicStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o TopicStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type TopicStatusPtrOutput struct{ *pulumi.OutputState }

func (TopicStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicStatus)(nil)).Elem()
}

func (o TopicStatusPtrOutput) ToTopicStatusPtrOutput() TopicStatusPtrOutput {
	return o
}

func (o TopicStatusPtrOutput) ToTopicStatusPtrOutputWithContext(ctx context.Context) TopicStatusPtrOutput {
	return o
}

func (o TopicStatusPtrOutput) Elem() TopicStatusOutput {
	return o.ApplyT(func(v *TopicStatus) TopicStatus { return *v }).(TopicStatusOutput)
}

func (o TopicStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

func (o TopicStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(TopicTypeOutput{})
	pulumi.RegisterOutputType(TopicMetadataOutput{})
	pulumi.RegisterOutputType(TopicSpecOutput{})
	pulumi.RegisterOutputType(TopicSpecPtrOutput{})
	pulumi.RegisterOutputType(TopicSpecApiKeyOutput{})
	pulumi.RegisterOutputType(TopicSpecApiKeyPtrOutput{})
	pulumi.RegisterOutputType(TopicSpecApiKeyConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(TopicSpecApiKeySecretKeyRefOutput{})
	pulumi.RegisterOutputType(TopicSpecBindingFromOutput{})
	pulumi.RegisterOutputType(TopicSpecBindingFromPtrOutput{})
	pulumi.RegisterOutputType(TopicSpecConfigsOutput{})
	pulumi.RegisterOutputType(TopicSpecConfigsArrayOutput{})
	pulumi.RegisterOutputType(TopicSpecConfigsAttributesOutput{})
	pulumi.RegisterOutputType(TopicSpecConfigsValueFromOutput{})
	pulumi.RegisterOutputType(TopicSpecConfigsValueFromPtrOutput{})
	pulumi.RegisterOutputType(TopicSpecConfigsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(TopicSpecConfigsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(TopicSpecKafkaAdminUrlOutput{})
	pulumi.RegisterOutputType(TopicSpecKafkaAdminUrlPtrOutput{})
	pulumi.RegisterOutputType(TopicSpecKafkaAdminUrlConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(TopicSpecKafkaAdminUrlSecretKeyRefOutput{})
	pulumi.RegisterOutputType(TopicStatusOutput{})
	pulumi.RegisterOutputType(TopicStatusPtrOutput{})
}

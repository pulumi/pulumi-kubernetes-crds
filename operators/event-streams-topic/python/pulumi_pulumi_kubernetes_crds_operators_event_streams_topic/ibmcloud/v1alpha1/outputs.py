# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'TopicSpec',
    'TopicSpecApiKey',
    'TopicSpecBindingFrom',
    'TopicSpecConfigs',
    'TopicSpecConfigsValueFrom',
    'TopicSpecKafkaAdminUrl',
    'TopicStatus',
]

@pulumi.output_type
class TopicSpec(dict):
    def __init__(__self__, *,
                 topic_name: str,
                 api_key: Optional['outputs.TopicSpecApiKey'] = None,
                 binding_from: Optional['outputs.TopicSpecBindingFrom'] = None,
                 configs: Optional[Sequence['outputs.TopicSpecConfigs']] = None,
                 kafka_admin_url: Optional['outputs.TopicSpecKafkaAdminUrl'] = None,
                 num_partitions: Optional[int] = None,
                 replication_factor: Optional[int] = None):
        pulumi.set(__self__, "topic_name", topic_name)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if binding_from is not None:
            pulumi.set(__self__, "binding_from", binding_from)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if kafka_admin_url is not None:
            pulumi.set(__self__, "kafka_admin_url", kafka_admin_url)
        if num_partitions is not None:
            pulumi.set(__self__, "num_partitions", num_partitions)
        if replication_factor is not None:
            pulumi.set(__self__, "replication_factor", replication_factor)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        return pulumi.get(self, "topic_name")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional['outputs.TopicSpecApiKey']:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="bindingFrom")
    def binding_from(self) -> Optional['outputs.TopicSpecBindingFrom']:
        return pulumi.get(self, "binding_from")

    @property
    @pulumi.getter
    def configs(self) -> Optional[Sequence['outputs.TopicSpecConfigs']]:
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="kafkaAdminUrl")
    def kafka_admin_url(self) -> Optional['outputs.TopicSpecKafkaAdminUrl']:
        return pulumi.get(self, "kafka_admin_url")

    @property
    @pulumi.getter(name="numPartitions")
    def num_partitions(self) -> Optional[int]:
        return pulumi.get(self, "num_partitions")

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> Optional[int]:
        return pulumi.get(self, "replication_factor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TopicSpecApiKey(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional[Mapping[str, Any]] = None,
                 secret_key_ref: Optional[Mapping[str, Any]] = None):
        """
        :param Mapping[str, Any] config_map_key_ref: Selects a key of a ConfigMap.
        :param Mapping[str, Any] secret_key_ref: Selects a key of a secret in the resource namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[Mapping[str, Any]]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[Mapping[str, Any]]:
        """
        Selects a key of a secret in the resource namespace
        """
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TopicSpecBindingFrom(dict):
    def __init__(__self__, *,
                 name: str,
                 namespace: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TopicSpecConfigs(dict):
    def __init__(__self__, *,
                 name: str,
                 attributes: Optional[Mapping[str, Any]] = None,
                 value: Optional[Any] = None,
                 value_from: Optional['outputs.TopicSpecConfigsValueFrom'] = None):
        """
        :param str name: Name representing the key.
        :param Mapping[str, Any] attributes: A parameter may have attributes (e.g. message hub topic might have partitions)
        :param Any value: Defaults to null.
        :param 'TopicSpecConfigsValueFromArgs' value_from: Source for the value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name representing the key.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[Mapping[str, Any]]:
        """
        A parameter may have attributes (e.g. message hub topic might have partitions)
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def value(self) -> Optional[Any]:
        """
        Defaults to null.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.TopicSpecConfigsValueFrom']:
        """
        Source for the value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TopicSpecConfigsValueFrom(dict):
    """
    Source for the value. Cannot be used if value is not empty.
    """
    def __init__(__self__, *,
                 config_map_key_ref: Optional[Mapping[str, Any]] = None,
                 secret_key_ref: Optional[Mapping[str, Any]] = None):
        """
        Source for the value. Cannot be used if value is not empty.
        :param Mapping[str, Any] config_map_key_ref: Selects a key of a ConfigMap.
        :param Mapping[str, Any] secret_key_ref: Selects a key of a secret in the resource namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[Mapping[str, Any]]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[Mapping[str, Any]]:
        """
        Selects a key of a secret in the resource namespace
        """
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TopicSpecKafkaAdminUrl(dict):
    def __init__(__self__, *,
                 config_map_key_ref: Optional[Mapping[str, Any]] = None,
                 secret_key_ref: Optional[Mapping[str, Any]] = None):
        """
        :param Mapping[str, Any] config_map_key_ref: Selects a key of a ConfigMap.
        :param Mapping[str, Any] secret_key_ref: Selects a key of a secret in the resource namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[Mapping[str, Any]]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[Mapping[str, Any]]:
        """
        Selects a key of a secret in the resource namespace
        """
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TopicStatus(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 state: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Redis is the Schema for the redis API
type RedisType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// RedisSpec defines the desired state of Redis
	Spec map[string]interface{} `pulumi:"spec"`
	// RedisStatus defines the observed state of Redis
	Status map[string]interface{} `pulumi:"status"`
}

// RedisTypeInput is an input type that accepts RedisTypeArgs and RedisTypeOutput values.
// You can construct a concrete instance of `RedisTypeInput` via:
//
//          RedisTypeArgs{...}
type RedisTypeInput interface {
	pulumi.Input

	ToRedisTypeOutput() RedisTypeOutput
	ToRedisTypeOutputWithContext(context.Context) RedisTypeOutput
}

// Redis is the Schema for the redis API
type RedisTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// RedisSpec defines the desired state of Redis
	Spec pulumi.MapInput `pulumi:"spec"`
	// RedisStatus defines the observed state of Redis
	Status pulumi.MapInput `pulumi:"status"`
}

func (RedisTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisType)(nil)).Elem()
}

func (i RedisTypeArgs) ToRedisTypeOutput() RedisTypeOutput {
	return i.ToRedisTypeOutputWithContext(context.Background())
}

func (i RedisTypeArgs) ToRedisTypeOutputWithContext(ctx context.Context) RedisTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisTypeOutput)
}

// Redis is the Schema for the redis API
type RedisTypeOutput struct{ *pulumi.OutputState }

func (RedisTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisType)(nil)).Elem()
}

func (o RedisTypeOutput) ToRedisTypeOutput() RedisTypeOutput {
	return o
}

func (o RedisTypeOutput) ToRedisTypeOutputWithContext(ctx context.Context) RedisTypeOutput {
	return o
}

func (o RedisTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o RedisTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o RedisTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v RedisType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// RedisSpec defines the desired state of Redis
func (o RedisTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v RedisType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

// RedisStatus defines the observed state of Redis
func (o RedisTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v RedisType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type RedisMetadata struct {
}

// RedisMetadataInput is an input type that accepts RedisMetadataArgs and RedisMetadataOutput values.
// You can construct a concrete instance of `RedisMetadataInput` via:
//
//          RedisMetadataArgs{...}
type RedisMetadataInput interface {
	pulumi.Input

	ToRedisMetadataOutput() RedisMetadataOutput
	ToRedisMetadataOutputWithContext(context.Context) RedisMetadataOutput
}

type RedisMetadataArgs struct {
}

func (RedisMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisMetadata)(nil)).Elem()
}

func (i RedisMetadataArgs) ToRedisMetadataOutput() RedisMetadataOutput {
	return i.ToRedisMetadataOutputWithContext(context.Background())
}

func (i RedisMetadataArgs) ToRedisMetadataOutputWithContext(ctx context.Context) RedisMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisMetadataOutput)
}

type RedisMetadataOutput struct{ *pulumi.OutputState }

func (RedisMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisMetadata)(nil)).Elem()
}

func (o RedisMetadataOutput) ToRedisMetadataOutput() RedisMetadataOutput {
	return o
}

func (o RedisMetadataOutput) ToRedisMetadataOutputWithContext(ctx context.Context) RedisMetadataOutput {
	return o
}

// RedisSpec defines the desired state of Redis
type RedisSpec struct {
}

// RedisSpecInput is an input type that accepts RedisSpecArgs and RedisSpecOutput values.
// You can construct a concrete instance of `RedisSpecInput` via:
//
//          RedisSpecArgs{...}
type RedisSpecInput interface {
	pulumi.Input

	ToRedisSpecOutput() RedisSpecOutput
	ToRedisSpecOutputWithContext(context.Context) RedisSpecOutput
}

// RedisSpec defines the desired state of Redis
type RedisSpecArgs struct {
}

func (RedisSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpec)(nil)).Elem()
}

func (i RedisSpecArgs) ToRedisSpecOutput() RedisSpecOutput {
	return i.ToRedisSpecOutputWithContext(context.Background())
}

func (i RedisSpecArgs) ToRedisSpecOutputWithContext(ctx context.Context) RedisSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecOutput)
}

// RedisSpec defines the desired state of Redis
type RedisSpecOutput struct{ *pulumi.OutputState }

func (RedisSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpec)(nil)).Elem()
}

func (o RedisSpecOutput) ToRedisSpecOutput() RedisSpecOutput {
	return o
}

func (o RedisSpecOutput) ToRedisSpecOutputWithContext(ctx context.Context) RedisSpecOutput {
	return o
}

// RedisStatus defines the observed state of Redis
type RedisStatus struct {
}

// RedisStatusInput is an input type that accepts RedisStatusArgs and RedisStatusOutput values.
// You can construct a concrete instance of `RedisStatusInput` via:
//
//          RedisStatusArgs{...}
type RedisStatusInput interface {
	pulumi.Input

	ToRedisStatusOutput() RedisStatusOutput
	ToRedisStatusOutputWithContext(context.Context) RedisStatusOutput
}

// RedisStatus defines the observed state of Redis
type RedisStatusArgs struct {
}

func (RedisStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisStatus)(nil)).Elem()
}

func (i RedisStatusArgs) ToRedisStatusOutput() RedisStatusOutput {
	return i.ToRedisStatusOutputWithContext(context.Background())
}

func (i RedisStatusArgs) ToRedisStatusOutputWithContext(ctx context.Context) RedisStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisStatusOutput)
}

// RedisStatus defines the observed state of Redis
type RedisStatusOutput struct{ *pulumi.OutputState }

func (RedisStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisStatus)(nil)).Elem()
}

func (o RedisStatusOutput) ToRedisStatusOutput() RedisStatusOutput {
	return o
}

func (o RedisStatusOutput) ToRedisStatusOutputWithContext(ctx context.Context) RedisStatusOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RedisTypeOutput{})
	pulumi.RegisterOutputType(RedisMetadataOutput{})
	pulumi.RegisterOutputType(RedisSpecOutput{})
	pulumi.RegisterOutputType(RedisStatusOutput{})
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Test is the Schema for the tests API
type TestType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// TestSpec defines the desired state of Test
	Spec *TestSpec `pulumi:"spec"`
	// TestStatus defines the observed state of Test
	Status *TestStatus `pulumi:"status"`
}

// TestTypeInput is an input type that accepts TestTypeArgs and TestTypeOutput values.
// You can construct a concrete instance of `TestTypeInput` via:
//
//          TestTypeArgs{...}
type TestTypeInput interface {
	pulumi.Input

	ToTestTypeOutput() TestTypeOutput
	ToTestTypeOutputWithContext(context.Context) TestTypeOutput
}

// Test is the Schema for the tests API
type TestTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// TestSpec defines the desired state of Test
	Spec TestSpecPtrInput `pulumi:"spec"`
	// TestStatus defines the observed state of Test
	Status TestStatusPtrInput `pulumi:"status"`
}

func (TestTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestType)(nil)).Elem()
}

func (i TestTypeArgs) ToTestTypeOutput() TestTypeOutput {
	return i.ToTestTypeOutputWithContext(context.Background())
}

func (i TestTypeArgs) ToTestTypeOutputWithContext(ctx context.Context) TestTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestTypeOutput)
}

// Test is the Schema for the tests API
type TestTypeOutput struct{ *pulumi.OutputState }

func (TestTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestType)(nil)).Elem()
}

func (o TestTypeOutput) ToTestTypeOutput() TestTypeOutput {
	return o
}

func (o TestTypeOutput) ToTestTypeOutputWithContext(ctx context.Context) TestTypeOutput {
	return o
}

func (o TestTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o TestTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o TestTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v TestType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// TestSpec defines the desired state of Test
func (o TestTypeOutput) Spec() TestSpecPtrOutput {
	return o.ApplyT(func(v TestType) *TestSpec { return v.Spec }).(TestSpecPtrOutput)
}

// TestStatus defines the observed state of Test
func (o TestTypeOutput) Status() TestStatusPtrOutput {
	return o.ApplyT(func(v TestType) *TestStatus { return v.Status }).(TestStatusPtrOutput)
}

type TestMetadata struct {
}

// TestMetadataInput is an input type that accepts TestMetadataArgs and TestMetadataOutput values.
// You can construct a concrete instance of `TestMetadataInput` via:
//
//          TestMetadataArgs{...}
type TestMetadataInput interface {
	pulumi.Input

	ToTestMetadataOutput() TestMetadataOutput
	ToTestMetadataOutputWithContext(context.Context) TestMetadataOutput
}

type TestMetadataArgs struct {
}

func (TestMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestMetadata)(nil)).Elem()
}

func (i TestMetadataArgs) ToTestMetadataOutput() TestMetadataOutput {
	return i.ToTestMetadataOutputWithContext(context.Background())
}

func (i TestMetadataArgs) ToTestMetadataOutputWithContext(ctx context.Context) TestMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestMetadataOutput)
}

type TestMetadataOutput struct{ *pulumi.OutputState }

func (TestMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestMetadata)(nil)).Elem()
}

func (o TestMetadataOutput) ToTestMetadataOutput() TestMetadataOutput {
	return o
}

func (o TestMetadataOutput) ToTestMetadataOutputWithContext(ctx context.Context) TestMetadataOutput {
	return o
}

// TestSpec defines the desired state of Test
type TestSpec struct {
	// SettingsSpec--
	Config    *TestSpecConfig     `pulumi:"config"`
	Env       []string            `pulumi:"env"`
	Resources []TestSpecResources `pulumi:"resources"`
	Secret    *string             `pulumi:"secret"`
	// SourceSpec--
	Source *TestSpecSource `pulumi:"source"`
}

// TestSpecInput is an input type that accepts TestSpecArgs and TestSpecOutput values.
// You can construct a concrete instance of `TestSpecInput` via:
//
//          TestSpecArgs{...}
type TestSpecInput interface {
	pulumi.Input

	ToTestSpecOutput() TestSpecOutput
	ToTestSpecOutputWithContext(context.Context) TestSpecOutput
}

// TestSpec defines the desired state of Test
type TestSpecArgs struct {
	// SettingsSpec--
	Config    TestSpecConfigPtrInput      `pulumi:"config"`
	Env       pulumi.StringArrayInput     `pulumi:"env"`
	Resources TestSpecResourcesArrayInput `pulumi:"resources"`
	Secret    pulumi.StringPtrInput       `pulumi:"secret"`
	// SourceSpec--
	Source TestSpecSourcePtrInput `pulumi:"source"`
}

func (TestSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestSpec)(nil)).Elem()
}

func (i TestSpecArgs) ToTestSpecOutput() TestSpecOutput {
	return i.ToTestSpecOutputWithContext(context.Background())
}

func (i TestSpecArgs) ToTestSpecOutputWithContext(ctx context.Context) TestSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSpecOutput)
}

func (i TestSpecArgs) ToTestSpecPtrOutput() TestSpecPtrOutput {
	return i.ToTestSpecPtrOutputWithContext(context.Background())
}

func (i TestSpecArgs) ToTestSpecPtrOutputWithContext(ctx context.Context) TestSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSpecOutput).ToTestSpecPtrOutputWithContext(ctx)
}

// TestSpecPtrInput is an input type that accepts TestSpecArgs, TestSpecPtr and TestSpecPtrOutput values.
// You can construct a concrete instance of `TestSpecPtrInput` via:
//
//          TestSpecArgs{...}
//
//  or:
//
//          nil
type TestSpecPtrInput interface {
	pulumi.Input

	ToTestSpecPtrOutput() TestSpecPtrOutput
	ToTestSpecPtrOutputWithContext(context.Context) TestSpecPtrOutput
}

type testSpecPtrType TestSpecArgs

func TestSpecPtr(v *TestSpecArgs) TestSpecPtrInput {
	return (*testSpecPtrType)(v)
}

func (*testSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TestSpec)(nil)).Elem()
}

func (i *testSpecPtrType) ToTestSpecPtrOutput() TestSpecPtrOutput {
	return i.ToTestSpecPtrOutputWithContext(context.Background())
}

func (i *testSpecPtrType) ToTestSpecPtrOutputWithContext(ctx context.Context) TestSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSpecPtrOutput)
}

// TestSpec defines the desired state of Test
type TestSpecOutput struct{ *pulumi.OutputState }

func (TestSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestSpec)(nil)).Elem()
}

func (o TestSpecOutput) ToTestSpecOutput() TestSpecOutput {
	return o
}

func (o TestSpecOutput) ToTestSpecOutputWithContext(ctx context.Context) TestSpecOutput {
	return o
}

func (o TestSpecOutput) ToTestSpecPtrOutput() TestSpecPtrOutput {
	return o.ToTestSpecPtrOutputWithContext(context.Background())
}

func (o TestSpecOutput) ToTestSpecPtrOutputWithContext(ctx context.Context) TestSpecPtrOutput {
	return o.ApplyT(func(v TestSpec) *TestSpec {
		return &v
	}).(TestSpecPtrOutput)
}

// SettingsSpec--
func (o TestSpecOutput) Config() TestSpecConfigPtrOutput {
	return o.ApplyT(func(v TestSpec) *TestSpecConfig { return v.Config }).(TestSpecConfigPtrOutput)
}

func (o TestSpecOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TestSpec) []string { return v.Env }).(pulumi.StringArrayOutput)
}

func (o TestSpecOutput) Resources() TestSpecResourcesArrayOutput {
	return o.ApplyT(func(v TestSpec) []TestSpecResources { return v.Resources }).(TestSpecResourcesArrayOutput)
}

func (o TestSpecOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestSpec) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// SourceSpec--
func (o TestSpecOutput) Source() TestSpecSourcePtrOutput {
	return o.ApplyT(func(v TestSpec) *TestSpecSource { return v.Source }).(TestSpecSourcePtrOutput)
}

type TestSpecPtrOutput struct{ *pulumi.OutputState }

func (TestSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestSpec)(nil)).Elem()
}

func (o TestSpecPtrOutput) ToTestSpecPtrOutput() TestSpecPtrOutput {
	return o
}

func (o TestSpecPtrOutput) ToTestSpecPtrOutputWithContext(ctx context.Context) TestSpecPtrOutput {
	return o
}

func (o TestSpecPtrOutput) Elem() TestSpecOutput {
	return o.ApplyT(func(v *TestSpec) TestSpec { return *v }).(TestSpecOutput)
}

// SettingsSpec--
func (o TestSpecPtrOutput) Config() TestSpecConfigPtrOutput {
	return o.ApplyT(func(v *TestSpec) *TestSpecConfig {
		if v == nil {
			return nil
		}
		return v.Config
	}).(TestSpecConfigPtrOutput)
}

func (o TestSpecPtrOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TestSpec) []string {
		if v == nil {
			return nil
		}
		return v.Env
	}).(pulumi.StringArrayOutput)
}

func (o TestSpecPtrOutput) Resources() TestSpecResourcesArrayOutput {
	return o.ApplyT(func(v *TestSpec) []TestSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(TestSpecResourcesArrayOutput)
}

func (o TestSpecPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestSpec) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// SourceSpec--
func (o TestSpecPtrOutput) Source() TestSpecSourcePtrOutput {
	return o.ApplyT(func(v *TestSpec) *TestSpecSource {
		if v == nil {
			return nil
		}
		return v.Source
	}).(TestSpecSourcePtrOutput)
}

// SettingsSpec--
type TestSpecConfig struct {
	Content *string `pulumi:"content"`
	Name    *string `pulumi:"name"`
}

// TestSpecConfigInput is an input type that accepts TestSpecConfigArgs and TestSpecConfigOutput values.
// You can construct a concrete instance of `TestSpecConfigInput` via:
//
//          TestSpecConfigArgs{...}
type TestSpecConfigInput interface {
	pulumi.Input

	ToTestSpecConfigOutput() TestSpecConfigOutput
	ToTestSpecConfigOutputWithContext(context.Context) TestSpecConfigOutput
}

// SettingsSpec--
type TestSpecConfigArgs struct {
	Content pulumi.StringPtrInput `pulumi:"content"`
	Name    pulumi.StringPtrInput `pulumi:"name"`
}

func (TestSpecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestSpecConfig)(nil)).Elem()
}

func (i TestSpecConfigArgs) ToTestSpecConfigOutput() TestSpecConfigOutput {
	return i.ToTestSpecConfigOutputWithContext(context.Background())
}

func (i TestSpecConfigArgs) ToTestSpecConfigOutputWithContext(ctx context.Context) TestSpecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSpecConfigOutput)
}

func (i TestSpecConfigArgs) ToTestSpecConfigPtrOutput() TestSpecConfigPtrOutput {
	return i.ToTestSpecConfigPtrOutputWithContext(context.Background())
}

func (i TestSpecConfigArgs) ToTestSpecConfigPtrOutputWithContext(ctx context.Context) TestSpecConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSpecConfigOutput).ToTestSpecConfigPtrOutputWithContext(ctx)
}

// TestSpecConfigPtrInput is an input type that accepts TestSpecConfigArgs, TestSpecConfigPtr and TestSpecConfigPtrOutput values.
// You can construct a concrete instance of `TestSpecConfigPtrInput` via:
//
//          TestSpecConfigArgs{...}
//
//  or:
//
//          nil
type TestSpecConfigPtrInput interface {
	pulumi.Input

	ToTestSpecConfigPtrOutput() TestSpecConfigPtrOutput
	ToTestSpecConfigPtrOutputWithContext(context.Context) TestSpecConfigPtrOutput
}

type testSpecConfigPtrType TestSpecConfigArgs

func TestSpecConfigPtr(v *TestSpecConfigArgs) TestSpecConfigPtrInput {
	return (*testSpecConfigPtrType)(v)
}

func (*testSpecConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TestSpecConfig)(nil)).Elem()
}

func (i *testSpecConfigPtrType) ToTestSpecConfigPtrOutput() TestSpecConfigPtrOutput {
	return i.ToTestSpecConfigPtrOutputWithContext(context.Background())
}

func (i *testSpecConfigPtrType) ToTestSpecConfigPtrOutputWithContext(ctx context.Context) TestSpecConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSpecConfigPtrOutput)
}

// SettingsSpec--
type TestSpecConfigOutput struct{ *pulumi.OutputState }

func (TestSpecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestSpecConfig)(nil)).Elem()
}

func (o TestSpecConfigOutput) ToTestSpecConfigOutput() TestSpecConfigOutput {
	return o
}

func (o TestSpecConfigOutput) ToTestSpecConfigOutputWithContext(ctx context.Context) TestSpecConfigOutput {
	return o
}

func (o TestSpecConfigOutput) ToTestSpecConfigPtrOutput() TestSpecConfigPtrOutput {
	return o.ToTestSpecConfigPtrOutputWithContext(context.Background())
}

func (o TestSpecConfigOutput) ToTestSpecConfigPtrOutputWithContext(ctx context.Context) TestSpecConfigPtrOutput {
	return o.ApplyT(func(v TestSpecConfig) *TestSpecConfig {
		return &v
	}).(TestSpecConfigPtrOutput)
}
func (o TestSpecConfigOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestSpecConfig) *string { return v.Content }).(pulumi.StringPtrOutput)
}

func (o TestSpecConfigOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestSpecConfig) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TestSpecConfigPtrOutput struct{ *pulumi.OutputState }

func (TestSpecConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestSpecConfig)(nil)).Elem()
}

func (o TestSpecConfigPtrOutput) ToTestSpecConfigPtrOutput() TestSpecConfigPtrOutput {
	return o
}

func (o TestSpecConfigPtrOutput) ToTestSpecConfigPtrOutputWithContext(ctx context.Context) TestSpecConfigPtrOutput {
	return o
}

func (o TestSpecConfigPtrOutput) Elem() TestSpecConfigOutput {
	return o.ApplyT(func(v *TestSpecConfig) TestSpecConfig { return *v }).(TestSpecConfigOutput)
}

func (o TestSpecConfigPtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestSpecConfig) *string {
		if v == nil {
			return nil
		}
		return v.Content
	}).(pulumi.StringPtrOutput)
}

func (o TestSpecConfigPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestSpecConfig) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ResourceSpec--
type TestSpecResources struct {
	Content *string `pulumi:"content"`
	Name    *string `pulumi:"name"`
}

// TestSpecResourcesInput is an input type that accepts TestSpecResourcesArgs and TestSpecResourcesOutput values.
// You can construct a concrete instance of `TestSpecResourcesInput` via:
//
//          TestSpecResourcesArgs{...}
type TestSpecResourcesInput interface {
	pulumi.Input

	ToTestSpecResourcesOutput() TestSpecResourcesOutput
	ToTestSpecResourcesOutputWithContext(context.Context) TestSpecResourcesOutput
}

// ResourceSpec--
type TestSpecResourcesArgs struct {
	Content pulumi.StringPtrInput `pulumi:"content"`
	Name    pulumi.StringPtrInput `pulumi:"name"`
}

func (TestSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestSpecResources)(nil)).Elem()
}

func (i TestSpecResourcesArgs) ToTestSpecResourcesOutput() TestSpecResourcesOutput {
	return i.ToTestSpecResourcesOutputWithContext(context.Background())
}

func (i TestSpecResourcesArgs) ToTestSpecResourcesOutputWithContext(ctx context.Context) TestSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSpecResourcesOutput)
}

// TestSpecResourcesArrayInput is an input type that accepts TestSpecResourcesArray and TestSpecResourcesArrayOutput values.
// You can construct a concrete instance of `TestSpecResourcesArrayInput` via:
//
//          TestSpecResourcesArray{ TestSpecResourcesArgs{...} }
type TestSpecResourcesArrayInput interface {
	pulumi.Input

	ToTestSpecResourcesArrayOutput() TestSpecResourcesArrayOutput
	ToTestSpecResourcesArrayOutputWithContext(context.Context) TestSpecResourcesArrayOutput
}

type TestSpecResourcesArray []TestSpecResourcesInput

func (TestSpecResourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TestSpecResources)(nil)).Elem()
}

func (i TestSpecResourcesArray) ToTestSpecResourcesArrayOutput() TestSpecResourcesArrayOutput {
	return i.ToTestSpecResourcesArrayOutputWithContext(context.Background())
}

func (i TestSpecResourcesArray) ToTestSpecResourcesArrayOutputWithContext(ctx context.Context) TestSpecResourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSpecResourcesArrayOutput)
}

// ResourceSpec--
type TestSpecResourcesOutput struct{ *pulumi.OutputState }

func (TestSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestSpecResources)(nil)).Elem()
}

func (o TestSpecResourcesOutput) ToTestSpecResourcesOutput() TestSpecResourcesOutput {
	return o
}

func (o TestSpecResourcesOutput) ToTestSpecResourcesOutputWithContext(ctx context.Context) TestSpecResourcesOutput {
	return o
}

func (o TestSpecResourcesOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestSpecResources) *string { return v.Content }).(pulumi.StringPtrOutput)
}

func (o TestSpecResourcesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestSpecResources) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TestSpecResourcesArrayOutput struct{ *pulumi.OutputState }

func (TestSpecResourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TestSpecResources)(nil)).Elem()
}

func (o TestSpecResourcesArrayOutput) ToTestSpecResourcesArrayOutput() TestSpecResourcesArrayOutput {
	return o
}

func (o TestSpecResourcesArrayOutput) ToTestSpecResourcesArrayOutputWithContext(ctx context.Context) TestSpecResourcesArrayOutput {
	return o
}

func (o TestSpecResourcesArrayOutput) Index(i pulumi.IntInput) TestSpecResourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TestSpecResources {
		return vs[0].([]TestSpecResources)[vs[1].(int)]
	}).(TestSpecResourcesOutput)
}

// SourceSpec--
type TestSpecSource struct {
	Content  *string `pulumi:"content"`
	Language *string `pulumi:"language"`
	Name     *string `pulumi:"name"`
}

// TestSpecSourceInput is an input type that accepts TestSpecSourceArgs and TestSpecSourceOutput values.
// You can construct a concrete instance of `TestSpecSourceInput` via:
//
//          TestSpecSourceArgs{...}
type TestSpecSourceInput interface {
	pulumi.Input

	ToTestSpecSourceOutput() TestSpecSourceOutput
	ToTestSpecSourceOutputWithContext(context.Context) TestSpecSourceOutput
}

// SourceSpec--
type TestSpecSourceArgs struct {
	Content  pulumi.StringPtrInput `pulumi:"content"`
	Language pulumi.StringPtrInput `pulumi:"language"`
	Name     pulumi.StringPtrInput `pulumi:"name"`
}

func (TestSpecSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestSpecSource)(nil)).Elem()
}

func (i TestSpecSourceArgs) ToTestSpecSourceOutput() TestSpecSourceOutput {
	return i.ToTestSpecSourceOutputWithContext(context.Background())
}

func (i TestSpecSourceArgs) ToTestSpecSourceOutputWithContext(ctx context.Context) TestSpecSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSpecSourceOutput)
}

func (i TestSpecSourceArgs) ToTestSpecSourcePtrOutput() TestSpecSourcePtrOutput {
	return i.ToTestSpecSourcePtrOutputWithContext(context.Background())
}

func (i TestSpecSourceArgs) ToTestSpecSourcePtrOutputWithContext(ctx context.Context) TestSpecSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSpecSourceOutput).ToTestSpecSourcePtrOutputWithContext(ctx)
}

// TestSpecSourcePtrInput is an input type that accepts TestSpecSourceArgs, TestSpecSourcePtr and TestSpecSourcePtrOutput values.
// You can construct a concrete instance of `TestSpecSourcePtrInput` via:
//
//          TestSpecSourceArgs{...}
//
//  or:
//
//          nil
type TestSpecSourcePtrInput interface {
	pulumi.Input

	ToTestSpecSourcePtrOutput() TestSpecSourcePtrOutput
	ToTestSpecSourcePtrOutputWithContext(context.Context) TestSpecSourcePtrOutput
}

type testSpecSourcePtrType TestSpecSourceArgs

func TestSpecSourcePtr(v *TestSpecSourceArgs) TestSpecSourcePtrInput {
	return (*testSpecSourcePtrType)(v)
}

func (*testSpecSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TestSpecSource)(nil)).Elem()
}

func (i *testSpecSourcePtrType) ToTestSpecSourcePtrOutput() TestSpecSourcePtrOutput {
	return i.ToTestSpecSourcePtrOutputWithContext(context.Background())
}

func (i *testSpecSourcePtrType) ToTestSpecSourcePtrOutputWithContext(ctx context.Context) TestSpecSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestSpecSourcePtrOutput)
}

// SourceSpec--
type TestSpecSourceOutput struct{ *pulumi.OutputState }

func (TestSpecSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestSpecSource)(nil)).Elem()
}

func (o TestSpecSourceOutput) ToTestSpecSourceOutput() TestSpecSourceOutput {
	return o
}

func (o TestSpecSourceOutput) ToTestSpecSourceOutputWithContext(ctx context.Context) TestSpecSourceOutput {
	return o
}

func (o TestSpecSourceOutput) ToTestSpecSourcePtrOutput() TestSpecSourcePtrOutput {
	return o.ToTestSpecSourcePtrOutputWithContext(context.Background())
}

func (o TestSpecSourceOutput) ToTestSpecSourcePtrOutputWithContext(ctx context.Context) TestSpecSourcePtrOutput {
	return o.ApplyT(func(v TestSpecSource) *TestSpecSource {
		return &v
	}).(TestSpecSourcePtrOutput)
}
func (o TestSpecSourceOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestSpecSource) *string { return v.Content }).(pulumi.StringPtrOutput)
}

func (o TestSpecSourceOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestSpecSource) *string { return v.Language }).(pulumi.StringPtrOutput)
}

func (o TestSpecSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestSpecSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TestSpecSourcePtrOutput struct{ *pulumi.OutputState }

func (TestSpecSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestSpecSource)(nil)).Elem()
}

func (o TestSpecSourcePtrOutput) ToTestSpecSourcePtrOutput() TestSpecSourcePtrOutput {
	return o
}

func (o TestSpecSourcePtrOutput) ToTestSpecSourcePtrOutputWithContext(ctx context.Context) TestSpecSourcePtrOutput {
	return o
}

func (o TestSpecSourcePtrOutput) Elem() TestSpecSourceOutput {
	return o.ApplyT(func(v *TestSpecSource) TestSpecSource { return *v }).(TestSpecSourceOutput)
}

func (o TestSpecSourcePtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestSpecSource) *string {
		if v == nil {
			return nil
		}
		return v.Content
	}).(pulumi.StringPtrOutput)
}

func (o TestSpecSourcePtrOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestSpecSource) *string {
		if v == nil {
			return nil
		}
		return v.Language
	}).(pulumi.StringPtrOutput)
}

func (o TestSpecSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestSpecSource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// TestStatus defines the observed state of Test
type TestStatus struct {
	Digest *string `pulumi:"digest"`
	Errors *string `pulumi:"errors"`
	// TestPhase
	Phase   *string            `pulumi:"phase"`
	Results *TestStatusResults `pulumi:"results"`
	TestID  *string            `pulumi:"testID"`
	Version *string            `pulumi:"version"`
}

// TestStatusInput is an input type that accepts TestStatusArgs and TestStatusOutput values.
// You can construct a concrete instance of `TestStatusInput` via:
//
//          TestStatusArgs{...}
type TestStatusInput interface {
	pulumi.Input

	ToTestStatusOutput() TestStatusOutput
	ToTestStatusOutputWithContext(context.Context) TestStatusOutput
}

// TestStatus defines the observed state of Test
type TestStatusArgs struct {
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	Errors pulumi.StringPtrInput `pulumi:"errors"`
	// TestPhase
	Phase   pulumi.StringPtrInput     `pulumi:"phase"`
	Results TestStatusResultsPtrInput `pulumi:"results"`
	TestID  pulumi.StringPtrInput     `pulumi:"testID"`
	Version pulumi.StringPtrInput     `pulumi:"version"`
}

func (TestStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestStatus)(nil)).Elem()
}

func (i TestStatusArgs) ToTestStatusOutput() TestStatusOutput {
	return i.ToTestStatusOutputWithContext(context.Background())
}

func (i TestStatusArgs) ToTestStatusOutputWithContext(ctx context.Context) TestStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestStatusOutput)
}

func (i TestStatusArgs) ToTestStatusPtrOutput() TestStatusPtrOutput {
	return i.ToTestStatusPtrOutputWithContext(context.Background())
}

func (i TestStatusArgs) ToTestStatusPtrOutputWithContext(ctx context.Context) TestStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestStatusOutput).ToTestStatusPtrOutputWithContext(ctx)
}

// TestStatusPtrInput is an input type that accepts TestStatusArgs, TestStatusPtr and TestStatusPtrOutput values.
// You can construct a concrete instance of `TestStatusPtrInput` via:
//
//          TestStatusArgs{...}
//
//  or:
//
//          nil
type TestStatusPtrInput interface {
	pulumi.Input

	ToTestStatusPtrOutput() TestStatusPtrOutput
	ToTestStatusPtrOutputWithContext(context.Context) TestStatusPtrOutput
}

type testStatusPtrType TestStatusArgs

func TestStatusPtr(v *TestStatusArgs) TestStatusPtrInput {
	return (*testStatusPtrType)(v)
}

func (*testStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TestStatus)(nil)).Elem()
}

func (i *testStatusPtrType) ToTestStatusPtrOutput() TestStatusPtrOutput {
	return i.ToTestStatusPtrOutputWithContext(context.Background())
}

func (i *testStatusPtrType) ToTestStatusPtrOutputWithContext(ctx context.Context) TestStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestStatusPtrOutput)
}

// TestStatus defines the observed state of Test
type TestStatusOutput struct{ *pulumi.OutputState }

func (TestStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestStatus)(nil)).Elem()
}

func (o TestStatusOutput) ToTestStatusOutput() TestStatusOutput {
	return o
}

func (o TestStatusOutput) ToTestStatusOutputWithContext(ctx context.Context) TestStatusOutput {
	return o
}

func (o TestStatusOutput) ToTestStatusPtrOutput() TestStatusPtrOutput {
	return o.ToTestStatusPtrOutputWithContext(context.Background())
}

func (o TestStatusOutput) ToTestStatusPtrOutputWithContext(ctx context.Context) TestStatusPtrOutput {
	return o.ApplyT(func(v TestStatus) *TestStatus {
		return &v
	}).(TestStatusPtrOutput)
}
func (o TestStatusOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestStatus) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

func (o TestStatusOutput) Errors() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestStatus) *string { return v.Errors }).(pulumi.StringPtrOutput)
}

// TestPhase
func (o TestStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

func (o TestStatusOutput) Results() TestStatusResultsPtrOutput {
	return o.ApplyT(func(v TestStatus) *TestStatusResults { return v.Results }).(TestStatusResultsPtrOutput)
}

func (o TestStatusOutput) TestID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestStatus) *string { return v.TestID }).(pulumi.StringPtrOutput)
}

func (o TestStatusOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestStatus) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type TestStatusPtrOutput struct{ *pulumi.OutputState }

func (TestStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestStatus)(nil)).Elem()
}

func (o TestStatusPtrOutput) ToTestStatusPtrOutput() TestStatusPtrOutput {
	return o
}

func (o TestStatusPtrOutput) ToTestStatusPtrOutputWithContext(ctx context.Context) TestStatusPtrOutput {
	return o
}

func (o TestStatusPtrOutput) Elem() TestStatusOutput {
	return o.ApplyT(func(v *TestStatus) TestStatus { return *v }).(TestStatusOutput)
}

func (o TestStatusPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestStatus) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

func (o TestStatusPtrOutput) Errors() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestStatus) *string {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(pulumi.StringPtrOutput)
}

// TestPhase
func (o TestStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

func (o TestStatusPtrOutput) Results() TestStatusResultsPtrOutput {
	return o.ApplyT(func(v *TestStatus) *TestStatusResults {
		if v == nil {
			return nil
		}
		return v.Results
	}).(TestStatusResultsPtrOutput)
}

func (o TestStatusPtrOutput) TestID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestStatus) *string {
		if v == nil {
			return nil
		}
		return v.TestID
	}).(pulumi.StringPtrOutput)
}

func (o TestStatusPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestStatus) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type TestStatusResults struct {
	Errors  []string                  `pulumi:"errors"`
	Summary *TestStatusResultsSummary `pulumi:"summary"`
	Tests   []TestStatusResultsTests  `pulumi:"tests"`
}

// TestStatusResultsInput is an input type that accepts TestStatusResultsArgs and TestStatusResultsOutput values.
// You can construct a concrete instance of `TestStatusResultsInput` via:
//
//          TestStatusResultsArgs{...}
type TestStatusResultsInput interface {
	pulumi.Input

	ToTestStatusResultsOutput() TestStatusResultsOutput
	ToTestStatusResultsOutputWithContext(context.Context) TestStatusResultsOutput
}

type TestStatusResultsArgs struct {
	Errors  pulumi.StringArrayInput          `pulumi:"errors"`
	Summary TestStatusResultsSummaryPtrInput `pulumi:"summary"`
	Tests   TestStatusResultsTestsArrayInput `pulumi:"tests"`
}

func (TestStatusResultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestStatusResults)(nil)).Elem()
}

func (i TestStatusResultsArgs) ToTestStatusResultsOutput() TestStatusResultsOutput {
	return i.ToTestStatusResultsOutputWithContext(context.Background())
}

func (i TestStatusResultsArgs) ToTestStatusResultsOutputWithContext(ctx context.Context) TestStatusResultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestStatusResultsOutput)
}

func (i TestStatusResultsArgs) ToTestStatusResultsPtrOutput() TestStatusResultsPtrOutput {
	return i.ToTestStatusResultsPtrOutputWithContext(context.Background())
}

func (i TestStatusResultsArgs) ToTestStatusResultsPtrOutputWithContext(ctx context.Context) TestStatusResultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestStatusResultsOutput).ToTestStatusResultsPtrOutputWithContext(ctx)
}

// TestStatusResultsPtrInput is an input type that accepts TestStatusResultsArgs, TestStatusResultsPtr and TestStatusResultsPtrOutput values.
// You can construct a concrete instance of `TestStatusResultsPtrInput` via:
//
//          TestStatusResultsArgs{...}
//
//  or:
//
//          nil
type TestStatusResultsPtrInput interface {
	pulumi.Input

	ToTestStatusResultsPtrOutput() TestStatusResultsPtrOutput
	ToTestStatusResultsPtrOutputWithContext(context.Context) TestStatusResultsPtrOutput
}

type testStatusResultsPtrType TestStatusResultsArgs

func TestStatusResultsPtr(v *TestStatusResultsArgs) TestStatusResultsPtrInput {
	return (*testStatusResultsPtrType)(v)
}

func (*testStatusResultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TestStatusResults)(nil)).Elem()
}

func (i *testStatusResultsPtrType) ToTestStatusResultsPtrOutput() TestStatusResultsPtrOutput {
	return i.ToTestStatusResultsPtrOutputWithContext(context.Background())
}

func (i *testStatusResultsPtrType) ToTestStatusResultsPtrOutputWithContext(ctx context.Context) TestStatusResultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestStatusResultsPtrOutput)
}

type TestStatusResultsOutput struct{ *pulumi.OutputState }

func (TestStatusResultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestStatusResults)(nil)).Elem()
}

func (o TestStatusResultsOutput) ToTestStatusResultsOutput() TestStatusResultsOutput {
	return o
}

func (o TestStatusResultsOutput) ToTestStatusResultsOutputWithContext(ctx context.Context) TestStatusResultsOutput {
	return o
}

func (o TestStatusResultsOutput) ToTestStatusResultsPtrOutput() TestStatusResultsPtrOutput {
	return o.ToTestStatusResultsPtrOutputWithContext(context.Background())
}

func (o TestStatusResultsOutput) ToTestStatusResultsPtrOutputWithContext(ctx context.Context) TestStatusResultsPtrOutput {
	return o.ApplyT(func(v TestStatusResults) *TestStatusResults {
		return &v
	}).(TestStatusResultsPtrOutput)
}
func (o TestStatusResultsOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TestStatusResults) []string { return v.Errors }).(pulumi.StringArrayOutput)
}

func (o TestStatusResultsOutput) Summary() TestStatusResultsSummaryPtrOutput {
	return o.ApplyT(func(v TestStatusResults) *TestStatusResultsSummary { return v.Summary }).(TestStatusResultsSummaryPtrOutput)
}

func (o TestStatusResultsOutput) Tests() TestStatusResultsTestsArrayOutput {
	return o.ApplyT(func(v TestStatusResults) []TestStatusResultsTests { return v.Tests }).(TestStatusResultsTestsArrayOutput)
}

type TestStatusResultsPtrOutput struct{ *pulumi.OutputState }

func (TestStatusResultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestStatusResults)(nil)).Elem()
}

func (o TestStatusResultsPtrOutput) ToTestStatusResultsPtrOutput() TestStatusResultsPtrOutput {
	return o
}

func (o TestStatusResultsPtrOutput) ToTestStatusResultsPtrOutputWithContext(ctx context.Context) TestStatusResultsPtrOutput {
	return o
}

func (o TestStatusResultsPtrOutput) Elem() TestStatusResultsOutput {
	return o.ApplyT(func(v *TestStatusResults) TestStatusResults { return *v }).(TestStatusResultsOutput)
}

func (o TestStatusResultsPtrOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TestStatusResults) []string {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(pulumi.StringArrayOutput)
}

func (o TestStatusResultsPtrOutput) Summary() TestStatusResultsSummaryPtrOutput {
	return o.ApplyT(func(v *TestStatusResults) *TestStatusResultsSummary {
		if v == nil {
			return nil
		}
		return v.Summary
	}).(TestStatusResultsSummaryPtrOutput)
}

func (o TestStatusResultsPtrOutput) Tests() TestStatusResultsTestsArrayOutput {
	return o.ApplyT(func(v *TestStatusResults) []TestStatusResultsTests {
		if v == nil {
			return nil
		}
		return v.Tests
	}).(TestStatusResultsTestsArrayOutput)
}

type TestStatusResultsSummary struct {
	Failed    int `pulumi:"failed"`
	Passed    int `pulumi:"passed"`
	Pending   int `pulumi:"pending"`
	Skipped   int `pulumi:"skipped"`
	Total     int `pulumi:"total"`
	Undefined int `pulumi:"undefined"`
}

// TestStatusResultsSummaryInput is an input type that accepts TestStatusResultsSummaryArgs and TestStatusResultsSummaryOutput values.
// You can construct a concrete instance of `TestStatusResultsSummaryInput` via:
//
//          TestStatusResultsSummaryArgs{...}
type TestStatusResultsSummaryInput interface {
	pulumi.Input

	ToTestStatusResultsSummaryOutput() TestStatusResultsSummaryOutput
	ToTestStatusResultsSummaryOutputWithContext(context.Context) TestStatusResultsSummaryOutput
}

type TestStatusResultsSummaryArgs struct {
	Failed    pulumi.IntInput `pulumi:"failed"`
	Passed    pulumi.IntInput `pulumi:"passed"`
	Pending   pulumi.IntInput `pulumi:"pending"`
	Skipped   pulumi.IntInput `pulumi:"skipped"`
	Total     pulumi.IntInput `pulumi:"total"`
	Undefined pulumi.IntInput `pulumi:"undefined"`
}

func (TestStatusResultsSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestStatusResultsSummary)(nil)).Elem()
}

func (i TestStatusResultsSummaryArgs) ToTestStatusResultsSummaryOutput() TestStatusResultsSummaryOutput {
	return i.ToTestStatusResultsSummaryOutputWithContext(context.Background())
}

func (i TestStatusResultsSummaryArgs) ToTestStatusResultsSummaryOutputWithContext(ctx context.Context) TestStatusResultsSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestStatusResultsSummaryOutput)
}

func (i TestStatusResultsSummaryArgs) ToTestStatusResultsSummaryPtrOutput() TestStatusResultsSummaryPtrOutput {
	return i.ToTestStatusResultsSummaryPtrOutputWithContext(context.Background())
}

func (i TestStatusResultsSummaryArgs) ToTestStatusResultsSummaryPtrOutputWithContext(ctx context.Context) TestStatusResultsSummaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestStatusResultsSummaryOutput).ToTestStatusResultsSummaryPtrOutputWithContext(ctx)
}

// TestStatusResultsSummaryPtrInput is an input type that accepts TestStatusResultsSummaryArgs, TestStatusResultsSummaryPtr and TestStatusResultsSummaryPtrOutput values.
// You can construct a concrete instance of `TestStatusResultsSummaryPtrInput` via:
//
//          TestStatusResultsSummaryArgs{...}
//
//  or:
//
//          nil
type TestStatusResultsSummaryPtrInput interface {
	pulumi.Input

	ToTestStatusResultsSummaryPtrOutput() TestStatusResultsSummaryPtrOutput
	ToTestStatusResultsSummaryPtrOutputWithContext(context.Context) TestStatusResultsSummaryPtrOutput
}

type testStatusResultsSummaryPtrType TestStatusResultsSummaryArgs

func TestStatusResultsSummaryPtr(v *TestStatusResultsSummaryArgs) TestStatusResultsSummaryPtrInput {
	return (*testStatusResultsSummaryPtrType)(v)
}

func (*testStatusResultsSummaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TestStatusResultsSummary)(nil)).Elem()
}

func (i *testStatusResultsSummaryPtrType) ToTestStatusResultsSummaryPtrOutput() TestStatusResultsSummaryPtrOutput {
	return i.ToTestStatusResultsSummaryPtrOutputWithContext(context.Background())
}

func (i *testStatusResultsSummaryPtrType) ToTestStatusResultsSummaryPtrOutputWithContext(ctx context.Context) TestStatusResultsSummaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestStatusResultsSummaryPtrOutput)
}

type TestStatusResultsSummaryOutput struct{ *pulumi.OutputState }

func (TestStatusResultsSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestStatusResultsSummary)(nil)).Elem()
}

func (o TestStatusResultsSummaryOutput) ToTestStatusResultsSummaryOutput() TestStatusResultsSummaryOutput {
	return o
}

func (o TestStatusResultsSummaryOutput) ToTestStatusResultsSummaryOutputWithContext(ctx context.Context) TestStatusResultsSummaryOutput {
	return o
}

func (o TestStatusResultsSummaryOutput) ToTestStatusResultsSummaryPtrOutput() TestStatusResultsSummaryPtrOutput {
	return o.ToTestStatusResultsSummaryPtrOutputWithContext(context.Background())
}

func (o TestStatusResultsSummaryOutput) ToTestStatusResultsSummaryPtrOutputWithContext(ctx context.Context) TestStatusResultsSummaryPtrOutput {
	return o.ApplyT(func(v TestStatusResultsSummary) *TestStatusResultsSummary {
		return &v
	}).(TestStatusResultsSummaryPtrOutput)
}
func (o TestStatusResultsSummaryOutput) Failed() pulumi.IntOutput {
	return o.ApplyT(func(v TestStatusResultsSummary) int { return v.Failed }).(pulumi.IntOutput)
}

func (o TestStatusResultsSummaryOutput) Passed() pulumi.IntOutput {
	return o.ApplyT(func(v TestStatusResultsSummary) int { return v.Passed }).(pulumi.IntOutput)
}

func (o TestStatusResultsSummaryOutput) Pending() pulumi.IntOutput {
	return o.ApplyT(func(v TestStatusResultsSummary) int { return v.Pending }).(pulumi.IntOutput)
}

func (o TestStatusResultsSummaryOutput) Skipped() pulumi.IntOutput {
	return o.ApplyT(func(v TestStatusResultsSummary) int { return v.Skipped }).(pulumi.IntOutput)
}

func (o TestStatusResultsSummaryOutput) Total() pulumi.IntOutput {
	return o.ApplyT(func(v TestStatusResultsSummary) int { return v.Total }).(pulumi.IntOutput)
}

func (o TestStatusResultsSummaryOutput) Undefined() pulumi.IntOutput {
	return o.ApplyT(func(v TestStatusResultsSummary) int { return v.Undefined }).(pulumi.IntOutput)
}

type TestStatusResultsSummaryPtrOutput struct{ *pulumi.OutputState }

func (TestStatusResultsSummaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestStatusResultsSummary)(nil)).Elem()
}

func (o TestStatusResultsSummaryPtrOutput) ToTestStatusResultsSummaryPtrOutput() TestStatusResultsSummaryPtrOutput {
	return o
}

func (o TestStatusResultsSummaryPtrOutput) ToTestStatusResultsSummaryPtrOutputWithContext(ctx context.Context) TestStatusResultsSummaryPtrOutput {
	return o
}

func (o TestStatusResultsSummaryPtrOutput) Elem() TestStatusResultsSummaryOutput {
	return o.ApplyT(func(v *TestStatusResultsSummary) TestStatusResultsSummary { return *v }).(TestStatusResultsSummaryOutput)
}

func (o TestStatusResultsSummaryPtrOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TestStatusResultsSummary) *int {
		if v == nil {
			return nil
		}
		return &v.Failed
	}).(pulumi.IntPtrOutput)
}

func (o TestStatusResultsSummaryPtrOutput) Passed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TestStatusResultsSummary) *int {
		if v == nil {
			return nil
		}
		return &v.Passed
	}).(pulumi.IntPtrOutput)
}

func (o TestStatusResultsSummaryPtrOutput) Pending() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TestStatusResultsSummary) *int {
		if v == nil {
			return nil
		}
		return &v.Pending
	}).(pulumi.IntPtrOutput)
}

func (o TestStatusResultsSummaryPtrOutput) Skipped() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TestStatusResultsSummary) *int {
		if v == nil {
			return nil
		}
		return &v.Skipped
	}).(pulumi.IntPtrOutput)
}

func (o TestStatusResultsSummaryPtrOutput) Total() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TestStatusResultsSummary) *int {
		if v == nil {
			return nil
		}
		return &v.Total
	}).(pulumi.IntPtrOutput)
}

func (o TestStatusResultsSummaryPtrOutput) Undefined() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TestStatusResultsSummary) *int {
		if v == nil {
			return nil
		}
		return &v.Undefined
	}).(pulumi.IntPtrOutput)
}

type TestStatusResultsTests struct {
	Classname    *string `pulumi:"classname"`
	ErrorMessage *string `pulumi:"errorMessage"`
	ErrorType    *string `pulumi:"errorType"`
	Name         *string `pulumi:"name"`
}

// TestStatusResultsTestsInput is an input type that accepts TestStatusResultsTestsArgs and TestStatusResultsTestsOutput values.
// You can construct a concrete instance of `TestStatusResultsTestsInput` via:
//
//          TestStatusResultsTestsArgs{...}
type TestStatusResultsTestsInput interface {
	pulumi.Input

	ToTestStatusResultsTestsOutput() TestStatusResultsTestsOutput
	ToTestStatusResultsTestsOutputWithContext(context.Context) TestStatusResultsTestsOutput
}

type TestStatusResultsTestsArgs struct {
	Classname    pulumi.StringPtrInput `pulumi:"classname"`
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	ErrorType    pulumi.StringPtrInput `pulumi:"errorType"`
	Name         pulumi.StringPtrInput `pulumi:"name"`
}

func (TestStatusResultsTestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestStatusResultsTests)(nil)).Elem()
}

func (i TestStatusResultsTestsArgs) ToTestStatusResultsTestsOutput() TestStatusResultsTestsOutput {
	return i.ToTestStatusResultsTestsOutputWithContext(context.Background())
}

func (i TestStatusResultsTestsArgs) ToTestStatusResultsTestsOutputWithContext(ctx context.Context) TestStatusResultsTestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestStatusResultsTestsOutput)
}

// TestStatusResultsTestsArrayInput is an input type that accepts TestStatusResultsTestsArray and TestStatusResultsTestsArrayOutput values.
// You can construct a concrete instance of `TestStatusResultsTestsArrayInput` via:
//
//          TestStatusResultsTestsArray{ TestStatusResultsTestsArgs{...} }
type TestStatusResultsTestsArrayInput interface {
	pulumi.Input

	ToTestStatusResultsTestsArrayOutput() TestStatusResultsTestsArrayOutput
	ToTestStatusResultsTestsArrayOutputWithContext(context.Context) TestStatusResultsTestsArrayOutput
}

type TestStatusResultsTestsArray []TestStatusResultsTestsInput

func (TestStatusResultsTestsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TestStatusResultsTests)(nil)).Elem()
}

func (i TestStatusResultsTestsArray) ToTestStatusResultsTestsArrayOutput() TestStatusResultsTestsArrayOutput {
	return i.ToTestStatusResultsTestsArrayOutputWithContext(context.Background())
}

func (i TestStatusResultsTestsArray) ToTestStatusResultsTestsArrayOutputWithContext(ctx context.Context) TestStatusResultsTestsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestStatusResultsTestsArrayOutput)
}

type TestStatusResultsTestsOutput struct{ *pulumi.OutputState }

func (TestStatusResultsTestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestStatusResultsTests)(nil)).Elem()
}

func (o TestStatusResultsTestsOutput) ToTestStatusResultsTestsOutput() TestStatusResultsTestsOutput {
	return o
}

func (o TestStatusResultsTestsOutput) ToTestStatusResultsTestsOutputWithContext(ctx context.Context) TestStatusResultsTestsOutput {
	return o
}

func (o TestStatusResultsTestsOutput) Classname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestStatusResultsTests) *string { return v.Classname }).(pulumi.StringPtrOutput)
}

func (o TestStatusResultsTestsOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestStatusResultsTests) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

func (o TestStatusResultsTestsOutput) ErrorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestStatusResultsTests) *string { return v.ErrorType }).(pulumi.StringPtrOutput)
}

func (o TestStatusResultsTestsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TestStatusResultsTests) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TestStatusResultsTestsArrayOutput struct{ *pulumi.OutputState }

func (TestStatusResultsTestsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TestStatusResultsTests)(nil)).Elem()
}

func (o TestStatusResultsTestsArrayOutput) ToTestStatusResultsTestsArrayOutput() TestStatusResultsTestsArrayOutput {
	return o
}

func (o TestStatusResultsTestsArrayOutput) ToTestStatusResultsTestsArrayOutputWithContext(ctx context.Context) TestStatusResultsTestsArrayOutput {
	return o
}

func (o TestStatusResultsTestsArrayOutput) Index(i pulumi.IntInput) TestStatusResultsTestsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TestStatusResultsTests {
		return vs[0].([]TestStatusResultsTests)[vs[1].(int)]
	}).(TestStatusResultsTestsOutput)
}

func init() {
	pulumi.RegisterOutputType(TestTypeOutput{})
	pulumi.RegisterOutputType(TestMetadataOutput{})
	pulumi.RegisterOutputType(TestSpecOutput{})
	pulumi.RegisterOutputType(TestSpecPtrOutput{})
	pulumi.RegisterOutputType(TestSpecConfigOutput{})
	pulumi.RegisterOutputType(TestSpecConfigPtrOutput{})
	pulumi.RegisterOutputType(TestSpecResourcesOutput{})
	pulumi.RegisterOutputType(TestSpecResourcesArrayOutput{})
	pulumi.RegisterOutputType(TestSpecSourceOutput{})
	pulumi.RegisterOutputType(TestSpecSourcePtrOutput{})
	pulumi.RegisterOutputType(TestStatusOutput{})
	pulumi.RegisterOutputType(TestStatusPtrOutput{})
	pulumi.RegisterOutputType(TestStatusResultsOutput{})
	pulumi.RegisterOutputType(TestStatusResultsPtrOutput{})
	pulumi.RegisterOutputType(TestStatusResultsSummaryOutput{})
	pulumi.RegisterOutputType(TestStatusResultsSummaryPtrOutput{})
	pulumi.RegisterOutputType(TestStatusResultsTestsOutput{})
	pulumi.RegisterOutputType(TestStatusResultsTestsArrayOutput{})
}

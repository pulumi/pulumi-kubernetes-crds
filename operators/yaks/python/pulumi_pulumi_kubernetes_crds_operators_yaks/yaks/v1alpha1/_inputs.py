# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'TestSpecArgs',
    'TestSpecConfigArgs',
    'TestSpecResourcesArgs',
    'TestSpecSourceArgs',
    'TestStatusArgs',
    'TestStatusResultsArgs',
    'TestStatusResultsSummaryArgs',
    'TestStatusResultsTestsArgs',
]

@pulumi.input_type
class TestSpecArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['TestSpecConfigArgs']] = None,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['TestSpecResourcesArgs']]]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input['TestSpecSourceArgs']] = None):
        """
        TestSpec defines the desired state of Test
        :param pulumi.Input['TestSpecConfigArgs'] config: SettingsSpec--
        :param pulumi.Input['TestSpecSourceArgs'] source: SourceSpec--
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['TestSpecConfigArgs']]:
        """
        SettingsSpec--
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['TestSpecConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TestSpecResourcesArgs']]]]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TestSpecResourcesArgs']]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['TestSpecSourceArgs']]:
        """
        SourceSpec--
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['TestSpecSourceArgs']]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class TestSpecConfigArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        SettingsSpec--
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TestSpecResourcesArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        ResourceSpec--
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TestSpecSourceArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        SourceSpec--
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TestStatusArgs:
    def __init__(__self__, *,
                 digest: Optional[pulumi.Input[str]] = None,
                 errors: Optional[pulumi.Input[str]] = None,
                 phase: Optional[pulumi.Input[str]] = None,
                 results: Optional[pulumi.Input['TestStatusResultsArgs']] = None,
                 test_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        TestStatus defines the observed state of Test
        :param pulumi.Input[str] phase: TestPhase
        """
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if results is not None:
            pulumi.set(__self__, "results", results)
        if test_id is not None:
            pulumi.set(__self__, "test_id", test_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter
    def errors(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "errors", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[pulumi.Input[str]]:
        """
        TestPhase
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter
    def results(self) -> Optional[pulumi.Input['TestStatusResultsArgs']]:
        return pulumi.get(self, "results")

    @results.setter
    def results(self, value: Optional[pulumi.Input['TestStatusResultsArgs']]):
        pulumi.set(self, "results", value)

    @property
    @pulumi.getter(name="testID")
    def test_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "test_id")

    @test_id.setter
    def test_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class TestStatusResultsArgs:
    def __init__(__self__, *,
                 errors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 summary: Optional[pulumi.Input['TestStatusResultsSummaryArgs']] = None,
                 tests: Optional[pulumi.Input[Sequence[pulumi.Input['TestStatusResultsTestsArgs']]]] = None):
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if tests is not None:
            pulumi.set(__self__, "tests", tests)

    @property
    @pulumi.getter
    def errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "errors", value)

    @property
    @pulumi.getter
    def summary(self) -> Optional[pulumi.Input['TestStatusResultsSummaryArgs']]:
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: Optional[pulumi.Input['TestStatusResultsSummaryArgs']]):
        pulumi.set(self, "summary", value)

    @property
    @pulumi.getter
    def tests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TestStatusResultsTestsArgs']]]]:
        return pulumi.get(self, "tests")

    @tests.setter
    def tests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TestStatusResultsTestsArgs']]]]):
        pulumi.set(self, "tests", value)


@pulumi.input_type
class TestStatusResultsSummaryArgs:
    def __init__(__self__, *,
                 failed: pulumi.Input[int],
                 passed: pulumi.Input[int],
                 pending: pulumi.Input[int],
                 skipped: pulumi.Input[int],
                 total: pulumi.Input[int],
                 undefined: pulumi.Input[int]):
        pulumi.set(__self__, "failed", failed)
        pulumi.set(__self__, "passed", passed)
        pulumi.set(__self__, "pending", pending)
        pulumi.set(__self__, "skipped", skipped)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "undefined", undefined)

    @property
    @pulumi.getter
    def failed(self) -> pulumi.Input[int]:
        return pulumi.get(self, "failed")

    @failed.setter
    def failed(self, value: pulumi.Input[int]):
        pulumi.set(self, "failed", value)

    @property
    @pulumi.getter
    def passed(self) -> pulumi.Input[int]:
        return pulumi.get(self, "passed")

    @passed.setter
    def passed(self, value: pulumi.Input[int]):
        pulumi.set(self, "passed", value)

    @property
    @pulumi.getter
    def pending(self) -> pulumi.Input[int]:
        return pulumi.get(self, "pending")

    @pending.setter
    def pending(self, value: pulumi.Input[int]):
        pulumi.set(self, "pending", value)

    @property
    @pulumi.getter
    def skipped(self) -> pulumi.Input[int]:
        return pulumi.get(self, "skipped")

    @skipped.setter
    def skipped(self, value: pulumi.Input[int]):
        pulumi.set(self, "skipped", value)

    @property
    @pulumi.getter
    def total(self) -> pulumi.Input[int]:
        return pulumi.get(self, "total")

    @total.setter
    def total(self, value: pulumi.Input[int]):
        pulumi.set(self, "total", value)

    @property
    @pulumi.getter
    def undefined(self) -> pulumi.Input[int]:
        return pulumi.get(self, "undefined")

    @undefined.setter
    def undefined(self, value: pulumi.Input[int]):
        pulumi.set(self, "undefined", value)


@pulumi.input_type
class TestStatusResultsTestsArgs:
    def __init__(__self__, *,
                 classname: Optional[pulumi.Input[str]] = None,
                 error_message: Optional[pulumi.Input[str]] = None,
                 error_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if classname is not None:
            pulumi.set(__self__, "classname", classname)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if error_type is not None:
            pulumi.set(__self__, "error_type", error_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def classname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "classname")

    @classname.setter
    def classname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "classname", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_type")

    @error_type.setter
    def error_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)



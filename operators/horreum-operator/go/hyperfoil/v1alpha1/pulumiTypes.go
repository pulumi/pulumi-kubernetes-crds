// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Horreum is the object configuring Horreum performance results repository
type HorreumType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// HorreumSpec defines the desired state of Horreum
	Spec *HorreumSpec `pulumi:"spec"`
	// HorreumStatus defines the observed state of Horreum
	Status *HorreumStatus `pulumi:"status"`
}

// HorreumTypeInput is an input type that accepts HorreumTypeArgs and HorreumTypeOutput values.
// You can construct a concrete instance of `HorreumTypeInput` via:
//
//          HorreumTypeArgs{...}
type HorreumTypeInput interface {
	pulumi.Input

	ToHorreumTypeOutput() HorreumTypeOutput
	ToHorreumTypeOutputWithContext(context.Context) HorreumTypeOutput
}

// Horreum is the object configuring Horreum performance results repository
type HorreumTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// HorreumSpec defines the desired state of Horreum
	Spec HorreumSpecPtrInput `pulumi:"spec"`
	// HorreumStatus defines the observed state of Horreum
	Status HorreumStatusPtrInput `pulumi:"status"`
}

func (HorreumTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumType)(nil)).Elem()
}

func (i HorreumTypeArgs) ToHorreumTypeOutput() HorreumTypeOutput {
	return i.ToHorreumTypeOutputWithContext(context.Background())
}

func (i HorreumTypeArgs) ToHorreumTypeOutputWithContext(ctx context.Context) HorreumTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumTypeOutput)
}

// Horreum is the object configuring Horreum performance results repository
type HorreumTypeOutput struct{ *pulumi.OutputState }

func (HorreumTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumType)(nil)).Elem()
}

func (o HorreumTypeOutput) ToHorreumTypeOutput() HorreumTypeOutput {
	return o
}

func (o HorreumTypeOutput) ToHorreumTypeOutputWithContext(ctx context.Context) HorreumTypeOutput {
	return o
}

func (o HorreumTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o HorreumTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o HorreumTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v HorreumType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// HorreumSpec defines the desired state of Horreum
func (o HorreumTypeOutput) Spec() HorreumSpecPtrOutput {
	return o.ApplyT(func(v HorreumType) *HorreumSpec { return v.Spec }).(HorreumSpecPtrOutput)
}

// HorreumStatus defines the observed state of Horreum
func (o HorreumTypeOutput) Status() HorreumStatusPtrOutput {
	return o.ApplyT(func(v HorreumType) *HorreumStatus { return v.Status }).(HorreumStatusPtrOutput)
}

type HorreumMetadata struct {
}

// HorreumMetadataInput is an input type that accepts HorreumMetadataArgs and HorreumMetadataOutput values.
// You can construct a concrete instance of `HorreumMetadataInput` via:
//
//          HorreumMetadataArgs{...}
type HorreumMetadataInput interface {
	pulumi.Input

	ToHorreumMetadataOutput() HorreumMetadataOutput
	ToHorreumMetadataOutputWithContext(context.Context) HorreumMetadataOutput
}

type HorreumMetadataArgs struct {
}

func (HorreumMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumMetadata)(nil)).Elem()
}

func (i HorreumMetadataArgs) ToHorreumMetadataOutput() HorreumMetadataOutput {
	return i.ToHorreumMetadataOutputWithContext(context.Background())
}

func (i HorreumMetadataArgs) ToHorreumMetadataOutputWithContext(ctx context.Context) HorreumMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumMetadataOutput)
}

type HorreumMetadataOutput struct{ *pulumi.OutputState }

func (HorreumMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumMetadata)(nil)).Elem()
}

func (o HorreumMetadataOutput) ToHorreumMetadataOutput() HorreumMetadataOutput {
	return o
}

func (o HorreumMetadataOutput) ToHorreumMetadataOutputWithContext(ctx context.Context) HorreumMetadataOutput {
	return o
}

// HorreumSpec defines the desired state of Horreum
type HorreumSpec struct {
	// Database coordinates for Horreum data. Besides `username` and `password` the secret must also contain key `dbsecret` that will be used to sign access to the database.
	Database *HorreumSpecDatabase `pulumi:"database"`
	// Horreum image. Defaults to quay.io/hyperfoil/horreum:latest
	Image *string `pulumi:"image"`
	// Keycloak specification
	Keycloak *HorreumSpecKeycloak `pulumi:"keycloak"`
	// PostgreSQL specification
	Postgres *HorreumSpecPostgres `pulumi:"postgres"`
	// Hyperfoil report tool specification
	Report *HorreumSpecReport `pulumi:"report"`
	// Route for external access.
	Route *HorreumSpecRoute `pulumi:"route"`
}

// HorreumSpecInput is an input type that accepts HorreumSpecArgs and HorreumSpecOutput values.
// You can construct a concrete instance of `HorreumSpecInput` via:
//
//          HorreumSpecArgs{...}
type HorreumSpecInput interface {
	pulumi.Input

	ToHorreumSpecOutput() HorreumSpecOutput
	ToHorreumSpecOutputWithContext(context.Context) HorreumSpecOutput
}

// HorreumSpec defines the desired state of Horreum
type HorreumSpecArgs struct {
	// Database coordinates for Horreum data. Besides `username` and `password` the secret must also contain key `dbsecret` that will be used to sign access to the database.
	Database HorreumSpecDatabasePtrInput `pulumi:"database"`
	// Horreum image. Defaults to quay.io/hyperfoil/horreum:latest
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Keycloak specification
	Keycloak HorreumSpecKeycloakPtrInput `pulumi:"keycloak"`
	// PostgreSQL specification
	Postgres HorreumSpecPostgresPtrInput `pulumi:"postgres"`
	// Hyperfoil report tool specification
	Report HorreumSpecReportPtrInput `pulumi:"report"`
	// Route for external access.
	Route HorreumSpecRoutePtrInput `pulumi:"route"`
}

func (HorreumSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpec)(nil)).Elem()
}

func (i HorreumSpecArgs) ToHorreumSpecOutput() HorreumSpecOutput {
	return i.ToHorreumSpecOutputWithContext(context.Background())
}

func (i HorreumSpecArgs) ToHorreumSpecOutputWithContext(ctx context.Context) HorreumSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecOutput)
}

func (i HorreumSpecArgs) ToHorreumSpecPtrOutput() HorreumSpecPtrOutput {
	return i.ToHorreumSpecPtrOutputWithContext(context.Background())
}

func (i HorreumSpecArgs) ToHorreumSpecPtrOutputWithContext(ctx context.Context) HorreumSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecOutput).ToHorreumSpecPtrOutputWithContext(ctx)
}

// HorreumSpecPtrInput is an input type that accepts HorreumSpecArgs, HorreumSpecPtr and HorreumSpecPtrOutput values.
// You can construct a concrete instance of `HorreumSpecPtrInput` via:
//
//          HorreumSpecArgs{...}
//
//  or:
//
//          nil
type HorreumSpecPtrInput interface {
	pulumi.Input

	ToHorreumSpecPtrOutput() HorreumSpecPtrOutput
	ToHorreumSpecPtrOutputWithContext(context.Context) HorreumSpecPtrOutput
}

type horreumSpecPtrType HorreumSpecArgs

func HorreumSpecPtr(v *HorreumSpecArgs) HorreumSpecPtrInput {
	return (*horreumSpecPtrType)(v)
}

func (*horreumSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpec)(nil)).Elem()
}

func (i *horreumSpecPtrType) ToHorreumSpecPtrOutput() HorreumSpecPtrOutput {
	return i.ToHorreumSpecPtrOutputWithContext(context.Background())
}

func (i *horreumSpecPtrType) ToHorreumSpecPtrOutputWithContext(ctx context.Context) HorreumSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecPtrOutput)
}

// HorreumSpec defines the desired state of Horreum
type HorreumSpecOutput struct{ *pulumi.OutputState }

func (HorreumSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpec)(nil)).Elem()
}

func (o HorreumSpecOutput) ToHorreumSpecOutput() HorreumSpecOutput {
	return o
}

func (o HorreumSpecOutput) ToHorreumSpecOutputWithContext(ctx context.Context) HorreumSpecOutput {
	return o
}

func (o HorreumSpecOutput) ToHorreumSpecPtrOutput() HorreumSpecPtrOutput {
	return o.ToHorreumSpecPtrOutputWithContext(context.Background())
}

func (o HorreumSpecOutput) ToHorreumSpecPtrOutputWithContext(ctx context.Context) HorreumSpecPtrOutput {
	return o.ApplyT(func(v HorreumSpec) *HorreumSpec {
		return &v
	}).(HorreumSpecPtrOutput)
}

// Database coordinates for Horreum data. Besides `username` and `password` the secret must also contain key `dbsecret` that will be used to sign access to the database.
func (o HorreumSpecOutput) Database() HorreumSpecDatabasePtrOutput {
	return o.ApplyT(func(v HorreumSpec) *HorreumSpecDatabase { return v.Database }).(HorreumSpecDatabasePtrOutput)
}

// Horreum image. Defaults to quay.io/hyperfoil/horreum:latest
func (o HorreumSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Keycloak specification
func (o HorreumSpecOutput) Keycloak() HorreumSpecKeycloakPtrOutput {
	return o.ApplyT(func(v HorreumSpec) *HorreumSpecKeycloak { return v.Keycloak }).(HorreumSpecKeycloakPtrOutput)
}

// PostgreSQL specification
func (o HorreumSpecOutput) Postgres() HorreumSpecPostgresPtrOutput {
	return o.ApplyT(func(v HorreumSpec) *HorreumSpecPostgres { return v.Postgres }).(HorreumSpecPostgresPtrOutput)
}

// Hyperfoil report tool specification
func (o HorreumSpecOutput) Report() HorreumSpecReportPtrOutput {
	return o.ApplyT(func(v HorreumSpec) *HorreumSpecReport { return v.Report }).(HorreumSpecReportPtrOutput)
}

// Route for external access.
func (o HorreumSpecOutput) Route() HorreumSpecRoutePtrOutput {
	return o.ApplyT(func(v HorreumSpec) *HorreumSpecRoute { return v.Route }).(HorreumSpecRoutePtrOutput)
}

type HorreumSpecPtrOutput struct{ *pulumi.OutputState }

func (HorreumSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpec)(nil)).Elem()
}

func (o HorreumSpecPtrOutput) ToHorreumSpecPtrOutput() HorreumSpecPtrOutput {
	return o
}

func (o HorreumSpecPtrOutput) ToHorreumSpecPtrOutputWithContext(ctx context.Context) HorreumSpecPtrOutput {
	return o
}

func (o HorreumSpecPtrOutput) Elem() HorreumSpecOutput {
	return o.ApplyT(func(v *HorreumSpec) HorreumSpec { return *v }).(HorreumSpecOutput)
}

// Database coordinates for Horreum data. Besides `username` and `password` the secret must also contain key `dbsecret` that will be used to sign access to the database.
func (o HorreumSpecPtrOutput) Database() HorreumSpecDatabasePtrOutput {
	return o.ApplyT(func(v *HorreumSpec) *HorreumSpecDatabase {
		if v == nil {
			return nil
		}
		return v.Database
	}).(HorreumSpecDatabasePtrOutput)
}

// Horreum image. Defaults to quay.io/hyperfoil/horreum:latest
func (o HorreumSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Keycloak specification
func (o HorreumSpecPtrOutput) Keycloak() HorreumSpecKeycloakPtrOutput {
	return o.ApplyT(func(v *HorreumSpec) *HorreumSpecKeycloak {
		if v == nil {
			return nil
		}
		return v.Keycloak
	}).(HorreumSpecKeycloakPtrOutput)
}

// PostgreSQL specification
func (o HorreumSpecPtrOutput) Postgres() HorreumSpecPostgresPtrOutput {
	return o.ApplyT(func(v *HorreumSpec) *HorreumSpecPostgres {
		if v == nil {
			return nil
		}
		return v.Postgres
	}).(HorreumSpecPostgresPtrOutput)
}

// Hyperfoil report tool specification
func (o HorreumSpecPtrOutput) Report() HorreumSpecReportPtrOutput {
	return o.ApplyT(func(v *HorreumSpec) *HorreumSpecReport {
		if v == nil {
			return nil
		}
		return v.Report
	}).(HorreumSpecReportPtrOutput)
}

// Route for external access.
func (o HorreumSpecPtrOutput) Route() HorreumSpecRoutePtrOutput {
	return o.ApplyT(func(v *HorreumSpec) *HorreumSpecRoute {
		if v == nil {
			return nil
		}
		return v.Route
	}).(HorreumSpecRoutePtrOutput)
}

// Database coordinates for Horreum data. Besides `username` and `password` the secret must also contain key `dbsecret` that will be used to sign access to the database.
type HorreumSpecDatabase struct {
	// Hostname for the database
	Host *string `pulumi:"host"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Database port; defaults to 5432
	Port *int `pulumi:"port"`
	// Name of secret resource with data `username` and `password`. Created if does not exist.
	Secret *string `pulumi:"secret"`
}

// HorreumSpecDatabaseInput is an input type that accepts HorreumSpecDatabaseArgs and HorreumSpecDatabaseOutput values.
// You can construct a concrete instance of `HorreumSpecDatabaseInput` via:
//
//          HorreumSpecDatabaseArgs{...}
type HorreumSpecDatabaseInput interface {
	pulumi.Input

	ToHorreumSpecDatabaseOutput() HorreumSpecDatabaseOutput
	ToHorreumSpecDatabaseOutputWithContext(context.Context) HorreumSpecDatabaseOutput
}

// Database coordinates for Horreum data. Besides `username` and `password` the secret must also contain key `dbsecret` that will be used to sign access to the database.
type HorreumSpecDatabaseArgs struct {
	// Hostname for the database
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Database port; defaults to 5432
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Name of secret resource with data `username` and `password`. Created if does not exist.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
}

func (HorreumSpecDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpecDatabase)(nil)).Elem()
}

func (i HorreumSpecDatabaseArgs) ToHorreumSpecDatabaseOutput() HorreumSpecDatabaseOutput {
	return i.ToHorreumSpecDatabaseOutputWithContext(context.Background())
}

func (i HorreumSpecDatabaseArgs) ToHorreumSpecDatabaseOutputWithContext(ctx context.Context) HorreumSpecDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecDatabaseOutput)
}

func (i HorreumSpecDatabaseArgs) ToHorreumSpecDatabasePtrOutput() HorreumSpecDatabasePtrOutput {
	return i.ToHorreumSpecDatabasePtrOutputWithContext(context.Background())
}

func (i HorreumSpecDatabaseArgs) ToHorreumSpecDatabasePtrOutputWithContext(ctx context.Context) HorreumSpecDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecDatabaseOutput).ToHorreumSpecDatabasePtrOutputWithContext(ctx)
}

// HorreumSpecDatabasePtrInput is an input type that accepts HorreumSpecDatabaseArgs, HorreumSpecDatabasePtr and HorreumSpecDatabasePtrOutput values.
// You can construct a concrete instance of `HorreumSpecDatabasePtrInput` via:
//
//          HorreumSpecDatabaseArgs{...}
//
//  or:
//
//          nil
type HorreumSpecDatabasePtrInput interface {
	pulumi.Input

	ToHorreumSpecDatabasePtrOutput() HorreumSpecDatabasePtrOutput
	ToHorreumSpecDatabasePtrOutputWithContext(context.Context) HorreumSpecDatabasePtrOutput
}

type horreumSpecDatabasePtrType HorreumSpecDatabaseArgs

func HorreumSpecDatabasePtr(v *HorreumSpecDatabaseArgs) HorreumSpecDatabasePtrInput {
	return (*horreumSpecDatabasePtrType)(v)
}

func (*horreumSpecDatabasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpecDatabase)(nil)).Elem()
}

func (i *horreumSpecDatabasePtrType) ToHorreumSpecDatabasePtrOutput() HorreumSpecDatabasePtrOutput {
	return i.ToHorreumSpecDatabasePtrOutputWithContext(context.Background())
}

func (i *horreumSpecDatabasePtrType) ToHorreumSpecDatabasePtrOutputWithContext(ctx context.Context) HorreumSpecDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecDatabasePtrOutput)
}

// Database coordinates for Horreum data. Besides `username` and `password` the secret must also contain key `dbsecret` that will be used to sign access to the database.
type HorreumSpecDatabaseOutput struct{ *pulumi.OutputState }

func (HorreumSpecDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpecDatabase)(nil)).Elem()
}

func (o HorreumSpecDatabaseOutput) ToHorreumSpecDatabaseOutput() HorreumSpecDatabaseOutput {
	return o
}

func (o HorreumSpecDatabaseOutput) ToHorreumSpecDatabaseOutputWithContext(ctx context.Context) HorreumSpecDatabaseOutput {
	return o
}

func (o HorreumSpecDatabaseOutput) ToHorreumSpecDatabasePtrOutput() HorreumSpecDatabasePtrOutput {
	return o.ToHorreumSpecDatabasePtrOutputWithContext(context.Background())
}

func (o HorreumSpecDatabaseOutput) ToHorreumSpecDatabasePtrOutputWithContext(ctx context.Context) HorreumSpecDatabasePtrOutput {
	return o.ApplyT(func(v HorreumSpecDatabase) *HorreumSpecDatabase {
		return &v
	}).(HorreumSpecDatabasePtrOutput)
}

// Hostname for the database
func (o HorreumSpecDatabaseOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecDatabase) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Name of the database
func (o HorreumSpecDatabaseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecDatabase) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Database port; defaults to 5432
func (o HorreumSpecDatabaseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorreumSpecDatabase) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Name of secret resource with data `username` and `password`. Created if does not exist.
func (o HorreumSpecDatabaseOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecDatabase) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

type HorreumSpecDatabasePtrOutput struct{ *pulumi.OutputState }

func (HorreumSpecDatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpecDatabase)(nil)).Elem()
}

func (o HorreumSpecDatabasePtrOutput) ToHorreumSpecDatabasePtrOutput() HorreumSpecDatabasePtrOutput {
	return o
}

func (o HorreumSpecDatabasePtrOutput) ToHorreumSpecDatabasePtrOutputWithContext(ctx context.Context) HorreumSpecDatabasePtrOutput {
	return o
}

func (o HorreumSpecDatabasePtrOutput) Elem() HorreumSpecDatabaseOutput {
	return o.ApplyT(func(v *HorreumSpecDatabase) HorreumSpecDatabase { return *v }).(HorreumSpecDatabaseOutput)
}

// Hostname for the database
func (o HorreumSpecDatabasePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Name of the database
func (o HorreumSpecDatabasePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Database port; defaults to 5432
func (o HorreumSpecDatabasePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorreumSpecDatabase) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Name of secret resource with data `username` and `password`. Created if does not exist.
func (o HorreumSpecDatabasePtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// Keycloak specification
type HorreumSpecKeycloak struct {
	// Secret used for admin access to the deployed Keycloak instance. Created if does not exist. Must contain keys `username` and `password`.
	AdminSecret *string `pulumi:"adminSecret"`
	// Database coordinates Keycloak should use
	Database *HorreumSpecKeycloakDatabase `pulumi:"database"`
	// Set to true if the Keycloak instance should not be deployed
	External *bool `pulumi:"external"`
	// Image that should be used for Keycloak deployment. Defaults to docker.io/jboss/keycloak:latest
	Image *string `pulumi:"image"`
	// Route to be used for external access to the Keycloak instance. When `external` is set to true, this will be used for internal access as well.
	Route *HorreumSpecKeycloakRoute `pulumi:"route"`
}

// HorreumSpecKeycloakInput is an input type that accepts HorreumSpecKeycloakArgs and HorreumSpecKeycloakOutput values.
// You can construct a concrete instance of `HorreumSpecKeycloakInput` via:
//
//          HorreumSpecKeycloakArgs{...}
type HorreumSpecKeycloakInput interface {
	pulumi.Input

	ToHorreumSpecKeycloakOutput() HorreumSpecKeycloakOutput
	ToHorreumSpecKeycloakOutputWithContext(context.Context) HorreumSpecKeycloakOutput
}

// Keycloak specification
type HorreumSpecKeycloakArgs struct {
	// Secret used for admin access to the deployed Keycloak instance. Created if does not exist. Must contain keys `username` and `password`.
	AdminSecret pulumi.StringPtrInput `pulumi:"adminSecret"`
	// Database coordinates Keycloak should use
	Database HorreumSpecKeycloakDatabasePtrInput `pulumi:"database"`
	// Set to true if the Keycloak instance should not be deployed
	External pulumi.BoolPtrInput `pulumi:"external"`
	// Image that should be used for Keycloak deployment. Defaults to docker.io/jboss/keycloak:latest
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Route to be used for external access to the Keycloak instance. When `external` is set to true, this will be used for internal access as well.
	Route HorreumSpecKeycloakRoutePtrInput `pulumi:"route"`
}

func (HorreumSpecKeycloakArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpecKeycloak)(nil)).Elem()
}

func (i HorreumSpecKeycloakArgs) ToHorreumSpecKeycloakOutput() HorreumSpecKeycloakOutput {
	return i.ToHorreumSpecKeycloakOutputWithContext(context.Background())
}

func (i HorreumSpecKeycloakArgs) ToHorreumSpecKeycloakOutputWithContext(ctx context.Context) HorreumSpecKeycloakOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecKeycloakOutput)
}

func (i HorreumSpecKeycloakArgs) ToHorreumSpecKeycloakPtrOutput() HorreumSpecKeycloakPtrOutput {
	return i.ToHorreumSpecKeycloakPtrOutputWithContext(context.Background())
}

func (i HorreumSpecKeycloakArgs) ToHorreumSpecKeycloakPtrOutputWithContext(ctx context.Context) HorreumSpecKeycloakPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecKeycloakOutput).ToHorreumSpecKeycloakPtrOutputWithContext(ctx)
}

// HorreumSpecKeycloakPtrInput is an input type that accepts HorreumSpecKeycloakArgs, HorreumSpecKeycloakPtr and HorreumSpecKeycloakPtrOutput values.
// You can construct a concrete instance of `HorreumSpecKeycloakPtrInput` via:
//
//          HorreumSpecKeycloakArgs{...}
//
//  or:
//
//          nil
type HorreumSpecKeycloakPtrInput interface {
	pulumi.Input

	ToHorreumSpecKeycloakPtrOutput() HorreumSpecKeycloakPtrOutput
	ToHorreumSpecKeycloakPtrOutputWithContext(context.Context) HorreumSpecKeycloakPtrOutput
}

type horreumSpecKeycloakPtrType HorreumSpecKeycloakArgs

func HorreumSpecKeycloakPtr(v *HorreumSpecKeycloakArgs) HorreumSpecKeycloakPtrInput {
	return (*horreumSpecKeycloakPtrType)(v)
}

func (*horreumSpecKeycloakPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpecKeycloak)(nil)).Elem()
}

func (i *horreumSpecKeycloakPtrType) ToHorreumSpecKeycloakPtrOutput() HorreumSpecKeycloakPtrOutput {
	return i.ToHorreumSpecKeycloakPtrOutputWithContext(context.Background())
}

func (i *horreumSpecKeycloakPtrType) ToHorreumSpecKeycloakPtrOutputWithContext(ctx context.Context) HorreumSpecKeycloakPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecKeycloakPtrOutput)
}

// Keycloak specification
type HorreumSpecKeycloakOutput struct{ *pulumi.OutputState }

func (HorreumSpecKeycloakOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpecKeycloak)(nil)).Elem()
}

func (o HorreumSpecKeycloakOutput) ToHorreumSpecKeycloakOutput() HorreumSpecKeycloakOutput {
	return o
}

func (o HorreumSpecKeycloakOutput) ToHorreumSpecKeycloakOutputWithContext(ctx context.Context) HorreumSpecKeycloakOutput {
	return o
}

func (o HorreumSpecKeycloakOutput) ToHorreumSpecKeycloakPtrOutput() HorreumSpecKeycloakPtrOutput {
	return o.ToHorreumSpecKeycloakPtrOutputWithContext(context.Background())
}

func (o HorreumSpecKeycloakOutput) ToHorreumSpecKeycloakPtrOutputWithContext(ctx context.Context) HorreumSpecKeycloakPtrOutput {
	return o.ApplyT(func(v HorreumSpecKeycloak) *HorreumSpecKeycloak {
		return &v
	}).(HorreumSpecKeycloakPtrOutput)
}

// Secret used for admin access to the deployed Keycloak instance. Created if does not exist. Must contain keys `username` and `password`.
func (o HorreumSpecKeycloakOutput) AdminSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecKeycloak) *string { return v.AdminSecret }).(pulumi.StringPtrOutput)
}

// Database coordinates Keycloak should use
func (o HorreumSpecKeycloakOutput) Database() HorreumSpecKeycloakDatabasePtrOutput {
	return o.ApplyT(func(v HorreumSpecKeycloak) *HorreumSpecKeycloakDatabase { return v.Database }).(HorreumSpecKeycloakDatabasePtrOutput)
}

// Set to true if the Keycloak instance should not be deployed
func (o HorreumSpecKeycloakOutput) External() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HorreumSpecKeycloak) *bool { return v.External }).(pulumi.BoolPtrOutput)
}

// Image that should be used for Keycloak deployment. Defaults to docker.io/jboss/keycloak:latest
func (o HorreumSpecKeycloakOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecKeycloak) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Route to be used for external access to the Keycloak instance. When `external` is set to true, this will be used for internal access as well.
func (o HorreumSpecKeycloakOutput) Route() HorreumSpecKeycloakRoutePtrOutput {
	return o.ApplyT(func(v HorreumSpecKeycloak) *HorreumSpecKeycloakRoute { return v.Route }).(HorreumSpecKeycloakRoutePtrOutput)
}

type HorreumSpecKeycloakPtrOutput struct{ *pulumi.OutputState }

func (HorreumSpecKeycloakPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpecKeycloak)(nil)).Elem()
}

func (o HorreumSpecKeycloakPtrOutput) ToHorreumSpecKeycloakPtrOutput() HorreumSpecKeycloakPtrOutput {
	return o
}

func (o HorreumSpecKeycloakPtrOutput) ToHorreumSpecKeycloakPtrOutputWithContext(ctx context.Context) HorreumSpecKeycloakPtrOutput {
	return o
}

func (o HorreumSpecKeycloakPtrOutput) Elem() HorreumSpecKeycloakOutput {
	return o.ApplyT(func(v *HorreumSpecKeycloak) HorreumSpecKeycloak { return *v }).(HorreumSpecKeycloakOutput)
}

// Secret used for admin access to the deployed Keycloak instance. Created if does not exist. Must contain keys `username` and `password`.
func (o HorreumSpecKeycloakPtrOutput) AdminSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecKeycloak) *string {
		if v == nil {
			return nil
		}
		return v.AdminSecret
	}).(pulumi.StringPtrOutput)
}

// Database coordinates Keycloak should use
func (o HorreumSpecKeycloakPtrOutput) Database() HorreumSpecKeycloakDatabasePtrOutput {
	return o.ApplyT(func(v *HorreumSpecKeycloak) *HorreumSpecKeycloakDatabase {
		if v == nil {
			return nil
		}
		return v.Database
	}).(HorreumSpecKeycloakDatabasePtrOutput)
}

// Set to true if the Keycloak instance should not be deployed
func (o HorreumSpecKeycloakPtrOutput) External() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HorreumSpecKeycloak) *bool {
		if v == nil {
			return nil
		}
		return v.External
	}).(pulumi.BoolPtrOutput)
}

// Image that should be used for Keycloak deployment. Defaults to docker.io/jboss/keycloak:latest
func (o HorreumSpecKeycloakPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecKeycloak) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Route to be used for external access to the Keycloak instance. When `external` is set to true, this will be used for internal access as well.
func (o HorreumSpecKeycloakPtrOutput) Route() HorreumSpecKeycloakRoutePtrOutput {
	return o.ApplyT(func(v *HorreumSpecKeycloak) *HorreumSpecKeycloakRoute {
		if v == nil {
			return nil
		}
		return v.Route
	}).(HorreumSpecKeycloakRoutePtrOutput)
}

// Database coordinates Keycloak should use
type HorreumSpecKeycloakDatabase struct {
	// Hostname for the database
	Host *string `pulumi:"host"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Database port; defaults to 5432
	Port *int `pulumi:"port"`
	// Name of secret resource with data `username` and `password`. Created if does not exist.
	Secret *string `pulumi:"secret"`
}

// HorreumSpecKeycloakDatabaseInput is an input type that accepts HorreumSpecKeycloakDatabaseArgs and HorreumSpecKeycloakDatabaseOutput values.
// You can construct a concrete instance of `HorreumSpecKeycloakDatabaseInput` via:
//
//          HorreumSpecKeycloakDatabaseArgs{...}
type HorreumSpecKeycloakDatabaseInput interface {
	pulumi.Input

	ToHorreumSpecKeycloakDatabaseOutput() HorreumSpecKeycloakDatabaseOutput
	ToHorreumSpecKeycloakDatabaseOutputWithContext(context.Context) HorreumSpecKeycloakDatabaseOutput
}

// Database coordinates Keycloak should use
type HorreumSpecKeycloakDatabaseArgs struct {
	// Hostname for the database
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Database port; defaults to 5432
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Name of secret resource with data `username` and `password`. Created if does not exist.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
}

func (HorreumSpecKeycloakDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpecKeycloakDatabase)(nil)).Elem()
}

func (i HorreumSpecKeycloakDatabaseArgs) ToHorreumSpecKeycloakDatabaseOutput() HorreumSpecKeycloakDatabaseOutput {
	return i.ToHorreumSpecKeycloakDatabaseOutputWithContext(context.Background())
}

func (i HorreumSpecKeycloakDatabaseArgs) ToHorreumSpecKeycloakDatabaseOutputWithContext(ctx context.Context) HorreumSpecKeycloakDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecKeycloakDatabaseOutput)
}

func (i HorreumSpecKeycloakDatabaseArgs) ToHorreumSpecKeycloakDatabasePtrOutput() HorreumSpecKeycloakDatabasePtrOutput {
	return i.ToHorreumSpecKeycloakDatabasePtrOutputWithContext(context.Background())
}

func (i HorreumSpecKeycloakDatabaseArgs) ToHorreumSpecKeycloakDatabasePtrOutputWithContext(ctx context.Context) HorreumSpecKeycloakDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecKeycloakDatabaseOutput).ToHorreumSpecKeycloakDatabasePtrOutputWithContext(ctx)
}

// HorreumSpecKeycloakDatabasePtrInput is an input type that accepts HorreumSpecKeycloakDatabaseArgs, HorreumSpecKeycloakDatabasePtr and HorreumSpecKeycloakDatabasePtrOutput values.
// You can construct a concrete instance of `HorreumSpecKeycloakDatabasePtrInput` via:
//
//          HorreumSpecKeycloakDatabaseArgs{...}
//
//  or:
//
//          nil
type HorreumSpecKeycloakDatabasePtrInput interface {
	pulumi.Input

	ToHorreumSpecKeycloakDatabasePtrOutput() HorreumSpecKeycloakDatabasePtrOutput
	ToHorreumSpecKeycloakDatabasePtrOutputWithContext(context.Context) HorreumSpecKeycloakDatabasePtrOutput
}

type horreumSpecKeycloakDatabasePtrType HorreumSpecKeycloakDatabaseArgs

func HorreumSpecKeycloakDatabasePtr(v *HorreumSpecKeycloakDatabaseArgs) HorreumSpecKeycloakDatabasePtrInput {
	return (*horreumSpecKeycloakDatabasePtrType)(v)
}

func (*horreumSpecKeycloakDatabasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpecKeycloakDatabase)(nil)).Elem()
}

func (i *horreumSpecKeycloakDatabasePtrType) ToHorreumSpecKeycloakDatabasePtrOutput() HorreumSpecKeycloakDatabasePtrOutput {
	return i.ToHorreumSpecKeycloakDatabasePtrOutputWithContext(context.Background())
}

func (i *horreumSpecKeycloakDatabasePtrType) ToHorreumSpecKeycloakDatabasePtrOutputWithContext(ctx context.Context) HorreumSpecKeycloakDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecKeycloakDatabasePtrOutput)
}

// Database coordinates Keycloak should use
type HorreumSpecKeycloakDatabaseOutput struct{ *pulumi.OutputState }

func (HorreumSpecKeycloakDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpecKeycloakDatabase)(nil)).Elem()
}

func (o HorreumSpecKeycloakDatabaseOutput) ToHorreumSpecKeycloakDatabaseOutput() HorreumSpecKeycloakDatabaseOutput {
	return o
}

func (o HorreumSpecKeycloakDatabaseOutput) ToHorreumSpecKeycloakDatabaseOutputWithContext(ctx context.Context) HorreumSpecKeycloakDatabaseOutput {
	return o
}

func (o HorreumSpecKeycloakDatabaseOutput) ToHorreumSpecKeycloakDatabasePtrOutput() HorreumSpecKeycloakDatabasePtrOutput {
	return o.ToHorreumSpecKeycloakDatabasePtrOutputWithContext(context.Background())
}

func (o HorreumSpecKeycloakDatabaseOutput) ToHorreumSpecKeycloakDatabasePtrOutputWithContext(ctx context.Context) HorreumSpecKeycloakDatabasePtrOutput {
	return o.ApplyT(func(v HorreumSpecKeycloakDatabase) *HorreumSpecKeycloakDatabase {
		return &v
	}).(HorreumSpecKeycloakDatabasePtrOutput)
}

// Hostname for the database
func (o HorreumSpecKeycloakDatabaseOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecKeycloakDatabase) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Name of the database
func (o HorreumSpecKeycloakDatabaseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecKeycloakDatabase) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Database port; defaults to 5432
func (o HorreumSpecKeycloakDatabaseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorreumSpecKeycloakDatabase) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Name of secret resource with data `username` and `password`. Created if does not exist.
func (o HorreumSpecKeycloakDatabaseOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecKeycloakDatabase) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

type HorreumSpecKeycloakDatabasePtrOutput struct{ *pulumi.OutputState }

func (HorreumSpecKeycloakDatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpecKeycloakDatabase)(nil)).Elem()
}

func (o HorreumSpecKeycloakDatabasePtrOutput) ToHorreumSpecKeycloakDatabasePtrOutput() HorreumSpecKeycloakDatabasePtrOutput {
	return o
}

func (o HorreumSpecKeycloakDatabasePtrOutput) ToHorreumSpecKeycloakDatabasePtrOutputWithContext(ctx context.Context) HorreumSpecKeycloakDatabasePtrOutput {
	return o
}

func (o HorreumSpecKeycloakDatabasePtrOutput) Elem() HorreumSpecKeycloakDatabaseOutput {
	return o.ApplyT(func(v *HorreumSpecKeycloakDatabase) HorreumSpecKeycloakDatabase { return *v }).(HorreumSpecKeycloakDatabaseOutput)
}

// Hostname for the database
func (o HorreumSpecKeycloakDatabasePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecKeycloakDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Name of the database
func (o HorreumSpecKeycloakDatabasePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecKeycloakDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Database port; defaults to 5432
func (o HorreumSpecKeycloakDatabasePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorreumSpecKeycloakDatabase) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Name of secret resource with data `username` and `password`. Created if does not exist.
func (o HorreumSpecKeycloakDatabasePtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecKeycloakDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// Route to be used for external access to the Keycloak instance. When `external` is set to true, this will be used for internal access as well.
type HorreumSpecKeycloakRoute struct {
	// Hostname for external access.
	Host *string `pulumi:"host"`
	// Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
	Tls *string `pulumi:"tls"`
}

// HorreumSpecKeycloakRouteInput is an input type that accepts HorreumSpecKeycloakRouteArgs and HorreumSpecKeycloakRouteOutput values.
// You can construct a concrete instance of `HorreumSpecKeycloakRouteInput` via:
//
//          HorreumSpecKeycloakRouteArgs{...}
type HorreumSpecKeycloakRouteInput interface {
	pulumi.Input

	ToHorreumSpecKeycloakRouteOutput() HorreumSpecKeycloakRouteOutput
	ToHorreumSpecKeycloakRouteOutputWithContext(context.Context) HorreumSpecKeycloakRouteOutput
}

// Route to be used for external access to the Keycloak instance. When `external` is set to true, this will be used for internal access as well.
type HorreumSpecKeycloakRouteArgs struct {
	// Hostname for external access.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
	Tls pulumi.StringPtrInput `pulumi:"tls"`
}

func (HorreumSpecKeycloakRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpecKeycloakRoute)(nil)).Elem()
}

func (i HorreumSpecKeycloakRouteArgs) ToHorreumSpecKeycloakRouteOutput() HorreumSpecKeycloakRouteOutput {
	return i.ToHorreumSpecKeycloakRouteOutputWithContext(context.Background())
}

func (i HorreumSpecKeycloakRouteArgs) ToHorreumSpecKeycloakRouteOutputWithContext(ctx context.Context) HorreumSpecKeycloakRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecKeycloakRouteOutput)
}

func (i HorreumSpecKeycloakRouteArgs) ToHorreumSpecKeycloakRoutePtrOutput() HorreumSpecKeycloakRoutePtrOutput {
	return i.ToHorreumSpecKeycloakRoutePtrOutputWithContext(context.Background())
}

func (i HorreumSpecKeycloakRouteArgs) ToHorreumSpecKeycloakRoutePtrOutputWithContext(ctx context.Context) HorreumSpecKeycloakRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecKeycloakRouteOutput).ToHorreumSpecKeycloakRoutePtrOutputWithContext(ctx)
}

// HorreumSpecKeycloakRoutePtrInput is an input type that accepts HorreumSpecKeycloakRouteArgs, HorreumSpecKeycloakRoutePtr and HorreumSpecKeycloakRoutePtrOutput values.
// You can construct a concrete instance of `HorreumSpecKeycloakRoutePtrInput` via:
//
//          HorreumSpecKeycloakRouteArgs{...}
//
//  or:
//
//          nil
type HorreumSpecKeycloakRoutePtrInput interface {
	pulumi.Input

	ToHorreumSpecKeycloakRoutePtrOutput() HorreumSpecKeycloakRoutePtrOutput
	ToHorreumSpecKeycloakRoutePtrOutputWithContext(context.Context) HorreumSpecKeycloakRoutePtrOutput
}

type horreumSpecKeycloakRoutePtrType HorreumSpecKeycloakRouteArgs

func HorreumSpecKeycloakRoutePtr(v *HorreumSpecKeycloakRouteArgs) HorreumSpecKeycloakRoutePtrInput {
	return (*horreumSpecKeycloakRoutePtrType)(v)
}

func (*horreumSpecKeycloakRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpecKeycloakRoute)(nil)).Elem()
}

func (i *horreumSpecKeycloakRoutePtrType) ToHorreumSpecKeycloakRoutePtrOutput() HorreumSpecKeycloakRoutePtrOutput {
	return i.ToHorreumSpecKeycloakRoutePtrOutputWithContext(context.Background())
}

func (i *horreumSpecKeycloakRoutePtrType) ToHorreumSpecKeycloakRoutePtrOutputWithContext(ctx context.Context) HorreumSpecKeycloakRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecKeycloakRoutePtrOutput)
}

// Route to be used for external access to the Keycloak instance. When `external` is set to true, this will be used for internal access as well.
type HorreumSpecKeycloakRouteOutput struct{ *pulumi.OutputState }

func (HorreumSpecKeycloakRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpecKeycloakRoute)(nil)).Elem()
}

func (o HorreumSpecKeycloakRouteOutput) ToHorreumSpecKeycloakRouteOutput() HorreumSpecKeycloakRouteOutput {
	return o
}

func (o HorreumSpecKeycloakRouteOutput) ToHorreumSpecKeycloakRouteOutputWithContext(ctx context.Context) HorreumSpecKeycloakRouteOutput {
	return o
}

func (o HorreumSpecKeycloakRouteOutput) ToHorreumSpecKeycloakRoutePtrOutput() HorreumSpecKeycloakRoutePtrOutput {
	return o.ToHorreumSpecKeycloakRoutePtrOutputWithContext(context.Background())
}

func (o HorreumSpecKeycloakRouteOutput) ToHorreumSpecKeycloakRoutePtrOutputWithContext(ctx context.Context) HorreumSpecKeycloakRoutePtrOutput {
	return o.ApplyT(func(v HorreumSpecKeycloakRoute) *HorreumSpecKeycloakRoute {
		return &v
	}).(HorreumSpecKeycloakRoutePtrOutput)
}

// Hostname for external access.
func (o HorreumSpecKeycloakRouteOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecKeycloakRoute) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
func (o HorreumSpecKeycloakRouteOutput) Tls() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecKeycloakRoute) *string { return v.Tls }).(pulumi.StringPtrOutput)
}

type HorreumSpecKeycloakRoutePtrOutput struct{ *pulumi.OutputState }

func (HorreumSpecKeycloakRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpecKeycloakRoute)(nil)).Elem()
}

func (o HorreumSpecKeycloakRoutePtrOutput) ToHorreumSpecKeycloakRoutePtrOutput() HorreumSpecKeycloakRoutePtrOutput {
	return o
}

func (o HorreumSpecKeycloakRoutePtrOutput) ToHorreumSpecKeycloakRoutePtrOutputWithContext(ctx context.Context) HorreumSpecKeycloakRoutePtrOutput {
	return o
}

func (o HorreumSpecKeycloakRoutePtrOutput) Elem() HorreumSpecKeycloakRouteOutput {
	return o.ApplyT(func(v *HorreumSpecKeycloakRoute) HorreumSpecKeycloakRoute { return *v }).(HorreumSpecKeycloakRouteOutput)
}

// Hostname for external access.
func (o HorreumSpecKeycloakRoutePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecKeycloakRoute) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
func (o HorreumSpecKeycloakRoutePtrOutput) Tls() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecKeycloakRoute) *string {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.StringPtrOutput)
}

// PostgreSQL specification
type HorreumSpecPostgres struct {
	// Secret used for unrestricted access to the database. Created if does not exist. Must contain keys `username` and `password`.
	AdminSecret *string `pulumi:"adminSecret"`
	// Hostname of the external database. If empty, database will be deployed by this operator.
	ExternalHost *string `pulumi:"externalHost"`
	// Port of the external database. Defaults to 5432.
	ExternalPort *int `pulumi:"externalPort"`
	// Image used for PostgreSQL deployment. Defaults to docker.io/postgres:12
	Image *string `pulumi:"image"`
	// Name of PVC where the database will store the data. If empty, ephemeral storage will be used.
	PersistentVolumeClaim *string `pulumi:"persistentVolumeClaim"`
}

// HorreumSpecPostgresInput is an input type that accepts HorreumSpecPostgresArgs and HorreumSpecPostgresOutput values.
// You can construct a concrete instance of `HorreumSpecPostgresInput` via:
//
//          HorreumSpecPostgresArgs{...}
type HorreumSpecPostgresInput interface {
	pulumi.Input

	ToHorreumSpecPostgresOutput() HorreumSpecPostgresOutput
	ToHorreumSpecPostgresOutputWithContext(context.Context) HorreumSpecPostgresOutput
}

// PostgreSQL specification
type HorreumSpecPostgresArgs struct {
	// Secret used for unrestricted access to the database. Created if does not exist. Must contain keys `username` and `password`.
	AdminSecret pulumi.StringPtrInput `pulumi:"adminSecret"`
	// Hostname of the external database. If empty, database will be deployed by this operator.
	ExternalHost pulumi.StringPtrInput `pulumi:"externalHost"`
	// Port of the external database. Defaults to 5432.
	ExternalPort pulumi.IntPtrInput `pulumi:"externalPort"`
	// Image used for PostgreSQL deployment. Defaults to docker.io/postgres:12
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Name of PVC where the database will store the data. If empty, ephemeral storage will be used.
	PersistentVolumeClaim pulumi.StringPtrInput `pulumi:"persistentVolumeClaim"`
}

func (HorreumSpecPostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpecPostgres)(nil)).Elem()
}

func (i HorreumSpecPostgresArgs) ToHorreumSpecPostgresOutput() HorreumSpecPostgresOutput {
	return i.ToHorreumSpecPostgresOutputWithContext(context.Background())
}

func (i HorreumSpecPostgresArgs) ToHorreumSpecPostgresOutputWithContext(ctx context.Context) HorreumSpecPostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecPostgresOutput)
}

func (i HorreumSpecPostgresArgs) ToHorreumSpecPostgresPtrOutput() HorreumSpecPostgresPtrOutput {
	return i.ToHorreumSpecPostgresPtrOutputWithContext(context.Background())
}

func (i HorreumSpecPostgresArgs) ToHorreumSpecPostgresPtrOutputWithContext(ctx context.Context) HorreumSpecPostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecPostgresOutput).ToHorreumSpecPostgresPtrOutputWithContext(ctx)
}

// HorreumSpecPostgresPtrInput is an input type that accepts HorreumSpecPostgresArgs, HorreumSpecPostgresPtr and HorreumSpecPostgresPtrOutput values.
// You can construct a concrete instance of `HorreumSpecPostgresPtrInput` via:
//
//          HorreumSpecPostgresArgs{...}
//
//  or:
//
//          nil
type HorreumSpecPostgresPtrInput interface {
	pulumi.Input

	ToHorreumSpecPostgresPtrOutput() HorreumSpecPostgresPtrOutput
	ToHorreumSpecPostgresPtrOutputWithContext(context.Context) HorreumSpecPostgresPtrOutput
}

type horreumSpecPostgresPtrType HorreumSpecPostgresArgs

func HorreumSpecPostgresPtr(v *HorreumSpecPostgresArgs) HorreumSpecPostgresPtrInput {
	return (*horreumSpecPostgresPtrType)(v)
}

func (*horreumSpecPostgresPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpecPostgres)(nil)).Elem()
}

func (i *horreumSpecPostgresPtrType) ToHorreumSpecPostgresPtrOutput() HorreumSpecPostgresPtrOutput {
	return i.ToHorreumSpecPostgresPtrOutputWithContext(context.Background())
}

func (i *horreumSpecPostgresPtrType) ToHorreumSpecPostgresPtrOutputWithContext(ctx context.Context) HorreumSpecPostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecPostgresPtrOutput)
}

// PostgreSQL specification
type HorreumSpecPostgresOutput struct{ *pulumi.OutputState }

func (HorreumSpecPostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpecPostgres)(nil)).Elem()
}

func (o HorreumSpecPostgresOutput) ToHorreumSpecPostgresOutput() HorreumSpecPostgresOutput {
	return o
}

func (o HorreumSpecPostgresOutput) ToHorreumSpecPostgresOutputWithContext(ctx context.Context) HorreumSpecPostgresOutput {
	return o
}

func (o HorreumSpecPostgresOutput) ToHorreumSpecPostgresPtrOutput() HorreumSpecPostgresPtrOutput {
	return o.ToHorreumSpecPostgresPtrOutputWithContext(context.Background())
}

func (o HorreumSpecPostgresOutput) ToHorreumSpecPostgresPtrOutputWithContext(ctx context.Context) HorreumSpecPostgresPtrOutput {
	return o.ApplyT(func(v HorreumSpecPostgres) *HorreumSpecPostgres {
		return &v
	}).(HorreumSpecPostgresPtrOutput)
}

// Secret used for unrestricted access to the database. Created if does not exist. Must contain keys `username` and `password`.
func (o HorreumSpecPostgresOutput) AdminSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecPostgres) *string { return v.AdminSecret }).(pulumi.StringPtrOutput)
}

// Hostname of the external database. If empty, database will be deployed by this operator.
func (o HorreumSpecPostgresOutput) ExternalHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecPostgres) *string { return v.ExternalHost }).(pulumi.StringPtrOutput)
}

// Port of the external database. Defaults to 5432.
func (o HorreumSpecPostgresOutput) ExternalPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HorreumSpecPostgres) *int { return v.ExternalPort }).(pulumi.IntPtrOutput)
}

// Image used for PostgreSQL deployment. Defaults to docker.io/postgres:12
func (o HorreumSpecPostgresOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecPostgres) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Name of PVC where the database will store the data. If empty, ephemeral storage will be used.
func (o HorreumSpecPostgresOutput) PersistentVolumeClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecPostgres) *string { return v.PersistentVolumeClaim }).(pulumi.StringPtrOutput)
}

type HorreumSpecPostgresPtrOutput struct{ *pulumi.OutputState }

func (HorreumSpecPostgresPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpecPostgres)(nil)).Elem()
}

func (o HorreumSpecPostgresPtrOutput) ToHorreumSpecPostgresPtrOutput() HorreumSpecPostgresPtrOutput {
	return o
}

func (o HorreumSpecPostgresPtrOutput) ToHorreumSpecPostgresPtrOutputWithContext(ctx context.Context) HorreumSpecPostgresPtrOutput {
	return o
}

func (o HorreumSpecPostgresPtrOutput) Elem() HorreumSpecPostgresOutput {
	return o.ApplyT(func(v *HorreumSpecPostgres) HorreumSpecPostgres { return *v }).(HorreumSpecPostgresOutput)
}

// Secret used for unrestricted access to the database. Created if does not exist. Must contain keys `username` and `password`.
func (o HorreumSpecPostgresPtrOutput) AdminSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecPostgres) *string {
		if v == nil {
			return nil
		}
		return v.AdminSecret
	}).(pulumi.StringPtrOutput)
}

// Hostname of the external database. If empty, database will be deployed by this operator.
func (o HorreumSpecPostgresPtrOutput) ExternalHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecPostgres) *string {
		if v == nil {
			return nil
		}
		return v.ExternalHost
	}).(pulumi.StringPtrOutput)
}

// Port of the external database. Defaults to 5432.
func (o HorreumSpecPostgresPtrOutput) ExternalPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HorreumSpecPostgres) *int {
		if v == nil {
			return nil
		}
		return v.ExternalPort
	}).(pulumi.IntPtrOutput)
}

// Image used for PostgreSQL deployment. Defaults to docker.io/postgres:12
func (o HorreumSpecPostgresPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecPostgres) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Name of PVC where the database will store the data. If empty, ephemeral storage will be used.
func (o HorreumSpecPostgresPtrOutput) PersistentVolumeClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecPostgres) *string {
		if v == nil {
			return nil
		}
		return v.PersistentVolumeClaim
	}).(pulumi.StringPtrOutput)
}

// Hyperfoil report tool specification
type HorreumSpecReport struct {
	// True (or omitted) to deploy report pod.
	Enabled *bool `pulumi:"enabled"`
	// Image of the report tool. Defaults to quay.io/hyperfoil/hyperfoil-report:latest
	Image *string `pulumi:"image"`
	// Name of PVC where the reports will be stored. If empty, ephemeral storage will be used.
	PersistentVolumeClaim *string `pulumi:"persistentVolumeClaim"`
	// Route for external access.
	Route *HorreumSpecReportRoute `pulumi:"route"`
}

// HorreumSpecReportInput is an input type that accepts HorreumSpecReportArgs and HorreumSpecReportOutput values.
// You can construct a concrete instance of `HorreumSpecReportInput` via:
//
//          HorreumSpecReportArgs{...}
type HorreumSpecReportInput interface {
	pulumi.Input

	ToHorreumSpecReportOutput() HorreumSpecReportOutput
	ToHorreumSpecReportOutputWithContext(context.Context) HorreumSpecReportOutput
}

// Hyperfoil report tool specification
type HorreumSpecReportArgs struct {
	// True (or omitted) to deploy report pod.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Image of the report tool. Defaults to quay.io/hyperfoil/hyperfoil-report:latest
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Name of PVC where the reports will be stored. If empty, ephemeral storage will be used.
	PersistentVolumeClaim pulumi.StringPtrInput `pulumi:"persistentVolumeClaim"`
	// Route for external access.
	Route HorreumSpecReportRoutePtrInput `pulumi:"route"`
}

func (HorreumSpecReportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpecReport)(nil)).Elem()
}

func (i HorreumSpecReportArgs) ToHorreumSpecReportOutput() HorreumSpecReportOutput {
	return i.ToHorreumSpecReportOutputWithContext(context.Background())
}

func (i HorreumSpecReportArgs) ToHorreumSpecReportOutputWithContext(ctx context.Context) HorreumSpecReportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecReportOutput)
}

func (i HorreumSpecReportArgs) ToHorreumSpecReportPtrOutput() HorreumSpecReportPtrOutput {
	return i.ToHorreumSpecReportPtrOutputWithContext(context.Background())
}

func (i HorreumSpecReportArgs) ToHorreumSpecReportPtrOutputWithContext(ctx context.Context) HorreumSpecReportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecReportOutput).ToHorreumSpecReportPtrOutputWithContext(ctx)
}

// HorreumSpecReportPtrInput is an input type that accepts HorreumSpecReportArgs, HorreumSpecReportPtr and HorreumSpecReportPtrOutput values.
// You can construct a concrete instance of `HorreumSpecReportPtrInput` via:
//
//          HorreumSpecReportArgs{...}
//
//  or:
//
//          nil
type HorreumSpecReportPtrInput interface {
	pulumi.Input

	ToHorreumSpecReportPtrOutput() HorreumSpecReportPtrOutput
	ToHorreumSpecReportPtrOutputWithContext(context.Context) HorreumSpecReportPtrOutput
}

type horreumSpecReportPtrType HorreumSpecReportArgs

func HorreumSpecReportPtr(v *HorreumSpecReportArgs) HorreumSpecReportPtrInput {
	return (*horreumSpecReportPtrType)(v)
}

func (*horreumSpecReportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpecReport)(nil)).Elem()
}

func (i *horreumSpecReportPtrType) ToHorreumSpecReportPtrOutput() HorreumSpecReportPtrOutput {
	return i.ToHorreumSpecReportPtrOutputWithContext(context.Background())
}

func (i *horreumSpecReportPtrType) ToHorreumSpecReportPtrOutputWithContext(ctx context.Context) HorreumSpecReportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecReportPtrOutput)
}

// Hyperfoil report tool specification
type HorreumSpecReportOutput struct{ *pulumi.OutputState }

func (HorreumSpecReportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpecReport)(nil)).Elem()
}

func (o HorreumSpecReportOutput) ToHorreumSpecReportOutput() HorreumSpecReportOutput {
	return o
}

func (o HorreumSpecReportOutput) ToHorreumSpecReportOutputWithContext(ctx context.Context) HorreumSpecReportOutput {
	return o
}

func (o HorreumSpecReportOutput) ToHorreumSpecReportPtrOutput() HorreumSpecReportPtrOutput {
	return o.ToHorreumSpecReportPtrOutputWithContext(context.Background())
}

func (o HorreumSpecReportOutput) ToHorreumSpecReportPtrOutputWithContext(ctx context.Context) HorreumSpecReportPtrOutput {
	return o.ApplyT(func(v HorreumSpecReport) *HorreumSpecReport {
		return &v
	}).(HorreumSpecReportPtrOutput)
}

// True (or omitted) to deploy report pod.
func (o HorreumSpecReportOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HorreumSpecReport) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Image of the report tool. Defaults to quay.io/hyperfoil/hyperfoil-report:latest
func (o HorreumSpecReportOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecReport) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Name of PVC where the reports will be stored. If empty, ephemeral storage will be used.
func (o HorreumSpecReportOutput) PersistentVolumeClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecReport) *string { return v.PersistentVolumeClaim }).(pulumi.StringPtrOutput)
}

// Route for external access.
func (o HorreumSpecReportOutput) Route() HorreumSpecReportRoutePtrOutput {
	return o.ApplyT(func(v HorreumSpecReport) *HorreumSpecReportRoute { return v.Route }).(HorreumSpecReportRoutePtrOutput)
}

type HorreumSpecReportPtrOutput struct{ *pulumi.OutputState }

func (HorreumSpecReportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpecReport)(nil)).Elem()
}

func (o HorreumSpecReportPtrOutput) ToHorreumSpecReportPtrOutput() HorreumSpecReportPtrOutput {
	return o
}

func (o HorreumSpecReportPtrOutput) ToHorreumSpecReportPtrOutputWithContext(ctx context.Context) HorreumSpecReportPtrOutput {
	return o
}

func (o HorreumSpecReportPtrOutput) Elem() HorreumSpecReportOutput {
	return o.ApplyT(func(v *HorreumSpecReport) HorreumSpecReport { return *v }).(HorreumSpecReportOutput)
}

// True (or omitted) to deploy report pod.
func (o HorreumSpecReportPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HorreumSpecReport) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Image of the report tool. Defaults to quay.io/hyperfoil/hyperfoil-report:latest
func (o HorreumSpecReportPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecReport) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Name of PVC where the reports will be stored. If empty, ephemeral storage will be used.
func (o HorreumSpecReportPtrOutput) PersistentVolumeClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecReport) *string {
		if v == nil {
			return nil
		}
		return v.PersistentVolumeClaim
	}).(pulumi.StringPtrOutput)
}

// Route for external access.
func (o HorreumSpecReportPtrOutput) Route() HorreumSpecReportRoutePtrOutput {
	return o.ApplyT(func(v *HorreumSpecReport) *HorreumSpecReportRoute {
		if v == nil {
			return nil
		}
		return v.Route
	}).(HorreumSpecReportRoutePtrOutput)
}

// Route for external access.
type HorreumSpecReportRoute struct {
	// Hostname for external access.
	Host *string `pulumi:"host"`
	// Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
	Tls *string `pulumi:"tls"`
}

// HorreumSpecReportRouteInput is an input type that accepts HorreumSpecReportRouteArgs and HorreumSpecReportRouteOutput values.
// You can construct a concrete instance of `HorreumSpecReportRouteInput` via:
//
//          HorreumSpecReportRouteArgs{...}
type HorreumSpecReportRouteInput interface {
	pulumi.Input

	ToHorreumSpecReportRouteOutput() HorreumSpecReportRouteOutput
	ToHorreumSpecReportRouteOutputWithContext(context.Context) HorreumSpecReportRouteOutput
}

// Route for external access.
type HorreumSpecReportRouteArgs struct {
	// Hostname for external access.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
	Tls pulumi.StringPtrInput `pulumi:"tls"`
}

func (HorreumSpecReportRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpecReportRoute)(nil)).Elem()
}

func (i HorreumSpecReportRouteArgs) ToHorreumSpecReportRouteOutput() HorreumSpecReportRouteOutput {
	return i.ToHorreumSpecReportRouteOutputWithContext(context.Background())
}

func (i HorreumSpecReportRouteArgs) ToHorreumSpecReportRouteOutputWithContext(ctx context.Context) HorreumSpecReportRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecReportRouteOutput)
}

func (i HorreumSpecReportRouteArgs) ToHorreumSpecReportRoutePtrOutput() HorreumSpecReportRoutePtrOutput {
	return i.ToHorreumSpecReportRoutePtrOutputWithContext(context.Background())
}

func (i HorreumSpecReportRouteArgs) ToHorreumSpecReportRoutePtrOutputWithContext(ctx context.Context) HorreumSpecReportRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecReportRouteOutput).ToHorreumSpecReportRoutePtrOutputWithContext(ctx)
}

// HorreumSpecReportRoutePtrInput is an input type that accepts HorreumSpecReportRouteArgs, HorreumSpecReportRoutePtr and HorreumSpecReportRoutePtrOutput values.
// You can construct a concrete instance of `HorreumSpecReportRoutePtrInput` via:
//
//          HorreumSpecReportRouteArgs{...}
//
//  or:
//
//          nil
type HorreumSpecReportRoutePtrInput interface {
	pulumi.Input

	ToHorreumSpecReportRoutePtrOutput() HorreumSpecReportRoutePtrOutput
	ToHorreumSpecReportRoutePtrOutputWithContext(context.Context) HorreumSpecReportRoutePtrOutput
}

type horreumSpecReportRoutePtrType HorreumSpecReportRouteArgs

func HorreumSpecReportRoutePtr(v *HorreumSpecReportRouteArgs) HorreumSpecReportRoutePtrInput {
	return (*horreumSpecReportRoutePtrType)(v)
}

func (*horreumSpecReportRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpecReportRoute)(nil)).Elem()
}

func (i *horreumSpecReportRoutePtrType) ToHorreumSpecReportRoutePtrOutput() HorreumSpecReportRoutePtrOutput {
	return i.ToHorreumSpecReportRoutePtrOutputWithContext(context.Background())
}

func (i *horreumSpecReportRoutePtrType) ToHorreumSpecReportRoutePtrOutputWithContext(ctx context.Context) HorreumSpecReportRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecReportRoutePtrOutput)
}

// Route for external access.
type HorreumSpecReportRouteOutput struct{ *pulumi.OutputState }

func (HorreumSpecReportRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpecReportRoute)(nil)).Elem()
}

func (o HorreumSpecReportRouteOutput) ToHorreumSpecReportRouteOutput() HorreumSpecReportRouteOutput {
	return o
}

func (o HorreumSpecReportRouteOutput) ToHorreumSpecReportRouteOutputWithContext(ctx context.Context) HorreumSpecReportRouteOutput {
	return o
}

func (o HorreumSpecReportRouteOutput) ToHorreumSpecReportRoutePtrOutput() HorreumSpecReportRoutePtrOutput {
	return o.ToHorreumSpecReportRoutePtrOutputWithContext(context.Background())
}

func (o HorreumSpecReportRouteOutput) ToHorreumSpecReportRoutePtrOutputWithContext(ctx context.Context) HorreumSpecReportRoutePtrOutput {
	return o.ApplyT(func(v HorreumSpecReportRoute) *HorreumSpecReportRoute {
		return &v
	}).(HorreumSpecReportRoutePtrOutput)
}

// Hostname for external access.
func (o HorreumSpecReportRouteOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecReportRoute) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
func (o HorreumSpecReportRouteOutput) Tls() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecReportRoute) *string { return v.Tls }).(pulumi.StringPtrOutput)
}

type HorreumSpecReportRoutePtrOutput struct{ *pulumi.OutputState }

func (HorreumSpecReportRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpecReportRoute)(nil)).Elem()
}

func (o HorreumSpecReportRoutePtrOutput) ToHorreumSpecReportRoutePtrOutput() HorreumSpecReportRoutePtrOutput {
	return o
}

func (o HorreumSpecReportRoutePtrOutput) ToHorreumSpecReportRoutePtrOutputWithContext(ctx context.Context) HorreumSpecReportRoutePtrOutput {
	return o
}

func (o HorreumSpecReportRoutePtrOutput) Elem() HorreumSpecReportRouteOutput {
	return o.ApplyT(func(v *HorreumSpecReportRoute) HorreumSpecReportRoute { return *v }).(HorreumSpecReportRouteOutput)
}

// Hostname for external access.
func (o HorreumSpecReportRoutePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecReportRoute) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
func (o HorreumSpecReportRoutePtrOutput) Tls() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecReportRoute) *string {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.StringPtrOutput)
}

// Route for external access.
type HorreumSpecRoute struct {
	// Hostname for external access.
	Host *string `pulumi:"host"`
	// Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
	Tls *string `pulumi:"tls"`
}

// HorreumSpecRouteInput is an input type that accepts HorreumSpecRouteArgs and HorreumSpecRouteOutput values.
// You can construct a concrete instance of `HorreumSpecRouteInput` via:
//
//          HorreumSpecRouteArgs{...}
type HorreumSpecRouteInput interface {
	pulumi.Input

	ToHorreumSpecRouteOutput() HorreumSpecRouteOutput
	ToHorreumSpecRouteOutputWithContext(context.Context) HorreumSpecRouteOutput
}

// Route for external access.
type HorreumSpecRouteArgs struct {
	// Hostname for external access.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
	Tls pulumi.StringPtrInput `pulumi:"tls"`
}

func (HorreumSpecRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpecRoute)(nil)).Elem()
}

func (i HorreumSpecRouteArgs) ToHorreumSpecRouteOutput() HorreumSpecRouteOutput {
	return i.ToHorreumSpecRouteOutputWithContext(context.Background())
}

func (i HorreumSpecRouteArgs) ToHorreumSpecRouteOutputWithContext(ctx context.Context) HorreumSpecRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecRouteOutput)
}

func (i HorreumSpecRouteArgs) ToHorreumSpecRoutePtrOutput() HorreumSpecRoutePtrOutput {
	return i.ToHorreumSpecRoutePtrOutputWithContext(context.Background())
}

func (i HorreumSpecRouteArgs) ToHorreumSpecRoutePtrOutputWithContext(ctx context.Context) HorreumSpecRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecRouteOutput).ToHorreumSpecRoutePtrOutputWithContext(ctx)
}

// HorreumSpecRoutePtrInput is an input type that accepts HorreumSpecRouteArgs, HorreumSpecRoutePtr and HorreumSpecRoutePtrOutput values.
// You can construct a concrete instance of `HorreumSpecRoutePtrInput` via:
//
//          HorreumSpecRouteArgs{...}
//
//  or:
//
//          nil
type HorreumSpecRoutePtrInput interface {
	pulumi.Input

	ToHorreumSpecRoutePtrOutput() HorreumSpecRoutePtrOutput
	ToHorreumSpecRoutePtrOutputWithContext(context.Context) HorreumSpecRoutePtrOutput
}

type horreumSpecRoutePtrType HorreumSpecRouteArgs

func HorreumSpecRoutePtr(v *HorreumSpecRouteArgs) HorreumSpecRoutePtrInput {
	return (*horreumSpecRoutePtrType)(v)
}

func (*horreumSpecRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpecRoute)(nil)).Elem()
}

func (i *horreumSpecRoutePtrType) ToHorreumSpecRoutePtrOutput() HorreumSpecRoutePtrOutput {
	return i.ToHorreumSpecRoutePtrOutputWithContext(context.Background())
}

func (i *horreumSpecRoutePtrType) ToHorreumSpecRoutePtrOutputWithContext(ctx context.Context) HorreumSpecRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumSpecRoutePtrOutput)
}

// Route for external access.
type HorreumSpecRouteOutput struct{ *pulumi.OutputState }

func (HorreumSpecRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumSpecRoute)(nil)).Elem()
}

func (o HorreumSpecRouteOutput) ToHorreumSpecRouteOutput() HorreumSpecRouteOutput {
	return o
}

func (o HorreumSpecRouteOutput) ToHorreumSpecRouteOutputWithContext(ctx context.Context) HorreumSpecRouteOutput {
	return o
}

func (o HorreumSpecRouteOutput) ToHorreumSpecRoutePtrOutput() HorreumSpecRoutePtrOutput {
	return o.ToHorreumSpecRoutePtrOutputWithContext(context.Background())
}

func (o HorreumSpecRouteOutput) ToHorreumSpecRoutePtrOutputWithContext(ctx context.Context) HorreumSpecRoutePtrOutput {
	return o.ApplyT(func(v HorreumSpecRoute) *HorreumSpecRoute {
		return &v
	}).(HorreumSpecRoutePtrOutput)
}

// Hostname for external access.
func (o HorreumSpecRouteOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecRoute) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
func (o HorreumSpecRouteOutput) Tls() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumSpecRoute) *string { return v.Tls }).(pulumi.StringPtrOutput)
}

type HorreumSpecRoutePtrOutput struct{ *pulumi.OutputState }

func (HorreumSpecRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumSpecRoute)(nil)).Elem()
}

func (o HorreumSpecRoutePtrOutput) ToHorreumSpecRoutePtrOutput() HorreumSpecRoutePtrOutput {
	return o
}

func (o HorreumSpecRoutePtrOutput) ToHorreumSpecRoutePtrOutputWithContext(ctx context.Context) HorreumSpecRoutePtrOutput {
	return o
}

func (o HorreumSpecRoutePtrOutput) Elem() HorreumSpecRouteOutput {
	return o.ApplyT(func(v *HorreumSpecRoute) HorreumSpecRoute { return *v }).(HorreumSpecRouteOutput)
}

// Hostname for external access.
func (o HorreumSpecRoutePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecRoute) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
func (o HorreumSpecRoutePtrOutput) Tls() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumSpecRoute) *string {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.StringPtrOutput)
}

// HorreumStatus defines the observed state of Horreum
type HorreumStatus struct {
	// Last time state has changed.
	LastUpdate *string `pulumi:"lastUpdate"`
	// Explanation for the current status.
	Reason *string `pulumi:"reason"`
	// Ready, Pending or Error.
	Status *string `pulumi:"status"`
}

// HorreumStatusInput is an input type that accepts HorreumStatusArgs and HorreumStatusOutput values.
// You can construct a concrete instance of `HorreumStatusInput` via:
//
//          HorreumStatusArgs{...}
type HorreumStatusInput interface {
	pulumi.Input

	ToHorreumStatusOutput() HorreumStatusOutput
	ToHorreumStatusOutputWithContext(context.Context) HorreumStatusOutput
}

// HorreumStatus defines the observed state of Horreum
type HorreumStatusArgs struct {
	// Last time state has changed.
	LastUpdate pulumi.StringPtrInput `pulumi:"lastUpdate"`
	// Explanation for the current status.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Ready, Pending or Error.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (HorreumStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumStatus)(nil)).Elem()
}

func (i HorreumStatusArgs) ToHorreumStatusOutput() HorreumStatusOutput {
	return i.ToHorreumStatusOutputWithContext(context.Background())
}

func (i HorreumStatusArgs) ToHorreumStatusOutputWithContext(ctx context.Context) HorreumStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumStatusOutput)
}

func (i HorreumStatusArgs) ToHorreumStatusPtrOutput() HorreumStatusPtrOutput {
	return i.ToHorreumStatusPtrOutputWithContext(context.Background())
}

func (i HorreumStatusArgs) ToHorreumStatusPtrOutputWithContext(ctx context.Context) HorreumStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumStatusOutput).ToHorreumStatusPtrOutputWithContext(ctx)
}

// HorreumStatusPtrInput is an input type that accepts HorreumStatusArgs, HorreumStatusPtr and HorreumStatusPtrOutput values.
// You can construct a concrete instance of `HorreumStatusPtrInput` via:
//
//          HorreumStatusArgs{...}
//
//  or:
//
//          nil
type HorreumStatusPtrInput interface {
	pulumi.Input

	ToHorreumStatusPtrOutput() HorreumStatusPtrOutput
	ToHorreumStatusPtrOutputWithContext(context.Context) HorreumStatusPtrOutput
}

type horreumStatusPtrType HorreumStatusArgs

func HorreumStatusPtr(v *HorreumStatusArgs) HorreumStatusPtrInput {
	return (*horreumStatusPtrType)(v)
}

func (*horreumStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumStatus)(nil)).Elem()
}

func (i *horreumStatusPtrType) ToHorreumStatusPtrOutput() HorreumStatusPtrOutput {
	return i.ToHorreumStatusPtrOutputWithContext(context.Background())
}

func (i *horreumStatusPtrType) ToHorreumStatusPtrOutputWithContext(ctx context.Context) HorreumStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorreumStatusPtrOutput)
}

// HorreumStatus defines the observed state of Horreum
type HorreumStatusOutput struct{ *pulumi.OutputState }

func (HorreumStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorreumStatus)(nil)).Elem()
}

func (o HorreumStatusOutput) ToHorreumStatusOutput() HorreumStatusOutput {
	return o
}

func (o HorreumStatusOutput) ToHorreumStatusOutputWithContext(ctx context.Context) HorreumStatusOutput {
	return o
}

func (o HorreumStatusOutput) ToHorreumStatusPtrOutput() HorreumStatusPtrOutput {
	return o.ToHorreumStatusPtrOutputWithContext(context.Background())
}

func (o HorreumStatusOutput) ToHorreumStatusPtrOutputWithContext(ctx context.Context) HorreumStatusPtrOutput {
	return o.ApplyT(func(v HorreumStatus) *HorreumStatus {
		return &v
	}).(HorreumStatusPtrOutput)
}

// Last time state has changed.
func (o HorreumStatusOutput) LastUpdate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumStatus) *string { return v.LastUpdate }).(pulumi.StringPtrOutput)
}

// Explanation for the current status.
func (o HorreumStatusOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumStatus) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Ready, Pending or Error.
func (o HorreumStatusOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HorreumStatus) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type HorreumStatusPtrOutput struct{ *pulumi.OutputState }

func (HorreumStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorreumStatus)(nil)).Elem()
}

func (o HorreumStatusPtrOutput) ToHorreumStatusPtrOutput() HorreumStatusPtrOutput {
	return o
}

func (o HorreumStatusPtrOutput) ToHorreumStatusPtrOutputWithContext(ctx context.Context) HorreumStatusPtrOutput {
	return o
}

func (o HorreumStatusPtrOutput) Elem() HorreumStatusOutput {
	return o.ApplyT(func(v *HorreumStatus) HorreumStatus { return *v }).(HorreumStatusOutput)
}

// Last time state has changed.
func (o HorreumStatusPtrOutput) LastUpdate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdate
	}).(pulumi.StringPtrOutput)
}

// Explanation for the current status.
func (o HorreumStatusPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumStatus) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Ready, Pending or Error.
func (o HorreumStatusPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HorreumStatus) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(HorreumTypeOutput{})
	pulumi.RegisterOutputType(HorreumMetadataOutput{})
	pulumi.RegisterOutputType(HorreumSpecOutput{})
	pulumi.RegisterOutputType(HorreumSpecPtrOutput{})
	pulumi.RegisterOutputType(HorreumSpecDatabaseOutput{})
	pulumi.RegisterOutputType(HorreumSpecDatabasePtrOutput{})
	pulumi.RegisterOutputType(HorreumSpecKeycloakOutput{})
	pulumi.RegisterOutputType(HorreumSpecKeycloakPtrOutput{})
	pulumi.RegisterOutputType(HorreumSpecKeycloakDatabaseOutput{})
	pulumi.RegisterOutputType(HorreumSpecKeycloakDatabasePtrOutput{})
	pulumi.RegisterOutputType(HorreumSpecKeycloakRouteOutput{})
	pulumi.RegisterOutputType(HorreumSpecKeycloakRoutePtrOutput{})
	pulumi.RegisterOutputType(HorreumSpecPostgresOutput{})
	pulumi.RegisterOutputType(HorreumSpecPostgresPtrOutput{})
	pulumi.RegisterOutputType(HorreumSpecReportOutput{})
	pulumi.RegisterOutputType(HorreumSpecReportPtrOutput{})
	pulumi.RegisterOutputType(HorreumSpecReportRouteOutput{})
	pulumi.RegisterOutputType(HorreumSpecReportRoutePtrOutput{})
	pulumi.RegisterOutputType(HorreumSpecRouteOutput{})
	pulumi.RegisterOutputType(HorreumSpecRoutePtrOutput{})
	pulumi.RegisterOutputType(HorreumStatusOutput{})
	pulumi.RegisterOutputType(HorreumStatusPtrOutput{})
}

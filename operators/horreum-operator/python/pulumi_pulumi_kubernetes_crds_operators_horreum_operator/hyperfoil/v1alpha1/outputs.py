# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'HorreumSpec',
    'HorreumSpecDatabase',
    'HorreumSpecKeycloak',
    'HorreumSpecKeycloakDatabase',
    'HorreumSpecKeycloakRoute',
    'HorreumSpecPostgres',
    'HorreumSpecReport',
    'HorreumSpecReportRoute',
    'HorreumSpecRoute',
    'HorreumStatus',
]

@pulumi.output_type
class HorreumSpec(dict):
    """
    HorreumSpec defines the desired state of Horreum
    """
    def __init__(__self__, *,
                 database: Optional['outputs.HorreumSpecDatabase'] = None,
                 image: Optional[str] = None,
                 keycloak: Optional['outputs.HorreumSpecKeycloak'] = None,
                 postgres: Optional['outputs.HorreumSpecPostgres'] = None,
                 report: Optional['outputs.HorreumSpecReport'] = None,
                 route: Optional['outputs.HorreumSpecRoute'] = None):
        """
        HorreumSpec defines the desired state of Horreum
        :param 'HorreumSpecDatabaseArgs' database: Database coordinates for Horreum data. Besides `username` and `password` the secret must also contain key `dbsecret` that will be used to sign access to the database.
        :param str image: Horreum image. Defaults to quay.io/hyperfoil/horreum:latest
        :param 'HorreumSpecKeycloakArgs' keycloak: Keycloak specification
        :param 'HorreumSpecPostgresArgs' postgres: PostgreSQL specification
        :param 'HorreumSpecReportArgs' report: Hyperfoil report tool specification
        :param 'HorreumSpecRouteArgs' route: Route for external access.
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if keycloak is not None:
            pulumi.set(__self__, "keycloak", keycloak)
        if postgres is not None:
            pulumi.set(__self__, "postgres", postgres)
        if report is not None:
            pulumi.set(__self__, "report", report)
        if route is not None:
            pulumi.set(__self__, "route", route)

    @property
    @pulumi.getter
    def database(self) -> Optional['outputs.HorreumSpecDatabase']:
        """
        Database coordinates for Horreum data. Besides `username` and `password` the secret must also contain key `dbsecret` that will be used to sign access to the database.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Horreum image. Defaults to quay.io/hyperfoil/horreum:latest
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def keycloak(self) -> Optional['outputs.HorreumSpecKeycloak']:
        """
        Keycloak specification
        """
        return pulumi.get(self, "keycloak")

    @property
    @pulumi.getter
    def postgres(self) -> Optional['outputs.HorreumSpecPostgres']:
        """
        PostgreSQL specification
        """
        return pulumi.get(self, "postgres")

    @property
    @pulumi.getter
    def report(self) -> Optional['outputs.HorreumSpecReport']:
        """
        Hyperfoil report tool specification
        """
        return pulumi.get(self, "report")

    @property
    @pulumi.getter
    def route(self) -> Optional['outputs.HorreumSpecRoute']:
        """
        Route for external access.
        """
        return pulumi.get(self, "route")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorreumSpecDatabase(dict):
    """
    Database coordinates for Horreum data. Besides `username` and `password` the secret must also contain key `dbsecret` that will be used to sign access to the database.
    """
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 secret: Optional[str] = None):
        """
        Database coordinates for Horreum data. Besides `username` and `password` the secret must also contain key `dbsecret` that will be used to sign access to the database.
        :param str host: Hostname for the database
        :param str name: Name of the database
        :param int port: Database port; defaults to 5432
        :param str secret: Name of secret resource with data `username` and `password`. Created if does not exist.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Hostname for the database
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Database port; defaults to 5432
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        Name of secret resource with data `username` and `password`. Created if does not exist.
        """
        return pulumi.get(self, "secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorreumSpecKeycloak(dict):
    """
    Keycloak specification
    """
    def __init__(__self__, *,
                 admin_secret: Optional[str] = None,
                 database: Optional['outputs.HorreumSpecKeycloakDatabase'] = None,
                 external: Optional[bool] = None,
                 image: Optional[str] = None,
                 route: Optional['outputs.HorreumSpecKeycloakRoute'] = None):
        """
        Keycloak specification
        :param str admin_secret: Secret used for admin access to the deployed Keycloak instance. Created if does not exist. Must contain keys `username` and `password`.
        :param 'HorreumSpecKeycloakDatabaseArgs' database: Database coordinates Keycloak should use
        :param bool external: Set to true if the Keycloak instance should not be deployed
        :param str image: Image that should be used for Keycloak deployment. Defaults to docker.io/jboss/keycloak:latest
        :param 'HorreumSpecKeycloakRouteArgs' route: Route to be used for external access to the Keycloak instance. When `external` is set to true, this will be used for internal access as well.
        """
        if admin_secret is not None:
            pulumi.set(__self__, "admin_secret", admin_secret)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if route is not None:
            pulumi.set(__self__, "route", route)

    @property
    @pulumi.getter(name="adminSecret")
    def admin_secret(self) -> Optional[str]:
        """
        Secret used for admin access to the deployed Keycloak instance. Created if does not exist. Must contain keys `username` and `password`.
        """
        return pulumi.get(self, "admin_secret")

    @property
    @pulumi.getter
    def database(self) -> Optional['outputs.HorreumSpecKeycloakDatabase']:
        """
        Database coordinates Keycloak should use
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def external(self) -> Optional[bool]:
        """
        Set to true if the Keycloak instance should not be deployed
        """
        return pulumi.get(self, "external")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Image that should be used for Keycloak deployment. Defaults to docker.io/jboss/keycloak:latest
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def route(self) -> Optional['outputs.HorreumSpecKeycloakRoute']:
        """
        Route to be used for external access to the Keycloak instance. When `external` is set to true, this will be used for internal access as well.
        """
        return pulumi.get(self, "route")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorreumSpecKeycloakDatabase(dict):
    """
    Database coordinates Keycloak should use
    """
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 secret: Optional[str] = None):
        """
        Database coordinates Keycloak should use
        :param str host: Hostname for the database
        :param str name: Name of the database
        :param int port: Database port; defaults to 5432
        :param str secret: Name of secret resource with data `username` and `password`. Created if does not exist.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Hostname for the database
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Database port; defaults to 5432
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        Name of secret resource with data `username` and `password`. Created if does not exist.
        """
        return pulumi.get(self, "secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorreumSpecKeycloakRoute(dict):
    """
    Route to be used for external access to the Keycloak instance. When `external` is set to true, this will be used for internal access as well.
    """
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 tls: Optional[str] = None):
        """
        Route to be used for external access to the Keycloak instance. When `external` is set to true, this will be used for internal access as well.
        :param str host: Hostname for external access.
        :param str tls: Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Hostname for external access.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def tls(self) -> Optional[str]:
        """
        Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
        """
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorreumSpecPostgres(dict):
    """
    PostgreSQL specification
    """
    def __init__(__self__, *,
                 admin_secret: Optional[str] = None,
                 external_host: Optional[str] = None,
                 external_port: Optional[int] = None,
                 image: Optional[str] = None,
                 persistent_volume_claim: Optional[str] = None):
        """
        PostgreSQL specification
        :param str admin_secret: Secret used for unrestricted access to the database. Created if does not exist. Must contain keys `username` and `password`.
        :param str external_host: Hostname of the external database. If empty, database will be deployed by this operator.
        :param int external_port: Port of the external database. Defaults to 5432.
        :param str image: Image used for PostgreSQL deployment. Defaults to docker.io/postgres:12
        :param str persistent_volume_claim: Name of PVC where the database will store the data. If empty, ephemeral storage will be used.
        """
        if admin_secret is not None:
            pulumi.set(__self__, "admin_secret", admin_secret)
        if external_host is not None:
            pulumi.set(__self__, "external_host", external_host)
        if external_port is not None:
            pulumi.set(__self__, "external_port", external_port)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)

    @property
    @pulumi.getter(name="adminSecret")
    def admin_secret(self) -> Optional[str]:
        """
        Secret used for unrestricted access to the database. Created if does not exist. Must contain keys `username` and `password`.
        """
        return pulumi.get(self, "admin_secret")

    @property
    @pulumi.getter(name="externalHost")
    def external_host(self) -> Optional[str]:
        """
        Hostname of the external database. If empty, database will be deployed by this operator.
        """
        return pulumi.get(self, "external_host")

    @property
    @pulumi.getter(name="externalPort")
    def external_port(self) -> Optional[int]:
        """
        Port of the external database. Defaults to 5432.
        """
        return pulumi.get(self, "external_port")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Image used for PostgreSQL deployment. Defaults to docker.io/postgres:12
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional[str]:
        """
        Name of PVC where the database will store the data. If empty, ephemeral storage will be used.
        """
        return pulumi.get(self, "persistent_volume_claim")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorreumSpecReport(dict):
    """
    Hyperfoil report tool specification
    """
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 image: Optional[str] = None,
                 persistent_volume_claim: Optional[str] = None,
                 route: Optional['outputs.HorreumSpecReportRoute'] = None):
        """
        Hyperfoil report tool specification
        :param bool enabled: True (or omitted) to deploy report pod.
        :param str image: Image of the report tool. Defaults to quay.io/hyperfoil/hyperfoil-report:latest
        :param str persistent_volume_claim: Name of PVC where the reports will be stored. If empty, ephemeral storage will be used.
        :param 'HorreumSpecReportRouteArgs' route: Route for external access.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if route is not None:
            pulumi.set(__self__, "route", route)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        True (or omitted) to deploy report pod.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Image of the report tool. Defaults to quay.io/hyperfoil/hyperfoil-report:latest
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional[str]:
        """
        Name of PVC where the reports will be stored. If empty, ephemeral storage will be used.
        """
        return pulumi.get(self, "persistent_volume_claim")

    @property
    @pulumi.getter
    def route(self) -> Optional['outputs.HorreumSpecReportRoute']:
        """
        Route for external access.
        """
        return pulumi.get(self, "route")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorreumSpecReportRoute(dict):
    """
    Route for external access.
    """
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 tls: Optional[str] = None):
        """
        Route for external access.
        :param str host: Hostname for external access.
        :param str tls: Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Hostname for external access.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def tls(self) -> Optional[str]:
        """
        Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
        """
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorreumSpecRoute(dict):
    """
    Route for external access.
    """
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 tls: Optional[str] = None):
        """
        Route for external access.
        :param str host: Hostname for external access.
        :param str tls: Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Hostname for external access.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def tls(self) -> Optional[str]:
        """
        Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
        """
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorreumStatus(dict):
    """
    HorreumStatus defines the observed state of Horreum
    """
    def __init__(__self__, *,
                 last_update: Optional[str] = None,
                 reason: Optional[str] = None,
                 status: Optional[str] = None):
        """
        HorreumStatus defines the observed state of Horreum
        :param str last_update: Last time state has changed.
        :param str reason: Explanation for the current status.
        :param str status: Ready, Pending or Error.
        """
        if last_update is not None:
            pulumi.set(__self__, "last_update", last_update)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="lastUpdate")
    def last_update(self) -> Optional[str]:
        """
        Last time state has changed.
        """
        return pulumi.get(self, "last_update")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Explanation for the current status.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Ready, Pending or Error.
        """
        return pulumi.get(self, "status")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



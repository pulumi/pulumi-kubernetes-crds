# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'HorreumSpecArgs',
    'HorreumSpecDatabaseArgs',
    'HorreumSpecKeycloakArgs',
    'HorreumSpecKeycloakDatabaseArgs',
    'HorreumSpecKeycloakRouteArgs',
    'HorreumSpecPostgresArgs',
    'HorreumSpecReportArgs',
    'HorreumSpecReportRouteArgs',
    'HorreumSpecRouteArgs',
    'HorreumStatusArgs',
]

@pulumi.input_type
class HorreumSpecArgs:
    def __init__(__self__, *,
                 database: Optional[pulumi.Input['HorreumSpecDatabaseArgs']] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 keycloak: Optional[pulumi.Input['HorreumSpecKeycloakArgs']] = None,
                 postgres: Optional[pulumi.Input['HorreumSpecPostgresArgs']] = None,
                 report: Optional[pulumi.Input['HorreumSpecReportArgs']] = None,
                 route: Optional[pulumi.Input['HorreumSpecRouteArgs']] = None):
        """
        HorreumSpec defines the desired state of Horreum
        :param pulumi.Input['HorreumSpecDatabaseArgs'] database: Database coordinates for Horreum data. Besides `username` and `password` the secret must also contain key `dbsecret` that will be used to sign access to the database.
        :param pulumi.Input[str] image: Horreum image. Defaults to quay.io/hyperfoil/horreum:latest
        :param pulumi.Input['HorreumSpecKeycloakArgs'] keycloak: Keycloak specification
        :param pulumi.Input['HorreumSpecPostgresArgs'] postgres: PostgreSQL specification
        :param pulumi.Input['HorreumSpecReportArgs'] report: Hyperfoil report tool specification
        :param pulumi.Input['HorreumSpecRouteArgs'] route: Route for external access.
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if keycloak is not None:
            pulumi.set(__self__, "keycloak", keycloak)
        if postgres is not None:
            pulumi.set(__self__, "postgres", postgres)
        if report is not None:
            pulumi.set(__self__, "report", report)
        if route is not None:
            pulumi.set(__self__, "route", route)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input['HorreumSpecDatabaseArgs']]:
        """
        Database coordinates for Horreum data. Besides `username` and `password` the secret must also contain key `dbsecret` that will be used to sign access to the database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input['HorreumSpecDatabaseArgs']]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Horreum image. Defaults to quay.io/hyperfoil/horreum:latest
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def keycloak(self) -> Optional[pulumi.Input['HorreumSpecKeycloakArgs']]:
        """
        Keycloak specification
        """
        return pulumi.get(self, "keycloak")

    @keycloak.setter
    def keycloak(self, value: Optional[pulumi.Input['HorreumSpecKeycloakArgs']]):
        pulumi.set(self, "keycloak", value)

    @property
    @pulumi.getter
    def postgres(self) -> Optional[pulumi.Input['HorreumSpecPostgresArgs']]:
        """
        PostgreSQL specification
        """
        return pulumi.get(self, "postgres")

    @postgres.setter
    def postgres(self, value: Optional[pulumi.Input['HorreumSpecPostgresArgs']]):
        pulumi.set(self, "postgres", value)

    @property
    @pulumi.getter
    def report(self) -> Optional[pulumi.Input['HorreumSpecReportArgs']]:
        """
        Hyperfoil report tool specification
        """
        return pulumi.get(self, "report")

    @report.setter
    def report(self, value: Optional[pulumi.Input['HorreumSpecReportArgs']]):
        pulumi.set(self, "report", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input['HorreumSpecRouteArgs']]:
        """
        Route for external access.
        """
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input['HorreumSpecRouteArgs']]):
        pulumi.set(self, "route", value)


@pulumi.input_type
class HorreumSpecDatabaseArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        """
        Database coordinates for Horreum data. Besides `username` and `password` the secret must also contain key `dbsecret` that will be used to sign access to the database.
        :param pulumi.Input[str] host: Hostname for the database
        :param pulumi.Input[str] name: Name of the database
        :param pulumi.Input[int] port: Database port; defaults to 5432
        :param pulumi.Input[str] secret: Name of secret resource with data `username` and `password`. Created if does not exist.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname for the database
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Database port; defaults to 5432
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        Name of secret resource with data `username` and `password`. Created if does not exist.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class HorreumSpecKeycloakArgs:
    def __init__(__self__, *,
                 admin_secret: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input['HorreumSpecKeycloakDatabaseArgs']] = None,
                 external: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 route: Optional[pulumi.Input['HorreumSpecKeycloakRouteArgs']] = None):
        """
        Keycloak specification
        :param pulumi.Input[str] admin_secret: Secret used for admin access to the deployed Keycloak instance. Created if does not exist. Must contain keys `username` and `password`.
        :param pulumi.Input['HorreumSpecKeycloakDatabaseArgs'] database: Database coordinates Keycloak should use
        :param pulumi.Input[bool] external: Set to true if the Keycloak instance should not be deployed
        :param pulumi.Input[str] image: Image that should be used for Keycloak deployment. Defaults to docker.io/jboss/keycloak:latest
        :param pulumi.Input['HorreumSpecKeycloakRouteArgs'] route: Route to be used for external access to the Keycloak instance. When `external` is set to true, this will be used for internal access as well.
        """
        if admin_secret is not None:
            pulumi.set(__self__, "admin_secret", admin_secret)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if route is not None:
            pulumi.set(__self__, "route", route)

    @property
    @pulumi.getter(name="adminSecret")
    def admin_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Secret used for admin access to the deployed Keycloak instance. Created if does not exist. Must contain keys `username` and `password`.
        """
        return pulumi.get(self, "admin_secret")

    @admin_secret.setter
    def admin_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_secret", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input['HorreumSpecKeycloakDatabaseArgs']]:
        """
        Database coordinates Keycloak should use
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input['HorreumSpecKeycloakDatabaseArgs']]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true if the Keycloak instance should not be deployed
        """
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Image that should be used for Keycloak deployment. Defaults to docker.io/jboss/keycloak:latest
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input['HorreumSpecKeycloakRouteArgs']]:
        """
        Route to be used for external access to the Keycloak instance. When `external` is set to true, this will be used for internal access as well.
        """
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input['HorreumSpecKeycloakRouteArgs']]):
        pulumi.set(self, "route", value)


@pulumi.input_type
class HorreumSpecKeycloakDatabaseArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        """
        Database coordinates Keycloak should use
        :param pulumi.Input[str] host: Hostname for the database
        :param pulumi.Input[str] name: Name of the database
        :param pulumi.Input[int] port: Database port; defaults to 5432
        :param pulumi.Input[str] secret: Name of secret resource with data `username` and `password`. Created if does not exist.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname for the database
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Database port; defaults to 5432
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        Name of secret resource with data `username` and `password`. Created if does not exist.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class HorreumSpecKeycloakRouteArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input[str]] = None):
        """
        Route to be used for external access to the Keycloak instance. When `external` is set to true, this will be used for internal access as well.
        :param pulumi.Input[str] host: Hostname for external access.
        :param pulumi.Input[str] tls: Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname for external access.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[str]]:
        """
        Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class HorreumSpecPostgresArgs:
    def __init__(__self__, *,
                 admin_secret: Optional[pulumi.Input[str]] = None,
                 external_host: Optional[pulumi.Input[str]] = None,
                 external_port: Optional[pulumi.Input[int]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 persistent_volume_claim: Optional[pulumi.Input[str]] = None):
        """
        PostgreSQL specification
        :param pulumi.Input[str] admin_secret: Secret used for unrestricted access to the database. Created if does not exist. Must contain keys `username` and `password`.
        :param pulumi.Input[str] external_host: Hostname of the external database. If empty, database will be deployed by this operator.
        :param pulumi.Input[int] external_port: Port of the external database. Defaults to 5432.
        :param pulumi.Input[str] image: Image used for PostgreSQL deployment. Defaults to docker.io/postgres:12
        :param pulumi.Input[str] persistent_volume_claim: Name of PVC where the database will store the data. If empty, ephemeral storage will be used.
        """
        if admin_secret is not None:
            pulumi.set(__self__, "admin_secret", admin_secret)
        if external_host is not None:
            pulumi.set(__self__, "external_host", external_host)
        if external_port is not None:
            pulumi.set(__self__, "external_port", external_port)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)

    @property
    @pulumi.getter(name="adminSecret")
    def admin_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Secret used for unrestricted access to the database. Created if does not exist. Must contain keys `username` and `password`.
        """
        return pulumi.get(self, "admin_secret")

    @admin_secret.setter
    def admin_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_secret", value)

    @property
    @pulumi.getter(name="externalHost")
    def external_host(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname of the external database. If empty, database will be deployed by this operator.
        """
        return pulumi.get(self, "external_host")

    @external_host.setter
    def external_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_host", value)

    @property
    @pulumi.getter(name="externalPort")
    def external_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the external database. Defaults to 5432.
        """
        return pulumi.get(self, "external_port")

    @external_port.setter
    def external_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "external_port", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Image used for PostgreSQL deployment. Defaults to docker.io/postgres:12
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional[pulumi.Input[str]]:
        """
        Name of PVC where the database will store the data. If empty, ephemeral storage will be used.
        """
        return pulumi.get(self, "persistent_volume_claim")

    @persistent_volume_claim.setter
    def persistent_volume_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistent_volume_claim", value)


@pulumi.input_type
class HorreumSpecReportArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 persistent_volume_claim: Optional[pulumi.Input[str]] = None,
                 route: Optional[pulumi.Input['HorreumSpecReportRouteArgs']] = None):
        """
        Hyperfoil report tool specification
        :param pulumi.Input[bool] enabled: True (or omitted) to deploy report pod.
        :param pulumi.Input[str] image: Image of the report tool. Defaults to quay.io/hyperfoil/hyperfoil-report:latest
        :param pulumi.Input[str] persistent_volume_claim: Name of PVC where the reports will be stored. If empty, ephemeral storage will be used.
        :param pulumi.Input['HorreumSpecReportRouteArgs'] route: Route for external access.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if route is not None:
            pulumi.set(__self__, "route", route)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True (or omitted) to deploy report pod.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Image of the report tool. Defaults to quay.io/hyperfoil/hyperfoil-report:latest
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional[pulumi.Input[str]]:
        """
        Name of PVC where the reports will be stored. If empty, ephemeral storage will be used.
        """
        return pulumi.get(self, "persistent_volume_claim")

    @persistent_volume_claim.setter
    def persistent_volume_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistent_volume_claim", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input['HorreumSpecReportRouteArgs']]:
        """
        Route for external access.
        """
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input['HorreumSpecReportRouteArgs']]):
        pulumi.set(self, "route", value)


@pulumi.input_type
class HorreumSpecReportRouteArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input[str]] = None):
        """
        Route for external access.
        :param pulumi.Input[str] host: Hostname for external access.
        :param pulumi.Input[str] tls: Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname for external access.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[str]]:
        """
        Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class HorreumSpecRouteArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input[str]] = None):
        """
        Route for external access.
        :param pulumi.Input[str] host: Hostname for external access.
        :param pulumi.Input[str] tls: Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname for external access.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[str]]:
        """
        Optional; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class HorreumStatusArgs:
    def __init__(__self__, *,
                 last_update: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        HorreumStatus defines the observed state of Horreum
        :param pulumi.Input[str] last_update: Last time state has changed.
        :param pulumi.Input[str] reason: Explanation for the current status.
        :param pulumi.Input[str] status: Ready, Pending or Error.
        """
        if last_update is not None:
            pulumi.set(__self__, "last_update", last_update)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="lastUpdate")
    def last_update(self) -> Optional[pulumi.Input[str]]:
        """
        Last time state has changed.
        """
        return pulumi.get(self, "last_update")

    @last_update.setter
    def last_update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Explanation for the current status.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Ready, Pending or Error.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)



// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Deployable is the Schema for the deployables API
type Deployable struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// DeployableSpec defines the desired state of Deployable
	Spec DeployableSpecPtrOutput `pulumi:"spec"`
	// DeployableStatus defines the observed state of Deployable
	Status DeployableStatusPtrOutput `pulumi:"status"`
}

// NewDeployable registers a new resource with the given unique name, arguments, and options.
func NewDeployable(ctx *pulumi.Context,
	name string, args *DeployableArgs, opts ...pulumi.ResourceOption) (*Deployable, error) {
	if args == nil {
		args = &DeployableArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("apps.open-cluster-management.io/v1")
	args.Kind = pulumi.StringPtr("Deployable")
	var resource Deployable
	err := ctx.RegisterResource("kubernetes:apps.open-cluster-management.io/v1:Deployable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployable gets an existing Deployable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeployableState, opts ...pulumi.ResourceOption) (*Deployable, error) {
	var resource Deployable
	err := ctx.ReadResource("kubernetes:apps.open-cluster-management.io/v1:Deployable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Deployable resources.
type deployableState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// DeployableSpec defines the desired state of Deployable
	Spec *DeployableSpec `pulumi:"spec"`
	// DeployableStatus defines the observed state of Deployable
	Status *DeployableStatus `pulumi:"status"`
}

type DeployableState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// DeployableSpec defines the desired state of Deployable
	Spec DeployableSpecPtrInput
	// DeployableStatus defines the observed state of Deployable
	Status DeployableStatusPtrInput
}

func (DeployableState) ElementType() reflect.Type {
	return reflect.TypeOf((*deployableState)(nil)).Elem()
}

type deployableArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// DeployableSpec defines the desired state of Deployable
	Spec *DeployableSpec `pulumi:"spec"`
	// DeployableStatus defines the observed state of Deployable
	Status *DeployableStatus `pulumi:"status"`
}

// The set of arguments for constructing a Deployable resource.
type DeployableArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// DeployableSpec defines the desired state of Deployable
	Spec DeployableSpecPtrInput
	// DeployableStatus defines the observed state of Deployable
	Status DeployableStatusPtrInput
}

func (DeployableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deployableArgs)(nil)).Elem()
}

# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'ApplicationSpec',
    'ApplicationSpecComponentKinds',
    'ApplicationSpecDescriptor',
    'ApplicationSpecDescriptorIcons',
    'ApplicationSpecDescriptorLinks',
    'ApplicationSpecDescriptorMaintainers',
    'ApplicationSpecDescriptorOwners',
    'ApplicationSpecInfo',
    'ApplicationSpecInfoValueFrom',
    'ApplicationSpecInfoValueFromConfigMapKeyRef',
    'ApplicationSpecInfoValueFromIngressRef',
    'ApplicationSpecInfoValueFromSecretKeyRef',
    'ApplicationSpecInfoValueFromServiceRef',
    'ApplicationSpecSelector',
    'ApplicationSpecSelectorMatchExpressions',
    'ApplicationStatus',
    'ApplicationStatusComponents',
    'ApplicationStatusConditions',
]

@pulumi.output_type
class ApplicationSpec(dict):
    """
    ApplicationSpec defines the specification for an Application.
    """
    def __init__(__self__, *,
                 add_owner_ref: Optional[bool] = None,
                 assembly_phase: Optional[str] = None,
                 component_kinds: Optional[Sequence['outputs.ApplicationSpecComponentKinds']] = None,
                 descriptor: Optional['outputs.ApplicationSpecDescriptor'] = None,
                 info: Optional[Sequence['outputs.ApplicationSpecInfo']] = None,
                 selector: Optional['outputs.ApplicationSpecSelector'] = None):
        """
        ApplicationSpec defines the specification for an Application.
        :param bool add_owner_ref: AddOwnerRef objects - flag to indicate if we need to add OwnerRefs to matching objects Matching is done by using Selector to query all ComponentGroupKinds
        :param str assembly_phase: AssemblyPhase represents the current phase of the application's assembly. An empty value is equivalent to "Succeeded".
        :param Sequence['ApplicationSpecComponentKindsArgs'] component_kinds: ComponentGroupKinds is a list of Kinds for Application's components (e.g. Deployments, Pods, Services, CRDs). It can be used in conjunction with the Application's Selector to list or watch the Applications components.
        :param 'ApplicationSpecDescriptorArgs' descriptor: Descriptor regroups information and metadata about an application.
        :param Sequence['ApplicationSpecInfoArgs'] info: Info contains human readable key,value pairs for the Application.
        :param 'ApplicationSpecSelectorArgs' selector: Selector is a label query over kinds that created by the application. It must match the component objects' labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
        """
        if add_owner_ref is not None:
            pulumi.set(__self__, "add_owner_ref", add_owner_ref)
        if assembly_phase is not None:
            pulumi.set(__self__, "assembly_phase", assembly_phase)
        if component_kinds is not None:
            pulumi.set(__self__, "component_kinds", component_kinds)
        if descriptor is not None:
            pulumi.set(__self__, "descriptor", descriptor)
        if info is not None:
            pulumi.set(__self__, "info", info)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter(name="addOwnerRef")
    def add_owner_ref(self) -> Optional[bool]:
        """
        AddOwnerRef objects - flag to indicate if we need to add OwnerRefs to matching objects Matching is done by using Selector to query all ComponentGroupKinds
        """
        return pulumi.get(self, "add_owner_ref")

    @property
    @pulumi.getter(name="assemblyPhase")
    def assembly_phase(self) -> Optional[str]:
        """
        AssemblyPhase represents the current phase of the application's assembly. An empty value is equivalent to "Succeeded".
        """
        return pulumi.get(self, "assembly_phase")

    @property
    @pulumi.getter(name="componentKinds")
    def component_kinds(self) -> Optional[Sequence['outputs.ApplicationSpecComponentKinds']]:
        """
        ComponentGroupKinds is a list of Kinds for Application's components (e.g. Deployments, Pods, Services, CRDs). It can be used in conjunction with the Application's Selector to list or watch the Applications components.
        """
        return pulumi.get(self, "component_kinds")

    @property
    @pulumi.getter
    def descriptor(self) -> Optional['outputs.ApplicationSpecDescriptor']:
        """
        Descriptor regroups information and metadata about an application.
        """
        return pulumi.get(self, "descriptor")

    @property
    @pulumi.getter
    def info(self) -> Optional[Sequence['outputs.ApplicationSpecInfo']]:
        """
        Info contains human readable key,value pairs for the Application.
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ApplicationSpecSelector']:
        """
        Selector is a label query over kinds that created by the application. It must match the component objects' labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
        """
        return pulumi.get(self, "selector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecComponentKinds(dict):
    """
    GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
    """
    def __init__(__self__, *,
                 group: str,
                 kind: str):
        """
        GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def group(self) -> str:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecDescriptor(dict):
    """
    Descriptor regroups information and metadata about an application.
    """
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 icons: Optional[Sequence['outputs.ApplicationSpecDescriptorIcons']] = None,
                 keywords: Optional[Sequence[str]] = None,
                 links: Optional[Sequence['outputs.ApplicationSpecDescriptorLinks']] = None,
                 maintainers: Optional[Sequence['outputs.ApplicationSpecDescriptorMaintainers']] = None,
                 notes: Optional[str] = None,
                 owners: Optional[Sequence['outputs.ApplicationSpecDescriptorOwners']] = None,
                 type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Descriptor regroups information and metadata about an application.
        :param str description: Description is a brief string description of the Application.
        :param Sequence['ApplicationSpecDescriptorIconsArgs'] icons: Icons is an optional list of icons for an application. Icon information includes the source, size, and mime type.
        :param Sequence[str] keywords: Keywords is an optional list of key words associated with the application (e.g. MySQL, RDBMS, database).
        :param Sequence['ApplicationSpecDescriptorLinksArgs'] links: Links are a list of descriptive URLs intended to be used to surface additional documentation, dashboards, etc.
        :param Sequence['ApplicationSpecDescriptorMaintainersArgs'] maintainers: Maintainers is an optional list of maintainers of the application. The maintainers in this list maintain the the source code, images, and package for the application.
        :param str notes: Notes contain a human readable snippets intended as a quick start for the users of the Application. CommonMark markdown syntax may be used for rich text representation.
        :param Sequence['ApplicationSpecDescriptorOwnersArgs'] owners: Owners is an optional list of the owners of the installed application. The owners of the application should be contacted in the event of a planned or unplanned disruption affecting the application.
        :param str type: Type is the type of the application (e.g. WordPress, MySQL, Cassandra).
        :param str version: Version is an optional version indicator for the Application.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icons is not None:
            pulumi.set(__self__, "icons", icons)
        if keywords is not None:
            pulumi.set(__self__, "keywords", keywords)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if maintainers is not None:
            pulumi.set(__self__, "maintainers", maintainers)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if owners is not None:
            pulumi.set(__self__, "owners", owners)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description is a brief string description of the Application.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icons(self) -> Optional[Sequence['outputs.ApplicationSpecDescriptorIcons']]:
        """
        Icons is an optional list of icons for an application. Icon information includes the source, size, and mime type.
        """
        return pulumi.get(self, "icons")

    @property
    @pulumi.getter
    def keywords(self) -> Optional[Sequence[str]]:
        """
        Keywords is an optional list of key words associated with the application (e.g. MySQL, RDBMS, database).
        """
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['outputs.ApplicationSpecDescriptorLinks']]:
        """
        Links are a list of descriptive URLs intended to be used to surface additional documentation, dashboards, etc.
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def maintainers(self) -> Optional[Sequence['outputs.ApplicationSpecDescriptorMaintainers']]:
        """
        Maintainers is an optional list of maintainers of the application. The maintainers in this list maintain the the source code, images, and package for the application.
        """
        return pulumi.get(self, "maintainers")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        Notes contain a human readable snippets intended as a quick start for the users of the Application. CommonMark markdown syntax may be used for rich text representation.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def owners(self) -> Optional[Sequence['outputs.ApplicationSpecDescriptorOwners']]:
        """
        Owners is an optional list of the owners of the installed application. The owners of the application should be contacted in the event of a planned or unplanned disruption affecting the application.
        """
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type is the type of the application (e.g. WordPress, MySQL, Cassandra).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version is an optional version indicator for the Application.
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecDescriptorIcons(dict):
    """
    ImageSpec contains information about an image used as an icon.
    """
    def __init__(__self__, *,
                 src: str,
                 size: Optional[str] = None,
                 type: Optional[str] = None):
        """
        ImageSpec contains information about an image used as an icon.
        :param str src: The source for image represented as either an absolute URL to the image or a Data URL containing the image. Data URLs are defined in RFC 2397.
        :param str size: (optional) The size of the image in pixels (e.g., 25x25).
        :param str type: (optional) The mine type of the image (e.g., "image/png").
        """
        pulumi.set(__self__, "src", src)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def src(self) -> str:
        """
        The source for image represented as either an absolute URL to the image or a Data URL containing the image. Data URLs are defined in RFC 2397.
        """
        return pulumi.get(self, "src")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        (optional) The size of the image in pixels (e.g., 25x25).
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (optional) The mine type of the image (e.g., "image/png").
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecDescriptorLinks(dict):
    """
    Link contains information about an URL to surface documentation, dashboards, etc.
    """
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 url: Optional[str] = None):
        """
        Link contains information about an URL to surface documentation, dashboards, etc.
        :param str description: Description is human readable content explaining the purpose of the link.
        :param str url: Url typically points at a website address.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description is human readable content explaining the purpose of the link.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        Url typically points at a website address.
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecDescriptorMaintainers(dict):
    """
    ContactData contains information about an individual or organization.
    """
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 name: Optional[str] = None,
                 url: Optional[str] = None):
        """
        ContactData contains information about an individual or organization.
        :param str email: Email is the email address.
        :param str name: Name is the descriptive name.
        :param str url: Url could typically be a website address.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email is the email address.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the descriptive name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        Url could typically be a website address.
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecDescriptorOwners(dict):
    """
    ContactData contains information about an individual or organization.
    """
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 name: Optional[str] = None,
                 url: Optional[str] = None):
        """
        ContactData contains information about an individual or organization.
        :param str email: Email is the email address.
        :param str name: Name is the descriptive name.
        :param str url: Url could typically be a website address.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email is the email address.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the descriptive name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        Url could typically be a website address.
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecInfo(dict):
    """
    InfoItem is a human readable key,value pair containing important information about how to access the Application.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.ApplicationSpecInfoValueFrom'] = None):
        """
        InfoItem is a human readable key,value pair containing important information about how to access the Application.
        :param str name: Name is a human readable title for this piece of information.
        :param str type: Type of the value for this InfoItem.
        :param str value: Value is human readable content.
        :param 'ApplicationSpecInfoValueFromArgs' value_from: ValueFrom defines a reference to derive the value from another source.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is a human readable title for this piece of information.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the value for this InfoItem.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is human readable content.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.ApplicationSpecInfoValueFrom']:
        """
        ValueFrom defines a reference to derive the value from another source.
        """
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecInfoValueFrom(dict):
    """
    ValueFrom defines a reference to derive the value from another source.
    """
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.ApplicationSpecInfoValueFromConfigMapKeyRef'] = None,
                 ingress_ref: Optional['outputs.ApplicationSpecInfoValueFromIngressRef'] = None,
                 secret_key_ref: Optional['outputs.ApplicationSpecInfoValueFromSecretKeyRef'] = None,
                 service_ref: Optional['outputs.ApplicationSpecInfoValueFromServiceRef'] = None,
                 type: Optional[str] = None):
        """
        ValueFrom defines a reference to derive the value from another source.
        :param 'ApplicationSpecInfoValueFromConfigMapKeyRefArgs' config_map_key_ref: Selects a key of a ConfigMap.
        :param 'ApplicationSpecInfoValueFromIngressRefArgs' ingress_ref: Select an Ingress.
        :param 'ApplicationSpecInfoValueFromSecretKeyRefArgs' secret_key_ref: Selects a key of a Secret.
        :param 'ApplicationSpecInfoValueFromServiceRefArgs' service_ref: Select a Service.
        :param str type: Type of source.
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if ingress_ref is not None:
            pulumi.set(__self__, "ingress_ref", ingress_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)
        if service_ref is not None:
            pulumi.set(__self__, "service_ref", service_ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.ApplicationSpecInfoValueFromConfigMapKeyRef']:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="ingressRef")
    def ingress_ref(self) -> Optional['outputs.ApplicationSpecInfoValueFromIngressRef']:
        """
        Select an Ingress.
        """
        return pulumi.get(self, "ingress_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.ApplicationSpecInfoValueFromSecretKeyRef']:
        """
        Selects a key of a Secret.
        """
        return pulumi.get(self, "secret_key_ref")

    @property
    @pulumi.getter(name="serviceRef")
    def service_ref(self) -> Optional['outputs.ApplicationSpecInfoValueFromServiceRef']:
        """
        Select a Service.
        """
        return pulumi.get(self, "service_ref")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of source.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecInfoValueFromConfigMapKeyRef(dict):
    """
    Selects a key of a ConfigMap.
    """
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 field_path: Optional[str] = None,
                 key: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        """
        Selects a key of a ConfigMap.
        :param str api_version: API version of the referent.
        :param str field_path: If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        :param str key: The key to select.
        :param str kind: Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str namespace: Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str resource_version: Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param str uid: UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        API version of the referent.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[str]:
        """
        If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        """
        Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecInfoValueFromIngressRef(dict):
    """
    Select an Ingress.
    """
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 field_path: Optional[str] = None,
                 host: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 path: Optional[str] = None,
                 protocol: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        """
        Select an Ingress.
        :param str api_version: API version of the referent.
        :param str field_path: If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        :param str host: The optional host to select.
        :param str kind: Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str namespace: Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str path: The optional HTTP path.
        :param str protocol: Protocol for the ingress
        :param str resource_version: Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param str uid: UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        API version of the referent.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[str]:
        """
        If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The optional host to select.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The optional HTTP path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol for the ingress
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        """
        Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecInfoValueFromSecretKeyRef(dict):
    """
    Selects a key of a Secret.
    """
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 field_path: Optional[str] = None,
                 key: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        """
        Selects a key of a Secret.
        :param str api_version: API version of the referent.
        :param str field_path: If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        :param str key: The key to select.
        :param str kind: Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str namespace: Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str resource_version: Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param str uid: UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        API version of the referent.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[str]:
        """
        If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        """
        Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecInfoValueFromServiceRef(dict):
    """
    Select a Service.
    """
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 field_path: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 path: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        """
        Select a Service.
        :param str api_version: API version of the referent.
        :param str field_path: If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        :param str kind: Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str namespace: Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str path: The optional HTTP path.
        :param int port: The optional port to select.
        :param str protocol: Protocol for the service
        :param str resource_version: Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param str uid: UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        API version of the referent.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[str]:
        """
        If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The optional HTTP path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        The optional port to select.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol for the service
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        """
        Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSelector(dict):
    """
    Selector is a label query over kinds that created by the application. It must match the component objects' labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ApplicationSpecSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        Selector is a label query over kinds that created by the application. It must match the component objects' labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
        :param Sequence['ApplicationSpecSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ApplicationSpecSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationSpecSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatus(dict):
    """
    ApplicationStatus defines controller's the observed state of Application
    """
    def __init__(__self__, *,
                 components: Optional[Sequence['outputs.ApplicationStatusComponents']] = None,
                 components_ready: Optional[str] = None,
                 conditions: Optional[Sequence['outputs.ApplicationStatusConditions']] = None,
                 observed_generation: Optional[int] = None):
        """
        ApplicationStatus defines controller's the observed state of Application
        :param Sequence['ApplicationStatusComponentsArgs'] components: Object status array for all matching objects
        :param str components_ready: ComponentsReady: status of the components in the format ready/total
        :param Sequence['ApplicationStatusConditionsArgs'] conditions: Conditions represents the latest state of the object
        :param int observed_generation: ObservedGeneration is the most recent generation observed. It corresponds to the Object's generation, which is updated on mutation by the API Server.
        """
        if components is not None:
            pulumi.set(__self__, "components", components)
        if components_ready is not None:
            pulumi.set(__self__, "components_ready", components_ready)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter
    def components(self) -> Optional[Sequence['outputs.ApplicationStatusComponents']]:
        """
        Object status array for all matching objects
        """
        return pulumi.get(self, "components")

    @property
    @pulumi.getter(name="componentsReady")
    def components_ready(self) -> Optional[str]:
        """
        ComponentsReady: status of the components in the format ready/total
        """
        return pulumi.get(self, "components_ready")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ApplicationStatusConditions']]:
        """
        Conditions represents the latest state of the object
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        ObservedGeneration is the most recent generation observed. It corresponds to the Object's generation, which is updated on mutation by the API Server.
        """
        return pulumi.get(self, "observed_generation")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusComponents(dict):
    """
    ObjectStatus is a generic status holder for objects
    """
    def __init__(__self__, *,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 link: Optional[str] = None,
                 name: Optional[str] = None,
                 status: Optional[str] = None):
        """
        ObjectStatus is a generic status holder for objects
        :param str group: Object group
        :param str kind: Kind of object
        :param str link: Link to object
        :param str name: Name of object
        :param str status: Status. Values: InProgress, Ready, Unknown
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Object group
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of object
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        """
        Link to object
        """
        return pulumi.get(self, "link")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of object
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status. Values: InProgress, Ready, Unknown
        """
        return pulumi.get(self, "status")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApplicationStatusConditions(dict):
    """
    Condition describes the state of an object at a certain point.
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_transition_time: Optional[str] = None,
                 last_update_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        Condition describes the state of an object at a certain point.
        :param str status: Status of the condition, one of True, False, Unknown.
        :param str type: Type of condition.
        :param str last_transition_time: Last time the condition transitioned from one status to another.
        :param str last_update_time: Last time the condition was probed
        :param str message: A human readable message indicating details about the transition.
        :param str reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of condition.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[str]:
        """
        Last time the condition was probed
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AlamedaServiceType struct {
	ApiVersion *string                `pulumi:"apiVersion"`
	Kind       *string                `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec       map[string]interface{} `pulumi:"spec"`
	Status     map[string]interface{} `pulumi:"status"`
}

// AlamedaServiceTypeInput is an input type that accepts AlamedaServiceTypeArgs and AlamedaServiceTypeOutput values.
// You can construct a concrete instance of `AlamedaServiceTypeInput` via:
//
//          AlamedaServiceTypeArgs{...}
type AlamedaServiceTypeInput interface {
	pulumi.Input

	ToAlamedaServiceTypeOutput() AlamedaServiceTypeOutput
	ToAlamedaServiceTypeOutputWithContext(context.Context) AlamedaServiceTypeOutput
}

type AlamedaServiceTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       pulumi.MapInput           `pulumi:"spec"`
	Status     pulumi.MapInput           `pulumi:"status"`
}

func (AlamedaServiceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlamedaServiceType)(nil)).Elem()
}

func (i AlamedaServiceTypeArgs) ToAlamedaServiceTypeOutput() AlamedaServiceTypeOutput {
	return i.ToAlamedaServiceTypeOutputWithContext(context.Background())
}

func (i AlamedaServiceTypeArgs) ToAlamedaServiceTypeOutputWithContext(ctx context.Context) AlamedaServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlamedaServiceTypeOutput)
}

type AlamedaServiceTypeOutput struct{ *pulumi.OutputState }

func (AlamedaServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlamedaServiceType)(nil)).Elem()
}

func (o AlamedaServiceTypeOutput) ToAlamedaServiceTypeOutput() AlamedaServiceTypeOutput {
	return o
}

func (o AlamedaServiceTypeOutput) ToAlamedaServiceTypeOutputWithContext(ctx context.Context) AlamedaServiceTypeOutput {
	return o
}

func (o AlamedaServiceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlamedaServiceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o AlamedaServiceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlamedaServiceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o AlamedaServiceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v AlamedaServiceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o AlamedaServiceTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v AlamedaServiceType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

func (o AlamedaServiceTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v AlamedaServiceType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type AlamedaServiceMetadata struct {
}

// AlamedaServiceMetadataInput is an input type that accepts AlamedaServiceMetadataArgs and AlamedaServiceMetadataOutput values.
// You can construct a concrete instance of `AlamedaServiceMetadataInput` via:
//
//          AlamedaServiceMetadataArgs{...}
type AlamedaServiceMetadataInput interface {
	pulumi.Input

	ToAlamedaServiceMetadataOutput() AlamedaServiceMetadataOutput
	ToAlamedaServiceMetadataOutputWithContext(context.Context) AlamedaServiceMetadataOutput
}

type AlamedaServiceMetadataArgs struct {
}

func (AlamedaServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlamedaServiceMetadata)(nil)).Elem()
}

func (i AlamedaServiceMetadataArgs) ToAlamedaServiceMetadataOutput() AlamedaServiceMetadataOutput {
	return i.ToAlamedaServiceMetadataOutputWithContext(context.Background())
}

func (i AlamedaServiceMetadataArgs) ToAlamedaServiceMetadataOutputWithContext(ctx context.Context) AlamedaServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlamedaServiceMetadataOutput)
}

type AlamedaServiceMetadataOutput struct{ *pulumi.OutputState }

func (AlamedaServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlamedaServiceMetadata)(nil)).Elem()
}

func (o AlamedaServiceMetadataOutput) ToAlamedaServiceMetadataOutput() AlamedaServiceMetadataOutput {
	return o
}

func (o AlamedaServiceMetadataOutput) ToAlamedaServiceMetadataOutputWithContext(ctx context.Context) AlamedaServiceMetadataOutput {
	return o
}

type AlamedaServiceSpec struct {
}

// AlamedaServiceSpecInput is an input type that accepts AlamedaServiceSpecArgs and AlamedaServiceSpecOutput values.
// You can construct a concrete instance of `AlamedaServiceSpecInput` via:
//
//          AlamedaServiceSpecArgs{...}
type AlamedaServiceSpecInput interface {
	pulumi.Input

	ToAlamedaServiceSpecOutput() AlamedaServiceSpecOutput
	ToAlamedaServiceSpecOutputWithContext(context.Context) AlamedaServiceSpecOutput
}

type AlamedaServiceSpecArgs struct {
}

func (AlamedaServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlamedaServiceSpec)(nil)).Elem()
}

func (i AlamedaServiceSpecArgs) ToAlamedaServiceSpecOutput() AlamedaServiceSpecOutput {
	return i.ToAlamedaServiceSpecOutputWithContext(context.Background())
}

func (i AlamedaServiceSpecArgs) ToAlamedaServiceSpecOutputWithContext(ctx context.Context) AlamedaServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlamedaServiceSpecOutput)
}

type AlamedaServiceSpecOutput struct{ *pulumi.OutputState }

func (AlamedaServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlamedaServiceSpec)(nil)).Elem()
}

func (o AlamedaServiceSpecOutput) ToAlamedaServiceSpecOutput() AlamedaServiceSpecOutput {
	return o
}

func (o AlamedaServiceSpecOutput) ToAlamedaServiceSpecOutputWithContext(ctx context.Context) AlamedaServiceSpecOutput {
	return o
}

type AlamedaServiceStatus struct {
}

// AlamedaServiceStatusInput is an input type that accepts AlamedaServiceStatusArgs and AlamedaServiceStatusOutput values.
// You can construct a concrete instance of `AlamedaServiceStatusInput` via:
//
//          AlamedaServiceStatusArgs{...}
type AlamedaServiceStatusInput interface {
	pulumi.Input

	ToAlamedaServiceStatusOutput() AlamedaServiceStatusOutput
	ToAlamedaServiceStatusOutputWithContext(context.Context) AlamedaServiceStatusOutput
}

type AlamedaServiceStatusArgs struct {
}

func (AlamedaServiceStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlamedaServiceStatus)(nil)).Elem()
}

func (i AlamedaServiceStatusArgs) ToAlamedaServiceStatusOutput() AlamedaServiceStatusOutput {
	return i.ToAlamedaServiceStatusOutputWithContext(context.Background())
}

func (i AlamedaServiceStatusArgs) ToAlamedaServiceStatusOutputWithContext(ctx context.Context) AlamedaServiceStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlamedaServiceStatusOutput)
}

type AlamedaServiceStatusOutput struct{ *pulumi.OutputState }

func (AlamedaServiceStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlamedaServiceStatus)(nil)).Elem()
}

func (o AlamedaServiceStatusOutput) ToAlamedaServiceStatusOutput() AlamedaServiceStatusOutput {
	return o
}

func (o AlamedaServiceStatusOutput) ToAlamedaServiceStatusOutputWithContext(ctx context.Context) AlamedaServiceStatusOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AlamedaServiceTypeOutput{})
	pulumi.RegisterOutputType(AlamedaServiceMetadataOutput{})
	pulumi.RegisterOutputType(AlamedaServiceSpecOutput{})
	pulumi.RegisterOutputType(AlamedaServiceStatusOutput{})
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1
{

    [OutputType]
    public sealed class JaegerSpec
    {
        public readonly Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecAffinity Affinity;
        public readonly Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecAgent Agent;
        public readonly Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecAllInOne AllInOne;
        public readonly ImmutableDictionary<string, string> Annotations;
        public readonly Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecCollector Collector;
        public readonly Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecIngester Ingester;
        public readonly Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecIngress Ingress;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecQuery Query;
        public readonly Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecResources Resources;
        public readonly Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecSampling Sampling;
        public readonly Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecSecurityContext SecurityContext;
        public readonly string ServiceAccount;
        public readonly Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecStorage Storage;
        public readonly string Strategy;
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecTolerations> Tolerations;
        public readonly Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecUi Ui;
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecVolumeMounts> VolumeMounts;
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecVolumes> Volumes;

        [OutputConstructor]
        private JaegerSpec(
            Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecAffinity affinity,

            Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecAgent agent,

            Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecAllInOne allInOne,

            ImmutableDictionary<string, string> annotations,

            Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecCollector collector,

            Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecIngester ingester,

            Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecIngress ingress,

            ImmutableDictionary<string, string> labels,

            Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecQuery query,

            Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecResources resources,

            Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecSampling sampling,

            Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecSecurityContext securityContext,

            string serviceAccount,

            Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecStorage storage,

            string strategy,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecTolerations> tolerations,

            Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecUi ui,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecVolumeMounts> volumeMounts,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Jaegertracing.V1.JaegerSpecVolumes> volumes)
        {
            Affinity = affinity;
            Agent = agent;
            AllInOne = allInOne;
            Annotations = annotations;
            Collector = collector;
            Ingester = ingester;
            Ingress = ingress;
            Labels = labels;
            Query = query;
            Resources = resources;
            Sampling = sampling;
            SecurityContext = securityContext;
            ServiceAccount = serviceAccount;
            Storage = storage;
            Strategy = strategy;
            Tolerations = tolerations;
            Ui = ui;
            VolumeMounts = volumeMounts;
            Volumes = volumes;
        }
    }
}

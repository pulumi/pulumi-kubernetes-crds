// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace apm {
    export namespace v1 {
        /**
         * ApmServerSpec holds the specification of an APM Server.
         */
        export interface ApmServerSpec {
            /**
             * Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * Count of APM Server instances to deploy.
             */
            count?: pulumi.Input<number>;
            /**
             * ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
             */
            elasticsearchRef?: pulumi.Input<inputs.apm.v1.ApmServerSpecElasticsearchRef>;
            /**
             * HTTP holds the HTTP layer configuration for the APM Server resource.
             */
            http?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttp>;
            /**
             * Image is the APM Server Docker image to deploy.
             */
            image?: pulumi.Input<string>;
            /**
             * KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
             */
            kibanaRef?: pulumi.Input<inputs.apm.v1.ApmServerSpecKibanaRef>;
            /**
             * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            /**
             * SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for APM Server.
             */
            secureSettings?: pulumi.Input<pulumi.Input<inputs.apm.v1.ApmServerSpecSecureSettings>[]>;
            /**
             * ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * Version of the APM Server.
             */
            version: pulumi.Input<string>;
        }

        /**
         * ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
         */
        export interface ApmServerSpecElasticsearchRef {
            /**
             * Name of the Kubernetes object.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * HTTP holds the HTTP layer configuration for the APM Server resource.
         */
        export interface ApmServerSpecHttp {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpService>;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpTls>;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface ApmServerSpecHttpService {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * Spec is the specification of the service.
             */
            spec?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpServiceSpec>;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface ApmServerSpecHttpServiceSpec {
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: pulumi.Input<string>;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
             */
            externalName?: pulumi.Input<string>;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: pulumi.Input<string>;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
             */
            healthCheckNodePort?: pulumi.Input<number>;
            /**
             * ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
             */
            ipFamily?: pulumi.Input<string>;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: pulumi.Input<string>;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
             */
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: pulumi.Input<pulumi.Input<inputs.apm.v1.ApmServerSpecHttpServiceSpecPorts>[]>;
            /**
             * publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
             */
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: pulumi.Input<string>;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpServiceSpecSessionAffinityConfig>;
            /**
             * topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
             */
            topologyKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface ApmServerSpecHttpServiceSpecPorts {
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpServiceSpecPortsTargetPort>;
        }

        export interface ApmServerSpecHttpServiceSpecPortsTargetPort {
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface ApmServerSpecHttpServiceSpecSessionAffinityConfig {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP>;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface ApmServerSpecHttpTls {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpTlsCertificate>;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpTlsSelfSignedCertificate>;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface ApmServerSpecHttpTlsCertificate {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface ApmServerSpecHttpTlsSelfSignedCertificate {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: pulumi.Input<boolean>;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.apm.v1.ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames>[]>;
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: pulumi.Input<string>;
            /**
             * IP is the IP address of the subject.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
         */
        export interface ApmServerSpecKibanaRef {
            /**
             * Name of the Kubernetes object.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * SecretSource defines a data source based on a Kubernetes Secret.
         */
        export interface ApmServerSpecSecureSettings {
            /**
             * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
             */
            entries?: pulumi.Input<pulumi.Input<inputs.apm.v1.ApmServerSpecSecureSettingsEntries>[]>;
            /**
             * SecretName is the name of the secret.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * KeyToPath defines how to map a key in a Secret object to a filesystem path.
         */
        export interface ApmServerSpecSecureSettingsEntries {
            /**
             * Key is the key contained in the secret.
             */
            key: pulumi.Input<string>;
            /**
             * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
             */
            path?: pulumi.Input<string>;
        }

        /**
         * ApmServerStatus defines the observed state of ApmServer
         */
        export interface ApmServerStatus {
            availableNodes?: pulumi.Input<number>;
            /**
             * ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
             */
            elasticsearchAssociationStatus?: pulumi.Input<string>;
            /**
             * ApmServerHealth expresses the status of the Apm Server instances.
             */
            health?: pulumi.Input<string>;
            /**
             * KibanaAssociationStatus is the status of any auto-linking to Kibana.
             */
            kibanaAssociationStatus?: pulumi.Input<string>;
            /**
             * SecretTokenSecretName is the name of the Secret that contains the secret token
             */
            secretTokenSecret?: pulumi.Input<string>;
            /**
             * ExternalService is the name of the service the agents should connect to.
             */
            service?: pulumi.Input<string>;
        }
    }
}

export namespace beat {
    export namespace v1beta1 {
        /**
         * BeatSpec defines the desired state of a Beat.
         */
        export interface BeatSpec {
            /**
             * Config holds the Beat configuration. At most one of [`Config`, `ConfigRef`] can be specified.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * ConfigRef contains a reference to an existing Kubernetes Secret holding the Beat configuration. Beat settings must be specified as yaml, under a single "beat.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.
             */
            configRef?: pulumi.Input<inputs.beat.v1beta1.BeatSpecConfigRef>;
            /**
             * DaemonSet specifies the Beat should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`. If both are absent a default for the Type is used.
             */
            daemonSet?: pulumi.Input<inputs.beat.v1beta1.BeatSpecDaemonSet>;
            /**
             * Deployment specifies the Beat should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`. If both are absent a default for the Type is used.
             */
            deployment?: pulumi.Input<inputs.beat.v1beta1.BeatSpecDeployment>;
            /**
             * ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
             */
            elasticsearchRef?: pulumi.Input<inputs.beat.v1beta1.BeatSpecElasticsearchRef>;
            /**
             * Image is the Beat Docker image to deploy. Version and Type have to match the Beat in the image.
             */
            image?: pulumi.Input<string>;
            /**
             * KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows automatic setup of dashboards and visualizations.
             */
            kibanaRef?: pulumi.Input<inputs.beat.v1beta1.BeatSpecKibanaRef>;
            /**
             * SecureSettings is a list of references to Kubernetes Secrets containing sensitive configuration options for the Beat. Secrets data can be then referenced in the Beat config using the Secret's keys or as specified in `Entries` field of each SecureSetting.
             */
            secureSettings?: pulumi.Input<pulumi.Input<inputs.beat.v1beta1.BeatSpecSecureSettings>[]>;
            /**
             * ServiceAccountName is used to check access from the current resource to Elasticsearch resource in a different namespace. Can only be used if ECK is enforcing RBAC on references.
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * Type is the type of the Beat to deploy (filebeat, metricbeat, heartbeat, auditbeat, journalbeat, packetbeat, etc.). Any string can be used, but well-known types will have the image field defaulted and have the appropriate Elasticsearch roles created automatically. It also allows for dashboard setup when combined with a `KibanaRef`.
             */
            type: pulumi.Input<string>;
            /**
             * Version of the Beat.
             */
            version: pulumi.Input<string>;
        }

        /**
         * ConfigRef contains a reference to an existing Kubernetes Secret holding the Beat configuration. Beat settings must be specified as yaml, under a single "beat.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.
         */
        export interface BeatSpecConfigRef {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * DaemonSet specifies the Beat should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`. If both are absent a default for the Type is used.
         */
        export interface BeatSpecDaemonSet {
        }

        /**
         * Deployment specifies the Beat should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`. If both are absent a default for the Type is used.
         */
        export interface BeatSpecDeployment {
            replicas?: pulumi.Input<number>;
        }

        /**
         * ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
         */
        export interface BeatSpecElasticsearchRef {
            /**
             * Name of the Kubernetes object.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows automatic setup of dashboards and visualizations.
         */
        export interface BeatSpecKibanaRef {
            /**
             * Name of the Kubernetes object.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * SecretSource defines a data source based on a Kubernetes Secret.
         */
        export interface BeatSpecSecureSettings {
            /**
             * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
             */
            entries?: pulumi.Input<pulumi.Input<inputs.beat.v1beta1.BeatSpecSecureSettingsEntries>[]>;
            /**
             * SecretName is the name of the secret.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * KeyToPath defines how to map a key in a Secret object to a filesystem path.
         */
        export interface BeatSpecSecureSettingsEntries {
            /**
             * Key is the key contained in the secret.
             */
            key: pulumi.Input<string>;
            /**
             * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
             */
            path?: pulumi.Input<string>;
        }

        /**
         * BeatStatus defines the observed state of a Beat.
         */
        export interface BeatStatus {
            availableNodes?: pulumi.Input<number>;
            /**
             * AssociationStatus is the status of an association resource.
             */
            elasticsearchAssociationStatus?: pulumi.Input<string>;
            expectedNodes?: pulumi.Input<number>;
            health?: pulumi.Input<string>;
            /**
             * AssociationStatus is the status of an association resource.
             */
            kibanaAssociationStatus?: pulumi.Input<string>;
        }
    }
}

export namespace elasticsearch {
    export namespace v1 {
        /**
         * ElasticsearchSpec holds the specification of an Elasticsearch cluster.
         */
        export interface ElasticsearchSpec {
            /**
             * Auth contains user authentication and authorization security settings for Elasticsearch.
             */
            auth?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecAuth>;
            /**
             * HTTP holds HTTP layer settings for Elasticsearch.
             */
            http?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttp>;
            /**
             * Image is the Elasticsearch Docker image to deploy.
             */
            image?: pulumi.Input<string>;
            /**
             * NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
             */
            nodeSets: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSets>[]>;
            /**
             * PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster. The default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
             */
            podDisruptionBudget?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecPodDisruptionBudget>;
            /**
             * RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
             */
            remoteClusters?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecRemoteClusters>[]>;
            /**
             * SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
             */
            secureSettings?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecSecureSettings>[]>;
            /**
             * ServiceAccountName is used to check access from the current resource to a resource (eg. a remote Elasticsearch cluster) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * Transport holds transport layer settings for Elasticsearch.
             */
            transport?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransport>;
            /**
             * UpdateStrategy specifies how updates to the cluster should be performed.
             */
            updateStrategy?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecUpdateStrategy>;
            /**
             * Version of Elasticsearch.
             */
            version: pulumi.Input<string>;
        }

        /**
         * Auth contains user authentication and authorization security settings for Elasticsearch.
         */
        export interface ElasticsearchSpecAuth {
            /**
             * FileRealm to propagate to the Elasticsearch cluster.
             */
            fileRealm?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecAuthFileRealm>[]>;
            /**
             * Roles to propagate to the Elasticsearch cluster.
             */
            roles?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecAuthRoles>[]>;
        }

        /**
         * FileRealmSource references users to create in the Elasticsearch cluster.
         */
        export interface ElasticsearchSpecAuthFileRealm {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * RoleSource references roles to create in the Elasticsearch cluster.
         */
        export interface ElasticsearchSpecAuthRoles {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * HTTP holds HTTP layer settings for Elasticsearch.
         */
        export interface ElasticsearchSpecHttp {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpService>;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpTls>;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface ElasticsearchSpecHttpService {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * Spec is the specification of the service.
             */
            spec?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpServiceSpec>;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface ElasticsearchSpecHttpServiceSpec {
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: pulumi.Input<string>;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
             */
            externalName?: pulumi.Input<string>;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: pulumi.Input<string>;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
             */
            healthCheckNodePort?: pulumi.Input<number>;
            /**
             * ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
             */
            ipFamily?: pulumi.Input<string>;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: pulumi.Input<string>;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
             */
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpServiceSpecPorts>[]>;
            /**
             * publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
             */
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: pulumi.Input<string>;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpServiceSpecSessionAffinityConfig>;
            /**
             * topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
             */
            topologyKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface ElasticsearchSpecHttpServiceSpecPorts {
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpServiceSpecPortsTargetPort>;
        }

        export interface ElasticsearchSpecHttpServiceSpecPortsTargetPort {
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface ElasticsearchSpecHttpServiceSpecSessionAffinityConfig {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP>;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface ElasticsearchSpecHttpTls {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpTlsCertificate>;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpTlsSelfSignedCertificate>;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface ElasticsearchSpecHttpTlsCertificate {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface ElasticsearchSpecHttpTlsSelfSignedCertificate {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: pulumi.Input<boolean>;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames>[]>;
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: pulumi.Input<string>;
            /**
             * IP is the IP address of the subject.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
         */
        export interface ElasticsearchSpecNodeSets {
            /**
             * Config holds the Elasticsearch configuration.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * Count of Elasticsearch nodes to deploy.
             */
            count: pulumi.Input<number>;
            /**
             * Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
             */
            name: pulumi.Input<string>;
            /**
             * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            /**
             * VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet. Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate. Items defined here take precedence over any default claims added by the operator with the same name.
             */
            volumeClaimTemplates?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplates>[]>;
        }

        /**
         * PersistentVolumeClaim is a user's request for and claim to a persistent volume
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplates {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            spec?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec>;
            /**
             * Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            status?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus>;
        }

        /**
         * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
             */
            dataSource?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource>;
            /**
             * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources>;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector>;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesLimits>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesRequests>}>;
        }

        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesLimits {
        }

        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesRequests {
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus {
            /**
             * AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Represents the actual resources of the underlying volume.
             */
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusCapacity>}>;
            /**
             * Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions>[]>;
            /**
             * Phase represents the current phase of PersistentVolumeClaim.
             */
            phase?: pulumi.Input<string>;
        }

        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusCapacity {
        }

        /**
         * PersistentVolumeClaimCondition contails details about state of pvc
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions {
            /**
             * Last time we probed the condition.
             */
            lastProbeTime?: pulumi.Input<string>;
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
             */
            reason?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            /**
             * PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
             */
            type: pulumi.Input<string>;
        }

        /**
         * PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster. The default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
         */
        export interface ElasticsearchSpecPodDisruptionBudget {
            /**
             * ObjectMeta is the metadata of the PDB. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * Spec is the specification of the PDB.
             */
            spec?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecPodDisruptionBudgetSpec>;
        }

        /**
         * Spec is the specification of the PDB.
         */
        export interface ElasticsearchSpecPodDisruptionBudgetSpec {
            /**
             * An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
             */
            maxUnavailable?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecPodDisruptionBudgetSpecMaxUnavailable>;
            /**
             * An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
             */
            minAvailable?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecPodDisruptionBudgetSpecMinAvailable>;
            /**
             * Label query over pods whose evictions are managed by the disruption budget.
             */
            selector?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecPodDisruptionBudgetSpecSelector>;
        }

        export interface ElasticsearchSpecPodDisruptionBudgetSpecMaxUnavailable {
        }

        export interface ElasticsearchSpecPodDisruptionBudgetSpecMinAvailable {
        }

        /**
         * Label query over pods whose evictions are managed by the disruption budget.
         */
        export interface ElasticsearchSpecPodDisruptionBudgetSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * RemoteCluster declares a remote Elasticsearch cluster connection.
         */
        export interface ElasticsearchSpecRemoteClusters {
            /**
             * ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
             */
            elasticsearchRef?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecRemoteClustersElasticsearchRef>;
            /**
             * Name is the name of the remote cluster as it is set in the Elasticsearch settings. The name is expected to be unique for each remote clusters.
             */
            name: pulumi.Input<string>;
        }

        /**
         * ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
         */
        export interface ElasticsearchSpecRemoteClustersElasticsearchRef {
            /**
             * Name of the Kubernetes object.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * SecretSource defines a data source based on a Kubernetes Secret.
         */
        export interface ElasticsearchSpecSecureSettings {
            /**
             * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
             */
            entries?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecSecureSettingsEntries>[]>;
            /**
             * SecretName is the name of the secret.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * KeyToPath defines how to map a key in a Secret object to a filesystem path.
         */
        export interface ElasticsearchSpecSecureSettingsEntries {
            /**
             * Key is the key contained in the secret.
             */
            key: pulumi.Input<string>;
            /**
             * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
             */
            path?: pulumi.Input<string>;
        }

        /**
         * Transport holds transport layer settings for Elasticsearch.
         */
        export interface ElasticsearchSpecTransport {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransportService>;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface ElasticsearchSpecTransportService {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * Spec is the specification of the service.
             */
            spec?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransportServiceSpec>;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface ElasticsearchSpecTransportServiceSpec {
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: pulumi.Input<string>;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
             */
            externalName?: pulumi.Input<string>;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: pulumi.Input<string>;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
             */
            healthCheckNodePort?: pulumi.Input<number>;
            /**
             * ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
             */
            ipFamily?: pulumi.Input<string>;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: pulumi.Input<string>;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
             */
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransportServiceSpecPorts>[]>;
            /**
             * publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
             */
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: pulumi.Input<string>;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransportServiceSpecSessionAffinityConfig>;
            /**
             * topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
             */
            topologyKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface ElasticsearchSpecTransportServiceSpecPorts {
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransportServiceSpecPortsTargetPort>;
        }

        export interface ElasticsearchSpecTransportServiceSpecPortsTargetPort {
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface ElasticsearchSpecTransportServiceSpecSessionAffinityConfig {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP>;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * UpdateStrategy specifies how updates to the cluster should be performed.
         */
        export interface ElasticsearchSpecUpdateStrategy {
            /**
             * ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
             */
            changeBudget?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecUpdateStrategyChangeBudget>;
        }

        /**
         * ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
         */
        export interface ElasticsearchSpecUpdateStrategyChangeBudget {
            /**
             * MaxSurge is the maximum number of new pods that can be created exceeding the original number of pods defined in the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will disable the restriction. Defaults to unbounded if not specified.
             */
            maxSurge?: pulumi.Input<number>;
            /**
             * MaxUnavailable is the maximum number of pods that can be unavailable (not ready) during the update due to circumstances under the control of the operator. Setting a negative value will disable this restriction. Defaults to 1 if not specified.
             */
            maxUnavailable?: pulumi.Input<number>;
        }

        /**
         * ElasticsearchStatus defines the observed state of Elasticsearch
         */
        export interface ElasticsearchStatus {
            availableNodes?: pulumi.Input<number>;
            /**
             * ElasticsearchHealth is the health of the cluster as returned by the health API.
             */
            health?: pulumi.Input<string>;
            /**
             * ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
             */
            phase?: pulumi.Input<string>;
        }
    }
}

export namespace enterprisesearch {
    export namespace v1beta1 {
        /**
         * EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
         */
        export interface EnterpriseSearchSpec {
            /**
             * Config holds the Enterprise Search configuration.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration. Configuration settings are merged and have precedence over settings specified in `config`.
             */
            configRef?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecConfigRef>;
            /**
             * Count of Enterprise Search instances to deploy.
             */
            count?: pulumi.Input<number>;
            /**
             * ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
             */
            elasticsearchRef?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecElasticsearchRef>;
            /**
             * HTTP holds the HTTP layer configuration for Enterprise Search resource.
             */
            http?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttp>;
            /**
             * Image is the Enterprise Search Docker image to deploy.
             */
            image?: pulumi.Input<string>;
            /**
             * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Enterprise Search pods.
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            /**
             * ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * Version of Enterprise Search.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration. Configuration settings are merged and have precedence over settings specified in `config`.
         */
        export interface EnterpriseSearchSpecConfigRef {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
         */
        export interface EnterpriseSearchSpecElasticsearchRef {
            /**
             * Name of the Kubernetes object.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * HTTP holds the HTTP layer configuration for Enterprise Search resource.
         */
        export interface EnterpriseSearchSpecHttp {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpService>;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpTls>;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface EnterpriseSearchSpecHttpService {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * Spec is the specification of the service.
             */
            spec?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpServiceSpec>;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface EnterpriseSearchSpecHttpServiceSpec {
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: pulumi.Input<string>;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
             */
            externalName?: pulumi.Input<string>;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: pulumi.Input<string>;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
             */
            healthCheckNodePort?: pulumi.Input<number>;
            /**
             * ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
             */
            ipFamily?: pulumi.Input<string>;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: pulumi.Input<string>;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
             */
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: pulumi.Input<pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpServiceSpecPorts>[]>;
            /**
             * publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
             */
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: pulumi.Input<string>;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig>;
            /**
             * topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
             */
            topologyKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface EnterpriseSearchSpecHttpServiceSpecPorts {
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpServiceSpecPortsTargetPort>;
        }

        export interface EnterpriseSearchSpecHttpServiceSpecPortsTargetPort {
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP>;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface EnterpriseSearchSpecHttpTls {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpTlsCertificate>;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpTlsSelfSignedCertificate>;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface EnterpriseSearchSpecHttpTlsCertificate {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface EnterpriseSearchSpecHttpTlsSelfSignedCertificate {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: pulumi.Input<boolean>;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames>[]>;
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: pulumi.Input<string>;
            /**
             * IP is the IP address of the subject.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * EnterpriseSearchStatus defines the observed state of EnterpriseSearch
         */
        export interface EnterpriseSearchStatus {
            /**
             * Association is the status of any auto-linking to Elasticsearch clusters.
             */
            associationStatus?: pulumi.Input<string>;
            availableNodes?: pulumi.Input<number>;
            /**
             * EnterpriseSearchHealth expresses the health of the Enterprise Search instances.
             */
            health?: pulumi.Input<string>;
            /**
             * ExternalService is the name of the service associated to the Enterprise Search Pods.
             */
            service?: pulumi.Input<string>;
        }
    }
}

export namespace kibana {
    export namespace v1 {
        /**
         * KibanaSpec holds the specification of a Kibana instance.
         */
        export interface KibanaSpec {
            /**
             * Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * Count of Kibana instances to deploy.
             */
            count?: pulumi.Input<number>;
            /**
             * ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
             */
            elasticsearchRef?: pulumi.Input<inputs.kibana.v1.KibanaSpecElasticsearchRef>;
            /**
             * HTTP holds the HTTP layer configuration for Kibana.
             */
            http?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttp>;
            /**
             * Image is the Kibana Docker image to deploy.
             */
            image?: pulumi.Input<string>;
            /**
             * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            /**
             * SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
             */
            secureSettings?: pulumi.Input<pulumi.Input<inputs.kibana.v1.KibanaSpecSecureSettings>[]>;
            /**
             * ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * Version of Kibana.
             */
            version: pulumi.Input<string>;
        }

        /**
         * ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
         */
        export interface KibanaSpecElasticsearchRef {
            /**
             * Name of the Kubernetes object.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * HTTP holds the HTTP layer configuration for Kibana.
         */
        export interface KibanaSpecHttp {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpService>;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpTls>;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface KibanaSpecHttpService {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * Spec is the specification of the service.
             */
            spec?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpServiceSpec>;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface KibanaSpecHttpServiceSpec {
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: pulumi.Input<string>;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
             */
            externalName?: pulumi.Input<string>;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: pulumi.Input<string>;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
             */
            healthCheckNodePort?: pulumi.Input<number>;
            /**
             * ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
             */
            ipFamily?: pulumi.Input<string>;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: pulumi.Input<string>;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
             */
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: pulumi.Input<pulumi.Input<inputs.kibana.v1.KibanaSpecHttpServiceSpecPorts>[]>;
            /**
             * publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
             */
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: pulumi.Input<string>;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpServiceSpecSessionAffinityConfig>;
            /**
             * topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
             */
            topologyKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface KibanaSpecHttpServiceSpecPorts {
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpServiceSpecPortsTargetPort>;
        }

        export interface KibanaSpecHttpServiceSpecPortsTargetPort {
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface KibanaSpecHttpServiceSpecSessionAffinityConfig {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP>;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface KibanaSpecHttpTls {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpTlsCertificate>;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpTlsSelfSignedCertificate>;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface KibanaSpecHttpTlsCertificate {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface KibanaSpecHttpTlsSelfSignedCertificate {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: pulumi.Input<boolean>;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.kibana.v1.KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames>[]>;
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: pulumi.Input<string>;
            /**
             * IP is the IP address of the subject.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * SecretSource defines a data source based on a Kubernetes Secret.
         */
        export interface KibanaSpecSecureSettings {
            /**
             * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
             */
            entries?: pulumi.Input<pulumi.Input<inputs.kibana.v1.KibanaSpecSecureSettingsEntries>[]>;
            /**
             * SecretName is the name of the secret.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * KeyToPath defines how to map a key in a Secret object to a filesystem path.
         */
        export interface KibanaSpecSecureSettingsEntries {
            /**
             * Key is the key contained in the secret.
             */
            key: pulumi.Input<string>;
            /**
             * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
             */
            path?: pulumi.Input<string>;
        }

        /**
         * KibanaStatus defines the observed state of Kibana
         */
        export interface KibanaStatus {
            /**
             * AssociationStatus is the status of an association resource.
             */
            associationStatus?: pulumi.Input<string>;
            availableNodes?: pulumi.Input<number>;
            /**
             * KibanaHealth expresses the status of the Kibana instances.
             */
            health?: pulumi.Input<string>;
        }
    }
}

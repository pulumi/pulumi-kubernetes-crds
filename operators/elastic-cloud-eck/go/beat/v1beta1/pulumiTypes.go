// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Beat is the Schema for the Beats API.
type BeatType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// BeatSpec defines the desired state of a Beat.
	Spec *BeatSpec `pulumi:"spec"`
	// BeatStatus defines the observed state of a Beat.
	Status *BeatStatus `pulumi:"status"`
}

// BeatTypeInput is an input type that accepts BeatTypeArgs and BeatTypeOutput values.
// You can construct a concrete instance of `BeatTypeInput` via:
//
//          BeatTypeArgs{...}
type BeatTypeInput interface {
	pulumi.Input

	ToBeatTypeOutput() BeatTypeOutput
	ToBeatTypeOutputWithContext(context.Context) BeatTypeOutput
}

// Beat is the Schema for the Beats API.
type BeatTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// BeatSpec defines the desired state of a Beat.
	Spec BeatSpecPtrInput `pulumi:"spec"`
	// BeatStatus defines the observed state of a Beat.
	Status BeatStatusPtrInput `pulumi:"status"`
}

func (BeatTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatType)(nil)).Elem()
}

func (i BeatTypeArgs) ToBeatTypeOutput() BeatTypeOutput {
	return i.ToBeatTypeOutputWithContext(context.Background())
}

func (i BeatTypeArgs) ToBeatTypeOutputWithContext(ctx context.Context) BeatTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatTypeOutput)
}

// Beat is the Schema for the Beats API.
type BeatTypeOutput struct{ *pulumi.OutputState }

func (BeatTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatType)(nil)).Elem()
}

func (o BeatTypeOutput) ToBeatTypeOutput() BeatTypeOutput {
	return o
}

func (o BeatTypeOutput) ToBeatTypeOutputWithContext(ctx context.Context) BeatTypeOutput {
	return o
}

func (o BeatTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BeatType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o BeatTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BeatType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o BeatTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v BeatType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// BeatSpec defines the desired state of a Beat.
func (o BeatTypeOutput) Spec() BeatSpecPtrOutput {
	return o.ApplyT(func(v BeatType) *BeatSpec { return v.Spec }).(BeatSpecPtrOutput)
}

// BeatStatus defines the observed state of a Beat.
func (o BeatTypeOutput) Status() BeatStatusPtrOutput {
	return o.ApplyT(func(v BeatType) *BeatStatus { return v.Status }).(BeatStatusPtrOutput)
}

type BeatMetadata struct {
}

// BeatMetadataInput is an input type that accepts BeatMetadataArgs and BeatMetadataOutput values.
// You can construct a concrete instance of `BeatMetadataInput` via:
//
//          BeatMetadataArgs{...}
type BeatMetadataInput interface {
	pulumi.Input

	ToBeatMetadataOutput() BeatMetadataOutput
	ToBeatMetadataOutputWithContext(context.Context) BeatMetadataOutput
}

type BeatMetadataArgs struct {
}

func (BeatMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatMetadata)(nil)).Elem()
}

func (i BeatMetadataArgs) ToBeatMetadataOutput() BeatMetadataOutput {
	return i.ToBeatMetadataOutputWithContext(context.Background())
}

func (i BeatMetadataArgs) ToBeatMetadataOutputWithContext(ctx context.Context) BeatMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatMetadataOutput)
}

type BeatMetadataOutput struct{ *pulumi.OutputState }

func (BeatMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatMetadata)(nil)).Elem()
}

func (o BeatMetadataOutput) ToBeatMetadataOutput() BeatMetadataOutput {
	return o
}

func (o BeatMetadataOutput) ToBeatMetadataOutputWithContext(ctx context.Context) BeatMetadataOutput {
	return o
}

// BeatSpec defines the desired state of a Beat.
type BeatSpec struct {
	// Config holds the Beat configuration. At most one of [`Config`, `ConfigRef`] can be specified.
	Config map[string]interface{} `pulumi:"config"`
	// ConfigRef contains a reference to an existing Kubernetes Secret holding the Beat configuration. Beat settings must be specified as yaml, under a single "beat.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.
	ConfigRef *BeatSpecConfigRef `pulumi:"configRef"`
	// DaemonSet specifies the Beat should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`. If both are absent a default for the Type is used.
	DaemonSet *BeatSpecDaemonSet `pulumi:"daemonSet"`
	// Deployment specifies the Beat should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`. If both are absent a default for the Type is used.
	Deployment *BeatSpecDeployment `pulumi:"deployment"`
	// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
	ElasticsearchRef *BeatSpecElasticsearchRef `pulumi:"elasticsearchRef"`
	// Image is the Beat Docker image to deploy. Version and Type have to match the Beat in the image.
	Image *string `pulumi:"image"`
	// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows automatic setup of dashboards and visualizations.
	KibanaRef *BeatSpecKibanaRef `pulumi:"kibanaRef"`
	// SecureSettings is a list of references to Kubernetes Secrets containing sensitive configuration options for the Beat. Secrets data can be then referenced in the Beat config using the Secret's keys or as specified in `Entries` field of each SecureSetting.
	SecureSettings []BeatSpecSecureSettings `pulumi:"secureSettings"`
	// ServiceAccountName is used to check access from the current resource to Elasticsearch resource in a different namespace. Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// Type is the type of the Beat to deploy (filebeat, metricbeat, heartbeat, auditbeat, journalbeat, packetbeat, etc.). Any string can be used, but well-known types will have the image field defaulted and have the appropriate Elasticsearch roles created automatically. It also allows for dashboard setup when combined with a `KibanaRef`.
	Type string `pulumi:"type"`
	// Version of the Beat.
	Version string `pulumi:"version"`
}

// BeatSpecInput is an input type that accepts BeatSpecArgs and BeatSpecOutput values.
// You can construct a concrete instance of `BeatSpecInput` via:
//
//          BeatSpecArgs{...}
type BeatSpecInput interface {
	pulumi.Input

	ToBeatSpecOutput() BeatSpecOutput
	ToBeatSpecOutputWithContext(context.Context) BeatSpecOutput
}

// BeatSpec defines the desired state of a Beat.
type BeatSpecArgs struct {
	// Config holds the Beat configuration. At most one of [`Config`, `ConfigRef`] can be specified.
	Config pulumi.MapInput `pulumi:"config"`
	// ConfigRef contains a reference to an existing Kubernetes Secret holding the Beat configuration. Beat settings must be specified as yaml, under a single "beat.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.
	ConfigRef BeatSpecConfigRefPtrInput `pulumi:"configRef"`
	// DaemonSet specifies the Beat should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`. If both are absent a default for the Type is used.
	DaemonSet BeatSpecDaemonSetPtrInput `pulumi:"daemonSet"`
	// Deployment specifies the Beat should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`. If both are absent a default for the Type is used.
	Deployment BeatSpecDeploymentPtrInput `pulumi:"deployment"`
	// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
	ElasticsearchRef BeatSpecElasticsearchRefPtrInput `pulumi:"elasticsearchRef"`
	// Image is the Beat Docker image to deploy. Version and Type have to match the Beat in the image.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows automatic setup of dashboards and visualizations.
	KibanaRef BeatSpecKibanaRefPtrInput `pulumi:"kibanaRef"`
	// SecureSettings is a list of references to Kubernetes Secrets containing sensitive configuration options for the Beat. Secrets data can be then referenced in the Beat config using the Secret's keys or as specified in `Entries` field of each SecureSetting.
	SecureSettings BeatSpecSecureSettingsArrayInput `pulumi:"secureSettings"`
	// ServiceAccountName is used to check access from the current resource to Elasticsearch resource in a different namespace. Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// Type is the type of the Beat to deploy (filebeat, metricbeat, heartbeat, auditbeat, journalbeat, packetbeat, etc.). Any string can be used, but well-known types will have the image field defaulted and have the appropriate Elasticsearch roles created automatically. It also allows for dashboard setup when combined with a `KibanaRef`.
	Type pulumi.StringInput `pulumi:"type"`
	// Version of the Beat.
	Version pulumi.StringInput `pulumi:"version"`
}

func (BeatSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpec)(nil)).Elem()
}

func (i BeatSpecArgs) ToBeatSpecOutput() BeatSpecOutput {
	return i.ToBeatSpecOutputWithContext(context.Background())
}

func (i BeatSpecArgs) ToBeatSpecOutputWithContext(ctx context.Context) BeatSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecOutput)
}

func (i BeatSpecArgs) ToBeatSpecPtrOutput() BeatSpecPtrOutput {
	return i.ToBeatSpecPtrOutputWithContext(context.Background())
}

func (i BeatSpecArgs) ToBeatSpecPtrOutputWithContext(ctx context.Context) BeatSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecOutput).ToBeatSpecPtrOutputWithContext(ctx)
}

// BeatSpecPtrInput is an input type that accepts BeatSpecArgs, BeatSpecPtr and BeatSpecPtrOutput values.
// You can construct a concrete instance of `BeatSpecPtrInput` via:
//
//          BeatSpecArgs{...}
//
//  or:
//
//          nil
type BeatSpecPtrInput interface {
	pulumi.Input

	ToBeatSpecPtrOutput() BeatSpecPtrOutput
	ToBeatSpecPtrOutputWithContext(context.Context) BeatSpecPtrOutput
}

type beatSpecPtrType BeatSpecArgs

func BeatSpecPtr(v *BeatSpecArgs) BeatSpecPtrInput {
	return (*beatSpecPtrType)(v)
}

func (*beatSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatSpec)(nil)).Elem()
}

func (i *beatSpecPtrType) ToBeatSpecPtrOutput() BeatSpecPtrOutput {
	return i.ToBeatSpecPtrOutputWithContext(context.Background())
}

func (i *beatSpecPtrType) ToBeatSpecPtrOutputWithContext(ctx context.Context) BeatSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecPtrOutput)
}

// BeatSpec defines the desired state of a Beat.
type BeatSpecOutput struct{ *pulumi.OutputState }

func (BeatSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpec)(nil)).Elem()
}

func (o BeatSpecOutput) ToBeatSpecOutput() BeatSpecOutput {
	return o
}

func (o BeatSpecOutput) ToBeatSpecOutputWithContext(ctx context.Context) BeatSpecOutput {
	return o
}

func (o BeatSpecOutput) ToBeatSpecPtrOutput() BeatSpecPtrOutput {
	return o.ToBeatSpecPtrOutputWithContext(context.Background())
}

func (o BeatSpecOutput) ToBeatSpecPtrOutputWithContext(ctx context.Context) BeatSpecPtrOutput {
	return o.ApplyT(func(v BeatSpec) *BeatSpec {
		return &v
	}).(BeatSpecPtrOutput)
}

// Config holds the Beat configuration. At most one of [`Config`, `ConfigRef`] can be specified.
func (o BeatSpecOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v BeatSpec) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Beat configuration. Beat settings must be specified as yaml, under a single "beat.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.
func (o BeatSpecOutput) ConfigRef() BeatSpecConfigRefPtrOutput {
	return o.ApplyT(func(v BeatSpec) *BeatSpecConfigRef { return v.ConfigRef }).(BeatSpecConfigRefPtrOutput)
}

// DaemonSet specifies the Beat should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`. If both are absent a default for the Type is used.
func (o BeatSpecOutput) DaemonSet() BeatSpecDaemonSetPtrOutput {
	return o.ApplyT(func(v BeatSpec) *BeatSpecDaemonSet { return v.DaemonSet }).(BeatSpecDaemonSetPtrOutput)
}

// Deployment specifies the Beat should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`. If both are absent a default for the Type is used.
func (o BeatSpecOutput) Deployment() BeatSpecDeploymentPtrOutput {
	return o.ApplyT(func(v BeatSpec) *BeatSpecDeployment { return v.Deployment }).(BeatSpecDeploymentPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
func (o BeatSpecOutput) ElasticsearchRef() BeatSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v BeatSpec) *BeatSpecElasticsearchRef { return v.ElasticsearchRef }).(BeatSpecElasticsearchRefPtrOutput)
}

// Image is the Beat Docker image to deploy. Version and Type have to match the Beat in the image.
func (o BeatSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BeatSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows automatic setup of dashboards and visualizations.
func (o BeatSpecOutput) KibanaRef() BeatSpecKibanaRefPtrOutput {
	return o.ApplyT(func(v BeatSpec) *BeatSpecKibanaRef { return v.KibanaRef }).(BeatSpecKibanaRefPtrOutput)
}

// SecureSettings is a list of references to Kubernetes Secrets containing sensitive configuration options for the Beat. Secrets data can be then referenced in the Beat config using the Secret's keys or as specified in `Entries` field of each SecureSetting.
func (o BeatSpecOutput) SecureSettings() BeatSpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v BeatSpec) []BeatSpecSecureSettings { return v.SecureSettings }).(BeatSpecSecureSettingsArrayOutput)
}

// ServiceAccountName is used to check access from the current resource to Elasticsearch resource in a different namespace. Can only be used if ECK is enforcing RBAC on references.
func (o BeatSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BeatSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// Type is the type of the Beat to deploy (filebeat, metricbeat, heartbeat, auditbeat, journalbeat, packetbeat, etc.). Any string can be used, but well-known types will have the image field defaulted and have the appropriate Elasticsearch roles created automatically. It also allows for dashboard setup when combined with a `KibanaRef`.
func (o BeatSpecOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BeatSpec) string { return v.Type }).(pulumi.StringOutput)
}

// Version of the Beat.
func (o BeatSpecOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v BeatSpec) string { return v.Version }).(pulumi.StringOutput)
}

type BeatSpecPtrOutput struct{ *pulumi.OutputState }

func (BeatSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatSpec)(nil)).Elem()
}

func (o BeatSpecPtrOutput) ToBeatSpecPtrOutput() BeatSpecPtrOutput {
	return o
}

func (o BeatSpecPtrOutput) ToBeatSpecPtrOutputWithContext(ctx context.Context) BeatSpecPtrOutput {
	return o
}

func (o BeatSpecPtrOutput) Elem() BeatSpecOutput {
	return o.ApplyT(func(v *BeatSpec) BeatSpec { return *v }).(BeatSpecOutput)
}

// Config holds the Beat configuration. At most one of [`Config`, `ConfigRef`] can be specified.
func (o BeatSpecPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *BeatSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Beat configuration. Beat settings must be specified as yaml, under a single "beat.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.
func (o BeatSpecPtrOutput) ConfigRef() BeatSpecConfigRefPtrOutput {
	return o.ApplyT(func(v *BeatSpec) *BeatSpecConfigRef {
		if v == nil {
			return nil
		}
		return v.ConfigRef
	}).(BeatSpecConfigRefPtrOutput)
}

// DaemonSet specifies the Beat should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`. If both are absent a default for the Type is used.
func (o BeatSpecPtrOutput) DaemonSet() BeatSpecDaemonSetPtrOutput {
	return o.ApplyT(func(v *BeatSpec) *BeatSpecDaemonSet {
		if v == nil {
			return nil
		}
		return v.DaemonSet
	}).(BeatSpecDaemonSetPtrOutput)
}

// Deployment specifies the Beat should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`. If both are absent a default for the Type is used.
func (o BeatSpecPtrOutput) Deployment() BeatSpecDeploymentPtrOutput {
	return o.ApplyT(func(v *BeatSpec) *BeatSpecDeployment {
		if v == nil {
			return nil
		}
		return v.Deployment
	}).(BeatSpecDeploymentPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
func (o BeatSpecPtrOutput) ElasticsearchRef() BeatSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v *BeatSpec) *BeatSpecElasticsearchRef {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRef
	}).(BeatSpecElasticsearchRefPtrOutput)
}

// Image is the Beat Docker image to deploy. Version and Type have to match the Beat in the image.
func (o BeatSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BeatSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows automatic setup of dashboards and visualizations.
func (o BeatSpecPtrOutput) KibanaRef() BeatSpecKibanaRefPtrOutput {
	return o.ApplyT(func(v *BeatSpec) *BeatSpecKibanaRef {
		if v == nil {
			return nil
		}
		return v.KibanaRef
	}).(BeatSpecKibanaRefPtrOutput)
}

// SecureSettings is a list of references to Kubernetes Secrets containing sensitive configuration options for the Beat. Secrets data can be then referenced in the Beat config using the Secret's keys or as specified in `Entries` field of each SecureSetting.
func (o BeatSpecPtrOutput) SecureSettings() BeatSpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v *BeatSpec) []BeatSpecSecureSettings {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(BeatSpecSecureSettingsArrayOutput)
}

// ServiceAccountName is used to check access from the current resource to Elasticsearch resource in a different namespace. Can only be used if ECK is enforcing RBAC on references.
func (o BeatSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BeatSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// Type is the type of the Beat to deploy (filebeat, metricbeat, heartbeat, auditbeat, journalbeat, packetbeat, etc.). Any string can be used, but well-known types will have the image field defaulted and have the appropriate Elasticsearch roles created automatically. It also allows for dashboard setup when combined with a `KibanaRef`.
func (o BeatSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BeatSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Version of the Beat.
func (o BeatSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BeatSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Config holds the Beat configuration. At most one of [`Config`, `ConfigRef`] can be specified.
type BeatSpecConfig struct {
}

// BeatSpecConfigInput is an input type that accepts BeatSpecConfigArgs and BeatSpecConfigOutput values.
// You can construct a concrete instance of `BeatSpecConfigInput` via:
//
//          BeatSpecConfigArgs{...}
type BeatSpecConfigInput interface {
	pulumi.Input

	ToBeatSpecConfigOutput() BeatSpecConfigOutput
	ToBeatSpecConfigOutputWithContext(context.Context) BeatSpecConfigOutput
}

// Config holds the Beat configuration. At most one of [`Config`, `ConfigRef`] can be specified.
type BeatSpecConfigArgs struct {
}

func (BeatSpecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpecConfig)(nil)).Elem()
}

func (i BeatSpecConfigArgs) ToBeatSpecConfigOutput() BeatSpecConfigOutput {
	return i.ToBeatSpecConfigOutputWithContext(context.Background())
}

func (i BeatSpecConfigArgs) ToBeatSpecConfigOutputWithContext(ctx context.Context) BeatSpecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecConfigOutput)
}

// Config holds the Beat configuration. At most one of [`Config`, `ConfigRef`] can be specified.
type BeatSpecConfigOutput struct{ *pulumi.OutputState }

func (BeatSpecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpecConfig)(nil)).Elem()
}

func (o BeatSpecConfigOutput) ToBeatSpecConfigOutput() BeatSpecConfigOutput {
	return o
}

func (o BeatSpecConfigOutput) ToBeatSpecConfigOutputWithContext(ctx context.Context) BeatSpecConfigOutput {
	return o
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Beat configuration. Beat settings must be specified as yaml, under a single "beat.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.
type BeatSpecConfigRef struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// BeatSpecConfigRefInput is an input type that accepts BeatSpecConfigRefArgs and BeatSpecConfigRefOutput values.
// You can construct a concrete instance of `BeatSpecConfigRefInput` via:
//
//          BeatSpecConfigRefArgs{...}
type BeatSpecConfigRefInput interface {
	pulumi.Input

	ToBeatSpecConfigRefOutput() BeatSpecConfigRefOutput
	ToBeatSpecConfigRefOutputWithContext(context.Context) BeatSpecConfigRefOutput
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Beat configuration. Beat settings must be specified as yaml, under a single "beat.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.
type BeatSpecConfigRefArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (BeatSpecConfigRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpecConfigRef)(nil)).Elem()
}

func (i BeatSpecConfigRefArgs) ToBeatSpecConfigRefOutput() BeatSpecConfigRefOutput {
	return i.ToBeatSpecConfigRefOutputWithContext(context.Background())
}

func (i BeatSpecConfigRefArgs) ToBeatSpecConfigRefOutputWithContext(ctx context.Context) BeatSpecConfigRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecConfigRefOutput)
}

func (i BeatSpecConfigRefArgs) ToBeatSpecConfigRefPtrOutput() BeatSpecConfigRefPtrOutput {
	return i.ToBeatSpecConfigRefPtrOutputWithContext(context.Background())
}

func (i BeatSpecConfigRefArgs) ToBeatSpecConfigRefPtrOutputWithContext(ctx context.Context) BeatSpecConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecConfigRefOutput).ToBeatSpecConfigRefPtrOutputWithContext(ctx)
}

// BeatSpecConfigRefPtrInput is an input type that accepts BeatSpecConfigRefArgs, BeatSpecConfigRefPtr and BeatSpecConfigRefPtrOutput values.
// You can construct a concrete instance of `BeatSpecConfigRefPtrInput` via:
//
//          BeatSpecConfigRefArgs{...}
//
//  or:
//
//          nil
type BeatSpecConfigRefPtrInput interface {
	pulumi.Input

	ToBeatSpecConfigRefPtrOutput() BeatSpecConfigRefPtrOutput
	ToBeatSpecConfigRefPtrOutputWithContext(context.Context) BeatSpecConfigRefPtrOutput
}

type beatSpecConfigRefPtrType BeatSpecConfigRefArgs

func BeatSpecConfigRefPtr(v *BeatSpecConfigRefArgs) BeatSpecConfigRefPtrInput {
	return (*beatSpecConfigRefPtrType)(v)
}

func (*beatSpecConfigRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatSpecConfigRef)(nil)).Elem()
}

func (i *beatSpecConfigRefPtrType) ToBeatSpecConfigRefPtrOutput() BeatSpecConfigRefPtrOutput {
	return i.ToBeatSpecConfigRefPtrOutputWithContext(context.Background())
}

func (i *beatSpecConfigRefPtrType) ToBeatSpecConfigRefPtrOutputWithContext(ctx context.Context) BeatSpecConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecConfigRefPtrOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Beat configuration. Beat settings must be specified as yaml, under a single "beat.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.
type BeatSpecConfigRefOutput struct{ *pulumi.OutputState }

func (BeatSpecConfigRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpecConfigRef)(nil)).Elem()
}

func (o BeatSpecConfigRefOutput) ToBeatSpecConfigRefOutput() BeatSpecConfigRefOutput {
	return o
}

func (o BeatSpecConfigRefOutput) ToBeatSpecConfigRefOutputWithContext(ctx context.Context) BeatSpecConfigRefOutput {
	return o
}

func (o BeatSpecConfigRefOutput) ToBeatSpecConfigRefPtrOutput() BeatSpecConfigRefPtrOutput {
	return o.ToBeatSpecConfigRefPtrOutputWithContext(context.Background())
}

func (o BeatSpecConfigRefOutput) ToBeatSpecConfigRefPtrOutputWithContext(ctx context.Context) BeatSpecConfigRefPtrOutput {
	return o.ApplyT(func(v BeatSpecConfigRef) *BeatSpecConfigRef {
		return &v
	}).(BeatSpecConfigRefPtrOutput)
}

// SecretName is the name of the secret.
func (o BeatSpecConfigRefOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BeatSpecConfigRef) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type BeatSpecConfigRefPtrOutput struct{ *pulumi.OutputState }

func (BeatSpecConfigRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatSpecConfigRef)(nil)).Elem()
}

func (o BeatSpecConfigRefPtrOutput) ToBeatSpecConfigRefPtrOutput() BeatSpecConfigRefPtrOutput {
	return o
}

func (o BeatSpecConfigRefPtrOutput) ToBeatSpecConfigRefPtrOutputWithContext(ctx context.Context) BeatSpecConfigRefPtrOutput {
	return o
}

func (o BeatSpecConfigRefPtrOutput) Elem() BeatSpecConfigRefOutput {
	return o.ApplyT(func(v *BeatSpecConfigRef) BeatSpecConfigRef { return *v }).(BeatSpecConfigRefOutput)
}

// SecretName is the name of the secret.
func (o BeatSpecConfigRefPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BeatSpecConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// DaemonSet specifies the Beat should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`. If both are absent a default for the Type is used.
type BeatSpecDaemonSet struct {
}

// BeatSpecDaemonSetInput is an input type that accepts BeatSpecDaemonSetArgs and BeatSpecDaemonSetOutput values.
// You can construct a concrete instance of `BeatSpecDaemonSetInput` via:
//
//          BeatSpecDaemonSetArgs{...}
type BeatSpecDaemonSetInput interface {
	pulumi.Input

	ToBeatSpecDaemonSetOutput() BeatSpecDaemonSetOutput
	ToBeatSpecDaemonSetOutputWithContext(context.Context) BeatSpecDaemonSetOutput
}

// DaemonSet specifies the Beat should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`. If both are absent a default for the Type is used.
type BeatSpecDaemonSetArgs struct {
}

func (BeatSpecDaemonSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpecDaemonSet)(nil)).Elem()
}

func (i BeatSpecDaemonSetArgs) ToBeatSpecDaemonSetOutput() BeatSpecDaemonSetOutput {
	return i.ToBeatSpecDaemonSetOutputWithContext(context.Background())
}

func (i BeatSpecDaemonSetArgs) ToBeatSpecDaemonSetOutputWithContext(ctx context.Context) BeatSpecDaemonSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecDaemonSetOutput)
}

func (i BeatSpecDaemonSetArgs) ToBeatSpecDaemonSetPtrOutput() BeatSpecDaemonSetPtrOutput {
	return i.ToBeatSpecDaemonSetPtrOutputWithContext(context.Background())
}

func (i BeatSpecDaemonSetArgs) ToBeatSpecDaemonSetPtrOutputWithContext(ctx context.Context) BeatSpecDaemonSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecDaemonSetOutput).ToBeatSpecDaemonSetPtrOutputWithContext(ctx)
}

// BeatSpecDaemonSetPtrInput is an input type that accepts BeatSpecDaemonSetArgs, BeatSpecDaemonSetPtr and BeatSpecDaemonSetPtrOutput values.
// You can construct a concrete instance of `BeatSpecDaemonSetPtrInput` via:
//
//          BeatSpecDaemonSetArgs{...}
//
//  or:
//
//          nil
type BeatSpecDaemonSetPtrInput interface {
	pulumi.Input

	ToBeatSpecDaemonSetPtrOutput() BeatSpecDaemonSetPtrOutput
	ToBeatSpecDaemonSetPtrOutputWithContext(context.Context) BeatSpecDaemonSetPtrOutput
}

type beatSpecDaemonSetPtrType BeatSpecDaemonSetArgs

func BeatSpecDaemonSetPtr(v *BeatSpecDaemonSetArgs) BeatSpecDaemonSetPtrInput {
	return (*beatSpecDaemonSetPtrType)(v)
}

func (*beatSpecDaemonSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatSpecDaemonSet)(nil)).Elem()
}

func (i *beatSpecDaemonSetPtrType) ToBeatSpecDaemonSetPtrOutput() BeatSpecDaemonSetPtrOutput {
	return i.ToBeatSpecDaemonSetPtrOutputWithContext(context.Background())
}

func (i *beatSpecDaemonSetPtrType) ToBeatSpecDaemonSetPtrOutputWithContext(ctx context.Context) BeatSpecDaemonSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecDaemonSetPtrOutput)
}

// DaemonSet specifies the Beat should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`. If both are absent a default for the Type is used.
type BeatSpecDaemonSetOutput struct{ *pulumi.OutputState }

func (BeatSpecDaemonSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpecDaemonSet)(nil)).Elem()
}

func (o BeatSpecDaemonSetOutput) ToBeatSpecDaemonSetOutput() BeatSpecDaemonSetOutput {
	return o
}

func (o BeatSpecDaemonSetOutput) ToBeatSpecDaemonSetOutputWithContext(ctx context.Context) BeatSpecDaemonSetOutput {
	return o
}

func (o BeatSpecDaemonSetOutput) ToBeatSpecDaemonSetPtrOutput() BeatSpecDaemonSetPtrOutput {
	return o.ToBeatSpecDaemonSetPtrOutputWithContext(context.Background())
}

func (o BeatSpecDaemonSetOutput) ToBeatSpecDaemonSetPtrOutputWithContext(ctx context.Context) BeatSpecDaemonSetPtrOutput {
	return o.ApplyT(func(v BeatSpecDaemonSet) *BeatSpecDaemonSet {
		return &v
	}).(BeatSpecDaemonSetPtrOutput)
}

type BeatSpecDaemonSetPtrOutput struct{ *pulumi.OutputState }

func (BeatSpecDaemonSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatSpecDaemonSet)(nil)).Elem()
}

func (o BeatSpecDaemonSetPtrOutput) ToBeatSpecDaemonSetPtrOutput() BeatSpecDaemonSetPtrOutput {
	return o
}

func (o BeatSpecDaemonSetPtrOutput) ToBeatSpecDaemonSetPtrOutputWithContext(ctx context.Context) BeatSpecDaemonSetPtrOutput {
	return o
}

func (o BeatSpecDaemonSetPtrOutput) Elem() BeatSpecDaemonSetOutput {
	return o.ApplyT(func(v *BeatSpecDaemonSet) BeatSpecDaemonSet { return *v }).(BeatSpecDaemonSetOutput)
}

// Deployment specifies the Beat should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`. If both are absent a default for the Type is used.
type BeatSpecDeployment struct {
	Replicas *int `pulumi:"replicas"`
}

// BeatSpecDeploymentInput is an input type that accepts BeatSpecDeploymentArgs and BeatSpecDeploymentOutput values.
// You can construct a concrete instance of `BeatSpecDeploymentInput` via:
//
//          BeatSpecDeploymentArgs{...}
type BeatSpecDeploymentInput interface {
	pulumi.Input

	ToBeatSpecDeploymentOutput() BeatSpecDeploymentOutput
	ToBeatSpecDeploymentOutputWithContext(context.Context) BeatSpecDeploymentOutput
}

// Deployment specifies the Beat should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`. If both are absent a default for the Type is used.
type BeatSpecDeploymentArgs struct {
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
}

func (BeatSpecDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpecDeployment)(nil)).Elem()
}

func (i BeatSpecDeploymentArgs) ToBeatSpecDeploymentOutput() BeatSpecDeploymentOutput {
	return i.ToBeatSpecDeploymentOutputWithContext(context.Background())
}

func (i BeatSpecDeploymentArgs) ToBeatSpecDeploymentOutputWithContext(ctx context.Context) BeatSpecDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecDeploymentOutput)
}

func (i BeatSpecDeploymentArgs) ToBeatSpecDeploymentPtrOutput() BeatSpecDeploymentPtrOutput {
	return i.ToBeatSpecDeploymentPtrOutputWithContext(context.Background())
}

func (i BeatSpecDeploymentArgs) ToBeatSpecDeploymentPtrOutputWithContext(ctx context.Context) BeatSpecDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecDeploymentOutput).ToBeatSpecDeploymentPtrOutputWithContext(ctx)
}

// BeatSpecDeploymentPtrInput is an input type that accepts BeatSpecDeploymentArgs, BeatSpecDeploymentPtr and BeatSpecDeploymentPtrOutput values.
// You can construct a concrete instance of `BeatSpecDeploymentPtrInput` via:
//
//          BeatSpecDeploymentArgs{...}
//
//  or:
//
//          nil
type BeatSpecDeploymentPtrInput interface {
	pulumi.Input

	ToBeatSpecDeploymentPtrOutput() BeatSpecDeploymentPtrOutput
	ToBeatSpecDeploymentPtrOutputWithContext(context.Context) BeatSpecDeploymentPtrOutput
}

type beatSpecDeploymentPtrType BeatSpecDeploymentArgs

func BeatSpecDeploymentPtr(v *BeatSpecDeploymentArgs) BeatSpecDeploymentPtrInput {
	return (*beatSpecDeploymentPtrType)(v)
}

func (*beatSpecDeploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatSpecDeployment)(nil)).Elem()
}

func (i *beatSpecDeploymentPtrType) ToBeatSpecDeploymentPtrOutput() BeatSpecDeploymentPtrOutput {
	return i.ToBeatSpecDeploymentPtrOutputWithContext(context.Background())
}

func (i *beatSpecDeploymentPtrType) ToBeatSpecDeploymentPtrOutputWithContext(ctx context.Context) BeatSpecDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecDeploymentPtrOutput)
}

// Deployment specifies the Beat should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`. If both are absent a default for the Type is used.
type BeatSpecDeploymentOutput struct{ *pulumi.OutputState }

func (BeatSpecDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpecDeployment)(nil)).Elem()
}

func (o BeatSpecDeploymentOutput) ToBeatSpecDeploymentOutput() BeatSpecDeploymentOutput {
	return o
}

func (o BeatSpecDeploymentOutput) ToBeatSpecDeploymentOutputWithContext(ctx context.Context) BeatSpecDeploymentOutput {
	return o
}

func (o BeatSpecDeploymentOutput) ToBeatSpecDeploymentPtrOutput() BeatSpecDeploymentPtrOutput {
	return o.ToBeatSpecDeploymentPtrOutputWithContext(context.Background())
}

func (o BeatSpecDeploymentOutput) ToBeatSpecDeploymentPtrOutputWithContext(ctx context.Context) BeatSpecDeploymentPtrOutput {
	return o.ApplyT(func(v BeatSpecDeployment) *BeatSpecDeployment {
		return &v
	}).(BeatSpecDeploymentPtrOutput)
}
func (o BeatSpecDeploymentOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BeatSpecDeployment) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

type BeatSpecDeploymentPtrOutput struct{ *pulumi.OutputState }

func (BeatSpecDeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatSpecDeployment)(nil)).Elem()
}

func (o BeatSpecDeploymentPtrOutput) ToBeatSpecDeploymentPtrOutput() BeatSpecDeploymentPtrOutput {
	return o
}

func (o BeatSpecDeploymentPtrOutput) ToBeatSpecDeploymentPtrOutputWithContext(ctx context.Context) BeatSpecDeploymentPtrOutput {
	return o
}

func (o BeatSpecDeploymentPtrOutput) Elem() BeatSpecDeploymentOutput {
	return o.ApplyT(func(v *BeatSpecDeployment) BeatSpecDeployment { return *v }).(BeatSpecDeploymentOutput)
}

func (o BeatSpecDeploymentPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BeatSpecDeployment) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
type BeatSpecElasticsearchRef struct {
	// Name of the Kubernetes object.
	Name string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
}

// BeatSpecElasticsearchRefInput is an input type that accepts BeatSpecElasticsearchRefArgs and BeatSpecElasticsearchRefOutput values.
// You can construct a concrete instance of `BeatSpecElasticsearchRefInput` via:
//
//          BeatSpecElasticsearchRefArgs{...}
type BeatSpecElasticsearchRefInput interface {
	pulumi.Input

	ToBeatSpecElasticsearchRefOutput() BeatSpecElasticsearchRefOutput
	ToBeatSpecElasticsearchRefOutputWithContext(context.Context) BeatSpecElasticsearchRefOutput
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
type BeatSpecElasticsearchRefArgs struct {
	// Name of the Kubernetes object.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (BeatSpecElasticsearchRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpecElasticsearchRef)(nil)).Elem()
}

func (i BeatSpecElasticsearchRefArgs) ToBeatSpecElasticsearchRefOutput() BeatSpecElasticsearchRefOutput {
	return i.ToBeatSpecElasticsearchRefOutputWithContext(context.Background())
}

func (i BeatSpecElasticsearchRefArgs) ToBeatSpecElasticsearchRefOutputWithContext(ctx context.Context) BeatSpecElasticsearchRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecElasticsearchRefOutput)
}

func (i BeatSpecElasticsearchRefArgs) ToBeatSpecElasticsearchRefPtrOutput() BeatSpecElasticsearchRefPtrOutput {
	return i.ToBeatSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i BeatSpecElasticsearchRefArgs) ToBeatSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) BeatSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecElasticsearchRefOutput).ToBeatSpecElasticsearchRefPtrOutputWithContext(ctx)
}

// BeatSpecElasticsearchRefPtrInput is an input type that accepts BeatSpecElasticsearchRefArgs, BeatSpecElasticsearchRefPtr and BeatSpecElasticsearchRefPtrOutput values.
// You can construct a concrete instance of `BeatSpecElasticsearchRefPtrInput` via:
//
//          BeatSpecElasticsearchRefArgs{...}
//
//  or:
//
//          nil
type BeatSpecElasticsearchRefPtrInput interface {
	pulumi.Input

	ToBeatSpecElasticsearchRefPtrOutput() BeatSpecElasticsearchRefPtrOutput
	ToBeatSpecElasticsearchRefPtrOutputWithContext(context.Context) BeatSpecElasticsearchRefPtrOutput
}

type beatSpecElasticsearchRefPtrType BeatSpecElasticsearchRefArgs

func BeatSpecElasticsearchRefPtr(v *BeatSpecElasticsearchRefArgs) BeatSpecElasticsearchRefPtrInput {
	return (*beatSpecElasticsearchRefPtrType)(v)
}

func (*beatSpecElasticsearchRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatSpecElasticsearchRef)(nil)).Elem()
}

func (i *beatSpecElasticsearchRefPtrType) ToBeatSpecElasticsearchRefPtrOutput() BeatSpecElasticsearchRefPtrOutput {
	return i.ToBeatSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i *beatSpecElasticsearchRefPtrType) ToBeatSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) BeatSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecElasticsearchRefPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
type BeatSpecElasticsearchRefOutput struct{ *pulumi.OutputState }

func (BeatSpecElasticsearchRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpecElasticsearchRef)(nil)).Elem()
}

func (o BeatSpecElasticsearchRefOutput) ToBeatSpecElasticsearchRefOutput() BeatSpecElasticsearchRefOutput {
	return o
}

func (o BeatSpecElasticsearchRefOutput) ToBeatSpecElasticsearchRefOutputWithContext(ctx context.Context) BeatSpecElasticsearchRefOutput {
	return o
}

func (o BeatSpecElasticsearchRefOutput) ToBeatSpecElasticsearchRefPtrOutput() BeatSpecElasticsearchRefPtrOutput {
	return o.ToBeatSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (o BeatSpecElasticsearchRefOutput) ToBeatSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) BeatSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v BeatSpecElasticsearchRef) *BeatSpecElasticsearchRef {
		return &v
	}).(BeatSpecElasticsearchRefPtrOutput)
}

// Name of the Kubernetes object.
func (o BeatSpecElasticsearchRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BeatSpecElasticsearchRef) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o BeatSpecElasticsearchRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BeatSpecElasticsearchRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type BeatSpecElasticsearchRefPtrOutput struct{ *pulumi.OutputState }

func (BeatSpecElasticsearchRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatSpecElasticsearchRef)(nil)).Elem()
}

func (o BeatSpecElasticsearchRefPtrOutput) ToBeatSpecElasticsearchRefPtrOutput() BeatSpecElasticsearchRefPtrOutput {
	return o
}

func (o BeatSpecElasticsearchRefPtrOutput) ToBeatSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) BeatSpecElasticsearchRefPtrOutput {
	return o
}

func (o BeatSpecElasticsearchRefPtrOutput) Elem() BeatSpecElasticsearchRefOutput {
	return o.ApplyT(func(v *BeatSpecElasticsearchRef) BeatSpecElasticsearchRef { return *v }).(BeatSpecElasticsearchRefOutput)
}

// Name of the Kubernetes object.
func (o BeatSpecElasticsearchRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BeatSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o BeatSpecElasticsearchRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BeatSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows automatic setup of dashboards and visualizations.
type BeatSpecKibanaRef struct {
	// Name of the Kubernetes object.
	Name string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
}

// BeatSpecKibanaRefInput is an input type that accepts BeatSpecKibanaRefArgs and BeatSpecKibanaRefOutput values.
// You can construct a concrete instance of `BeatSpecKibanaRefInput` via:
//
//          BeatSpecKibanaRefArgs{...}
type BeatSpecKibanaRefInput interface {
	pulumi.Input

	ToBeatSpecKibanaRefOutput() BeatSpecKibanaRefOutput
	ToBeatSpecKibanaRefOutputWithContext(context.Context) BeatSpecKibanaRefOutput
}

// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows automatic setup of dashboards and visualizations.
type BeatSpecKibanaRefArgs struct {
	// Name of the Kubernetes object.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (BeatSpecKibanaRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpecKibanaRef)(nil)).Elem()
}

func (i BeatSpecKibanaRefArgs) ToBeatSpecKibanaRefOutput() BeatSpecKibanaRefOutput {
	return i.ToBeatSpecKibanaRefOutputWithContext(context.Background())
}

func (i BeatSpecKibanaRefArgs) ToBeatSpecKibanaRefOutputWithContext(ctx context.Context) BeatSpecKibanaRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecKibanaRefOutput)
}

func (i BeatSpecKibanaRefArgs) ToBeatSpecKibanaRefPtrOutput() BeatSpecKibanaRefPtrOutput {
	return i.ToBeatSpecKibanaRefPtrOutputWithContext(context.Background())
}

func (i BeatSpecKibanaRefArgs) ToBeatSpecKibanaRefPtrOutputWithContext(ctx context.Context) BeatSpecKibanaRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecKibanaRefOutput).ToBeatSpecKibanaRefPtrOutputWithContext(ctx)
}

// BeatSpecKibanaRefPtrInput is an input type that accepts BeatSpecKibanaRefArgs, BeatSpecKibanaRefPtr and BeatSpecKibanaRefPtrOutput values.
// You can construct a concrete instance of `BeatSpecKibanaRefPtrInput` via:
//
//          BeatSpecKibanaRefArgs{...}
//
//  or:
//
//          nil
type BeatSpecKibanaRefPtrInput interface {
	pulumi.Input

	ToBeatSpecKibanaRefPtrOutput() BeatSpecKibanaRefPtrOutput
	ToBeatSpecKibanaRefPtrOutputWithContext(context.Context) BeatSpecKibanaRefPtrOutput
}

type beatSpecKibanaRefPtrType BeatSpecKibanaRefArgs

func BeatSpecKibanaRefPtr(v *BeatSpecKibanaRefArgs) BeatSpecKibanaRefPtrInput {
	return (*beatSpecKibanaRefPtrType)(v)
}

func (*beatSpecKibanaRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatSpecKibanaRef)(nil)).Elem()
}

func (i *beatSpecKibanaRefPtrType) ToBeatSpecKibanaRefPtrOutput() BeatSpecKibanaRefPtrOutput {
	return i.ToBeatSpecKibanaRefPtrOutputWithContext(context.Background())
}

func (i *beatSpecKibanaRefPtrType) ToBeatSpecKibanaRefPtrOutputWithContext(ctx context.Context) BeatSpecKibanaRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecKibanaRefPtrOutput)
}

// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows automatic setup of dashboards and visualizations.
type BeatSpecKibanaRefOutput struct{ *pulumi.OutputState }

func (BeatSpecKibanaRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpecKibanaRef)(nil)).Elem()
}

func (o BeatSpecKibanaRefOutput) ToBeatSpecKibanaRefOutput() BeatSpecKibanaRefOutput {
	return o
}

func (o BeatSpecKibanaRefOutput) ToBeatSpecKibanaRefOutputWithContext(ctx context.Context) BeatSpecKibanaRefOutput {
	return o
}

func (o BeatSpecKibanaRefOutput) ToBeatSpecKibanaRefPtrOutput() BeatSpecKibanaRefPtrOutput {
	return o.ToBeatSpecKibanaRefPtrOutputWithContext(context.Background())
}

func (o BeatSpecKibanaRefOutput) ToBeatSpecKibanaRefPtrOutputWithContext(ctx context.Context) BeatSpecKibanaRefPtrOutput {
	return o.ApplyT(func(v BeatSpecKibanaRef) *BeatSpecKibanaRef {
		return &v
	}).(BeatSpecKibanaRefPtrOutput)
}

// Name of the Kubernetes object.
func (o BeatSpecKibanaRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BeatSpecKibanaRef) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o BeatSpecKibanaRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BeatSpecKibanaRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type BeatSpecKibanaRefPtrOutput struct{ *pulumi.OutputState }

func (BeatSpecKibanaRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatSpecKibanaRef)(nil)).Elem()
}

func (o BeatSpecKibanaRefPtrOutput) ToBeatSpecKibanaRefPtrOutput() BeatSpecKibanaRefPtrOutput {
	return o
}

func (o BeatSpecKibanaRefPtrOutput) ToBeatSpecKibanaRefPtrOutputWithContext(ctx context.Context) BeatSpecKibanaRefPtrOutput {
	return o
}

func (o BeatSpecKibanaRefPtrOutput) Elem() BeatSpecKibanaRefOutput {
	return o.ApplyT(func(v *BeatSpecKibanaRef) BeatSpecKibanaRef { return *v }).(BeatSpecKibanaRefOutput)
}

// Name of the Kubernetes object.
func (o BeatSpecKibanaRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BeatSpecKibanaRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o BeatSpecKibanaRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BeatSpecKibanaRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type BeatSpecSecureSettings struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
	Entries []BeatSpecSecureSettingsEntries `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName string `pulumi:"secretName"`
}

// BeatSpecSecureSettingsInput is an input type that accepts BeatSpecSecureSettingsArgs and BeatSpecSecureSettingsOutput values.
// You can construct a concrete instance of `BeatSpecSecureSettingsInput` via:
//
//          BeatSpecSecureSettingsArgs{...}
type BeatSpecSecureSettingsInput interface {
	pulumi.Input

	ToBeatSpecSecureSettingsOutput() BeatSpecSecureSettingsOutput
	ToBeatSpecSecureSettingsOutputWithContext(context.Context) BeatSpecSecureSettingsOutput
}

// SecretSource defines a data source based on a Kubernetes Secret.
type BeatSpecSecureSettingsArgs struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
	Entries BeatSpecSecureSettingsEntriesArrayInput `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName pulumi.StringInput `pulumi:"secretName"`
}

func (BeatSpecSecureSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpecSecureSettings)(nil)).Elem()
}

func (i BeatSpecSecureSettingsArgs) ToBeatSpecSecureSettingsOutput() BeatSpecSecureSettingsOutput {
	return i.ToBeatSpecSecureSettingsOutputWithContext(context.Background())
}

func (i BeatSpecSecureSettingsArgs) ToBeatSpecSecureSettingsOutputWithContext(ctx context.Context) BeatSpecSecureSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecSecureSettingsOutput)
}

// BeatSpecSecureSettingsArrayInput is an input type that accepts BeatSpecSecureSettingsArray and BeatSpecSecureSettingsArrayOutput values.
// You can construct a concrete instance of `BeatSpecSecureSettingsArrayInput` via:
//
//          BeatSpecSecureSettingsArray{ BeatSpecSecureSettingsArgs{...} }
type BeatSpecSecureSettingsArrayInput interface {
	pulumi.Input

	ToBeatSpecSecureSettingsArrayOutput() BeatSpecSecureSettingsArrayOutput
	ToBeatSpecSecureSettingsArrayOutputWithContext(context.Context) BeatSpecSecureSettingsArrayOutput
}

type BeatSpecSecureSettingsArray []BeatSpecSecureSettingsInput

func (BeatSpecSecureSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BeatSpecSecureSettings)(nil)).Elem()
}

func (i BeatSpecSecureSettingsArray) ToBeatSpecSecureSettingsArrayOutput() BeatSpecSecureSettingsArrayOutput {
	return i.ToBeatSpecSecureSettingsArrayOutputWithContext(context.Background())
}

func (i BeatSpecSecureSettingsArray) ToBeatSpecSecureSettingsArrayOutputWithContext(ctx context.Context) BeatSpecSecureSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecSecureSettingsArrayOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type BeatSpecSecureSettingsOutput struct{ *pulumi.OutputState }

func (BeatSpecSecureSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpecSecureSettings)(nil)).Elem()
}

func (o BeatSpecSecureSettingsOutput) ToBeatSpecSecureSettingsOutput() BeatSpecSecureSettingsOutput {
	return o
}

func (o BeatSpecSecureSettingsOutput) ToBeatSpecSecureSettingsOutputWithContext(ctx context.Context) BeatSpecSecureSettingsOutput {
	return o
}

// Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
func (o BeatSpecSecureSettingsOutput) Entries() BeatSpecSecureSettingsEntriesArrayOutput {
	return o.ApplyT(func(v BeatSpecSecureSettings) []BeatSpecSecureSettingsEntries { return v.Entries }).(BeatSpecSecureSettingsEntriesArrayOutput)
}

// SecretName is the name of the secret.
func (o BeatSpecSecureSettingsOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v BeatSpecSecureSettings) string { return v.SecretName }).(pulumi.StringOutput)
}

type BeatSpecSecureSettingsArrayOutput struct{ *pulumi.OutputState }

func (BeatSpecSecureSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BeatSpecSecureSettings)(nil)).Elem()
}

func (o BeatSpecSecureSettingsArrayOutput) ToBeatSpecSecureSettingsArrayOutput() BeatSpecSecureSettingsArrayOutput {
	return o
}

func (o BeatSpecSecureSettingsArrayOutput) ToBeatSpecSecureSettingsArrayOutputWithContext(ctx context.Context) BeatSpecSecureSettingsArrayOutput {
	return o
}

func (o BeatSpecSecureSettingsArrayOutput) Index(i pulumi.IntInput) BeatSpecSecureSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BeatSpecSecureSettings {
		return vs[0].([]BeatSpecSecureSettings)[vs[1].(int)]
	}).(BeatSpecSecureSettingsOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type BeatSpecSecureSettingsEntries struct {
	// Key is the key contained in the secret.
	Key string `pulumi:"key"`
	// Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
	Path *string `pulumi:"path"`
}

// BeatSpecSecureSettingsEntriesInput is an input type that accepts BeatSpecSecureSettingsEntriesArgs and BeatSpecSecureSettingsEntriesOutput values.
// You can construct a concrete instance of `BeatSpecSecureSettingsEntriesInput` via:
//
//          BeatSpecSecureSettingsEntriesArgs{...}
type BeatSpecSecureSettingsEntriesInput interface {
	pulumi.Input

	ToBeatSpecSecureSettingsEntriesOutput() BeatSpecSecureSettingsEntriesOutput
	ToBeatSpecSecureSettingsEntriesOutputWithContext(context.Context) BeatSpecSecureSettingsEntriesOutput
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type BeatSpecSecureSettingsEntriesArgs struct {
	// Key is the key contained in the secret.
	Key pulumi.StringInput `pulumi:"key"`
	// Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (BeatSpecSecureSettingsEntriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpecSecureSettingsEntries)(nil)).Elem()
}

func (i BeatSpecSecureSettingsEntriesArgs) ToBeatSpecSecureSettingsEntriesOutput() BeatSpecSecureSettingsEntriesOutput {
	return i.ToBeatSpecSecureSettingsEntriesOutputWithContext(context.Background())
}

func (i BeatSpecSecureSettingsEntriesArgs) ToBeatSpecSecureSettingsEntriesOutputWithContext(ctx context.Context) BeatSpecSecureSettingsEntriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecSecureSettingsEntriesOutput)
}

// BeatSpecSecureSettingsEntriesArrayInput is an input type that accepts BeatSpecSecureSettingsEntriesArray and BeatSpecSecureSettingsEntriesArrayOutput values.
// You can construct a concrete instance of `BeatSpecSecureSettingsEntriesArrayInput` via:
//
//          BeatSpecSecureSettingsEntriesArray{ BeatSpecSecureSettingsEntriesArgs{...} }
type BeatSpecSecureSettingsEntriesArrayInput interface {
	pulumi.Input

	ToBeatSpecSecureSettingsEntriesArrayOutput() BeatSpecSecureSettingsEntriesArrayOutput
	ToBeatSpecSecureSettingsEntriesArrayOutputWithContext(context.Context) BeatSpecSecureSettingsEntriesArrayOutput
}

type BeatSpecSecureSettingsEntriesArray []BeatSpecSecureSettingsEntriesInput

func (BeatSpecSecureSettingsEntriesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BeatSpecSecureSettingsEntries)(nil)).Elem()
}

func (i BeatSpecSecureSettingsEntriesArray) ToBeatSpecSecureSettingsEntriesArrayOutput() BeatSpecSecureSettingsEntriesArrayOutput {
	return i.ToBeatSpecSecureSettingsEntriesArrayOutputWithContext(context.Background())
}

func (i BeatSpecSecureSettingsEntriesArray) ToBeatSpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) BeatSpecSecureSettingsEntriesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatSpecSecureSettingsEntriesArrayOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type BeatSpecSecureSettingsEntriesOutput struct{ *pulumi.OutputState }

func (BeatSpecSecureSettingsEntriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatSpecSecureSettingsEntries)(nil)).Elem()
}

func (o BeatSpecSecureSettingsEntriesOutput) ToBeatSpecSecureSettingsEntriesOutput() BeatSpecSecureSettingsEntriesOutput {
	return o
}

func (o BeatSpecSecureSettingsEntriesOutput) ToBeatSpecSecureSettingsEntriesOutputWithContext(ctx context.Context) BeatSpecSecureSettingsEntriesOutput {
	return o
}

// Key is the key contained in the secret.
func (o BeatSpecSecureSettingsEntriesOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v BeatSpecSecureSettingsEntries) string { return v.Key }).(pulumi.StringOutput)
}

// Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
func (o BeatSpecSecureSettingsEntriesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BeatSpecSecureSettingsEntries) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type BeatSpecSecureSettingsEntriesArrayOutput struct{ *pulumi.OutputState }

func (BeatSpecSecureSettingsEntriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BeatSpecSecureSettingsEntries)(nil)).Elem()
}

func (o BeatSpecSecureSettingsEntriesArrayOutput) ToBeatSpecSecureSettingsEntriesArrayOutput() BeatSpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o BeatSpecSecureSettingsEntriesArrayOutput) ToBeatSpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) BeatSpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o BeatSpecSecureSettingsEntriesArrayOutput) Index(i pulumi.IntInput) BeatSpecSecureSettingsEntriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BeatSpecSecureSettingsEntries {
		return vs[0].([]BeatSpecSecureSettingsEntries)[vs[1].(int)]
	}).(BeatSpecSecureSettingsEntriesOutput)
}

// BeatStatus defines the observed state of a Beat.
type BeatStatus struct {
	AvailableNodes *int `pulumi:"availableNodes"`
	// AssociationStatus is the status of an association resource.
	ElasticsearchAssociationStatus *string `pulumi:"elasticsearchAssociationStatus"`
	ExpectedNodes                  *int    `pulumi:"expectedNodes"`
	Health                         *string `pulumi:"health"`
	// AssociationStatus is the status of an association resource.
	KibanaAssociationStatus *string `pulumi:"kibanaAssociationStatus"`
}

// BeatStatusInput is an input type that accepts BeatStatusArgs and BeatStatusOutput values.
// You can construct a concrete instance of `BeatStatusInput` via:
//
//          BeatStatusArgs{...}
type BeatStatusInput interface {
	pulumi.Input

	ToBeatStatusOutput() BeatStatusOutput
	ToBeatStatusOutputWithContext(context.Context) BeatStatusOutput
}

// BeatStatus defines the observed state of a Beat.
type BeatStatusArgs struct {
	AvailableNodes pulumi.IntPtrInput `pulumi:"availableNodes"`
	// AssociationStatus is the status of an association resource.
	ElasticsearchAssociationStatus pulumi.StringPtrInput `pulumi:"elasticsearchAssociationStatus"`
	ExpectedNodes                  pulumi.IntPtrInput    `pulumi:"expectedNodes"`
	Health                         pulumi.StringPtrInput `pulumi:"health"`
	// AssociationStatus is the status of an association resource.
	KibanaAssociationStatus pulumi.StringPtrInput `pulumi:"kibanaAssociationStatus"`
}

func (BeatStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatStatus)(nil)).Elem()
}

func (i BeatStatusArgs) ToBeatStatusOutput() BeatStatusOutput {
	return i.ToBeatStatusOutputWithContext(context.Background())
}

func (i BeatStatusArgs) ToBeatStatusOutputWithContext(ctx context.Context) BeatStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatStatusOutput)
}

func (i BeatStatusArgs) ToBeatStatusPtrOutput() BeatStatusPtrOutput {
	return i.ToBeatStatusPtrOutputWithContext(context.Background())
}

func (i BeatStatusArgs) ToBeatStatusPtrOutputWithContext(ctx context.Context) BeatStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatStatusOutput).ToBeatStatusPtrOutputWithContext(ctx)
}

// BeatStatusPtrInput is an input type that accepts BeatStatusArgs, BeatStatusPtr and BeatStatusPtrOutput values.
// You can construct a concrete instance of `BeatStatusPtrInput` via:
//
//          BeatStatusArgs{...}
//
//  or:
//
//          nil
type BeatStatusPtrInput interface {
	pulumi.Input

	ToBeatStatusPtrOutput() BeatStatusPtrOutput
	ToBeatStatusPtrOutputWithContext(context.Context) BeatStatusPtrOutput
}

type beatStatusPtrType BeatStatusArgs

func BeatStatusPtr(v *BeatStatusArgs) BeatStatusPtrInput {
	return (*beatStatusPtrType)(v)
}

func (*beatStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatStatus)(nil)).Elem()
}

func (i *beatStatusPtrType) ToBeatStatusPtrOutput() BeatStatusPtrOutput {
	return i.ToBeatStatusPtrOutputWithContext(context.Background())
}

func (i *beatStatusPtrType) ToBeatStatusPtrOutputWithContext(ctx context.Context) BeatStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatStatusPtrOutput)
}

// BeatStatus defines the observed state of a Beat.
type BeatStatusOutput struct{ *pulumi.OutputState }

func (BeatStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BeatStatus)(nil)).Elem()
}

func (o BeatStatusOutput) ToBeatStatusOutput() BeatStatusOutput {
	return o
}

func (o BeatStatusOutput) ToBeatStatusOutputWithContext(ctx context.Context) BeatStatusOutput {
	return o
}

func (o BeatStatusOutput) ToBeatStatusPtrOutput() BeatStatusPtrOutput {
	return o.ToBeatStatusPtrOutputWithContext(context.Background())
}

func (o BeatStatusOutput) ToBeatStatusPtrOutputWithContext(ctx context.Context) BeatStatusPtrOutput {
	return o.ApplyT(func(v BeatStatus) *BeatStatus {
		return &v
	}).(BeatStatusPtrOutput)
}
func (o BeatStatusOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BeatStatus) *int { return v.AvailableNodes }).(pulumi.IntPtrOutput)
}

// AssociationStatus is the status of an association resource.
func (o BeatStatusOutput) ElasticsearchAssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BeatStatus) *string { return v.ElasticsearchAssociationStatus }).(pulumi.StringPtrOutput)
}

func (o BeatStatusOutput) ExpectedNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BeatStatus) *int { return v.ExpectedNodes }).(pulumi.IntPtrOutput)
}

func (o BeatStatusOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BeatStatus) *string { return v.Health }).(pulumi.StringPtrOutput)
}

// AssociationStatus is the status of an association resource.
func (o BeatStatusOutput) KibanaAssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BeatStatus) *string { return v.KibanaAssociationStatus }).(pulumi.StringPtrOutput)
}

type BeatStatusPtrOutput struct{ *pulumi.OutputState }

func (BeatStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatStatus)(nil)).Elem()
}

func (o BeatStatusPtrOutput) ToBeatStatusPtrOutput() BeatStatusPtrOutput {
	return o
}

func (o BeatStatusPtrOutput) ToBeatStatusPtrOutputWithContext(ctx context.Context) BeatStatusPtrOutput {
	return o
}

func (o BeatStatusPtrOutput) Elem() BeatStatusOutput {
	return o.ApplyT(func(v *BeatStatus) BeatStatus { return *v }).(BeatStatusOutput)
}

func (o BeatStatusPtrOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BeatStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableNodes
	}).(pulumi.IntPtrOutput)
}

// AssociationStatus is the status of an association resource.
func (o BeatStatusPtrOutput) ElasticsearchAssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BeatStatus) *string {
		if v == nil {
			return nil
		}
		return v.ElasticsearchAssociationStatus
	}).(pulumi.StringPtrOutput)
}

func (o BeatStatusPtrOutput) ExpectedNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BeatStatus) *int {
		if v == nil {
			return nil
		}
		return v.ExpectedNodes
	}).(pulumi.IntPtrOutput)
}

func (o BeatStatusPtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BeatStatus) *string {
		if v == nil {
			return nil
		}
		return v.Health
	}).(pulumi.StringPtrOutput)
}

// AssociationStatus is the status of an association resource.
func (o BeatStatusPtrOutput) KibanaAssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BeatStatus) *string {
		if v == nil {
			return nil
		}
		return v.KibanaAssociationStatus
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BeatTypeOutput{})
	pulumi.RegisterOutputType(BeatMetadataOutput{})
	pulumi.RegisterOutputType(BeatSpecOutput{})
	pulumi.RegisterOutputType(BeatSpecPtrOutput{})
	pulumi.RegisterOutputType(BeatSpecConfigOutput{})
	pulumi.RegisterOutputType(BeatSpecConfigRefOutput{})
	pulumi.RegisterOutputType(BeatSpecConfigRefPtrOutput{})
	pulumi.RegisterOutputType(BeatSpecDaemonSetOutput{})
	pulumi.RegisterOutputType(BeatSpecDaemonSetPtrOutput{})
	pulumi.RegisterOutputType(BeatSpecDeploymentOutput{})
	pulumi.RegisterOutputType(BeatSpecDeploymentPtrOutput{})
	pulumi.RegisterOutputType(BeatSpecElasticsearchRefOutput{})
	pulumi.RegisterOutputType(BeatSpecElasticsearchRefPtrOutput{})
	pulumi.RegisterOutputType(BeatSpecKibanaRefOutput{})
	pulumi.RegisterOutputType(BeatSpecKibanaRefPtrOutput{})
	pulumi.RegisterOutputType(BeatSpecSecureSettingsOutput{})
	pulumi.RegisterOutputType(BeatSpecSecureSettingsArrayOutput{})
	pulumi.RegisterOutputType(BeatSpecSecureSettingsEntriesOutput{})
	pulumi.RegisterOutputType(BeatSpecSecureSettingsEntriesArrayOutput{})
	pulumi.RegisterOutputType(BeatStatusOutput{})
	pulumi.RegisterOutputType(BeatStatusPtrOutput{})
}

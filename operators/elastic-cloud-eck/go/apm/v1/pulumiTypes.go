// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ApmServer represents an APM Server resource in a Kubernetes cluster.
type ApmServerType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ApmServerSpec holds the specification of an APM Server.
	Spec *ApmServerSpec `pulumi:"spec"`
	// ApmServerStatus defines the observed state of ApmServer
	Status *ApmServerStatus `pulumi:"status"`
}

// ApmServerTypeInput is an input type that accepts ApmServerTypeArgs and ApmServerTypeOutput values.
// You can construct a concrete instance of `ApmServerTypeInput` via:
//
//          ApmServerTypeArgs{...}
type ApmServerTypeInput interface {
	pulumi.Input

	ToApmServerTypeOutput() ApmServerTypeOutput
	ToApmServerTypeOutputWithContext(context.Context) ApmServerTypeOutput
}

// ApmServer represents an APM Server resource in a Kubernetes cluster.
type ApmServerTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// ApmServerSpec holds the specification of an APM Server.
	Spec ApmServerSpecPtrInput `pulumi:"spec"`
	// ApmServerStatus defines the observed state of ApmServer
	Status ApmServerStatusPtrInput `pulumi:"status"`
}

func (ApmServerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerType)(nil)).Elem()
}

func (i ApmServerTypeArgs) ToApmServerTypeOutput() ApmServerTypeOutput {
	return i.ToApmServerTypeOutputWithContext(context.Background())
}

func (i ApmServerTypeArgs) ToApmServerTypeOutputWithContext(ctx context.Context) ApmServerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerTypeOutput)
}

// ApmServer represents an APM Server resource in a Kubernetes cluster.
type ApmServerTypeOutput struct{ *pulumi.OutputState }

func (ApmServerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerType)(nil)).Elem()
}

func (o ApmServerTypeOutput) ToApmServerTypeOutput() ApmServerTypeOutput {
	return o
}

func (o ApmServerTypeOutput) ToApmServerTypeOutputWithContext(ctx context.Context) ApmServerTypeOutput {
	return o
}

func (o ApmServerTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ApmServerTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ApmServerTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ApmServerType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ApmServerSpec holds the specification of an APM Server.
func (o ApmServerTypeOutput) Spec() ApmServerSpecPtrOutput {
	return o.ApplyT(func(v ApmServerType) *ApmServerSpec { return v.Spec }).(ApmServerSpecPtrOutput)
}

// ApmServerStatus defines the observed state of ApmServer
func (o ApmServerTypeOutput) Status() ApmServerStatusPtrOutput {
	return o.ApplyT(func(v ApmServerType) *ApmServerStatus { return v.Status }).(ApmServerStatusPtrOutput)
}

type ApmServerMetadata struct {
}

// ApmServerMetadataInput is an input type that accepts ApmServerMetadataArgs and ApmServerMetadataOutput values.
// You can construct a concrete instance of `ApmServerMetadataInput` via:
//
//          ApmServerMetadataArgs{...}
type ApmServerMetadataInput interface {
	pulumi.Input

	ToApmServerMetadataOutput() ApmServerMetadataOutput
	ToApmServerMetadataOutputWithContext(context.Context) ApmServerMetadataOutput
}

type ApmServerMetadataArgs struct {
}

func (ApmServerMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerMetadata)(nil)).Elem()
}

func (i ApmServerMetadataArgs) ToApmServerMetadataOutput() ApmServerMetadataOutput {
	return i.ToApmServerMetadataOutputWithContext(context.Background())
}

func (i ApmServerMetadataArgs) ToApmServerMetadataOutputWithContext(ctx context.Context) ApmServerMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerMetadataOutput)
}

type ApmServerMetadataOutput struct{ *pulumi.OutputState }

func (ApmServerMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerMetadata)(nil)).Elem()
}

func (o ApmServerMetadataOutput) ToApmServerMetadataOutput() ApmServerMetadataOutput {
	return o
}

func (o ApmServerMetadataOutput) ToApmServerMetadataOutputWithContext(ctx context.Context) ApmServerMetadataOutput {
	return o
}

// ApmServerSpec holds the specification of an APM Server.
type ApmServerSpec struct {
	// Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
	Config map[string]interface{} `pulumi:"config"`
	// Count of APM Server instances to deploy.
	Count *int `pulumi:"count"`
	// ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
	ElasticsearchRef *ApmServerSpecElasticsearchRef `pulumi:"elasticsearchRef"`
	// HTTP holds the HTTP layer configuration for the APM Server resource.
	Http *ApmServerSpecHttp `pulumi:"http"`
	// Image is the APM Server Docker image to deploy.
	Image *string `pulumi:"image"`
	// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
	KibanaRef *ApmServerSpecKibanaRef `pulumi:"kibanaRef"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
	PodTemplate map[string]interface{} `pulumi:"podTemplate"`
	// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for APM Server.
	SecureSettings []ApmServerSpecSecureSettings `pulumi:"secureSettings"`
	// ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// Version of the APM Server.
	Version string `pulumi:"version"`
}

// ApmServerSpecInput is an input type that accepts ApmServerSpecArgs and ApmServerSpecOutput values.
// You can construct a concrete instance of `ApmServerSpecInput` via:
//
//          ApmServerSpecArgs{...}
type ApmServerSpecInput interface {
	pulumi.Input

	ToApmServerSpecOutput() ApmServerSpecOutput
	ToApmServerSpecOutputWithContext(context.Context) ApmServerSpecOutput
}

// ApmServerSpec holds the specification of an APM Server.
type ApmServerSpecArgs struct {
	// Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
	Config pulumi.MapInput `pulumi:"config"`
	// Count of APM Server instances to deploy.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
	ElasticsearchRef ApmServerSpecElasticsearchRefPtrInput `pulumi:"elasticsearchRef"`
	// HTTP holds the HTTP layer configuration for the APM Server resource.
	Http ApmServerSpecHttpPtrInput `pulumi:"http"`
	// Image is the APM Server Docker image to deploy.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
	KibanaRef ApmServerSpecKibanaRefPtrInput `pulumi:"kibanaRef"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
	PodTemplate pulumi.MapInput `pulumi:"podTemplate"`
	// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for APM Server.
	SecureSettings ApmServerSpecSecureSettingsArrayInput `pulumi:"secureSettings"`
	// ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// Version of the APM Server.
	Version pulumi.StringInput `pulumi:"version"`
}

func (ApmServerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpec)(nil)).Elem()
}

func (i ApmServerSpecArgs) ToApmServerSpecOutput() ApmServerSpecOutput {
	return i.ToApmServerSpecOutputWithContext(context.Background())
}

func (i ApmServerSpecArgs) ToApmServerSpecOutputWithContext(ctx context.Context) ApmServerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecOutput)
}

func (i ApmServerSpecArgs) ToApmServerSpecPtrOutput() ApmServerSpecPtrOutput {
	return i.ToApmServerSpecPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecArgs) ToApmServerSpecPtrOutputWithContext(ctx context.Context) ApmServerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecOutput).ToApmServerSpecPtrOutputWithContext(ctx)
}

// ApmServerSpecPtrInput is an input type that accepts ApmServerSpecArgs, ApmServerSpecPtr and ApmServerSpecPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecPtrInput` via:
//
//          ApmServerSpecArgs{...}
//
//  or:
//
//          nil
type ApmServerSpecPtrInput interface {
	pulumi.Input

	ToApmServerSpecPtrOutput() ApmServerSpecPtrOutput
	ToApmServerSpecPtrOutputWithContext(context.Context) ApmServerSpecPtrOutput
}

type apmServerSpecPtrType ApmServerSpecArgs

func ApmServerSpecPtr(v *ApmServerSpecArgs) ApmServerSpecPtrInput {
	return (*apmServerSpecPtrType)(v)
}

func (*apmServerSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpec)(nil)).Elem()
}

func (i *apmServerSpecPtrType) ToApmServerSpecPtrOutput() ApmServerSpecPtrOutput {
	return i.ToApmServerSpecPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecPtrType) ToApmServerSpecPtrOutputWithContext(ctx context.Context) ApmServerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecPtrOutput)
}

// ApmServerSpec holds the specification of an APM Server.
type ApmServerSpecOutput struct{ *pulumi.OutputState }

func (ApmServerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpec)(nil)).Elem()
}

func (o ApmServerSpecOutput) ToApmServerSpecOutput() ApmServerSpecOutput {
	return o
}

func (o ApmServerSpecOutput) ToApmServerSpecOutputWithContext(ctx context.Context) ApmServerSpecOutput {
	return o
}

func (o ApmServerSpecOutput) ToApmServerSpecPtrOutput() ApmServerSpecPtrOutput {
	return o.ToApmServerSpecPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecOutput) ToApmServerSpecPtrOutputWithContext(ctx context.Context) ApmServerSpecPtrOutput {
	return o.ApplyT(func(v ApmServerSpec) *ApmServerSpec {
		return &v
	}).(ApmServerSpecPtrOutput)
}

// Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
func (o ApmServerSpecOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v ApmServerSpec) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// Count of APM Server instances to deploy.
func (o ApmServerSpecOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApmServerSpec) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
func (o ApmServerSpecOutput) ElasticsearchRef() ApmServerSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v ApmServerSpec) *ApmServerSpecElasticsearchRef { return v.ElasticsearchRef }).(ApmServerSpecElasticsearchRefPtrOutput)
}

// HTTP holds the HTTP layer configuration for the APM Server resource.
func (o ApmServerSpecOutput) Http() ApmServerSpecHttpPtrOutput {
	return o.ApplyT(func(v ApmServerSpec) *ApmServerSpecHttp { return v.Http }).(ApmServerSpecHttpPtrOutput)
}

// Image is the APM Server Docker image to deploy.
func (o ApmServerSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
func (o ApmServerSpecOutput) KibanaRef() ApmServerSpecKibanaRefPtrOutput {
	return o.ApplyT(func(v ApmServerSpec) *ApmServerSpecKibanaRef { return v.KibanaRef }).(ApmServerSpecKibanaRefPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
func (o ApmServerSpecOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v ApmServerSpec) map[string]interface{} { return v.PodTemplate }).(pulumi.MapOutput)
}

// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for APM Server.
func (o ApmServerSpecOutput) SecureSettings() ApmServerSpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v ApmServerSpec) []ApmServerSpecSecureSettings { return v.SecureSettings }).(ApmServerSpecSecureSettingsArrayOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
func (o ApmServerSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// Version of the APM Server.
func (o ApmServerSpecOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ApmServerSpec) string { return v.Version }).(pulumi.StringOutput)
}

type ApmServerSpecPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpec)(nil)).Elem()
}

func (o ApmServerSpecPtrOutput) ToApmServerSpecPtrOutput() ApmServerSpecPtrOutput {
	return o
}

func (o ApmServerSpecPtrOutput) ToApmServerSpecPtrOutputWithContext(ctx context.Context) ApmServerSpecPtrOutput {
	return o
}

func (o ApmServerSpecPtrOutput) Elem() ApmServerSpecOutput {
	return o.ApplyT(func(v *ApmServerSpec) ApmServerSpec { return *v }).(ApmServerSpecOutput)
}

// Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
func (o ApmServerSpecPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *ApmServerSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// Count of APM Server instances to deploy.
func (o ApmServerSpecPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApmServerSpec) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
func (o ApmServerSpecPtrOutput) ElasticsearchRef() ApmServerSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v *ApmServerSpec) *ApmServerSpecElasticsearchRef {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRef
	}).(ApmServerSpecElasticsearchRefPtrOutput)
}

// HTTP holds the HTTP layer configuration for the APM Server resource.
func (o ApmServerSpecPtrOutput) Http() ApmServerSpecHttpPtrOutput {
	return o.ApplyT(func(v *ApmServerSpec) *ApmServerSpecHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(ApmServerSpecHttpPtrOutput)
}

// Image is the APM Server Docker image to deploy.
func (o ApmServerSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
func (o ApmServerSpecPtrOutput) KibanaRef() ApmServerSpecKibanaRefPtrOutput {
	return o.ApplyT(func(v *ApmServerSpec) *ApmServerSpecKibanaRef {
		if v == nil {
			return nil
		}
		return v.KibanaRef
	}).(ApmServerSpecKibanaRefPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
func (o ApmServerSpecPtrOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v *ApmServerSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.MapOutput)
}

// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for APM Server.
func (o ApmServerSpecPtrOutput) SecureSettings() ApmServerSpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v *ApmServerSpec) []ApmServerSpecSecureSettings {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(ApmServerSpecSecureSettingsArrayOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
func (o ApmServerSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// Version of the APM Server.
func (o ApmServerSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
type ApmServerSpecConfig struct {
}

// ApmServerSpecConfigInput is an input type that accepts ApmServerSpecConfigArgs and ApmServerSpecConfigOutput values.
// You can construct a concrete instance of `ApmServerSpecConfigInput` via:
//
//          ApmServerSpecConfigArgs{...}
type ApmServerSpecConfigInput interface {
	pulumi.Input

	ToApmServerSpecConfigOutput() ApmServerSpecConfigOutput
	ToApmServerSpecConfigOutputWithContext(context.Context) ApmServerSpecConfigOutput
}

// Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
type ApmServerSpecConfigArgs struct {
}

func (ApmServerSpecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecConfig)(nil)).Elem()
}

func (i ApmServerSpecConfigArgs) ToApmServerSpecConfigOutput() ApmServerSpecConfigOutput {
	return i.ToApmServerSpecConfigOutputWithContext(context.Background())
}

func (i ApmServerSpecConfigArgs) ToApmServerSpecConfigOutputWithContext(ctx context.Context) ApmServerSpecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecConfigOutput)
}

// Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
type ApmServerSpecConfigOutput struct{ *pulumi.OutputState }

func (ApmServerSpecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecConfig)(nil)).Elem()
}

func (o ApmServerSpecConfigOutput) ToApmServerSpecConfigOutput() ApmServerSpecConfigOutput {
	return o
}

func (o ApmServerSpecConfigOutput) ToApmServerSpecConfigOutputWithContext(ctx context.Context) ApmServerSpecConfigOutput {
	return o
}

// ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
type ApmServerSpecElasticsearchRef struct {
	// Name of the Kubernetes object.
	Name string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
}

// ApmServerSpecElasticsearchRefInput is an input type that accepts ApmServerSpecElasticsearchRefArgs and ApmServerSpecElasticsearchRefOutput values.
// You can construct a concrete instance of `ApmServerSpecElasticsearchRefInput` via:
//
//          ApmServerSpecElasticsearchRefArgs{...}
type ApmServerSpecElasticsearchRefInput interface {
	pulumi.Input

	ToApmServerSpecElasticsearchRefOutput() ApmServerSpecElasticsearchRefOutput
	ToApmServerSpecElasticsearchRefOutputWithContext(context.Context) ApmServerSpecElasticsearchRefOutput
}

// ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
type ApmServerSpecElasticsearchRefArgs struct {
	// Name of the Kubernetes object.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ApmServerSpecElasticsearchRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecElasticsearchRef)(nil)).Elem()
}

func (i ApmServerSpecElasticsearchRefArgs) ToApmServerSpecElasticsearchRefOutput() ApmServerSpecElasticsearchRefOutput {
	return i.ToApmServerSpecElasticsearchRefOutputWithContext(context.Background())
}

func (i ApmServerSpecElasticsearchRefArgs) ToApmServerSpecElasticsearchRefOutputWithContext(ctx context.Context) ApmServerSpecElasticsearchRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecElasticsearchRefOutput)
}

func (i ApmServerSpecElasticsearchRefArgs) ToApmServerSpecElasticsearchRefPtrOutput() ApmServerSpecElasticsearchRefPtrOutput {
	return i.ToApmServerSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecElasticsearchRefArgs) ToApmServerSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) ApmServerSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecElasticsearchRefOutput).ToApmServerSpecElasticsearchRefPtrOutputWithContext(ctx)
}

// ApmServerSpecElasticsearchRefPtrInput is an input type that accepts ApmServerSpecElasticsearchRefArgs, ApmServerSpecElasticsearchRefPtr and ApmServerSpecElasticsearchRefPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecElasticsearchRefPtrInput` via:
//
//          ApmServerSpecElasticsearchRefArgs{...}
//
//  or:
//
//          nil
type ApmServerSpecElasticsearchRefPtrInput interface {
	pulumi.Input

	ToApmServerSpecElasticsearchRefPtrOutput() ApmServerSpecElasticsearchRefPtrOutput
	ToApmServerSpecElasticsearchRefPtrOutputWithContext(context.Context) ApmServerSpecElasticsearchRefPtrOutput
}

type apmServerSpecElasticsearchRefPtrType ApmServerSpecElasticsearchRefArgs

func ApmServerSpecElasticsearchRefPtr(v *ApmServerSpecElasticsearchRefArgs) ApmServerSpecElasticsearchRefPtrInput {
	return (*apmServerSpecElasticsearchRefPtrType)(v)
}

func (*apmServerSpecElasticsearchRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecElasticsearchRef)(nil)).Elem()
}

func (i *apmServerSpecElasticsearchRefPtrType) ToApmServerSpecElasticsearchRefPtrOutput() ApmServerSpecElasticsearchRefPtrOutput {
	return i.ToApmServerSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecElasticsearchRefPtrType) ToApmServerSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) ApmServerSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecElasticsearchRefPtrOutput)
}

// ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
type ApmServerSpecElasticsearchRefOutput struct{ *pulumi.OutputState }

func (ApmServerSpecElasticsearchRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecElasticsearchRef)(nil)).Elem()
}

func (o ApmServerSpecElasticsearchRefOutput) ToApmServerSpecElasticsearchRefOutput() ApmServerSpecElasticsearchRefOutput {
	return o
}

func (o ApmServerSpecElasticsearchRefOutput) ToApmServerSpecElasticsearchRefOutputWithContext(ctx context.Context) ApmServerSpecElasticsearchRefOutput {
	return o
}

func (o ApmServerSpecElasticsearchRefOutput) ToApmServerSpecElasticsearchRefPtrOutput() ApmServerSpecElasticsearchRefPtrOutput {
	return o.ToApmServerSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecElasticsearchRefOutput) ToApmServerSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) ApmServerSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v ApmServerSpecElasticsearchRef) *ApmServerSpecElasticsearchRef {
		return &v
	}).(ApmServerSpecElasticsearchRefPtrOutput)
}

// Name of the Kubernetes object.
func (o ApmServerSpecElasticsearchRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApmServerSpecElasticsearchRef) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ApmServerSpecElasticsearchRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecElasticsearchRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ApmServerSpecElasticsearchRefPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecElasticsearchRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecElasticsearchRef)(nil)).Elem()
}

func (o ApmServerSpecElasticsearchRefPtrOutput) ToApmServerSpecElasticsearchRefPtrOutput() ApmServerSpecElasticsearchRefPtrOutput {
	return o
}

func (o ApmServerSpecElasticsearchRefPtrOutput) ToApmServerSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) ApmServerSpecElasticsearchRefPtrOutput {
	return o
}

func (o ApmServerSpecElasticsearchRefPtrOutput) Elem() ApmServerSpecElasticsearchRefOutput {
	return o.ApplyT(func(v *ApmServerSpecElasticsearchRef) ApmServerSpecElasticsearchRef { return *v }).(ApmServerSpecElasticsearchRefOutput)
}

// Name of the Kubernetes object.
func (o ApmServerSpecElasticsearchRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ApmServerSpecElasticsearchRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// HTTP holds the HTTP layer configuration for the APM Server resource.
type ApmServerSpecHttp struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service *ApmServerSpecHttpService `pulumi:"service"`
	// TLS defines options for configuring TLS for HTTP.
	Tls *ApmServerSpecHttpTls `pulumi:"tls"`
}

// ApmServerSpecHttpInput is an input type that accepts ApmServerSpecHttpArgs and ApmServerSpecHttpOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpInput` via:
//
//          ApmServerSpecHttpArgs{...}
type ApmServerSpecHttpInput interface {
	pulumi.Input

	ToApmServerSpecHttpOutput() ApmServerSpecHttpOutput
	ToApmServerSpecHttpOutputWithContext(context.Context) ApmServerSpecHttpOutput
}

// HTTP holds the HTTP layer configuration for the APM Server resource.
type ApmServerSpecHttpArgs struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service ApmServerSpecHttpServicePtrInput `pulumi:"service"`
	// TLS defines options for configuring TLS for HTTP.
	Tls ApmServerSpecHttpTlsPtrInput `pulumi:"tls"`
}

func (ApmServerSpecHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttp)(nil)).Elem()
}

func (i ApmServerSpecHttpArgs) ToApmServerSpecHttpOutput() ApmServerSpecHttpOutput {
	return i.ToApmServerSpecHttpOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpArgs) ToApmServerSpecHttpOutputWithContext(ctx context.Context) ApmServerSpecHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpOutput)
}

func (i ApmServerSpecHttpArgs) ToApmServerSpecHttpPtrOutput() ApmServerSpecHttpPtrOutput {
	return i.ToApmServerSpecHttpPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpArgs) ToApmServerSpecHttpPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpOutput).ToApmServerSpecHttpPtrOutputWithContext(ctx)
}

// ApmServerSpecHttpPtrInput is an input type that accepts ApmServerSpecHttpArgs, ApmServerSpecHttpPtr and ApmServerSpecHttpPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpPtrInput` via:
//
//          ApmServerSpecHttpArgs{...}
//
//  or:
//
//          nil
type ApmServerSpecHttpPtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpPtrOutput() ApmServerSpecHttpPtrOutput
	ToApmServerSpecHttpPtrOutputWithContext(context.Context) ApmServerSpecHttpPtrOutput
}

type apmServerSpecHttpPtrType ApmServerSpecHttpArgs

func ApmServerSpecHttpPtr(v *ApmServerSpecHttpArgs) ApmServerSpecHttpPtrInput {
	return (*apmServerSpecHttpPtrType)(v)
}

func (*apmServerSpecHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttp)(nil)).Elem()
}

func (i *apmServerSpecHttpPtrType) ToApmServerSpecHttpPtrOutput() ApmServerSpecHttpPtrOutput {
	return i.ToApmServerSpecHttpPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpPtrType) ToApmServerSpecHttpPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpPtrOutput)
}

// HTTP holds the HTTP layer configuration for the APM Server resource.
type ApmServerSpecHttpOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttp)(nil)).Elem()
}

func (o ApmServerSpecHttpOutput) ToApmServerSpecHttpOutput() ApmServerSpecHttpOutput {
	return o
}

func (o ApmServerSpecHttpOutput) ToApmServerSpecHttpOutputWithContext(ctx context.Context) ApmServerSpecHttpOutput {
	return o
}

func (o ApmServerSpecHttpOutput) ToApmServerSpecHttpPtrOutput() ApmServerSpecHttpPtrOutput {
	return o.ToApmServerSpecHttpPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpOutput) ToApmServerSpecHttpPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttp) *ApmServerSpecHttp {
		return &v
	}).(ApmServerSpecHttpPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o ApmServerSpecHttpOutput) Service() ApmServerSpecHttpServicePtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttp) *ApmServerSpecHttpService { return v.Service }).(ApmServerSpecHttpServicePtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
func (o ApmServerSpecHttpOutput) Tls() ApmServerSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttp) *ApmServerSpecHttpTls { return v.Tls }).(ApmServerSpecHttpTlsPtrOutput)
}

type ApmServerSpecHttpPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttp)(nil)).Elem()
}

func (o ApmServerSpecHttpPtrOutput) ToApmServerSpecHttpPtrOutput() ApmServerSpecHttpPtrOutput {
	return o
}

func (o ApmServerSpecHttpPtrOutput) ToApmServerSpecHttpPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpPtrOutput {
	return o
}

func (o ApmServerSpecHttpPtrOutput) Elem() ApmServerSpecHttpOutput {
	return o.ApplyT(func(v *ApmServerSpecHttp) ApmServerSpecHttp { return *v }).(ApmServerSpecHttpOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o ApmServerSpecHttpPtrOutput) Service() ApmServerSpecHttpServicePtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttp) *ApmServerSpecHttpService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ApmServerSpecHttpServicePtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
func (o ApmServerSpecHttpPtrOutput) Tls() ApmServerSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttp) *ApmServerSpecHttpTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ApmServerSpecHttpTlsPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ApmServerSpecHttpService struct {
	// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec *ApmServerSpecHttpServiceSpec `pulumi:"spec"`
}

// ApmServerSpecHttpServiceInput is an input type that accepts ApmServerSpecHttpServiceArgs and ApmServerSpecHttpServiceOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceInput` via:
//
//          ApmServerSpecHttpServiceArgs{...}
type ApmServerSpecHttpServiceInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceOutput() ApmServerSpecHttpServiceOutput
	ToApmServerSpecHttpServiceOutputWithContext(context.Context) ApmServerSpecHttpServiceOutput
}

// Service defines the template for the associated Kubernetes Service object.
type ApmServerSpecHttpServiceArgs struct {
	// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec ApmServerSpecHttpServiceSpecPtrInput `pulumi:"spec"`
}

func (ApmServerSpecHttpServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpService)(nil)).Elem()
}

func (i ApmServerSpecHttpServiceArgs) ToApmServerSpecHttpServiceOutput() ApmServerSpecHttpServiceOutput {
	return i.ToApmServerSpecHttpServiceOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceArgs) ToApmServerSpecHttpServiceOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceOutput)
}

func (i ApmServerSpecHttpServiceArgs) ToApmServerSpecHttpServicePtrOutput() ApmServerSpecHttpServicePtrOutput {
	return i.ToApmServerSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceArgs) ToApmServerSpecHttpServicePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceOutput).ToApmServerSpecHttpServicePtrOutputWithContext(ctx)
}

// ApmServerSpecHttpServicePtrInput is an input type that accepts ApmServerSpecHttpServiceArgs, ApmServerSpecHttpServicePtr and ApmServerSpecHttpServicePtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServicePtrInput` via:
//
//          ApmServerSpecHttpServiceArgs{...}
//
//  or:
//
//          nil
type ApmServerSpecHttpServicePtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpServicePtrOutput() ApmServerSpecHttpServicePtrOutput
	ToApmServerSpecHttpServicePtrOutputWithContext(context.Context) ApmServerSpecHttpServicePtrOutput
}

type apmServerSpecHttpServicePtrType ApmServerSpecHttpServiceArgs

func ApmServerSpecHttpServicePtr(v *ApmServerSpecHttpServiceArgs) ApmServerSpecHttpServicePtrInput {
	return (*apmServerSpecHttpServicePtrType)(v)
}

func (*apmServerSpecHttpServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpService)(nil)).Elem()
}

func (i *apmServerSpecHttpServicePtrType) ToApmServerSpecHttpServicePtrOutput() ApmServerSpecHttpServicePtrOutput {
	return i.ToApmServerSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpServicePtrType) ToApmServerSpecHttpServicePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServicePtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ApmServerSpecHttpServiceOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpService)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceOutput) ToApmServerSpecHttpServiceOutput() ApmServerSpecHttpServiceOutput {
	return o
}

func (o ApmServerSpecHttpServiceOutput) ToApmServerSpecHttpServiceOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceOutput {
	return o
}

func (o ApmServerSpecHttpServiceOutput) ToApmServerSpecHttpServicePtrOutput() ApmServerSpecHttpServicePtrOutput {
	return o.ToApmServerSpecHttpServicePtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpServiceOutput) ToApmServerSpecHttpServicePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServicePtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpService) *ApmServerSpecHttpService {
		return &v
	}).(ApmServerSpecHttpServicePtrOutput)
}

// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
func (o ApmServerSpecHttpServiceOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v ApmServerSpecHttpService) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// Spec is the specification of the service.
func (o ApmServerSpecHttpServiceOutput) Spec() ApmServerSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpService) *ApmServerSpecHttpServiceSpec { return v.Spec }).(ApmServerSpecHttpServiceSpecPtrOutput)
}

type ApmServerSpecHttpServicePtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpService)(nil)).Elem()
}

func (o ApmServerSpecHttpServicePtrOutput) ToApmServerSpecHttpServicePtrOutput() ApmServerSpecHttpServicePtrOutput {
	return o
}

func (o ApmServerSpecHttpServicePtrOutput) ToApmServerSpecHttpServicePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServicePtrOutput {
	return o
}

func (o ApmServerSpecHttpServicePtrOutput) Elem() ApmServerSpecHttpServiceOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpService) ApmServerSpecHttpService { return *v }).(ApmServerSpecHttpServiceOutput)
}

// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
func (o ApmServerSpecHttpServicePtrOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpService) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.MapOutput)
}

// Spec is the specification of the service.
func (o ApmServerSpecHttpServicePtrOutput) Spec() ApmServerSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpService) *ApmServerSpecHttpServiceSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ApmServerSpecHttpServiceSpecPtrOutput)
}

// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
type ApmServerSpecHttpServiceMetadata struct {
}

// ApmServerSpecHttpServiceMetadataInput is an input type that accepts ApmServerSpecHttpServiceMetadataArgs and ApmServerSpecHttpServiceMetadataOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceMetadataInput` via:
//
//          ApmServerSpecHttpServiceMetadataArgs{...}
type ApmServerSpecHttpServiceMetadataInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceMetadataOutput() ApmServerSpecHttpServiceMetadataOutput
	ToApmServerSpecHttpServiceMetadataOutputWithContext(context.Context) ApmServerSpecHttpServiceMetadataOutput
}

// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
type ApmServerSpecHttpServiceMetadataArgs struct {
}

func (ApmServerSpecHttpServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceMetadata)(nil)).Elem()
}

func (i ApmServerSpecHttpServiceMetadataArgs) ToApmServerSpecHttpServiceMetadataOutput() ApmServerSpecHttpServiceMetadataOutput {
	return i.ToApmServerSpecHttpServiceMetadataOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceMetadataArgs) ToApmServerSpecHttpServiceMetadataOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceMetadataOutput)
}

// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
type ApmServerSpecHttpServiceMetadataOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceMetadata)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceMetadataOutput) ToApmServerSpecHttpServiceMetadataOutput() ApmServerSpecHttpServiceMetadataOutput {
	return o
}

func (o ApmServerSpecHttpServiceMetadataOutput) ToApmServerSpecHttpServiceMetadataOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceMetadataOutput {
	return o
}

// Spec is the specification of the service.
type ApmServerSpecHttpServiceSpec struct {
	// clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
	IpFamily *string `pulumi:"ipFamily"`
	// Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []ApmServerSpecHttpServiceSpecPorts `pulumi:"ports"`
	// publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig *ApmServerSpecHttpServiceSpecSessionAffinityConfig `pulumi:"sessionAffinityConfig"`
	// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
	TopologyKeys []string `pulumi:"topologyKeys"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// ApmServerSpecHttpServiceSpecInput is an input type that accepts ApmServerSpecHttpServiceSpecArgs and ApmServerSpecHttpServiceSpecOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecInput` via:
//
//          ApmServerSpecHttpServiceSpecArgs{...}
type ApmServerSpecHttpServiceSpecInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecOutput() ApmServerSpecHttpServiceSpecOutput
	ToApmServerSpecHttpServiceSpecOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecOutput
}

// Spec is the specification of the service.
type ApmServerSpecHttpServiceSpecArgs struct {
	// clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
	IpFamily pulumi.StringPtrInput `pulumi:"ipFamily"`
	// Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports ApmServerSpecHttpServiceSpecPortsArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity pulumi.StringPtrInput `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrInput `pulumi:"sessionAffinityConfig"`
	// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
	TopologyKeys pulumi.StringArrayInput `pulumi:"topologyKeys"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ApmServerSpecHttpServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpec)(nil)).Elem()
}

func (i ApmServerSpecHttpServiceSpecArgs) ToApmServerSpecHttpServiceSpecOutput() ApmServerSpecHttpServiceSpecOutput {
	return i.ToApmServerSpecHttpServiceSpecOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecArgs) ToApmServerSpecHttpServiceSpecOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecOutput)
}

func (i ApmServerSpecHttpServiceSpecArgs) ToApmServerSpecHttpServiceSpecPtrOutput() ApmServerSpecHttpServiceSpecPtrOutput {
	return i.ToApmServerSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecArgs) ToApmServerSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecOutput).ToApmServerSpecHttpServiceSpecPtrOutputWithContext(ctx)
}

// ApmServerSpecHttpServiceSpecPtrInput is an input type that accepts ApmServerSpecHttpServiceSpecArgs, ApmServerSpecHttpServiceSpecPtr and ApmServerSpecHttpServiceSpecPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecPtrInput` via:
//
//          ApmServerSpecHttpServiceSpecArgs{...}
//
//  or:
//
//          nil
type ApmServerSpecHttpServiceSpecPtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecPtrOutput() ApmServerSpecHttpServiceSpecPtrOutput
	ToApmServerSpecHttpServiceSpecPtrOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecPtrOutput
}

type apmServerSpecHttpServiceSpecPtrType ApmServerSpecHttpServiceSpecArgs

func ApmServerSpecHttpServiceSpecPtr(v *ApmServerSpecHttpServiceSpecArgs) ApmServerSpecHttpServiceSpecPtrInput {
	return (*apmServerSpecHttpServiceSpecPtrType)(v)
}

func (*apmServerSpecHttpServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpServiceSpec)(nil)).Elem()
}

func (i *apmServerSpecHttpServiceSpecPtrType) ToApmServerSpecHttpServiceSpecPtrOutput() ApmServerSpecHttpServiceSpecPtrOutput {
	return i.ToApmServerSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpServiceSpecPtrType) ToApmServerSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecPtrOutput)
}

// Spec is the specification of the service.
type ApmServerSpecHttpServiceSpecOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpec)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecOutput) ToApmServerSpecHttpServiceSpecOutput() ApmServerSpecHttpServiceSpecOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecOutput) ToApmServerSpecHttpServiceSpecOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecOutput) ToApmServerSpecHttpServiceSpecPtrOutput() ApmServerSpecHttpServiceSpecPtrOutput {
	return o.ToApmServerSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpServiceSpecOutput) ToApmServerSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *ApmServerSpecHttpServiceSpec {
		return &v
	}).(ApmServerSpecHttpServiceSpecPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ApmServerSpecHttpServiceSpecOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
func (o ApmServerSpecHttpServiceSpecOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
func (o ApmServerSpecHttpServiceSpecOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
func (o ApmServerSpecHttpServiceSpecOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
func (o ApmServerSpecHttpServiceSpecOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
func (o ApmServerSpecHttpServiceSpecOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.IpFamily }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
func (o ApmServerSpecHttpServiceSpecOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
func (o ApmServerSpecHttpServiceSpecOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ApmServerSpecHttpServiceSpecOutput) Ports() ApmServerSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) []ApmServerSpecHttpServiceSpecPorts { return v.Ports }).(ApmServerSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
func (o ApmServerSpecHttpServiceSpecOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ApmServerSpecHttpServiceSpecOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ApmServerSpecHttpServiceSpecOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o ApmServerSpecHttpServiceSpecOutput) SessionAffinityConfig() ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *ApmServerSpecHttpServiceSpecSessionAffinityConfig {
		return v.SessionAffinityConfig
	}).(ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
func (o ApmServerSpecHttpServiceSpecOutput) TopologyKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) []string { return v.TopologyKeys }).(pulumi.StringArrayOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ApmServerSpecHttpServiceSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ApmServerSpecHttpServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpServiceSpec)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecPtrOutput) ToApmServerSpecHttpServiceSpecPtrOutput() ApmServerSpecHttpServiceSpecPtrOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecPtrOutput) ToApmServerSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPtrOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecPtrOutput) Elem() ApmServerSpecHttpServiceSpecOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) ApmServerSpecHttpServiceSpec { return *v }).(ApmServerSpecHttpServiceSpecOutput)
}

// clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ApmServerSpecHttpServiceSpecPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
func (o ApmServerSpecHttpServiceSpecPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
func (o ApmServerSpecHttpServiceSpecPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
func (o ApmServerSpecHttpServiceSpecPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
func (o ApmServerSpecHttpServiceSpecPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
func (o ApmServerSpecHttpServiceSpecPtrOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.IpFamily
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
func (o ApmServerSpecHttpServiceSpecPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
func (o ApmServerSpecHttpServiceSpecPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ApmServerSpecHttpServiceSpecPtrOutput) Ports() ApmServerSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) []ApmServerSpecHttpServiceSpecPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ApmServerSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
func (o ApmServerSpecHttpServiceSpecPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ApmServerSpecHttpServiceSpecPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ApmServerSpecHttpServiceSpecPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o ApmServerSpecHttpServiceSpecPtrOutput) SessionAffinityConfig() ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *ApmServerSpecHttpServiceSpecSessionAffinityConfig {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
func (o ApmServerSpecHttpServiceSpecPtrOutput) TopologyKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.TopologyKeys
	}).(pulumi.StringArrayOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ApmServerSpecHttpServiceSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ServicePort contains information on service's port.
type ApmServerSpecHttpServiceSpecPorts struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort *ApmServerSpecHttpServiceSpecPortsTargetPort `pulumi:"targetPort"`
}

// ApmServerSpecHttpServiceSpecPortsInput is an input type that accepts ApmServerSpecHttpServiceSpecPortsArgs and ApmServerSpecHttpServiceSpecPortsOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecPortsInput` via:
//
//          ApmServerSpecHttpServiceSpecPortsArgs{...}
type ApmServerSpecHttpServiceSpecPortsInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecPortsOutput() ApmServerSpecHttpServiceSpecPortsOutput
	ToApmServerSpecHttpServiceSpecPortsOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecPortsOutput
}

// ServicePort contains information on service's port.
type ApmServerSpecHttpServiceSpecPortsArgs struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort ApmServerSpecHttpServiceSpecPortsTargetPortPtrInput `pulumi:"targetPort"`
}

func (ApmServerSpecHttpServiceSpecPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i ApmServerSpecHttpServiceSpecPortsArgs) ToApmServerSpecHttpServiceSpecPortsOutput() ApmServerSpecHttpServiceSpecPortsOutput {
	return i.ToApmServerSpecHttpServiceSpecPortsOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecPortsArgs) ToApmServerSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecPortsOutput)
}

// ApmServerSpecHttpServiceSpecPortsArrayInput is an input type that accepts ApmServerSpecHttpServiceSpecPortsArray and ApmServerSpecHttpServiceSpecPortsArrayOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecPortsArrayInput` via:
//
//          ApmServerSpecHttpServiceSpecPortsArray{ ApmServerSpecHttpServiceSpecPortsArgs{...} }
type ApmServerSpecHttpServiceSpecPortsArrayInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecPortsArrayOutput() ApmServerSpecHttpServiceSpecPortsArrayOutput
	ToApmServerSpecHttpServiceSpecPortsArrayOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecPortsArrayOutput
}

type ApmServerSpecHttpServiceSpecPortsArray []ApmServerSpecHttpServiceSpecPortsInput

func (ApmServerSpecHttpServiceSpecPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmServerSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i ApmServerSpecHttpServiceSpecPortsArray) ToApmServerSpecHttpServiceSpecPortsArrayOutput() ApmServerSpecHttpServiceSpecPortsArrayOutput {
	return i.ToApmServerSpecHttpServiceSpecPortsArrayOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecPortsArray) ToApmServerSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecPortsArrayOutput)
}

// ServicePort contains information on service's port.
type ApmServerSpecHttpServiceSpecPortsOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecPortsOutput) ToApmServerSpecHttpServiceSpecPortsOutput() ApmServerSpecHttpServiceSpecPortsOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecPortsOutput) ToApmServerSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPortsOutput {
	return o
}

// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate.
func (o ApmServerSpecHttpServiceSpecPortsOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecPorts) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
func (o ApmServerSpecHttpServiceSpecPortsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecPorts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o ApmServerSpecHttpServiceSpecPortsOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecPorts) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o ApmServerSpecHttpServiceSpecPortsOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecPorts) int { return v.Port }).(pulumi.IntOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
func (o ApmServerSpecHttpServiceSpecPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o ApmServerSpecHttpServiceSpecPortsOutput) TargetPort() ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecPorts) *ApmServerSpecHttpServiceSpecPortsTargetPort {
		return v.TargetPort
	}).(ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput)
}

type ApmServerSpecHttpServiceSpecPortsArrayOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmServerSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecPortsArrayOutput) ToApmServerSpecHttpServiceSpecPortsArrayOutput() ApmServerSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecPortsArrayOutput) ToApmServerSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecPortsArrayOutput) Index(i pulumi.IntInput) ApmServerSpecHttpServiceSpecPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApmServerSpecHttpServiceSpecPorts {
		return vs[0].([]ApmServerSpecHttpServiceSpecPorts)[vs[1].(int)]
	}).(ApmServerSpecHttpServiceSpecPortsOutput)
}

type ApmServerSpecHttpServiceSpecPortsTargetPort struct {
}

// ApmServerSpecHttpServiceSpecPortsTargetPortInput is an input type that accepts ApmServerSpecHttpServiceSpecPortsTargetPortArgs and ApmServerSpecHttpServiceSpecPortsTargetPortOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecPortsTargetPortInput` via:
//
//          ApmServerSpecHttpServiceSpecPortsTargetPortArgs{...}
type ApmServerSpecHttpServiceSpecPortsTargetPortInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecPortsTargetPortOutput() ApmServerSpecHttpServiceSpecPortsTargetPortOutput
	ToApmServerSpecHttpServiceSpecPortsTargetPortOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecPortsTargetPortOutput
}

type ApmServerSpecHttpServiceSpecPortsTargetPortArgs struct {
}

func (ApmServerSpecHttpServiceSpecPortsTargetPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpecPortsTargetPort)(nil)).Elem()
}

func (i ApmServerSpecHttpServiceSpecPortsTargetPortArgs) ToApmServerSpecHttpServiceSpecPortsTargetPortOutput() ApmServerSpecHttpServiceSpecPortsTargetPortOutput {
	return i.ToApmServerSpecHttpServiceSpecPortsTargetPortOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecPortsTargetPortArgs) ToApmServerSpecHttpServiceSpecPortsTargetPortOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPortsTargetPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecPortsTargetPortOutput)
}

func (i ApmServerSpecHttpServiceSpecPortsTargetPortArgs) ToApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput() ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return i.ToApmServerSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecPortsTargetPortArgs) ToApmServerSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecPortsTargetPortOutput).ToApmServerSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(ctx)
}

// ApmServerSpecHttpServiceSpecPortsTargetPortPtrInput is an input type that accepts ApmServerSpecHttpServiceSpecPortsTargetPortArgs, ApmServerSpecHttpServiceSpecPortsTargetPortPtr and ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecPortsTargetPortPtrInput` via:
//
//          ApmServerSpecHttpServiceSpecPortsTargetPortArgs{...}
//
//  or:
//
//          nil
type ApmServerSpecHttpServiceSpecPortsTargetPortPtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput() ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput
	ToApmServerSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput
}

type apmServerSpecHttpServiceSpecPortsTargetPortPtrType ApmServerSpecHttpServiceSpecPortsTargetPortArgs

func ApmServerSpecHttpServiceSpecPortsTargetPortPtr(v *ApmServerSpecHttpServiceSpecPortsTargetPortArgs) ApmServerSpecHttpServiceSpecPortsTargetPortPtrInput {
	return (*apmServerSpecHttpServiceSpecPortsTargetPortPtrType)(v)
}

func (*apmServerSpecHttpServiceSpecPortsTargetPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpServiceSpecPortsTargetPort)(nil)).Elem()
}

func (i *apmServerSpecHttpServiceSpecPortsTargetPortPtrType) ToApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput() ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return i.ToApmServerSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpServiceSpecPortsTargetPortPtrType) ToApmServerSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput)
}

type ApmServerSpecHttpServiceSpecPortsTargetPortOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecPortsTargetPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpecPortsTargetPort)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecPortsTargetPortOutput) ToApmServerSpecHttpServiceSpecPortsTargetPortOutput() ApmServerSpecHttpServiceSpecPortsTargetPortOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecPortsTargetPortOutput) ToApmServerSpecHttpServiceSpecPortsTargetPortOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPortsTargetPortOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecPortsTargetPortOutput) ToApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput() ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return o.ToApmServerSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpServiceSpecPortsTargetPortOutput) ToApmServerSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecPortsTargetPort) *ApmServerSpecHttpServiceSpecPortsTargetPort {
		return &v
	}).(ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput)
}

type ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpServiceSpecPortsTargetPort)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput) ToApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput() ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput) ToApmServerSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput) Elem() ApmServerSpecHttpServiceSpecPortsTargetPortOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpecPortsTargetPort) ApmServerSpecHttpServiceSpecPortsTargetPort {
		return *v
	}).(ApmServerSpecHttpServiceSpecPortsTargetPortOutput)
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
type ApmServerSpecHttpServiceSpecSelector struct {
}

// ApmServerSpecHttpServiceSpecSelectorInput is an input type that accepts ApmServerSpecHttpServiceSpecSelectorArgs and ApmServerSpecHttpServiceSpecSelectorOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecSelectorInput` via:
//
//          ApmServerSpecHttpServiceSpecSelectorArgs{...}
type ApmServerSpecHttpServiceSpecSelectorInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecSelectorOutput() ApmServerSpecHttpServiceSpecSelectorOutput
	ToApmServerSpecHttpServiceSpecSelectorOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecSelectorOutput
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
type ApmServerSpecHttpServiceSpecSelectorArgs struct {
}

func (ApmServerSpecHttpServiceSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpecSelector)(nil)).Elem()
}

func (i ApmServerSpecHttpServiceSpecSelectorArgs) ToApmServerSpecHttpServiceSpecSelectorOutput() ApmServerSpecHttpServiceSpecSelectorOutput {
	return i.ToApmServerSpecHttpServiceSpecSelectorOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecSelectorArgs) ToApmServerSpecHttpServiceSpecSelectorOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecSelectorOutput)
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
type ApmServerSpecHttpServiceSpecSelectorOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpecSelector)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecSelectorOutput) ToApmServerSpecHttpServiceSpecSelectorOutput() ApmServerSpecHttpServiceSpecSelectorOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSelectorOutput) ToApmServerSpecHttpServiceSpecSelectorOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSelectorOutput {
	return o
}

// sessionAffinityConfig contains the configurations of session affinity.
type ApmServerSpecHttpServiceSpecSessionAffinityConfig struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP *ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP `pulumi:"clientIP"`
}

// ApmServerSpecHttpServiceSpecSessionAffinityConfigInput is an input type that accepts ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs and ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecSessionAffinityConfigInput` via:
//
//          ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs{...}
type ApmServerSpecHttpServiceSpecSessionAffinityConfigInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecSessionAffinityConfigOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput
	ToApmServerSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput
}

// sessionAffinityConfig contains the configurations of session affinity.
type ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput `pulumi:"clientIP"`
}

func (ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs) ToApmServerSpecHttpServiceSpecSessionAffinityConfigOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput {
	return i.ToApmServerSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs) ToApmServerSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput)
}

func (i ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs) ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs) ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput).ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx)
}

// ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrInput is an input type that accepts ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs, ApmServerSpecHttpServiceSpecSessionAffinityConfigPtr and ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrInput` via:
//
//          ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs{...}
//
//  or:
//
//          nil
type ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput
	ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput
}

type apmServerSpecHttpServiceSpecSessionAffinityConfigPtrType ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs

func ApmServerSpecHttpServiceSpecSessionAffinityConfigPtr(v *ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs) ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrInput {
	return (*apmServerSpecHttpServiceSpecSessionAffinityConfigPtrType)(v)
}

func (*apmServerSpecHttpServiceSpecSessionAffinityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i *apmServerSpecHttpServiceSpecSessionAffinityConfigPtrType) ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpServiceSpecSessionAffinityConfigPtrType) ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecSessionAffinityConfig) *ApmServerSpecHttpServiceSpecSessionAffinityConfig {
		return &v
	}).(ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput) ClientIP() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecSessionAffinityConfig) *ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP {
		return v.ClientIP
	}).(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

type ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput) Elem() ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpecSessionAffinityConfig) ApmServerSpecHttpServiceSpecSessionAffinityConfig {
		return *v
	}).(ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ClientIP() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpecSessionAffinityConfig) *ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPInput is an input type that accepts ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs and ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPInput` via:
//
//          ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs{...}
type ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput
	ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput
}

// clientIP contains the configurations of Client IP based session affinity.
type ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (i ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return i.ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput)
}

func (i ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return i.ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput).ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx)
}

// ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput is an input type that accepts ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs, ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtr and ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput` via:
//
//          ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs{...}
//
//  or:
//
//          nil
type ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput
	ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput
}

type apmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs

func ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtr(v *ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput {
	return (*apmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType)(v)
}

func (*apmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (i *apmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return i.ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP) *ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP {
		return &v
	}).(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) Elem() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP {
		return *v
	}).(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type ApmServerSpecHttpTls struct {
	// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
	//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
	Certificate *ApmServerSpecHttpTlsCertificate `pulumi:"certificate"`
	// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificate *ApmServerSpecHttpTlsSelfSignedCertificate `pulumi:"selfSignedCertificate"`
}

// ApmServerSpecHttpTlsInput is an input type that accepts ApmServerSpecHttpTlsArgs and ApmServerSpecHttpTlsOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpTlsInput` via:
//
//          ApmServerSpecHttpTlsArgs{...}
type ApmServerSpecHttpTlsInput interface {
	pulumi.Input

	ToApmServerSpecHttpTlsOutput() ApmServerSpecHttpTlsOutput
	ToApmServerSpecHttpTlsOutputWithContext(context.Context) ApmServerSpecHttpTlsOutput
}

// TLS defines options for configuring TLS for HTTP.
type ApmServerSpecHttpTlsArgs struct {
	// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
	//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
	Certificate ApmServerSpecHttpTlsCertificatePtrInput `pulumi:"certificate"`
	// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificate ApmServerSpecHttpTlsSelfSignedCertificatePtrInput `pulumi:"selfSignedCertificate"`
}

func (ApmServerSpecHttpTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpTls)(nil)).Elem()
}

func (i ApmServerSpecHttpTlsArgs) ToApmServerSpecHttpTlsOutput() ApmServerSpecHttpTlsOutput {
	return i.ToApmServerSpecHttpTlsOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpTlsArgs) ToApmServerSpecHttpTlsOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsOutput)
}

func (i ApmServerSpecHttpTlsArgs) ToApmServerSpecHttpTlsPtrOutput() ApmServerSpecHttpTlsPtrOutput {
	return i.ToApmServerSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpTlsArgs) ToApmServerSpecHttpTlsPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsOutput).ToApmServerSpecHttpTlsPtrOutputWithContext(ctx)
}

// ApmServerSpecHttpTlsPtrInput is an input type that accepts ApmServerSpecHttpTlsArgs, ApmServerSpecHttpTlsPtr and ApmServerSpecHttpTlsPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpTlsPtrInput` via:
//
//          ApmServerSpecHttpTlsArgs{...}
//
//  or:
//
//          nil
type ApmServerSpecHttpTlsPtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpTlsPtrOutput() ApmServerSpecHttpTlsPtrOutput
	ToApmServerSpecHttpTlsPtrOutputWithContext(context.Context) ApmServerSpecHttpTlsPtrOutput
}

type apmServerSpecHttpTlsPtrType ApmServerSpecHttpTlsArgs

func ApmServerSpecHttpTlsPtr(v *ApmServerSpecHttpTlsArgs) ApmServerSpecHttpTlsPtrInput {
	return (*apmServerSpecHttpTlsPtrType)(v)
}

func (*apmServerSpecHttpTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpTls)(nil)).Elem()
}

func (i *apmServerSpecHttpTlsPtrType) ToApmServerSpecHttpTlsPtrOutput() ApmServerSpecHttpTlsPtrOutput {
	return i.ToApmServerSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpTlsPtrType) ToApmServerSpecHttpTlsPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type ApmServerSpecHttpTlsOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpTls)(nil)).Elem()
}

func (o ApmServerSpecHttpTlsOutput) ToApmServerSpecHttpTlsOutput() ApmServerSpecHttpTlsOutput {
	return o
}

func (o ApmServerSpecHttpTlsOutput) ToApmServerSpecHttpTlsOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsOutput {
	return o
}

func (o ApmServerSpecHttpTlsOutput) ToApmServerSpecHttpTlsPtrOutput() ApmServerSpecHttpTlsPtrOutput {
	return o.ToApmServerSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpTlsOutput) ToApmServerSpecHttpTlsPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTls) *ApmServerSpecHttpTls {
		return &v
	}).(ApmServerSpecHttpTlsPtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
func (o ApmServerSpecHttpTlsOutput) Certificate() ApmServerSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTls) *ApmServerSpecHttpTlsCertificate { return v.Certificate }).(ApmServerSpecHttpTlsCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
func (o ApmServerSpecHttpTlsOutput) SelfSignedCertificate() ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTls) *ApmServerSpecHttpTlsSelfSignedCertificate {
		return v.SelfSignedCertificate
	}).(ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput)
}

type ApmServerSpecHttpTlsPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpTls)(nil)).Elem()
}

func (o ApmServerSpecHttpTlsPtrOutput) ToApmServerSpecHttpTlsPtrOutput() ApmServerSpecHttpTlsPtrOutput {
	return o
}

func (o ApmServerSpecHttpTlsPtrOutput) ToApmServerSpecHttpTlsPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsPtrOutput {
	return o
}

func (o ApmServerSpecHttpTlsPtrOutput) Elem() ApmServerSpecHttpTlsOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpTls) ApmServerSpecHttpTls { return *v }).(ApmServerSpecHttpTlsOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
func (o ApmServerSpecHttpTlsPtrOutput) Certificate() ApmServerSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpTls) *ApmServerSpecHttpTlsCertificate {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(ApmServerSpecHttpTlsCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
func (o ApmServerSpecHttpTlsPtrOutput) SelfSignedCertificate() ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpTls) *ApmServerSpecHttpTlsSelfSignedCertificate {
		if v == nil {
			return nil
		}
		return v.SelfSignedCertificate
	}).(ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
type ApmServerSpecHttpTlsCertificate struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ApmServerSpecHttpTlsCertificateInput is an input type that accepts ApmServerSpecHttpTlsCertificateArgs and ApmServerSpecHttpTlsCertificateOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpTlsCertificateInput` via:
//
//          ApmServerSpecHttpTlsCertificateArgs{...}
type ApmServerSpecHttpTlsCertificateInput interface {
	pulumi.Input

	ToApmServerSpecHttpTlsCertificateOutput() ApmServerSpecHttpTlsCertificateOutput
	ToApmServerSpecHttpTlsCertificateOutputWithContext(context.Context) ApmServerSpecHttpTlsCertificateOutput
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
type ApmServerSpecHttpTlsCertificateArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ApmServerSpecHttpTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpTlsCertificate)(nil)).Elem()
}

func (i ApmServerSpecHttpTlsCertificateArgs) ToApmServerSpecHttpTlsCertificateOutput() ApmServerSpecHttpTlsCertificateOutput {
	return i.ToApmServerSpecHttpTlsCertificateOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpTlsCertificateArgs) ToApmServerSpecHttpTlsCertificateOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsCertificateOutput)
}

func (i ApmServerSpecHttpTlsCertificateArgs) ToApmServerSpecHttpTlsCertificatePtrOutput() ApmServerSpecHttpTlsCertificatePtrOutput {
	return i.ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpTlsCertificateArgs) ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsCertificateOutput).ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(ctx)
}

// ApmServerSpecHttpTlsCertificatePtrInput is an input type that accepts ApmServerSpecHttpTlsCertificateArgs, ApmServerSpecHttpTlsCertificatePtr and ApmServerSpecHttpTlsCertificatePtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpTlsCertificatePtrInput` via:
//
//          ApmServerSpecHttpTlsCertificateArgs{...}
//
//  or:
//
//          nil
type ApmServerSpecHttpTlsCertificatePtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpTlsCertificatePtrOutput() ApmServerSpecHttpTlsCertificatePtrOutput
	ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(context.Context) ApmServerSpecHttpTlsCertificatePtrOutput
}

type apmServerSpecHttpTlsCertificatePtrType ApmServerSpecHttpTlsCertificateArgs

func ApmServerSpecHttpTlsCertificatePtr(v *ApmServerSpecHttpTlsCertificateArgs) ApmServerSpecHttpTlsCertificatePtrInput {
	return (*apmServerSpecHttpTlsCertificatePtrType)(v)
}

func (*apmServerSpecHttpTlsCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpTlsCertificate)(nil)).Elem()
}

func (i *apmServerSpecHttpTlsCertificatePtrType) ToApmServerSpecHttpTlsCertificatePtrOutput() ApmServerSpecHttpTlsCertificatePtrOutput {
	return i.ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpTlsCertificatePtrType) ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
type ApmServerSpecHttpTlsCertificateOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpTlsCertificate)(nil)).Elem()
}

func (o ApmServerSpecHttpTlsCertificateOutput) ToApmServerSpecHttpTlsCertificateOutput() ApmServerSpecHttpTlsCertificateOutput {
	return o
}

func (o ApmServerSpecHttpTlsCertificateOutput) ToApmServerSpecHttpTlsCertificateOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsCertificateOutput {
	return o
}

func (o ApmServerSpecHttpTlsCertificateOutput) ToApmServerSpecHttpTlsCertificatePtrOutput() ApmServerSpecHttpTlsCertificatePtrOutput {
	return o.ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpTlsCertificateOutput) ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTlsCertificate) *ApmServerSpecHttpTlsCertificate {
		return &v
	}).(ApmServerSpecHttpTlsCertificatePtrOutput)
}

// SecretName is the name of the secret.
func (o ApmServerSpecHttpTlsCertificateOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTlsCertificate) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ApmServerSpecHttpTlsCertificatePtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpTlsCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpTlsCertificate)(nil)).Elem()
}

func (o ApmServerSpecHttpTlsCertificatePtrOutput) ToApmServerSpecHttpTlsCertificatePtrOutput() ApmServerSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o ApmServerSpecHttpTlsCertificatePtrOutput) ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o ApmServerSpecHttpTlsCertificatePtrOutput) Elem() ApmServerSpecHttpTlsCertificateOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpTlsCertificate) ApmServerSpecHttpTlsCertificate { return *v }).(ApmServerSpecHttpTlsCertificateOutput)
}

// SecretName is the name of the secret.
func (o ApmServerSpecHttpTlsCertificatePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpTlsCertificate) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ApmServerSpecHttpTlsSelfSignedCertificate struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled *bool `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames []ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames `pulumi:"subjectAltNames"`
}

// ApmServerSpecHttpTlsSelfSignedCertificateInput is an input type that accepts ApmServerSpecHttpTlsSelfSignedCertificateArgs and ApmServerSpecHttpTlsSelfSignedCertificateOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpTlsSelfSignedCertificateInput` via:
//
//          ApmServerSpecHttpTlsSelfSignedCertificateArgs{...}
type ApmServerSpecHttpTlsSelfSignedCertificateInput interface {
	pulumi.Input

	ToApmServerSpecHttpTlsSelfSignedCertificateOutput() ApmServerSpecHttpTlsSelfSignedCertificateOutput
	ToApmServerSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Context) ApmServerSpecHttpTlsSelfSignedCertificateOutput
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ApmServerSpecHttpTlsSelfSignedCertificateArgs struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput `pulumi:"subjectAltNames"`
}

func (ApmServerSpecHttpTlsSelfSignedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i ApmServerSpecHttpTlsSelfSignedCertificateArgs) ToApmServerSpecHttpTlsSelfSignedCertificateOutput() ApmServerSpecHttpTlsSelfSignedCertificateOutput {
	return i.ToApmServerSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpTlsSelfSignedCertificateArgs) ToApmServerSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsSelfSignedCertificateOutput)
}

func (i ApmServerSpecHttpTlsSelfSignedCertificateArgs) ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutput() ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpTlsSelfSignedCertificateArgs) ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsSelfSignedCertificateOutput).ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx)
}

// ApmServerSpecHttpTlsSelfSignedCertificatePtrInput is an input type that accepts ApmServerSpecHttpTlsSelfSignedCertificateArgs, ApmServerSpecHttpTlsSelfSignedCertificatePtr and ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpTlsSelfSignedCertificatePtrInput` via:
//
//          ApmServerSpecHttpTlsSelfSignedCertificateArgs{...}
//
//  or:
//
//          nil
type ApmServerSpecHttpTlsSelfSignedCertificatePtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutput() ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput
	ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Context) ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput
}

type apmServerSpecHttpTlsSelfSignedCertificatePtrType ApmServerSpecHttpTlsSelfSignedCertificateArgs

func ApmServerSpecHttpTlsSelfSignedCertificatePtr(v *ApmServerSpecHttpTlsSelfSignedCertificateArgs) ApmServerSpecHttpTlsSelfSignedCertificatePtrInput {
	return (*apmServerSpecHttpTlsSelfSignedCertificatePtrType)(v)
}

func (*apmServerSpecHttpTlsSelfSignedCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i *apmServerSpecHttpTlsSelfSignedCertificatePtrType) ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutput() ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpTlsSelfSignedCertificatePtrType) ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ApmServerSpecHttpTlsSelfSignedCertificateOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpTlsSelfSignedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateOutput) ToApmServerSpecHttpTlsSelfSignedCertificateOutput() ApmServerSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateOutput) ToApmServerSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateOutput) ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutput() ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateOutput) ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTlsSelfSignedCertificate) *ApmServerSpecHttpTlsSelfSignedCertificate {
		return &v
	}).(ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o ApmServerSpecHttpTlsSelfSignedCertificateOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTlsSelfSignedCertificate) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o ApmServerSpecHttpTlsSelfSignedCertificateOutput) SubjectAltNames() ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTlsSelfSignedCertificate) []ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return v.SubjectAltNames
	}).(ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

type ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput) ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutput() ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput) ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput) Elem() ApmServerSpecHttpTlsSelfSignedCertificateOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpTlsSelfSignedCertificate) ApmServerSpecHttpTlsSelfSignedCertificate {
		return *v
	}).(ApmServerSpecHttpTlsSelfSignedCertificateOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpTlsSelfSignedCertificate) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput) SubjectAltNames() ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpTlsSelfSignedCertificate) []ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames struct {
	// DNS is the DNS name of the subject.
	Dns *string `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip *string `pulumi:"ip"`
}

// ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput is an input type that accepts ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs and ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput` via:
//
//          ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...}
type ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput interface {
	pulumi.Input

	ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
	ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Context) ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs struct {
	// DNS is the DNS name of the subject.
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return i.ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput is an input type that accepts ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray and ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput` via:
//
//          ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{ ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...} }
type ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput interface {
	pulumi.Input

	ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
	ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Context) ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
}

type ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray []ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput

func (ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return i.ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

// DNS is the DNS name of the subject.
func (o ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// IP is the IP address of the subject.
func (o ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) Index(i pulumi.IntInput) ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return vs[0].([]ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames)[vs[1].(int)]
	}).(ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
type ApmServerSpecKibanaRef struct {
	// Name of the Kubernetes object.
	Name string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
}

// ApmServerSpecKibanaRefInput is an input type that accepts ApmServerSpecKibanaRefArgs and ApmServerSpecKibanaRefOutput values.
// You can construct a concrete instance of `ApmServerSpecKibanaRefInput` via:
//
//          ApmServerSpecKibanaRefArgs{...}
type ApmServerSpecKibanaRefInput interface {
	pulumi.Input

	ToApmServerSpecKibanaRefOutput() ApmServerSpecKibanaRefOutput
	ToApmServerSpecKibanaRefOutputWithContext(context.Context) ApmServerSpecKibanaRefOutput
}

// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
type ApmServerSpecKibanaRefArgs struct {
	// Name of the Kubernetes object.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ApmServerSpecKibanaRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecKibanaRef)(nil)).Elem()
}

func (i ApmServerSpecKibanaRefArgs) ToApmServerSpecKibanaRefOutput() ApmServerSpecKibanaRefOutput {
	return i.ToApmServerSpecKibanaRefOutputWithContext(context.Background())
}

func (i ApmServerSpecKibanaRefArgs) ToApmServerSpecKibanaRefOutputWithContext(ctx context.Context) ApmServerSpecKibanaRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecKibanaRefOutput)
}

func (i ApmServerSpecKibanaRefArgs) ToApmServerSpecKibanaRefPtrOutput() ApmServerSpecKibanaRefPtrOutput {
	return i.ToApmServerSpecKibanaRefPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecKibanaRefArgs) ToApmServerSpecKibanaRefPtrOutputWithContext(ctx context.Context) ApmServerSpecKibanaRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecKibanaRefOutput).ToApmServerSpecKibanaRefPtrOutputWithContext(ctx)
}

// ApmServerSpecKibanaRefPtrInput is an input type that accepts ApmServerSpecKibanaRefArgs, ApmServerSpecKibanaRefPtr and ApmServerSpecKibanaRefPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecKibanaRefPtrInput` via:
//
//          ApmServerSpecKibanaRefArgs{...}
//
//  or:
//
//          nil
type ApmServerSpecKibanaRefPtrInput interface {
	pulumi.Input

	ToApmServerSpecKibanaRefPtrOutput() ApmServerSpecKibanaRefPtrOutput
	ToApmServerSpecKibanaRefPtrOutputWithContext(context.Context) ApmServerSpecKibanaRefPtrOutput
}

type apmServerSpecKibanaRefPtrType ApmServerSpecKibanaRefArgs

func ApmServerSpecKibanaRefPtr(v *ApmServerSpecKibanaRefArgs) ApmServerSpecKibanaRefPtrInput {
	return (*apmServerSpecKibanaRefPtrType)(v)
}

func (*apmServerSpecKibanaRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecKibanaRef)(nil)).Elem()
}

func (i *apmServerSpecKibanaRefPtrType) ToApmServerSpecKibanaRefPtrOutput() ApmServerSpecKibanaRefPtrOutput {
	return i.ToApmServerSpecKibanaRefPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecKibanaRefPtrType) ToApmServerSpecKibanaRefPtrOutputWithContext(ctx context.Context) ApmServerSpecKibanaRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecKibanaRefPtrOutput)
}

// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
type ApmServerSpecKibanaRefOutput struct{ *pulumi.OutputState }

func (ApmServerSpecKibanaRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecKibanaRef)(nil)).Elem()
}

func (o ApmServerSpecKibanaRefOutput) ToApmServerSpecKibanaRefOutput() ApmServerSpecKibanaRefOutput {
	return o
}

func (o ApmServerSpecKibanaRefOutput) ToApmServerSpecKibanaRefOutputWithContext(ctx context.Context) ApmServerSpecKibanaRefOutput {
	return o
}

func (o ApmServerSpecKibanaRefOutput) ToApmServerSpecKibanaRefPtrOutput() ApmServerSpecKibanaRefPtrOutput {
	return o.ToApmServerSpecKibanaRefPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecKibanaRefOutput) ToApmServerSpecKibanaRefPtrOutputWithContext(ctx context.Context) ApmServerSpecKibanaRefPtrOutput {
	return o.ApplyT(func(v ApmServerSpecKibanaRef) *ApmServerSpecKibanaRef {
		return &v
	}).(ApmServerSpecKibanaRefPtrOutput)
}

// Name of the Kubernetes object.
func (o ApmServerSpecKibanaRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApmServerSpecKibanaRef) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ApmServerSpecKibanaRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecKibanaRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ApmServerSpecKibanaRefPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecKibanaRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecKibanaRef)(nil)).Elem()
}

func (o ApmServerSpecKibanaRefPtrOutput) ToApmServerSpecKibanaRefPtrOutput() ApmServerSpecKibanaRefPtrOutput {
	return o
}

func (o ApmServerSpecKibanaRefPtrOutput) ToApmServerSpecKibanaRefPtrOutputWithContext(ctx context.Context) ApmServerSpecKibanaRefPtrOutput {
	return o
}

func (o ApmServerSpecKibanaRefPtrOutput) Elem() ApmServerSpecKibanaRefOutput {
	return o.ApplyT(func(v *ApmServerSpecKibanaRef) ApmServerSpecKibanaRef { return *v }).(ApmServerSpecKibanaRefOutput)
}

// Name of the Kubernetes object.
func (o ApmServerSpecKibanaRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecKibanaRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ApmServerSpecKibanaRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecKibanaRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
type ApmServerSpecPodTemplate struct {
}

// ApmServerSpecPodTemplateInput is an input type that accepts ApmServerSpecPodTemplateArgs and ApmServerSpecPodTemplateOutput values.
// You can construct a concrete instance of `ApmServerSpecPodTemplateInput` via:
//
//          ApmServerSpecPodTemplateArgs{...}
type ApmServerSpecPodTemplateInput interface {
	pulumi.Input

	ToApmServerSpecPodTemplateOutput() ApmServerSpecPodTemplateOutput
	ToApmServerSpecPodTemplateOutputWithContext(context.Context) ApmServerSpecPodTemplateOutput
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
type ApmServerSpecPodTemplateArgs struct {
}

func (ApmServerSpecPodTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecPodTemplate)(nil)).Elem()
}

func (i ApmServerSpecPodTemplateArgs) ToApmServerSpecPodTemplateOutput() ApmServerSpecPodTemplateOutput {
	return i.ToApmServerSpecPodTemplateOutputWithContext(context.Background())
}

func (i ApmServerSpecPodTemplateArgs) ToApmServerSpecPodTemplateOutputWithContext(ctx context.Context) ApmServerSpecPodTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecPodTemplateOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
type ApmServerSpecPodTemplateOutput struct{ *pulumi.OutputState }

func (ApmServerSpecPodTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecPodTemplate)(nil)).Elem()
}

func (o ApmServerSpecPodTemplateOutput) ToApmServerSpecPodTemplateOutput() ApmServerSpecPodTemplateOutput {
	return o
}

func (o ApmServerSpecPodTemplateOutput) ToApmServerSpecPodTemplateOutputWithContext(ctx context.Context) ApmServerSpecPodTemplateOutput {
	return o
}

// SecretSource defines a data source based on a Kubernetes Secret.
type ApmServerSpecSecureSettings struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
	Entries []ApmServerSpecSecureSettingsEntries `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName string `pulumi:"secretName"`
}

// ApmServerSpecSecureSettingsInput is an input type that accepts ApmServerSpecSecureSettingsArgs and ApmServerSpecSecureSettingsOutput values.
// You can construct a concrete instance of `ApmServerSpecSecureSettingsInput` via:
//
//          ApmServerSpecSecureSettingsArgs{...}
type ApmServerSpecSecureSettingsInput interface {
	pulumi.Input

	ToApmServerSpecSecureSettingsOutput() ApmServerSpecSecureSettingsOutput
	ToApmServerSpecSecureSettingsOutputWithContext(context.Context) ApmServerSpecSecureSettingsOutput
}

// SecretSource defines a data source based on a Kubernetes Secret.
type ApmServerSpecSecureSettingsArgs struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
	Entries ApmServerSpecSecureSettingsEntriesArrayInput `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName pulumi.StringInput `pulumi:"secretName"`
}

func (ApmServerSpecSecureSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecSecureSettings)(nil)).Elem()
}

func (i ApmServerSpecSecureSettingsArgs) ToApmServerSpecSecureSettingsOutput() ApmServerSpecSecureSettingsOutput {
	return i.ToApmServerSpecSecureSettingsOutputWithContext(context.Background())
}

func (i ApmServerSpecSecureSettingsArgs) ToApmServerSpecSecureSettingsOutputWithContext(ctx context.Context) ApmServerSpecSecureSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecSecureSettingsOutput)
}

// ApmServerSpecSecureSettingsArrayInput is an input type that accepts ApmServerSpecSecureSettingsArray and ApmServerSpecSecureSettingsArrayOutput values.
// You can construct a concrete instance of `ApmServerSpecSecureSettingsArrayInput` via:
//
//          ApmServerSpecSecureSettingsArray{ ApmServerSpecSecureSettingsArgs{...} }
type ApmServerSpecSecureSettingsArrayInput interface {
	pulumi.Input

	ToApmServerSpecSecureSettingsArrayOutput() ApmServerSpecSecureSettingsArrayOutput
	ToApmServerSpecSecureSettingsArrayOutputWithContext(context.Context) ApmServerSpecSecureSettingsArrayOutput
}

type ApmServerSpecSecureSettingsArray []ApmServerSpecSecureSettingsInput

func (ApmServerSpecSecureSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmServerSpecSecureSettings)(nil)).Elem()
}

func (i ApmServerSpecSecureSettingsArray) ToApmServerSpecSecureSettingsArrayOutput() ApmServerSpecSecureSettingsArrayOutput {
	return i.ToApmServerSpecSecureSettingsArrayOutputWithContext(context.Background())
}

func (i ApmServerSpecSecureSettingsArray) ToApmServerSpecSecureSettingsArrayOutputWithContext(ctx context.Context) ApmServerSpecSecureSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecSecureSettingsArrayOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type ApmServerSpecSecureSettingsOutput struct{ *pulumi.OutputState }

func (ApmServerSpecSecureSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecSecureSettings)(nil)).Elem()
}

func (o ApmServerSpecSecureSettingsOutput) ToApmServerSpecSecureSettingsOutput() ApmServerSpecSecureSettingsOutput {
	return o
}

func (o ApmServerSpecSecureSettingsOutput) ToApmServerSpecSecureSettingsOutputWithContext(ctx context.Context) ApmServerSpecSecureSettingsOutput {
	return o
}

// Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
func (o ApmServerSpecSecureSettingsOutput) Entries() ApmServerSpecSecureSettingsEntriesArrayOutput {
	return o.ApplyT(func(v ApmServerSpecSecureSettings) []ApmServerSpecSecureSettingsEntries { return v.Entries }).(ApmServerSpecSecureSettingsEntriesArrayOutput)
}

// SecretName is the name of the secret.
func (o ApmServerSpecSecureSettingsOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v ApmServerSpecSecureSettings) string { return v.SecretName }).(pulumi.StringOutput)
}

type ApmServerSpecSecureSettingsArrayOutput struct{ *pulumi.OutputState }

func (ApmServerSpecSecureSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmServerSpecSecureSettings)(nil)).Elem()
}

func (o ApmServerSpecSecureSettingsArrayOutput) ToApmServerSpecSecureSettingsArrayOutput() ApmServerSpecSecureSettingsArrayOutput {
	return o
}

func (o ApmServerSpecSecureSettingsArrayOutput) ToApmServerSpecSecureSettingsArrayOutputWithContext(ctx context.Context) ApmServerSpecSecureSettingsArrayOutput {
	return o
}

func (o ApmServerSpecSecureSettingsArrayOutput) Index(i pulumi.IntInput) ApmServerSpecSecureSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApmServerSpecSecureSettings {
		return vs[0].([]ApmServerSpecSecureSettings)[vs[1].(int)]
	}).(ApmServerSpecSecureSettingsOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type ApmServerSpecSecureSettingsEntries struct {
	// Key is the key contained in the secret.
	Key string `pulumi:"key"`
	// Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
	Path *string `pulumi:"path"`
}

// ApmServerSpecSecureSettingsEntriesInput is an input type that accepts ApmServerSpecSecureSettingsEntriesArgs and ApmServerSpecSecureSettingsEntriesOutput values.
// You can construct a concrete instance of `ApmServerSpecSecureSettingsEntriesInput` via:
//
//          ApmServerSpecSecureSettingsEntriesArgs{...}
type ApmServerSpecSecureSettingsEntriesInput interface {
	pulumi.Input

	ToApmServerSpecSecureSettingsEntriesOutput() ApmServerSpecSecureSettingsEntriesOutput
	ToApmServerSpecSecureSettingsEntriesOutputWithContext(context.Context) ApmServerSpecSecureSettingsEntriesOutput
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type ApmServerSpecSecureSettingsEntriesArgs struct {
	// Key is the key contained in the secret.
	Key pulumi.StringInput `pulumi:"key"`
	// Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ApmServerSpecSecureSettingsEntriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecSecureSettingsEntries)(nil)).Elem()
}

func (i ApmServerSpecSecureSettingsEntriesArgs) ToApmServerSpecSecureSettingsEntriesOutput() ApmServerSpecSecureSettingsEntriesOutput {
	return i.ToApmServerSpecSecureSettingsEntriesOutputWithContext(context.Background())
}

func (i ApmServerSpecSecureSettingsEntriesArgs) ToApmServerSpecSecureSettingsEntriesOutputWithContext(ctx context.Context) ApmServerSpecSecureSettingsEntriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecSecureSettingsEntriesOutput)
}

// ApmServerSpecSecureSettingsEntriesArrayInput is an input type that accepts ApmServerSpecSecureSettingsEntriesArray and ApmServerSpecSecureSettingsEntriesArrayOutput values.
// You can construct a concrete instance of `ApmServerSpecSecureSettingsEntriesArrayInput` via:
//
//          ApmServerSpecSecureSettingsEntriesArray{ ApmServerSpecSecureSettingsEntriesArgs{...} }
type ApmServerSpecSecureSettingsEntriesArrayInput interface {
	pulumi.Input

	ToApmServerSpecSecureSettingsEntriesArrayOutput() ApmServerSpecSecureSettingsEntriesArrayOutput
	ToApmServerSpecSecureSettingsEntriesArrayOutputWithContext(context.Context) ApmServerSpecSecureSettingsEntriesArrayOutput
}

type ApmServerSpecSecureSettingsEntriesArray []ApmServerSpecSecureSettingsEntriesInput

func (ApmServerSpecSecureSettingsEntriesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmServerSpecSecureSettingsEntries)(nil)).Elem()
}

func (i ApmServerSpecSecureSettingsEntriesArray) ToApmServerSpecSecureSettingsEntriesArrayOutput() ApmServerSpecSecureSettingsEntriesArrayOutput {
	return i.ToApmServerSpecSecureSettingsEntriesArrayOutputWithContext(context.Background())
}

func (i ApmServerSpecSecureSettingsEntriesArray) ToApmServerSpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) ApmServerSpecSecureSettingsEntriesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecSecureSettingsEntriesArrayOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type ApmServerSpecSecureSettingsEntriesOutput struct{ *pulumi.OutputState }

func (ApmServerSpecSecureSettingsEntriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecSecureSettingsEntries)(nil)).Elem()
}

func (o ApmServerSpecSecureSettingsEntriesOutput) ToApmServerSpecSecureSettingsEntriesOutput() ApmServerSpecSecureSettingsEntriesOutput {
	return o
}

func (o ApmServerSpecSecureSettingsEntriesOutput) ToApmServerSpecSecureSettingsEntriesOutputWithContext(ctx context.Context) ApmServerSpecSecureSettingsEntriesOutput {
	return o
}

// Key is the key contained in the secret.
func (o ApmServerSpecSecureSettingsEntriesOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ApmServerSpecSecureSettingsEntries) string { return v.Key }).(pulumi.StringOutput)
}

// Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
func (o ApmServerSpecSecureSettingsEntriesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecSecureSettingsEntries) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ApmServerSpecSecureSettingsEntriesArrayOutput struct{ *pulumi.OutputState }

func (ApmServerSpecSecureSettingsEntriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmServerSpecSecureSettingsEntries)(nil)).Elem()
}

func (o ApmServerSpecSecureSettingsEntriesArrayOutput) ToApmServerSpecSecureSettingsEntriesArrayOutput() ApmServerSpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o ApmServerSpecSecureSettingsEntriesArrayOutput) ToApmServerSpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) ApmServerSpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o ApmServerSpecSecureSettingsEntriesArrayOutput) Index(i pulumi.IntInput) ApmServerSpecSecureSettingsEntriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApmServerSpecSecureSettingsEntries {
		return vs[0].([]ApmServerSpecSecureSettingsEntries)[vs[1].(int)]
	}).(ApmServerSpecSecureSettingsEntriesOutput)
}

// ApmServerStatus defines the observed state of ApmServer
type ApmServerStatus struct {
	// AvailableNodes is the number of available replicas in the deployment.
	AvailableNodes *int `pulumi:"availableNodes"`
	// ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
	ElasticsearchAssociationStatus *string `pulumi:"elasticsearchAssociationStatus"`
	// Health of the deployment.
	Health *string `pulumi:"health"`
	// KibanaAssociationStatus is the status of any auto-linking to Kibana.
	KibanaAssociationStatus *string `pulumi:"kibanaAssociationStatus"`
	// SecretTokenSecretName is the name of the Secret that contains the secret token
	SecretTokenSecret *string `pulumi:"secretTokenSecret"`
	// ExternalService is the name of the service the agents should connect to.
	Service *string `pulumi:"service"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.
	Version *string `pulumi:"version"`
}

// ApmServerStatusInput is an input type that accepts ApmServerStatusArgs and ApmServerStatusOutput values.
// You can construct a concrete instance of `ApmServerStatusInput` via:
//
//          ApmServerStatusArgs{...}
type ApmServerStatusInput interface {
	pulumi.Input

	ToApmServerStatusOutput() ApmServerStatusOutput
	ToApmServerStatusOutputWithContext(context.Context) ApmServerStatusOutput
}

// ApmServerStatus defines the observed state of ApmServer
type ApmServerStatusArgs struct {
	// AvailableNodes is the number of available replicas in the deployment.
	AvailableNodes pulumi.IntPtrInput `pulumi:"availableNodes"`
	// ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
	ElasticsearchAssociationStatus pulumi.StringPtrInput `pulumi:"elasticsearchAssociationStatus"`
	// Health of the deployment.
	Health pulumi.StringPtrInput `pulumi:"health"`
	// KibanaAssociationStatus is the status of any auto-linking to Kibana.
	KibanaAssociationStatus pulumi.StringPtrInput `pulumi:"kibanaAssociationStatus"`
	// SecretTokenSecretName is the name of the Secret that contains the secret token
	SecretTokenSecret pulumi.StringPtrInput `pulumi:"secretTokenSecret"`
	// ExternalService is the name of the service the agents should connect to.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApmServerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerStatus)(nil)).Elem()
}

func (i ApmServerStatusArgs) ToApmServerStatusOutput() ApmServerStatusOutput {
	return i.ToApmServerStatusOutputWithContext(context.Background())
}

func (i ApmServerStatusArgs) ToApmServerStatusOutputWithContext(ctx context.Context) ApmServerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerStatusOutput)
}

func (i ApmServerStatusArgs) ToApmServerStatusPtrOutput() ApmServerStatusPtrOutput {
	return i.ToApmServerStatusPtrOutputWithContext(context.Background())
}

func (i ApmServerStatusArgs) ToApmServerStatusPtrOutputWithContext(ctx context.Context) ApmServerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerStatusOutput).ToApmServerStatusPtrOutputWithContext(ctx)
}

// ApmServerStatusPtrInput is an input type that accepts ApmServerStatusArgs, ApmServerStatusPtr and ApmServerStatusPtrOutput values.
// You can construct a concrete instance of `ApmServerStatusPtrInput` via:
//
//          ApmServerStatusArgs{...}
//
//  or:
//
//          nil
type ApmServerStatusPtrInput interface {
	pulumi.Input

	ToApmServerStatusPtrOutput() ApmServerStatusPtrOutput
	ToApmServerStatusPtrOutputWithContext(context.Context) ApmServerStatusPtrOutput
}

type apmServerStatusPtrType ApmServerStatusArgs

func ApmServerStatusPtr(v *ApmServerStatusArgs) ApmServerStatusPtrInput {
	return (*apmServerStatusPtrType)(v)
}

func (*apmServerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerStatus)(nil)).Elem()
}

func (i *apmServerStatusPtrType) ToApmServerStatusPtrOutput() ApmServerStatusPtrOutput {
	return i.ToApmServerStatusPtrOutputWithContext(context.Background())
}

func (i *apmServerStatusPtrType) ToApmServerStatusPtrOutputWithContext(ctx context.Context) ApmServerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerStatusPtrOutput)
}

// ApmServerStatus defines the observed state of ApmServer
type ApmServerStatusOutput struct{ *pulumi.OutputState }

func (ApmServerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerStatus)(nil)).Elem()
}

func (o ApmServerStatusOutput) ToApmServerStatusOutput() ApmServerStatusOutput {
	return o
}

func (o ApmServerStatusOutput) ToApmServerStatusOutputWithContext(ctx context.Context) ApmServerStatusOutput {
	return o
}

func (o ApmServerStatusOutput) ToApmServerStatusPtrOutput() ApmServerStatusPtrOutput {
	return o.ToApmServerStatusPtrOutputWithContext(context.Background())
}

func (o ApmServerStatusOutput) ToApmServerStatusPtrOutputWithContext(ctx context.Context) ApmServerStatusPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *ApmServerStatus {
		return &v
	}).(ApmServerStatusPtrOutput)
}

// AvailableNodes is the number of available replicas in the deployment.
func (o ApmServerStatusOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *int { return v.AvailableNodes }).(pulumi.IntPtrOutput)
}

// ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
func (o ApmServerStatusOutput) ElasticsearchAssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *string { return v.ElasticsearchAssociationStatus }).(pulumi.StringPtrOutput)
}

// Health of the deployment.
func (o ApmServerStatusOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *string { return v.Health }).(pulumi.StringPtrOutput)
}

// KibanaAssociationStatus is the status of any auto-linking to Kibana.
func (o ApmServerStatusOutput) KibanaAssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *string { return v.KibanaAssociationStatus }).(pulumi.StringPtrOutput)
}

// SecretTokenSecretName is the name of the Secret that contains the secret token
func (o ApmServerStatusOutput) SecretTokenSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *string { return v.SecretTokenSecret }).(pulumi.StringPtrOutput)
}

// ExternalService is the name of the service the agents should connect to.
func (o ApmServerStatusOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.
func (o ApmServerStatusOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApmServerStatusPtrOutput struct{ *pulumi.OutputState }

func (ApmServerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerStatus)(nil)).Elem()
}

func (o ApmServerStatusPtrOutput) ToApmServerStatusPtrOutput() ApmServerStatusPtrOutput {
	return o
}

func (o ApmServerStatusPtrOutput) ToApmServerStatusPtrOutputWithContext(ctx context.Context) ApmServerStatusPtrOutput {
	return o
}

func (o ApmServerStatusPtrOutput) Elem() ApmServerStatusOutput {
	return o.ApplyT(func(v *ApmServerStatus) ApmServerStatus { return *v }).(ApmServerStatusOutput)
}

// AvailableNodes is the number of available replicas in the deployment.
func (o ApmServerStatusPtrOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableNodes
	}).(pulumi.IntPtrOutput)
}

// ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
func (o ApmServerStatusPtrOutput) ElasticsearchAssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.ElasticsearchAssociationStatus
	}).(pulumi.StringPtrOutput)
}

// Health of the deployment.
func (o ApmServerStatusPtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.Health
	}).(pulumi.StringPtrOutput)
}

// KibanaAssociationStatus is the status of any auto-linking to Kibana.
func (o ApmServerStatusPtrOutput) KibanaAssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.KibanaAssociationStatus
	}).(pulumi.StringPtrOutput)
}

// SecretTokenSecretName is the name of the Secret that contains the secret token
func (o ApmServerStatusPtrOutput) SecretTokenSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.SecretTokenSecret
	}).(pulumi.StringPtrOutput)
}

// ExternalService is the name of the service the agents should connect to.
func (o ApmServerStatusPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.
func (o ApmServerStatusPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ApmServerTypeOutput{})
	pulumi.RegisterOutputType(ApmServerMetadataOutput{})
	pulumi.RegisterOutputType(ApmServerSpecOutput{})
	pulumi.RegisterOutputType(ApmServerSpecPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecConfigOutput{})
	pulumi.RegisterOutputType(ApmServerSpecElasticsearchRefOutput{})
	pulumi.RegisterOutputType(ApmServerSpecElasticsearchRefPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServicePtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceMetadataOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecPortsOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecPortsArrayOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecPortsTargetPortOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecPortsTargetPortPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecSelectorOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpTlsOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpTlsPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpTlsCertificateOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpTlsCertificatePtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpTlsSelfSignedCertificateOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput{})
	pulumi.RegisterOutputType(ApmServerSpecKibanaRefOutput{})
	pulumi.RegisterOutputType(ApmServerSpecKibanaRefPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecPodTemplateOutput{})
	pulumi.RegisterOutputType(ApmServerSpecSecureSettingsOutput{})
	pulumi.RegisterOutputType(ApmServerSpecSecureSettingsArrayOutput{})
	pulumi.RegisterOutputType(ApmServerSpecSecureSettingsEntriesOutput{})
	pulumi.RegisterOutputType(ApmServerSpecSecureSettingsEntriesArrayOutput{})
	pulumi.RegisterOutputType(ApmServerStatusOutput{})
	pulumi.RegisterOutputType(ApmServerStatusPtrOutput{})
}

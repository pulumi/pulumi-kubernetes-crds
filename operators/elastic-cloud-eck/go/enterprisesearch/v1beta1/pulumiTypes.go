// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// EnterpriseSearch is a Kubernetes CRD to represent Enterprise Search.
type EnterpriseSearchType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
	Spec *EnterpriseSearchSpec `pulumi:"spec"`
	// EnterpriseSearchStatus defines the observed state of EnterpriseSearch
	Status *EnterpriseSearchStatus `pulumi:"status"`
}

// EnterpriseSearchTypeInput is an input type that accepts EnterpriseSearchTypeArgs and EnterpriseSearchTypeOutput values.
// You can construct a concrete instance of `EnterpriseSearchTypeInput` via:
//
//          EnterpriseSearchTypeArgs{...}
type EnterpriseSearchTypeInput interface {
	pulumi.Input

	ToEnterpriseSearchTypeOutput() EnterpriseSearchTypeOutput
	ToEnterpriseSearchTypeOutputWithContext(context.Context) EnterpriseSearchTypeOutput
}

// EnterpriseSearch is a Kubernetes CRD to represent Enterprise Search.
type EnterpriseSearchTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
	Spec EnterpriseSearchSpecPtrInput `pulumi:"spec"`
	// EnterpriseSearchStatus defines the observed state of EnterpriseSearch
	Status EnterpriseSearchStatusPtrInput `pulumi:"status"`
}

func (EnterpriseSearchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchType)(nil)).Elem()
}

func (i EnterpriseSearchTypeArgs) ToEnterpriseSearchTypeOutput() EnterpriseSearchTypeOutput {
	return i.ToEnterpriseSearchTypeOutputWithContext(context.Background())
}

func (i EnterpriseSearchTypeArgs) ToEnterpriseSearchTypeOutputWithContext(ctx context.Context) EnterpriseSearchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchTypeOutput)
}

// EnterpriseSearch is a Kubernetes CRD to represent Enterprise Search.
type EnterpriseSearchTypeOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchType)(nil)).Elem()
}

func (o EnterpriseSearchTypeOutput) ToEnterpriseSearchTypeOutput() EnterpriseSearchTypeOutput {
	return o
}

func (o EnterpriseSearchTypeOutput) ToEnterpriseSearchTypeOutputWithContext(ctx context.Context) EnterpriseSearchTypeOutput {
	return o
}

func (o EnterpriseSearchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o EnterpriseSearchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o EnterpriseSearchTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
func (o EnterpriseSearchTypeOutput) Spec() EnterpriseSearchSpecPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchType) *EnterpriseSearchSpec { return v.Spec }).(EnterpriseSearchSpecPtrOutput)
}

// EnterpriseSearchStatus defines the observed state of EnterpriseSearch
func (o EnterpriseSearchTypeOutput) Status() EnterpriseSearchStatusPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchType) *EnterpriseSearchStatus { return v.Status }).(EnterpriseSearchStatusPtrOutput)
}

type EnterpriseSearchMetadata struct {
}

// EnterpriseSearchMetadataInput is an input type that accepts EnterpriseSearchMetadataArgs and EnterpriseSearchMetadataOutput values.
// You can construct a concrete instance of `EnterpriseSearchMetadataInput` via:
//
//          EnterpriseSearchMetadataArgs{...}
type EnterpriseSearchMetadataInput interface {
	pulumi.Input

	ToEnterpriseSearchMetadataOutput() EnterpriseSearchMetadataOutput
	ToEnterpriseSearchMetadataOutputWithContext(context.Context) EnterpriseSearchMetadataOutput
}

type EnterpriseSearchMetadataArgs struct {
}

func (EnterpriseSearchMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchMetadata)(nil)).Elem()
}

func (i EnterpriseSearchMetadataArgs) ToEnterpriseSearchMetadataOutput() EnterpriseSearchMetadataOutput {
	return i.ToEnterpriseSearchMetadataOutputWithContext(context.Background())
}

func (i EnterpriseSearchMetadataArgs) ToEnterpriseSearchMetadataOutputWithContext(ctx context.Context) EnterpriseSearchMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchMetadataOutput)
}

type EnterpriseSearchMetadataOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchMetadata)(nil)).Elem()
}

func (o EnterpriseSearchMetadataOutput) ToEnterpriseSearchMetadataOutput() EnterpriseSearchMetadataOutput {
	return o
}

func (o EnterpriseSearchMetadataOutput) ToEnterpriseSearchMetadataOutputWithContext(ctx context.Context) EnterpriseSearchMetadataOutput {
	return o
}

// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
type EnterpriseSearchSpec struct {
	// Config holds the Enterprise Search configuration.
	Config map[string]interface{} `pulumi:"config"`
	// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration. Configuration settings are merged and have precedence over settings specified in `config`.
	ConfigRef *EnterpriseSearchSpecConfigRef `pulumi:"configRef"`
	// Count of Enterprise Search instances to deploy.
	Count *int `pulumi:"count"`
	// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
	ElasticsearchRef *EnterpriseSearchSpecElasticsearchRef `pulumi:"elasticsearchRef"`
	// HTTP holds the HTTP layer configuration for Enterprise Search resource.
	Http *EnterpriseSearchSpecHttp `pulumi:"http"`
	// Image is the Enterprise Search Docker image to deploy.
	Image *string `pulumi:"image"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Enterprise Search pods.
	PodTemplate map[string]interface{} `pulumi:"podTemplate"`
	// ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// Version of Enterprise Search.
	Version *string `pulumi:"version"`
}

// EnterpriseSearchSpecInput is an input type that accepts EnterpriseSearchSpecArgs and EnterpriseSearchSpecOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecInput` via:
//
//          EnterpriseSearchSpecArgs{...}
type EnterpriseSearchSpecInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecOutput() EnterpriseSearchSpecOutput
	ToEnterpriseSearchSpecOutputWithContext(context.Context) EnterpriseSearchSpecOutput
}

// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
type EnterpriseSearchSpecArgs struct {
	// Config holds the Enterprise Search configuration.
	Config pulumi.MapInput `pulumi:"config"`
	// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration. Configuration settings are merged and have precedence over settings specified in `config`.
	ConfigRef EnterpriseSearchSpecConfigRefPtrInput `pulumi:"configRef"`
	// Count of Enterprise Search instances to deploy.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
	ElasticsearchRef EnterpriseSearchSpecElasticsearchRefPtrInput `pulumi:"elasticsearchRef"`
	// HTTP holds the HTTP layer configuration for Enterprise Search resource.
	Http EnterpriseSearchSpecHttpPtrInput `pulumi:"http"`
	// Image is the Enterprise Search Docker image to deploy.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Enterprise Search pods.
	PodTemplate pulumi.MapInput `pulumi:"podTemplate"`
	// ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// Version of Enterprise Search.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (EnterpriseSearchSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpec)(nil)).Elem()
}

func (i EnterpriseSearchSpecArgs) ToEnterpriseSearchSpecOutput() EnterpriseSearchSpecOutput {
	return i.ToEnterpriseSearchSpecOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecArgs) ToEnterpriseSearchSpecOutputWithContext(ctx context.Context) EnterpriseSearchSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecOutput)
}

func (i EnterpriseSearchSpecArgs) ToEnterpriseSearchSpecPtrOutput() EnterpriseSearchSpecPtrOutput {
	return i.ToEnterpriseSearchSpecPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecArgs) ToEnterpriseSearchSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecOutput).ToEnterpriseSearchSpecPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecPtrInput is an input type that accepts EnterpriseSearchSpecArgs, EnterpriseSearchSpecPtr and EnterpriseSearchSpecPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecPtrInput` via:
//
//          EnterpriseSearchSpecArgs{...}
//
//  or:
//
//          nil
type EnterpriseSearchSpecPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecPtrOutput() EnterpriseSearchSpecPtrOutput
	ToEnterpriseSearchSpecPtrOutputWithContext(context.Context) EnterpriseSearchSpecPtrOutput
}

type enterpriseSearchSpecPtrType EnterpriseSearchSpecArgs

func EnterpriseSearchSpecPtr(v *EnterpriseSearchSpecArgs) EnterpriseSearchSpecPtrInput {
	return (*enterpriseSearchSpecPtrType)(v)
}

func (*enterpriseSearchSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpec)(nil)).Elem()
}

func (i *enterpriseSearchSpecPtrType) ToEnterpriseSearchSpecPtrOutput() EnterpriseSearchSpecPtrOutput {
	return i.ToEnterpriseSearchSpecPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecPtrType) ToEnterpriseSearchSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecPtrOutput)
}

// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
type EnterpriseSearchSpecOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpec)(nil)).Elem()
}

func (o EnterpriseSearchSpecOutput) ToEnterpriseSearchSpecOutput() EnterpriseSearchSpecOutput {
	return o
}

func (o EnterpriseSearchSpecOutput) ToEnterpriseSearchSpecOutputWithContext(ctx context.Context) EnterpriseSearchSpecOutput {
	return o
}

func (o EnterpriseSearchSpecOutput) ToEnterpriseSearchSpecPtrOutput() EnterpriseSearchSpecPtrOutput {
	return o.ToEnterpriseSearchSpecPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecOutput) ToEnterpriseSearchSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *EnterpriseSearchSpec {
		return &v
	}).(EnterpriseSearchSpecPtrOutput)
}

// Config holds the Enterprise Search configuration.
func (o EnterpriseSearchSpecOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration. Configuration settings are merged and have precedence over settings specified in `config`.
func (o EnterpriseSearchSpecOutput) ConfigRef() EnterpriseSearchSpecConfigRefPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *EnterpriseSearchSpecConfigRef { return v.ConfigRef }).(EnterpriseSearchSpecConfigRefPtrOutput)
}

// Count of Enterprise Search instances to deploy.
func (o EnterpriseSearchSpecOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
func (o EnterpriseSearchSpecOutput) ElasticsearchRef() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *EnterpriseSearchSpecElasticsearchRef { return v.ElasticsearchRef }).(EnterpriseSearchSpecElasticsearchRefPtrOutput)
}

// HTTP holds the HTTP layer configuration for Enterprise Search resource.
func (o EnterpriseSearchSpecOutput) Http() EnterpriseSearchSpecHttpPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *EnterpriseSearchSpecHttp { return v.Http }).(EnterpriseSearchSpecHttpPtrOutput)
}

// Image is the Enterprise Search Docker image to deploy.
func (o EnterpriseSearchSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Enterprise Search pods.
func (o EnterpriseSearchSpecOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) map[string]interface{} { return v.PodTemplate }).(pulumi.MapOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
func (o EnterpriseSearchSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// Version of Enterprise Search.
func (o EnterpriseSearchSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpec)(nil)).Elem()
}

func (o EnterpriseSearchSpecPtrOutput) ToEnterpriseSearchSpecPtrOutput() EnterpriseSearchSpecPtrOutput {
	return o
}

func (o EnterpriseSearchSpecPtrOutput) ToEnterpriseSearchSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecPtrOutput {
	return o
}

func (o EnterpriseSearchSpecPtrOutput) Elem() EnterpriseSearchSpecOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) EnterpriseSearchSpec { return *v }).(EnterpriseSearchSpecOutput)
}

// Config holds the Enterprise Search configuration.
func (o EnterpriseSearchSpecPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration. Configuration settings are merged and have precedence over settings specified in `config`.
func (o EnterpriseSearchSpecPtrOutput) ConfigRef() EnterpriseSearchSpecConfigRefPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *EnterpriseSearchSpecConfigRef {
		if v == nil {
			return nil
		}
		return v.ConfigRef
	}).(EnterpriseSearchSpecConfigRefPtrOutput)
}

// Count of Enterprise Search instances to deploy.
func (o EnterpriseSearchSpecPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
func (o EnterpriseSearchSpecPtrOutput) ElasticsearchRef() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *EnterpriseSearchSpecElasticsearchRef {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRef
	}).(EnterpriseSearchSpecElasticsearchRefPtrOutput)
}

// HTTP holds the HTTP layer configuration for Enterprise Search resource.
func (o EnterpriseSearchSpecPtrOutput) Http() EnterpriseSearchSpecHttpPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *EnterpriseSearchSpecHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(EnterpriseSearchSpecHttpPtrOutput)
}

// Image is the Enterprise Search Docker image to deploy.
func (o EnterpriseSearchSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Enterprise Search pods.
func (o EnterpriseSearchSpecPtrOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.MapOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
func (o EnterpriseSearchSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// Version of Enterprise Search.
func (o EnterpriseSearchSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Config holds the Enterprise Search configuration.
type EnterpriseSearchSpecConfig struct {
}

// EnterpriseSearchSpecConfigInput is an input type that accepts EnterpriseSearchSpecConfigArgs and EnterpriseSearchSpecConfigOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecConfigInput` via:
//
//          EnterpriseSearchSpecConfigArgs{...}
type EnterpriseSearchSpecConfigInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecConfigOutput() EnterpriseSearchSpecConfigOutput
	ToEnterpriseSearchSpecConfigOutputWithContext(context.Context) EnterpriseSearchSpecConfigOutput
}

// Config holds the Enterprise Search configuration.
type EnterpriseSearchSpecConfigArgs struct {
}

func (EnterpriseSearchSpecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecConfig)(nil)).Elem()
}

func (i EnterpriseSearchSpecConfigArgs) ToEnterpriseSearchSpecConfigOutput() EnterpriseSearchSpecConfigOutput {
	return i.ToEnterpriseSearchSpecConfigOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecConfigArgs) ToEnterpriseSearchSpecConfigOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecConfigOutput)
}

// Config holds the Enterprise Search configuration.
type EnterpriseSearchSpecConfigOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecConfig)(nil)).Elem()
}

func (o EnterpriseSearchSpecConfigOutput) ToEnterpriseSearchSpecConfigOutput() EnterpriseSearchSpecConfigOutput {
	return o
}

func (o EnterpriseSearchSpecConfigOutput) ToEnterpriseSearchSpecConfigOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigOutput {
	return o
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration. Configuration settings are merged and have precedence over settings specified in `config`.
type EnterpriseSearchSpecConfigRef struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// EnterpriseSearchSpecConfigRefInput is an input type that accepts EnterpriseSearchSpecConfigRefArgs and EnterpriseSearchSpecConfigRefOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecConfigRefInput` via:
//
//          EnterpriseSearchSpecConfigRefArgs{...}
type EnterpriseSearchSpecConfigRefInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecConfigRefOutput() EnterpriseSearchSpecConfigRefOutput
	ToEnterpriseSearchSpecConfigRefOutputWithContext(context.Context) EnterpriseSearchSpecConfigRefOutput
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration. Configuration settings are merged and have precedence over settings specified in `config`.
type EnterpriseSearchSpecConfigRefArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (EnterpriseSearchSpecConfigRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecConfigRef)(nil)).Elem()
}

func (i EnterpriseSearchSpecConfigRefArgs) ToEnterpriseSearchSpecConfigRefOutput() EnterpriseSearchSpecConfigRefOutput {
	return i.ToEnterpriseSearchSpecConfigRefOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecConfigRefArgs) ToEnterpriseSearchSpecConfigRefOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecConfigRefOutput)
}

func (i EnterpriseSearchSpecConfigRefArgs) ToEnterpriseSearchSpecConfigRefPtrOutput() EnterpriseSearchSpecConfigRefPtrOutput {
	return i.ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecConfigRefArgs) ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecConfigRefOutput).ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecConfigRefPtrInput is an input type that accepts EnterpriseSearchSpecConfigRefArgs, EnterpriseSearchSpecConfigRefPtr and EnterpriseSearchSpecConfigRefPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecConfigRefPtrInput` via:
//
//          EnterpriseSearchSpecConfigRefArgs{...}
//
//  or:
//
//          nil
type EnterpriseSearchSpecConfigRefPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecConfigRefPtrOutput() EnterpriseSearchSpecConfigRefPtrOutput
	ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(context.Context) EnterpriseSearchSpecConfigRefPtrOutput
}

type enterpriseSearchSpecConfigRefPtrType EnterpriseSearchSpecConfigRefArgs

func EnterpriseSearchSpecConfigRefPtr(v *EnterpriseSearchSpecConfigRefArgs) EnterpriseSearchSpecConfigRefPtrInput {
	return (*enterpriseSearchSpecConfigRefPtrType)(v)
}

func (*enterpriseSearchSpecConfigRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecConfigRef)(nil)).Elem()
}

func (i *enterpriseSearchSpecConfigRefPtrType) ToEnterpriseSearchSpecConfigRefPtrOutput() EnterpriseSearchSpecConfigRefPtrOutput {
	return i.ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecConfigRefPtrType) ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecConfigRefPtrOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration. Configuration settings are merged and have precedence over settings specified in `config`.
type EnterpriseSearchSpecConfigRefOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecConfigRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecConfigRef)(nil)).Elem()
}

func (o EnterpriseSearchSpecConfigRefOutput) ToEnterpriseSearchSpecConfigRefOutput() EnterpriseSearchSpecConfigRefOutput {
	return o
}

func (o EnterpriseSearchSpecConfigRefOutput) ToEnterpriseSearchSpecConfigRefOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefOutput {
	return o
}

func (o EnterpriseSearchSpecConfigRefOutput) ToEnterpriseSearchSpecConfigRefPtrOutput() EnterpriseSearchSpecConfigRefPtrOutput {
	return o.ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecConfigRefOutput) ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecConfigRef) *EnterpriseSearchSpecConfigRef {
		return &v
	}).(EnterpriseSearchSpecConfigRefPtrOutput)
}

// SecretName is the name of the secret.
func (o EnterpriseSearchSpecConfigRefOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecConfigRef) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecConfigRefPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecConfigRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecConfigRef)(nil)).Elem()
}

func (o EnterpriseSearchSpecConfigRefPtrOutput) ToEnterpriseSearchSpecConfigRefPtrOutput() EnterpriseSearchSpecConfigRefPtrOutput {
	return o
}

func (o EnterpriseSearchSpecConfigRefPtrOutput) ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPtrOutput {
	return o
}

func (o EnterpriseSearchSpecConfigRefPtrOutput) Elem() EnterpriseSearchSpecConfigRefOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecConfigRef) EnterpriseSearchSpecConfigRef { return *v }).(EnterpriseSearchSpecConfigRefOutput)
}

// SecretName is the name of the secret.
func (o EnterpriseSearchSpecConfigRefPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
type EnterpriseSearchSpecElasticsearchRef struct {
	// Name of the Kubernetes object.
	Name string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
}

// EnterpriseSearchSpecElasticsearchRefInput is an input type that accepts EnterpriseSearchSpecElasticsearchRefArgs and EnterpriseSearchSpecElasticsearchRefOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecElasticsearchRefInput` via:
//
//          EnterpriseSearchSpecElasticsearchRefArgs{...}
type EnterpriseSearchSpecElasticsearchRefInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecElasticsearchRefOutput() EnterpriseSearchSpecElasticsearchRefOutput
	ToEnterpriseSearchSpecElasticsearchRefOutputWithContext(context.Context) EnterpriseSearchSpecElasticsearchRefOutput
}

// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
type EnterpriseSearchSpecElasticsearchRefArgs struct {
	// Name of the Kubernetes object.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (EnterpriseSearchSpecElasticsearchRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecElasticsearchRef)(nil)).Elem()
}

func (i EnterpriseSearchSpecElasticsearchRefArgs) ToEnterpriseSearchSpecElasticsearchRefOutput() EnterpriseSearchSpecElasticsearchRefOutput {
	return i.ToEnterpriseSearchSpecElasticsearchRefOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecElasticsearchRefArgs) ToEnterpriseSearchSpecElasticsearchRefOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecElasticsearchRefOutput)
}

func (i EnterpriseSearchSpecElasticsearchRefArgs) ToEnterpriseSearchSpecElasticsearchRefPtrOutput() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return i.ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecElasticsearchRefArgs) ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecElasticsearchRefOutput).ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecElasticsearchRefPtrInput is an input type that accepts EnterpriseSearchSpecElasticsearchRefArgs, EnterpriseSearchSpecElasticsearchRefPtr and EnterpriseSearchSpecElasticsearchRefPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecElasticsearchRefPtrInput` via:
//
//          EnterpriseSearchSpecElasticsearchRefArgs{...}
//
//  or:
//
//          nil
type EnterpriseSearchSpecElasticsearchRefPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecElasticsearchRefPtrOutput() EnterpriseSearchSpecElasticsearchRefPtrOutput
	ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(context.Context) EnterpriseSearchSpecElasticsearchRefPtrOutput
}

type enterpriseSearchSpecElasticsearchRefPtrType EnterpriseSearchSpecElasticsearchRefArgs

func EnterpriseSearchSpecElasticsearchRefPtr(v *EnterpriseSearchSpecElasticsearchRefArgs) EnterpriseSearchSpecElasticsearchRefPtrInput {
	return (*enterpriseSearchSpecElasticsearchRefPtrType)(v)
}

func (*enterpriseSearchSpecElasticsearchRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecElasticsearchRef)(nil)).Elem()
}

func (i *enterpriseSearchSpecElasticsearchRefPtrType) ToEnterpriseSearchSpecElasticsearchRefPtrOutput() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return i.ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecElasticsearchRefPtrType) ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecElasticsearchRefPtrOutput)
}

// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
type EnterpriseSearchSpecElasticsearchRefOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecElasticsearchRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecElasticsearchRef)(nil)).Elem()
}

func (o EnterpriseSearchSpecElasticsearchRefOutput) ToEnterpriseSearchSpecElasticsearchRefOutput() EnterpriseSearchSpecElasticsearchRefOutput {
	return o
}

func (o EnterpriseSearchSpecElasticsearchRefOutput) ToEnterpriseSearchSpecElasticsearchRefOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefOutput {
	return o
}

func (o EnterpriseSearchSpecElasticsearchRefOutput) ToEnterpriseSearchSpecElasticsearchRefPtrOutput() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o.ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecElasticsearchRefOutput) ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecElasticsearchRef) *EnterpriseSearchSpecElasticsearchRef {
		return &v
	}).(EnterpriseSearchSpecElasticsearchRefPtrOutput)
}

// Name of the Kubernetes object.
func (o EnterpriseSearchSpecElasticsearchRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecElasticsearchRef) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o EnterpriseSearchSpecElasticsearchRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecElasticsearchRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecElasticsearchRefPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecElasticsearchRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecElasticsearchRef)(nil)).Elem()
}

func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) ToEnterpriseSearchSpecElasticsearchRefPtrOutput() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o
}

func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o
}

func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) Elem() EnterpriseSearchSpecElasticsearchRefOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRef) EnterpriseSearchSpecElasticsearchRef { return *v }).(EnterpriseSearchSpecElasticsearchRefOutput)
}

// Name of the Kubernetes object.
func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// HTTP holds the HTTP layer configuration for Enterprise Search resource.
type EnterpriseSearchSpecHttp struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service *EnterpriseSearchSpecHttpService `pulumi:"service"`
	// TLS defines options for configuring TLS for HTTP.
	Tls *EnterpriseSearchSpecHttpTls `pulumi:"tls"`
}

// EnterpriseSearchSpecHttpInput is an input type that accepts EnterpriseSearchSpecHttpArgs and EnterpriseSearchSpecHttpOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpInput` via:
//
//          EnterpriseSearchSpecHttpArgs{...}
type EnterpriseSearchSpecHttpInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpOutput() EnterpriseSearchSpecHttpOutput
	ToEnterpriseSearchSpecHttpOutputWithContext(context.Context) EnterpriseSearchSpecHttpOutput
}

// HTTP holds the HTTP layer configuration for Enterprise Search resource.
type EnterpriseSearchSpecHttpArgs struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service EnterpriseSearchSpecHttpServicePtrInput `pulumi:"service"`
	// TLS defines options for configuring TLS for HTTP.
	Tls EnterpriseSearchSpecHttpTlsPtrInput `pulumi:"tls"`
}

func (EnterpriseSearchSpecHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttp)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpArgs) ToEnterpriseSearchSpecHttpOutput() EnterpriseSearchSpecHttpOutput {
	return i.ToEnterpriseSearchSpecHttpOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpArgs) ToEnterpriseSearchSpecHttpOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpOutput)
}

func (i EnterpriseSearchSpecHttpArgs) ToEnterpriseSearchSpecHttpPtrOutput() EnterpriseSearchSpecHttpPtrOutput {
	return i.ToEnterpriseSearchSpecHttpPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpArgs) ToEnterpriseSearchSpecHttpPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpOutput).ToEnterpriseSearchSpecHttpPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpPtrInput is an input type that accepts EnterpriseSearchSpecHttpArgs, EnterpriseSearchSpecHttpPtr and EnterpriseSearchSpecHttpPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpPtrInput` via:
//
//          EnterpriseSearchSpecHttpArgs{...}
//
//  or:
//
//          nil
type EnterpriseSearchSpecHttpPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpPtrOutput() EnterpriseSearchSpecHttpPtrOutput
	ToEnterpriseSearchSpecHttpPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpPtrOutput
}

type enterpriseSearchSpecHttpPtrType EnterpriseSearchSpecHttpArgs

func EnterpriseSearchSpecHttpPtr(v *EnterpriseSearchSpecHttpArgs) EnterpriseSearchSpecHttpPtrInput {
	return (*enterpriseSearchSpecHttpPtrType)(v)
}

func (*enterpriseSearchSpecHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttp)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpPtrType) ToEnterpriseSearchSpecHttpPtrOutput() EnterpriseSearchSpecHttpPtrOutput {
	return i.ToEnterpriseSearchSpecHttpPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpPtrType) ToEnterpriseSearchSpecHttpPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpPtrOutput)
}

// HTTP holds the HTTP layer configuration for Enterprise Search resource.
type EnterpriseSearchSpecHttpOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttp)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpOutput) ToEnterpriseSearchSpecHttpOutput() EnterpriseSearchSpecHttpOutput {
	return o
}

func (o EnterpriseSearchSpecHttpOutput) ToEnterpriseSearchSpecHttpOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpOutput {
	return o
}

func (o EnterpriseSearchSpecHttpOutput) ToEnterpriseSearchSpecHttpPtrOutput() EnterpriseSearchSpecHttpPtrOutput {
	return o.ToEnterpriseSearchSpecHttpPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpOutput) ToEnterpriseSearchSpecHttpPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttp) *EnterpriseSearchSpecHttp {
		return &v
	}).(EnterpriseSearchSpecHttpPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o EnterpriseSearchSpecHttpOutput) Service() EnterpriseSearchSpecHttpServicePtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttp) *EnterpriseSearchSpecHttpService { return v.Service }).(EnterpriseSearchSpecHttpServicePtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
func (o EnterpriseSearchSpecHttpOutput) Tls() EnterpriseSearchSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttp) *EnterpriseSearchSpecHttpTls { return v.Tls }).(EnterpriseSearchSpecHttpTlsPtrOutput)
}

type EnterpriseSearchSpecHttpPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttp)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpPtrOutput) ToEnterpriseSearchSpecHttpPtrOutput() EnterpriseSearchSpecHttpPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpPtrOutput) ToEnterpriseSearchSpecHttpPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpPtrOutput) Elem() EnterpriseSearchSpecHttpOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttp) EnterpriseSearchSpecHttp { return *v }).(EnterpriseSearchSpecHttpOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o EnterpriseSearchSpecHttpPtrOutput) Service() EnterpriseSearchSpecHttpServicePtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttp) *EnterpriseSearchSpecHttpService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(EnterpriseSearchSpecHttpServicePtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
func (o EnterpriseSearchSpecHttpPtrOutput) Tls() EnterpriseSearchSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttp) *EnterpriseSearchSpecHttpTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(EnterpriseSearchSpecHttpTlsPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type EnterpriseSearchSpecHttpService struct {
	// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec *EnterpriseSearchSpecHttpServiceSpec `pulumi:"spec"`
}

// EnterpriseSearchSpecHttpServiceInput is an input type that accepts EnterpriseSearchSpecHttpServiceArgs and EnterpriseSearchSpecHttpServiceOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceInput` via:
//
//          EnterpriseSearchSpecHttpServiceArgs{...}
type EnterpriseSearchSpecHttpServiceInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceOutput() EnterpriseSearchSpecHttpServiceOutput
	ToEnterpriseSearchSpecHttpServiceOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceOutput
}

// Service defines the template for the associated Kubernetes Service object.
type EnterpriseSearchSpecHttpServiceArgs struct {
	// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec EnterpriseSearchSpecHttpServiceSpecPtrInput `pulumi:"spec"`
}

func (EnterpriseSearchSpecHttpServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpService)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceArgs) ToEnterpriseSearchSpecHttpServiceOutput() EnterpriseSearchSpecHttpServiceOutput {
	return i.ToEnterpriseSearchSpecHttpServiceOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceArgs) ToEnterpriseSearchSpecHttpServiceOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceOutput)
}

func (i EnterpriseSearchSpecHttpServiceArgs) ToEnterpriseSearchSpecHttpServicePtrOutput() EnterpriseSearchSpecHttpServicePtrOutput {
	return i.ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceArgs) ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceOutput).ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServicePtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceArgs, EnterpriseSearchSpecHttpServicePtr and EnterpriseSearchSpecHttpServicePtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServicePtrInput` via:
//
//          EnterpriseSearchSpecHttpServiceArgs{...}
//
//  or:
//
//          nil
type EnterpriseSearchSpecHttpServicePtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServicePtrOutput() EnterpriseSearchSpecHttpServicePtrOutput
	ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServicePtrOutput
}

type enterpriseSearchSpecHttpServicePtrType EnterpriseSearchSpecHttpServiceArgs

func EnterpriseSearchSpecHttpServicePtr(v *EnterpriseSearchSpecHttpServiceArgs) EnterpriseSearchSpecHttpServicePtrInput {
	return (*enterpriseSearchSpecHttpServicePtrType)(v)
}

func (*enterpriseSearchSpecHttpServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpService)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServicePtrType) ToEnterpriseSearchSpecHttpServicePtrOutput() EnterpriseSearchSpecHttpServicePtrOutput {
	return i.ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServicePtrType) ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServicePtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type EnterpriseSearchSpecHttpServiceOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpService)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceOutput) ToEnterpriseSearchSpecHttpServiceOutput() EnterpriseSearchSpecHttpServiceOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceOutput) ToEnterpriseSearchSpecHttpServiceOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceOutput) ToEnterpriseSearchSpecHttpServicePtrOutput() EnterpriseSearchSpecHttpServicePtrOutput {
	return o.ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceOutput) ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpService) *EnterpriseSearchSpecHttpService {
		return &v
	}).(EnterpriseSearchSpecHttpServicePtrOutput)
}

// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
func (o EnterpriseSearchSpecHttpServiceOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpService) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// Spec is the specification of the service.
func (o EnterpriseSearchSpecHttpServiceOutput) Spec() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpService) *EnterpriseSearchSpecHttpServiceSpec { return v.Spec }).(EnterpriseSearchSpecHttpServiceSpecPtrOutput)
}

type EnterpriseSearchSpecHttpServicePtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpService)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServicePtrOutput) ToEnterpriseSearchSpecHttpServicePtrOutput() EnterpriseSearchSpecHttpServicePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServicePtrOutput) ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServicePtrOutput) Elem() EnterpriseSearchSpecHttpServiceOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpService) EnterpriseSearchSpecHttpService { return *v }).(EnterpriseSearchSpecHttpServiceOutput)
}

// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
func (o EnterpriseSearchSpecHttpServicePtrOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpService) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.MapOutput)
}

// Spec is the specification of the service.
func (o EnterpriseSearchSpecHttpServicePtrOutput) Spec() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpService) *EnterpriseSearchSpecHttpServiceSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(EnterpriseSearchSpecHttpServiceSpecPtrOutput)
}

// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
type EnterpriseSearchSpecHttpServiceMetadata struct {
}

// EnterpriseSearchSpecHttpServiceMetadataInput is an input type that accepts EnterpriseSearchSpecHttpServiceMetadataArgs and EnterpriseSearchSpecHttpServiceMetadataOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceMetadataInput` via:
//
//          EnterpriseSearchSpecHttpServiceMetadataArgs{...}
type EnterpriseSearchSpecHttpServiceMetadataInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceMetadataOutput() EnterpriseSearchSpecHttpServiceMetadataOutput
	ToEnterpriseSearchSpecHttpServiceMetadataOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceMetadataOutput
}

// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
type EnterpriseSearchSpecHttpServiceMetadataArgs struct {
}

func (EnterpriseSearchSpecHttpServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceMetadataArgs) ToEnterpriseSearchSpecHttpServiceMetadataOutput() EnterpriseSearchSpecHttpServiceMetadataOutput {
	return i.ToEnterpriseSearchSpecHttpServiceMetadataOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceMetadataArgs) ToEnterpriseSearchSpecHttpServiceMetadataOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceMetadataOutput)
}

// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
type EnterpriseSearchSpecHttpServiceMetadataOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) ToEnterpriseSearchSpecHttpServiceMetadataOutput() EnterpriseSearchSpecHttpServiceMetadataOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) ToEnterpriseSearchSpecHttpServiceMetadataOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataOutput {
	return o
}

// Spec is the specification of the service.
type EnterpriseSearchSpecHttpServiceSpec struct {
	// clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
	IpFamily *string `pulumi:"ipFamily"`
	// Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []EnterpriseSearchSpecHttpServiceSpecPorts `pulumi:"ports"`
	// publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig `pulumi:"sessionAffinityConfig"`
	// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
	TopologyKeys []string `pulumi:"topologyKeys"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// EnterpriseSearchSpecHttpServiceSpecInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecArgs and EnterpriseSearchSpecHttpServiceSpecOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecInput` via:
//
//          EnterpriseSearchSpecHttpServiceSpecArgs{...}
type EnterpriseSearchSpecHttpServiceSpecInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecOutput() EnterpriseSearchSpecHttpServiceSpecOutput
	ToEnterpriseSearchSpecHttpServiceSpecOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecOutput
}

// Spec is the specification of the service.
type EnterpriseSearchSpecHttpServiceSpecArgs struct {
	// clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
	IpFamily pulumi.StringPtrInput `pulumi:"ipFamily"`
	// Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports EnterpriseSearchSpecHttpServiceSpecPortsArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity pulumi.StringPtrInput `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput `pulumi:"sessionAffinityConfig"`
	// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
	TopologyKeys pulumi.StringArrayInput `pulumi:"topologyKeys"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EnterpriseSearchSpecHttpServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpec)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecArgs) ToEnterpriseSearchSpecHttpServiceSpecOutput() EnterpriseSearchSpecHttpServiceSpecOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecArgs) ToEnterpriseSearchSpecHttpServiceSpecOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecOutput)
}

func (i EnterpriseSearchSpecHttpServiceSpecArgs) ToEnterpriseSearchSpecHttpServiceSpecPtrOutput() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecArgs) ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecOutput).ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServiceSpecPtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecArgs, EnterpriseSearchSpecHttpServiceSpecPtr and EnterpriseSearchSpecHttpServiceSpecPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecPtrInput` via:
//
//          EnterpriseSearchSpecHttpServiceSpecArgs{...}
//
//  or:
//
//          nil
type EnterpriseSearchSpecHttpServiceSpecPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecPtrOutput() EnterpriseSearchSpecHttpServiceSpecPtrOutput
	ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecPtrOutput
}

type enterpriseSearchSpecHttpServiceSpecPtrType EnterpriseSearchSpecHttpServiceSpecArgs

func EnterpriseSearchSpecHttpServiceSpecPtr(v *EnterpriseSearchSpecHttpServiceSpecArgs) EnterpriseSearchSpecHttpServiceSpecPtrInput {
	return (*enterpriseSearchSpecHttpServiceSpecPtrType)(v)
}

func (*enterpriseSearchSpecHttpServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpec)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServiceSpecPtrType) ToEnterpriseSearchSpecHttpServiceSpecPtrOutput() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServiceSpecPtrType) ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPtrOutput)
}

// Spec is the specification of the service.
type EnterpriseSearchSpecHttpServiceSpecOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpec)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecOutput) ToEnterpriseSearchSpecHttpServiceSpecOutput() EnterpriseSearchSpecHttpServiceSpecOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecOutput) ToEnterpriseSearchSpecHttpServiceSpecOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecOutput) ToEnterpriseSearchSpecHttpServiceSpecPtrOutput() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceSpecOutput) ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *EnterpriseSearchSpecHttpServiceSpec {
		return &v
	}).(EnterpriseSearchSpecHttpServiceSpecPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.IpFamily }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
func (o EnterpriseSearchSpecHttpServiceSpecOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecOutput) Ports() EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) []EnterpriseSearchSpecHttpServiceSpecPorts { return v.Ports }).(EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o EnterpriseSearchSpecHttpServiceSpecOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) SessionAffinityConfig() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig {
		return v.SessionAffinityConfig
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) TopologyKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) []string { return v.TopologyKeys }).(pulumi.StringArrayOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o EnterpriseSearchSpecHttpServiceSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecHttpServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpec)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecPtrOutput() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) Elem() EnterpriseSearchSpecHttpServiceSpecOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) EnterpriseSearchSpecHttpServiceSpec { return *v }).(EnterpriseSearchSpecHttpServiceSpecOutput)
}

// clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.IpFamily
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) Ports() EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) []EnterpriseSearchSpecHttpServiceSpecPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) SessionAffinityConfig() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) TopologyKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.TopologyKeys
	}).(pulumi.StringArrayOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ServicePort contains information on service's port.
type EnterpriseSearchSpecHttpServiceSpecPorts struct {
	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort *EnterpriseSearchSpecHttpServiceSpecPortsTargetPort `pulumi:"targetPort"`
}

// EnterpriseSearchSpecHttpServiceSpecPortsInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecPortsArgs and EnterpriseSearchSpecHttpServiceSpecPortsOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecPortsInput` via:
//
//          EnterpriseSearchSpecHttpServiceSpecPortsArgs{...}
type EnterpriseSearchSpecHttpServiceSpecPortsInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecPortsOutput() EnterpriseSearchSpecHttpServiceSpecPortsOutput
	ToEnterpriseSearchSpecHttpServiceSpecPortsOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecPortsOutput
}

// ServicePort contains information on service's port.
type EnterpriseSearchSpecHttpServiceSpecPortsArgs struct {
	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrInput `pulumi:"targetPort"`
}

func (EnterpriseSearchSpecHttpServiceSpecPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsArgs) ToEnterpriseSearchSpecHttpServiceSpecPortsOutput() EnterpriseSearchSpecHttpServiceSpecPortsOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPortsOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsArgs) ToEnterpriseSearchSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPortsOutput)
}

// EnterpriseSearchSpecHttpServiceSpecPortsArrayInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecPortsArray and EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecPortsArrayInput` via:
//
//          EnterpriseSearchSpecHttpServiceSpecPortsArray{ EnterpriseSearchSpecHttpServiceSpecPortsArgs{...} }
type EnterpriseSearchSpecHttpServiceSpecPortsArrayInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutput() EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput
	ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput
}

type EnterpriseSearchSpecHttpServiceSpecPortsArray []EnterpriseSearchSpecHttpServiceSpecPortsInput

func (EnterpriseSearchSpecHttpServiceSpecPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsArray) ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutput() EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsArray) ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput)
}

// ServicePort contains information on service's port.
type EnterpriseSearchSpecHttpServiceSpecPortsOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsOutput() EnterpriseSearchSpecHttpServiceSpecPortsOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsOutput {
	return o
}

// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) int { return v.Port }).(pulumi.IntOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) TargetPort() EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) *EnterpriseSearchSpecHttpServiceSpecPortsTargetPort {
		return v.TargetPort
	}).(EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput)
}

type EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutput() EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput) Index(i pulumi.IntInput) EnterpriseSearchSpecHttpServiceSpecPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseSearchSpecHttpServiceSpecPorts {
		return vs[0].([]EnterpriseSearchSpecHttpServiceSpecPorts)[vs[1].(int)]
	}).(EnterpriseSearchSpecHttpServiceSpecPortsOutput)
}

type EnterpriseSearchSpecHttpServiceSpecPortsTargetPort struct {
}

// EnterpriseSearchSpecHttpServiceSpecPortsTargetPortInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecPortsTargetPortArgs and EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecPortsTargetPortInput` via:
//
//          EnterpriseSearchSpecHttpServiceSpecPortsTargetPortArgs{...}
type EnterpriseSearchSpecHttpServiceSpecPortsTargetPortInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput() EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput
	ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput
}

type EnterpriseSearchSpecHttpServiceSpecPortsTargetPortArgs struct {
}

func (EnterpriseSearchSpecHttpServiceSpecPortsTargetPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPortsTargetPort)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsTargetPortArgs) ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput() EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsTargetPortArgs) ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput)
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsTargetPortArgs) ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput() EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsTargetPortArgs) ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput).ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecPortsTargetPortArgs, EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtr and EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrInput` via:
//
//          EnterpriseSearchSpecHttpServiceSpecPortsTargetPortArgs{...}
//
//  or:
//
//          nil
type EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput() EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput
	ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput
}

type enterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrType EnterpriseSearchSpecHttpServiceSpecPortsTargetPortArgs

func EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtr(v *EnterpriseSearchSpecHttpServiceSpecPortsTargetPortArgs) EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrInput {
	return (*enterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrType)(v)
}

func (*enterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecPortsTargetPort)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrType) ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput() EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrType) ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput)
}

type EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPortsTargetPort)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput() EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput() EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPortsTargetPort) *EnterpriseSearchSpecHttpServiceSpecPortsTargetPort {
		return &v
	}).(EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput)
}

type EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecPortsTargetPort)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput() EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput) Elem() EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecPortsTargetPort) EnterpriseSearchSpecHttpServiceSpecPortsTargetPort {
		return *v
	}).(EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput)
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
type EnterpriseSearchSpecHttpServiceSpecSelector struct {
}

// EnterpriseSearchSpecHttpServiceSpecSelectorInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSelectorArgs and EnterpriseSearchSpecHttpServiceSpecSelectorOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSelectorInput` via:
//
//          EnterpriseSearchSpecHttpServiceSpecSelectorArgs{...}
type EnterpriseSearchSpecHttpServiceSpecSelectorInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSelectorOutput() EnterpriseSearchSpecHttpServiceSpecSelectorOutput
	ToEnterpriseSearchSpecHttpServiceSpecSelectorOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSelectorOutput
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
type EnterpriseSearchSpecHttpServiceSpecSelectorArgs struct {
}

func (EnterpriseSearchSpecHttpServiceSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSelector)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecSelectorArgs) ToEnterpriseSearchSpecHttpServiceSpecSelectorOutput() EnterpriseSearchSpecHttpServiceSpecSelectorOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSelectorOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSelectorArgs) ToEnterpriseSearchSpecHttpServiceSpecSelectorOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSelectorOutput)
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
type EnterpriseSearchSpecHttpServiceSpecSelectorOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSelector)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSelectorOutput) ToEnterpriseSearchSpecHttpServiceSpecSelectorOutput() EnterpriseSearchSpecHttpServiceSpecSelectorOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSelectorOutput) ToEnterpriseSearchSpecHttpServiceSpecSelectorOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSelectorOutput {
	return o
}

// sessionAffinityConfig contains the configurations of session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP `pulumi:"clientIP"`
}

// EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs and EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigInput` via:
//
//          EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs{...}
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput
	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput
}

// sessionAffinityConfig contains the configurations of session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput `pulumi:"clientIP"`
}

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput)
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput).ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs, EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtr and EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput` via:
//
//          EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs{...}
//
//  or:
//
//          nil
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput
	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput
}

type enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrType EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs

func EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtr(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput {
	return (*enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrType)(v)
}

func (*enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrType) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrType) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig {
		return &v
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ClientIP() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP {
		return v.ClientIP
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) Elem() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig {
		return *v
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ClientIP() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs and EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPInput` via:
//
//          EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs{...}
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput
	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput
}

// clientIP contains the configurations of Client IP based session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput)
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput).ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs, EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtr and EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput` via:
//
//          EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs{...}
//
//  or:
//
//          nil
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput
	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput
}

type enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs

func EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtr(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput {
	return (*enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType)(v)
}

func (*enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP {
		return &v
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) Elem() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP {
		return *v
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIP) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type EnterpriseSearchSpecHttpTls struct {
	// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
	//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
	Certificate *EnterpriseSearchSpecHttpTlsCertificate `pulumi:"certificate"`
	// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificate *EnterpriseSearchSpecHttpTlsSelfSignedCertificate `pulumi:"selfSignedCertificate"`
}

// EnterpriseSearchSpecHttpTlsInput is an input type that accepts EnterpriseSearchSpecHttpTlsArgs and EnterpriseSearchSpecHttpTlsOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsInput` via:
//
//          EnterpriseSearchSpecHttpTlsArgs{...}
type EnterpriseSearchSpecHttpTlsInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsOutput() EnterpriseSearchSpecHttpTlsOutput
	ToEnterpriseSearchSpecHttpTlsOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsOutput
}

// TLS defines options for configuring TLS for HTTP.
type EnterpriseSearchSpecHttpTlsArgs struct {
	// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
	//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
	Certificate EnterpriseSearchSpecHttpTlsCertificatePtrInput `pulumi:"certificate"`
	// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificate EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput `pulumi:"selfSignedCertificate"`
}

func (EnterpriseSearchSpecHttpTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTls)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsArgs) ToEnterpriseSearchSpecHttpTlsOutput() EnterpriseSearchSpecHttpTlsOutput {
	return i.ToEnterpriseSearchSpecHttpTlsOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsArgs) ToEnterpriseSearchSpecHttpTlsOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsOutput)
}

func (i EnterpriseSearchSpecHttpTlsArgs) ToEnterpriseSearchSpecHttpTlsPtrOutput() EnterpriseSearchSpecHttpTlsPtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsArgs) ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsOutput).ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpTlsPtrInput is an input type that accepts EnterpriseSearchSpecHttpTlsArgs, EnterpriseSearchSpecHttpTlsPtr and EnterpriseSearchSpecHttpTlsPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsPtrInput` via:
//
//          EnterpriseSearchSpecHttpTlsArgs{...}
//
//  or:
//
//          nil
type EnterpriseSearchSpecHttpTlsPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsPtrOutput() EnterpriseSearchSpecHttpTlsPtrOutput
	ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsPtrOutput
}

type enterpriseSearchSpecHttpTlsPtrType EnterpriseSearchSpecHttpTlsArgs

func EnterpriseSearchSpecHttpTlsPtr(v *EnterpriseSearchSpecHttpTlsArgs) EnterpriseSearchSpecHttpTlsPtrInput {
	return (*enterpriseSearchSpecHttpTlsPtrType)(v)
}

func (*enterpriseSearchSpecHttpTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTls)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpTlsPtrType) ToEnterpriseSearchSpecHttpTlsPtrOutput() EnterpriseSearchSpecHttpTlsPtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpTlsPtrType) ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type EnterpriseSearchSpecHttpTlsOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTls)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsOutput) ToEnterpriseSearchSpecHttpTlsOutput() EnterpriseSearchSpecHttpTlsOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsOutput) ToEnterpriseSearchSpecHttpTlsOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsOutput) ToEnterpriseSearchSpecHttpTlsPtrOutput() EnterpriseSearchSpecHttpTlsPtrOutput {
	return o.ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpTlsOutput) ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTls) *EnterpriseSearchSpecHttpTls {
		return &v
	}).(EnterpriseSearchSpecHttpTlsPtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
func (o EnterpriseSearchSpecHttpTlsOutput) Certificate() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTls) *EnterpriseSearchSpecHttpTlsCertificate { return v.Certificate }).(EnterpriseSearchSpecHttpTlsCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
func (o EnterpriseSearchSpecHttpTlsOutput) SelfSignedCertificate() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTls) *EnterpriseSearchSpecHttpTlsSelfSignedCertificate {
		return v.SelfSignedCertificate
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

type EnterpriseSearchSpecHttpTlsPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTls)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsPtrOutput) ToEnterpriseSearchSpecHttpTlsPtrOutput() EnterpriseSearchSpecHttpTlsPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsPtrOutput) ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsPtrOutput) Elem() EnterpriseSearchSpecHttpTlsOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTls) EnterpriseSearchSpecHttpTls { return *v }).(EnterpriseSearchSpecHttpTlsOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
func (o EnterpriseSearchSpecHttpTlsPtrOutput) Certificate() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTls) *EnterpriseSearchSpecHttpTlsCertificate {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(EnterpriseSearchSpecHttpTlsCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
func (o EnterpriseSearchSpecHttpTlsPtrOutput) SelfSignedCertificate() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTls) *EnterpriseSearchSpecHttpTlsSelfSignedCertificate {
		if v == nil {
			return nil
		}
		return v.SelfSignedCertificate
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
type EnterpriseSearchSpecHttpTlsCertificate struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// EnterpriseSearchSpecHttpTlsCertificateInput is an input type that accepts EnterpriseSearchSpecHttpTlsCertificateArgs and EnterpriseSearchSpecHttpTlsCertificateOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsCertificateInput` via:
//
//          EnterpriseSearchSpecHttpTlsCertificateArgs{...}
type EnterpriseSearchSpecHttpTlsCertificateInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsCertificateOutput() EnterpriseSearchSpecHttpTlsCertificateOutput
	ToEnterpriseSearchSpecHttpTlsCertificateOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsCertificateOutput
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
type EnterpriseSearchSpecHttpTlsCertificateArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (EnterpriseSearchSpecHttpTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsCertificateArgs) ToEnterpriseSearchSpecHttpTlsCertificateOutput() EnterpriseSearchSpecHttpTlsCertificateOutput {
	return i.ToEnterpriseSearchSpecHttpTlsCertificateOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsCertificateArgs) ToEnterpriseSearchSpecHttpTlsCertificateOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsCertificateOutput)
}

func (i EnterpriseSearchSpecHttpTlsCertificateArgs) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutput() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsCertificateArgs) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsCertificateOutput).ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpTlsCertificatePtrInput is an input type that accepts EnterpriseSearchSpecHttpTlsCertificateArgs, EnterpriseSearchSpecHttpTlsCertificatePtr and EnterpriseSearchSpecHttpTlsCertificatePtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsCertificatePtrInput` via:
//
//          EnterpriseSearchSpecHttpTlsCertificateArgs{...}
//
//  or:
//
//          nil
type EnterpriseSearchSpecHttpTlsCertificatePtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsCertificatePtrOutput() EnterpriseSearchSpecHttpTlsCertificatePtrOutput
	ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsCertificatePtrOutput
}

type enterpriseSearchSpecHttpTlsCertificatePtrType EnterpriseSearchSpecHttpTlsCertificateArgs

func EnterpriseSearchSpecHttpTlsCertificatePtr(v *EnterpriseSearchSpecHttpTlsCertificateArgs) EnterpriseSearchSpecHttpTlsCertificatePtrInput {
	return (*enterpriseSearchSpecHttpTlsCertificatePtrType)(v)
}

func (*enterpriseSearchSpecHttpTlsCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpTlsCertificatePtrType) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutput() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpTlsCertificatePtrType) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
type EnterpriseSearchSpecHttpTlsCertificateOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsCertificateOutput) ToEnterpriseSearchSpecHttpTlsCertificateOutput() EnterpriseSearchSpecHttpTlsCertificateOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsCertificateOutput) ToEnterpriseSearchSpecHttpTlsCertificateOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificateOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsCertificateOutput) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutput() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o.ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpTlsCertificateOutput) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsCertificate) *EnterpriseSearchSpecHttpTlsCertificate {
		return &v
	}).(EnterpriseSearchSpecHttpTlsCertificatePtrOutput)
}

// SecretName is the name of the secret.
func (o EnterpriseSearchSpecHttpTlsCertificateOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsCertificate) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecHttpTlsCertificatePtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsCertificatePtrOutput) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutput() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsCertificatePtrOutput) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsCertificatePtrOutput) Elem() EnterpriseSearchSpecHttpTlsCertificateOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsCertificate) EnterpriseSearchSpecHttpTlsCertificate { return *v }).(EnterpriseSearchSpecHttpTlsCertificateOutput)
}

// SecretName is the name of the secret.
func (o EnterpriseSearchSpecHttpTlsCertificatePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsCertificate) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificate struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled *bool `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames []EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames `pulumi:"subjectAltNames"`
}

// EnterpriseSearchSpecHttpTlsSelfSignedCertificateInput is an input type that accepts EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs and EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsSelfSignedCertificateInput` via:
//
//          EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs{...}
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput
	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput `pulumi:"subjectAltNames"`
}

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput)
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput).ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput is an input type that accepts EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs, EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtr and EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput` via:
//
//          EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs{...}
//
//  or:
//
//          nil
type EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput
	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput
}

type enterpriseSearchSpecHttpTlsSelfSignedCertificatePtrType EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs

func EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtr(v *EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput {
	return (*enterpriseSearchSpecHttpTlsSelfSignedCertificatePtrType)(v)
}

func (*enterpriseSearchSpecHttpTlsSelfSignedCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpTlsSelfSignedCertificatePtrType) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpTlsSelfSignedCertificatePtrType) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificate) *EnterpriseSearchSpecHttpTlsSelfSignedCertificate {
		return &v
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificate) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) SubjectAltNames() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificate) []EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return v.SubjectAltNames
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

type EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) Elem() EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsSelfSignedCertificate) EnterpriseSearchSpecHttpTlsSelfSignedCertificate {
		return *v
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsSelfSignedCertificate) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) SubjectAltNames() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsSelfSignedCertificate) []EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames struct {
	// DNS is the DNS name of the subject.
	Dns *string `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip *string `pulumi:"ip"`
}

// EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput is an input type that accepts EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs and EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput` via:
//
//          EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...}
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs struct {
	// DNS is the DNS name of the subject.
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput is an input type that accepts EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray and EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput` via:
//
//          EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{ EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...} }
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
}

type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray []EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

// DNS is the DNS name of the subject.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// IP is the IP address of the subject.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) Index(i pulumi.IntInput) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return vs[0].([]EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)[vs[1].(int)]
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Enterprise Search pods.
type EnterpriseSearchSpecPodTemplate struct {
}

// EnterpriseSearchSpecPodTemplateInput is an input type that accepts EnterpriseSearchSpecPodTemplateArgs and EnterpriseSearchSpecPodTemplateOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecPodTemplateInput` via:
//
//          EnterpriseSearchSpecPodTemplateArgs{...}
type EnterpriseSearchSpecPodTemplateInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecPodTemplateOutput() EnterpriseSearchSpecPodTemplateOutput
	ToEnterpriseSearchSpecPodTemplateOutputWithContext(context.Context) EnterpriseSearchSpecPodTemplateOutput
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Enterprise Search pods.
type EnterpriseSearchSpecPodTemplateArgs struct {
}

func (EnterpriseSearchSpecPodTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecPodTemplate)(nil)).Elem()
}

func (i EnterpriseSearchSpecPodTemplateArgs) ToEnterpriseSearchSpecPodTemplateOutput() EnterpriseSearchSpecPodTemplateOutput {
	return i.ToEnterpriseSearchSpecPodTemplateOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecPodTemplateArgs) ToEnterpriseSearchSpecPodTemplateOutputWithContext(ctx context.Context) EnterpriseSearchSpecPodTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecPodTemplateOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Enterprise Search pods.
type EnterpriseSearchSpecPodTemplateOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecPodTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecPodTemplate)(nil)).Elem()
}

func (o EnterpriseSearchSpecPodTemplateOutput) ToEnterpriseSearchSpecPodTemplateOutput() EnterpriseSearchSpecPodTemplateOutput {
	return o
}

func (o EnterpriseSearchSpecPodTemplateOutput) ToEnterpriseSearchSpecPodTemplateOutputWithContext(ctx context.Context) EnterpriseSearchSpecPodTemplateOutput {
	return o
}

// EnterpriseSearchStatus defines the observed state of EnterpriseSearch
type EnterpriseSearchStatus struct {
	// Association is the status of any auto-linking to Elasticsearch clusters.
	AssociationStatus *string `pulumi:"associationStatus"`
	AvailableNodes    *int    `pulumi:"availableNodes"`
	// EnterpriseSearchHealth expresses the health of the Enterprise Search instances.
	Health *string `pulumi:"health"`
	// ExternalService is the name of the service associated to the Enterprise Search Pods.
	Service *string `pulumi:"service"`
}

// EnterpriseSearchStatusInput is an input type that accepts EnterpriseSearchStatusArgs and EnterpriseSearchStatusOutput values.
// You can construct a concrete instance of `EnterpriseSearchStatusInput` via:
//
//          EnterpriseSearchStatusArgs{...}
type EnterpriseSearchStatusInput interface {
	pulumi.Input

	ToEnterpriseSearchStatusOutput() EnterpriseSearchStatusOutput
	ToEnterpriseSearchStatusOutputWithContext(context.Context) EnterpriseSearchStatusOutput
}

// EnterpriseSearchStatus defines the observed state of EnterpriseSearch
type EnterpriseSearchStatusArgs struct {
	// Association is the status of any auto-linking to Elasticsearch clusters.
	AssociationStatus pulumi.StringPtrInput `pulumi:"associationStatus"`
	AvailableNodes    pulumi.IntPtrInput    `pulumi:"availableNodes"`
	// EnterpriseSearchHealth expresses the health of the Enterprise Search instances.
	Health pulumi.StringPtrInput `pulumi:"health"`
	// ExternalService is the name of the service associated to the Enterprise Search Pods.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (EnterpriseSearchStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchStatus)(nil)).Elem()
}

func (i EnterpriseSearchStatusArgs) ToEnterpriseSearchStatusOutput() EnterpriseSearchStatusOutput {
	return i.ToEnterpriseSearchStatusOutputWithContext(context.Background())
}

func (i EnterpriseSearchStatusArgs) ToEnterpriseSearchStatusOutputWithContext(ctx context.Context) EnterpriseSearchStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchStatusOutput)
}

func (i EnterpriseSearchStatusArgs) ToEnterpriseSearchStatusPtrOutput() EnterpriseSearchStatusPtrOutput {
	return i.ToEnterpriseSearchStatusPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchStatusArgs) ToEnterpriseSearchStatusPtrOutputWithContext(ctx context.Context) EnterpriseSearchStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchStatusOutput).ToEnterpriseSearchStatusPtrOutputWithContext(ctx)
}

// EnterpriseSearchStatusPtrInput is an input type that accepts EnterpriseSearchStatusArgs, EnterpriseSearchStatusPtr and EnterpriseSearchStatusPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchStatusPtrInput` via:
//
//          EnterpriseSearchStatusArgs{...}
//
//  or:
//
//          nil
type EnterpriseSearchStatusPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchStatusPtrOutput() EnterpriseSearchStatusPtrOutput
	ToEnterpriseSearchStatusPtrOutputWithContext(context.Context) EnterpriseSearchStatusPtrOutput
}

type enterpriseSearchStatusPtrType EnterpriseSearchStatusArgs

func EnterpriseSearchStatusPtr(v *EnterpriseSearchStatusArgs) EnterpriseSearchStatusPtrInput {
	return (*enterpriseSearchStatusPtrType)(v)
}

func (*enterpriseSearchStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchStatus)(nil)).Elem()
}

func (i *enterpriseSearchStatusPtrType) ToEnterpriseSearchStatusPtrOutput() EnterpriseSearchStatusPtrOutput {
	return i.ToEnterpriseSearchStatusPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchStatusPtrType) ToEnterpriseSearchStatusPtrOutputWithContext(ctx context.Context) EnterpriseSearchStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchStatusPtrOutput)
}

// EnterpriseSearchStatus defines the observed state of EnterpriseSearch
type EnterpriseSearchStatusOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchStatus)(nil)).Elem()
}

func (o EnterpriseSearchStatusOutput) ToEnterpriseSearchStatusOutput() EnterpriseSearchStatusOutput {
	return o
}

func (o EnterpriseSearchStatusOutput) ToEnterpriseSearchStatusOutputWithContext(ctx context.Context) EnterpriseSearchStatusOutput {
	return o
}

func (o EnterpriseSearchStatusOutput) ToEnterpriseSearchStatusPtrOutput() EnterpriseSearchStatusPtrOutput {
	return o.ToEnterpriseSearchStatusPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchStatusOutput) ToEnterpriseSearchStatusPtrOutputWithContext(ctx context.Context) EnterpriseSearchStatusPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *EnterpriseSearchStatus {
		return &v
	}).(EnterpriseSearchStatusPtrOutput)
}

// Association is the status of any auto-linking to Elasticsearch clusters.
func (o EnterpriseSearchStatusOutput) AssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *string { return v.AssociationStatus }).(pulumi.StringPtrOutput)
}

func (o EnterpriseSearchStatusOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *int { return v.AvailableNodes }).(pulumi.IntPtrOutput)
}

// EnterpriseSearchHealth expresses the health of the Enterprise Search instances.
func (o EnterpriseSearchStatusOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *string { return v.Health }).(pulumi.StringPtrOutput)
}

// ExternalService is the name of the service associated to the Enterprise Search Pods.
func (o EnterpriseSearchStatusOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchStatusPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchStatus)(nil)).Elem()
}

func (o EnterpriseSearchStatusPtrOutput) ToEnterpriseSearchStatusPtrOutput() EnterpriseSearchStatusPtrOutput {
	return o
}

func (o EnterpriseSearchStatusPtrOutput) ToEnterpriseSearchStatusPtrOutputWithContext(ctx context.Context) EnterpriseSearchStatusPtrOutput {
	return o
}

func (o EnterpriseSearchStatusPtrOutput) Elem() EnterpriseSearchStatusOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) EnterpriseSearchStatus { return *v }).(EnterpriseSearchStatusOutput)
}

// Association is the status of any auto-linking to Elasticsearch clusters.
func (o EnterpriseSearchStatusPtrOutput) AssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.AssociationStatus
	}).(pulumi.StringPtrOutput)
}

func (o EnterpriseSearchStatusPtrOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableNodes
	}).(pulumi.IntPtrOutput)
}

// EnterpriseSearchHealth expresses the health of the Enterprise Search instances.
func (o EnterpriseSearchStatusPtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.Health
	}).(pulumi.StringPtrOutput)
}

// ExternalService is the name of the service associated to the Enterprise Search Pods.
func (o EnterpriseSearchStatusPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(EnterpriseSearchTypeOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchMetadataOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecConfigOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecConfigRefOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecConfigRefPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecElasticsearchRefOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecElasticsearchRefPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServicePtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceMetadataOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecPortsOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecPortsTargetPortOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecPortsTargetPortPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSelectorOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsCertificateOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsCertificatePtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecPodTemplateOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchStatusOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchStatusPtrOutput{})
}

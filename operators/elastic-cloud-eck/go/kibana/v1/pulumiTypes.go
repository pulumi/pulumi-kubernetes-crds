// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Kibana represents a Kibana resource in a Kubernetes cluster.
type KibanaType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KibanaSpec holds the specification of a Kibana instance.
	Spec *KibanaSpec `pulumi:"spec"`
	// KibanaStatus defines the observed state of Kibana
	Status *KibanaStatus `pulumi:"status"`
}

// KibanaTypeInput is an input type that accepts KibanaTypeArgs and KibanaTypeOutput values.
// You can construct a concrete instance of `KibanaTypeInput` via:
//
//          KibanaTypeArgs{...}
type KibanaTypeInput interface {
	pulumi.Input

	ToKibanaTypeOutput() KibanaTypeOutput
	ToKibanaTypeOutputWithContext(context.Context) KibanaTypeOutput
}

// Kibana represents a Kibana resource in a Kubernetes cluster.
type KibanaTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KibanaSpec holds the specification of a Kibana instance.
	Spec KibanaSpecPtrInput `pulumi:"spec"`
	// KibanaStatus defines the observed state of Kibana
	Status KibanaStatusPtrInput `pulumi:"status"`
}

func (KibanaTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaType)(nil)).Elem()
}

func (i KibanaTypeArgs) ToKibanaTypeOutput() KibanaTypeOutput {
	return i.ToKibanaTypeOutputWithContext(context.Background())
}

func (i KibanaTypeArgs) ToKibanaTypeOutputWithContext(ctx context.Context) KibanaTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaTypeOutput)
}

// Kibana represents a Kibana resource in a Kubernetes cluster.
type KibanaTypeOutput struct{ *pulumi.OutputState }

func (KibanaTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaType)(nil)).Elem()
}

func (o KibanaTypeOutput) ToKibanaTypeOutput() KibanaTypeOutput {
	return o
}

func (o KibanaTypeOutput) ToKibanaTypeOutputWithContext(ctx context.Context) KibanaTypeOutput {
	return o
}

func (o KibanaTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KibanaTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KibanaTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KibanaType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KibanaSpec holds the specification of a Kibana instance.
func (o KibanaTypeOutput) Spec() KibanaSpecPtrOutput {
	return o.ApplyT(func(v KibanaType) *KibanaSpec { return v.Spec }).(KibanaSpecPtrOutput)
}

// KibanaStatus defines the observed state of Kibana
func (o KibanaTypeOutput) Status() KibanaStatusPtrOutput {
	return o.ApplyT(func(v KibanaType) *KibanaStatus { return v.Status }).(KibanaStatusPtrOutput)
}

type KibanaMetadata struct {
}

// KibanaMetadataInput is an input type that accepts KibanaMetadataArgs and KibanaMetadataOutput values.
// You can construct a concrete instance of `KibanaMetadataInput` via:
//
//          KibanaMetadataArgs{...}
type KibanaMetadataInput interface {
	pulumi.Input

	ToKibanaMetadataOutput() KibanaMetadataOutput
	ToKibanaMetadataOutputWithContext(context.Context) KibanaMetadataOutput
}

type KibanaMetadataArgs struct {
}

func (KibanaMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaMetadata)(nil)).Elem()
}

func (i KibanaMetadataArgs) ToKibanaMetadataOutput() KibanaMetadataOutput {
	return i.ToKibanaMetadataOutputWithContext(context.Background())
}

func (i KibanaMetadataArgs) ToKibanaMetadataOutputWithContext(ctx context.Context) KibanaMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaMetadataOutput)
}

type KibanaMetadataOutput struct{ *pulumi.OutputState }

func (KibanaMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaMetadata)(nil)).Elem()
}

func (o KibanaMetadataOutput) ToKibanaMetadataOutput() KibanaMetadataOutput {
	return o
}

func (o KibanaMetadataOutput) ToKibanaMetadataOutputWithContext(ctx context.Context) KibanaMetadataOutput {
	return o
}

// KibanaSpec holds the specification of a Kibana instance.
type KibanaSpec struct {
	// Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
	Config map[string]interface{} `pulumi:"config"`
	// Count of Kibana instances to deploy.
	Count *int `pulumi:"count"`
	// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
	ElasticsearchRef *KibanaSpecElasticsearchRef `pulumi:"elasticsearchRef"`
	// HTTP holds the HTTP layer configuration for Kibana.
	Http *KibanaSpecHttp `pulumi:"http"`
	// Image is the Kibana Docker image to deploy.
	Image *string `pulumi:"image"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
	PodTemplate map[string]interface{} `pulumi:"podTemplate"`
	// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
	SecureSettings []KibanaSpecSecureSettings `pulumi:"secureSettings"`
	// ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// Version of Kibana.
	Version string `pulumi:"version"`
}

// KibanaSpecInput is an input type that accepts KibanaSpecArgs and KibanaSpecOutput values.
// You can construct a concrete instance of `KibanaSpecInput` via:
//
//          KibanaSpecArgs{...}
type KibanaSpecInput interface {
	pulumi.Input

	ToKibanaSpecOutput() KibanaSpecOutput
	ToKibanaSpecOutputWithContext(context.Context) KibanaSpecOutput
}

// KibanaSpec holds the specification of a Kibana instance.
type KibanaSpecArgs struct {
	// Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
	Config pulumi.MapInput `pulumi:"config"`
	// Count of Kibana instances to deploy.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
	ElasticsearchRef KibanaSpecElasticsearchRefPtrInput `pulumi:"elasticsearchRef"`
	// HTTP holds the HTTP layer configuration for Kibana.
	Http KibanaSpecHttpPtrInput `pulumi:"http"`
	// Image is the Kibana Docker image to deploy.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
	PodTemplate pulumi.MapInput `pulumi:"podTemplate"`
	// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
	SecureSettings KibanaSpecSecureSettingsArrayInput `pulumi:"secureSettings"`
	// ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// Version of Kibana.
	Version pulumi.StringInput `pulumi:"version"`
}

func (KibanaSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpec)(nil)).Elem()
}

func (i KibanaSpecArgs) ToKibanaSpecOutput() KibanaSpecOutput {
	return i.ToKibanaSpecOutputWithContext(context.Background())
}

func (i KibanaSpecArgs) ToKibanaSpecOutputWithContext(ctx context.Context) KibanaSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecOutput)
}

func (i KibanaSpecArgs) ToKibanaSpecPtrOutput() KibanaSpecPtrOutput {
	return i.ToKibanaSpecPtrOutputWithContext(context.Background())
}

func (i KibanaSpecArgs) ToKibanaSpecPtrOutputWithContext(ctx context.Context) KibanaSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecOutput).ToKibanaSpecPtrOutputWithContext(ctx)
}

// KibanaSpecPtrInput is an input type that accepts KibanaSpecArgs, KibanaSpecPtr and KibanaSpecPtrOutput values.
// You can construct a concrete instance of `KibanaSpecPtrInput` via:
//
//          KibanaSpecArgs{...}
//
//  or:
//
//          nil
type KibanaSpecPtrInput interface {
	pulumi.Input

	ToKibanaSpecPtrOutput() KibanaSpecPtrOutput
	ToKibanaSpecPtrOutputWithContext(context.Context) KibanaSpecPtrOutput
}

type kibanaSpecPtrType KibanaSpecArgs

func KibanaSpecPtr(v *KibanaSpecArgs) KibanaSpecPtrInput {
	return (*kibanaSpecPtrType)(v)
}

func (*kibanaSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpec)(nil)).Elem()
}

func (i *kibanaSpecPtrType) ToKibanaSpecPtrOutput() KibanaSpecPtrOutput {
	return i.ToKibanaSpecPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecPtrType) ToKibanaSpecPtrOutputWithContext(ctx context.Context) KibanaSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecPtrOutput)
}

// KibanaSpec holds the specification of a Kibana instance.
type KibanaSpecOutput struct{ *pulumi.OutputState }

func (KibanaSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpec)(nil)).Elem()
}

func (o KibanaSpecOutput) ToKibanaSpecOutput() KibanaSpecOutput {
	return o
}

func (o KibanaSpecOutput) ToKibanaSpecOutputWithContext(ctx context.Context) KibanaSpecOutput {
	return o
}

func (o KibanaSpecOutput) ToKibanaSpecPtrOutput() KibanaSpecPtrOutput {
	return o.ToKibanaSpecPtrOutputWithContext(context.Background())
}

func (o KibanaSpecOutput) ToKibanaSpecPtrOutputWithContext(ctx context.Context) KibanaSpecPtrOutput {
	return o.ApplyT(func(v KibanaSpec) *KibanaSpec {
		return &v
	}).(KibanaSpecPtrOutput)
}

// Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
func (o KibanaSpecOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v KibanaSpec) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// Count of Kibana instances to deploy.
func (o KibanaSpecOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KibanaSpec) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
func (o KibanaSpecOutput) ElasticsearchRef() KibanaSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v KibanaSpec) *KibanaSpecElasticsearchRef { return v.ElasticsearchRef }).(KibanaSpecElasticsearchRefPtrOutput)
}

// HTTP holds the HTTP layer configuration for Kibana.
func (o KibanaSpecOutput) Http() KibanaSpecHttpPtrOutput {
	return o.ApplyT(func(v KibanaSpec) *KibanaSpecHttp { return v.Http }).(KibanaSpecHttpPtrOutput)
}

// Image is the Kibana Docker image to deploy.
func (o KibanaSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
func (o KibanaSpecOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v KibanaSpec) map[string]interface{} { return v.PodTemplate }).(pulumi.MapOutput)
}

// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
func (o KibanaSpecOutput) SecureSettings() KibanaSpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v KibanaSpec) []KibanaSpecSecureSettings { return v.SecureSettings }).(KibanaSpecSecureSettingsArrayOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
func (o KibanaSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// Version of Kibana.
func (o KibanaSpecOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v KibanaSpec) string { return v.Version }).(pulumi.StringOutput)
}

type KibanaSpecPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpec)(nil)).Elem()
}

func (o KibanaSpecPtrOutput) ToKibanaSpecPtrOutput() KibanaSpecPtrOutput {
	return o
}

func (o KibanaSpecPtrOutput) ToKibanaSpecPtrOutputWithContext(ctx context.Context) KibanaSpecPtrOutput {
	return o
}

func (o KibanaSpecPtrOutput) Elem() KibanaSpecOutput {
	return o.ApplyT(func(v *KibanaSpec) KibanaSpec { return *v }).(KibanaSpecOutput)
}

// Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
func (o KibanaSpecPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *KibanaSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// Count of Kibana instances to deploy.
func (o KibanaSpecPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KibanaSpec) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
func (o KibanaSpecPtrOutput) ElasticsearchRef() KibanaSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v *KibanaSpec) *KibanaSpecElasticsearchRef {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRef
	}).(KibanaSpecElasticsearchRefPtrOutput)
}

// HTTP holds the HTTP layer configuration for Kibana.
func (o KibanaSpecPtrOutput) Http() KibanaSpecHttpPtrOutput {
	return o.ApplyT(func(v *KibanaSpec) *KibanaSpecHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(KibanaSpecHttpPtrOutput)
}

// Image is the Kibana Docker image to deploy.
func (o KibanaSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
func (o KibanaSpecPtrOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v *KibanaSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.MapOutput)
}

// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
func (o KibanaSpecPtrOutput) SecureSettings() KibanaSpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v *KibanaSpec) []KibanaSpecSecureSettings {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(KibanaSpecSecureSettingsArrayOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
func (o KibanaSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// Version of Kibana.
func (o KibanaSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
type KibanaSpecConfig struct {
}

// KibanaSpecConfigInput is an input type that accepts KibanaSpecConfigArgs and KibanaSpecConfigOutput values.
// You can construct a concrete instance of `KibanaSpecConfigInput` via:
//
//          KibanaSpecConfigArgs{...}
type KibanaSpecConfigInput interface {
	pulumi.Input

	ToKibanaSpecConfigOutput() KibanaSpecConfigOutput
	ToKibanaSpecConfigOutputWithContext(context.Context) KibanaSpecConfigOutput
}

// Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
type KibanaSpecConfigArgs struct {
}

func (KibanaSpecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecConfig)(nil)).Elem()
}

func (i KibanaSpecConfigArgs) ToKibanaSpecConfigOutput() KibanaSpecConfigOutput {
	return i.ToKibanaSpecConfigOutputWithContext(context.Background())
}

func (i KibanaSpecConfigArgs) ToKibanaSpecConfigOutputWithContext(ctx context.Context) KibanaSpecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecConfigOutput)
}

// Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
type KibanaSpecConfigOutput struct{ *pulumi.OutputState }

func (KibanaSpecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecConfig)(nil)).Elem()
}

func (o KibanaSpecConfigOutput) ToKibanaSpecConfigOutput() KibanaSpecConfigOutput {
	return o
}

func (o KibanaSpecConfigOutput) ToKibanaSpecConfigOutputWithContext(ctx context.Context) KibanaSpecConfigOutput {
	return o
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
type KibanaSpecElasticsearchRef struct {
	// Name of the Kubernetes object.
	Name string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
}

// KibanaSpecElasticsearchRefInput is an input type that accepts KibanaSpecElasticsearchRefArgs and KibanaSpecElasticsearchRefOutput values.
// You can construct a concrete instance of `KibanaSpecElasticsearchRefInput` via:
//
//          KibanaSpecElasticsearchRefArgs{...}
type KibanaSpecElasticsearchRefInput interface {
	pulumi.Input

	ToKibanaSpecElasticsearchRefOutput() KibanaSpecElasticsearchRefOutput
	ToKibanaSpecElasticsearchRefOutputWithContext(context.Context) KibanaSpecElasticsearchRefOutput
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
type KibanaSpecElasticsearchRefArgs struct {
	// Name of the Kubernetes object.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (KibanaSpecElasticsearchRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecElasticsearchRef)(nil)).Elem()
}

func (i KibanaSpecElasticsearchRefArgs) ToKibanaSpecElasticsearchRefOutput() KibanaSpecElasticsearchRefOutput {
	return i.ToKibanaSpecElasticsearchRefOutputWithContext(context.Background())
}

func (i KibanaSpecElasticsearchRefArgs) ToKibanaSpecElasticsearchRefOutputWithContext(ctx context.Context) KibanaSpecElasticsearchRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecElasticsearchRefOutput)
}

func (i KibanaSpecElasticsearchRefArgs) ToKibanaSpecElasticsearchRefPtrOutput() KibanaSpecElasticsearchRefPtrOutput {
	return i.ToKibanaSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i KibanaSpecElasticsearchRefArgs) ToKibanaSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) KibanaSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecElasticsearchRefOutput).ToKibanaSpecElasticsearchRefPtrOutputWithContext(ctx)
}

// KibanaSpecElasticsearchRefPtrInput is an input type that accepts KibanaSpecElasticsearchRefArgs, KibanaSpecElasticsearchRefPtr and KibanaSpecElasticsearchRefPtrOutput values.
// You can construct a concrete instance of `KibanaSpecElasticsearchRefPtrInput` via:
//
//          KibanaSpecElasticsearchRefArgs{...}
//
//  or:
//
//          nil
type KibanaSpecElasticsearchRefPtrInput interface {
	pulumi.Input

	ToKibanaSpecElasticsearchRefPtrOutput() KibanaSpecElasticsearchRefPtrOutput
	ToKibanaSpecElasticsearchRefPtrOutputWithContext(context.Context) KibanaSpecElasticsearchRefPtrOutput
}

type kibanaSpecElasticsearchRefPtrType KibanaSpecElasticsearchRefArgs

func KibanaSpecElasticsearchRefPtr(v *KibanaSpecElasticsearchRefArgs) KibanaSpecElasticsearchRefPtrInput {
	return (*kibanaSpecElasticsearchRefPtrType)(v)
}

func (*kibanaSpecElasticsearchRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecElasticsearchRef)(nil)).Elem()
}

func (i *kibanaSpecElasticsearchRefPtrType) ToKibanaSpecElasticsearchRefPtrOutput() KibanaSpecElasticsearchRefPtrOutput {
	return i.ToKibanaSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecElasticsearchRefPtrType) ToKibanaSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) KibanaSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecElasticsearchRefPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
type KibanaSpecElasticsearchRefOutput struct{ *pulumi.OutputState }

func (KibanaSpecElasticsearchRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecElasticsearchRef)(nil)).Elem()
}

func (o KibanaSpecElasticsearchRefOutput) ToKibanaSpecElasticsearchRefOutput() KibanaSpecElasticsearchRefOutput {
	return o
}

func (o KibanaSpecElasticsearchRefOutput) ToKibanaSpecElasticsearchRefOutputWithContext(ctx context.Context) KibanaSpecElasticsearchRefOutput {
	return o
}

func (o KibanaSpecElasticsearchRefOutput) ToKibanaSpecElasticsearchRefPtrOutput() KibanaSpecElasticsearchRefPtrOutput {
	return o.ToKibanaSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (o KibanaSpecElasticsearchRefOutput) ToKibanaSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) KibanaSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v KibanaSpecElasticsearchRef) *KibanaSpecElasticsearchRef {
		return &v
	}).(KibanaSpecElasticsearchRefPtrOutput)
}

// Name of the Kubernetes object.
func (o KibanaSpecElasticsearchRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KibanaSpecElasticsearchRef) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o KibanaSpecElasticsearchRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecElasticsearchRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type KibanaSpecElasticsearchRefPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecElasticsearchRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecElasticsearchRef)(nil)).Elem()
}

func (o KibanaSpecElasticsearchRefPtrOutput) ToKibanaSpecElasticsearchRefPtrOutput() KibanaSpecElasticsearchRefPtrOutput {
	return o
}

func (o KibanaSpecElasticsearchRefPtrOutput) ToKibanaSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) KibanaSpecElasticsearchRefPtrOutput {
	return o
}

func (o KibanaSpecElasticsearchRefPtrOutput) Elem() KibanaSpecElasticsearchRefOutput {
	return o.ApplyT(func(v *KibanaSpecElasticsearchRef) KibanaSpecElasticsearchRef { return *v }).(KibanaSpecElasticsearchRefOutput)
}

// Name of the Kubernetes object.
func (o KibanaSpecElasticsearchRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o KibanaSpecElasticsearchRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// HTTP holds the HTTP layer configuration for Kibana.
type KibanaSpecHttp struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service *KibanaSpecHttpService `pulumi:"service"`
	// TLS defines options for configuring TLS for HTTP.
	Tls *KibanaSpecHttpTls `pulumi:"tls"`
}

// KibanaSpecHttpInput is an input type that accepts KibanaSpecHttpArgs and KibanaSpecHttpOutput values.
// You can construct a concrete instance of `KibanaSpecHttpInput` via:
//
//          KibanaSpecHttpArgs{...}
type KibanaSpecHttpInput interface {
	pulumi.Input

	ToKibanaSpecHttpOutput() KibanaSpecHttpOutput
	ToKibanaSpecHttpOutputWithContext(context.Context) KibanaSpecHttpOutput
}

// HTTP holds the HTTP layer configuration for Kibana.
type KibanaSpecHttpArgs struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service KibanaSpecHttpServicePtrInput `pulumi:"service"`
	// TLS defines options for configuring TLS for HTTP.
	Tls KibanaSpecHttpTlsPtrInput `pulumi:"tls"`
}

func (KibanaSpecHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttp)(nil)).Elem()
}

func (i KibanaSpecHttpArgs) ToKibanaSpecHttpOutput() KibanaSpecHttpOutput {
	return i.ToKibanaSpecHttpOutputWithContext(context.Background())
}

func (i KibanaSpecHttpArgs) ToKibanaSpecHttpOutputWithContext(ctx context.Context) KibanaSpecHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpOutput)
}

func (i KibanaSpecHttpArgs) ToKibanaSpecHttpPtrOutput() KibanaSpecHttpPtrOutput {
	return i.ToKibanaSpecHttpPtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpArgs) ToKibanaSpecHttpPtrOutputWithContext(ctx context.Context) KibanaSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpOutput).ToKibanaSpecHttpPtrOutputWithContext(ctx)
}

// KibanaSpecHttpPtrInput is an input type that accepts KibanaSpecHttpArgs, KibanaSpecHttpPtr and KibanaSpecHttpPtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpPtrInput` via:
//
//          KibanaSpecHttpArgs{...}
//
//  or:
//
//          nil
type KibanaSpecHttpPtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpPtrOutput() KibanaSpecHttpPtrOutput
	ToKibanaSpecHttpPtrOutputWithContext(context.Context) KibanaSpecHttpPtrOutput
}

type kibanaSpecHttpPtrType KibanaSpecHttpArgs

func KibanaSpecHttpPtr(v *KibanaSpecHttpArgs) KibanaSpecHttpPtrInput {
	return (*kibanaSpecHttpPtrType)(v)
}

func (*kibanaSpecHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttp)(nil)).Elem()
}

func (i *kibanaSpecHttpPtrType) ToKibanaSpecHttpPtrOutput() KibanaSpecHttpPtrOutput {
	return i.ToKibanaSpecHttpPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpPtrType) ToKibanaSpecHttpPtrOutputWithContext(ctx context.Context) KibanaSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpPtrOutput)
}

// HTTP holds the HTTP layer configuration for Kibana.
type KibanaSpecHttpOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttp)(nil)).Elem()
}

func (o KibanaSpecHttpOutput) ToKibanaSpecHttpOutput() KibanaSpecHttpOutput {
	return o
}

func (o KibanaSpecHttpOutput) ToKibanaSpecHttpOutputWithContext(ctx context.Context) KibanaSpecHttpOutput {
	return o
}

func (o KibanaSpecHttpOutput) ToKibanaSpecHttpPtrOutput() KibanaSpecHttpPtrOutput {
	return o.ToKibanaSpecHttpPtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpOutput) ToKibanaSpecHttpPtrOutputWithContext(ctx context.Context) KibanaSpecHttpPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttp) *KibanaSpecHttp {
		return &v
	}).(KibanaSpecHttpPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o KibanaSpecHttpOutput) Service() KibanaSpecHttpServicePtrOutput {
	return o.ApplyT(func(v KibanaSpecHttp) *KibanaSpecHttpService { return v.Service }).(KibanaSpecHttpServicePtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
func (o KibanaSpecHttpOutput) Tls() KibanaSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttp) *KibanaSpecHttpTls { return v.Tls }).(KibanaSpecHttpTlsPtrOutput)
}

type KibanaSpecHttpPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttp)(nil)).Elem()
}

func (o KibanaSpecHttpPtrOutput) ToKibanaSpecHttpPtrOutput() KibanaSpecHttpPtrOutput {
	return o
}

func (o KibanaSpecHttpPtrOutput) ToKibanaSpecHttpPtrOutputWithContext(ctx context.Context) KibanaSpecHttpPtrOutput {
	return o
}

func (o KibanaSpecHttpPtrOutput) Elem() KibanaSpecHttpOutput {
	return o.ApplyT(func(v *KibanaSpecHttp) KibanaSpecHttp { return *v }).(KibanaSpecHttpOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o KibanaSpecHttpPtrOutput) Service() KibanaSpecHttpServicePtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttp) *KibanaSpecHttpService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(KibanaSpecHttpServicePtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
func (o KibanaSpecHttpPtrOutput) Tls() KibanaSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttp) *KibanaSpecHttpTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(KibanaSpecHttpTlsPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type KibanaSpecHttpService struct {
	// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec *KibanaSpecHttpServiceSpec `pulumi:"spec"`
}

// KibanaSpecHttpServiceInput is an input type that accepts KibanaSpecHttpServiceArgs and KibanaSpecHttpServiceOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceInput` via:
//
//          KibanaSpecHttpServiceArgs{...}
type KibanaSpecHttpServiceInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceOutput() KibanaSpecHttpServiceOutput
	ToKibanaSpecHttpServiceOutputWithContext(context.Context) KibanaSpecHttpServiceOutput
}

// Service defines the template for the associated Kubernetes Service object.
type KibanaSpecHttpServiceArgs struct {
	// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec KibanaSpecHttpServiceSpecPtrInput `pulumi:"spec"`
}

func (KibanaSpecHttpServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpService)(nil)).Elem()
}

func (i KibanaSpecHttpServiceArgs) ToKibanaSpecHttpServiceOutput() KibanaSpecHttpServiceOutput {
	return i.ToKibanaSpecHttpServiceOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceArgs) ToKibanaSpecHttpServiceOutputWithContext(ctx context.Context) KibanaSpecHttpServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceOutput)
}

func (i KibanaSpecHttpServiceArgs) ToKibanaSpecHttpServicePtrOutput() KibanaSpecHttpServicePtrOutput {
	return i.ToKibanaSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceArgs) ToKibanaSpecHttpServicePtrOutputWithContext(ctx context.Context) KibanaSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceOutput).ToKibanaSpecHttpServicePtrOutputWithContext(ctx)
}

// KibanaSpecHttpServicePtrInput is an input type that accepts KibanaSpecHttpServiceArgs, KibanaSpecHttpServicePtr and KibanaSpecHttpServicePtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServicePtrInput` via:
//
//          KibanaSpecHttpServiceArgs{...}
//
//  or:
//
//          nil
type KibanaSpecHttpServicePtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpServicePtrOutput() KibanaSpecHttpServicePtrOutput
	ToKibanaSpecHttpServicePtrOutputWithContext(context.Context) KibanaSpecHttpServicePtrOutput
}

type kibanaSpecHttpServicePtrType KibanaSpecHttpServiceArgs

func KibanaSpecHttpServicePtr(v *KibanaSpecHttpServiceArgs) KibanaSpecHttpServicePtrInput {
	return (*kibanaSpecHttpServicePtrType)(v)
}

func (*kibanaSpecHttpServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpService)(nil)).Elem()
}

func (i *kibanaSpecHttpServicePtrType) ToKibanaSpecHttpServicePtrOutput() KibanaSpecHttpServicePtrOutput {
	return i.ToKibanaSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpServicePtrType) ToKibanaSpecHttpServicePtrOutputWithContext(ctx context.Context) KibanaSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServicePtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type KibanaSpecHttpServiceOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpService)(nil)).Elem()
}

func (o KibanaSpecHttpServiceOutput) ToKibanaSpecHttpServiceOutput() KibanaSpecHttpServiceOutput {
	return o
}

func (o KibanaSpecHttpServiceOutput) ToKibanaSpecHttpServiceOutputWithContext(ctx context.Context) KibanaSpecHttpServiceOutput {
	return o
}

func (o KibanaSpecHttpServiceOutput) ToKibanaSpecHttpServicePtrOutput() KibanaSpecHttpServicePtrOutput {
	return o.ToKibanaSpecHttpServicePtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpServiceOutput) ToKibanaSpecHttpServicePtrOutputWithContext(ctx context.Context) KibanaSpecHttpServicePtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpService) *KibanaSpecHttpService {
		return &v
	}).(KibanaSpecHttpServicePtrOutput)
}

// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
func (o KibanaSpecHttpServiceOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v KibanaSpecHttpService) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// Spec is the specification of the service.
func (o KibanaSpecHttpServiceOutput) Spec() KibanaSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpService) *KibanaSpecHttpServiceSpec { return v.Spec }).(KibanaSpecHttpServiceSpecPtrOutput)
}

type KibanaSpecHttpServicePtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpService)(nil)).Elem()
}

func (o KibanaSpecHttpServicePtrOutput) ToKibanaSpecHttpServicePtrOutput() KibanaSpecHttpServicePtrOutput {
	return o
}

func (o KibanaSpecHttpServicePtrOutput) ToKibanaSpecHttpServicePtrOutputWithContext(ctx context.Context) KibanaSpecHttpServicePtrOutput {
	return o
}

func (o KibanaSpecHttpServicePtrOutput) Elem() KibanaSpecHttpServiceOutput {
	return o.ApplyT(func(v *KibanaSpecHttpService) KibanaSpecHttpService { return *v }).(KibanaSpecHttpServiceOutput)
}

// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
func (o KibanaSpecHttpServicePtrOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *KibanaSpecHttpService) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.MapOutput)
}

// Spec is the specification of the service.
func (o KibanaSpecHttpServicePtrOutput) Spec() KibanaSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpService) *KibanaSpecHttpServiceSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(KibanaSpecHttpServiceSpecPtrOutput)
}

// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
type KibanaSpecHttpServiceMetadata struct {
}

// KibanaSpecHttpServiceMetadataInput is an input type that accepts KibanaSpecHttpServiceMetadataArgs and KibanaSpecHttpServiceMetadataOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceMetadataInput` via:
//
//          KibanaSpecHttpServiceMetadataArgs{...}
type KibanaSpecHttpServiceMetadataInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceMetadataOutput() KibanaSpecHttpServiceMetadataOutput
	ToKibanaSpecHttpServiceMetadataOutputWithContext(context.Context) KibanaSpecHttpServiceMetadataOutput
}

// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
type KibanaSpecHttpServiceMetadataArgs struct {
}

func (KibanaSpecHttpServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceMetadata)(nil)).Elem()
}

func (i KibanaSpecHttpServiceMetadataArgs) ToKibanaSpecHttpServiceMetadataOutput() KibanaSpecHttpServiceMetadataOutput {
	return i.ToKibanaSpecHttpServiceMetadataOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceMetadataArgs) ToKibanaSpecHttpServiceMetadataOutputWithContext(ctx context.Context) KibanaSpecHttpServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceMetadataOutput)
}

// ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
type KibanaSpecHttpServiceMetadataOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceMetadata)(nil)).Elem()
}

func (o KibanaSpecHttpServiceMetadataOutput) ToKibanaSpecHttpServiceMetadataOutput() KibanaSpecHttpServiceMetadataOutput {
	return o
}

func (o KibanaSpecHttpServiceMetadataOutput) ToKibanaSpecHttpServiceMetadataOutputWithContext(ctx context.Context) KibanaSpecHttpServiceMetadataOutput {
	return o
}

// Spec is the specification of the service.
type KibanaSpecHttpServiceSpec struct {
	// clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
	IpFamily *string `pulumi:"ipFamily"`
	// Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []KibanaSpecHttpServiceSpecPorts `pulumi:"ports"`
	// publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig *KibanaSpecHttpServiceSpecSessionAffinityConfig `pulumi:"sessionAffinityConfig"`
	// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
	TopologyKeys []string `pulumi:"topologyKeys"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// KibanaSpecHttpServiceSpecInput is an input type that accepts KibanaSpecHttpServiceSpecArgs and KibanaSpecHttpServiceSpecOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecInput` via:
//
//          KibanaSpecHttpServiceSpecArgs{...}
type KibanaSpecHttpServiceSpecInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecOutput() KibanaSpecHttpServiceSpecOutput
	ToKibanaSpecHttpServiceSpecOutputWithContext(context.Context) KibanaSpecHttpServiceSpecOutput
}

// Spec is the specification of the service.
type KibanaSpecHttpServiceSpecArgs struct {
	// clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
	IpFamily pulumi.StringPtrInput `pulumi:"ipFamily"`
	// Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports KibanaSpecHttpServiceSpecPortsArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity pulumi.StringPtrInput `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig KibanaSpecHttpServiceSpecSessionAffinityConfigPtrInput `pulumi:"sessionAffinityConfig"`
	// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
	TopologyKeys pulumi.StringArrayInput `pulumi:"topologyKeys"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KibanaSpecHttpServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpec)(nil)).Elem()
}

func (i KibanaSpecHttpServiceSpecArgs) ToKibanaSpecHttpServiceSpecOutput() KibanaSpecHttpServiceSpecOutput {
	return i.ToKibanaSpecHttpServiceSpecOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecArgs) ToKibanaSpecHttpServiceSpecOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecOutput)
}

func (i KibanaSpecHttpServiceSpecArgs) ToKibanaSpecHttpServiceSpecPtrOutput() KibanaSpecHttpServiceSpecPtrOutput {
	return i.ToKibanaSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecArgs) ToKibanaSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecOutput).ToKibanaSpecHttpServiceSpecPtrOutputWithContext(ctx)
}

// KibanaSpecHttpServiceSpecPtrInput is an input type that accepts KibanaSpecHttpServiceSpecArgs, KibanaSpecHttpServiceSpecPtr and KibanaSpecHttpServiceSpecPtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecPtrInput` via:
//
//          KibanaSpecHttpServiceSpecArgs{...}
//
//  or:
//
//          nil
type KibanaSpecHttpServiceSpecPtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecPtrOutput() KibanaSpecHttpServiceSpecPtrOutput
	ToKibanaSpecHttpServiceSpecPtrOutputWithContext(context.Context) KibanaSpecHttpServiceSpecPtrOutput
}

type kibanaSpecHttpServiceSpecPtrType KibanaSpecHttpServiceSpecArgs

func KibanaSpecHttpServiceSpecPtr(v *KibanaSpecHttpServiceSpecArgs) KibanaSpecHttpServiceSpecPtrInput {
	return (*kibanaSpecHttpServiceSpecPtrType)(v)
}

func (*kibanaSpecHttpServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpServiceSpec)(nil)).Elem()
}

func (i *kibanaSpecHttpServiceSpecPtrType) ToKibanaSpecHttpServiceSpecPtrOutput() KibanaSpecHttpServiceSpecPtrOutput {
	return i.ToKibanaSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpServiceSpecPtrType) ToKibanaSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecPtrOutput)
}

// Spec is the specification of the service.
type KibanaSpecHttpServiceSpecOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpec)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecOutput) ToKibanaSpecHttpServiceSpecOutput() KibanaSpecHttpServiceSpecOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecOutput) ToKibanaSpecHttpServiceSpecOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecOutput) ToKibanaSpecHttpServiceSpecPtrOutput() KibanaSpecHttpServiceSpecPtrOutput {
	return o.ToKibanaSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpServiceSpecOutput) ToKibanaSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *KibanaSpecHttpServiceSpec {
		return &v
	}).(KibanaSpecHttpServiceSpecPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o KibanaSpecHttpServiceSpecOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
func (o KibanaSpecHttpServiceSpecOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
func (o KibanaSpecHttpServiceSpecOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
func (o KibanaSpecHttpServiceSpecOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
func (o KibanaSpecHttpServiceSpecOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
func (o KibanaSpecHttpServiceSpecOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.IpFamily }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
func (o KibanaSpecHttpServiceSpecOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
func (o KibanaSpecHttpServiceSpecOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o KibanaSpecHttpServiceSpecOutput) Ports() KibanaSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) []KibanaSpecHttpServiceSpecPorts { return v.Ports }).(KibanaSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
func (o KibanaSpecHttpServiceSpecOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o KibanaSpecHttpServiceSpecOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o KibanaSpecHttpServiceSpecOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o KibanaSpecHttpServiceSpecOutput) SessionAffinityConfig() KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *KibanaSpecHttpServiceSpecSessionAffinityConfig {
		return v.SessionAffinityConfig
	}).(KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
func (o KibanaSpecHttpServiceSpecOutput) TopologyKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) []string { return v.TopologyKeys }).(pulumi.StringArrayOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o KibanaSpecHttpServiceSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KibanaSpecHttpServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpServiceSpec)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecPtrOutput) ToKibanaSpecHttpServiceSpecPtrOutput() KibanaSpecHttpServiceSpecPtrOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecPtrOutput) ToKibanaSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPtrOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecPtrOutput) Elem() KibanaSpecHttpServiceSpecOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) KibanaSpecHttpServiceSpec { return *v }).(KibanaSpecHttpServiceSpecOutput)
}

// clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o KibanaSpecHttpServiceSpecPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
func (o KibanaSpecHttpServiceSpecPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
func (o KibanaSpecHttpServiceSpecPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
func (o KibanaSpecHttpServiceSpecPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
func (o KibanaSpecHttpServiceSpecPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
func (o KibanaSpecHttpServiceSpecPtrOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.IpFamily
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
func (o KibanaSpecHttpServiceSpecPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
func (o KibanaSpecHttpServiceSpecPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o KibanaSpecHttpServiceSpecPtrOutput) Ports() KibanaSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) []KibanaSpecHttpServiceSpecPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(KibanaSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
func (o KibanaSpecHttpServiceSpecPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o KibanaSpecHttpServiceSpecPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o KibanaSpecHttpServiceSpecPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o KibanaSpecHttpServiceSpecPtrOutput) SessionAffinityConfig() KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *KibanaSpecHttpServiceSpecSessionAffinityConfig {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
func (o KibanaSpecHttpServiceSpecPtrOutput) TopologyKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.TopologyKeys
	}).(pulumi.StringArrayOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o KibanaSpecHttpServiceSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ServicePort contains information on service's port.
type KibanaSpecHttpServiceSpecPorts struct {
	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort *KibanaSpecHttpServiceSpecPortsTargetPort `pulumi:"targetPort"`
}

// KibanaSpecHttpServiceSpecPortsInput is an input type that accepts KibanaSpecHttpServiceSpecPortsArgs and KibanaSpecHttpServiceSpecPortsOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecPortsInput` via:
//
//          KibanaSpecHttpServiceSpecPortsArgs{...}
type KibanaSpecHttpServiceSpecPortsInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecPortsOutput() KibanaSpecHttpServiceSpecPortsOutput
	ToKibanaSpecHttpServiceSpecPortsOutputWithContext(context.Context) KibanaSpecHttpServiceSpecPortsOutput
}

// ServicePort contains information on service's port.
type KibanaSpecHttpServiceSpecPortsArgs struct {
	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort KibanaSpecHttpServiceSpecPortsTargetPortPtrInput `pulumi:"targetPort"`
}

func (KibanaSpecHttpServiceSpecPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i KibanaSpecHttpServiceSpecPortsArgs) ToKibanaSpecHttpServiceSpecPortsOutput() KibanaSpecHttpServiceSpecPortsOutput {
	return i.ToKibanaSpecHttpServiceSpecPortsOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecPortsArgs) ToKibanaSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecPortsOutput)
}

// KibanaSpecHttpServiceSpecPortsArrayInput is an input type that accepts KibanaSpecHttpServiceSpecPortsArray and KibanaSpecHttpServiceSpecPortsArrayOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecPortsArrayInput` via:
//
//          KibanaSpecHttpServiceSpecPortsArray{ KibanaSpecHttpServiceSpecPortsArgs{...} }
type KibanaSpecHttpServiceSpecPortsArrayInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecPortsArrayOutput() KibanaSpecHttpServiceSpecPortsArrayOutput
	ToKibanaSpecHttpServiceSpecPortsArrayOutputWithContext(context.Context) KibanaSpecHttpServiceSpecPortsArrayOutput
}

type KibanaSpecHttpServiceSpecPortsArray []KibanaSpecHttpServiceSpecPortsInput

func (KibanaSpecHttpServiceSpecPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i KibanaSpecHttpServiceSpecPortsArray) ToKibanaSpecHttpServiceSpecPortsArrayOutput() KibanaSpecHttpServiceSpecPortsArrayOutput {
	return i.ToKibanaSpecHttpServiceSpecPortsArrayOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecPortsArray) ToKibanaSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecPortsArrayOutput)
}

// ServicePort contains information on service's port.
type KibanaSpecHttpServiceSpecPortsOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecPortsOutput) ToKibanaSpecHttpServiceSpecPortsOutput() KibanaSpecHttpServiceSpecPortsOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecPortsOutput) ToKibanaSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPortsOutput {
	return o
}

// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
func (o KibanaSpecHttpServiceSpecPortsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecPorts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o KibanaSpecHttpServiceSpecPortsOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecPorts) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o KibanaSpecHttpServiceSpecPortsOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecPorts) int { return v.Port }).(pulumi.IntOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
func (o KibanaSpecHttpServiceSpecPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o KibanaSpecHttpServiceSpecPortsOutput) TargetPort() KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecPorts) *KibanaSpecHttpServiceSpecPortsTargetPort { return v.TargetPort }).(KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput)
}

type KibanaSpecHttpServiceSpecPortsArrayOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecPortsArrayOutput) ToKibanaSpecHttpServiceSpecPortsArrayOutput() KibanaSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecPortsArrayOutput) ToKibanaSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecPortsArrayOutput) Index(i pulumi.IntInput) KibanaSpecHttpServiceSpecPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KibanaSpecHttpServiceSpecPorts {
		return vs[0].([]KibanaSpecHttpServiceSpecPorts)[vs[1].(int)]
	}).(KibanaSpecHttpServiceSpecPortsOutput)
}

type KibanaSpecHttpServiceSpecPortsTargetPort struct {
}

// KibanaSpecHttpServiceSpecPortsTargetPortInput is an input type that accepts KibanaSpecHttpServiceSpecPortsTargetPortArgs and KibanaSpecHttpServiceSpecPortsTargetPortOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecPortsTargetPortInput` via:
//
//          KibanaSpecHttpServiceSpecPortsTargetPortArgs{...}
type KibanaSpecHttpServiceSpecPortsTargetPortInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecPortsTargetPortOutput() KibanaSpecHttpServiceSpecPortsTargetPortOutput
	ToKibanaSpecHttpServiceSpecPortsTargetPortOutputWithContext(context.Context) KibanaSpecHttpServiceSpecPortsTargetPortOutput
}

type KibanaSpecHttpServiceSpecPortsTargetPortArgs struct {
}

func (KibanaSpecHttpServiceSpecPortsTargetPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpecPortsTargetPort)(nil)).Elem()
}

func (i KibanaSpecHttpServiceSpecPortsTargetPortArgs) ToKibanaSpecHttpServiceSpecPortsTargetPortOutput() KibanaSpecHttpServiceSpecPortsTargetPortOutput {
	return i.ToKibanaSpecHttpServiceSpecPortsTargetPortOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecPortsTargetPortArgs) ToKibanaSpecHttpServiceSpecPortsTargetPortOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPortsTargetPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecPortsTargetPortOutput)
}

func (i KibanaSpecHttpServiceSpecPortsTargetPortArgs) ToKibanaSpecHttpServiceSpecPortsTargetPortPtrOutput() KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return i.ToKibanaSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecPortsTargetPortArgs) ToKibanaSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecPortsTargetPortOutput).ToKibanaSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(ctx)
}

// KibanaSpecHttpServiceSpecPortsTargetPortPtrInput is an input type that accepts KibanaSpecHttpServiceSpecPortsTargetPortArgs, KibanaSpecHttpServiceSpecPortsTargetPortPtr and KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecPortsTargetPortPtrInput` via:
//
//          KibanaSpecHttpServiceSpecPortsTargetPortArgs{...}
//
//  or:
//
//          nil
type KibanaSpecHttpServiceSpecPortsTargetPortPtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecPortsTargetPortPtrOutput() KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput
	ToKibanaSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(context.Context) KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput
}

type kibanaSpecHttpServiceSpecPortsTargetPortPtrType KibanaSpecHttpServiceSpecPortsTargetPortArgs

func KibanaSpecHttpServiceSpecPortsTargetPortPtr(v *KibanaSpecHttpServiceSpecPortsTargetPortArgs) KibanaSpecHttpServiceSpecPortsTargetPortPtrInput {
	return (*kibanaSpecHttpServiceSpecPortsTargetPortPtrType)(v)
}

func (*kibanaSpecHttpServiceSpecPortsTargetPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpServiceSpecPortsTargetPort)(nil)).Elem()
}

func (i *kibanaSpecHttpServiceSpecPortsTargetPortPtrType) ToKibanaSpecHttpServiceSpecPortsTargetPortPtrOutput() KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return i.ToKibanaSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpServiceSpecPortsTargetPortPtrType) ToKibanaSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput)
}

type KibanaSpecHttpServiceSpecPortsTargetPortOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecPortsTargetPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpecPortsTargetPort)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecPortsTargetPortOutput) ToKibanaSpecHttpServiceSpecPortsTargetPortOutput() KibanaSpecHttpServiceSpecPortsTargetPortOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecPortsTargetPortOutput) ToKibanaSpecHttpServiceSpecPortsTargetPortOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPortsTargetPortOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecPortsTargetPortOutput) ToKibanaSpecHttpServiceSpecPortsTargetPortPtrOutput() KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return o.ToKibanaSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpServiceSpecPortsTargetPortOutput) ToKibanaSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecPortsTargetPort) *KibanaSpecHttpServiceSpecPortsTargetPort {
		return &v
	}).(KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput)
}

type KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpServiceSpecPortsTargetPort)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput) ToKibanaSpecHttpServiceSpecPortsTargetPortPtrOutput() KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput) ToKibanaSpecHttpServiceSpecPortsTargetPortPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput) Elem() KibanaSpecHttpServiceSpecPortsTargetPortOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpecPortsTargetPort) KibanaSpecHttpServiceSpecPortsTargetPort { return *v }).(KibanaSpecHttpServiceSpecPortsTargetPortOutput)
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
type KibanaSpecHttpServiceSpecSelector struct {
}

// KibanaSpecHttpServiceSpecSelectorInput is an input type that accepts KibanaSpecHttpServiceSpecSelectorArgs and KibanaSpecHttpServiceSpecSelectorOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecSelectorInput` via:
//
//          KibanaSpecHttpServiceSpecSelectorArgs{...}
type KibanaSpecHttpServiceSpecSelectorInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecSelectorOutput() KibanaSpecHttpServiceSpecSelectorOutput
	ToKibanaSpecHttpServiceSpecSelectorOutputWithContext(context.Context) KibanaSpecHttpServiceSpecSelectorOutput
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
type KibanaSpecHttpServiceSpecSelectorArgs struct {
}

func (KibanaSpecHttpServiceSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpecSelector)(nil)).Elem()
}

func (i KibanaSpecHttpServiceSpecSelectorArgs) ToKibanaSpecHttpServiceSpecSelectorOutput() KibanaSpecHttpServiceSpecSelectorOutput {
	return i.ToKibanaSpecHttpServiceSpecSelectorOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecSelectorArgs) ToKibanaSpecHttpServiceSpecSelectorOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecSelectorOutput)
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
type KibanaSpecHttpServiceSpecSelectorOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpecSelector)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecSelectorOutput) ToKibanaSpecHttpServiceSpecSelectorOutput() KibanaSpecHttpServiceSpecSelectorOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSelectorOutput) ToKibanaSpecHttpServiceSpecSelectorOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSelectorOutput {
	return o
}

// sessionAffinityConfig contains the configurations of session affinity.
type KibanaSpecHttpServiceSpecSessionAffinityConfig struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP *KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP `pulumi:"clientIP"`
}

// KibanaSpecHttpServiceSpecSessionAffinityConfigInput is an input type that accepts KibanaSpecHttpServiceSpecSessionAffinityConfigArgs and KibanaSpecHttpServiceSpecSessionAffinityConfigOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecSessionAffinityConfigInput` via:
//
//          KibanaSpecHttpServiceSpecSessionAffinityConfigArgs{...}
type KibanaSpecHttpServiceSpecSessionAffinityConfigInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecSessionAffinityConfigOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigOutput
	ToKibanaSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigOutput
}

// sessionAffinityConfig contains the configurations of session affinity.
type KibanaSpecHttpServiceSpecSessionAffinityConfigArgs struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput `pulumi:"clientIP"`
}

func (KibanaSpecHttpServiceSpecSessionAffinityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i KibanaSpecHttpServiceSpecSessionAffinityConfigArgs) ToKibanaSpecHttpServiceSpecSessionAffinityConfigOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigOutput {
	return i.ToKibanaSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecSessionAffinityConfigArgs) ToKibanaSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecSessionAffinityConfigOutput)
}

func (i KibanaSpecHttpServiceSpecSessionAffinityConfigArgs) ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecSessionAffinityConfigArgs) ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecSessionAffinityConfigOutput).ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx)
}

// KibanaSpecHttpServiceSpecSessionAffinityConfigPtrInput is an input type that accepts KibanaSpecHttpServiceSpecSessionAffinityConfigArgs, KibanaSpecHttpServiceSpecSessionAffinityConfigPtr and KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecSessionAffinityConfigPtrInput` via:
//
//          KibanaSpecHttpServiceSpecSessionAffinityConfigArgs{...}
//
//  or:
//
//          nil
type KibanaSpecHttpServiceSpecSessionAffinityConfigPtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput
	ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput
}

type kibanaSpecHttpServiceSpecSessionAffinityConfigPtrType KibanaSpecHttpServiceSpecSessionAffinityConfigArgs

func KibanaSpecHttpServiceSpecSessionAffinityConfigPtr(v *KibanaSpecHttpServiceSpecSessionAffinityConfigArgs) KibanaSpecHttpServiceSpecSessionAffinityConfigPtrInput {
	return (*kibanaSpecHttpServiceSpecSessionAffinityConfigPtrType)(v)
}

func (*kibanaSpecHttpServiceSpecSessionAffinityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i *kibanaSpecHttpServiceSpecSessionAffinityConfigPtrType) ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpServiceSpecSessionAffinityConfigPtrType) ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type KibanaSpecHttpServiceSpecSessionAffinityConfigOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecSessionAffinityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecSessionAffinityConfig) *KibanaSpecHttpServiceSpecSessionAffinityConfig {
		return &v
	}).(KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o KibanaSpecHttpServiceSpecSessionAffinityConfigOutput) ClientIP() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecSessionAffinityConfig) *KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP {
		return v.ClientIP
	}).(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

type KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput) Elem() KibanaSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpecSessionAffinityConfig) KibanaSpecHttpServiceSpecSessionAffinityConfig {
		return *v
	}).(KibanaSpecHttpServiceSpecSessionAffinityConfigOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ClientIP() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpecSessionAffinityConfig) *KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPInput is an input type that accepts KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs and KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPInput` via:
//
//          KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs{...}
type KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput
	ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput
}

// clientIP contains the configurations of Client IP based session affinity.
type KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (i KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return i.ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput)
}

func (i KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return i.ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput).ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx)
}

// KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput is an input type that accepts KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs, KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtr and KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput` via:
//
//          KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs{...}
//
//  or:
//
//          nil
type KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput
	ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput
}

type kibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs

func KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtr(v *KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrInput {
	return (*kibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType)(v)
}

func (*kibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (i *kibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return i.ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrType) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP) *KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP {
		return &v
	}).(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) Elem() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP {
		return *v
	}).(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type KibanaSpecHttpTls struct {
	// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
	//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
	Certificate *KibanaSpecHttpTlsCertificate `pulumi:"certificate"`
	// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificate *KibanaSpecHttpTlsSelfSignedCertificate `pulumi:"selfSignedCertificate"`
}

// KibanaSpecHttpTlsInput is an input type that accepts KibanaSpecHttpTlsArgs and KibanaSpecHttpTlsOutput values.
// You can construct a concrete instance of `KibanaSpecHttpTlsInput` via:
//
//          KibanaSpecHttpTlsArgs{...}
type KibanaSpecHttpTlsInput interface {
	pulumi.Input

	ToKibanaSpecHttpTlsOutput() KibanaSpecHttpTlsOutput
	ToKibanaSpecHttpTlsOutputWithContext(context.Context) KibanaSpecHttpTlsOutput
}

// TLS defines options for configuring TLS for HTTP.
type KibanaSpecHttpTlsArgs struct {
	// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
	//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
	Certificate KibanaSpecHttpTlsCertificatePtrInput `pulumi:"certificate"`
	// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificate KibanaSpecHttpTlsSelfSignedCertificatePtrInput `pulumi:"selfSignedCertificate"`
}

func (KibanaSpecHttpTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpTls)(nil)).Elem()
}

func (i KibanaSpecHttpTlsArgs) ToKibanaSpecHttpTlsOutput() KibanaSpecHttpTlsOutput {
	return i.ToKibanaSpecHttpTlsOutputWithContext(context.Background())
}

func (i KibanaSpecHttpTlsArgs) ToKibanaSpecHttpTlsOutputWithContext(ctx context.Context) KibanaSpecHttpTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsOutput)
}

func (i KibanaSpecHttpTlsArgs) ToKibanaSpecHttpTlsPtrOutput() KibanaSpecHttpTlsPtrOutput {
	return i.ToKibanaSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpTlsArgs) ToKibanaSpecHttpTlsPtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsOutput).ToKibanaSpecHttpTlsPtrOutputWithContext(ctx)
}

// KibanaSpecHttpTlsPtrInput is an input type that accepts KibanaSpecHttpTlsArgs, KibanaSpecHttpTlsPtr and KibanaSpecHttpTlsPtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpTlsPtrInput` via:
//
//          KibanaSpecHttpTlsArgs{...}
//
//  or:
//
//          nil
type KibanaSpecHttpTlsPtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpTlsPtrOutput() KibanaSpecHttpTlsPtrOutput
	ToKibanaSpecHttpTlsPtrOutputWithContext(context.Context) KibanaSpecHttpTlsPtrOutput
}

type kibanaSpecHttpTlsPtrType KibanaSpecHttpTlsArgs

func KibanaSpecHttpTlsPtr(v *KibanaSpecHttpTlsArgs) KibanaSpecHttpTlsPtrInput {
	return (*kibanaSpecHttpTlsPtrType)(v)
}

func (*kibanaSpecHttpTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpTls)(nil)).Elem()
}

func (i *kibanaSpecHttpTlsPtrType) ToKibanaSpecHttpTlsPtrOutput() KibanaSpecHttpTlsPtrOutput {
	return i.ToKibanaSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpTlsPtrType) ToKibanaSpecHttpTlsPtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type KibanaSpecHttpTlsOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpTls)(nil)).Elem()
}

func (o KibanaSpecHttpTlsOutput) ToKibanaSpecHttpTlsOutput() KibanaSpecHttpTlsOutput {
	return o
}

func (o KibanaSpecHttpTlsOutput) ToKibanaSpecHttpTlsOutputWithContext(ctx context.Context) KibanaSpecHttpTlsOutput {
	return o
}

func (o KibanaSpecHttpTlsOutput) ToKibanaSpecHttpTlsPtrOutput() KibanaSpecHttpTlsPtrOutput {
	return o.ToKibanaSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpTlsOutput) ToKibanaSpecHttpTlsPtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpTls) *KibanaSpecHttpTls {
		return &v
	}).(KibanaSpecHttpTlsPtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
func (o KibanaSpecHttpTlsOutput) Certificate() KibanaSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpTls) *KibanaSpecHttpTlsCertificate { return v.Certificate }).(KibanaSpecHttpTlsCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
func (o KibanaSpecHttpTlsOutput) SelfSignedCertificate() KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpTls) *KibanaSpecHttpTlsSelfSignedCertificate { return v.SelfSignedCertificate }).(KibanaSpecHttpTlsSelfSignedCertificatePtrOutput)
}

type KibanaSpecHttpTlsPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpTls)(nil)).Elem()
}

func (o KibanaSpecHttpTlsPtrOutput) ToKibanaSpecHttpTlsPtrOutput() KibanaSpecHttpTlsPtrOutput {
	return o
}

func (o KibanaSpecHttpTlsPtrOutput) ToKibanaSpecHttpTlsPtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsPtrOutput {
	return o
}

func (o KibanaSpecHttpTlsPtrOutput) Elem() KibanaSpecHttpTlsOutput {
	return o.ApplyT(func(v *KibanaSpecHttpTls) KibanaSpecHttpTls { return *v }).(KibanaSpecHttpTlsOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
func (o KibanaSpecHttpTlsPtrOutput) Certificate() KibanaSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpTls) *KibanaSpecHttpTlsCertificate {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(KibanaSpecHttpTlsCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
func (o KibanaSpecHttpTlsPtrOutput) SelfSignedCertificate() KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpTls) *KibanaSpecHttpTlsSelfSignedCertificate {
		if v == nil {
			return nil
		}
		return v.SelfSignedCertificate
	}).(KibanaSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
type KibanaSpecHttpTlsCertificate struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// KibanaSpecHttpTlsCertificateInput is an input type that accepts KibanaSpecHttpTlsCertificateArgs and KibanaSpecHttpTlsCertificateOutput values.
// You can construct a concrete instance of `KibanaSpecHttpTlsCertificateInput` via:
//
//          KibanaSpecHttpTlsCertificateArgs{...}
type KibanaSpecHttpTlsCertificateInput interface {
	pulumi.Input

	ToKibanaSpecHttpTlsCertificateOutput() KibanaSpecHttpTlsCertificateOutput
	ToKibanaSpecHttpTlsCertificateOutputWithContext(context.Context) KibanaSpecHttpTlsCertificateOutput
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
type KibanaSpecHttpTlsCertificateArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (KibanaSpecHttpTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpTlsCertificate)(nil)).Elem()
}

func (i KibanaSpecHttpTlsCertificateArgs) ToKibanaSpecHttpTlsCertificateOutput() KibanaSpecHttpTlsCertificateOutput {
	return i.ToKibanaSpecHttpTlsCertificateOutputWithContext(context.Background())
}

func (i KibanaSpecHttpTlsCertificateArgs) ToKibanaSpecHttpTlsCertificateOutputWithContext(ctx context.Context) KibanaSpecHttpTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsCertificateOutput)
}

func (i KibanaSpecHttpTlsCertificateArgs) ToKibanaSpecHttpTlsCertificatePtrOutput() KibanaSpecHttpTlsCertificatePtrOutput {
	return i.ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpTlsCertificateArgs) ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsCertificateOutput).ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(ctx)
}

// KibanaSpecHttpTlsCertificatePtrInput is an input type that accepts KibanaSpecHttpTlsCertificateArgs, KibanaSpecHttpTlsCertificatePtr and KibanaSpecHttpTlsCertificatePtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpTlsCertificatePtrInput` via:
//
//          KibanaSpecHttpTlsCertificateArgs{...}
//
//  or:
//
//          nil
type KibanaSpecHttpTlsCertificatePtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpTlsCertificatePtrOutput() KibanaSpecHttpTlsCertificatePtrOutput
	ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(context.Context) KibanaSpecHttpTlsCertificatePtrOutput
}

type kibanaSpecHttpTlsCertificatePtrType KibanaSpecHttpTlsCertificateArgs

func KibanaSpecHttpTlsCertificatePtr(v *KibanaSpecHttpTlsCertificateArgs) KibanaSpecHttpTlsCertificatePtrInput {
	return (*kibanaSpecHttpTlsCertificatePtrType)(v)
}

func (*kibanaSpecHttpTlsCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpTlsCertificate)(nil)).Elem()
}

func (i *kibanaSpecHttpTlsCertificatePtrType) ToKibanaSpecHttpTlsCertificatePtrOutput() KibanaSpecHttpTlsCertificatePtrOutput {
	return i.ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpTlsCertificatePtrType) ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following:
//  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
type KibanaSpecHttpTlsCertificateOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpTlsCertificate)(nil)).Elem()
}

func (o KibanaSpecHttpTlsCertificateOutput) ToKibanaSpecHttpTlsCertificateOutput() KibanaSpecHttpTlsCertificateOutput {
	return o
}

func (o KibanaSpecHttpTlsCertificateOutput) ToKibanaSpecHttpTlsCertificateOutputWithContext(ctx context.Context) KibanaSpecHttpTlsCertificateOutput {
	return o
}

func (o KibanaSpecHttpTlsCertificateOutput) ToKibanaSpecHttpTlsCertificatePtrOutput() KibanaSpecHttpTlsCertificatePtrOutput {
	return o.ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpTlsCertificateOutput) ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpTlsCertificate) *KibanaSpecHttpTlsCertificate {
		return &v
	}).(KibanaSpecHttpTlsCertificatePtrOutput)
}

// SecretName is the name of the secret.
func (o KibanaSpecHttpTlsCertificateOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpTlsCertificate) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type KibanaSpecHttpTlsCertificatePtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpTlsCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpTlsCertificate)(nil)).Elem()
}

func (o KibanaSpecHttpTlsCertificatePtrOutput) ToKibanaSpecHttpTlsCertificatePtrOutput() KibanaSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o KibanaSpecHttpTlsCertificatePtrOutput) ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o KibanaSpecHttpTlsCertificatePtrOutput) Elem() KibanaSpecHttpTlsCertificateOutput {
	return o.ApplyT(func(v *KibanaSpecHttpTlsCertificate) KibanaSpecHttpTlsCertificate { return *v }).(KibanaSpecHttpTlsCertificateOutput)
}

// SecretName is the name of the secret.
func (o KibanaSpecHttpTlsCertificatePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpTlsCertificate) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type KibanaSpecHttpTlsSelfSignedCertificate struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled *bool `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames []KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames `pulumi:"subjectAltNames"`
}

// KibanaSpecHttpTlsSelfSignedCertificateInput is an input type that accepts KibanaSpecHttpTlsSelfSignedCertificateArgs and KibanaSpecHttpTlsSelfSignedCertificateOutput values.
// You can construct a concrete instance of `KibanaSpecHttpTlsSelfSignedCertificateInput` via:
//
//          KibanaSpecHttpTlsSelfSignedCertificateArgs{...}
type KibanaSpecHttpTlsSelfSignedCertificateInput interface {
	pulumi.Input

	ToKibanaSpecHttpTlsSelfSignedCertificateOutput() KibanaSpecHttpTlsSelfSignedCertificateOutput
	ToKibanaSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Context) KibanaSpecHttpTlsSelfSignedCertificateOutput
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type KibanaSpecHttpTlsSelfSignedCertificateArgs struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput `pulumi:"subjectAltNames"`
}

func (KibanaSpecHttpTlsSelfSignedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i KibanaSpecHttpTlsSelfSignedCertificateArgs) ToKibanaSpecHttpTlsSelfSignedCertificateOutput() KibanaSpecHttpTlsSelfSignedCertificateOutput {
	return i.ToKibanaSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Background())
}

func (i KibanaSpecHttpTlsSelfSignedCertificateArgs) ToKibanaSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsSelfSignedCertificateOutput)
}

func (i KibanaSpecHttpTlsSelfSignedCertificateArgs) ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutput() KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpTlsSelfSignedCertificateArgs) ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsSelfSignedCertificateOutput).ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx)
}

// KibanaSpecHttpTlsSelfSignedCertificatePtrInput is an input type that accepts KibanaSpecHttpTlsSelfSignedCertificateArgs, KibanaSpecHttpTlsSelfSignedCertificatePtr and KibanaSpecHttpTlsSelfSignedCertificatePtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpTlsSelfSignedCertificatePtrInput` via:
//
//          KibanaSpecHttpTlsSelfSignedCertificateArgs{...}
//
//  or:
//
//          nil
type KibanaSpecHttpTlsSelfSignedCertificatePtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutput() KibanaSpecHttpTlsSelfSignedCertificatePtrOutput
	ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Context) KibanaSpecHttpTlsSelfSignedCertificatePtrOutput
}

type kibanaSpecHttpTlsSelfSignedCertificatePtrType KibanaSpecHttpTlsSelfSignedCertificateArgs

func KibanaSpecHttpTlsSelfSignedCertificatePtr(v *KibanaSpecHttpTlsSelfSignedCertificateArgs) KibanaSpecHttpTlsSelfSignedCertificatePtrInput {
	return (*kibanaSpecHttpTlsSelfSignedCertificatePtrType)(v)
}

func (*kibanaSpecHttpTlsSelfSignedCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i *kibanaSpecHttpTlsSelfSignedCertificatePtrType) ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutput() KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpTlsSelfSignedCertificatePtrType) ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type KibanaSpecHttpTlsSelfSignedCertificateOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpTlsSelfSignedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o KibanaSpecHttpTlsSelfSignedCertificateOutput) ToKibanaSpecHttpTlsSelfSignedCertificateOutput() KibanaSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o KibanaSpecHttpTlsSelfSignedCertificateOutput) ToKibanaSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o KibanaSpecHttpTlsSelfSignedCertificateOutput) ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutput() KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpTlsSelfSignedCertificateOutput) ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpTlsSelfSignedCertificate) *KibanaSpecHttpTlsSelfSignedCertificate {
		return &v
	}).(KibanaSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o KibanaSpecHttpTlsSelfSignedCertificateOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpTlsSelfSignedCertificate) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o KibanaSpecHttpTlsSelfSignedCertificateOutput) SubjectAltNames() KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v KibanaSpecHttpTlsSelfSignedCertificate) []KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return v.SubjectAltNames
	}).(KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

type KibanaSpecHttpTlsSelfSignedCertificatePtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpTlsSelfSignedCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o KibanaSpecHttpTlsSelfSignedCertificatePtrOutput) ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutput() KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o KibanaSpecHttpTlsSelfSignedCertificatePtrOutput) ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o KibanaSpecHttpTlsSelfSignedCertificatePtrOutput) Elem() KibanaSpecHttpTlsSelfSignedCertificateOutput {
	return o.ApplyT(func(v *KibanaSpecHttpTlsSelfSignedCertificate) KibanaSpecHttpTlsSelfSignedCertificate { return *v }).(KibanaSpecHttpTlsSelfSignedCertificateOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o KibanaSpecHttpTlsSelfSignedCertificatePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpTlsSelfSignedCertificate) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o KibanaSpecHttpTlsSelfSignedCertificatePtrOutput) SubjectAltNames() KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v *KibanaSpecHttpTlsSelfSignedCertificate) []KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames struct {
	// DNS is the DNS name of the subject.
	Dns *string `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip *string `pulumi:"ip"`
}

// KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput is an input type that accepts KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs and KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput values.
// You can construct a concrete instance of `KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput` via:
//
//          KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...}
type KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput interface {
	pulumi.Input

	ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
	ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Context) KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs struct {
	// DNS is the DNS name of the subject.
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return i.ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Background())
}

func (i KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput is an input type that accepts KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray and KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput values.
// You can construct a concrete instance of `KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput` via:
//
//          KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{ KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...} }
type KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput interface {
	pulumi.Input

	ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
	ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Context) KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
}

type KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray []KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput

func (KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return i.ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Background())
}

func (i KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

func (o KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

// DNS is the DNS name of the subject.
func (o KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// IP is the IP address of the subject.
func (o KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) Index(i pulumi.IntInput) KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return vs[0].([]KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames)[vs[1].(int)]
	}).(KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
type KibanaSpecPodTemplate struct {
}

// KibanaSpecPodTemplateInput is an input type that accepts KibanaSpecPodTemplateArgs and KibanaSpecPodTemplateOutput values.
// You can construct a concrete instance of `KibanaSpecPodTemplateInput` via:
//
//          KibanaSpecPodTemplateArgs{...}
type KibanaSpecPodTemplateInput interface {
	pulumi.Input

	ToKibanaSpecPodTemplateOutput() KibanaSpecPodTemplateOutput
	ToKibanaSpecPodTemplateOutputWithContext(context.Context) KibanaSpecPodTemplateOutput
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
type KibanaSpecPodTemplateArgs struct {
}

func (KibanaSpecPodTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecPodTemplate)(nil)).Elem()
}

func (i KibanaSpecPodTemplateArgs) ToKibanaSpecPodTemplateOutput() KibanaSpecPodTemplateOutput {
	return i.ToKibanaSpecPodTemplateOutputWithContext(context.Background())
}

func (i KibanaSpecPodTemplateArgs) ToKibanaSpecPodTemplateOutputWithContext(ctx context.Context) KibanaSpecPodTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecPodTemplateOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
type KibanaSpecPodTemplateOutput struct{ *pulumi.OutputState }

func (KibanaSpecPodTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecPodTemplate)(nil)).Elem()
}

func (o KibanaSpecPodTemplateOutput) ToKibanaSpecPodTemplateOutput() KibanaSpecPodTemplateOutput {
	return o
}

func (o KibanaSpecPodTemplateOutput) ToKibanaSpecPodTemplateOutputWithContext(ctx context.Context) KibanaSpecPodTemplateOutput {
	return o
}

// SecretSource defines a data source based on a Kubernetes Secret.
type KibanaSpecSecureSettings struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
	Entries []KibanaSpecSecureSettingsEntries `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName string `pulumi:"secretName"`
}

// KibanaSpecSecureSettingsInput is an input type that accepts KibanaSpecSecureSettingsArgs and KibanaSpecSecureSettingsOutput values.
// You can construct a concrete instance of `KibanaSpecSecureSettingsInput` via:
//
//          KibanaSpecSecureSettingsArgs{...}
type KibanaSpecSecureSettingsInput interface {
	pulumi.Input

	ToKibanaSpecSecureSettingsOutput() KibanaSpecSecureSettingsOutput
	ToKibanaSpecSecureSettingsOutputWithContext(context.Context) KibanaSpecSecureSettingsOutput
}

// SecretSource defines a data source based on a Kubernetes Secret.
type KibanaSpecSecureSettingsArgs struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
	Entries KibanaSpecSecureSettingsEntriesArrayInput `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName pulumi.StringInput `pulumi:"secretName"`
}

func (KibanaSpecSecureSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecSecureSettings)(nil)).Elem()
}

func (i KibanaSpecSecureSettingsArgs) ToKibanaSpecSecureSettingsOutput() KibanaSpecSecureSettingsOutput {
	return i.ToKibanaSpecSecureSettingsOutputWithContext(context.Background())
}

func (i KibanaSpecSecureSettingsArgs) ToKibanaSpecSecureSettingsOutputWithContext(ctx context.Context) KibanaSpecSecureSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecSecureSettingsOutput)
}

// KibanaSpecSecureSettingsArrayInput is an input type that accepts KibanaSpecSecureSettingsArray and KibanaSpecSecureSettingsArrayOutput values.
// You can construct a concrete instance of `KibanaSpecSecureSettingsArrayInput` via:
//
//          KibanaSpecSecureSettingsArray{ KibanaSpecSecureSettingsArgs{...} }
type KibanaSpecSecureSettingsArrayInput interface {
	pulumi.Input

	ToKibanaSpecSecureSettingsArrayOutput() KibanaSpecSecureSettingsArrayOutput
	ToKibanaSpecSecureSettingsArrayOutputWithContext(context.Context) KibanaSpecSecureSettingsArrayOutput
}

type KibanaSpecSecureSettingsArray []KibanaSpecSecureSettingsInput

func (KibanaSpecSecureSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecSecureSettings)(nil)).Elem()
}

func (i KibanaSpecSecureSettingsArray) ToKibanaSpecSecureSettingsArrayOutput() KibanaSpecSecureSettingsArrayOutput {
	return i.ToKibanaSpecSecureSettingsArrayOutputWithContext(context.Background())
}

func (i KibanaSpecSecureSettingsArray) ToKibanaSpecSecureSettingsArrayOutputWithContext(ctx context.Context) KibanaSpecSecureSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecSecureSettingsArrayOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type KibanaSpecSecureSettingsOutput struct{ *pulumi.OutputState }

func (KibanaSpecSecureSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecSecureSettings)(nil)).Elem()
}

func (o KibanaSpecSecureSettingsOutput) ToKibanaSpecSecureSettingsOutput() KibanaSpecSecureSettingsOutput {
	return o
}

func (o KibanaSpecSecureSettingsOutput) ToKibanaSpecSecureSettingsOutputWithContext(ctx context.Context) KibanaSpecSecureSettingsOutput {
	return o
}

// Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
func (o KibanaSpecSecureSettingsOutput) Entries() KibanaSpecSecureSettingsEntriesArrayOutput {
	return o.ApplyT(func(v KibanaSpecSecureSettings) []KibanaSpecSecureSettingsEntries { return v.Entries }).(KibanaSpecSecureSettingsEntriesArrayOutput)
}

// SecretName is the name of the secret.
func (o KibanaSpecSecureSettingsOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v KibanaSpecSecureSettings) string { return v.SecretName }).(pulumi.StringOutput)
}

type KibanaSpecSecureSettingsArrayOutput struct{ *pulumi.OutputState }

func (KibanaSpecSecureSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecSecureSettings)(nil)).Elem()
}

func (o KibanaSpecSecureSettingsArrayOutput) ToKibanaSpecSecureSettingsArrayOutput() KibanaSpecSecureSettingsArrayOutput {
	return o
}

func (o KibanaSpecSecureSettingsArrayOutput) ToKibanaSpecSecureSettingsArrayOutputWithContext(ctx context.Context) KibanaSpecSecureSettingsArrayOutput {
	return o
}

func (o KibanaSpecSecureSettingsArrayOutput) Index(i pulumi.IntInput) KibanaSpecSecureSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KibanaSpecSecureSettings {
		return vs[0].([]KibanaSpecSecureSettings)[vs[1].(int)]
	}).(KibanaSpecSecureSettingsOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type KibanaSpecSecureSettingsEntries struct {
	// Key is the key contained in the secret.
	Key string `pulumi:"key"`
	// Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
	Path *string `pulumi:"path"`
}

// KibanaSpecSecureSettingsEntriesInput is an input type that accepts KibanaSpecSecureSettingsEntriesArgs and KibanaSpecSecureSettingsEntriesOutput values.
// You can construct a concrete instance of `KibanaSpecSecureSettingsEntriesInput` via:
//
//          KibanaSpecSecureSettingsEntriesArgs{...}
type KibanaSpecSecureSettingsEntriesInput interface {
	pulumi.Input

	ToKibanaSpecSecureSettingsEntriesOutput() KibanaSpecSecureSettingsEntriesOutput
	ToKibanaSpecSecureSettingsEntriesOutputWithContext(context.Context) KibanaSpecSecureSettingsEntriesOutput
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type KibanaSpecSecureSettingsEntriesArgs struct {
	// Key is the key contained in the secret.
	Key pulumi.StringInput `pulumi:"key"`
	// Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (KibanaSpecSecureSettingsEntriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecSecureSettingsEntries)(nil)).Elem()
}

func (i KibanaSpecSecureSettingsEntriesArgs) ToKibanaSpecSecureSettingsEntriesOutput() KibanaSpecSecureSettingsEntriesOutput {
	return i.ToKibanaSpecSecureSettingsEntriesOutputWithContext(context.Background())
}

func (i KibanaSpecSecureSettingsEntriesArgs) ToKibanaSpecSecureSettingsEntriesOutputWithContext(ctx context.Context) KibanaSpecSecureSettingsEntriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecSecureSettingsEntriesOutput)
}

// KibanaSpecSecureSettingsEntriesArrayInput is an input type that accepts KibanaSpecSecureSettingsEntriesArray and KibanaSpecSecureSettingsEntriesArrayOutput values.
// You can construct a concrete instance of `KibanaSpecSecureSettingsEntriesArrayInput` via:
//
//          KibanaSpecSecureSettingsEntriesArray{ KibanaSpecSecureSettingsEntriesArgs{...} }
type KibanaSpecSecureSettingsEntriesArrayInput interface {
	pulumi.Input

	ToKibanaSpecSecureSettingsEntriesArrayOutput() KibanaSpecSecureSettingsEntriesArrayOutput
	ToKibanaSpecSecureSettingsEntriesArrayOutputWithContext(context.Context) KibanaSpecSecureSettingsEntriesArrayOutput
}

type KibanaSpecSecureSettingsEntriesArray []KibanaSpecSecureSettingsEntriesInput

func (KibanaSpecSecureSettingsEntriesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecSecureSettingsEntries)(nil)).Elem()
}

func (i KibanaSpecSecureSettingsEntriesArray) ToKibanaSpecSecureSettingsEntriesArrayOutput() KibanaSpecSecureSettingsEntriesArrayOutput {
	return i.ToKibanaSpecSecureSettingsEntriesArrayOutputWithContext(context.Background())
}

func (i KibanaSpecSecureSettingsEntriesArray) ToKibanaSpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) KibanaSpecSecureSettingsEntriesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecSecureSettingsEntriesArrayOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type KibanaSpecSecureSettingsEntriesOutput struct{ *pulumi.OutputState }

func (KibanaSpecSecureSettingsEntriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecSecureSettingsEntries)(nil)).Elem()
}

func (o KibanaSpecSecureSettingsEntriesOutput) ToKibanaSpecSecureSettingsEntriesOutput() KibanaSpecSecureSettingsEntriesOutput {
	return o
}

func (o KibanaSpecSecureSettingsEntriesOutput) ToKibanaSpecSecureSettingsEntriesOutputWithContext(ctx context.Context) KibanaSpecSecureSettingsEntriesOutput {
	return o
}

// Key is the key contained in the secret.
func (o KibanaSpecSecureSettingsEntriesOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KibanaSpecSecureSettingsEntries) string { return v.Key }).(pulumi.StringOutput)
}

// Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
func (o KibanaSpecSecureSettingsEntriesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecSecureSettingsEntries) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type KibanaSpecSecureSettingsEntriesArrayOutput struct{ *pulumi.OutputState }

func (KibanaSpecSecureSettingsEntriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecSecureSettingsEntries)(nil)).Elem()
}

func (o KibanaSpecSecureSettingsEntriesArrayOutput) ToKibanaSpecSecureSettingsEntriesArrayOutput() KibanaSpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o KibanaSpecSecureSettingsEntriesArrayOutput) ToKibanaSpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) KibanaSpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o KibanaSpecSecureSettingsEntriesArrayOutput) Index(i pulumi.IntInput) KibanaSpecSecureSettingsEntriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KibanaSpecSecureSettingsEntries {
		return vs[0].([]KibanaSpecSecureSettingsEntries)[vs[1].(int)]
	}).(KibanaSpecSecureSettingsEntriesOutput)
}

// KibanaStatus defines the observed state of Kibana
type KibanaStatus struct {
	// AssociationStatus is the status of an association resource.
	AssociationStatus *string `pulumi:"associationStatus"`
	AvailableNodes    *int    `pulumi:"availableNodes"`
	// KibanaHealth expresses the status of the Kibana instances.
	Health *string `pulumi:"health"`
}

// KibanaStatusInput is an input type that accepts KibanaStatusArgs and KibanaStatusOutput values.
// You can construct a concrete instance of `KibanaStatusInput` via:
//
//          KibanaStatusArgs{...}
type KibanaStatusInput interface {
	pulumi.Input

	ToKibanaStatusOutput() KibanaStatusOutput
	ToKibanaStatusOutputWithContext(context.Context) KibanaStatusOutput
}

// KibanaStatus defines the observed state of Kibana
type KibanaStatusArgs struct {
	// AssociationStatus is the status of an association resource.
	AssociationStatus pulumi.StringPtrInput `pulumi:"associationStatus"`
	AvailableNodes    pulumi.IntPtrInput    `pulumi:"availableNodes"`
	// KibanaHealth expresses the status of the Kibana instances.
	Health pulumi.StringPtrInput `pulumi:"health"`
}

func (KibanaStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaStatus)(nil)).Elem()
}

func (i KibanaStatusArgs) ToKibanaStatusOutput() KibanaStatusOutput {
	return i.ToKibanaStatusOutputWithContext(context.Background())
}

func (i KibanaStatusArgs) ToKibanaStatusOutputWithContext(ctx context.Context) KibanaStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaStatusOutput)
}

func (i KibanaStatusArgs) ToKibanaStatusPtrOutput() KibanaStatusPtrOutput {
	return i.ToKibanaStatusPtrOutputWithContext(context.Background())
}

func (i KibanaStatusArgs) ToKibanaStatusPtrOutputWithContext(ctx context.Context) KibanaStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaStatusOutput).ToKibanaStatusPtrOutputWithContext(ctx)
}

// KibanaStatusPtrInput is an input type that accepts KibanaStatusArgs, KibanaStatusPtr and KibanaStatusPtrOutput values.
// You can construct a concrete instance of `KibanaStatusPtrInput` via:
//
//          KibanaStatusArgs{...}
//
//  or:
//
//          nil
type KibanaStatusPtrInput interface {
	pulumi.Input

	ToKibanaStatusPtrOutput() KibanaStatusPtrOutput
	ToKibanaStatusPtrOutputWithContext(context.Context) KibanaStatusPtrOutput
}

type kibanaStatusPtrType KibanaStatusArgs

func KibanaStatusPtr(v *KibanaStatusArgs) KibanaStatusPtrInput {
	return (*kibanaStatusPtrType)(v)
}

func (*kibanaStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaStatus)(nil)).Elem()
}

func (i *kibanaStatusPtrType) ToKibanaStatusPtrOutput() KibanaStatusPtrOutput {
	return i.ToKibanaStatusPtrOutputWithContext(context.Background())
}

func (i *kibanaStatusPtrType) ToKibanaStatusPtrOutputWithContext(ctx context.Context) KibanaStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaStatusPtrOutput)
}

// KibanaStatus defines the observed state of Kibana
type KibanaStatusOutput struct{ *pulumi.OutputState }

func (KibanaStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaStatus)(nil)).Elem()
}

func (o KibanaStatusOutput) ToKibanaStatusOutput() KibanaStatusOutput {
	return o
}

func (o KibanaStatusOutput) ToKibanaStatusOutputWithContext(ctx context.Context) KibanaStatusOutput {
	return o
}

func (o KibanaStatusOutput) ToKibanaStatusPtrOutput() KibanaStatusPtrOutput {
	return o.ToKibanaStatusPtrOutputWithContext(context.Background())
}

func (o KibanaStatusOutput) ToKibanaStatusPtrOutputWithContext(ctx context.Context) KibanaStatusPtrOutput {
	return o.ApplyT(func(v KibanaStatus) *KibanaStatus {
		return &v
	}).(KibanaStatusPtrOutput)
}

// AssociationStatus is the status of an association resource.
func (o KibanaStatusOutput) AssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaStatus) *string { return v.AssociationStatus }).(pulumi.StringPtrOutput)
}

func (o KibanaStatusOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KibanaStatus) *int { return v.AvailableNodes }).(pulumi.IntPtrOutput)
}

// KibanaHealth expresses the status of the Kibana instances.
func (o KibanaStatusOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaStatus) *string { return v.Health }).(pulumi.StringPtrOutput)
}

type KibanaStatusPtrOutput struct{ *pulumi.OutputState }

func (KibanaStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaStatus)(nil)).Elem()
}

func (o KibanaStatusPtrOutput) ToKibanaStatusPtrOutput() KibanaStatusPtrOutput {
	return o
}

func (o KibanaStatusPtrOutput) ToKibanaStatusPtrOutputWithContext(ctx context.Context) KibanaStatusPtrOutput {
	return o
}

func (o KibanaStatusPtrOutput) Elem() KibanaStatusOutput {
	return o.ApplyT(func(v *KibanaStatus) KibanaStatus { return *v }).(KibanaStatusOutput)
}

// AssociationStatus is the status of an association resource.
func (o KibanaStatusPtrOutput) AssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaStatus) *string {
		if v == nil {
			return nil
		}
		return v.AssociationStatus
	}).(pulumi.StringPtrOutput)
}

func (o KibanaStatusPtrOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KibanaStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableNodes
	}).(pulumi.IntPtrOutput)
}

// KibanaHealth expresses the status of the Kibana instances.
func (o KibanaStatusPtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaStatus) *string {
		if v == nil {
			return nil
		}
		return v.Health
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(KibanaTypeOutput{})
	pulumi.RegisterOutputType(KibanaMetadataOutput{})
	pulumi.RegisterOutputType(KibanaSpecOutput{})
	pulumi.RegisterOutputType(KibanaSpecPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecConfigOutput{})
	pulumi.RegisterOutputType(KibanaSpecElasticsearchRefOutput{})
	pulumi.RegisterOutputType(KibanaSpecElasticsearchRefPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServicePtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceMetadataOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecPortsOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecPortsArrayOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecPortsTargetPortOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecPortsTargetPortPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecSelectorOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecSessionAffinityConfigOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpTlsOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpTlsPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpTlsCertificateOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpTlsCertificatePtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpTlsSelfSignedCertificateOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpTlsSelfSignedCertificatePtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput{})
	pulumi.RegisterOutputType(KibanaSpecPodTemplateOutput{})
	pulumi.RegisterOutputType(KibanaSpecSecureSettingsOutput{})
	pulumi.RegisterOutputType(KibanaSpecSecureSettingsArrayOutput{})
	pulumi.RegisterOutputType(KibanaSpecSecureSettingsEntriesOutput{})
	pulumi.RegisterOutputType(KibanaSpecSecureSettingsEntriesArrayOutput{})
	pulumi.RegisterOutputType(KibanaStatusOutput{})
	pulumi.RegisterOutputType(KibanaStatusPtrOutput{})
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Elasticsearch represents an Elasticsearch resource in a Kubernetes cluster.
type Elasticsearch struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// ElasticsearchSpec holds the specification of an Elasticsearch cluster.
	Spec ElasticsearchSpecPtrOutput `pulumi:"spec"`
	// ElasticsearchStatus defines the observed state of Elasticsearch
	Status ElasticsearchStatusPtrOutput `pulumi:"status"`
}

// NewElasticsearch registers a new resource with the given unique name, arguments, and options.
func NewElasticsearch(ctx *pulumi.Context,
	name string, args *ElasticsearchArgs, opts ...pulumi.ResourceOption) (*Elasticsearch, error) {
	if args == nil {
		args = &ElasticsearchArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("elasticsearch.k8s.elastic.co/v1")
	args.Kind = pulumi.StringPtr("Elasticsearch")
	var resource Elasticsearch
	err := ctx.RegisterResource("kubernetes:elasticsearch.k8s.elastic.co/v1:Elasticsearch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearch gets an existing Elasticsearch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchState, opts ...pulumi.ResourceOption) (*Elasticsearch, error) {
	var resource Elasticsearch
	err := ctx.ReadResource("kubernetes:elasticsearch.k8s.elastic.co/v1:Elasticsearch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Elasticsearch resources.
type elasticsearchState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ElasticsearchSpec holds the specification of an Elasticsearch cluster.
	Spec *ElasticsearchSpec `pulumi:"spec"`
	// ElasticsearchStatus defines the observed state of Elasticsearch
	Status *ElasticsearchStatus `pulumi:"status"`
}

type ElasticsearchState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ElasticsearchSpec holds the specification of an Elasticsearch cluster.
	Spec ElasticsearchSpecPtrInput
	// ElasticsearchStatus defines the observed state of Elasticsearch
	Status ElasticsearchStatusPtrInput
}

func (ElasticsearchState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchState)(nil)).Elem()
}

type elasticsearchArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ElasticsearchSpec holds the specification of an Elasticsearch cluster.
	Spec *ElasticsearchSpec `pulumi:"spec"`
	// ElasticsearchStatus defines the observed state of Elasticsearch
	Status *ElasticsearchStatus `pulumi:"status"`
}

// The set of arguments for constructing a Elasticsearch resource.
type ElasticsearchArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ElasticsearchSpec holds the specification of an Elasticsearch cluster.
	Spec ElasticsearchSpecPtrInput
	// ElasticsearchStatus defines the observed state of Elasticsearch
	Status ElasticsearchStatusPtrInput
}

func (ElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchArgs)(nil)).Elem()
}

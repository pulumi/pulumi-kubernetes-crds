# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'KibanaSpec',
    'KibanaSpecElasticsearchRef',
    'KibanaSpecHttp',
    'KibanaSpecHttpService',
    'KibanaSpecHttpServiceSpec',
    'KibanaSpecHttpServiceSpecPorts',
    'KibanaSpecHttpServiceSpecPortsTargetPort',
    'KibanaSpecHttpServiceSpecSessionAffinityConfig',
    'KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP',
    'KibanaSpecHttpTls',
    'KibanaSpecHttpTlsCertificate',
    'KibanaSpecHttpTlsSelfSignedCertificate',
    'KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames',
    'KibanaSpecSecureSettings',
    'KibanaSpecSecureSettingsEntries',
    'KibanaStatus',
]

@pulumi.output_type
class KibanaSpec(dict):
    """
    KibanaSpec holds the specification of a Kibana instance.
    """
    def __init__(__self__, *,
                 version: str,
                 config: Optional[Mapping[str, Any]] = None,
                 count: Optional[int] = None,
                 elasticsearch_ref: Optional['outputs.KibanaSpecElasticsearchRef'] = None,
                 http: Optional['outputs.KibanaSpecHttp'] = None,
                 image: Optional[str] = None,
                 pod_template: Optional[Mapping[str, Any]] = None,
                 secure_settings: Optional[Sequence['outputs.KibanaSpecSecureSettings']] = None,
                 service_account_name: Optional[str] = None):
        """
        KibanaSpec holds the specification of a Kibana instance.
        :param str version: Version of Kibana.
        :param Mapping[str, Any] config: Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
        :param int count: Count of Kibana instances to deploy.
        :param 'KibanaSpecElasticsearchRefArgs' elasticsearch_ref: ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
        :param 'KibanaSpecHttpArgs' http: HTTP holds the HTTP layer configuration for Kibana.
        :param str image: Image is the Kibana Docker image to deploy.
        :param Mapping[str, Any] pod_template: PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
        :param Sequence['KibanaSpecSecureSettingsArgs'] secure_settings: SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
        :param str service_account_name: ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
        """
        pulumi.set(__self__, "version", version)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if elasticsearch_ref is not None:
            pulumi.set(__self__, "elasticsearch_ref", elasticsearch_ref)
        if http is not None:
            pulumi.set(__self__, "http", http)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if secure_settings is not None:
            pulumi.set(__self__, "secure_settings", secure_settings)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of Kibana.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, Any]]:
        """
        Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Count of Kibana instances to deploy.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="elasticsearchRef")
    def elasticsearch_ref(self) -> Optional['outputs.KibanaSpecElasticsearchRef']:
        """
        ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
        """
        return pulumi.get(self, "elasticsearch_ref")

    @property
    @pulumi.getter
    def http(self) -> Optional['outputs.KibanaSpecHttp']:
        """
        HTTP holds the HTTP layer configuration for Kibana.
        """
        return pulumi.get(self, "http")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Image is the Kibana Docker image to deploy.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(self) -> Optional[Mapping[str, Any]]:
        """
        PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
        """
        return pulumi.get(self, "pod_template")

    @property
    @pulumi.getter(name="secureSettings")
    def secure_settings(self) -> Optional[Sequence['outputs.KibanaSpecSecureSettings']]:
        """
        SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
        """
        return pulumi.get(self, "secure_settings")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
        """
        return pulumi.get(self, "service_account_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KibanaSpecElasticsearchRef(dict):
    """
    ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: Optional[str] = None):
        """
        ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
        :param str name: Name of the Kubernetes object.
        :param str namespace: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
        """
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Kubernetes object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the Kubernetes object. If empty, defaults to the current namespace.
        """
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KibanaSpecHttp(dict):
    """
    HTTP holds the HTTP layer configuration for Kibana.
    """
    def __init__(__self__, *,
                 service: Optional['outputs.KibanaSpecHttpService'] = None,
                 tls: Optional['outputs.KibanaSpecHttpTls'] = None):
        """
        HTTP holds the HTTP layer configuration for Kibana.
        :param 'KibanaSpecHttpServiceArgs' service: Service defines the template for the associated Kubernetes Service object.
        :param 'KibanaSpecHttpTlsArgs' tls: TLS defines options for configuring TLS for HTTP.
        """
        if service is not None:
            pulumi.set(__self__, "service", service)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.KibanaSpecHttpService']:
        """
        Service defines the template for the associated Kubernetes Service object.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.KibanaSpecHttpTls']:
        """
        TLS defines options for configuring TLS for HTTP.
        """
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KibanaSpecHttpService(dict):
    """
    Service defines the template for the associated Kubernetes Service object.
    """
    def __init__(__self__, *,
                 metadata: Optional[Mapping[str, Any]] = None,
                 spec: Optional['outputs.KibanaSpecHttpServiceSpec'] = None):
        """
        Service defines the template for the associated Kubernetes Service object.
        :param Mapping[str, Any] metadata: ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
        :param 'KibanaSpecHttpServiceSpecArgs' spec: Spec is the specification of the service.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        """
        ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.KibanaSpecHttpServiceSpec']:
        """
        Spec is the specification of the service.
        """
        return pulumi.get(self, "spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KibanaSpecHttpServiceSpec(dict):
    """
    Spec is the specification of the service.
    """
    def __init__(__self__, *,
                 cluster_ip: Optional[str] = None,
                 external_ips: Optional[Sequence[str]] = None,
                 external_name: Optional[str] = None,
                 external_traffic_policy: Optional[str] = None,
                 health_check_node_port: Optional[int] = None,
                 ip_family: Optional[str] = None,
                 load_balancer_ip: Optional[str] = None,
                 load_balancer_source_ranges: Optional[Sequence[str]] = None,
                 ports: Optional[Sequence['outputs.KibanaSpecHttpServiceSpecPorts']] = None,
                 publish_not_ready_addresses: Optional[bool] = None,
                 selector: Optional[Mapping[str, str]] = None,
                 session_affinity: Optional[str] = None,
                 session_affinity_config: Optional['outputs.KibanaSpecHttpServiceSpecSessionAffinityConfig'] = None,
                 topology_keys: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        Spec is the specification of the service.
        :param str cluster_ip: clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        :param Sequence[str] external_ips: externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
        :param str external_name: externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
        :param str external_traffic_policy: externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
        :param int health_check_node_port: healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
        :param str ip_family: ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
        :param str load_balancer_ip: Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
        :param Sequence[str] load_balancer_source_ranges: If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
        :param Sequence['KibanaSpecHttpServiceSpecPortsArgs'] ports: The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        :param bool publish_not_ready_addresses: publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
        :param Mapping[str, str] selector: Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
        :param str session_affinity: Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        :param 'KibanaSpecHttpServiceSpecSessionAffinityConfigArgs' session_affinity_config: sessionAffinityConfig contains the configurations of session affinity.
        :param Sequence[str] topology_keys: topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
        :param str type: type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
        """
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[str]:
        """
        clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        """
        return pulumi.get(self, "cluster_ip")

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[Sequence[str]]:
        """
        externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
        """
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[str]:
        """
        externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
        """
        return pulumi.get(self, "external_name")

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[str]:
        """
        externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
        """
        return pulumi.get(self, "external_traffic_policy")

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[int]:
        """
        healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
        """
        return pulumi.get(self, "health_check_node_port")

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[str]:
        """
        ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
        """
        return pulumi.get(self, "ip_family")

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[str]:
        """
        Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
        """
        return pulumi.get(self, "load_balancer_ip")

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[Sequence[str]]:
        """
        If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
        """
        return pulumi.get(self, "load_balancer_source_ranges")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.KibanaSpecHttpServiceSpecPorts']]:
        """
        The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[bool]:
        """
        publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
        """
        return pulumi.get(self, "publish_not_ready_addresses")

    @property
    @pulumi.getter
    def selector(self) -> Optional[Mapping[str, str]]:
        """
        Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
        """
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[str]:
        """
        Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        """
        return pulumi.get(self, "session_affinity")

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional['outputs.KibanaSpecHttpServiceSpecSessionAffinityConfig']:
        """
        sessionAffinityConfig contains the configurations of session affinity.
        """
        return pulumi.get(self, "session_affinity_config")

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[Sequence[str]]:
        """
        topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
        """
        return pulumi.get(self, "topology_keys")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KibanaSpecHttpServiceSpecPorts(dict):
    """
    ServicePort contains information on service's port.
    """
    def __init__(__self__, *,
                 port: int,
                 app_protocol: Optional[str] = None,
                 name: Optional[str] = None,
                 node_port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 target_port: Optional['outputs.KibanaSpecHttpServiceSpecPortsTargetPort'] = None):
        """
        ServicePort contains information on service's port.
        :param int port: The port that will be exposed by this service.
        :param str app_protocol: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate.
        :param str name: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
        :param int node_port: The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
        :param str protocol: The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
        :param 'KibanaSpecHttpServiceSpecPortsTargetPortArgs' target_port: Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
        """
        pulumi.set(__self__, "port", port)
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port that will be exposed by this service.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="appProtocol")
    def app_protocol(self) -> Optional[str]:
        """
        The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate.
        """
        return pulumi.get(self, "app_protocol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        """
        The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
        """
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional['outputs.KibanaSpecHttpServiceSpecPortsTargetPort']:
        """
        Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
        """
        return pulumi.get(self, "target_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KibanaSpecHttpServiceSpecPortsTargetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KibanaSpecHttpServiceSpecSessionAffinityConfig(dict):
    """
    sessionAffinityConfig contains the configurations of session affinity.
    """
    def __init__(__self__, *,
                 client_ip: Optional['outputs.KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP'] = None):
        """
        sessionAffinityConfig contains the configurations of session affinity.
        :param 'KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs' client_ip: clientIP contains the configurations of Client IP based session affinity.
        """
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional['outputs.KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP']:
        """
        clientIP contains the configurations of Client IP based session affinity.
        """
        return pulumi.get(self, "client_ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KibanaSpecHttpServiceSpecSessionAffinityConfigClientIP(dict):
    """
    clientIP contains the configurations of Client IP based session affinity.
    """
    def __init__(__self__, *,
                 timeout_seconds: Optional[int] = None):
        """
        clientIP contains the configurations of Client IP based session affinity.
        :param int timeout_seconds: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
        """
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KibanaSpecHttpTls(dict):
    """
    TLS defines options for configuring TLS for HTTP.
    """
    def __init__(__self__, *,
                 certificate: Optional['outputs.KibanaSpecHttpTlsCertificate'] = None,
                 self_signed_certificate: Optional['outputs.KibanaSpecHttpTlsSelfSignedCertificate'] = None):
        """
        TLS defines options for configuring TLS for HTTP.
        :param 'KibanaSpecHttpTlsCertificateArgs' certificate: Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
                - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
        :param 'KibanaSpecHttpTlsSelfSignedCertificateArgs' self_signed_certificate: SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if self_signed_certificate is not None:
            pulumi.set(__self__, "self_signed_certificate", self_signed_certificate)

    @property
    @pulumi.getter
    def certificate(self) -> Optional['outputs.KibanaSpecHttpTlsCertificate']:
        """
        Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="selfSignedCertificate")
    def self_signed_certificate(self) -> Optional['outputs.KibanaSpecHttpTlsSelfSignedCertificate']:
        """
        SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
        """
        return pulumi.get(self, "self_signed_certificate")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KibanaSpecHttpTlsCertificate(dict):
    """
    Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
     - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
    """
    def __init__(__self__, *,
                 secret_name: Optional[str] = None):
        """
        Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
        :param str secret_name: SecretName is the name of the secret.
        """
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        SecretName is the name of the secret.
        """
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KibanaSpecHttpTlsSelfSignedCertificate(dict):
    """
    SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
    """
    def __init__(__self__, *,
                 disabled: Optional[bool] = None,
                 subject_alt_names: Optional[Sequence['outputs.KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames']] = None):
        """
        SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
        :param bool disabled: Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
        :param Sequence['KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs'] subject_alt_names: SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if subject_alt_names is not None:
            pulumi.set(__self__, "subject_alt_names", subject_alt_names)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="subjectAltNames")
    def subject_alt_names(self) -> Optional[Sequence['outputs.KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames']]:
        """
        SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
        """
        return pulumi.get(self, "subject_alt_names")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames(dict):
    """
    SubjectAlternativeName represents a SAN entry in a x509 certificate.
    """
    def __init__(__self__, *,
                 dns: Optional[str] = None,
                 ip: Optional[str] = None):
        """
        SubjectAlternativeName represents a SAN entry in a x509 certificate.
        :param str dns: DNS is the DNS name of the subject.
        :param str ip: IP is the IP address of the subject.
        """
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def dns(self) -> Optional[str]:
        """
        DNS is the DNS name of the subject.
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IP is the IP address of the subject.
        """
        return pulumi.get(self, "ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KibanaSpecSecureSettings(dict):
    """
    SecretSource defines a data source based on a Kubernetes Secret.
    """
    def __init__(__self__, *,
                 secret_name: str,
                 entries: Optional[Sequence['outputs.KibanaSpecSecureSettingsEntries']] = None):
        """
        SecretSource defines a data source based on a Kubernetes Secret.
        :param str secret_name: SecretName is the name of the secret.
        :param Sequence['KibanaSpecSecureSettingsEntriesArgs'] entries: Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
        """
        pulumi.set(__self__, "secret_name", secret_name)
        if entries is not None:
            pulumi.set(__self__, "entries", entries)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        SecretName is the name of the secret.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def entries(self) -> Optional[Sequence['outputs.KibanaSpecSecureSettingsEntries']]:
        """
        Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
        """
        return pulumi.get(self, "entries")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KibanaSpecSecureSettingsEntries(dict):
    """
    KeyToPath defines how to map a key in a Secret object to a filesystem path.
    """
    def __init__(__self__, *,
                 key: str,
                 path: Optional[str] = None):
        """
        KeyToPath defines how to map a key in a Secret object to a filesystem path.
        :param str key: Key is the key contained in the secret.
        :param str path: Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
        """
        pulumi.set(__self__, "key", key)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is the key contained in the secret.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
        """
        return pulumi.get(self, "path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KibanaStatus(dict):
    """
    KibanaStatus defines the observed state of Kibana
    """
    def __init__(__self__, *,
                 association_status: Optional[str] = None,
                 available_nodes: Optional[int] = None,
                 health: Optional[str] = None,
                 version: Optional[str] = None):
        """
        KibanaStatus defines the observed state of Kibana
        :param str association_status: AssociationStatus is the status of an association resource.
        :param int available_nodes: AvailableNodes is the number of available replicas in the deployment.
        :param str health: Health of the deployment.
        :param str version: Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.
        """
        if association_status is not None:
            pulumi.set(__self__, "association_status", association_status)
        if available_nodes is not None:
            pulumi.set(__self__, "available_nodes", available_nodes)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="associationStatus")
    def association_status(self) -> Optional[str]:
        """
        AssociationStatus is the status of an association resource.
        """
        return pulumi.get(self, "association_status")

    @property
    @pulumi.getter(name="availableNodes")
    def available_nodes(self) -> Optional[int]:
        """
        AvailableNodes is the number of available replicas in the deployment.
        """
        return pulumi.get(self, "available_nodes")

    @property
    @pulumi.getter
    def health(self) -> Optional[str]:
        """
        Health of the deployment.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



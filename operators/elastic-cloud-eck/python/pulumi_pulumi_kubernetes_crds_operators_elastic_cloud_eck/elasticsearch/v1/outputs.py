# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'ElasticsearchSpec',
    'ElasticsearchSpecAuth',
    'ElasticsearchSpecAuthFileRealm',
    'ElasticsearchSpecAuthRoles',
    'ElasticsearchSpecHttp',
    'ElasticsearchSpecHttpService',
    'ElasticsearchSpecHttpServiceSpec',
    'ElasticsearchSpecHttpServiceSpecPorts',
    'ElasticsearchSpecHttpServiceSpecPortsTargetPort',
    'ElasticsearchSpecHttpServiceSpecSessionAffinityConfig',
    'ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP',
    'ElasticsearchSpecHttpTls',
    'ElasticsearchSpecHttpTlsCertificate',
    'ElasticsearchSpecHttpTlsSelfSignedCertificate',
    'ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames',
    'ElasticsearchSpecNodeSets',
    'ElasticsearchSpecNodeSetsVolumeClaimTemplates',
    'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec',
    'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource',
    'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources',
    'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesLimits',
    'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesRequests',
    'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector',
    'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions',
    'ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus',
    'ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusCapacity',
    'ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions',
    'ElasticsearchSpecPodDisruptionBudget',
    'ElasticsearchSpecPodDisruptionBudgetSpec',
    'ElasticsearchSpecPodDisruptionBudgetSpecMaxUnavailable',
    'ElasticsearchSpecPodDisruptionBudgetSpecMinAvailable',
    'ElasticsearchSpecPodDisruptionBudgetSpecSelector',
    'ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions',
    'ElasticsearchSpecRemoteClusters',
    'ElasticsearchSpecRemoteClustersElasticsearchRef',
    'ElasticsearchSpecSecureSettings',
    'ElasticsearchSpecSecureSettingsEntries',
    'ElasticsearchSpecTransport',
    'ElasticsearchSpecTransportService',
    'ElasticsearchSpecTransportServiceSpec',
    'ElasticsearchSpecTransportServiceSpecPorts',
    'ElasticsearchSpecTransportServiceSpecPortsTargetPort',
    'ElasticsearchSpecTransportServiceSpecSessionAffinityConfig',
    'ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP',
    'ElasticsearchSpecUpdateStrategy',
    'ElasticsearchSpecUpdateStrategyChangeBudget',
    'ElasticsearchStatus',
]

@pulumi.output_type
class ElasticsearchSpec(dict):
    """
    ElasticsearchSpec holds the specification of an Elasticsearch cluster.
    """
    def __init__(__self__, *,
                 node_sets: Sequence['outputs.ElasticsearchSpecNodeSets'],
                 version: str,
                 auth: Optional['outputs.ElasticsearchSpecAuth'] = None,
                 http: Optional['outputs.ElasticsearchSpecHttp'] = None,
                 image: Optional[str] = None,
                 pod_disruption_budget: Optional['outputs.ElasticsearchSpecPodDisruptionBudget'] = None,
                 remote_clusters: Optional[Sequence['outputs.ElasticsearchSpecRemoteClusters']] = None,
                 secure_settings: Optional[Sequence['outputs.ElasticsearchSpecSecureSettings']] = None,
                 service_account_name: Optional[str] = None,
                 transport: Optional['outputs.ElasticsearchSpecTransport'] = None,
                 update_strategy: Optional['outputs.ElasticsearchSpecUpdateStrategy'] = None):
        """
        ElasticsearchSpec holds the specification of an Elasticsearch cluster.
        :param Sequence['ElasticsearchSpecNodeSetsArgs'] node_sets: NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
        :param str version: Version of Elasticsearch.
        :param 'ElasticsearchSpecAuthArgs' auth: Auth contains user authentication and authorization security settings for Elasticsearch.
        :param 'ElasticsearchSpecHttpArgs' http: HTTP holds HTTP layer settings for Elasticsearch.
        :param str image: Image is the Elasticsearch Docker image to deploy.
        :param 'ElasticsearchSpecPodDisruptionBudgetArgs' pod_disruption_budget: PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster. The default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
        :param Sequence['ElasticsearchSpecRemoteClustersArgs'] remote_clusters: RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
        :param Sequence['ElasticsearchSpecSecureSettingsArgs'] secure_settings: SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
        :param str service_account_name: ServiceAccountName is used to check access from the current resource to a resource (eg. a remote Elasticsearch cluster) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
        :param 'ElasticsearchSpecTransportArgs' transport: Transport holds transport layer settings for Elasticsearch.
        :param 'ElasticsearchSpecUpdateStrategyArgs' update_strategy: UpdateStrategy specifies how updates to the cluster should be performed.
        """
        pulumi.set(__self__, "node_sets", node_sets)
        pulumi.set(__self__, "version", version)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if http is not None:
            pulumi.set(__self__, "http", http)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if pod_disruption_budget is not None:
            pulumi.set(__self__, "pod_disruption_budget", pod_disruption_budget)
        if remote_clusters is not None:
            pulumi.set(__self__, "remote_clusters", remote_clusters)
        if secure_settings is not None:
            pulumi.set(__self__, "secure_settings", secure_settings)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if transport is not None:
            pulumi.set(__self__, "transport", transport)
        if update_strategy is not None:
            pulumi.set(__self__, "update_strategy", update_strategy)

    @property
    @pulumi.getter(name="nodeSets")
    def node_sets(self) -> Sequence['outputs.ElasticsearchSpecNodeSets']:
        """
        NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
        """
        return pulumi.get(self, "node_sets")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of Elasticsearch.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def auth(self) -> Optional['outputs.ElasticsearchSpecAuth']:
        """
        Auth contains user authentication and authorization security settings for Elasticsearch.
        """
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter
    def http(self) -> Optional['outputs.ElasticsearchSpecHttp']:
        """
        HTTP holds HTTP layer settings for Elasticsearch.
        """
        return pulumi.get(self, "http")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Image is the Elasticsearch Docker image to deploy.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="podDisruptionBudget")
    def pod_disruption_budget(self) -> Optional['outputs.ElasticsearchSpecPodDisruptionBudget']:
        """
        PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster. The default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
        """
        return pulumi.get(self, "pod_disruption_budget")

    @property
    @pulumi.getter(name="remoteClusters")
    def remote_clusters(self) -> Optional[Sequence['outputs.ElasticsearchSpecRemoteClusters']]:
        """
        RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
        """
        return pulumi.get(self, "remote_clusters")

    @property
    @pulumi.getter(name="secureSettings")
    def secure_settings(self) -> Optional[Sequence['outputs.ElasticsearchSpecSecureSettings']]:
        """
        SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
        """
        return pulumi.get(self, "secure_settings")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        ServiceAccountName is used to check access from the current resource to a resource (eg. a remote Elasticsearch cluster) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def transport(self) -> Optional['outputs.ElasticsearchSpecTransport']:
        """
        Transport holds transport layer settings for Elasticsearch.
        """
        return pulumi.get(self, "transport")

    @property
    @pulumi.getter(name="updateStrategy")
    def update_strategy(self) -> Optional['outputs.ElasticsearchSpecUpdateStrategy']:
        """
        UpdateStrategy specifies how updates to the cluster should be performed.
        """
        return pulumi.get(self, "update_strategy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecAuth(dict):
    """
    Auth contains user authentication and authorization security settings for Elasticsearch.
    """
    def __init__(__self__, *,
                 file_realm: Optional[Sequence['outputs.ElasticsearchSpecAuthFileRealm']] = None,
                 roles: Optional[Sequence['outputs.ElasticsearchSpecAuthRoles']] = None):
        """
        Auth contains user authentication and authorization security settings for Elasticsearch.
        :param Sequence['ElasticsearchSpecAuthFileRealmArgs'] file_realm: FileRealm to propagate to the Elasticsearch cluster.
        :param Sequence['ElasticsearchSpecAuthRolesArgs'] roles: Roles to propagate to the Elasticsearch cluster.
        """
        if file_realm is not None:
            pulumi.set(__self__, "file_realm", file_realm)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter(name="fileRealm")
    def file_realm(self) -> Optional[Sequence['outputs.ElasticsearchSpecAuthFileRealm']]:
        """
        FileRealm to propagate to the Elasticsearch cluster.
        """
        return pulumi.get(self, "file_realm")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence['outputs.ElasticsearchSpecAuthRoles']]:
        """
        Roles to propagate to the Elasticsearch cluster.
        """
        return pulumi.get(self, "roles")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecAuthFileRealm(dict):
    """
    FileRealmSource references users to create in the Elasticsearch cluster.
    """
    def __init__(__self__, *,
                 secret_name: Optional[str] = None):
        """
        FileRealmSource references users to create in the Elasticsearch cluster.
        :param str secret_name: SecretName is the name of the secret.
        """
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        SecretName is the name of the secret.
        """
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecAuthRoles(dict):
    """
    RoleSource references roles to create in the Elasticsearch cluster.
    """
    def __init__(__self__, *,
                 secret_name: Optional[str] = None):
        """
        RoleSource references roles to create in the Elasticsearch cluster.
        :param str secret_name: SecretName is the name of the secret.
        """
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        SecretName is the name of the secret.
        """
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecHttp(dict):
    """
    HTTP holds HTTP layer settings for Elasticsearch.
    """
    def __init__(__self__, *,
                 service: Optional['outputs.ElasticsearchSpecHttpService'] = None,
                 tls: Optional['outputs.ElasticsearchSpecHttpTls'] = None):
        """
        HTTP holds HTTP layer settings for Elasticsearch.
        :param 'ElasticsearchSpecHttpServiceArgs' service: Service defines the template for the associated Kubernetes Service object.
        :param 'ElasticsearchSpecHttpTlsArgs' tls: TLS defines options for configuring TLS for HTTP.
        """
        if service is not None:
            pulumi.set(__self__, "service", service)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ElasticsearchSpecHttpService']:
        """
        Service defines the template for the associated Kubernetes Service object.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.ElasticsearchSpecHttpTls']:
        """
        TLS defines options for configuring TLS for HTTP.
        """
        return pulumi.get(self, "tls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecHttpService(dict):
    """
    Service defines the template for the associated Kubernetes Service object.
    """
    def __init__(__self__, *,
                 metadata: Optional[Mapping[str, Any]] = None,
                 spec: Optional['outputs.ElasticsearchSpecHttpServiceSpec'] = None):
        """
        Service defines the template for the associated Kubernetes Service object.
        :param Mapping[str, Any] metadata: ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
        :param 'ElasticsearchSpecHttpServiceSpecArgs' spec: Spec is the specification of the service.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        """
        ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ElasticsearchSpecHttpServiceSpec']:
        """
        Spec is the specification of the service.
        """
        return pulumi.get(self, "spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecHttpServiceSpec(dict):
    """
    Spec is the specification of the service.
    """
    def __init__(__self__, *,
                 cluster_ip: Optional[str] = None,
                 external_ips: Optional[Sequence[str]] = None,
                 external_name: Optional[str] = None,
                 external_traffic_policy: Optional[str] = None,
                 health_check_node_port: Optional[int] = None,
                 ip_family: Optional[str] = None,
                 load_balancer_ip: Optional[str] = None,
                 load_balancer_source_ranges: Optional[Sequence[str]] = None,
                 ports: Optional[Sequence['outputs.ElasticsearchSpecHttpServiceSpecPorts']] = None,
                 publish_not_ready_addresses: Optional[bool] = None,
                 selector: Optional[Mapping[str, str]] = None,
                 session_affinity: Optional[str] = None,
                 session_affinity_config: Optional['outputs.ElasticsearchSpecHttpServiceSpecSessionAffinityConfig'] = None,
                 topology_keys: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        Spec is the specification of the service.
        :param str cluster_ip: clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        :param Sequence[str] external_ips: externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
        :param str external_name: externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
        :param str external_traffic_policy: externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
        :param int health_check_node_port: healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
        :param str ip_family: ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
        :param str load_balancer_ip: Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
        :param Sequence[str] load_balancer_source_ranges: If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
        :param Sequence['ElasticsearchSpecHttpServiceSpecPortsArgs'] ports: The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        :param bool publish_not_ready_addresses: publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
        :param Mapping[str, str] selector: Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
        :param str session_affinity: Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        :param 'ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs' session_affinity_config: sessionAffinityConfig contains the configurations of session affinity.
        :param Sequence[str] topology_keys: topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
        :param str type: type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
        """
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[str]:
        """
        clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        """
        return pulumi.get(self, "cluster_ip")

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[Sequence[str]]:
        """
        externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
        """
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[str]:
        """
        externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
        """
        return pulumi.get(self, "external_name")

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[str]:
        """
        externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
        """
        return pulumi.get(self, "external_traffic_policy")

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[int]:
        """
        healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
        """
        return pulumi.get(self, "health_check_node_port")

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[str]:
        """
        ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
        """
        return pulumi.get(self, "ip_family")

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[str]:
        """
        Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
        """
        return pulumi.get(self, "load_balancer_ip")

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[Sequence[str]]:
        """
        If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
        """
        return pulumi.get(self, "load_balancer_source_ranges")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ElasticsearchSpecHttpServiceSpecPorts']]:
        """
        The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[bool]:
        """
        publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
        """
        return pulumi.get(self, "publish_not_ready_addresses")

    @property
    @pulumi.getter
    def selector(self) -> Optional[Mapping[str, str]]:
        """
        Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
        """
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[str]:
        """
        Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        """
        return pulumi.get(self, "session_affinity")

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional['outputs.ElasticsearchSpecHttpServiceSpecSessionAffinityConfig']:
        """
        sessionAffinityConfig contains the configurations of session affinity.
        """
        return pulumi.get(self, "session_affinity_config")

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[Sequence[str]]:
        """
        topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
        """
        return pulumi.get(self, "topology_keys")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecHttpServiceSpecPorts(dict):
    """
    ServicePort contains information on service's port.
    """
    def __init__(__self__, *,
                 port: int,
                 name: Optional[str] = None,
                 node_port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 target_port: Optional['outputs.ElasticsearchSpecHttpServiceSpecPortsTargetPort'] = None):
        """
        ServicePort contains information on service's port.
        :param int port: The port that will be exposed by this service.
        :param str name: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
        :param int node_port: The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
        :param str protocol: The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
        :param 'ElasticsearchSpecHttpServiceSpecPortsTargetPortArgs' target_port: Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
        """
        pulumi.set(__self__, "port", port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port that will be exposed by this service.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        """
        The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
        """
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional['outputs.ElasticsearchSpecHttpServiceSpecPortsTargetPort']:
        """
        Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
        """
        return pulumi.get(self, "target_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecHttpServiceSpecPortsTargetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecHttpServiceSpecSessionAffinityConfig(dict):
    """
    sessionAffinityConfig contains the configurations of session affinity.
    """
    def __init__(__self__, *,
                 client_ip: Optional['outputs.ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP'] = None):
        """
        sessionAffinityConfig contains the configurations of session affinity.
        :param 'ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs' client_ip: clientIP contains the configurations of Client IP based session affinity.
        """
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional['outputs.ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP']:
        """
        clientIP contains the configurations of Client IP based session affinity.
        """
        return pulumi.get(self, "client_ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIP(dict):
    """
    clientIP contains the configurations of Client IP based session affinity.
    """
    def __init__(__self__, *,
                 timeout_seconds: Optional[int] = None):
        """
        clientIP contains the configurations of Client IP based session affinity.
        :param int timeout_seconds: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
        """
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecHttpTls(dict):
    """
    TLS defines options for configuring TLS for HTTP.
    """
    def __init__(__self__, *,
                 certificate: Optional['outputs.ElasticsearchSpecHttpTlsCertificate'] = None,
                 self_signed_certificate: Optional['outputs.ElasticsearchSpecHttpTlsSelfSignedCertificate'] = None):
        """
        TLS defines options for configuring TLS for HTTP.
        :param 'ElasticsearchSpecHttpTlsCertificateArgs' certificate: Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
                - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
        :param 'ElasticsearchSpecHttpTlsSelfSignedCertificateArgs' self_signed_certificate: SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if self_signed_certificate is not None:
            pulumi.set(__self__, "self_signed_certificate", self_signed_certificate)

    @property
    @pulumi.getter
    def certificate(self) -> Optional['outputs.ElasticsearchSpecHttpTlsCertificate']:
        """
        Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="selfSignedCertificate")
    def self_signed_certificate(self) -> Optional['outputs.ElasticsearchSpecHttpTlsSelfSignedCertificate']:
        """
        SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
        """
        return pulumi.get(self, "self_signed_certificate")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecHttpTlsCertificate(dict):
    """
    Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
     - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
    """
    def __init__(__self__, *,
                 secret_name: Optional[str] = None):
        """
        Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
        :param str secret_name: SecretName is the name of the secret.
        """
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        SecretName is the name of the secret.
        """
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecHttpTlsSelfSignedCertificate(dict):
    """
    SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
    """
    def __init__(__self__, *,
                 disabled: Optional[bool] = None,
                 subject_alt_names: Optional[Sequence['outputs.ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames']] = None):
        """
        SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
        :param bool disabled: Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
        :param Sequence['ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs'] subject_alt_names: SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if subject_alt_names is not None:
            pulumi.set(__self__, "subject_alt_names", subject_alt_names)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="subjectAltNames")
    def subject_alt_names(self) -> Optional[Sequence['outputs.ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames']]:
        """
        SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
        """
        return pulumi.get(self, "subject_alt_names")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames(dict):
    """
    SubjectAlternativeName represents a SAN entry in a x509 certificate.
    """
    def __init__(__self__, *,
                 dns: Optional[str] = None,
                 ip: Optional[str] = None):
        """
        SubjectAlternativeName represents a SAN entry in a x509 certificate.
        :param str dns: DNS is the DNS name of the subject.
        :param str ip: IP is the IP address of the subject.
        """
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def dns(self) -> Optional[str]:
        """
        DNS is the DNS name of the subject.
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IP is the IP address of the subject.
        """
        return pulumi.get(self, "ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecNodeSets(dict):
    """
    NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
    """
    def __init__(__self__, *,
                 count: int,
                 name: str,
                 config: Optional[Mapping[str, Any]] = None,
                 pod_template: Optional[Mapping[str, Any]] = None,
                 volume_claim_templates: Optional[Sequence['outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplates']] = None):
        """
        NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
        :param int count: Count of Elasticsearch nodes to deploy.
        :param str name: Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
        :param Mapping[str, Any] config: Config holds the Elasticsearch configuration.
        :param Mapping[str, Any] pod_template: PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
        :param Sequence['ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs'] volume_claim_templates: VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet. Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate. Items defined here take precedence over any default claims added by the operator with the same name.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "name", name)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if volume_claim_templates is not None:
            pulumi.set(__self__, "volume_claim_templates", volume_claim_templates)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Count of Elasticsearch nodes to deploy.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, Any]]:
        """
        Config holds the Elasticsearch configuration.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(self) -> Optional[Mapping[str, Any]]:
        """
        PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
        """
        return pulumi.get(self, "pod_template")

    @property
    @pulumi.getter(name="volumeClaimTemplates")
    def volume_claim_templates(self) -> Optional[Sequence['outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplates']]:
        """
        VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet. Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate. Items defined here take precedence over any default claims added by the operator with the same name.
        """
        return pulumi.get(self, "volume_claim_templates")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecNodeSetsVolumeClaimTemplates(dict):
    """
    PersistentVolumeClaim is a user's request for and claim to a persistent volume
    """
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 kind: Optional[str] = None,
                 metadata: Optional[Mapping[str, Any]] = None,
                 spec: Optional['outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec'] = None,
                 status: Optional['outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus'] = None):
        """
        PersistentVolumeClaim is a user's request for and claim to a persistent volume
        :param str api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param str kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param Mapping[str, Any] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param 'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs' spec: Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param 'ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusArgs' status: Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec']:
        """
        Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def status(self) -> Optional['outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus']:
        """
        Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        """
        return pulumi.get(self, "status")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec(dict):
    """
    Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    """
    def __init__(__self__, *,
                 access_modes: Optional[Sequence[str]] = None,
                 data_source: Optional['outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource'] = None,
                 resources: Optional['outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources'] = None,
                 selector: Optional['outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector'] = None,
                 storage_class_name: Optional[str] = None,
                 volume_mode: Optional[str] = None,
                 volume_name: Optional[str] = None):
        """
        Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param Sequence[str] access_modes: AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        :param 'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs' data_source: This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
        :param 'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs' resources: Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        :param 'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs' selector: A label query over volumes to consider for binding.
        :param str storage_class_name: Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        :param str volume_mode: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
        :param str volume_name: VolumeName is the binding reference to the PersistentVolume backing this claim.
        """
        if access_modes is not None:
            pulumi.set(__self__, "access_modes", access_modes)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if volume_mode is not None:
            pulumi.set(__self__, "volume_mode", volume_mode)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> Optional[Sequence[str]]:
        """
        AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        """
        return pulumi.get(self, "access_modes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional['outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource']:
        """
        This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
        """
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources']:
        """
        Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector']:
        """
        A label query over volumes to consider for binding.
        """
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        """
        Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        """
        return pulumi.get(self, "storage_class_name")

    @property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> Optional[str]:
        """
        volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
        """
        return pulumi.get(self, "volume_mode")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        """
        VolumeName is the binding reference to the PersistentVolume backing this claim.
        """
        return pulumi.get(self, "volume_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource(dict):
    """
    This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
    """
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 api_group: Optional[str] = None):
        """
        This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
        :param str kind: Kind is the type of resource being referenced
        :param str name: Name is the name of resource being referenced
        :param str api_group: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if api_group is not None:
            pulumi.set(__self__, "api_group", api_group)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind is the type of resource being referenced
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of resource being referenced
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="apiGroup")
    def api_group(self) -> Optional[str]:
        """
        APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        """
        return pulumi.get(self, "api_group")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources(dict):
    """
    Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    """
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, 'outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesLimits']] = None,
                 requests: Optional[Mapping[str, 'outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesRequests']] = None):
        """
        Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        :param Mapping[str, 'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesLimitsArgs'] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param Mapping[str, 'ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesRequestsArgs'] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, 'outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesLimits']]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, 'outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesRequests']]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesLimits(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesRequests(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector(dict):
    """
    A label query over volumes to consider for binding.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over volumes to consider for binding.
        :param Sequence['ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatus(dict):
    """
    Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    """
    def __init__(__self__, *,
                 access_modes: Optional[Sequence[str]] = None,
                 capacity: Optional[Mapping[str, 'outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusCapacity']] = None,
                 conditions: Optional[Sequence['outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions']] = None,
                 phase: Optional[str] = None):
        """
        Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param Sequence[str] access_modes: AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        :param Mapping[str, 'ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusCapacityArgs'] capacity: Represents the actual resources of the underlying volume.
        :param Sequence['ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditionsArgs'] conditions: Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
        :param str phase: Phase represents the current phase of PersistentVolumeClaim.
        """
        if access_modes is not None:
            pulumi.set(__self__, "access_modes", access_modes)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> Optional[Sequence[str]]:
        """
        AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        """
        return pulumi.get(self, "access_modes")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[Mapping[str, 'outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusCapacity']]:
        """
        Represents the actual resources of the underlying volume.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions']]:
        """
        Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        Phase represents the current phase of PersistentVolumeClaim.
        """
        return pulumi.get(self, "phase")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusCapacity(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditions(dict):
    """
    PersistentVolumeClaimCondition contails details about state of pvc
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_probe_time: Optional[str] = None,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        PersistentVolumeClaimCondition contails details about state of pvc
        :param str type: PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
        :param str last_probe_time: Last time we probed the condition.
        :param str last_transition_time: Last time the condition transitioned from one status to another.
        :param str message: Human-readable message indicating details about last transition.
        :param str reason: Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[str]:
        """
        Last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecPodDisruptionBudget(dict):
    """
    PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster. The default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
    """
    def __init__(__self__, *,
                 metadata: Optional[Mapping[str, Any]] = None,
                 spec: Optional['outputs.ElasticsearchSpecPodDisruptionBudgetSpec'] = None):
        """
        PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster. The default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
        :param Mapping[str, Any] metadata: ObjectMeta is the metadata of the PDB. The name and namespace provided here are managed by ECK and will be ignored.
        :param 'ElasticsearchSpecPodDisruptionBudgetSpecArgs' spec: Spec is the specification of the PDB.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        """
        ObjectMeta is the metadata of the PDB. The name and namespace provided here are managed by ECK and will be ignored.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ElasticsearchSpecPodDisruptionBudgetSpec']:
        """
        Spec is the specification of the PDB.
        """
        return pulumi.get(self, "spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecPodDisruptionBudgetSpec(dict):
    """
    Spec is the specification of the PDB.
    """
    def __init__(__self__, *,
                 max_unavailable: Optional['outputs.ElasticsearchSpecPodDisruptionBudgetSpecMaxUnavailable'] = None,
                 min_available: Optional['outputs.ElasticsearchSpecPodDisruptionBudgetSpecMinAvailable'] = None,
                 selector: Optional['outputs.ElasticsearchSpecPodDisruptionBudgetSpecSelector'] = None):
        """
        Spec is the specification of the PDB.
        :param 'ElasticsearchSpecPodDisruptionBudgetSpecMaxUnavailableArgs' max_unavailable: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
        :param 'ElasticsearchSpecPodDisruptionBudgetSpecMinAvailableArgs' min_available: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
        :param 'ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs' selector: Label query over pods whose evictions are managed by the disruption budget.
        """
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)
        if min_available is not None:
            pulumi.set(__self__, "min_available", min_available)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional['outputs.ElasticsearchSpecPodDisruptionBudgetSpecMaxUnavailable']:
        """
        An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
        """
        return pulumi.get(self, "max_unavailable")

    @property
    @pulumi.getter(name="minAvailable")
    def min_available(self) -> Optional['outputs.ElasticsearchSpecPodDisruptionBudgetSpecMinAvailable']:
        """
        An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
        """
        return pulumi.get(self, "min_available")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ElasticsearchSpecPodDisruptionBudgetSpecSelector']:
        """
        Label query over pods whose evictions are managed by the disruption budget.
        """
        return pulumi.get(self, "selector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecPodDisruptionBudgetSpecMaxUnavailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecPodDisruptionBudgetSpecMinAvailable(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecPodDisruptionBudgetSpecSelector(dict):
    """
    Label query over pods whose evictions are managed by the disruption budget.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        Label query over pods whose evictions are managed by the disruption budget.
        :param Sequence['ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecRemoteClusters(dict):
    """
    RemoteCluster declares a remote Elasticsearch cluster connection.
    """
    def __init__(__self__, *,
                 name: str,
                 elasticsearch_ref: Optional['outputs.ElasticsearchSpecRemoteClustersElasticsearchRef'] = None):
        """
        RemoteCluster declares a remote Elasticsearch cluster connection.
        :param str name: Name is the name of the remote cluster as it is set in the Elasticsearch settings. The name is expected to be unique for each remote clusters.
        :param 'ElasticsearchSpecRemoteClustersElasticsearchRefArgs' elasticsearch_ref: ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
        """
        pulumi.set(__self__, "name", name)
        if elasticsearch_ref is not None:
            pulumi.set(__self__, "elasticsearch_ref", elasticsearch_ref)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the remote cluster as it is set in the Elasticsearch settings. The name is expected to be unique for each remote clusters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="elasticsearchRef")
    def elasticsearch_ref(self) -> Optional['outputs.ElasticsearchSpecRemoteClustersElasticsearchRef']:
        """
        ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
        """
        return pulumi.get(self, "elasticsearch_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecRemoteClustersElasticsearchRef(dict):
    """
    ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: Optional[str] = None):
        """
        ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
        :param str name: Name of the Kubernetes object.
        :param str namespace: Namespace of the Kubernetes object. If empty, defaults to the current namespace.
        """
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Kubernetes object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the Kubernetes object. If empty, defaults to the current namespace.
        """
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecSecureSettings(dict):
    """
    SecretSource defines a data source based on a Kubernetes Secret.
    """
    def __init__(__self__, *,
                 secret_name: str,
                 entries: Optional[Sequence['outputs.ElasticsearchSpecSecureSettingsEntries']] = None):
        """
        SecretSource defines a data source based on a Kubernetes Secret.
        :param str secret_name: SecretName is the name of the secret.
        :param Sequence['ElasticsearchSpecSecureSettingsEntriesArgs'] entries: Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
        """
        pulumi.set(__self__, "secret_name", secret_name)
        if entries is not None:
            pulumi.set(__self__, "entries", entries)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        SecretName is the name of the secret.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def entries(self) -> Optional[Sequence['outputs.ElasticsearchSpecSecureSettingsEntries']]:
        """
        Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
        """
        return pulumi.get(self, "entries")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecSecureSettingsEntries(dict):
    """
    KeyToPath defines how to map a key in a Secret object to a filesystem path.
    """
    def __init__(__self__, *,
                 key: str,
                 path: Optional[str] = None):
        """
        KeyToPath defines how to map a key in a Secret object to a filesystem path.
        :param str key: Key is the key contained in the secret.
        :param str path: Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
        """
        pulumi.set(__self__, "key", key)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is the key contained in the secret.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
        """
        return pulumi.get(self, "path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecTransport(dict):
    """
    Transport holds transport layer settings for Elasticsearch.
    """
    def __init__(__self__, *,
                 service: Optional['outputs.ElasticsearchSpecTransportService'] = None):
        """
        Transport holds transport layer settings for Elasticsearch.
        :param 'ElasticsearchSpecTransportServiceArgs' service: Service defines the template for the associated Kubernetes Service object.
        """
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ElasticsearchSpecTransportService']:
        """
        Service defines the template for the associated Kubernetes Service object.
        """
        return pulumi.get(self, "service")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecTransportService(dict):
    """
    Service defines the template for the associated Kubernetes Service object.
    """
    def __init__(__self__, *,
                 metadata: Optional[Mapping[str, Any]] = None,
                 spec: Optional['outputs.ElasticsearchSpecTransportServiceSpec'] = None):
        """
        Service defines the template for the associated Kubernetes Service object.
        :param Mapping[str, Any] metadata: ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
        :param 'ElasticsearchSpecTransportServiceSpecArgs' spec: Spec is the specification of the service.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        """
        ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ElasticsearchSpecTransportServiceSpec']:
        """
        Spec is the specification of the service.
        """
        return pulumi.get(self, "spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecTransportServiceSpec(dict):
    """
    Spec is the specification of the service.
    """
    def __init__(__self__, *,
                 cluster_ip: Optional[str] = None,
                 external_ips: Optional[Sequence[str]] = None,
                 external_name: Optional[str] = None,
                 external_traffic_policy: Optional[str] = None,
                 health_check_node_port: Optional[int] = None,
                 ip_family: Optional[str] = None,
                 load_balancer_ip: Optional[str] = None,
                 load_balancer_source_ranges: Optional[Sequence[str]] = None,
                 ports: Optional[Sequence['outputs.ElasticsearchSpecTransportServiceSpecPorts']] = None,
                 publish_not_ready_addresses: Optional[bool] = None,
                 selector: Optional[Mapping[str, str]] = None,
                 session_affinity: Optional[str] = None,
                 session_affinity_config: Optional['outputs.ElasticsearchSpecTransportServiceSpecSessionAffinityConfig'] = None,
                 topology_keys: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        Spec is the specification of the service.
        :param str cluster_ip: clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        :param Sequence[str] external_ips: externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
        :param str external_name: externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
        :param str external_traffic_policy: externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
        :param int health_check_node_port: healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
        :param str ip_family: ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
        :param str load_balancer_ip: Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
        :param Sequence[str] load_balancer_source_ranges: If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
        :param Sequence['ElasticsearchSpecTransportServiceSpecPortsArgs'] ports: The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        :param bool publish_not_ready_addresses: publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
        :param Mapping[str, str] selector: Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
        :param str session_affinity: Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        :param 'ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs' session_affinity_config: sessionAffinityConfig contains the configurations of session affinity.
        :param Sequence[str] topology_keys: topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
        :param str type: type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
        """
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_traffic_policy is not None:
            pulumi.set(__self__, "external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            pulumi.set(__self__, "health_check_node_port", health_check_node_port)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if load_balancer_ip is not None:
            pulumi.set(__self__, "load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            pulumi.set(__self__, "load_balancer_source_ranges", load_balancer_source_ranges)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if publish_not_ready_addresses is not None:
            pulumi.set(__self__, "publish_not_ready_addresses", publish_not_ready_addresses)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_config is not None:
            pulumi.set(__self__, "session_affinity_config", session_affinity_config)
        if topology_keys is not None:
            pulumi.set(__self__, "topology_keys", topology_keys)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[str]:
        """
        clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        """
        return pulumi.get(self, "cluster_ip")

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[Sequence[str]]:
        """
        externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
        """
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[str]:
        """
        externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
        """
        return pulumi.get(self, "external_name")

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[str]:
        """
        externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
        """
        return pulumi.get(self, "external_traffic_policy")

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[int]:
        """
        healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
        """
        return pulumi.get(self, "health_check_node_port")

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[str]:
        """
        ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
        """
        return pulumi.get(self, "ip_family")

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[str]:
        """
        Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
        """
        return pulumi.get(self, "load_balancer_ip")

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[Sequence[str]]:
        """
        If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
        """
        return pulumi.get(self, "load_balancer_source_ranges")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ElasticsearchSpecTransportServiceSpecPorts']]:
        """
        The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="publishNotReadyAddresses")
    def publish_not_ready_addresses(self) -> Optional[bool]:
        """
        publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
        """
        return pulumi.get(self, "publish_not_ready_addresses")

    @property
    @pulumi.getter
    def selector(self) -> Optional[Mapping[str, str]]:
        """
        Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
        """
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[str]:
        """
        Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        """
        return pulumi.get(self, "session_affinity")

    @property
    @pulumi.getter(name="sessionAffinityConfig")
    def session_affinity_config(self) -> Optional['outputs.ElasticsearchSpecTransportServiceSpecSessionAffinityConfig']:
        """
        sessionAffinityConfig contains the configurations of session affinity.
        """
        return pulumi.get(self, "session_affinity_config")

    @property
    @pulumi.getter(name="topologyKeys")
    def topology_keys(self) -> Optional[Sequence[str]]:
        """
        topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
        """
        return pulumi.get(self, "topology_keys")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecTransportServiceSpecPorts(dict):
    """
    ServicePort contains information on service's port.
    """
    def __init__(__self__, *,
                 port: int,
                 name: Optional[str] = None,
                 node_port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 target_port: Optional['outputs.ElasticsearchSpecTransportServiceSpecPortsTargetPort'] = None):
        """
        ServicePort contains information on service's port.
        :param int port: The port that will be exposed by this service.
        :param str name: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
        :param int node_port: The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
        :param str protocol: The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
        :param 'ElasticsearchSpecTransportServiceSpecPortsTargetPortArgs' target_port: Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
        """
        pulumi.set(__self__, "port", port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port that will be exposed by this service.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        """
        The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
        """
        return pulumi.get(self, "node_port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional['outputs.ElasticsearchSpecTransportServiceSpecPortsTargetPort']:
        """
        Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
        """
        return pulumi.get(self, "target_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecTransportServiceSpecPortsTargetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecTransportServiceSpecSessionAffinityConfig(dict):
    """
    sessionAffinityConfig contains the configurations of session affinity.
    """
    def __init__(__self__, *,
                 client_ip: Optional['outputs.ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP'] = None):
        """
        sessionAffinityConfig contains the configurations of session affinity.
        :param 'ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs' client_ip: clientIP contains the configurations of Client IP based session affinity.
        """
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)

    @property
    @pulumi.getter(name="clientIP")
    def client_ip(self) -> Optional['outputs.ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP']:
        """
        clientIP contains the configurations of Client IP based session affinity.
        """
        return pulumi.get(self, "client_ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIP(dict):
    """
    clientIP contains the configurations of Client IP based session affinity.
    """
    def __init__(__self__, *,
                 timeout_seconds: Optional[int] = None):
        """
        clientIP contains the configurations of Client IP based session affinity.
        :param int timeout_seconds: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
        """
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecUpdateStrategy(dict):
    """
    UpdateStrategy specifies how updates to the cluster should be performed.
    """
    def __init__(__self__, *,
                 change_budget: Optional['outputs.ElasticsearchSpecUpdateStrategyChangeBudget'] = None):
        """
        UpdateStrategy specifies how updates to the cluster should be performed.
        :param 'ElasticsearchSpecUpdateStrategyChangeBudgetArgs' change_budget: ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
        """
        if change_budget is not None:
            pulumi.set(__self__, "change_budget", change_budget)

    @property
    @pulumi.getter(name="changeBudget")
    def change_budget(self) -> Optional['outputs.ElasticsearchSpecUpdateStrategyChangeBudget']:
        """
        ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
        """
        return pulumi.get(self, "change_budget")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchSpecUpdateStrategyChangeBudget(dict):
    """
    ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
    """
    def __init__(__self__, *,
                 max_surge: Optional[int] = None,
                 max_unavailable: Optional[int] = None):
        """
        ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
        :param int max_surge: MaxSurge is the maximum number of new pods that can be created exceeding the original number of pods defined in the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will disable the restriction. Defaults to unbounded if not specified.
        :param int max_unavailable: MaxUnavailable is the maximum number of pods that can be unavailable (not ready) during the update due to circumstances under the control of the operator. Setting a negative value will disable this restriction. Defaults to 1 if not specified.
        """
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[int]:
        """
        MaxSurge is the maximum number of new pods that can be created exceeding the original number of pods defined in the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will disable the restriction. Defaults to unbounded if not specified.
        """
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[int]:
        """
        MaxUnavailable is the maximum number of pods that can be unavailable (not ready) during the update due to circumstances under the control of the operator. Setting a negative value will disable this restriction. Defaults to 1 if not specified.
        """
        return pulumi.get(self, "max_unavailable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ElasticsearchStatus(dict):
    """
    ElasticsearchStatus defines the observed state of Elasticsearch
    """
    def __init__(__self__, *,
                 available_nodes: Optional[int] = None,
                 health: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        ElasticsearchStatus defines the observed state of Elasticsearch
        :param str health: ElasticsearchHealth is the health of the cluster as returned by the health API.
        :param str phase: ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
        """
        if available_nodes is not None:
            pulumi.set(__self__, "available_nodes", available_nodes)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="availableNodes")
    def available_nodes(self) -> Optional[int]:
        return pulumi.get(self, "available_nodes")

    @property
    @pulumi.getter
    def health(self) -> Optional[str]:
        """
        ElasticsearchHealth is the health of the cluster as returned by the health API.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
        """
        return pulumi.get(self, "phase")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



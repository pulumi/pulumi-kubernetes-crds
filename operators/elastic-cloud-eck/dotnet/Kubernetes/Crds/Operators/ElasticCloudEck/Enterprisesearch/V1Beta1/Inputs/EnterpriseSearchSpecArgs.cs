// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Enterprisesearch.V1Beta1
{

    /// <summary>
    /// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
    /// </summary>
    public class EnterpriseSearchSpecArgs : Pulumi.ResourceArgs
    {
        [Input("config")]
        private InputMap<object>? _config;

        /// <summary>
        /// Config holds the Enterprise Search configuration.
        /// </summary>
        public InputMap<object> Config
        {
            get => _config ?? (_config = new InputMap<object>());
            set => _config = value;
        }

        /// <summary>
        /// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration. Configuration settings are merged and have precedence over settings specified in `config`.
        /// </summary>
        [Input("configRef")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Enterprisesearch.V1Beta1.EnterpriseSearchSpecConfigRefArgs>? ConfigRef { get; set; }

        /// <summary>
        /// Count of Enterprise Search instances to deploy.
        /// </summary>
        [Input("count")]
        public Input<int>? Count { get; set; }

        /// <summary>
        /// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
        /// </summary>
        [Input("elasticsearchRef")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Enterprisesearch.V1Beta1.EnterpriseSearchSpecElasticsearchRefArgs>? ElasticsearchRef { get; set; }

        /// <summary>
        /// HTTP holds the HTTP layer configuration for Enterprise Search resource.
        /// </summary>
        [Input("http")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Enterprisesearch.V1Beta1.EnterpriseSearchSpecHttpArgs>? Http { get; set; }

        /// <summary>
        /// Image is the Enterprise Search Docker image to deploy.
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        [Input("podTemplate")]
        private InputMap<object>? _podTemplate;

        /// <summary>
        /// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Enterprise Search pods.
        /// </summary>
        public InputMap<object> PodTemplate
        {
            get => _podTemplate ?? (_podTemplate = new InputMap<object>());
            set => _podTemplate = value;
        }

        /// <summary>
        /// ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
        /// </summary>
        [Input("serviceAccountName")]
        public Input<string>? ServiceAccountName { get; set; }

        /// <summary>
        /// Version of Enterprise Search.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public EnterpriseSearchSpecArgs()
        {
        }
    }
}

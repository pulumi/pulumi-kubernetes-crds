// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Beat.V1Beta1
{

    /// <summary>
    /// BeatSpec defines the desired state of a Beat.
    /// </summary>
    public class BeatSpecArgs : Pulumi.ResourceArgs
    {
        [Input("config")]
        private InputMap<object>? _config;

        /// <summary>
        /// Config holds the Beat configuration. At most one of [`Config`, `ConfigRef`] can be specified.
        /// </summary>
        public InputMap<object> Config
        {
            get => _config ?? (_config = new InputMap<object>());
            set => _config = value;
        }

        /// <summary>
        /// ConfigRef contains a reference to an existing Kubernetes Secret holding the Beat configuration. Beat settings must be specified as yaml, under a single "beat.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.
        /// </summary>
        [Input("configRef")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Beat.V1Beta1.BeatSpecConfigRefArgs>? ConfigRef { get; set; }

        /// <summary>
        /// DaemonSet specifies the Beat should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`. If both are absent a default for the Type is used.
        /// </summary>
        [Input("daemonSet")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Beat.V1Beta1.BeatSpecDaemonSetArgs>? DaemonSet { get; set; }

        /// <summary>
        /// Deployment specifies the Beat should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`. If both are absent a default for the Type is used.
        /// </summary>
        [Input("deployment")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Beat.V1Beta1.BeatSpecDeploymentArgs>? Deployment { get; set; }

        /// <summary>
        /// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
        /// </summary>
        [Input("elasticsearchRef")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Beat.V1Beta1.BeatSpecElasticsearchRefArgs>? ElasticsearchRef { get; set; }

        /// <summary>
        /// Image is the Beat Docker image to deploy. Version and Type have to match the Beat in the image.
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows automatic setup of dashboards and visualizations.
        /// </summary>
        [Input("kibanaRef")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Beat.V1Beta1.BeatSpecKibanaRefArgs>? KibanaRef { get; set; }

        [Input("secureSettings")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Beat.V1Beta1.BeatSpecSecureSettingsArgs>? _secureSettings;

        /// <summary>
        /// SecureSettings is a list of references to Kubernetes Secrets containing sensitive configuration options for the Beat. Secrets data can be then referenced in the Beat config using the Secret's keys or as specified in `Entries` field of each SecureSetting.
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Beat.V1Beta1.BeatSpecSecureSettingsArgs> SecureSettings
        {
            get => _secureSettings ?? (_secureSettings = new InputList<Pulumi.Kubernetes.Types.Inputs.Beat.V1Beta1.BeatSpecSecureSettingsArgs>());
            set => _secureSettings = value;
        }

        /// <summary>
        /// ServiceAccountName is used to check access from the current resource to Elasticsearch resource in a different namespace. Can only be used if ECK is enforcing RBAC on references.
        /// </summary>
        [Input("serviceAccountName")]
        public Input<string>? ServiceAccountName { get; set; }

        /// <summary>
        /// Type is the type of the Beat to deploy (filebeat, metricbeat, heartbeat, auditbeat, journalbeat, packetbeat, etc.). Any string can be used, but well-known types will have the image field defaulted and have the appropriate Elasticsearch roles created automatically. It also allows for dashboard setup when combined with a `KibanaRef`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Version of the Beat.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public BeatSpecArgs()
        {
        }
    }
}

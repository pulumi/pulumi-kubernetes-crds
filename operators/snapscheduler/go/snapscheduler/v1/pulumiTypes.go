// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// SnapshotSchedule is the Schema for the snapshotschedules API
type SnapshotScheduleType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// SnapshotScheduleSpec defines the desired state of SnapshotSchedule
	Spec *SnapshotScheduleSpec `pulumi:"spec"`
	// SnapshotScheduleStatus defines the observed state of SnapshotSchedule
	Status *SnapshotScheduleStatus `pulumi:"status"`
}

// SnapshotScheduleTypeInput is an input type that accepts SnapshotScheduleTypeArgs and SnapshotScheduleTypeOutput values.
// You can construct a concrete instance of `SnapshotScheduleTypeInput` via:
//
//          SnapshotScheduleTypeArgs{...}
type SnapshotScheduleTypeInput interface {
	pulumi.Input

	ToSnapshotScheduleTypeOutput() SnapshotScheduleTypeOutput
	ToSnapshotScheduleTypeOutputWithContext(context.Context) SnapshotScheduleTypeOutput
}

// SnapshotSchedule is the Schema for the snapshotschedules API
type SnapshotScheduleTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// SnapshotScheduleSpec defines the desired state of SnapshotSchedule
	Spec SnapshotScheduleSpecPtrInput `pulumi:"spec"`
	// SnapshotScheduleStatus defines the observed state of SnapshotSchedule
	Status SnapshotScheduleStatusPtrInput `pulumi:"status"`
}

func (SnapshotScheduleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleType)(nil)).Elem()
}

func (i SnapshotScheduleTypeArgs) ToSnapshotScheduleTypeOutput() SnapshotScheduleTypeOutput {
	return i.ToSnapshotScheduleTypeOutputWithContext(context.Background())
}

func (i SnapshotScheduleTypeArgs) ToSnapshotScheduleTypeOutputWithContext(ctx context.Context) SnapshotScheduleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleTypeOutput)
}

// SnapshotSchedule is the Schema for the snapshotschedules API
type SnapshotScheduleTypeOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleType)(nil)).Elem()
}

func (o SnapshotScheduleTypeOutput) ToSnapshotScheduleTypeOutput() SnapshotScheduleTypeOutput {
	return o
}

func (o SnapshotScheduleTypeOutput) ToSnapshotScheduleTypeOutputWithContext(ctx context.Context) SnapshotScheduleTypeOutput {
	return o
}

func (o SnapshotScheduleTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o SnapshotScheduleTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o SnapshotScheduleTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// SnapshotScheduleSpec defines the desired state of SnapshotSchedule
func (o SnapshotScheduleTypeOutput) Spec() SnapshotScheduleSpecPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleType) *SnapshotScheduleSpec { return v.Spec }).(SnapshotScheduleSpecPtrOutput)
}

// SnapshotScheduleStatus defines the observed state of SnapshotSchedule
func (o SnapshotScheduleTypeOutput) Status() SnapshotScheduleStatusPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleType) *SnapshotScheduleStatus { return v.Status }).(SnapshotScheduleStatusPtrOutput)
}

type SnapshotScheduleMetadata struct {
}

// SnapshotScheduleMetadataInput is an input type that accepts SnapshotScheduleMetadataArgs and SnapshotScheduleMetadataOutput values.
// You can construct a concrete instance of `SnapshotScheduleMetadataInput` via:
//
//          SnapshotScheduleMetadataArgs{...}
type SnapshotScheduleMetadataInput interface {
	pulumi.Input

	ToSnapshotScheduleMetadataOutput() SnapshotScheduleMetadataOutput
	ToSnapshotScheduleMetadataOutputWithContext(context.Context) SnapshotScheduleMetadataOutput
}

type SnapshotScheduleMetadataArgs struct {
}

func (SnapshotScheduleMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleMetadata)(nil)).Elem()
}

func (i SnapshotScheduleMetadataArgs) ToSnapshotScheduleMetadataOutput() SnapshotScheduleMetadataOutput {
	return i.ToSnapshotScheduleMetadataOutputWithContext(context.Background())
}

func (i SnapshotScheduleMetadataArgs) ToSnapshotScheduleMetadataOutputWithContext(ctx context.Context) SnapshotScheduleMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleMetadataOutput)
}

type SnapshotScheduleMetadataOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleMetadata)(nil)).Elem()
}

func (o SnapshotScheduleMetadataOutput) ToSnapshotScheduleMetadataOutput() SnapshotScheduleMetadataOutput {
	return o
}

func (o SnapshotScheduleMetadataOutput) ToSnapshotScheduleMetadataOutputWithContext(ctx context.Context) SnapshotScheduleMetadataOutput {
	return o
}

// SnapshotScheduleSpec defines the desired state of SnapshotSchedule
type SnapshotScheduleSpec struct {
	// ClaimSelector selects which PVCs will be snapshotted according to this schedule.
	ClaimSelector *SnapshotScheduleSpecClaimSelector `pulumi:"claimSelector"`
	// Disabled determines whether this schedule is currently disabled.
	Disabled *bool `pulumi:"disabled"`
	// Retention determines how long this schedule's snapshots will be kept.
	Retention *SnapshotScheduleSpecRetention `pulumi:"retention"`
	// Schedule is a Cronspec specifying when snapshots should be taken. See https://en.wikipedia.org/wiki/Cron for a description of the format.
	Schedule *string `pulumi:"schedule"`
	// SnapshotTemplate is a template description of the Snapshots to be created.
	SnapshotTemplate *SnapshotScheduleSpecSnapshotTemplate `pulumi:"snapshotTemplate"`
}

// SnapshotScheduleSpecInput is an input type that accepts SnapshotScheduleSpecArgs and SnapshotScheduleSpecOutput values.
// You can construct a concrete instance of `SnapshotScheduleSpecInput` via:
//
//          SnapshotScheduleSpecArgs{...}
type SnapshotScheduleSpecInput interface {
	pulumi.Input

	ToSnapshotScheduleSpecOutput() SnapshotScheduleSpecOutput
	ToSnapshotScheduleSpecOutputWithContext(context.Context) SnapshotScheduleSpecOutput
}

// SnapshotScheduleSpec defines the desired state of SnapshotSchedule
type SnapshotScheduleSpecArgs struct {
	// ClaimSelector selects which PVCs will be snapshotted according to this schedule.
	ClaimSelector SnapshotScheduleSpecClaimSelectorPtrInput `pulumi:"claimSelector"`
	// Disabled determines whether this schedule is currently disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Retention determines how long this schedule's snapshots will be kept.
	Retention SnapshotScheduleSpecRetentionPtrInput `pulumi:"retention"`
	// Schedule is a Cronspec specifying when snapshots should be taken. See https://en.wikipedia.org/wiki/Cron for a description of the format.
	Schedule pulumi.StringPtrInput `pulumi:"schedule"`
	// SnapshotTemplate is a template description of the Snapshots to be created.
	SnapshotTemplate SnapshotScheduleSpecSnapshotTemplatePtrInput `pulumi:"snapshotTemplate"`
}

func (SnapshotScheduleSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleSpec)(nil)).Elem()
}

func (i SnapshotScheduleSpecArgs) ToSnapshotScheduleSpecOutput() SnapshotScheduleSpecOutput {
	return i.ToSnapshotScheduleSpecOutputWithContext(context.Background())
}

func (i SnapshotScheduleSpecArgs) ToSnapshotScheduleSpecOutputWithContext(ctx context.Context) SnapshotScheduleSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleSpecOutput)
}

func (i SnapshotScheduleSpecArgs) ToSnapshotScheduleSpecPtrOutput() SnapshotScheduleSpecPtrOutput {
	return i.ToSnapshotScheduleSpecPtrOutputWithContext(context.Background())
}

func (i SnapshotScheduleSpecArgs) ToSnapshotScheduleSpecPtrOutputWithContext(ctx context.Context) SnapshotScheduleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleSpecOutput).ToSnapshotScheduleSpecPtrOutputWithContext(ctx)
}

// SnapshotScheduleSpecPtrInput is an input type that accepts SnapshotScheduleSpecArgs, SnapshotScheduleSpecPtr and SnapshotScheduleSpecPtrOutput values.
// You can construct a concrete instance of `SnapshotScheduleSpecPtrInput` via:
//
//          SnapshotScheduleSpecArgs{...}
//
//  or:
//
//          nil
type SnapshotScheduleSpecPtrInput interface {
	pulumi.Input

	ToSnapshotScheduleSpecPtrOutput() SnapshotScheduleSpecPtrOutput
	ToSnapshotScheduleSpecPtrOutputWithContext(context.Context) SnapshotScheduleSpecPtrOutput
}

type snapshotScheduleSpecPtrType SnapshotScheduleSpecArgs

func SnapshotScheduleSpecPtr(v *SnapshotScheduleSpecArgs) SnapshotScheduleSpecPtrInput {
	return (*snapshotScheduleSpecPtrType)(v)
}

func (*snapshotScheduleSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotScheduleSpec)(nil)).Elem()
}

func (i *snapshotScheduleSpecPtrType) ToSnapshotScheduleSpecPtrOutput() SnapshotScheduleSpecPtrOutput {
	return i.ToSnapshotScheduleSpecPtrOutputWithContext(context.Background())
}

func (i *snapshotScheduleSpecPtrType) ToSnapshotScheduleSpecPtrOutputWithContext(ctx context.Context) SnapshotScheduleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleSpecPtrOutput)
}

// SnapshotScheduleSpec defines the desired state of SnapshotSchedule
type SnapshotScheduleSpecOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleSpec)(nil)).Elem()
}

func (o SnapshotScheduleSpecOutput) ToSnapshotScheduleSpecOutput() SnapshotScheduleSpecOutput {
	return o
}

func (o SnapshotScheduleSpecOutput) ToSnapshotScheduleSpecOutputWithContext(ctx context.Context) SnapshotScheduleSpecOutput {
	return o
}

func (o SnapshotScheduleSpecOutput) ToSnapshotScheduleSpecPtrOutput() SnapshotScheduleSpecPtrOutput {
	return o.ToSnapshotScheduleSpecPtrOutputWithContext(context.Background())
}

func (o SnapshotScheduleSpecOutput) ToSnapshotScheduleSpecPtrOutputWithContext(ctx context.Context) SnapshotScheduleSpecPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleSpec) *SnapshotScheduleSpec {
		return &v
	}).(SnapshotScheduleSpecPtrOutput)
}

// ClaimSelector selects which PVCs will be snapshotted according to this schedule.
func (o SnapshotScheduleSpecOutput) ClaimSelector() SnapshotScheduleSpecClaimSelectorPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleSpec) *SnapshotScheduleSpecClaimSelector { return v.ClaimSelector }).(SnapshotScheduleSpecClaimSelectorPtrOutput)
}

// Disabled determines whether this schedule is currently disabled.
func (o SnapshotScheduleSpecOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleSpec) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Retention determines how long this schedule's snapshots will be kept.
func (o SnapshotScheduleSpecOutput) Retention() SnapshotScheduleSpecRetentionPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleSpec) *SnapshotScheduleSpecRetention { return v.Retention }).(SnapshotScheduleSpecRetentionPtrOutput)
}

// Schedule is a Cronspec specifying when snapshots should be taken. See https://en.wikipedia.org/wiki/Cron for a description of the format.
func (o SnapshotScheduleSpecOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleSpec) *string { return v.Schedule }).(pulumi.StringPtrOutput)
}

// SnapshotTemplate is a template description of the Snapshots to be created.
func (o SnapshotScheduleSpecOutput) SnapshotTemplate() SnapshotScheduleSpecSnapshotTemplatePtrOutput {
	return o.ApplyT(func(v SnapshotScheduleSpec) *SnapshotScheduleSpecSnapshotTemplate { return v.SnapshotTemplate }).(SnapshotScheduleSpecSnapshotTemplatePtrOutput)
}

type SnapshotScheduleSpecPtrOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotScheduleSpec)(nil)).Elem()
}

func (o SnapshotScheduleSpecPtrOutput) ToSnapshotScheduleSpecPtrOutput() SnapshotScheduleSpecPtrOutput {
	return o
}

func (o SnapshotScheduleSpecPtrOutput) ToSnapshotScheduleSpecPtrOutputWithContext(ctx context.Context) SnapshotScheduleSpecPtrOutput {
	return o
}

func (o SnapshotScheduleSpecPtrOutput) Elem() SnapshotScheduleSpecOutput {
	return o.ApplyT(func(v *SnapshotScheduleSpec) SnapshotScheduleSpec { return *v }).(SnapshotScheduleSpecOutput)
}

// ClaimSelector selects which PVCs will be snapshotted according to this schedule.
func (o SnapshotScheduleSpecPtrOutput) ClaimSelector() SnapshotScheduleSpecClaimSelectorPtrOutput {
	return o.ApplyT(func(v *SnapshotScheduleSpec) *SnapshotScheduleSpecClaimSelector {
		if v == nil {
			return nil
		}
		return v.ClaimSelector
	}).(SnapshotScheduleSpecClaimSelectorPtrOutput)
}

// Disabled determines whether this schedule is currently disabled.
func (o SnapshotScheduleSpecPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnapshotScheduleSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Retention determines how long this schedule's snapshots will be kept.
func (o SnapshotScheduleSpecPtrOutput) Retention() SnapshotScheduleSpecRetentionPtrOutput {
	return o.ApplyT(func(v *SnapshotScheduleSpec) *SnapshotScheduleSpecRetention {
		if v == nil {
			return nil
		}
		return v.Retention
	}).(SnapshotScheduleSpecRetentionPtrOutput)
}

// Schedule is a Cronspec specifying when snapshots should be taken. See https://en.wikipedia.org/wiki/Cron for a description of the format.
func (o SnapshotScheduleSpecPtrOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotScheduleSpec) *string {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(pulumi.StringPtrOutput)
}

// SnapshotTemplate is a template description of the Snapshots to be created.
func (o SnapshotScheduleSpecPtrOutput) SnapshotTemplate() SnapshotScheduleSpecSnapshotTemplatePtrOutput {
	return o.ApplyT(func(v *SnapshotScheduleSpec) *SnapshotScheduleSpecSnapshotTemplate {
		if v == nil {
			return nil
		}
		return v.SnapshotTemplate
	}).(SnapshotScheduleSpecSnapshotTemplatePtrOutput)
}

// ClaimSelector selects which PVCs will be snapshotted according to this schedule.
type SnapshotScheduleSpecClaimSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []SnapshotScheduleSpecClaimSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// SnapshotScheduleSpecClaimSelectorInput is an input type that accepts SnapshotScheduleSpecClaimSelectorArgs and SnapshotScheduleSpecClaimSelectorOutput values.
// You can construct a concrete instance of `SnapshotScheduleSpecClaimSelectorInput` via:
//
//          SnapshotScheduleSpecClaimSelectorArgs{...}
type SnapshotScheduleSpecClaimSelectorInput interface {
	pulumi.Input

	ToSnapshotScheduleSpecClaimSelectorOutput() SnapshotScheduleSpecClaimSelectorOutput
	ToSnapshotScheduleSpecClaimSelectorOutputWithContext(context.Context) SnapshotScheduleSpecClaimSelectorOutput
}

// ClaimSelector selects which PVCs will be snapshotted according to this schedule.
type SnapshotScheduleSpecClaimSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (SnapshotScheduleSpecClaimSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleSpecClaimSelector)(nil)).Elem()
}

func (i SnapshotScheduleSpecClaimSelectorArgs) ToSnapshotScheduleSpecClaimSelectorOutput() SnapshotScheduleSpecClaimSelectorOutput {
	return i.ToSnapshotScheduleSpecClaimSelectorOutputWithContext(context.Background())
}

func (i SnapshotScheduleSpecClaimSelectorArgs) ToSnapshotScheduleSpecClaimSelectorOutputWithContext(ctx context.Context) SnapshotScheduleSpecClaimSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleSpecClaimSelectorOutput)
}

func (i SnapshotScheduleSpecClaimSelectorArgs) ToSnapshotScheduleSpecClaimSelectorPtrOutput() SnapshotScheduleSpecClaimSelectorPtrOutput {
	return i.ToSnapshotScheduleSpecClaimSelectorPtrOutputWithContext(context.Background())
}

func (i SnapshotScheduleSpecClaimSelectorArgs) ToSnapshotScheduleSpecClaimSelectorPtrOutputWithContext(ctx context.Context) SnapshotScheduleSpecClaimSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleSpecClaimSelectorOutput).ToSnapshotScheduleSpecClaimSelectorPtrOutputWithContext(ctx)
}

// SnapshotScheduleSpecClaimSelectorPtrInput is an input type that accepts SnapshotScheduleSpecClaimSelectorArgs, SnapshotScheduleSpecClaimSelectorPtr and SnapshotScheduleSpecClaimSelectorPtrOutput values.
// You can construct a concrete instance of `SnapshotScheduleSpecClaimSelectorPtrInput` via:
//
//          SnapshotScheduleSpecClaimSelectorArgs{...}
//
//  or:
//
//          nil
type SnapshotScheduleSpecClaimSelectorPtrInput interface {
	pulumi.Input

	ToSnapshotScheduleSpecClaimSelectorPtrOutput() SnapshotScheduleSpecClaimSelectorPtrOutput
	ToSnapshotScheduleSpecClaimSelectorPtrOutputWithContext(context.Context) SnapshotScheduleSpecClaimSelectorPtrOutput
}

type snapshotScheduleSpecClaimSelectorPtrType SnapshotScheduleSpecClaimSelectorArgs

func SnapshotScheduleSpecClaimSelectorPtr(v *SnapshotScheduleSpecClaimSelectorArgs) SnapshotScheduleSpecClaimSelectorPtrInput {
	return (*snapshotScheduleSpecClaimSelectorPtrType)(v)
}

func (*snapshotScheduleSpecClaimSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotScheduleSpecClaimSelector)(nil)).Elem()
}

func (i *snapshotScheduleSpecClaimSelectorPtrType) ToSnapshotScheduleSpecClaimSelectorPtrOutput() SnapshotScheduleSpecClaimSelectorPtrOutput {
	return i.ToSnapshotScheduleSpecClaimSelectorPtrOutputWithContext(context.Background())
}

func (i *snapshotScheduleSpecClaimSelectorPtrType) ToSnapshotScheduleSpecClaimSelectorPtrOutputWithContext(ctx context.Context) SnapshotScheduleSpecClaimSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleSpecClaimSelectorPtrOutput)
}

// ClaimSelector selects which PVCs will be snapshotted according to this schedule.
type SnapshotScheduleSpecClaimSelectorOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleSpecClaimSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleSpecClaimSelector)(nil)).Elem()
}

func (o SnapshotScheduleSpecClaimSelectorOutput) ToSnapshotScheduleSpecClaimSelectorOutput() SnapshotScheduleSpecClaimSelectorOutput {
	return o
}

func (o SnapshotScheduleSpecClaimSelectorOutput) ToSnapshotScheduleSpecClaimSelectorOutputWithContext(ctx context.Context) SnapshotScheduleSpecClaimSelectorOutput {
	return o
}

func (o SnapshotScheduleSpecClaimSelectorOutput) ToSnapshotScheduleSpecClaimSelectorPtrOutput() SnapshotScheduleSpecClaimSelectorPtrOutput {
	return o.ToSnapshotScheduleSpecClaimSelectorPtrOutputWithContext(context.Background())
}

func (o SnapshotScheduleSpecClaimSelectorOutput) ToSnapshotScheduleSpecClaimSelectorPtrOutputWithContext(ctx context.Context) SnapshotScheduleSpecClaimSelectorPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleSpecClaimSelector) *SnapshotScheduleSpecClaimSelector {
		return &v
	}).(SnapshotScheduleSpecClaimSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o SnapshotScheduleSpecClaimSelectorOutput) MatchExpressions() SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v SnapshotScheduleSpecClaimSelector) []SnapshotScheduleSpecClaimSelectorMatchExpressions {
		return v.MatchExpressions
	}).(SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o SnapshotScheduleSpecClaimSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v SnapshotScheduleSpecClaimSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type SnapshotScheduleSpecClaimSelectorPtrOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleSpecClaimSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotScheduleSpecClaimSelector)(nil)).Elem()
}

func (o SnapshotScheduleSpecClaimSelectorPtrOutput) ToSnapshotScheduleSpecClaimSelectorPtrOutput() SnapshotScheduleSpecClaimSelectorPtrOutput {
	return o
}

func (o SnapshotScheduleSpecClaimSelectorPtrOutput) ToSnapshotScheduleSpecClaimSelectorPtrOutputWithContext(ctx context.Context) SnapshotScheduleSpecClaimSelectorPtrOutput {
	return o
}

func (o SnapshotScheduleSpecClaimSelectorPtrOutput) Elem() SnapshotScheduleSpecClaimSelectorOutput {
	return o.ApplyT(func(v *SnapshotScheduleSpecClaimSelector) SnapshotScheduleSpecClaimSelector { return *v }).(SnapshotScheduleSpecClaimSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o SnapshotScheduleSpecClaimSelectorPtrOutput) MatchExpressions() SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *SnapshotScheduleSpecClaimSelector) []SnapshotScheduleSpecClaimSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o SnapshotScheduleSpecClaimSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SnapshotScheduleSpecClaimSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type SnapshotScheduleSpecClaimSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// SnapshotScheduleSpecClaimSelectorMatchExpressionsInput is an input type that accepts SnapshotScheduleSpecClaimSelectorMatchExpressionsArgs and SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `SnapshotScheduleSpecClaimSelectorMatchExpressionsInput` via:
//
//          SnapshotScheduleSpecClaimSelectorMatchExpressionsArgs{...}
type SnapshotScheduleSpecClaimSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToSnapshotScheduleSpecClaimSelectorMatchExpressionsOutput() SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput
	ToSnapshotScheduleSpecClaimSelectorMatchExpressionsOutputWithContext(context.Context) SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type SnapshotScheduleSpecClaimSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (SnapshotScheduleSpecClaimSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleSpecClaimSelectorMatchExpressions)(nil)).Elem()
}

func (i SnapshotScheduleSpecClaimSelectorMatchExpressionsArgs) ToSnapshotScheduleSpecClaimSelectorMatchExpressionsOutput() SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput {
	return i.ToSnapshotScheduleSpecClaimSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i SnapshotScheduleSpecClaimSelectorMatchExpressionsArgs) ToSnapshotScheduleSpecClaimSelectorMatchExpressionsOutputWithContext(ctx context.Context) SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput)
}

// SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayInput is an input type that accepts SnapshotScheduleSpecClaimSelectorMatchExpressionsArray and SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayInput` via:
//
//          SnapshotScheduleSpecClaimSelectorMatchExpressionsArray{ SnapshotScheduleSpecClaimSelectorMatchExpressionsArgs{...} }
type SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToSnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput() SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput
	ToSnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutputWithContext(context.Context) SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput
}

type SnapshotScheduleSpecClaimSelectorMatchExpressionsArray []SnapshotScheduleSpecClaimSelectorMatchExpressionsInput

func (SnapshotScheduleSpecClaimSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnapshotScheduleSpecClaimSelectorMatchExpressions)(nil)).Elem()
}

func (i SnapshotScheduleSpecClaimSelectorMatchExpressionsArray) ToSnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput() SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput {
	return i.ToSnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i SnapshotScheduleSpecClaimSelectorMatchExpressionsArray) ToSnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleSpecClaimSelectorMatchExpressions)(nil)).Elem()
}

func (o SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput) ToSnapshotScheduleSpecClaimSelectorMatchExpressionsOutput() SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput {
	return o
}

func (o SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput) ToSnapshotScheduleSpecClaimSelectorMatchExpressionsOutputWithContext(ctx context.Context) SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotScheduleSpecClaimSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotScheduleSpecClaimSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SnapshotScheduleSpecClaimSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnapshotScheduleSpecClaimSelectorMatchExpressions)(nil)).Elem()
}

func (o SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput) ToSnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput() SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput {
	return o
}

func (o SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput) ToSnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput {
	return o
}

func (o SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SnapshotScheduleSpecClaimSelectorMatchExpressions {
		return vs[0].([]SnapshotScheduleSpecClaimSelectorMatchExpressions)[vs[1].(int)]
	}).(SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type SnapshotScheduleSpecClaimSelectorMatchLabels struct {
}

// SnapshotScheduleSpecClaimSelectorMatchLabelsInput is an input type that accepts SnapshotScheduleSpecClaimSelectorMatchLabelsArgs and SnapshotScheduleSpecClaimSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `SnapshotScheduleSpecClaimSelectorMatchLabelsInput` via:
//
//          SnapshotScheduleSpecClaimSelectorMatchLabelsArgs{...}
type SnapshotScheduleSpecClaimSelectorMatchLabelsInput interface {
	pulumi.Input

	ToSnapshotScheduleSpecClaimSelectorMatchLabelsOutput() SnapshotScheduleSpecClaimSelectorMatchLabelsOutput
	ToSnapshotScheduleSpecClaimSelectorMatchLabelsOutputWithContext(context.Context) SnapshotScheduleSpecClaimSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type SnapshotScheduleSpecClaimSelectorMatchLabelsArgs struct {
}

func (SnapshotScheduleSpecClaimSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleSpecClaimSelectorMatchLabels)(nil)).Elem()
}

func (i SnapshotScheduleSpecClaimSelectorMatchLabelsArgs) ToSnapshotScheduleSpecClaimSelectorMatchLabelsOutput() SnapshotScheduleSpecClaimSelectorMatchLabelsOutput {
	return i.ToSnapshotScheduleSpecClaimSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i SnapshotScheduleSpecClaimSelectorMatchLabelsArgs) ToSnapshotScheduleSpecClaimSelectorMatchLabelsOutputWithContext(ctx context.Context) SnapshotScheduleSpecClaimSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleSpecClaimSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type SnapshotScheduleSpecClaimSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleSpecClaimSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleSpecClaimSelectorMatchLabels)(nil)).Elem()
}

func (o SnapshotScheduleSpecClaimSelectorMatchLabelsOutput) ToSnapshotScheduleSpecClaimSelectorMatchLabelsOutput() SnapshotScheduleSpecClaimSelectorMatchLabelsOutput {
	return o
}

func (o SnapshotScheduleSpecClaimSelectorMatchLabelsOutput) ToSnapshotScheduleSpecClaimSelectorMatchLabelsOutputWithContext(ctx context.Context) SnapshotScheduleSpecClaimSelectorMatchLabelsOutput {
	return o
}

// Retention determines how long this schedule's snapshots will be kept.
type SnapshotScheduleSpecRetention struct {
	// Expires is the length of time (time.Duration) after which a given Snapshot will be deleted.
	Expires  *string `pulumi:"expires"`
	MaxCount *int    `pulumi:"maxCount"`
}

// SnapshotScheduleSpecRetentionInput is an input type that accepts SnapshotScheduleSpecRetentionArgs and SnapshotScheduleSpecRetentionOutput values.
// You can construct a concrete instance of `SnapshotScheduleSpecRetentionInput` via:
//
//          SnapshotScheduleSpecRetentionArgs{...}
type SnapshotScheduleSpecRetentionInput interface {
	pulumi.Input

	ToSnapshotScheduleSpecRetentionOutput() SnapshotScheduleSpecRetentionOutput
	ToSnapshotScheduleSpecRetentionOutputWithContext(context.Context) SnapshotScheduleSpecRetentionOutput
}

// Retention determines how long this schedule's snapshots will be kept.
type SnapshotScheduleSpecRetentionArgs struct {
	// Expires is the length of time (time.Duration) after which a given Snapshot will be deleted.
	Expires  pulumi.StringPtrInput `pulumi:"expires"`
	MaxCount pulumi.IntPtrInput    `pulumi:"maxCount"`
}

func (SnapshotScheduleSpecRetentionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleSpecRetention)(nil)).Elem()
}

func (i SnapshotScheduleSpecRetentionArgs) ToSnapshotScheduleSpecRetentionOutput() SnapshotScheduleSpecRetentionOutput {
	return i.ToSnapshotScheduleSpecRetentionOutputWithContext(context.Background())
}

func (i SnapshotScheduleSpecRetentionArgs) ToSnapshotScheduleSpecRetentionOutputWithContext(ctx context.Context) SnapshotScheduleSpecRetentionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleSpecRetentionOutput)
}

func (i SnapshotScheduleSpecRetentionArgs) ToSnapshotScheduleSpecRetentionPtrOutput() SnapshotScheduleSpecRetentionPtrOutput {
	return i.ToSnapshotScheduleSpecRetentionPtrOutputWithContext(context.Background())
}

func (i SnapshotScheduleSpecRetentionArgs) ToSnapshotScheduleSpecRetentionPtrOutputWithContext(ctx context.Context) SnapshotScheduleSpecRetentionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleSpecRetentionOutput).ToSnapshotScheduleSpecRetentionPtrOutputWithContext(ctx)
}

// SnapshotScheduleSpecRetentionPtrInput is an input type that accepts SnapshotScheduleSpecRetentionArgs, SnapshotScheduleSpecRetentionPtr and SnapshotScheduleSpecRetentionPtrOutput values.
// You can construct a concrete instance of `SnapshotScheduleSpecRetentionPtrInput` via:
//
//          SnapshotScheduleSpecRetentionArgs{...}
//
//  or:
//
//          nil
type SnapshotScheduleSpecRetentionPtrInput interface {
	pulumi.Input

	ToSnapshotScheduleSpecRetentionPtrOutput() SnapshotScheduleSpecRetentionPtrOutput
	ToSnapshotScheduleSpecRetentionPtrOutputWithContext(context.Context) SnapshotScheduleSpecRetentionPtrOutput
}

type snapshotScheduleSpecRetentionPtrType SnapshotScheduleSpecRetentionArgs

func SnapshotScheduleSpecRetentionPtr(v *SnapshotScheduleSpecRetentionArgs) SnapshotScheduleSpecRetentionPtrInput {
	return (*snapshotScheduleSpecRetentionPtrType)(v)
}

func (*snapshotScheduleSpecRetentionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotScheduleSpecRetention)(nil)).Elem()
}

func (i *snapshotScheduleSpecRetentionPtrType) ToSnapshotScheduleSpecRetentionPtrOutput() SnapshotScheduleSpecRetentionPtrOutput {
	return i.ToSnapshotScheduleSpecRetentionPtrOutputWithContext(context.Background())
}

func (i *snapshotScheduleSpecRetentionPtrType) ToSnapshotScheduleSpecRetentionPtrOutputWithContext(ctx context.Context) SnapshotScheduleSpecRetentionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleSpecRetentionPtrOutput)
}

// Retention determines how long this schedule's snapshots will be kept.
type SnapshotScheduleSpecRetentionOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleSpecRetentionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleSpecRetention)(nil)).Elem()
}

func (o SnapshotScheduleSpecRetentionOutput) ToSnapshotScheduleSpecRetentionOutput() SnapshotScheduleSpecRetentionOutput {
	return o
}

func (o SnapshotScheduleSpecRetentionOutput) ToSnapshotScheduleSpecRetentionOutputWithContext(ctx context.Context) SnapshotScheduleSpecRetentionOutput {
	return o
}

func (o SnapshotScheduleSpecRetentionOutput) ToSnapshotScheduleSpecRetentionPtrOutput() SnapshotScheduleSpecRetentionPtrOutput {
	return o.ToSnapshotScheduleSpecRetentionPtrOutputWithContext(context.Background())
}

func (o SnapshotScheduleSpecRetentionOutput) ToSnapshotScheduleSpecRetentionPtrOutputWithContext(ctx context.Context) SnapshotScheduleSpecRetentionPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleSpecRetention) *SnapshotScheduleSpecRetention {
		return &v
	}).(SnapshotScheduleSpecRetentionPtrOutput)
}

// Expires is the length of time (time.Duration) after which a given Snapshot will be deleted.
func (o SnapshotScheduleSpecRetentionOutput) Expires() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleSpecRetention) *string { return v.Expires }).(pulumi.StringPtrOutput)
}

func (o SnapshotScheduleSpecRetentionOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleSpecRetention) *int { return v.MaxCount }).(pulumi.IntPtrOutput)
}

type SnapshotScheduleSpecRetentionPtrOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleSpecRetentionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotScheduleSpecRetention)(nil)).Elem()
}

func (o SnapshotScheduleSpecRetentionPtrOutput) ToSnapshotScheduleSpecRetentionPtrOutput() SnapshotScheduleSpecRetentionPtrOutput {
	return o
}

func (o SnapshotScheduleSpecRetentionPtrOutput) ToSnapshotScheduleSpecRetentionPtrOutputWithContext(ctx context.Context) SnapshotScheduleSpecRetentionPtrOutput {
	return o
}

func (o SnapshotScheduleSpecRetentionPtrOutput) Elem() SnapshotScheduleSpecRetentionOutput {
	return o.ApplyT(func(v *SnapshotScheduleSpecRetention) SnapshotScheduleSpecRetention { return *v }).(SnapshotScheduleSpecRetentionOutput)
}

// Expires is the length of time (time.Duration) after which a given Snapshot will be deleted.
func (o SnapshotScheduleSpecRetentionPtrOutput) Expires() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotScheduleSpecRetention) *string {
		if v == nil {
			return nil
		}
		return v.Expires
	}).(pulumi.StringPtrOutput)
}

func (o SnapshotScheduleSpecRetentionPtrOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotScheduleSpecRetention) *int {
		if v == nil {
			return nil
		}
		return v.MaxCount
	}).(pulumi.IntPtrOutput)
}

// SnapshotTemplate is a template description of the Snapshots to be created.
type SnapshotScheduleSpecSnapshotTemplate struct {
	// Labels is a list of labels that should be added to each Snapshot created by this schedule.
	Labels map[string]string `pulumi:"labels"`
	// SnapshotClassName is the name of the VSC to be used when creating Snapshots.
	SnapshotClassName *string `pulumi:"snapshotClassName"`
}

// SnapshotScheduleSpecSnapshotTemplateInput is an input type that accepts SnapshotScheduleSpecSnapshotTemplateArgs and SnapshotScheduleSpecSnapshotTemplateOutput values.
// You can construct a concrete instance of `SnapshotScheduleSpecSnapshotTemplateInput` via:
//
//          SnapshotScheduleSpecSnapshotTemplateArgs{...}
type SnapshotScheduleSpecSnapshotTemplateInput interface {
	pulumi.Input

	ToSnapshotScheduleSpecSnapshotTemplateOutput() SnapshotScheduleSpecSnapshotTemplateOutput
	ToSnapshotScheduleSpecSnapshotTemplateOutputWithContext(context.Context) SnapshotScheduleSpecSnapshotTemplateOutput
}

// SnapshotTemplate is a template description of the Snapshots to be created.
type SnapshotScheduleSpecSnapshotTemplateArgs struct {
	// Labels is a list of labels that should be added to each Snapshot created by this schedule.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// SnapshotClassName is the name of the VSC to be used when creating Snapshots.
	SnapshotClassName pulumi.StringPtrInput `pulumi:"snapshotClassName"`
}

func (SnapshotScheduleSpecSnapshotTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleSpecSnapshotTemplate)(nil)).Elem()
}

func (i SnapshotScheduleSpecSnapshotTemplateArgs) ToSnapshotScheduleSpecSnapshotTemplateOutput() SnapshotScheduleSpecSnapshotTemplateOutput {
	return i.ToSnapshotScheduleSpecSnapshotTemplateOutputWithContext(context.Background())
}

func (i SnapshotScheduleSpecSnapshotTemplateArgs) ToSnapshotScheduleSpecSnapshotTemplateOutputWithContext(ctx context.Context) SnapshotScheduleSpecSnapshotTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleSpecSnapshotTemplateOutput)
}

func (i SnapshotScheduleSpecSnapshotTemplateArgs) ToSnapshotScheduleSpecSnapshotTemplatePtrOutput() SnapshotScheduleSpecSnapshotTemplatePtrOutput {
	return i.ToSnapshotScheduleSpecSnapshotTemplatePtrOutputWithContext(context.Background())
}

func (i SnapshotScheduleSpecSnapshotTemplateArgs) ToSnapshotScheduleSpecSnapshotTemplatePtrOutputWithContext(ctx context.Context) SnapshotScheduleSpecSnapshotTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleSpecSnapshotTemplateOutput).ToSnapshotScheduleSpecSnapshotTemplatePtrOutputWithContext(ctx)
}

// SnapshotScheduleSpecSnapshotTemplatePtrInput is an input type that accepts SnapshotScheduleSpecSnapshotTemplateArgs, SnapshotScheduleSpecSnapshotTemplatePtr and SnapshotScheduleSpecSnapshotTemplatePtrOutput values.
// You can construct a concrete instance of `SnapshotScheduleSpecSnapshotTemplatePtrInput` via:
//
//          SnapshotScheduleSpecSnapshotTemplateArgs{...}
//
//  or:
//
//          nil
type SnapshotScheduleSpecSnapshotTemplatePtrInput interface {
	pulumi.Input

	ToSnapshotScheduleSpecSnapshotTemplatePtrOutput() SnapshotScheduleSpecSnapshotTemplatePtrOutput
	ToSnapshotScheduleSpecSnapshotTemplatePtrOutputWithContext(context.Context) SnapshotScheduleSpecSnapshotTemplatePtrOutput
}

type snapshotScheduleSpecSnapshotTemplatePtrType SnapshotScheduleSpecSnapshotTemplateArgs

func SnapshotScheduleSpecSnapshotTemplatePtr(v *SnapshotScheduleSpecSnapshotTemplateArgs) SnapshotScheduleSpecSnapshotTemplatePtrInput {
	return (*snapshotScheduleSpecSnapshotTemplatePtrType)(v)
}

func (*snapshotScheduleSpecSnapshotTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotScheduleSpecSnapshotTemplate)(nil)).Elem()
}

func (i *snapshotScheduleSpecSnapshotTemplatePtrType) ToSnapshotScheduleSpecSnapshotTemplatePtrOutput() SnapshotScheduleSpecSnapshotTemplatePtrOutput {
	return i.ToSnapshotScheduleSpecSnapshotTemplatePtrOutputWithContext(context.Background())
}

func (i *snapshotScheduleSpecSnapshotTemplatePtrType) ToSnapshotScheduleSpecSnapshotTemplatePtrOutputWithContext(ctx context.Context) SnapshotScheduleSpecSnapshotTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleSpecSnapshotTemplatePtrOutput)
}

// SnapshotTemplate is a template description of the Snapshots to be created.
type SnapshotScheduleSpecSnapshotTemplateOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleSpecSnapshotTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleSpecSnapshotTemplate)(nil)).Elem()
}

func (o SnapshotScheduleSpecSnapshotTemplateOutput) ToSnapshotScheduleSpecSnapshotTemplateOutput() SnapshotScheduleSpecSnapshotTemplateOutput {
	return o
}

func (o SnapshotScheduleSpecSnapshotTemplateOutput) ToSnapshotScheduleSpecSnapshotTemplateOutputWithContext(ctx context.Context) SnapshotScheduleSpecSnapshotTemplateOutput {
	return o
}

func (o SnapshotScheduleSpecSnapshotTemplateOutput) ToSnapshotScheduleSpecSnapshotTemplatePtrOutput() SnapshotScheduleSpecSnapshotTemplatePtrOutput {
	return o.ToSnapshotScheduleSpecSnapshotTemplatePtrOutputWithContext(context.Background())
}

func (o SnapshotScheduleSpecSnapshotTemplateOutput) ToSnapshotScheduleSpecSnapshotTemplatePtrOutputWithContext(ctx context.Context) SnapshotScheduleSpecSnapshotTemplatePtrOutput {
	return o.ApplyT(func(v SnapshotScheduleSpecSnapshotTemplate) *SnapshotScheduleSpecSnapshotTemplate {
		return &v
	}).(SnapshotScheduleSpecSnapshotTemplatePtrOutput)
}

// Labels is a list of labels that should be added to each Snapshot created by this schedule.
func (o SnapshotScheduleSpecSnapshotTemplateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v SnapshotScheduleSpecSnapshotTemplate) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// SnapshotClassName is the name of the VSC to be used when creating Snapshots.
func (o SnapshotScheduleSpecSnapshotTemplateOutput) SnapshotClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleSpecSnapshotTemplate) *string { return v.SnapshotClassName }).(pulumi.StringPtrOutput)
}

type SnapshotScheduleSpecSnapshotTemplatePtrOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleSpecSnapshotTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotScheduleSpecSnapshotTemplate)(nil)).Elem()
}

func (o SnapshotScheduleSpecSnapshotTemplatePtrOutput) ToSnapshotScheduleSpecSnapshotTemplatePtrOutput() SnapshotScheduleSpecSnapshotTemplatePtrOutput {
	return o
}

func (o SnapshotScheduleSpecSnapshotTemplatePtrOutput) ToSnapshotScheduleSpecSnapshotTemplatePtrOutputWithContext(ctx context.Context) SnapshotScheduleSpecSnapshotTemplatePtrOutput {
	return o
}

func (o SnapshotScheduleSpecSnapshotTemplatePtrOutput) Elem() SnapshotScheduleSpecSnapshotTemplateOutput {
	return o.ApplyT(func(v *SnapshotScheduleSpecSnapshotTemplate) SnapshotScheduleSpecSnapshotTemplate { return *v }).(SnapshotScheduleSpecSnapshotTemplateOutput)
}

// Labels is a list of labels that should be added to each Snapshot created by this schedule.
func (o SnapshotScheduleSpecSnapshotTemplatePtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SnapshotScheduleSpecSnapshotTemplate) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// SnapshotClassName is the name of the VSC to be used when creating Snapshots.
func (o SnapshotScheduleSpecSnapshotTemplatePtrOutput) SnapshotClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotScheduleSpecSnapshotTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotClassName
	}).(pulumi.StringPtrOutput)
}

// Labels is a list of labels that should be added to each Snapshot created by this schedule.
type SnapshotScheduleSpecSnapshotTemplateLabels struct {
}

// SnapshotScheduleSpecSnapshotTemplateLabelsInput is an input type that accepts SnapshotScheduleSpecSnapshotTemplateLabelsArgs and SnapshotScheduleSpecSnapshotTemplateLabelsOutput values.
// You can construct a concrete instance of `SnapshotScheduleSpecSnapshotTemplateLabelsInput` via:
//
//          SnapshotScheduleSpecSnapshotTemplateLabelsArgs{...}
type SnapshotScheduleSpecSnapshotTemplateLabelsInput interface {
	pulumi.Input

	ToSnapshotScheduleSpecSnapshotTemplateLabelsOutput() SnapshotScheduleSpecSnapshotTemplateLabelsOutput
	ToSnapshotScheduleSpecSnapshotTemplateLabelsOutputWithContext(context.Context) SnapshotScheduleSpecSnapshotTemplateLabelsOutput
}

// Labels is a list of labels that should be added to each Snapshot created by this schedule.
type SnapshotScheduleSpecSnapshotTemplateLabelsArgs struct {
}

func (SnapshotScheduleSpecSnapshotTemplateLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleSpecSnapshotTemplateLabels)(nil)).Elem()
}

func (i SnapshotScheduleSpecSnapshotTemplateLabelsArgs) ToSnapshotScheduleSpecSnapshotTemplateLabelsOutput() SnapshotScheduleSpecSnapshotTemplateLabelsOutput {
	return i.ToSnapshotScheduleSpecSnapshotTemplateLabelsOutputWithContext(context.Background())
}

func (i SnapshotScheduleSpecSnapshotTemplateLabelsArgs) ToSnapshotScheduleSpecSnapshotTemplateLabelsOutputWithContext(ctx context.Context) SnapshotScheduleSpecSnapshotTemplateLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleSpecSnapshotTemplateLabelsOutput)
}

// Labels is a list of labels that should be added to each Snapshot created by this schedule.
type SnapshotScheduleSpecSnapshotTemplateLabelsOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleSpecSnapshotTemplateLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleSpecSnapshotTemplateLabels)(nil)).Elem()
}

func (o SnapshotScheduleSpecSnapshotTemplateLabelsOutput) ToSnapshotScheduleSpecSnapshotTemplateLabelsOutput() SnapshotScheduleSpecSnapshotTemplateLabelsOutput {
	return o
}

func (o SnapshotScheduleSpecSnapshotTemplateLabelsOutput) ToSnapshotScheduleSpecSnapshotTemplateLabelsOutputWithContext(ctx context.Context) SnapshotScheduleSpecSnapshotTemplateLabelsOutput {
	return o
}

// SnapshotScheduleStatus defines the observed state of SnapshotSchedule
type SnapshotScheduleStatus struct {
	// Conditions is a list of conditions related to operator reconciliation.
	Conditions []SnapshotScheduleStatusConditions `pulumi:"conditions"`
	// LastSnapshotTime is the time of the most recent set of snapshots generated by this schedule.
	LastSnapshotTime *string `pulumi:"lastSnapshotTime"`
	// NextSnapshotTime is the time when this schedule should create the next set of snapshots.
	NextSnapshotTime *string `pulumi:"nextSnapshotTime"`
}

// SnapshotScheduleStatusInput is an input type that accepts SnapshotScheduleStatusArgs and SnapshotScheduleStatusOutput values.
// You can construct a concrete instance of `SnapshotScheduleStatusInput` via:
//
//          SnapshotScheduleStatusArgs{...}
type SnapshotScheduleStatusInput interface {
	pulumi.Input

	ToSnapshotScheduleStatusOutput() SnapshotScheduleStatusOutput
	ToSnapshotScheduleStatusOutputWithContext(context.Context) SnapshotScheduleStatusOutput
}

// SnapshotScheduleStatus defines the observed state of SnapshotSchedule
type SnapshotScheduleStatusArgs struct {
	// Conditions is a list of conditions related to operator reconciliation.
	Conditions SnapshotScheduleStatusConditionsArrayInput `pulumi:"conditions"`
	// LastSnapshotTime is the time of the most recent set of snapshots generated by this schedule.
	LastSnapshotTime pulumi.StringPtrInput `pulumi:"lastSnapshotTime"`
	// NextSnapshotTime is the time when this schedule should create the next set of snapshots.
	NextSnapshotTime pulumi.StringPtrInput `pulumi:"nextSnapshotTime"`
}

func (SnapshotScheduleStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleStatus)(nil)).Elem()
}

func (i SnapshotScheduleStatusArgs) ToSnapshotScheduleStatusOutput() SnapshotScheduleStatusOutput {
	return i.ToSnapshotScheduleStatusOutputWithContext(context.Background())
}

func (i SnapshotScheduleStatusArgs) ToSnapshotScheduleStatusOutputWithContext(ctx context.Context) SnapshotScheduleStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleStatusOutput)
}

func (i SnapshotScheduleStatusArgs) ToSnapshotScheduleStatusPtrOutput() SnapshotScheduleStatusPtrOutput {
	return i.ToSnapshotScheduleStatusPtrOutputWithContext(context.Background())
}

func (i SnapshotScheduleStatusArgs) ToSnapshotScheduleStatusPtrOutputWithContext(ctx context.Context) SnapshotScheduleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleStatusOutput).ToSnapshotScheduleStatusPtrOutputWithContext(ctx)
}

// SnapshotScheduleStatusPtrInput is an input type that accepts SnapshotScheduleStatusArgs, SnapshotScheduleStatusPtr and SnapshotScheduleStatusPtrOutput values.
// You can construct a concrete instance of `SnapshotScheduleStatusPtrInput` via:
//
//          SnapshotScheduleStatusArgs{...}
//
//  or:
//
//          nil
type SnapshotScheduleStatusPtrInput interface {
	pulumi.Input

	ToSnapshotScheduleStatusPtrOutput() SnapshotScheduleStatusPtrOutput
	ToSnapshotScheduleStatusPtrOutputWithContext(context.Context) SnapshotScheduleStatusPtrOutput
}

type snapshotScheduleStatusPtrType SnapshotScheduleStatusArgs

func SnapshotScheduleStatusPtr(v *SnapshotScheduleStatusArgs) SnapshotScheduleStatusPtrInput {
	return (*snapshotScheduleStatusPtrType)(v)
}

func (*snapshotScheduleStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotScheduleStatus)(nil)).Elem()
}

func (i *snapshotScheduleStatusPtrType) ToSnapshotScheduleStatusPtrOutput() SnapshotScheduleStatusPtrOutput {
	return i.ToSnapshotScheduleStatusPtrOutputWithContext(context.Background())
}

func (i *snapshotScheduleStatusPtrType) ToSnapshotScheduleStatusPtrOutputWithContext(ctx context.Context) SnapshotScheduleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleStatusPtrOutput)
}

// SnapshotScheduleStatus defines the observed state of SnapshotSchedule
type SnapshotScheduleStatusOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleStatus)(nil)).Elem()
}

func (o SnapshotScheduleStatusOutput) ToSnapshotScheduleStatusOutput() SnapshotScheduleStatusOutput {
	return o
}

func (o SnapshotScheduleStatusOutput) ToSnapshotScheduleStatusOutputWithContext(ctx context.Context) SnapshotScheduleStatusOutput {
	return o
}

func (o SnapshotScheduleStatusOutput) ToSnapshotScheduleStatusPtrOutput() SnapshotScheduleStatusPtrOutput {
	return o.ToSnapshotScheduleStatusPtrOutputWithContext(context.Background())
}

func (o SnapshotScheduleStatusOutput) ToSnapshotScheduleStatusPtrOutputWithContext(ctx context.Context) SnapshotScheduleStatusPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleStatus) *SnapshotScheduleStatus {
		return &v
	}).(SnapshotScheduleStatusPtrOutput)
}

// Conditions is a list of conditions related to operator reconciliation.
func (o SnapshotScheduleStatusOutput) Conditions() SnapshotScheduleStatusConditionsArrayOutput {
	return o.ApplyT(func(v SnapshotScheduleStatus) []SnapshotScheduleStatusConditions { return v.Conditions }).(SnapshotScheduleStatusConditionsArrayOutput)
}

// LastSnapshotTime is the time of the most recent set of snapshots generated by this schedule.
func (o SnapshotScheduleStatusOutput) LastSnapshotTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleStatus) *string { return v.LastSnapshotTime }).(pulumi.StringPtrOutput)
}

// NextSnapshotTime is the time when this schedule should create the next set of snapshots.
func (o SnapshotScheduleStatusOutput) NextSnapshotTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleStatus) *string { return v.NextSnapshotTime }).(pulumi.StringPtrOutput)
}

type SnapshotScheduleStatusPtrOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotScheduleStatus)(nil)).Elem()
}

func (o SnapshotScheduleStatusPtrOutput) ToSnapshotScheduleStatusPtrOutput() SnapshotScheduleStatusPtrOutput {
	return o
}

func (o SnapshotScheduleStatusPtrOutput) ToSnapshotScheduleStatusPtrOutputWithContext(ctx context.Context) SnapshotScheduleStatusPtrOutput {
	return o
}

func (o SnapshotScheduleStatusPtrOutput) Elem() SnapshotScheduleStatusOutput {
	return o.ApplyT(func(v *SnapshotScheduleStatus) SnapshotScheduleStatus { return *v }).(SnapshotScheduleStatusOutput)
}

// Conditions is a list of conditions related to operator reconciliation.
func (o SnapshotScheduleStatusPtrOutput) Conditions() SnapshotScheduleStatusConditionsArrayOutput {
	return o.ApplyT(func(v *SnapshotScheduleStatus) []SnapshotScheduleStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(SnapshotScheduleStatusConditionsArrayOutput)
}

// LastSnapshotTime is the time of the most recent set of snapshots generated by this schedule.
func (o SnapshotScheduleStatusPtrOutput) LastSnapshotTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotScheduleStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastSnapshotTime
	}).(pulumi.StringPtrOutput)
}

// NextSnapshotTime is the time when this schedule should create the next set of snapshots.
func (o SnapshotScheduleStatusPtrOutput) NextSnapshotTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotScheduleStatus) *string {
		if v == nil {
			return nil
		}
		return v.NextSnapshotTime
	}).(pulumi.StringPtrOutput)
}

// Condition represents the state of the operator's reconciliation functionality.
type SnapshotScheduleStatusConditions struct {
	LastHeartbeatTime  *string `pulumi:"lastHeartbeatTime"`
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	Reason             *string `pulumi:"reason"`
	Status             string  `pulumi:"status"`
	// ConditionType is the state of the operator's reconciliation functionality.
	Type string `pulumi:"type"`
}

// SnapshotScheduleStatusConditionsInput is an input type that accepts SnapshotScheduleStatusConditionsArgs and SnapshotScheduleStatusConditionsOutput values.
// You can construct a concrete instance of `SnapshotScheduleStatusConditionsInput` via:
//
//          SnapshotScheduleStatusConditionsArgs{...}
type SnapshotScheduleStatusConditionsInput interface {
	pulumi.Input

	ToSnapshotScheduleStatusConditionsOutput() SnapshotScheduleStatusConditionsOutput
	ToSnapshotScheduleStatusConditionsOutputWithContext(context.Context) SnapshotScheduleStatusConditionsOutput
}

// Condition represents the state of the operator's reconciliation functionality.
type SnapshotScheduleStatusConditionsArgs struct {
	LastHeartbeatTime  pulumi.StringPtrInput `pulumi:"lastHeartbeatTime"`
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	Reason             pulumi.StringPtrInput `pulumi:"reason"`
	Status             pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the state of the operator's reconciliation functionality.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SnapshotScheduleStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleStatusConditions)(nil)).Elem()
}

func (i SnapshotScheduleStatusConditionsArgs) ToSnapshotScheduleStatusConditionsOutput() SnapshotScheduleStatusConditionsOutput {
	return i.ToSnapshotScheduleStatusConditionsOutputWithContext(context.Background())
}

func (i SnapshotScheduleStatusConditionsArgs) ToSnapshotScheduleStatusConditionsOutputWithContext(ctx context.Context) SnapshotScheduleStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleStatusConditionsOutput)
}

// SnapshotScheduleStatusConditionsArrayInput is an input type that accepts SnapshotScheduleStatusConditionsArray and SnapshotScheduleStatusConditionsArrayOutput values.
// You can construct a concrete instance of `SnapshotScheduleStatusConditionsArrayInput` via:
//
//          SnapshotScheduleStatusConditionsArray{ SnapshotScheduleStatusConditionsArgs{...} }
type SnapshotScheduleStatusConditionsArrayInput interface {
	pulumi.Input

	ToSnapshotScheduleStatusConditionsArrayOutput() SnapshotScheduleStatusConditionsArrayOutput
	ToSnapshotScheduleStatusConditionsArrayOutputWithContext(context.Context) SnapshotScheduleStatusConditionsArrayOutput
}

type SnapshotScheduleStatusConditionsArray []SnapshotScheduleStatusConditionsInput

func (SnapshotScheduleStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnapshotScheduleStatusConditions)(nil)).Elem()
}

func (i SnapshotScheduleStatusConditionsArray) ToSnapshotScheduleStatusConditionsArrayOutput() SnapshotScheduleStatusConditionsArrayOutput {
	return i.ToSnapshotScheduleStatusConditionsArrayOutputWithContext(context.Background())
}

func (i SnapshotScheduleStatusConditionsArray) ToSnapshotScheduleStatusConditionsArrayOutputWithContext(ctx context.Context) SnapshotScheduleStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleStatusConditionsArrayOutput)
}

// Condition represents the state of the operator's reconciliation functionality.
type SnapshotScheduleStatusConditionsOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotScheduleStatusConditions)(nil)).Elem()
}

func (o SnapshotScheduleStatusConditionsOutput) ToSnapshotScheduleStatusConditionsOutput() SnapshotScheduleStatusConditionsOutput {
	return o
}

func (o SnapshotScheduleStatusConditionsOutput) ToSnapshotScheduleStatusConditionsOutputWithContext(ctx context.Context) SnapshotScheduleStatusConditionsOutput {
	return o
}

func (o SnapshotScheduleStatusConditionsOutput) LastHeartbeatTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleStatusConditions) *string { return v.LastHeartbeatTime }).(pulumi.StringPtrOutput)
}

func (o SnapshotScheduleStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o SnapshotScheduleStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o SnapshotScheduleStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotScheduleStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o SnapshotScheduleStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotScheduleStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the state of the operator's reconciliation functionality.
func (o SnapshotScheduleStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotScheduleStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type SnapshotScheduleStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnapshotScheduleStatusConditions)(nil)).Elem()
}

func (o SnapshotScheduleStatusConditionsArrayOutput) ToSnapshotScheduleStatusConditionsArrayOutput() SnapshotScheduleStatusConditionsArrayOutput {
	return o
}

func (o SnapshotScheduleStatusConditionsArrayOutput) ToSnapshotScheduleStatusConditionsArrayOutputWithContext(ctx context.Context) SnapshotScheduleStatusConditionsArrayOutput {
	return o
}

func (o SnapshotScheduleStatusConditionsArrayOutput) Index(i pulumi.IntInput) SnapshotScheduleStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SnapshotScheduleStatusConditions {
		return vs[0].([]SnapshotScheduleStatusConditions)[vs[1].(int)]
	}).(SnapshotScheduleStatusConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(SnapshotScheduleTypeOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleMetadataOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleSpecOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleSpecPtrOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleSpecClaimSelectorOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleSpecClaimSelectorPtrOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleSpecClaimSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleSpecClaimSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleSpecClaimSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleSpecRetentionOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleSpecRetentionPtrOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleSpecSnapshotTemplateOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleSpecSnapshotTemplatePtrOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleSpecSnapshotTemplateLabelsOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleStatusOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleStatusPtrOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleStatusConditionsOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleStatusConditionsArrayOutput{})
}

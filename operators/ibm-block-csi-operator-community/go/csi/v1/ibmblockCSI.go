// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// IBMBlockCSI is the Schema for the ibmblockcsis API
type IBMBlockCSI struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// IBMBlockCSISpec defines the desired state of IBMBlockCSI
	Spec IBMBlockCSISpecPtrOutput `pulumi:"spec"`
	// IBMBlockCSIStatus defines the observed state of IBMBlockCSI
	Status IBMBlockCSIStatusPtrOutput `pulumi:"status"`
}

// NewIBMBlockCSI registers a new resource with the given unique name, arguments, and options.
func NewIBMBlockCSI(ctx *pulumi.Context,
	name string, args *IBMBlockCSIArgs, opts ...pulumi.ResourceOption) (*IBMBlockCSI, error) {
	if args == nil {
		args = &IBMBlockCSIArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("csi.ibm.com/v1")
	args.Kind = pulumi.StringPtr("IBMBlockCSI")
	var resource IBMBlockCSI
	err := ctx.RegisterResource("kubernetes:csi.ibm.com/v1:IBMBlockCSI", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIBMBlockCSI gets an existing IBMBlockCSI resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIBMBlockCSI(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IBMBlockCSIState, opts ...pulumi.ResourceOption) (*IBMBlockCSI, error) {
	var resource IBMBlockCSI
	err := ctx.ReadResource("kubernetes:csi.ibm.com/v1:IBMBlockCSI", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IBMBlockCSI resources.
type ibmblockCSIState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// IBMBlockCSISpec defines the desired state of IBMBlockCSI
	Spec *IBMBlockCSISpec `pulumi:"spec"`
	// IBMBlockCSIStatus defines the observed state of IBMBlockCSI
	Status *IBMBlockCSIStatus `pulumi:"status"`
}

type IBMBlockCSIState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// IBMBlockCSISpec defines the desired state of IBMBlockCSI
	Spec IBMBlockCSISpecPtrInput
	// IBMBlockCSIStatus defines the observed state of IBMBlockCSI
	Status IBMBlockCSIStatusPtrInput
}

func (IBMBlockCSIState) ElementType() reflect.Type {
	return reflect.TypeOf((*ibmblockCSIState)(nil)).Elem()
}

type ibmblockCSIArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// IBMBlockCSISpec defines the desired state of IBMBlockCSI
	Spec *IBMBlockCSISpec `pulumi:"spec"`
	// IBMBlockCSIStatus defines the observed state of IBMBlockCSI
	Status *IBMBlockCSIStatus `pulumi:"status"`
}

// The set of arguments for constructing a IBMBlockCSI resource.
type IBMBlockCSIArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// IBMBlockCSISpec defines the desired state of IBMBlockCSI
	Spec IBMBlockCSISpecPtrInput
	// IBMBlockCSIStatus defines the observed state of IBMBlockCSI
	Status IBMBlockCSIStatusPtrInput
}

func (IBMBlockCSIArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ibmblockCSIArgs)(nil)).Elem()
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// AccessPolicy is the Schema for the accesspolicies API
type AccessPolicy struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// AccessPolicySpec defines the desired state of AccessPolicy
	Spec AccessPolicySpecPtrOutput `pulumi:"spec"`
	// AccessPolicyStatus defines the observed state of AccessPolicy
	Status AccessPolicyStatusPtrOutput `pulumi:"status"`
}

// NewAccessPolicy registers a new resource with the given unique name, arguments, and options.
func NewAccessPolicy(ctx *pulumi.Context,
	name string, args *AccessPolicyArgs, opts ...pulumi.ResourceOption) (*AccessPolicy, error) {
	if args == nil {
		args = &AccessPolicyArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("ibmcloud.ibm.com/v1alpha1")
	args.Kind = pulumi.StringPtr("AccessPolicy")
	var resource AccessPolicy
	err := ctx.RegisterResource("kubernetes:ibmcloud.ibm.com/v1alpha1:AccessPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessPolicy gets an existing AccessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessPolicyState, opts ...pulumi.ResourceOption) (*AccessPolicy, error) {
	var resource AccessPolicy
	err := ctx.ReadResource("kubernetes:ibmcloud.ibm.com/v1alpha1:AccessPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessPolicy resources.
type accessPolicyState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// AccessPolicySpec defines the desired state of AccessPolicy
	Spec *AccessPolicySpec `pulumi:"spec"`
	// AccessPolicyStatus defines the observed state of AccessPolicy
	Status *AccessPolicyStatus `pulumi:"status"`
}

type AccessPolicyState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// AccessPolicySpec defines the desired state of AccessPolicy
	Spec AccessPolicySpecPtrInput
	// AccessPolicyStatus defines the observed state of AccessPolicy
	Status AccessPolicyStatusPtrInput
}

func (AccessPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPolicyState)(nil)).Elem()
}

type accessPolicyArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// AccessPolicySpec defines the desired state of AccessPolicy
	Spec *AccessPolicySpec `pulumi:"spec"`
	// AccessPolicyStatus defines the observed state of AccessPolicy
	Status *AccessPolicyStatus `pulumi:"status"`
}

// The set of arguments for constructing a AccessPolicy resource.
type AccessPolicyArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// AccessPolicySpec defines the desired state of AccessPolicy
	Spec AccessPolicySpecPtrInput
	// AccessPolicyStatus defines the observed state of AccessPolicy
	Status AccessPolicyStatusPtrInput
}

func (AccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPolicyArgs)(nil)).Elem()
}

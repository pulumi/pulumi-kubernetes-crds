# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'AccessGroupSpec',
    'AccessGroupStatus',
    'AccessPolicySpec',
    'AccessPolicySpecRoles',
    'AccessPolicySpecRolesCustomRolesDef',
    'AccessPolicySpecSubject',
    'AccessPolicySpecSubjectAccessGroupDef',
    'AccessPolicySpecTarget',
    'AccessPolicyStatus',
    'AccessPolicyStatusRoles',
    'AccessPolicyStatusRolesCustomRolesDef',
    'AccessPolicyStatusSubject',
    'AccessPolicyStatusSubjectAccessGroupDef',
    'AccessPolicyStatusTarget',
    'AuthorizationPolicySpec',
    'AuthorizationPolicySpecSource',
    'AuthorizationPolicySpecTarget',
    'AuthorizationPolicyStatus',
    'AuthorizationPolicyStatusSource',
    'AuthorizationPolicyStatusTarget',
    'CustomRoleSpec',
    'CustomRoleStatus',
]

@pulumi.output_type
class AccessGroupSpec(dict):
    """
    AccessGroupSpec defines the desired state of AccessGroup
    """
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 service_ids: Optional[Sequence[str]] = None,
                 user_emails: Optional[Sequence[str]] = None):
        """
        AccessGroupSpec defines the desired state of AccessGroup
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if user_emails is not None:
            pulumi.set(__self__, "user_emails", user_emails)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceIDs")
    def service_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "service_ids")

    @property
    @pulumi.getter(name="userEmails")
    def user_emails(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_emails")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessGroupStatus(dict):
    """
    AccessGroupStatus defines the observed state of AccessGroup
    """
    def __init__(__self__, *,
                 group_id: Optional[str] = None,
                 description: Optional[str] = None,
                 message: Optional[str] = None,
                 name: Optional[str] = None,
                 service_ids: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 user_emails: Optional[Sequence[str]] = None):
        """
        AccessGroupStatus defines the observed state of AccessGroup
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if user_emails is not None:
            pulumi.set(__self__, "user_emails", user_emails)

    @property
    @pulumi.getter(name="GroupID")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceIDs")
    def service_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "service_ids")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="userEmails")
    def user_emails(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_emails")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessPolicySpec(dict):
    """
    AccessPolicySpec defines the desired state of AccessPolicy
    """
    def __init__(__self__, *,
                 roles: 'outputs.AccessPolicySpecRoles',
                 subject: 'outputs.AccessPolicySpecSubject',
                 target: 'outputs.AccessPolicySpecTarget'):
        """
        AccessPolicySpec defines the desired state of AccessPolicy
        """
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "subject", subject)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def roles(self) -> 'outputs.AccessPolicySpecRoles':
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def subject(self) -> 'outputs.AccessPolicySpecSubject':
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter
    def target(self) -> 'outputs.AccessPolicySpecTarget':
        return pulumi.get(self, "target")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessPolicySpecRoles(dict):
    def __init__(__self__, *,
                 custom_roles_d_name: Optional[Sequence[str]] = None,
                 custom_roles_def: Optional[Sequence['outputs.AccessPolicySpecRolesCustomRolesDef']] = None,
                 defined_roles: Optional[Sequence[str]] = None):
        if custom_roles_d_name is not None:
            pulumi.set(__self__, "custom_roles_d_name", custom_roles_d_name)
        if custom_roles_def is not None:
            pulumi.set(__self__, "custom_roles_def", custom_roles_def)
        if defined_roles is not None:
            pulumi.set(__self__, "defined_roles", defined_roles)

    @property
    @pulumi.getter(name="customRolesDName")
    def custom_roles_d_name(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_roles_d_name")

    @property
    @pulumi.getter(name="customRolesDef")
    def custom_roles_def(self) -> Optional[Sequence['outputs.AccessPolicySpecRolesCustomRolesDef']]:
        return pulumi.get(self, "custom_roles_def")

    @property
    @pulumi.getter(name="definedRoles")
    def defined_roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "defined_roles")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessPolicySpecRolesCustomRolesDef(dict):
    def __init__(__self__, *,
                 custom_role_name: str,
                 custom_role_namespace: str):
        pulumi.set(__self__, "custom_role_name", custom_role_name)
        pulumi.set(__self__, "custom_role_namespace", custom_role_namespace)

    @property
    @pulumi.getter(name="customRoleName")
    def custom_role_name(self) -> str:
        return pulumi.get(self, "custom_role_name")

    @property
    @pulumi.getter(name="customRoleNamespace")
    def custom_role_namespace(self) -> str:
        return pulumi.get(self, "custom_role_namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessPolicySpecSubject(dict):
    def __init__(__self__, *,
                 access_group_def: Optional['outputs.AccessPolicySpecSubjectAccessGroupDef'] = None,
                 access_group_id: Optional[str] = None,
                 service_id: Optional[str] = None,
                 user_email: Optional[str] = None):
        if access_group_def is not None:
            pulumi.set(__self__, "access_group_def", access_group_def)
        if access_group_id is not None:
            pulumi.set(__self__, "access_group_id", access_group_id)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if user_email is not None:
            pulumi.set(__self__, "user_email", user_email)

    @property
    @pulumi.getter(name="accessGroupDef")
    def access_group_def(self) -> Optional['outputs.AccessPolicySpecSubjectAccessGroupDef']:
        return pulumi.get(self, "access_group_def")

    @property
    @pulumi.getter(name="accessGroupID")
    def access_group_id(self) -> Optional[str]:
        return pulumi.get(self, "access_group_id")

    @property
    @pulumi.getter(name="serviceID")
    def service_id(self) -> Optional[str]:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> Optional[str]:
        return pulumi.get(self, "user_email")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessPolicySpecSubjectAccessGroupDef(dict):
    def __init__(__self__, *,
                 access_group_name: str,
                 access_group_namespace: str):
        pulumi.set(__self__, "access_group_name", access_group_name)
        pulumi.set(__self__, "access_group_namespace", access_group_namespace)

    @property
    @pulumi.getter(name="accessGroupName")
    def access_group_name(self) -> str:
        return pulumi.get(self, "access_group_name")

    @property
    @pulumi.getter(name="accessGroupNamespace")
    def access_group_namespace(self) -> str:
        return pulumi.get(self, "access_group_namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessPolicySpecTarget(dict):
    def __init__(__self__, *,
                 resource_group: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 resource_key: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 resource_value: Optional[str] = None,
                 service_class: Optional[str] = None,
                 service_id: Optional[str] = None):
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_key is not None:
            pulumi.set(__self__, "resource_key", resource_key)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_value is not None:
            pulumi.set(__self__, "resource_value", resource_value)
        if service_class is not None:
            pulumi.set(__self__, "service_class", service_class)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceKey")
    def resource_key(self) -> Optional[str]:
        return pulumi.get(self, "resource_key")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> Optional[str]:
        return pulumi.get(self, "resource_value")

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> Optional[str]:
        return pulumi.get(self, "service_class")

    @property
    @pulumi.getter(name="serviceID")
    def service_id(self) -> Optional[str]:
        return pulumi.get(self, "service_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessPolicyStatus(dict):
    """
    AccessPolicyStatus defines the observed state of AccessPolicy
    """
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 policy_id: Optional[str] = None,
                 roles: Optional['outputs.AccessPolicyStatusRoles'] = None,
                 state: Optional[str] = None,
                 subject: Optional['outputs.AccessPolicyStatusSubject'] = None,
                 target: Optional['outputs.AccessPolicyStatusTarget'] = None):
        """
        AccessPolicyStatus defines the observed state of AccessPolicy
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="policyID")
    def policy_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def roles(self) -> Optional['outputs.AccessPolicyStatusRoles']:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def subject(self) -> Optional['outputs.AccessPolicyStatusSubject']:
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter
    def target(self) -> Optional['outputs.AccessPolicyStatusTarget']:
        return pulumi.get(self, "target")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessPolicyStatusRoles(dict):
    def __init__(__self__, *,
                 custom_roles_d_name: Optional[Sequence[str]] = None,
                 custom_roles_def: Optional[Sequence['outputs.AccessPolicyStatusRolesCustomRolesDef']] = None,
                 defined_roles: Optional[Sequence[str]] = None):
        if custom_roles_d_name is not None:
            pulumi.set(__self__, "custom_roles_d_name", custom_roles_d_name)
        if custom_roles_def is not None:
            pulumi.set(__self__, "custom_roles_def", custom_roles_def)
        if defined_roles is not None:
            pulumi.set(__self__, "defined_roles", defined_roles)

    @property
    @pulumi.getter(name="customRolesDName")
    def custom_roles_d_name(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_roles_d_name")

    @property
    @pulumi.getter(name="customRolesDef")
    def custom_roles_def(self) -> Optional[Sequence['outputs.AccessPolicyStatusRolesCustomRolesDef']]:
        return pulumi.get(self, "custom_roles_def")

    @property
    @pulumi.getter(name="definedRoles")
    def defined_roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "defined_roles")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessPolicyStatusRolesCustomRolesDef(dict):
    def __init__(__self__, *,
                 custom_role_name: str,
                 custom_role_namespace: str):
        pulumi.set(__self__, "custom_role_name", custom_role_name)
        pulumi.set(__self__, "custom_role_namespace", custom_role_namespace)

    @property
    @pulumi.getter(name="customRoleName")
    def custom_role_name(self) -> str:
        return pulumi.get(self, "custom_role_name")

    @property
    @pulumi.getter(name="customRoleNamespace")
    def custom_role_namespace(self) -> str:
        return pulumi.get(self, "custom_role_namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessPolicyStatusSubject(dict):
    def __init__(__self__, *,
                 access_group_def: Optional['outputs.AccessPolicyStatusSubjectAccessGroupDef'] = None,
                 access_group_id: Optional[str] = None,
                 service_id: Optional[str] = None,
                 user_email: Optional[str] = None):
        if access_group_def is not None:
            pulumi.set(__self__, "access_group_def", access_group_def)
        if access_group_id is not None:
            pulumi.set(__self__, "access_group_id", access_group_id)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if user_email is not None:
            pulumi.set(__self__, "user_email", user_email)

    @property
    @pulumi.getter(name="accessGroupDef")
    def access_group_def(self) -> Optional['outputs.AccessPolicyStatusSubjectAccessGroupDef']:
        return pulumi.get(self, "access_group_def")

    @property
    @pulumi.getter(name="accessGroupID")
    def access_group_id(self) -> Optional[str]:
        return pulumi.get(self, "access_group_id")

    @property
    @pulumi.getter(name="serviceID")
    def service_id(self) -> Optional[str]:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> Optional[str]:
        return pulumi.get(self, "user_email")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessPolicyStatusSubjectAccessGroupDef(dict):
    def __init__(__self__, *,
                 access_group_name: str,
                 access_group_namespace: str):
        pulumi.set(__self__, "access_group_name", access_group_name)
        pulumi.set(__self__, "access_group_namespace", access_group_namespace)

    @property
    @pulumi.getter(name="accessGroupName")
    def access_group_name(self) -> str:
        return pulumi.get(self, "access_group_name")

    @property
    @pulumi.getter(name="accessGroupNamespace")
    def access_group_namespace(self) -> str:
        return pulumi.get(self, "access_group_namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AccessPolicyStatusTarget(dict):
    def __init__(__self__, *,
                 resource_group: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 resource_key: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 resource_value: Optional[str] = None,
                 service_class: Optional[str] = None,
                 service_id: Optional[str] = None):
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_key is not None:
            pulumi.set(__self__, "resource_key", resource_key)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_value is not None:
            pulumi.set(__self__, "resource_value", resource_value)
        if service_class is not None:
            pulumi.set(__self__, "service_class", service_class)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceKey")
    def resource_key(self) -> Optional[str]:
        return pulumi.get(self, "resource_key")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> Optional[str]:
        return pulumi.get(self, "resource_value")

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> Optional[str]:
        return pulumi.get(self, "service_class")

    @property
    @pulumi.getter(name="serviceID")
    def service_id(self) -> Optional[str]:
        return pulumi.get(self, "service_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthorizationPolicySpec(dict):
    """
    AuthorizationPolicySpec defines the desired state of AuthorizationPolicy
    """
    def __init__(__self__, *,
                 roles: Sequence[str],
                 source: 'outputs.AuthorizationPolicySpecSource',
                 target: 'outputs.AuthorizationPolicySpecTarget'):
        """
        AuthorizationPolicySpec defines the desired state of AuthorizationPolicy
        """
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def source(self) -> 'outputs.AuthorizationPolicySpecSource':
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> 'outputs.AuthorizationPolicySpecTarget':
        return pulumi.get(self, "target")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthorizationPolicySpecSource(dict):
    def __init__(__self__, *,
                 service_class: str,
                 resource_group: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 resource_key: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 resource_value: Optional[str] = None,
                 service_id: Optional[str] = None):
        pulumi.set(__self__, "service_class", service_class)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_key is not None:
            pulumi.set(__self__, "resource_key", resource_key)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_value is not None:
            pulumi.set(__self__, "resource_value", resource_value)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> str:
        return pulumi.get(self, "service_class")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceKey")
    def resource_key(self) -> Optional[str]:
        return pulumi.get(self, "resource_key")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> Optional[str]:
        return pulumi.get(self, "resource_value")

    @property
    @pulumi.getter(name="serviceID")
    def service_id(self) -> Optional[str]:
        return pulumi.get(self, "service_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthorizationPolicySpecTarget(dict):
    def __init__(__self__, *,
                 service_class: str,
                 resource_group: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 resource_key: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 resource_value: Optional[str] = None,
                 service_id: Optional[str] = None):
        pulumi.set(__self__, "service_class", service_class)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_key is not None:
            pulumi.set(__self__, "resource_key", resource_key)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_value is not None:
            pulumi.set(__self__, "resource_value", resource_value)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> str:
        return pulumi.get(self, "service_class")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceKey")
    def resource_key(self) -> Optional[str]:
        return pulumi.get(self, "resource_key")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> Optional[str]:
        return pulumi.get(self, "resource_value")

    @property
    @pulumi.getter(name="serviceID")
    def service_id(self) -> Optional[str]:
        return pulumi.get(self, "service_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthorizationPolicyStatus(dict):
    """
    AuthorizationPolicyStatus defines the observed state of AuthorizationPolicy
    """
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 policy_id: Optional[str] = None,
                 roles: Optional[Sequence[str]] = None,
                 source: Optional['outputs.AuthorizationPolicyStatusSource'] = None,
                 state: Optional[str] = None,
                 target: Optional['outputs.AuthorizationPolicyStatusTarget'] = None):
        """
        AuthorizationPolicyStatus defines the observed state of AuthorizationPolicy
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="policyID")
    def policy_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.AuthorizationPolicyStatusSource']:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def target(self) -> Optional['outputs.AuthorizationPolicyStatusTarget']:
        return pulumi.get(self, "target")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthorizationPolicyStatusSource(dict):
    def __init__(__self__, *,
                 service_class: str,
                 resource_group: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 resource_key: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 resource_value: Optional[str] = None,
                 service_id: Optional[str] = None):
        pulumi.set(__self__, "service_class", service_class)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_key is not None:
            pulumi.set(__self__, "resource_key", resource_key)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_value is not None:
            pulumi.set(__self__, "resource_value", resource_value)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> str:
        return pulumi.get(self, "service_class")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceKey")
    def resource_key(self) -> Optional[str]:
        return pulumi.get(self, "resource_key")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> Optional[str]:
        return pulumi.get(self, "resource_value")

    @property
    @pulumi.getter(name="serviceID")
    def service_id(self) -> Optional[str]:
        return pulumi.get(self, "service_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuthorizationPolicyStatusTarget(dict):
    def __init__(__self__, *,
                 service_class: str,
                 resource_group: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 resource_key: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 resource_value: Optional[str] = None,
                 service_id: Optional[str] = None):
        pulumi.set(__self__, "service_class", service_class)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_key is not None:
            pulumi.set(__self__, "resource_key", resource_key)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_value is not None:
            pulumi.set(__self__, "resource_value", resource_value)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> str:
        return pulumi.get(self, "service_class")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceKey")
    def resource_key(self) -> Optional[str]:
        return pulumi.get(self, "resource_key")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> Optional[str]:
        return pulumi.get(self, "resource_value")

    @property
    @pulumi.getter(name="serviceID")
    def service_id(self) -> Optional[str]:
        return pulumi.get(self, "service_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CustomRoleSpec(dict):
    """
    CustomRoleSpec defines the desired state of CustomRole
    """
    def __init__(__self__, *,
                 actions: Sequence[str],
                 description: str,
                 display_name: str,
                 role_name: str,
                 service_class: str):
        """
        CustomRoleSpec defines the desired state of CustomRole
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "role_name", role_name)
        pulumi.set(__self__, "service_class", service_class)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> str:
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> str:
        return pulumi.get(self, "service_class")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CustomRoleStatus(dict):
    """
    CustomRoleStatus defines the observed state of CustomRole
    """
    def __init__(__self__, *,
                 actions: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 message: Optional[str] = None,
                 role_crn: Optional[str] = None,
                 role_id: Optional[str] = None,
                 role_name: Optional[str] = None,
                 service_class: Optional[str] = None,
                 state: Optional[str] = None):
        """
        CustomRoleStatus defines the observed state of CustomRole
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if role_crn is not None:
            pulumi.set(__self__, "role_crn", role_crn)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if service_class is not None:
            pulumi.set(__self__, "service_class", service_class)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="roleCRN")
    def role_crn(self) -> Optional[str]:
        return pulumi.get(self, "role_crn")

    @property
    @pulumi.getter(name="roleID")
    def role_id(self) -> Optional[str]:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[str]:
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> Optional[str]:
        return pulumi.get(self, "service_class")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



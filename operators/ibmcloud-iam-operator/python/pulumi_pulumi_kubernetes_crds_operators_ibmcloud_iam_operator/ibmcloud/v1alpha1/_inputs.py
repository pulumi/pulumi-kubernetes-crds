# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'AccessGroupSpecArgs',
    'AccessGroupStatusArgs',
    'AccessPolicySpecArgs',
    'AccessPolicySpecRolesArgs',
    'AccessPolicySpecRolesCustomRolesDefArgs',
    'AccessPolicySpecSubjectArgs',
    'AccessPolicySpecSubjectAccessGroupDefArgs',
    'AccessPolicySpecTargetArgs',
    'AccessPolicyStatusArgs',
    'AccessPolicyStatusRolesArgs',
    'AccessPolicyStatusRolesCustomRolesDefArgs',
    'AccessPolicyStatusSubjectArgs',
    'AccessPolicyStatusSubjectAccessGroupDefArgs',
    'AccessPolicyStatusTargetArgs',
    'AuthorizationPolicySpecArgs',
    'AuthorizationPolicySpecSourceArgs',
    'AuthorizationPolicySpecTargetArgs',
    'AuthorizationPolicyStatusArgs',
    'AuthorizationPolicyStatusSourceArgs',
    'AuthorizationPolicyStatusTargetArgs',
    'CustomRoleSpecArgs',
    'CustomRoleStatusArgs',
]

@pulumi.input_type
class AccessGroupSpecArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        AccessGroupSpec defines the desired state of AccessGroup
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if user_emails is not None:
            pulumi.set(__self__, "user_emails", user_emails)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceIDs")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="userEmails")
    def user_emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_emails")

    @user_emails.setter
    def user_emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_emails", value)


@pulumi.input_type
class AccessGroupStatusArgs:
    def __init__(__self__, *,
                 group_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 user_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        AccessGroupStatus defines the observed state of AccessGroup
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if user_emails is not None:
            pulumi.set(__self__, "user_emails", user_emails)

    @property
    @pulumi.getter(name="GroupID")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceIDs")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="userEmails")
    def user_emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_emails")

    @user_emails.setter
    def user_emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_emails", value)


@pulumi.input_type
class AccessPolicySpecArgs:
    def __init__(__self__, *,
                 roles: pulumi.Input['AccessPolicySpecRolesArgs'],
                 subject: pulumi.Input['AccessPolicySpecSubjectArgs'],
                 target: pulumi.Input['AccessPolicySpecTargetArgs']):
        """
        AccessPolicySpec defines the desired state of AccessPolicy
        """
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "subject", subject)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input['AccessPolicySpecRolesArgs']:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input['AccessPolicySpecRolesArgs']):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input['AccessPolicySpecSubjectArgs']:
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input['AccessPolicySpecSubjectArgs']):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input['AccessPolicySpecTargetArgs']:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['AccessPolicySpecTargetArgs']):
        pulumi.set(self, "target", value)


@pulumi.input_type
class AccessPolicySpecRolesArgs:
    def __init__(__self__, *,
                 custom_roles_d_name: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_roles_def: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicySpecRolesCustomRolesDefArgs']]]] = None,
                 defined_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if custom_roles_d_name is not None:
            pulumi.set(__self__, "custom_roles_d_name", custom_roles_d_name)
        if custom_roles_def is not None:
            pulumi.set(__self__, "custom_roles_def", custom_roles_def)
        if defined_roles is not None:
            pulumi.set(__self__, "defined_roles", defined_roles)

    @property
    @pulumi.getter(name="customRolesDName")
    def custom_roles_d_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_roles_d_name")

    @custom_roles_d_name.setter
    def custom_roles_d_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "custom_roles_d_name", value)

    @property
    @pulumi.getter(name="customRolesDef")
    def custom_roles_def(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicySpecRolesCustomRolesDefArgs']]]]:
        return pulumi.get(self, "custom_roles_def")

    @custom_roles_def.setter
    def custom_roles_def(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicySpecRolesCustomRolesDefArgs']]]]):
        pulumi.set(self, "custom_roles_def", value)

    @property
    @pulumi.getter(name="definedRoles")
    def defined_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "defined_roles")

    @defined_roles.setter
    def defined_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "defined_roles", value)


@pulumi.input_type
class AccessPolicySpecRolesCustomRolesDefArgs:
    def __init__(__self__, *,
                 custom_role_name: pulumi.Input[str],
                 custom_role_namespace: pulumi.Input[str]):
        pulumi.set(__self__, "custom_role_name", custom_role_name)
        pulumi.set(__self__, "custom_role_namespace", custom_role_namespace)

    @property
    @pulumi.getter(name="customRoleName")
    def custom_role_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "custom_role_name")

    @custom_role_name.setter
    def custom_role_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_role_name", value)

    @property
    @pulumi.getter(name="customRoleNamespace")
    def custom_role_namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "custom_role_namespace")

    @custom_role_namespace.setter
    def custom_role_namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_role_namespace", value)


@pulumi.input_type
class AccessPolicySpecSubjectArgs:
    def __init__(__self__, *,
                 access_group_def: Optional[pulumi.Input['AccessPolicySpecSubjectAccessGroupDefArgs']] = None,
                 access_group_id: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 user_email: Optional[pulumi.Input[str]] = None):
        if access_group_def is not None:
            pulumi.set(__self__, "access_group_def", access_group_def)
        if access_group_id is not None:
            pulumi.set(__self__, "access_group_id", access_group_id)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if user_email is not None:
            pulumi.set(__self__, "user_email", user_email)

    @property
    @pulumi.getter(name="accessGroupDef")
    def access_group_def(self) -> Optional[pulumi.Input['AccessPolicySpecSubjectAccessGroupDefArgs']]:
        return pulumi.get(self, "access_group_def")

    @access_group_def.setter
    def access_group_def(self, value: Optional[pulumi.Input['AccessPolicySpecSubjectAccessGroupDefArgs']]):
        pulumi.set(self, "access_group_def", value)

    @property
    @pulumi.getter(name="accessGroupID")
    def access_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_group_id")

    @access_group_id.setter
    def access_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_group_id", value)

    @property
    @pulumi.getter(name="serviceID")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_email")

    @user_email.setter
    def user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_email", value)


@pulumi.input_type
class AccessPolicySpecSubjectAccessGroupDefArgs:
    def __init__(__self__, *,
                 access_group_name: pulumi.Input[str],
                 access_group_namespace: pulumi.Input[str]):
        pulumi.set(__self__, "access_group_name", access_group_name)
        pulumi.set(__self__, "access_group_namespace", access_group_namespace)

    @property
    @pulumi.getter(name="accessGroupName")
    def access_group_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_group_name")

    @access_group_name.setter
    def access_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_group_name", value)

    @property
    @pulumi.getter(name="accessGroupNamespace")
    def access_group_namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_group_namespace")

    @access_group_namespace.setter
    def access_group_namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_group_namespace", value)


@pulumi.input_type
class AccessPolicySpecTargetArgs:
    def __init__(__self__, *,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_key: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 resource_value: Optional[pulumi.Input[str]] = None,
                 service_class: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None):
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_key is not None:
            pulumi.set(__self__, "resource_key", resource_key)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_value is not None:
            pulumi.set(__self__, "resource_value", resource_value)
        if service_class is not None:
            pulumi.set(__self__, "service_class", service_class)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceKey")
    def resource_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_key")

    @resource_key.setter
    def resource_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_key", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_value")

    @resource_value.setter
    def resource_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_value", value)

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_class")

    @service_class.setter
    def service_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_class", value)

    @property
    @pulumi.getter(name="serviceID")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)


@pulumi.input_type
class AccessPolicyStatusArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input['AccessPolicyStatusRolesArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subject: Optional[pulumi.Input['AccessPolicyStatusSubjectArgs']] = None,
                 target: Optional[pulumi.Input['AccessPolicyStatusTargetArgs']] = None):
        """
        AccessPolicyStatus defines the observed state of AccessPolicy
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="policyID")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input['AccessPolicyStatusRolesArgs']]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input['AccessPolicyStatusRolesArgs']]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input['AccessPolicyStatusSubjectArgs']]:
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input['AccessPolicyStatusSubjectArgs']]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['AccessPolicyStatusTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['AccessPolicyStatusTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class AccessPolicyStatusRolesArgs:
    def __init__(__self__, *,
                 custom_roles_d_name: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_roles_def: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyStatusRolesCustomRolesDefArgs']]]] = None,
                 defined_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if custom_roles_d_name is not None:
            pulumi.set(__self__, "custom_roles_d_name", custom_roles_d_name)
        if custom_roles_def is not None:
            pulumi.set(__self__, "custom_roles_def", custom_roles_def)
        if defined_roles is not None:
            pulumi.set(__self__, "defined_roles", defined_roles)

    @property
    @pulumi.getter(name="customRolesDName")
    def custom_roles_d_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_roles_d_name")

    @custom_roles_d_name.setter
    def custom_roles_d_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "custom_roles_d_name", value)

    @property
    @pulumi.getter(name="customRolesDef")
    def custom_roles_def(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyStatusRolesCustomRolesDefArgs']]]]:
        return pulumi.get(self, "custom_roles_def")

    @custom_roles_def.setter
    def custom_roles_def(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyStatusRolesCustomRolesDefArgs']]]]):
        pulumi.set(self, "custom_roles_def", value)

    @property
    @pulumi.getter(name="definedRoles")
    def defined_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "defined_roles")

    @defined_roles.setter
    def defined_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "defined_roles", value)


@pulumi.input_type
class AccessPolicyStatusRolesCustomRolesDefArgs:
    def __init__(__self__, *,
                 custom_role_name: pulumi.Input[str],
                 custom_role_namespace: pulumi.Input[str]):
        pulumi.set(__self__, "custom_role_name", custom_role_name)
        pulumi.set(__self__, "custom_role_namespace", custom_role_namespace)

    @property
    @pulumi.getter(name="customRoleName")
    def custom_role_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "custom_role_name")

    @custom_role_name.setter
    def custom_role_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_role_name", value)

    @property
    @pulumi.getter(name="customRoleNamespace")
    def custom_role_namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "custom_role_namespace")

    @custom_role_namespace.setter
    def custom_role_namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_role_namespace", value)


@pulumi.input_type
class AccessPolicyStatusSubjectArgs:
    def __init__(__self__, *,
                 access_group_def: Optional[pulumi.Input['AccessPolicyStatusSubjectAccessGroupDefArgs']] = None,
                 access_group_id: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 user_email: Optional[pulumi.Input[str]] = None):
        if access_group_def is not None:
            pulumi.set(__self__, "access_group_def", access_group_def)
        if access_group_id is not None:
            pulumi.set(__self__, "access_group_id", access_group_id)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if user_email is not None:
            pulumi.set(__self__, "user_email", user_email)

    @property
    @pulumi.getter(name="accessGroupDef")
    def access_group_def(self) -> Optional[pulumi.Input['AccessPolicyStatusSubjectAccessGroupDefArgs']]:
        return pulumi.get(self, "access_group_def")

    @access_group_def.setter
    def access_group_def(self, value: Optional[pulumi.Input['AccessPolicyStatusSubjectAccessGroupDefArgs']]):
        pulumi.set(self, "access_group_def", value)

    @property
    @pulumi.getter(name="accessGroupID")
    def access_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_group_id")

    @access_group_id.setter
    def access_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_group_id", value)

    @property
    @pulumi.getter(name="serviceID")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_email")

    @user_email.setter
    def user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_email", value)


@pulumi.input_type
class AccessPolicyStatusSubjectAccessGroupDefArgs:
    def __init__(__self__, *,
                 access_group_name: pulumi.Input[str],
                 access_group_namespace: pulumi.Input[str]):
        pulumi.set(__self__, "access_group_name", access_group_name)
        pulumi.set(__self__, "access_group_namespace", access_group_namespace)

    @property
    @pulumi.getter(name="accessGroupName")
    def access_group_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_group_name")

    @access_group_name.setter
    def access_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_group_name", value)

    @property
    @pulumi.getter(name="accessGroupNamespace")
    def access_group_namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_group_namespace")

    @access_group_namespace.setter
    def access_group_namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_group_namespace", value)


@pulumi.input_type
class AccessPolicyStatusTargetArgs:
    def __init__(__self__, *,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_key: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 resource_value: Optional[pulumi.Input[str]] = None,
                 service_class: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None):
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_key is not None:
            pulumi.set(__self__, "resource_key", resource_key)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_value is not None:
            pulumi.set(__self__, "resource_value", resource_value)
        if service_class is not None:
            pulumi.set(__self__, "service_class", service_class)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceKey")
    def resource_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_key")

    @resource_key.setter
    def resource_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_key", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_value")

    @resource_value.setter
    def resource_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_value", value)

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_class")

    @service_class.setter
    def service_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_class", value)

    @property
    @pulumi.getter(name="serviceID")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)


@pulumi.input_type
class AuthorizationPolicySpecArgs:
    def __init__(__self__, *,
                 roles: pulumi.Input[Sequence[pulumi.Input[str]]],
                 source: pulumi.Input['AuthorizationPolicySpecSourceArgs'],
                 target: pulumi.Input['AuthorizationPolicySpecTargetArgs']):
        """
        AuthorizationPolicySpec defines the desired state of AuthorizationPolicy
        """
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['AuthorizationPolicySpecSourceArgs']:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['AuthorizationPolicySpecSourceArgs']):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input['AuthorizationPolicySpecTargetArgs']:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['AuthorizationPolicySpecTargetArgs']):
        pulumi.set(self, "target", value)


@pulumi.input_type
class AuthorizationPolicySpecSourceArgs:
    def __init__(__self__, *,
                 service_class: pulumi.Input[str],
                 resource_group: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_key: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 resource_value: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "service_class", service_class)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_key is not None:
            pulumi.set(__self__, "resource_key", resource_key)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_value is not None:
            pulumi.set(__self__, "resource_value", resource_value)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_class")

    @service_class.setter
    def service_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_class", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceKey")
    def resource_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_key")

    @resource_key.setter
    def resource_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_key", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_value")

    @resource_value.setter
    def resource_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_value", value)

    @property
    @pulumi.getter(name="serviceID")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)


@pulumi.input_type
class AuthorizationPolicySpecTargetArgs:
    def __init__(__self__, *,
                 service_class: pulumi.Input[str],
                 resource_group: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_key: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 resource_value: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "service_class", service_class)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_key is not None:
            pulumi.set(__self__, "resource_key", resource_key)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_value is not None:
            pulumi.set(__self__, "resource_value", resource_value)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_class")

    @service_class.setter
    def service_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_class", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceKey")
    def resource_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_key")

    @resource_key.setter
    def resource_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_key", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_value")

    @resource_value.setter
    def resource_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_value", value)

    @property
    @pulumi.getter(name="serviceID")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)


@pulumi.input_type
class AuthorizationPolicyStatusArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source: Optional[pulumi.Input['AuthorizationPolicyStatusSourceArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input['AuthorizationPolicyStatusTargetArgs']] = None):
        """
        AuthorizationPolicyStatus defines the observed state of AuthorizationPolicy
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="policyID")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['AuthorizationPolicyStatusSourceArgs']]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['AuthorizationPolicyStatusSourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['AuthorizationPolicyStatusTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['AuthorizationPolicyStatusTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class AuthorizationPolicyStatusSourceArgs:
    def __init__(__self__, *,
                 service_class: pulumi.Input[str],
                 resource_group: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_key: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 resource_value: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "service_class", service_class)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_key is not None:
            pulumi.set(__self__, "resource_key", resource_key)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_value is not None:
            pulumi.set(__self__, "resource_value", resource_value)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_class")

    @service_class.setter
    def service_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_class", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceKey")
    def resource_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_key")

    @resource_key.setter
    def resource_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_key", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_value")

    @resource_value.setter
    def resource_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_value", value)

    @property
    @pulumi.getter(name="serviceID")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)


@pulumi.input_type
class AuthorizationPolicyStatusTargetArgs:
    def __init__(__self__, *,
                 service_class: pulumi.Input[str],
                 resource_group: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_key: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 resource_value: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "service_class", service_class)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_key is not None:
            pulumi.set(__self__, "resource_key", resource_key)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_value is not None:
            pulumi.set(__self__, "resource_value", resource_value)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_class")

    @service_class.setter
    def service_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_class", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceKey")
    def resource_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_key")

    @resource_key.setter
    def resource_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_key", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="resourceValue")
    def resource_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_value")

    @resource_value.setter
    def resource_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_value", value)

    @property
    @pulumi.getter(name="serviceID")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)


@pulumi.input_type
class CustomRoleSpecArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 description: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 role_name: pulumi.Input[str],
                 service_class: pulumi.Input[str]):
        """
        CustomRoleSpec defines the desired state of CustomRole
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "role_name", role_name)
        pulumi.set(__self__, "service_class", service_class)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_name", value)

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_class")

    @service_class.setter
    def service_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_class", value)


@pulumi.input_type
class CustomRoleStatusArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 role_crn: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 service_class: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        CustomRoleStatus defines the observed state of CustomRole
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if role_crn is not None:
            pulumi.set(__self__, "role_crn", role_crn)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if service_class is not None:
            pulumi.set(__self__, "service_class", service_class)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="roleCRN")
    def role_crn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_crn")

    @role_crn.setter
    def role_crn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_crn", value)

    @property
    @pulumi.getter(name="roleID")
    def role_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_name", value)

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_class")

    @service_class.setter
    def service_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_class", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)



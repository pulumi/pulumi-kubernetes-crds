// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Hive.V1
{

    /// <summary>
    /// requestHeader enables user authentication using request header credentials
    /// </summary>
    public class SyncIdentityProviderSpecIdentityProvidersRequestHeaderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
        /// </summary>
        [Input("ca")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Hive.V1.SyncIdentityProviderSpecIdentityProvidersRequestHeaderCaArgs>? Ca { get; set; }

        /// <summary>
        /// challengeURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect WWW-Authenticate challenges will be redirected here. ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when challenge is set to true.
        /// </summary>
        [Input("challengeURL")]
        public Input<string>? ChallengeURL { get; set; }

        [Input("clientCommonNames")]
        private InputList<string>? _clientCommonNames;

        /// <summary>
        /// clientCommonNames is an optional list of common names to require a match from. If empty, any client certificate validated against the clientCA bundle is considered authoritative.
        /// </summary>
        public InputList<string> ClientCommonNames
        {
            get => _clientCommonNames ?? (_clientCommonNames = new InputList<string>());
            set => _clientCommonNames = value;
        }

        [Input("emailHeaders")]
        private InputList<string>? _emailHeaders;

        /// <summary>
        /// emailHeaders is the set of headers to check for the email address
        /// </summary>
        public InputList<string> EmailHeaders
        {
            get => _emailHeaders ?? (_emailHeaders = new InputList<string>());
            set => _emailHeaders = value;
        }

        [Input("headers")]
        private InputList<string>? _headers;

        /// <summary>
        /// headers is the set of headers to check for identity information
        /// </summary>
        public InputList<string> Headers
        {
            get => _headers ?? (_headers = new InputList<string>());
            set => _headers = value;
        }

        /// <summary>
        /// loginURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect interactive logins will be redirected here ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when login is set to true.
        /// </summary>
        [Input("loginURL")]
        public Input<string>? LoginURL { get; set; }

        [Input("nameHeaders")]
        private InputList<string>? _nameHeaders;

        /// <summary>
        /// nameHeaders is the set of headers to check for the display name
        /// </summary>
        public InputList<string> NameHeaders
        {
            get => _nameHeaders ?? (_nameHeaders = new InputList<string>());
            set => _nameHeaders = value;
        }

        [Input("preferredUsernameHeaders")]
        private InputList<string>? _preferredUsernameHeaders;

        /// <summary>
        /// preferredUsernameHeaders is the set of headers to check for the preferred username
        /// </summary>
        public InputList<string> PreferredUsernameHeaders
        {
            get => _preferredUsernameHeaders ?? (_preferredUsernameHeaders = new InputList<string>());
            set => _preferredUsernameHeaders = value;
        }

        public SyncIdentityProviderSpecIdentityProvidersRequestHeaderArgs()
        {
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Hive.V1
{

    [OutputType]
    public sealed class ClusterDeploymentSpec
    {
        /// <summary>
        /// BaseDomain is the base domain to which the cluster should belong.
        /// </summary>
        public readonly string BaseDomain;
        /// <summary>
        /// CertificateBundles is a list of certificate bundles associated with this cluster
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecCertificateBundles> CertificateBundles;
        /// <summary>
        /// ClusterMetadata contains metadata information about the installed cluster.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecClusterMetadata ClusterMetadata;
        /// <summary>
        /// ClusterName is the friendly name of the cluster. It is used for subdomains, some resource tagging, and other instances where a friendly name for the cluster is useful.
        /// </summary>
        public readonly string ClusterName;
        /// <summary>
        /// ClusterPoolRef is a reference to the ClusterPool that this ClusterDeployment originated from.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecClusterPoolRef ClusterPoolRef;
        /// <summary>
        /// ControlPlaneConfig contains additional configuration for the target cluster's control plane
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecControlPlaneConfig ControlPlaneConfig;
        /// <summary>
        /// HibernateAfter will transition a cluster to hibernating power state after it has been running for the given duration. The time that a cluster has been running is the time since the cluster was installed or the time since the cluster last came out of hibernation.
        /// </summary>
        public readonly string HibernateAfter;
        /// <summary>
        /// Ingress allows defining desired clusteringress/shards to be configured on the cluster.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecIngress> Ingress;
        /// <summary>
        /// InstallAttemptsLimit is the maximum number of times Hive will attempt to install the cluster.
        /// </summary>
        public readonly int InstallAttemptsLimit;
        /// <summary>
        /// Installed is true if the cluster has been installed
        /// </summary>
        public readonly bool Installed;
        /// <summary>
        /// ManageDNS specifies whether a DNSZone should be created and managed automatically for this ClusterDeployment
        /// </summary>
        public readonly bool ManageDNS;
        /// <summary>
        /// Platform is the configuration for the specific platform upon which to perform the installation.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecPlatform Platform;
        /// <summary>
        /// PowerState indicates whether a cluster should be running or hibernating. When omitted, PowerState defaults to the Running state.
        /// </summary>
        public readonly string PowerState;
        /// <summary>
        /// PreserveOnDelete allows the user to disconnect a cluster from Hive without deprovisioning it
        /// </summary>
        public readonly bool PreserveOnDelete;
        /// <summary>
        /// Provisioning contains settings used only for initial cluster provisioning. May be unset in the case of adopted clusters.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecProvisioning Provisioning;
        /// <summary>
        /// PullSecretRef is the reference to the secret to use when pulling images.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecPullSecretRef PullSecretRef;

        [OutputConstructor]
        private ClusterDeploymentSpec(
            string baseDomain,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecCertificateBundles> certificateBundles,

            Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecClusterMetadata clusterMetadata,

            string clusterName,

            Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecClusterPoolRef clusterPoolRef,

            Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecControlPlaneConfig controlPlaneConfig,

            string hibernateAfter,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecIngress> ingress,

            int installAttemptsLimit,

            bool installed,

            bool manageDNS,

            Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecPlatform platform,

            string powerState,

            bool preserveOnDelete,

            Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecProvisioning provisioning,

            Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecPullSecretRef pullSecretRef)
        {
            BaseDomain = baseDomain;
            CertificateBundles = certificateBundles;
            ClusterMetadata = clusterMetadata;
            ClusterName = clusterName;
            ClusterPoolRef = clusterPoolRef;
            ControlPlaneConfig = controlPlaneConfig;
            HibernateAfter = hibernateAfter;
            Ingress = ingress;
            InstallAttemptsLimit = installAttemptsLimit;
            Installed = installed;
            ManageDNS = manageDNS;
            Platform = platform;
            PowerState = powerState;
            PreserveOnDelete = preserveOnDelete;
            Provisioning = provisioning;
            PullSecretRef = pullSecretRef;
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Hive.V1
{

    [OutputType]
    public sealed class SelectorSyncIdentityProviderSpecIdentityProvidersOpenID
    {
        /// <summary>
        /// ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Hive.V1.SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDCa Ca;
        /// <summary>
        /// claims mappings
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Hive.V1.SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClaims Claims;
        /// <summary>
        /// clientID is the oauth client ID
        /// </summary>
        public readonly string ClientID;
        /// <summary>
        /// clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Hive.V1.SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClientSecret ClientSecret;
        /// <summary>
        /// extraAuthorizeParameters are any custom parameters to add to the authorize request.
        /// </summary>
        public readonly ImmutableDictionary<string, string> ExtraAuthorizeParameters;
        /// <summary>
        /// extraScopes are any scopes to request in addition to the standard "openid" scope.
        /// </summary>
        public readonly ImmutableArray<string> ExtraScopes;
        /// <summary>
        /// issuer is the URL that the OpenID Provider asserts as its Issuer Identifier. It must use the https scheme with no query or fragment component.
        /// </summary>
        public readonly string Issuer;

        [OutputConstructor]
        private SelectorSyncIdentityProviderSpecIdentityProvidersOpenID(
            Pulumi.Kubernetes.Types.Outputs.Hive.V1.SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDCa ca,

            Pulumi.Kubernetes.Types.Outputs.Hive.V1.SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClaims claims,

            string clientID,

            Pulumi.Kubernetes.Types.Outputs.Hive.V1.SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClientSecret clientSecret,

            ImmutableDictionary<string, string> extraAuthorizeParameters,

            ImmutableArray<string> extraScopes,

            string issuer)
        {
            Ca = ca;
            Claims = claims;
            ClientID = clientID;
            ClientSecret = clientSecret;
            ExtraAuthorizeParameters = extraAuthorizeParameters;
            ExtraScopes = extraScopes;
            Issuer = issuer;
        }
    }
}

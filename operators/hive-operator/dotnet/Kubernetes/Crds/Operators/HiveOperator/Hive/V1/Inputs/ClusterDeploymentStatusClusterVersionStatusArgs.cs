// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Hive.V1
{

    /// <summary>
    /// ClusterVersionStatus will hold a copy of the remote cluster's ClusterVersion.Status
    /// </summary>
    public class ClusterDeploymentStatusClusterVersionStatusArgs : Pulumi.ResourceArgs
    {
        [Input("availableUpdates", required: true)]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Hive.V1.ClusterDeploymentStatusClusterVersionStatusAvailableUpdatesArgs>? _availableUpdates;

        /// <summary>
        /// availableUpdates contains the list of updates that are appropriate for this cluster. This list may be empty if no updates are recommended, if the update service is unavailable, or if an invalid channel has been specified.
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Hive.V1.ClusterDeploymentStatusClusterVersionStatusAvailableUpdatesArgs> AvailableUpdates
        {
            get => _availableUpdates ?? (_availableUpdates = new InputList<Pulumi.Kubernetes.Types.Inputs.Hive.V1.ClusterDeploymentStatusClusterVersionStatusAvailableUpdatesArgs>());
            set => _availableUpdates = value;
        }

        [Input("conditions")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Hive.V1.ClusterDeploymentStatusClusterVersionStatusConditionsArgs>? _conditions;

        /// <summary>
        /// conditions provides information about the cluster version. The condition "Available" is set to true if the desiredUpdate has been reached. The condition "Progressing" is set to true if an update is being applied. The condition "Degraded" is set to true if an update is currently blocked by a temporary or permanent error. Conditions are only valid for the current desiredUpdate when metadata.generation is equal to status.generation.
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Hive.V1.ClusterDeploymentStatusClusterVersionStatusConditionsArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Pulumi.Kubernetes.Types.Inputs.Hive.V1.ClusterDeploymentStatusClusterVersionStatusConditionsArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// desired is the version that the cluster is reconciling towards. If the cluster is not yet fully initialized desired will be set with the information available, which may be an image or a tag.
        /// </summary>
        [Input("desired", required: true)]
        public Input<Pulumi.Kubernetes.Types.Inputs.Hive.V1.ClusterDeploymentStatusClusterVersionStatusDesiredArgs> Desired { get; set; } = null!;

        [Input("history")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Hive.V1.ClusterDeploymentStatusClusterVersionStatusHistoryArgs>? _history;

        /// <summary>
        /// history contains a list of the most recent versions applied to the cluster. This value may be empty during cluster startup, and then will be updated when a new update is being applied. The newest update is first in the list and it is ordered by recency. Updates in the history have state Completed if the rollout completed - if an update was failing or halfway applied the state will be Partial. Only a limited amount of update history is preserved.
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Hive.V1.ClusterDeploymentStatusClusterVersionStatusHistoryArgs> History
        {
            get => _history ?? (_history = new InputList<Pulumi.Kubernetes.Types.Inputs.Hive.V1.ClusterDeploymentStatusClusterVersionStatusHistoryArgs>());
            set => _history = value;
        }

        /// <summary>
        /// observedGeneration reports which version of the spec is being synced. If this value is not equal to metadata.generation, then the desired and conditions fields may represent a previous version.
        /// </summary>
        [Input("observedGeneration", required: true)]
        public Input<int> ObservedGeneration { get; set; } = null!;

        /// <summary>
        /// versionHash is a fingerprint of the content that the cluster will be updated with. It is used by the operator to avoid unnecessary work and is for internal use only.
        /// </summary>
        [Input("versionHash", required: true)]
        public Input<string> VersionHash { get; set; } = null!;

        public ClusterDeploymentStatusClusterVersionStatusArgs()
        {
        }
    }
}

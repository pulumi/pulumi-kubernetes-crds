// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Hive.V1
{

    /// <summary>
    /// ClusterIngress contains the configurable pieces for any ClusterIngress objects that should exist on the cluster.
    /// </summary>
    public class ClusterDeploymentSpecIngressArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Domain (sometimes referred to as shard) is the full DNS suffix that the resulting IngressController object will service (eg abcd.mycluster.mydomain.com).
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// Name of the ClusterIngress object to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// NamespaceSelector allows filtering the list of namespaces serviced by the ingress controller.
        /// </summary>
        [Input("namespaceSelector")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Hive.V1.ClusterDeploymentSpecIngressNamespaceSelectorArgs>? NamespaceSelector { get; set; }

        /// <summary>
        /// RouteSelector allows filtering the set of Routes serviced by the ingress controller
        /// </summary>
        [Input("routeSelector")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Hive.V1.ClusterDeploymentSpecIngressRouteSelectorArgs>? RouteSelector { get; set; }

        /// <summary>
        /// ServingCertificate references a CertificateBundle in the ClusterDeployment.Spec that should be used for this Ingress
        /// </summary>
        [Input("servingCertificate")]
        public Input<string>? ServingCertificate { get; set; }

        public ClusterDeploymentSpecIngressArgs()
        {
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Hive.V1
{

    [OutputType]
    public sealed class ClusterDeploymentSpecIngress
    {
        /// <summary>
        /// Domain (sometimes referred to as shard) is the full DNS suffix that the resulting IngressController object will service (eg abcd.mycluster.mydomain.com).
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// Name of the ClusterIngress object to create.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// NamespaceSelector allows filtering the list of namespaces serviced by the ingress controller.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecIngressNamespaceSelector NamespaceSelector;
        /// <summary>
        /// RouteSelector allows filtering the set of Routes serviced by the ingress controller
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecIngressRouteSelector RouteSelector;
        /// <summary>
        /// ServingCertificate references a CertificateBundle in the ClusterDeployment.Spec that should be used for this Ingress
        /// </summary>
        public readonly string ServingCertificate;

        [OutputConstructor]
        private ClusterDeploymentSpecIngress(
            string domain,

            string name,

            Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecIngressNamespaceSelector namespaceSelector,

            Pulumi.Kubernetes.Types.Outputs.Hive.V1.ClusterDeploymentSpecIngressRouteSelector routeSelector,

            string servingCertificate)
        {
            Domain = domain;
            Name = name;
            NamespaceSelector = namespaceSelector;
            RouteSelector = routeSelector;
            ServingCertificate = servingCertificate;
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace hive {
    export namespace v1 {
        /**
         * CheckpointSpec defines the metadata around the Hive objects state in the namespace at the time of the last backup.
         */
        export interface CheckpointSpec {
            /**
             * LastBackupChecksum is the checksum of all Hive objects in the namespace at the time of the last backup.
             */
            lastBackupChecksum: pulumi.Input<string>;
            /**
             * LastBackupRef is a reference to last backup object created
             */
            lastBackupRef: pulumi.Input<inputs.hive.v1.CheckpointSpecLastBackupRef>;
            /**
             * LastBackupTime is the last time we performed a backup of the namespace
             */
            lastBackupTime: pulumi.Input<string>;
        }

        /**
         * LastBackupRef is a reference to last backup object created
         */
        export interface CheckpointSpecLastBackupRef {
            name: pulumi.Input<string>;
            namespace: pulumi.Input<string>;
        }

        /**
         * ClusterClaimSpec defines the desired state of the ClusterClaim.
         */
        export interface ClusterClaimSpec {
            /**
             * ClusterPoolName is the name of the cluster pool from which to claim a cluster.
             */
            clusterPoolName: pulumi.Input<string>;
            /**
             * Lifetime is the maximum lifetime of the claim after it is assigned a cluster. If the claim still exists when the lifetime has elapsed, the claim will be deleted by Hive.
             */
            lifetime?: pulumi.Input<string>;
            /**
             * Namespace is the namespace containing the ClusterDeployment (name will match the namespace) of the claimed cluster. This field will be set as soon as a suitable cluster can be found, however that cluster may still be resuming and not yet ready for use. Wait for the ClusterRunning condition to be true to avoid this issue.
             */
            namespace?: pulumi.Input<string>;
            /**
             * Subjects hold references to which to authorize access to the claimed cluster.
             */
            subjects?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterClaimSpecSubjects>[]>;
        }

        /**
         * Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
         */
        export interface ClusterClaimSpecSubjects {
            /**
             * APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
             */
            kind: pulumi.Input<string>;
            /**
             * Name of the object being referenced.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ClusterClaimStatus defines the observed state of ClusterClaim.
         */
        export interface ClusterClaimStatus {
            /**
             * Conditions includes more detailed status for the cluster pool.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterClaimStatusConditions>[]>;
        }

        /**
         * ClusterClaimCondition contains details for the current condition of a cluster claim.
         */
        export interface ClusterClaimStatusConditions {
            /**
             * LastProbeTime is the last time we probed the condition.
             */
            lastProbeTime?: pulumi.Input<string>;
            /**
             * LastTransitionTime is the last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human-readable message indicating details about last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * Reason is a unique, one-word, CamelCase reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status is the status of the condition.
             */
            status: pulumi.Input<string>;
            /**
             * Type is the type of the condition.
             */
            type: pulumi.Input<string>;
        }

        /**
         * ClusterDeploymentSpec defines the desired state of ClusterDeployment
         */
        export interface ClusterDeploymentSpec {
            /**
             * BaseDomain is the base domain to which the cluster should belong.
             */
            baseDomain: pulumi.Input<string>;
            /**
             * CertificateBundles is a list of certificate bundles associated with this cluster
             */
            certificateBundles?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecCertificateBundles>[]>;
            /**
             * ClusterMetadata contains metadata information about the installed cluster.
             */
            clusterMetadata?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecClusterMetadata>;
            /**
             * ClusterName is the friendly name of the cluster. It is used for subdomains, some resource tagging, and other instances where a friendly name for the cluster is useful.
             */
            clusterName: pulumi.Input<string>;
            /**
             * ClusterPoolRef is a reference to the ClusterPool that this ClusterDeployment originated from.
             */
            clusterPoolRef?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecClusterPoolRef>;
            /**
             * ControlPlaneConfig contains additional configuration for the target cluster's control plane
             */
            controlPlaneConfig?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecControlPlaneConfig>;
            /**
             * HibernateAfter will transition a cluster to hibernating power state after it has been running for the given duration. The time that a cluster has been running is the time since the cluster was installed or the time since the cluster last came out of hibernation.
             */
            hibernateAfter?: pulumi.Input<string>;
            /**
             * Ingress allows defining desired clusteringress/shards to be configured on the cluster.
             */
            ingress?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecIngress>[]>;
            /**
             * InstallAttemptsLimit is the maximum number of times Hive will attempt to install the cluster.
             */
            installAttemptsLimit?: pulumi.Input<number>;
            /**
             * Installed is true if the cluster has been installed
             */
            installed?: pulumi.Input<boolean>;
            /**
             * ManageDNS specifies whether a DNSZone should be created and managed automatically for this ClusterDeployment
             */
            manageDNS?: pulumi.Input<boolean>;
            /**
             * Platform is the configuration for the specific platform upon which to perform the installation.
             */
            platform: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatform>;
            /**
             * PowerState indicates whether a cluster should be running or hibernating. When omitted, PowerState defaults to the Running state.
             */
            powerState?: pulumi.Input<string>;
            /**
             * PreserveOnDelete allows the user to disconnect a cluster from Hive without deprovisioning it
             */
            preserveOnDelete?: pulumi.Input<boolean>;
            /**
             * Provisioning contains settings used only for initial cluster provisioning. May be unset in the case of adopted clusters.
             */
            provisioning?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecProvisioning>;
            /**
             * PullSecretRef is the reference to the secret to use when pulling images.
             */
            pullSecretRef?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPullSecretRef>;
        }

        /**
         * CertificateBundleSpec specifies a certificate bundle associated with a cluster deployment
         */
        export interface ClusterDeploymentSpecCertificateBundles {
            /**
             * CertificateSecretRef is the reference to the secret that contains the certificate bundle. If the certificate bundle is to be generated, it will be generated with the name in this reference. Otherwise, it is expected that the secret should exist in the same namespace as the ClusterDeployment
             */
            certificateSecretRef: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecCertificateBundlesCertificateSecretRef>;
            /**
             * Generate indicates whether this bundle should have real certificates generated for it.
             */
            generate?: pulumi.Input<boolean>;
            /**
             * Name is an identifier that must be unique within the bundle and must be referenced by an ingress or by the control plane serving certs
             */
            name: pulumi.Input<string>;
        }

        /**
         * CertificateSecretRef is the reference to the secret that contains the certificate bundle. If the certificate bundle is to be generated, it will be generated with the name in this reference. Otherwise, it is expected that the secret should exist in the same namespace as the ClusterDeployment
         */
        export interface ClusterDeploymentSpecCertificateBundlesCertificateSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ClusterMetadata contains metadata information about the installed cluster.
         */
        export interface ClusterDeploymentSpecClusterMetadata {
            /**
             * AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
             */
            adminKubeconfigSecretRef: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecClusterMetadataAdminKubeconfigSecretRef>;
            /**
             * AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
             */
            adminPasswordSecretRef: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecClusterMetadataAdminPasswordSecretRef>;
            /**
             * ClusterID is a globally unique identifier for this cluster generated during installation. Used for reporting metrics among other places.
             */
            clusterID: pulumi.Input<string>;
            /**
             * InfraID is an identifier for this cluster generated during installation and used for tagging/naming resources in cloud providers.
             */
            infraID: pulumi.Input<string>;
        }

        /**
         * AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
         */
        export interface ClusterDeploymentSpecClusterMetadataAdminKubeconfigSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
         */
        export interface ClusterDeploymentSpecClusterMetadataAdminPasswordSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ClusterPoolRef is a reference to the ClusterPool that this ClusterDeployment originated from.
         */
        export interface ClusterDeploymentSpecClusterPoolRef {
            /**
             * ClaimName is the name of the ClusterClaim that claimed the cluster from the pool.
             */
            claimName?: pulumi.Input<string>;
            /**
             * Namespace is the namespace where the ClusterPool resides.
             */
            namespace: pulumi.Input<string>;
            /**
             * PoolName is the name of the ClusterPool for which the cluster was created.
             */
            poolName: pulumi.Input<string>;
        }

        /**
         * ControlPlaneConfig contains additional configuration for the target cluster's control plane
         */
        export interface ClusterDeploymentSpecControlPlaneConfig {
            /**
             * APIURLOverride is the optional URL override to which Hive will transition for communication with the API server of the remote cluster. When a remote cluster is created, Hive will initially communicate using the API URL established during installation. If an API URL Override is specified, Hive will periodically attempt to connect to the remote cluster using the override URL. Once Hive has determined that the override URL is active, Hive will use the override URL for further communications with the API server of the remote cluster.
             */
            apiURLOverride?: pulumi.Input<string>;
            /**
             * ServingCertificates specifies serving certificates for the control plane
             */
            servingCertificates?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecControlPlaneConfigServingCertificates>;
        }

        /**
         * ServingCertificates specifies serving certificates for the control plane
         */
        export interface ClusterDeploymentSpecControlPlaneConfigServingCertificates {
            /**
             * Additional is a list of additional domains and certificates that are also associated with the control plane's api endpoint.
             */
            additional?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecControlPlaneConfigServingCertificatesAdditional>[]>;
            /**
             * Default references the name of a CertificateBundle in the ClusterDeployment that should be used for the control plane's default endpoint.
             */
            default?: pulumi.Input<string>;
        }

        /**
         * ControlPlaneAdditionalCertificate defines an additional serving certificate for a control plane
         */
        export interface ClusterDeploymentSpecControlPlaneConfigServingCertificatesAdditional {
            /**
             * Domain is the domain of the additional control plane certificate
             */
            domain: pulumi.Input<string>;
            /**
             * Name references a CertificateBundle in the ClusterDeployment.Spec that should be used for this additional certificate.
             */
            name: pulumi.Input<string>;
        }

        /**
         * ClusterIngress contains the configurable pieces for any ClusterIngress objects that should exist on the cluster.
         */
        export interface ClusterDeploymentSpecIngress {
            /**
             * Domain (sometimes referred to as shard) is the full DNS suffix that the resulting IngressController object will service (eg abcd.mycluster.mydomain.com).
             */
            domain: pulumi.Input<string>;
            /**
             * Name of the ClusterIngress object to create.
             */
            name: pulumi.Input<string>;
            /**
             * NamespaceSelector allows filtering the list of namespaces serviced by the ingress controller.
             */
            namespaceSelector?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecIngressNamespaceSelector>;
            /**
             * RouteSelector allows filtering the set of Routes serviced by the ingress controller
             */
            routeSelector?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecIngressRouteSelector>;
            /**
             * ServingCertificate references a CertificateBundle in the ClusterDeployment.Spec that should be used for this Ingress
             */
            servingCertificate?: pulumi.Input<string>;
        }

        /**
         * NamespaceSelector allows filtering the list of namespaces serviced by the ingress controller.
         */
        export interface ClusterDeploymentSpecIngressNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecIngressNamespaceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterDeploymentSpecIngressNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * RouteSelector allows filtering the set of Routes serviced by the ingress controller
         */
        export interface ClusterDeploymentSpecIngressRouteSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecIngressRouteSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterDeploymentSpecIngressRouteSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Platform is the configuration for the specific platform upon which to perform the installation.
         */
        export interface ClusterDeploymentSpecPlatform {
            /**
             * AWS is the configuration used when installing on AWS.
             */
            aws?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformAws>;
            /**
             * Azure is the configuration used when installing on Azure.
             */
            azure?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformAzure>;
            /**
             * BareMetal is the configuration used when installing on bare metal.
             */
            baremetal?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformBaremetal>;
            /**
             * GCP is the configuration used when installing on Google Cloud Platform.
             */
            gcp?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformGcp>;
            /**
             * OpenStack is the configuration used when installing on OpenStack
             */
            openstack?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformOpenstack>;
            /**
             * Ovirt is the configuration used when installing on oVirt
             */
            ovirt?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformOvirt>;
            /**
             * VSphere is the configuration used when installing on vSphere
             */
            vsphere?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformVsphere>;
        }

        /**
         * AWS is the configuration used when installing on AWS.
         */
        export interface ClusterDeploymentSpecPlatformAws {
            /**
             * CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformAwsCredentialsSecretRef>;
            /**
             * Region specifies the AWS region where the cluster will be created.
             */
            region: pulumi.Input<string>;
            /**
             * UserTags specifies additional tags for AWS resources created for the cluster.
             */
            userTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
         */
        export interface ClusterDeploymentSpecPlatformAwsCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Azure is the configuration used when installing on Azure.
         */
        export interface ClusterDeploymentSpecPlatformAzure {
            /**
             * BaseDomainResourceGroupName specifies the resource group where the azure DNS zone for the base domain is found
             */
            baseDomainResourceGroupName?: pulumi.Input<string>;
            /**
             * CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformAzureCredentialsSecretRef>;
            /**
             * Region specifies the Azure region where the cluster will be created.
             */
            region: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
         */
        export interface ClusterDeploymentSpecPlatformAzureCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * BareMetal is the configuration used when installing on bare metal.
         */
        export interface ClusterDeploymentSpecPlatformBaremetal {
            /**
             * LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
             */
            libvirtSSHPrivateKeySecretRef: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRef>;
        }

        /**
         * LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
         */
        export interface ClusterDeploymentSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * GCP is the configuration used when installing on Google Cloud Platform.
         */
        export interface ClusterDeploymentSpecPlatformGcp {
            /**
             * CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformGcpCredentialsSecretRef>;
            /**
             * Region specifies the GCP region where the cluster will be created.
             */
            region: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
         */
        export interface ClusterDeploymentSpecPlatformGcpCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * OpenStack is the configuration used when installing on OpenStack
         */
        export interface ClusterDeploymentSpecPlatformOpenstack {
            /**
             * CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack. There is additional configuration required for the OpenShift cluster to trust the certificates provided in this secret. The "clouds.yaml" file included in the credentialsSecretRef Secret must also include a reference to the certificate bundle file for the OpenShift cluster being created to trust the OpenStack endpoints. The "clouds.yaml" file must set the "cacert" field to either "/etc/openstack-ca/<key name containing the trust bundle in credentialsSecretRef Secret>" or "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem". 
             *  For example, """clouds.yaml clouds:   shiftstack:     auth: ...     cacert: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" """
             */
            certificatesSecretRef?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformOpenstackCertificatesSecretRef>;
            /**
             * Cloud will be used to indicate the OS_CLOUD value to use the right section from the clouds.yaml in the CredentialsSecretRef.
             */
            cloud: pulumi.Input<string>;
            /**
             * CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformOpenstackCredentialsSecretRef>;
            /**
             * TrunkSupport indicates whether or not to use trunk ports in your OpenShift cluster.
             */
            trunkSupport?: pulumi.Input<boolean>;
        }

        /**
         * CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack. There is additional configuration required for the OpenShift cluster to trust the certificates provided in this secret. The "clouds.yaml" file included in the credentialsSecretRef Secret must also include a reference to the certificate bundle file for the OpenShift cluster being created to trust the OpenStack endpoints. The "clouds.yaml" file must set the "cacert" field to either "/etc/openstack-ca/<key name containing the trust bundle in credentialsSecretRef Secret>" or "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem". 
         *  For example, """clouds.yaml clouds:   shiftstack:     auth: ...     cacert: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" """
         */
        export interface ClusterDeploymentSpecPlatformOpenstackCertificatesSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
         */
        export interface ClusterDeploymentSpecPlatformOpenstackCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Ovirt is the configuration used when installing on oVirt
         */
        export interface ClusterDeploymentSpecPlatformOvirt {
            /**
             * CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
             */
            certificatesSecretRef: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformOvirtCertificatesSecretRef>;
            /**
             * CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformOvirtCredentialsSecretRef>;
            /**
             * The target cluster under which all VMs will run
             */
            ovirt_cluster_id: pulumi.Input<string>;
            /**
             * The target network of all the network interfaces of the nodes. Omitting defaults to ovirtmgmt network which is a default network for evert ovirt cluster.
             */
            ovirt_network_name?: pulumi.Input<string>;
            /**
             * The target storage domain under which all VM disk would be created.
             */
            storage_domain_id: pulumi.Input<string>;
        }

        /**
         * CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
         */
        export interface ClusterDeploymentSpecPlatformOvirtCertificatesSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
         */
        export interface ClusterDeploymentSpecPlatformOvirtCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * VSphere is the configuration used when installing on vSphere
         */
        export interface ClusterDeploymentSpecPlatformVsphere {
            /**
             * CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
             */
            certificatesSecretRef: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformVsphereCertificatesSecretRef>;
            /**
             * Cluster is the name of the cluster virtual machines will be cloned into.
             */
            cluster?: pulumi.Input<string>;
            /**
             * CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecPlatformVsphereCredentialsSecretRef>;
            /**
             * Datacenter is the name of the datacenter to use in the vCenter.
             */
            datacenter: pulumi.Input<string>;
            /**
             * DefaultDatastore is the default datastore to use for provisioning volumes.
             */
            defaultDatastore: pulumi.Input<string>;
            /**
             * Folder is the name of the folder that will be used and/or created for virtual machines.
             */
            folder?: pulumi.Input<string>;
            /**
             * Network specifies the name of the network to be used by the cluster.
             */
            network?: pulumi.Input<string>;
            /**
             * VCenter is the domain name or IP address of the vCenter.
             */
            vCenter: pulumi.Input<string>;
        }

        /**
         * CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
         */
        export interface ClusterDeploymentSpecPlatformVsphereCertificatesSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
         */
        export interface ClusterDeploymentSpecPlatformVsphereCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Provisioning contains settings used only for initial cluster provisioning. May be unset in the case of adopted clusters.
         */
        export interface ClusterDeploymentSpecProvisioning {
            /**
             * ImageSetRef is a reference to a ClusterImageSet. If a value is specified for ReleaseImage, that will take precedence over the one from the ClusterImageSet.
             */
            imageSetRef?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecProvisioningImageSetRef>;
            /**
             * InstallConfigSecretRef is the reference to a secret that contains an openshift-install InstallConfig. This file will be passed through directly to the installer. Any version of InstallConfig can be used, provided it can be parsed by the openshift-install version for the release you are provisioning.
             */
            installConfigSecretRef: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecProvisioningInstallConfigSecretRef>;
            /**
             * InstallerEnv are extra environment variables to pass through to the installer. This may be used to enable additional features of the installer.
             */
            installerEnv?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecProvisioningInstallerEnv>[]>;
            /**
             * ManifestsConfigMapRef is a reference to user-provided manifests to add to or replace manifests that are generated by the installer.
             */
            manifestsConfigMapRef?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecProvisioningManifestsConfigMapRef>;
            /**
             * ReleaseImage is the image containing metadata for all components that run in the cluster, and is the primary and best way to specify what specific version of OpenShift you wish to install.
             */
            releaseImage?: pulumi.Input<string>;
            /**
             * SSHKnownHosts are known hosts to be configured in the hive install manager pod to avoid ssh prompts. Use of ssh in the install pod is somewhat limited today (failure log gathering from cluster, some bare metal provisioning scenarios), so this setting is often not needed.
             */
            sshKnownHosts?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to compute instances. This private key should correspond to the public key included in the InstallConfig. The private key is used by Hive to gather logs on the target cluster if there are install failures. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
             */
            sshPrivateKeySecretRef?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecProvisioningSshPrivateKeySecretRef>;
        }

        /**
         * ImageSetRef is a reference to a ClusterImageSet. If a value is specified for ReleaseImage, that will take precedence over the one from the ClusterImageSet.
         */
        export interface ClusterDeploymentSpecProvisioningImageSetRef {
            /**
             * Name is the name of the ClusterImageSet that this refers to
             */
            name: pulumi.Input<string>;
        }

        /**
         * InstallConfigSecretRef is the reference to a secret that contains an openshift-install InstallConfig. This file will be passed through directly to the installer. Any version of InstallConfig can be used, provided it can be parsed by the openshift-install version for the release you are provisioning.
         */
        export interface ClusterDeploymentSpecProvisioningInstallConfigSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface ClusterDeploymentSpecProvisioningInstallerEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecProvisioningInstallerEnvValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface ClusterDeploymentSpecProvisioningInstallerEnvValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecProvisioningInstallerEnvValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecProvisioningInstallerEnvValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecProvisioningInstallerEnvValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.hive.v1.ClusterDeploymentSpecProvisioningInstallerEnvValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ClusterDeploymentSpecProvisioningInstallerEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface ClusterDeploymentSpecProvisioningInstallerEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface ClusterDeploymentSpecProvisioningInstallerEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface ClusterDeploymentSpecProvisioningInstallerEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * ManifestsConfigMapRef is a reference to user-provided manifests to add to or replace manifests that are generated by the installer.
         */
        export interface ClusterDeploymentSpecProvisioningManifestsConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * SSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to compute instances. This private key should correspond to the public key included in the InstallConfig. The private key is used by Hive to gather logs on the target cluster if there are install failures. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
         */
        export interface ClusterDeploymentSpecProvisioningSshPrivateKeySecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * PullSecretRef is the reference to the secret to use when pulling images.
         */
        export interface ClusterDeploymentSpecPullSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ClusterDeploymentStatus defines the observed state of ClusterDeployment
         */
        export interface ClusterDeploymentStatus {
            /**
             * APIURL is the URL where the cluster's API can be accessed.
             */
            apiURL?: pulumi.Input<string>;
            /**
             * CertificateBundles contains of the status of the certificate bundles associated with this cluster deployment.
             */
            certificateBundles?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterDeploymentStatusCertificateBundles>[]>;
            /**
             * CLIImage is the name of the oc cli image to use when installing the target cluster
             */
            cliImage?: pulumi.Input<string>;
            /**
             * Conditions includes more detailed status for the cluster deployment
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterDeploymentStatusConditions>[]>;
            /**
             * InstallRestarts is the total count of container restarts on the clusters install job.
             */
            installRestarts?: pulumi.Input<number>;
            /**
             * InstalledTimestamp is the time we first detected that the cluster has been successfully installed.
             */
            installedTimestamp?: pulumi.Input<string>;
            /**
             * InstallerImage is the name of the installer image to use when installing the target cluster
             */
            installerImage?: pulumi.Input<string>;
            /**
             * ProvisionRef is a reference to the last ClusterProvision created for the deployment
             */
            provisionRef?: pulumi.Input<inputs.hive.v1.ClusterDeploymentStatusProvisionRef>;
            /**
             * WebConsoleURL is the URL for the cluster's web console UI.
             */
            webConsoleURL?: pulumi.Input<string>;
        }

        /**
         * CertificateBundleStatus specifies whether a certificate bundle was generated for this cluster deployment.
         */
        export interface ClusterDeploymentStatusCertificateBundles {
            /**
             * Generated indicates whether the certificate bundle was generated
             */
            generated: pulumi.Input<boolean>;
            /**
             * Name of the certificate bundle
             */
            name: pulumi.Input<string>;
        }

        /**
         * ClusterDeploymentCondition contains details for the current condition of a cluster deployment
         */
        export interface ClusterDeploymentStatusConditions {
            /**
             * LastProbeTime is the last time we probed the condition.
             */
            lastProbeTime?: pulumi.Input<string>;
            /**
             * LastTransitionTime is the last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human-readable message indicating details about last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * Reason is a unique, one-word, CamelCase reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status is the status of the condition.
             */
            status: pulumi.Input<string>;
            /**
             * Type is the type of the condition.
             */
            type: pulumi.Input<string>;
        }

        /**
         * ProvisionRef is a reference to the last ClusterProvision created for the deployment
         */
        export interface ClusterDeploymentStatusProvisionRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ClusterDeprovisionSpec defines the desired state of ClusterDeprovision
         */
        export interface ClusterDeprovisionSpec {
            /**
             * ClusterID is a globally unique identifier for the cluster to deprovision. It will be used if specified.
             */
            clusterID?: pulumi.Input<string>;
            /**
             * InfraID is the identifier generated during installation for a cluster. It is used for tagging/naming resources in cloud providers.
             */
            infraID: pulumi.Input<string>;
            /**
             * Platform contains platform-specific configuration for a ClusterDeprovision
             */
            platform?: pulumi.Input<inputs.hive.v1.ClusterDeprovisionSpecPlatform>;
        }

        /**
         * Platform contains platform-specific configuration for a ClusterDeprovision
         */
        export interface ClusterDeprovisionSpecPlatform {
            /**
             * AWS contains AWS-specific deprovision settings
             */
            aws?: pulumi.Input<inputs.hive.v1.ClusterDeprovisionSpecPlatformAws>;
            /**
             * Azure contains Azure-specific deprovision settings
             */
            azure?: pulumi.Input<inputs.hive.v1.ClusterDeprovisionSpecPlatformAzure>;
            /**
             * GCP contains GCP-specific deprovision settings
             */
            gcp?: pulumi.Input<inputs.hive.v1.ClusterDeprovisionSpecPlatformGcp>;
            /**
             * OpenStack contains OpenStack-specific deprovision settings
             */
            openstack?: pulumi.Input<inputs.hive.v1.ClusterDeprovisionSpecPlatformOpenstack>;
            /**
             * Ovirt contains oVirt-specific deprovision settings
             */
            ovirt?: pulumi.Input<inputs.hive.v1.ClusterDeprovisionSpecPlatformOvirt>;
            /**
             * VSphere contains VMWare vSphere-specific deprovision settings
             */
            vsphere?: pulumi.Input<inputs.hive.v1.ClusterDeprovisionSpecPlatformVsphere>;
        }

        /**
         * AWS contains AWS-specific deprovision settings
         */
        export interface ClusterDeprovisionSpecPlatformAws {
            /**
             * CredentialsSecretRef is the AWS account credentials to use for deprovisioning the cluster
             */
            credentialsSecretRef?: pulumi.Input<inputs.hive.v1.ClusterDeprovisionSpecPlatformAwsCredentialsSecretRef>;
            /**
             * Region is the AWS region for this deprovisioning
             */
            region: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef is the AWS account credentials to use for deprovisioning the cluster
         */
        export interface ClusterDeprovisionSpecPlatformAwsCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Azure contains Azure-specific deprovision settings
         */
        export interface ClusterDeprovisionSpecPlatformAzure {
            /**
             * CredentialsSecretRef is the Azure account credentials to use for deprovisioning the cluster
             */
            credentialsSecretRef?: pulumi.Input<inputs.hive.v1.ClusterDeprovisionSpecPlatformAzureCredentialsSecretRef>;
        }

        /**
         * CredentialsSecretRef is the Azure account credentials to use for deprovisioning the cluster
         */
        export interface ClusterDeprovisionSpecPlatformAzureCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * GCP contains GCP-specific deprovision settings
         */
        export interface ClusterDeprovisionSpecPlatformGcp {
            /**
             * CredentialsSecretRef is the GCP account credentials to use for deprovisioning the cluster
             */
            credentialsSecretRef?: pulumi.Input<inputs.hive.v1.ClusterDeprovisionSpecPlatformGcpCredentialsSecretRef>;
            /**
             * Region is the GCP region for this deprovision
             */
            region: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef is the GCP account credentials to use for deprovisioning the cluster
         */
        export interface ClusterDeprovisionSpecPlatformGcpCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * OpenStack contains OpenStack-specific deprovision settings
         */
        export interface ClusterDeprovisionSpecPlatformOpenstack {
            /**
             * CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack.
             */
            certificatesSecretRef?: pulumi.Input<inputs.hive.v1.ClusterDeprovisionSpecPlatformOpenstackCertificatesSecretRef>;
            /**
             * Cloud is the secion in the clouds.yaml secret below to use for auth/connectivity.
             */
            cloud: pulumi.Input<string>;
            /**
             * CredentialsSecretRef is the OpenStack account credentials to use for deprovisioning the cluster
             */
            credentialsSecretRef?: pulumi.Input<inputs.hive.v1.ClusterDeprovisionSpecPlatformOpenstackCredentialsSecretRef>;
        }

        /**
         * CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack.
         */
        export interface ClusterDeprovisionSpecPlatformOpenstackCertificatesSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef is the OpenStack account credentials to use for deprovisioning the cluster
         */
        export interface ClusterDeprovisionSpecPlatformOpenstackCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Ovirt contains oVirt-specific deprovision settings
         */
        export interface ClusterDeprovisionSpecPlatformOvirt {
            /**
             * CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with the oVirt.
             */
            certificatesSecretRef: pulumi.Input<inputs.hive.v1.ClusterDeprovisionSpecPlatformOvirtCertificatesSecretRef>;
            /**
             * The oVirt cluster ID
             */
            clusterID: pulumi.Input<string>;
            /**
             * CredentialsSecretRef is the oVirt account credentials to use for deprovisioning the cluster secret fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.ClusterDeprovisionSpecPlatformOvirtCredentialsSecretRef>;
        }

        /**
         * CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with the oVirt.
         */
        export interface ClusterDeprovisionSpecPlatformOvirtCertificatesSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef is the oVirt account credentials to use for deprovisioning the cluster secret fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
         */
        export interface ClusterDeprovisionSpecPlatformOvirtCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * VSphere contains VMWare vSphere-specific deprovision settings
         */
        export interface ClusterDeprovisionSpecPlatformVsphere {
            /**
             * CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
             */
            certificatesSecretRef: pulumi.Input<inputs.hive.v1.ClusterDeprovisionSpecPlatformVsphereCertificatesSecretRef>;
            /**
             * CredentialsSecretRef is the vSphere account credentials to use for deprovisioning the cluster
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.ClusterDeprovisionSpecPlatformVsphereCredentialsSecretRef>;
            /**
             * VCenter is the vSphere vCenter hostname.
             */
            vCenter: pulumi.Input<string>;
        }

        /**
         * CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
         */
        export interface ClusterDeprovisionSpecPlatformVsphereCertificatesSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef is the vSphere account credentials to use for deprovisioning the cluster
         */
        export interface ClusterDeprovisionSpecPlatformVsphereCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ClusterDeprovisionStatus defines the observed state of ClusterDeprovision
         */
        export interface ClusterDeprovisionStatus {
            /**
             * Completed is true when the uninstall has completed successfully
             */
            completed?: pulumi.Input<boolean>;
            /**
             * Conditions includes more detailed status for the cluster deprovision
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterDeprovisionStatusConditions>[]>;
        }

        /**
         * ClusterDeprovisionCondition contains details for the current condition of a ClusterDeprovision
         */
        export interface ClusterDeprovisionStatusConditions {
            /**
             * LastProbeTime is the last time we probed the condition.
             */
            lastProbeTime?: pulumi.Input<string>;
            /**
             * LastTransitionTime is the last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human-readable message indicating details about last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * Reason is a unique, one-word, CamelCase reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status is the status of the condition.
             */
            status: pulumi.Input<string>;
            /**
             * Type is the type of the condition.
             */
            type: pulumi.Input<string>;
        }

        /**
         * ClusterImageSetSpec defines the desired state of ClusterImageSet
         */
        export interface ClusterImageSetSpec {
            /**
             * ReleaseImage is the image that contains the payload to use when installing a cluster.
             */
            releaseImage: pulumi.Input<string>;
        }

        /**
         * ClusterPoolSpec defines the desired state of the ClusterPool.
         */
        export interface ClusterPoolSpec {
            /**
             * BaseDomain is the base domain to use for all clusters created in this pool.
             */
            baseDomain: pulumi.Input<string>;
            /**
             * HibernateAfter will be applied to new ClusterDeployments created for the pool. HibernateAfter will transition clusters in the clusterpool to hibernating power state after it has been running for the given duration. The time that a cluster has been running is the time since the cluster was installed or the time since the cluster last came out of hibernation.
             */
            hibernateAfter?: pulumi.Input<string>;
            /**
             * ImageSetRef is a reference to a ClusterImageSet. The release image specified in the ClusterImageSet will be used by clusters created for this cluster pool.
             */
            imageSetRef: pulumi.Input<inputs.hive.v1.ClusterPoolSpecImageSetRef>;
            /**
             * InstallConfigSecretTemplateRef is a secret with the key install-config.yaml consisting of the content of the install-config.yaml to be used as a template for all clusters in this pool. Cluster specific settings (name, basedomain) will be injected dynamically when the ClusterDeployment install-config Secret is generated.
             */
            installConfigSecretTemplateRef?: pulumi.Input<inputs.hive.v1.ClusterPoolSpecInstallConfigSecretTemplateRef>;
            /**
             * Labels to be applied to new ClusterDeployments created for the pool. ClusterDeployments that have already been claimed will not be affected when this value is modified.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * MaxConcurrent is the maximum number of clusters that will be provisioned or deprovisioned at an time. By default there is no limit.
             */
            maxConcurrent?: pulumi.Input<number>;
            /**
             * MaxSize is the maximum number of clusters that will be provisioned including clusters that have been claimed and ones waiting to be used. By default there is no limit.
             */
            maxSize?: pulumi.Input<number>;
            /**
             * Platform encompasses the desired platform for the cluster.
             */
            platform: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatform>;
            /**
             * PullSecretRef is the reference to the secret to use when pulling images.
             */
            pullSecretRef?: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPullSecretRef>;
            /**
             * Size is the default number of clusters that we should keep provisioned and waiting for use.
             */
            size: pulumi.Input<number>;
            /**
             * SkipMachinePools allows creating clusterpools where the machinepools are not managed by hive after cluster creation
             */
            skipMachinePools?: pulumi.Input<boolean>;
        }

        /**
         * ImageSetRef is a reference to a ClusterImageSet. The release image specified in the ClusterImageSet will be used by clusters created for this cluster pool.
         */
        export interface ClusterPoolSpecImageSetRef {
            /**
             * Name is the name of the ClusterImageSet that this refers to
             */
            name: pulumi.Input<string>;
        }

        /**
         * InstallConfigSecretTemplateRef is a secret with the key install-config.yaml consisting of the content of the install-config.yaml to be used as a template for all clusters in this pool. Cluster specific settings (name, basedomain) will be injected dynamically when the ClusterDeployment install-config Secret is generated.
         */
        export interface ClusterPoolSpecInstallConfigSecretTemplateRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Platform encompasses the desired platform for the cluster.
         */
        export interface ClusterPoolSpecPlatform {
            /**
             * AWS is the configuration used when installing on AWS.
             */
            aws?: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformAws>;
            /**
             * Azure is the configuration used when installing on Azure.
             */
            azure?: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformAzure>;
            /**
             * BareMetal is the configuration used when installing on bare metal.
             */
            baremetal?: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformBaremetal>;
            /**
             * GCP is the configuration used when installing on Google Cloud Platform.
             */
            gcp?: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformGcp>;
            /**
             * OpenStack is the configuration used when installing on OpenStack
             */
            openstack?: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformOpenstack>;
            /**
             * Ovirt is the configuration used when installing on oVirt
             */
            ovirt?: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformOvirt>;
            /**
             * VSphere is the configuration used when installing on vSphere
             */
            vsphere?: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformVsphere>;
        }

        /**
         * AWS is the configuration used when installing on AWS.
         */
        export interface ClusterPoolSpecPlatformAws {
            /**
             * CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformAwsCredentialsSecretRef>;
            /**
             * Region specifies the AWS region where the cluster will be created.
             */
            region: pulumi.Input<string>;
            /**
             * UserTags specifies additional tags for AWS resources created for the cluster.
             */
            userTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
         */
        export interface ClusterPoolSpecPlatformAwsCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Azure is the configuration used when installing on Azure.
         */
        export interface ClusterPoolSpecPlatformAzure {
            /**
             * BaseDomainResourceGroupName specifies the resource group where the azure DNS zone for the base domain is found
             */
            baseDomainResourceGroupName?: pulumi.Input<string>;
            /**
             * CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformAzureCredentialsSecretRef>;
            /**
             * Region specifies the Azure region where the cluster will be created.
             */
            region: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
         */
        export interface ClusterPoolSpecPlatformAzureCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * BareMetal is the configuration used when installing on bare metal.
         */
        export interface ClusterPoolSpecPlatformBaremetal {
            /**
             * LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
             */
            libvirtSSHPrivateKeySecretRef: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRef>;
        }

        /**
         * LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
         */
        export interface ClusterPoolSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * GCP is the configuration used when installing on Google Cloud Platform.
         */
        export interface ClusterPoolSpecPlatformGcp {
            /**
             * CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformGcpCredentialsSecretRef>;
            /**
             * Region specifies the GCP region where the cluster will be created.
             */
            region: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
         */
        export interface ClusterPoolSpecPlatformGcpCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * OpenStack is the configuration used when installing on OpenStack
         */
        export interface ClusterPoolSpecPlatformOpenstack {
            /**
             * CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack. There is additional configuration required for the OpenShift cluster to trust the certificates provided in this secret. The "clouds.yaml" file included in the credentialsSecretRef Secret must also include a reference to the certificate bundle file for the OpenShift cluster being created to trust the OpenStack endpoints. The "clouds.yaml" file must set the "cacert" field to either "/etc/openstack-ca/<key name containing the trust bundle in credentialsSecretRef Secret>" or "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem". 
             *  For example, """clouds.yaml clouds:   shiftstack:     auth: ...     cacert: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" """
             */
            certificatesSecretRef?: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformOpenstackCertificatesSecretRef>;
            /**
             * Cloud will be used to indicate the OS_CLOUD value to use the right section from the clouds.yaml in the CredentialsSecretRef.
             */
            cloud: pulumi.Input<string>;
            /**
             * CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformOpenstackCredentialsSecretRef>;
            /**
             * TrunkSupport indicates whether or not to use trunk ports in your OpenShift cluster.
             */
            trunkSupport?: pulumi.Input<boolean>;
        }

        /**
         * CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack. There is additional configuration required for the OpenShift cluster to trust the certificates provided in this secret. The "clouds.yaml" file included in the credentialsSecretRef Secret must also include a reference to the certificate bundle file for the OpenShift cluster being created to trust the OpenStack endpoints. The "clouds.yaml" file must set the "cacert" field to either "/etc/openstack-ca/<key name containing the trust bundle in credentialsSecretRef Secret>" or "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem". 
         *  For example, """clouds.yaml clouds:   shiftstack:     auth: ...     cacert: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" """
         */
        export interface ClusterPoolSpecPlatformOpenstackCertificatesSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
         */
        export interface ClusterPoolSpecPlatformOpenstackCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Ovirt is the configuration used when installing on oVirt
         */
        export interface ClusterPoolSpecPlatformOvirt {
            /**
             * CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
             */
            certificatesSecretRef: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformOvirtCertificatesSecretRef>;
            /**
             * CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformOvirtCredentialsSecretRef>;
            /**
             * The target cluster under which all VMs will run
             */
            ovirt_cluster_id: pulumi.Input<string>;
            /**
             * The target network of all the network interfaces of the nodes. Omitting defaults to ovirtmgmt network which is a default network for evert ovirt cluster.
             */
            ovirt_network_name?: pulumi.Input<string>;
            /**
             * The target storage domain under which all VM disk would be created.
             */
            storage_domain_id: pulumi.Input<string>;
        }

        /**
         * CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
         */
        export interface ClusterPoolSpecPlatformOvirtCertificatesSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
         */
        export interface ClusterPoolSpecPlatformOvirtCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * VSphere is the configuration used when installing on vSphere
         */
        export interface ClusterPoolSpecPlatformVsphere {
            /**
             * CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
             */
            certificatesSecretRef: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformVsphereCertificatesSecretRef>;
            /**
             * Cluster is the name of the cluster virtual machines will be cloned into.
             */
            cluster?: pulumi.Input<string>;
            /**
             * CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.ClusterPoolSpecPlatformVsphereCredentialsSecretRef>;
            /**
             * Datacenter is the name of the datacenter to use in the vCenter.
             */
            datacenter: pulumi.Input<string>;
            /**
             * DefaultDatastore is the default datastore to use for provisioning volumes.
             */
            defaultDatastore: pulumi.Input<string>;
            /**
             * Folder is the name of the folder that will be used and/or created for virtual machines.
             */
            folder?: pulumi.Input<string>;
            /**
             * Network specifies the name of the network to be used by the cluster.
             */
            network?: pulumi.Input<string>;
            /**
             * VCenter is the domain name or IP address of the vCenter.
             */
            vCenter: pulumi.Input<string>;
        }

        /**
         * CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
         */
        export interface ClusterPoolSpecPlatformVsphereCertificatesSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
         */
        export interface ClusterPoolSpecPlatformVsphereCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * PullSecretRef is the reference to the secret to use when pulling images.
         */
        export interface ClusterPoolSpecPullSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ClusterPoolStatus defines the observed state of ClusterPool
         */
        export interface ClusterPoolStatus {
            /**
             * Conditions includes more detailed status for the cluster pool
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterPoolStatusConditions>[]>;
            /**
             * Ready is the number of unclaimed clusters that have been installed and are ready to be claimed.
             */
            ready: pulumi.Input<number>;
            /**
             * Size is the number of unclaimed clusters that have been created for the pool.
             */
            size: pulumi.Input<number>;
        }

        /**
         * ClusterPoolCondition contains details for the current condition of a cluster pool
         */
        export interface ClusterPoolStatusConditions {
            /**
             * LastProbeTime is the last time we probed the condition.
             */
            lastProbeTime?: pulumi.Input<string>;
            /**
             * LastTransitionTime is the last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human-readable message indicating details about last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * Reason is a unique, one-word, CamelCase reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status is the status of the condition.
             */
            status: pulumi.Input<string>;
            /**
             * Type is the type of the condition.
             */
            type: pulumi.Input<string>;
        }

        /**
         * ClusterProvisionSpec defines the results of provisioning a cluster.
         */
        export interface ClusterProvisionSpec {
            /**
             * AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
             */
            adminKubeconfigSecretRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecAdminKubeconfigSecretRef>;
            /**
             * AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
             */
            adminPasswordSecretRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecAdminPasswordSecretRef>;
            /**
             * Attempt is which attempt number of the cluster deployment that this ClusterProvision is
             */
            attempt: pulumi.Input<number>;
            /**
             * ClusterDeploymentRef references the cluster deployment provisioned.
             */
            clusterDeploymentRef: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecClusterDeploymentRef>;
            /**
             * ClusterID is a globally unique identifier for this cluster generated during installation. Used for reporting metrics among other places.
             */
            clusterID?: pulumi.Input<string>;
            /**
             * InfraID is an identifier for this cluster generated during installation and used for tagging/naming resources in cloud providers.
             */
            infraID?: pulumi.Input<string>;
            /**
             * InstallLog is the log from the installer.
             */
            installLog?: pulumi.Input<string>;
            /**
             * Metadata is the metadata.json generated by the installer, providing metadata information about the cluster created.
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * PodSpec is the spec to use for the installer pod.
             */
            podSpec: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpec>;
            /**
             * PrevClusterID is the cluster ID of the previous failed provision attempt.
             */
            prevClusterID?: pulumi.Input<string>;
            /**
             * PrevInfraID is the infra ID of the previous failed provision attempt.
             */
            prevInfraID?: pulumi.Input<string>;
            /**
             * Stage is the stage of provisioning that the cluster deployment has reached.
             */
            stage: pulumi.Input<string>;
        }

        /**
         * AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
         */
        export interface ClusterProvisionSpecAdminKubeconfigSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
         */
        export interface ClusterProvisionSpecAdminPasswordSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ClusterDeploymentRef references the cluster deployment provisioned.
         */
        export interface ClusterProvisionSpecClusterDeploymentRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * PodSpec is the spec to use for the installer pod.
         */
        export interface ClusterProvisionSpecPodSpec {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds?: pulumi.Input<number>;
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinity>;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken?: pulumi.Input<boolean>;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainers>[]>;
            /**
             * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
             */
            dnsConfig?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecDnsConfig>;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy?: pulumi.Input<string>;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks?: pulumi.Input<boolean>;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.
             */
            ephemeralContainers?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainers>[]>;
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecHostAliases>[]>;
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC?: pulumi.Input<boolean>;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork?: pulumi.Input<boolean>;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID?: pulumi.Input<boolean>;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname?: pulumi.Input<string>;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecImagePullSecrets>[]>;
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainers>[]>;
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.
             */
            overhead?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.
             */
            preemptionPolicy?: pulumi.Input<string>;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority?: pulumi.Input<number>;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
             */
            readinessGates?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecReadinessGates>[]>;
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.
             */
            runtimeClassName?: pulumi.Input<string>;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName?: pulumi.Input<string>;
            /**
             * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
             */
            securityContext?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecSecurityContext>;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount?: pulumi.Input<string>;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN?: pulumi.Input<boolean>;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace?: pulumi.Input<boolean>;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain?: pulumi.Input<string>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecTolerations>[]>;
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecTopologySpreadConstraints>[]>;
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumes>[]>;
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ClusterProvisionSpecPodSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityNodeAffinity>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityPodAffinity>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityPodAntiAffinity>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ClusterProvisionSpecPodSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterProvisionSpecPodSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterProvisionSpecPodSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface ClusterProvisionSpecPodSpecContainers {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersEnv>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersEnvFrom>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLifecycle>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLivenessProbe>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersPorts>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersReadinessProbe>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            resources?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersResources>;
            /**
             * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersSecurityContext>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersStartupProbe>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersVolumeDevices>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersVolumeMounts>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface ClusterProvisionSpecPodSpecContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersEnvValueFrom>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface ClusterProvisionSpecPodSpecContainersEnvFrom {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersEnvFromConfigMapRef>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersEnvFromSecretRef>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface ClusterProvisionSpecPodSpecContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface ClusterProvisionSpecPodSpecContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface ClusterProvisionSpecPodSpecContainersEnvValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersEnvValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersEnvValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersEnvValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersEnvValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ClusterProvisionSpecPodSpecContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface ClusterProvisionSpecPodSpecContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface ClusterProvisionSpecPodSpecContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface ClusterProvisionSpecPodSpecContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface ClusterProvisionSpecPodSpecContainersLifecycle {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLifecyclePostStart>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLifecyclePreStop>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ClusterProvisionSpecPodSpecContainersLifecyclePostStart {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLifecyclePostStartExec>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGet>;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocket>;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterProvisionSpecPodSpecContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetPort>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketPort>;
        }

        export interface ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketPort {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ClusterProvisionSpecPodSpecContainersLifecyclePreStop {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLifecyclePreStopExec>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGet>;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocket>;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterProvisionSpecPodSpecContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetPort>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketPort>;
        }

        export interface ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketPort {
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ClusterProvisionSpecPodSpecContainersLivenessProbe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLivenessProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGet>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterProvisionSpecPodSpecContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetPort>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketPort>;
        }

        export interface ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketPort {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface ClusterProvisionSpecPodSpecContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ClusterProvisionSpecPodSpecContainersReadinessProbe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersReadinessProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGet>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterProvisionSpecPodSpecContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetPort>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketPort>;
        }

        export interface ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketPort {
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
         */
        export interface ClusterProvisionSpecPodSpecContainersResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface ClusterProvisionSpecPodSpecContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
             */
            capabilities?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersSecurityContextCapabilities>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            seLinuxOptions?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersSecurityContextSeLinuxOptions>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
             */
            seccompProfile?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersSecurityContextSeccompProfile>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            windowsOptions?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersSecurityContextWindowsOptions>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
         */
        export interface ClusterProvisionSpecPodSpecContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         */
        export interface ClusterProvisionSpecPodSpecContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
         */
        export interface ClusterProvisionSpecPodSpecContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         */
        export interface ClusterProvisionSpecPodSpecContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ClusterProvisionSpecPodSpecContainersStartupProbe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersStartupProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersStartupProbeHttpGet>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterProvisionSpecPodSpecContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterProvisionSpecPodSpecContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetPort>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketPort>;
        }

        export interface ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketPort {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface ClusterProvisionSpecPodSpecContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface ClusterProvisionSpecPodSpecContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        export interface ClusterProvisionSpecPodSpecDnsConfig {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecDnsConfigOptions>[]>;
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface ClusterProvisionSpecPodSpecDnsConfigOptions {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainers {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersEnv>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersEnvFrom>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Lifecycle is not allowed for ephemeral containers.
             */
            lifecycle?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLifecycle>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            livenessProbe?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbe>;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: pulumi.Input<string>;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersPorts>[]>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            readinessProbe?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbe>;
            /**
             * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
             */
            resources?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersResources>;
            /**
             * SecurityContext is not allowed for ephemeral containers.
             */
            securityContext?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersSecurityContext>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            startupProbe?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbe>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.
             */
            targetContainerName?: pulumi.Input<string>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersVolumeDevices>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersVolumeMounts>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFrom>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersEnvFrom {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersEnvFromConfigMapRef>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersEnvFromSecretRef>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersLifecycle {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStart>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStop>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStart {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartExec>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet>;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocket>;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPort>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPort>;
        }

        export interface ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPort {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStop {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopExec>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet>;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocket>;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPort>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPort>;
        }

        export interface ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPort {
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGet>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetPort>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPort>;
        }

        export interface ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPort {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGet>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetPort>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPort>;
        }

        export interface ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPort {
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * SecurityContext is not allowed for ephemeral containers.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
             */
            capabilities?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextCapabilities>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            seLinuxOptions?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
             */
            seccompProfile?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeccompProfile>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            windowsOptions?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextWindowsOptions>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersStartupProbe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGet>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetPort>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketPort>;
        }

        export interface ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketPort {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface ClusterProvisionSpecPodSpecEphemeralContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        export interface ClusterProvisionSpecPodSpecHostAliases {
            /**
             * Hostnames for the above IP address.
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IP address of the host file entry.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface ClusterProvisionSpecPodSpecImagePullSecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface ClusterProvisionSpecPodSpecInitContainers {
            /**
             * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersEnv>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersEnvFrom>[]>;
            /**
             * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLifecycle>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLivenessProbe>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersPorts>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersReadinessProbe>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            resources?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersResources>;
            /**
             * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersSecurityContext>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersStartupProbe>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersVolumeDevices>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersVolumeMounts>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersEnvValueFrom>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface ClusterProvisionSpecPodSpecInitContainersEnvFrom {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersEnvFromConfigMapRef>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersEnvFromSecretRef>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface ClusterProvisionSpecPodSpecInitContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface ClusterProvisionSpecPodSpecInitContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersEnvValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersEnvValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersEnvValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersEnvValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersEnvValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface ClusterProvisionSpecPodSpecInitContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersLifecycle {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStart>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStop>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ClusterProvisionSpecPodSpecInitContainersLifecyclePostStart {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartExec>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGet>;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocket>;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetPort>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketPort>;
        }

        export interface ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketPort {
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ClusterProvisionSpecPodSpecInitContainersLifecyclePreStop {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopExec>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGet>;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocket>;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetPort>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketPort>;
        }

        export interface ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketPort {
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ClusterProvisionSpecPodSpecInitContainersLivenessProbe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLivenessProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGet>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetPort>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketPort>;
        }

        export interface ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketPort {
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ClusterProvisionSpecPodSpecInitContainersReadinessProbe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersReadinessProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGet>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetPort>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketPort>;
        }

        export interface ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketPort {
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
         */
        export interface ClusterProvisionSpecPodSpecInitContainersResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface ClusterProvisionSpecPodSpecInitContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
             */
            capabilities?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersSecurityContextCapabilities>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            seLinuxOptions?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersSecurityContextSeLinuxOptions>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
             */
            seccompProfile?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersSecurityContextSeccompProfile>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            windowsOptions?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersSecurityContextWindowsOptions>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ClusterProvisionSpecPodSpecInitContainersStartupProbe {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersStartupProbeExec>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGet>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocket>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetHttpHeaders>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetPort>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        export interface ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetPort {
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketPort>;
        }

        export interface ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketPort {
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface ClusterProvisionSpecPodSpecInitContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        export interface ClusterProvisionSpecPodSpecReadinessGates {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: pulumi.Input<string>;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface ClusterProvisionSpecPodSpecSecurityContext {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume.
             */
            fsGroup?: pulumi.Input<number>;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified defaults to "Always".
             */
            fsGroupChangePolicy?: pulumi.Input<string>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
             */
            seLinuxOptions?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecSecurityContextSeLinuxOptions>;
            /**
             * The seccomp options to use by the containers in this pod.
             */
            seccompProfile?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecSecurityContextSeccompProfile>;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
             */
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
             */
            sysctls?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecSecurityContextSysctls>[]>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            windowsOptions?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecSecurityContextWindowsOptions>;
        }

        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
         */
        export interface ClusterProvisionSpecPodSpecSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         */
        export interface ClusterProvisionSpecPodSpecSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface ClusterProvisionSpecPodSpecSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: pulumi.Input<string>;
            /**
             * Value of a property to set
             */
            value: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         */
        export interface ClusterProvisionSpecPodSpecSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ClusterProvisionSpecPodSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface ClusterProvisionSpecPodSpecTopologySpreadConstraints {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelector>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: pulumi.Input<number>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
             */
            topologyKey: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assigment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface ClusterProvisionSpecPodSpecVolumes {
            /**
             * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            awsElasticBlockStore?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesAwsElasticBlockStore>;
            /**
             * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
             */
            azureDisk?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesAzureDisk>;
            /**
             * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
             */
            azureFile?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesAzureFile>;
            /**
             * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
             */
            cephfs?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesCephfs>;
            /**
             * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            cinder?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesCinder>;
            /**
             * ConfigMap represents a configMap that should populate this volume
             */
            configMap?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesConfigMap>;
            /**
             * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
             */
            csi?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesCsi>;
            /**
             * DownwardAPI represents downward API about the pod that should populate this volume
             */
            downwardAPI?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesDownwardAPI>;
            /**
             * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            emptyDir?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesEmptyDir>;
            /**
             * Ephemeral represents a volume that is handled by a cluster storage driver (Alpha feature). The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
             *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim). 
             *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
             *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
             *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
             */
            ephemeral?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesEphemeral>;
            /**
             * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
             */
            fc?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesFc>;
            /**
             * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
             */
            flexVolume?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesFlexVolume>;
            /**
             * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
             */
            flocker?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesFlocker>;
            /**
             * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            gcePersistentDisk?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesGcePersistentDisk>;
            /**
             * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
             */
            gitRepo?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesGitRepo>;
            /**
             * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
             */
            glusterfs?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesGlusterfs>;
            /**
             * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
             */
            hostPath?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesHostPath>;
            /**
             * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
             */
            iscsi?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesIscsi>;
            /**
             * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
            /**
             * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            nfs?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesNfs>;
            /**
             * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            persistentVolumeClaim?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesPersistentVolumeClaim>;
            /**
             * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
             */
            photonPersistentDisk?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesPhotonPersistentDisk>;
            /**
             * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
             */
            portworxVolume?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesPortworxVolume>;
            /**
             * Items for all in one resources secrets, configmaps, and downward API
             */
            projected?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesProjected>;
            /**
             * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
             */
            quobyte?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesQuobyte>;
            /**
             * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
             */
            rbd?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesRbd>;
            /**
             * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
             */
            scaleIO?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesScaleIO>;
            /**
             * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secret?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesSecret>;
            /**
             * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
             */
            storageos?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesStorageos>;
            /**
             * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
             */
            vsphereVolume?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesVsphereVolume>;
        }

        /**
         * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface ClusterProvisionSpecPodSpecVolumesAwsElasticBlockStore {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition?: pulumi.Input<number>;
            /**
             * Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface ClusterProvisionSpecPodSpecVolumesAzureDisk {
            /**
             * Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode?: pulumi.Input<string>;
            /**
             * The Name of the data disk in the blob storage
             */
            diskName: pulumi.Input<string>;
            /**
             * The URI the data disk in the blob storage
             */
            diskURI: pulumi.Input<string>;
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface ClusterProvisionSpecPodSpecVolumesAzureFile {
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * the name of secret that contains Azure Storage Account Name and Key
             */
            secretName: pulumi.Input<string>;
            /**
             * Share Name
             */
            shareName: pulumi.Input<string>;
        }

        /**
         * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface ClusterProvisionSpecPodSpecVolumesCephfs {
            /**
             * Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path?: pulumi.Input<string>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile?: pulumi.Input<string>;
            /**
             * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesCephfsSecretRef>;
            /**
             * Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface ClusterProvisionSpecPodSpecVolumesCephfsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface ClusterProvisionSpecPodSpecVolumesCinder {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType?: pulumi.Input<string>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: points to a secret object containing parameters used to connect to OpenStack.
             */
            secretRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesCinderSecretRef>;
            /**
             * volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * Optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        export interface ClusterProvisionSpecPodSpecVolumesCinderSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ConfigMap represents a configMap that should populate this volume
         */
        export interface ClusterProvisionSpecPodSpecVolumesConfigMap {
            /**
             * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesConfigMapItems>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ClusterProvisionSpecPodSpecVolumesConfigMapItems {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface ClusterProvisionSpecPodSpecVolumesCsi {
            /**
             * Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: pulumi.Input<string>;
            /**
             * Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType?: pulumi.Input<string>;
            /**
             * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
             */
            nodePublishSecretRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesCsiNodePublishSecretRef>;
            /**
             * Specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        export interface ClusterProvisionSpecPodSpecVolumesCsiNodePublishSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * DownwardAPI represents downward API about the pod that should populate this volume
         */
        export interface ClusterProvisionSpecPodSpecVolumesDownwardAPI {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * Items is a list of downward API volume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesDownwardAPIItems>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface ClusterProvisionSpecPodSpecVolumesDownwardAPIItems {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsFieldRef>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsResourceFieldRef>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface ClusterProvisionSpecPodSpecVolumesEmptyDir {
            /**
             * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: pulumi.Input<string>;
            /**
             * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit?: pulumi.Input<string>;
        }

        /**
         * Ephemeral represents a volume that is handled by a cluster storage driver (Alpha feature). The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim). 
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        export interface ClusterProvisionSpecPodSpecVolumesEphemeral {
            /**
             * Specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplate>;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplate {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec>;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
             */
            dataSource?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource>;
            /**
             * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResources>;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelector>;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
         */
        export interface ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface ClusterProvisionSpecPodSpecVolumesFc {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * Optional: FC target lun number
             */
            lun?: pulumi.Input<number>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: FC target worldwide names (WWNs)
             */
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        export interface ClusterProvisionSpecPodSpecVolumesFlexVolume {
            /**
             * Driver is the name of the driver to use for this volume.
             */
            driver: pulumi.Input<string>;
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Optional: Extra command options if any.
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
             */
            secretRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesFlexVolumeSecretRef>;
        }

        /**
         * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        export interface ClusterProvisionSpecPodSpecVolumesFlexVolumeSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface ClusterProvisionSpecPodSpecVolumesFlocker {
            /**
             * Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName?: pulumi.Input<string>;
            /**
             * UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID?: pulumi.Input<string>;
        }

        /**
         * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface ClusterProvisionSpecPodSpecVolumesGcePersistentDisk {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition?: pulumi.Input<number>;
            /**
             * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: pulumi.Input<string>;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        export interface ClusterProvisionSpecPodSpecVolumesGitRepo {
            /**
             * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory?: pulumi.Input<string>;
            /**
             * Repository URL
             */
            repository: pulumi.Input<string>;
            /**
             * Commit hash for the specified revision.
             */
            revision?: pulumi.Input<string>;
        }

        /**
         * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface ClusterProvisionSpecPodSpecVolumesGlusterfs {
            /**
             * EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: pulumi.Input<string>;
            /**
             * Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: pulumi.Input<string>;
            /**
             * ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        export interface ClusterProvisionSpecPodSpecVolumesHostPath {
            /**
             * Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: pulumi.Input<string>;
            /**
             * Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface ClusterProvisionSpecPodSpecVolumesIscsi {
            /**
             * whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery?: pulumi.Input<boolean>;
            /**
             * whether support iSCSI Session CHAP authentication
             */
            chapAuthSession?: pulumi.Input<boolean>;
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName?: pulumi.Input<string>;
            /**
             * Target iSCSI Qualified Name.
             */
            iqn: pulumi.Input<string>;
            /**
             * iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface?: pulumi.Input<string>;
            /**
             * iSCSI Target Lun number.
             */
            lun: pulumi.Input<number>;
            /**
             * iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * CHAP Secret for iSCSI target and initiator authentication
             */
            secretRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesIscsiSecretRef>;
            /**
             * iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: pulumi.Input<string>;
        }

        /**
         * CHAP Secret for iSCSI target and initiator authentication
         */
        export interface ClusterProvisionSpecPodSpecVolumesIscsiSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface ClusterProvisionSpecPodSpecVolumesNfs {
            /**
             * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: pulumi.Input<string>;
            /**
             * ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: pulumi.Input<string>;
        }

        /**
         * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface ClusterProvisionSpecPodSpecVolumesPersistentVolumeClaim {
            /**
             * ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: pulumi.Input<string>;
            /**
             * Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface ClusterProvisionSpecPodSpecVolumesPhotonPersistentDisk {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * ID that identifies Photon Controller persistent disk
             */
            pdID: pulumi.Input<string>;
        }

        /**
         * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface ClusterProvisionSpecPodSpecVolumesPortworxVolume {
            /**
             * FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * VolumeID uniquely identifies a Portworx volume
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * Items for all in one resources secrets, configmaps, and downward API
         */
        export interface ClusterProvisionSpecPodSpecVolumesProjected {
            /**
             * Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * list of volume projections
             */
            sources: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesProjectedSources>[]>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface ClusterProvisionSpecPodSpecVolumesProjectedSources {
            /**
             * information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMap>;
            /**
             * information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPI>;
            /**
             * information about the secret data to project
             */
            secret?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecret>;
            /**
             * information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesProjectedSourcesServiceAccountToken>;
        }

        /**
         * information about the configMap data to project
         */
        export interface ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMap {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapItems>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapItems {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the downwardAPI data to project
         */
        export interface ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPI {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItems {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * information about the secret data to project
         */
        export interface ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecret {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretItems>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretItems {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the serviceAccountToken data to project
         */
        export interface ClusterProvisionSpecPodSpecVolumesProjectedSourcesServiceAccountToken {
            /**
             * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * Path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface ClusterProvisionSpecPodSpecVolumesQuobyte {
            /**
             * Group to map volume access to Default is no group
             */
            group?: pulumi.Input<string>;
            /**
             * ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: pulumi.Input<string>;
            /**
             * Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant?: pulumi.Input<string>;
            /**
             * User to map volume access to Defaults to serivceaccount user
             */
            user?: pulumi.Input<string>;
            /**
             * Volume is a string that references an already created Quobyte volume by name.
             */
            volume: pulumi.Input<string>;
        }

        /**
         * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface ClusterProvisionSpecPodSpecVolumesRbd {
            /**
             * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: pulumi.Input<string>;
            /**
             * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring?: pulumi.Input<string>;
            /**
             * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool?: pulumi.Input<string>;
            /**
             * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesRbdSecretRef>;
            /**
             * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface ClusterProvisionSpecPodSpecVolumesRbdSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface ClusterProvisionSpecPodSpecVolumesScaleIO {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType?: pulumi.Input<string>;
            /**
             * The host address of the ScaleIO API Gateway.
             */
            gateway: pulumi.Input<string>;
            /**
             * The name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
             */
            secretRef: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesScaleIOSecretRef>;
            /**
             * Flag to enable/disable SSL communication with Gateway, default false
             */
            sslEnabled?: pulumi.Input<boolean>;
            /**
             * Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode?: pulumi.Input<string>;
            /**
             * The ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool?: pulumi.Input<string>;
            /**
             * The name of the storage system as configured in ScaleIO.
             */
            system: pulumi.Input<string>;
            /**
             * The name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        export interface ClusterProvisionSpecPodSpecVolumesScaleIOSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface ClusterProvisionSpecPodSpecVolumesSecret {
            /**
             * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesSecretItems>[]>;
            /**
             * Specify whether the Secret or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ClusterProvisionSpecPodSpecVolumesSecretItems {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface ClusterProvisionSpecPodSpecVolumesStorageos {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
             */
            secretRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionSpecPodSpecVolumesStorageosSecretRef>;
            /**
             * VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName?: pulumi.Input<string>;
            /**
             * VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace?: pulumi.Input<string>;
        }

        /**
         * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        export interface ClusterProvisionSpecPodSpecVolumesStorageosSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface ClusterProvisionSpecPodSpecVolumesVsphereVolume {
            /**
             * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID?: pulumi.Input<string>;
            /**
             * Storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName?: pulumi.Input<string>;
            /**
             * Path that identifies vSphere volume vmdk
             */
            volumePath: pulumi.Input<string>;
        }

        /**
         * ClusterProvisionStatus defines the observed state of ClusterProvision.
         */
        export interface ClusterProvisionStatus {
            /**
             * Conditions includes more detailed status for the cluster provision
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterProvisionStatusConditions>[]>;
            /**
             * JobRef is the reference to the job performing the provision.
             */
            jobRef?: pulumi.Input<inputs.hive.v1.ClusterProvisionStatusJobRef>;
        }

        /**
         * ClusterProvisionCondition contains details for the current condition of a cluster provision
         */
        export interface ClusterProvisionStatusConditions {
            /**
             * LastProbeTime is the last time we probed the condition.
             */
            lastProbeTime?: pulumi.Input<string>;
            /**
             * LastTransitionTime is the last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human-readable message indicating details about last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * Reason is a unique, one-word, CamelCase reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status is the status of the condition.
             */
            status: pulumi.Input<string>;
            /**
             * Type is the type of the condition.
             */
            type: pulumi.Input<string>;
        }

        /**
         * JobRef is the reference to the job performing the provision.
         */
        export interface ClusterProvisionStatusJobRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ClusterRelocateSpec defines the relocation of clusters from one Hive instance to another.
         */
        export interface ClusterRelocateSpec {
            /**
             * ClusterDeploymentSelector is a LabelSelector indicating which clusters will be relocated.
             */
            clusterDeploymentSelector: pulumi.Input<inputs.hive.v1.ClusterRelocateSpecClusterDeploymentSelector>;
            /**
             * KubeconfigSecretRef is a reference to the secret containing the kubeconfig for the destination Hive instance. The kubeconfig must be in a data field where the key is "kubeconfig".
             */
            kubeconfigSecretRef: pulumi.Input<inputs.hive.v1.ClusterRelocateSpecKubeconfigSecretRef>;
        }

        /**
         * ClusterDeploymentSelector is a LabelSelector indicating which clusters will be relocated.
         */
        export interface ClusterRelocateSpecClusterDeploymentSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterRelocateSpecClusterDeploymentSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterRelocateSpecClusterDeploymentSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * KubeconfigSecretRef is a reference to the secret containing the kubeconfig for the destination Hive instance. The kubeconfig must be in a data field where the key is "kubeconfig".
         */
        export interface ClusterRelocateSpecKubeconfigSecretRef {
            /**
             * Name is the name of the secret.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace where the secret lives.
             */
            namespace: pulumi.Input<string>;
        }

        /**
         * ClusterStateStatus defines the observed state of ClusterState
         */
        export interface ClusterStateStatus {
            /**
             * ClusterOperators contains the state for every cluster operator in the target cluster
             */
            clusterOperators?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterStateStatusClusterOperators>[]>;
            /**
             * LastUpdated is the last time that operator state was updated
             */
            lastUpdated?: pulumi.Input<string>;
        }

        /**
         * ClusterOperatorState summarizes the status of a single cluster operator
         */
        export interface ClusterStateStatusClusterOperators {
            /**
             * Conditions is the set of conditions in the status of the cluster operator on the target cluster
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.hive.v1.ClusterStateStatusClusterOperatorsConditions>[]>;
            /**
             * Name is the name of the cluster operator
             */
            name: pulumi.Input<string>;
        }

        /**
         * ClusterOperatorStatusCondition represents the state of the operator's managed and monitored components.
         */
        export interface ClusterStateStatusClusterOperatorsConditions {
            /**
             * lastTransitionTime is the time of the last update to the current status property.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message provides additional information about the current condition. This is only to be consumed by humans.
             */
            message?: pulumi.Input<string>;
            /**
             * reason is the CamelCase reason for the condition's current status.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type specifies the aspect reported by this condition.
             */
            type: pulumi.Input<string>;
        }

        /**
         * DNSZoneSpec defines the desired state of DNSZone
         */
        export interface DNSZoneSpec {
            /**
             * AWS specifies AWS-specific cloud configuration
             */
            aws?: pulumi.Input<inputs.hive.v1.DNSZoneSpecAws>;
            /**
             * Azure specifes Azure-specific cloud configuration
             */
            azure?: pulumi.Input<inputs.hive.v1.DNSZoneSpecAzure>;
            /**
             * GCP specifies GCP-specific cloud configuration
             */
            gcp?: pulumi.Input<inputs.hive.v1.DNSZoneSpecGcp>;
            /**
             * LinkToParentDomain specifies whether DNS records should be automatically created to link this DNSZone with a parent domain.
             */
            linkToParentDomain?: pulumi.Input<boolean>;
            /**
             * Zone is the DNS zone to host
             */
            zone: pulumi.Input<string>;
        }

        /**
         * AWS specifies AWS-specific cloud configuration
         */
        export interface DNSZoneSpecAws {
            /**
             * AdditionalTags is a set of additional tags to set on the DNS hosted zone. In addition to these tags,the DNS Zone controller will set a hive.openhsift.io/hostedzone tag identifying the HostedZone record that it belongs to.
             */
            additionalTags?: pulumi.Input<pulumi.Input<inputs.hive.v1.DNSZoneSpecAwsAdditionalTags>[]>;
            /**
             * CredentialsSecretRef contains a reference to a secret that contains AWS credentials for CRUD operations
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.DNSZoneSpecAwsCredentialsSecretRef>;
            /**
             * Region is the AWS region to use for route53 operations. This defaults to us-east-1. For AWS China, use cn-northwest-1.
             */
            region?: pulumi.Input<string>;
        }

        /**
         * AWSResourceTag represents a tag that is applied to an AWS cloud resource
         */
        export interface DNSZoneSpecAwsAdditionalTags {
            /**
             * Key is the key for the tag
             */
            key: pulumi.Input<string>;
            /**
             * Value is the value for the tag
             */
            value: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef contains a reference to a secret that contains AWS credentials for CRUD operations
         */
        export interface DNSZoneSpecAwsCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Azure specifes Azure-specific cloud configuration
         */
        export interface DNSZoneSpecAzure {
            /**
             * CredentialsSecretRef references a secret that will be used to authenticate with Azure CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServicePrincipal.json'. The credentials must specify the project to use.
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.DNSZoneSpecAzureCredentialsSecretRef>;
            /**
             * ResourceGroupName specifies the Azure resource group in which the Hosted Zone should be created.
             */
            resourceGroupName: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef references a secret that will be used to authenticate with Azure CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServicePrincipal.json'. The credentials must specify the project to use.
         */
        export interface DNSZoneSpecAzureCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * GCP specifies GCP-specific cloud configuration
         */
        export interface DNSZoneSpecGcp {
            /**
             * CredentialsSecretRef references a secret that will be used to authenticate with GCP CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.DNSZoneSpecGcpCredentialsSecretRef>;
        }

        /**
         * CredentialsSecretRef references a secret that will be used to authenticate with GCP CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
         */
        export interface DNSZoneSpecGcpCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * DNSZoneStatus defines the observed state of DNSZone
         */
        export interface DNSZoneStatus {
            /**
             * AWSDNSZoneStatus contains status information specific to AWS
             */
            aws?: pulumi.Input<inputs.hive.v1.DNSZoneStatusAws>;
            /**
             * AzureDNSZoneStatus contains status information specific to Azure
             */
            azure?: pulumi.Input<{[key: string]: any}>;
            /**
             * Conditions includes more detailed status for the DNSZone
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.hive.v1.DNSZoneStatusConditions>[]>;
            /**
             * GCPDNSZoneStatus contains status information specific to GCP
             */
            gcp?: pulumi.Input<inputs.hive.v1.DNSZoneStatusGcp>;
            /**
             * LastSyncGeneration is the generation of the zone resource that was last sync'd. This is used to know if the Object has changed and we should sync immediately.
             */
            lastSyncGeneration?: pulumi.Input<number>;
            /**
             * LastSyncTimestamp is the time that the zone was last sync'd.
             */
            lastSyncTimestamp?: pulumi.Input<string>;
            /**
             * NameServers is a list of nameservers for this DNS zone
             */
            nameServers?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * AWSDNSZoneStatus contains status information specific to AWS
         */
        export interface DNSZoneStatusAws {
            /**
             * ZoneID is the ID of the zone in AWS
             */
            zoneID?: pulumi.Input<string>;
        }

        /**
         * DNSZoneCondition contains details for the current condition of a DNSZone
         */
        export interface DNSZoneStatusConditions {
            /**
             * LastProbeTime is the last time we probed the condition.
             */
            lastProbeTime?: pulumi.Input<string>;
            /**
             * LastTransitionTime is the last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human-readable message indicating details about last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * Reason is a unique, one-word, CamelCase reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status is the status of the condition.
             */
            status: pulumi.Input<string>;
            /**
             * Type is the type of the condition.
             */
            type: pulumi.Input<string>;
        }

        /**
         * GCPDNSZoneStatus contains status information specific to GCP
         */
        export interface DNSZoneStatusGcp {
            /**
             * ZoneName is the name of the zone in GCP Cloud DNS
             */
            zoneName?: pulumi.Input<string>;
        }

        /**
         * HiveConfigSpec defines the desired state of Hive
         */
        export interface HiveConfigSpec {
            /**
             * AdditionalCertificateAuthoritiesSecretRef is a list of references to secrets in the TargetNamespace that contain an additional Certificate Authority to use when communicating with target clusters. These certificate authorities will be used in addition to any self-signed CA generated by each cluster on installation.
             */
            additionalCertificateAuthoritiesSecretRef?: pulumi.Input<pulumi.Input<inputs.hive.v1.HiveConfigSpecAdditionalCertificateAuthoritiesSecretRef>[]>;
            /**
             * Backup specifies configuration for backup integration. If absent, backup integration will be disabled.
             */
            backup?: pulumi.Input<inputs.hive.v1.HiveConfigSpecBackup>;
            /**
             * ControllersConfig is used to configure different hive controllers
             */
            controllersConfig?: pulumi.Input<inputs.hive.v1.HiveConfigSpecControllersConfig>;
            /**
             * DeleteProtection can be set to "enabled" to turn on automatic delete protection for ClusterDeployments. When enabled, Hive will add the "hive.openshift.io/protected-delete" annotation to new ClusterDeployments. Once a ClusterDeployment has been installed, a user must remove the annotation from a ClusterDeployment prior to deleting it.
             */
            deleteProtection?: pulumi.Input<string>;
            /**
             * DeprovisionsDisabled can be set to true to block deprovision jobs from running.
             */
            deprovisionsDisabled?: pulumi.Input<boolean>;
            /**
             * DisabledControllers allows selectively disabling Hive controllers by name. The name of an individual controller matches the name of the controller as seen in the Hive logging output.
             */
            disabledControllers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * FailedProvisionConfig is used to configure settings related to handling provision failures.
             */
            failedProvisionConfig?: pulumi.Input<inputs.hive.v1.HiveConfigSpecFailedProvisionConfig>;
            /**
             * GlobalPullSecretRef is used to specify a pull secret that will be used globally by all of the cluster deployments. For each cluster deployment, the contents of GlobalPullSecret will be merged with the specific pull secret for a cluster deployment(if specified), with precedence given to the contents of the pull secret for the cluster deployment. The global pull secret is assumed to be in the TargetNamespace.
             */
            globalPullSecretRef?: pulumi.Input<inputs.hive.v1.HiveConfigSpecGlobalPullSecretRef>;
            /**
             * LogLevel is the level of logging to use for the Hive controllers. Acceptable levels, from coarsest to finest, are panic, fatal, error, warn, info, debug, and trace. The default level is info.
             */
            logLevel?: pulumi.Input<string>;
            /**
             * MaintenanceMode can be set to true to disable the hive controllers in situations where we need to ensure nothing is running that will add or act upon finalizers on Hive types. This should rarely be needed. Sets replicas to 0 for the hive-controllers deployment to accomplish this.
             */
            maintenanceMode?: pulumi.Input<boolean>;
            /**
             * ManagedDomains is the list of DNS domains that are managed by the Hive cluster When specifying 'manageDNS: true' in a ClusterDeployment, the ClusterDeployment's baseDomain should be a direct child of one of these domains, otherwise the ClusterDeployment creation will result in a validation error.
             */
            managedDomains?: pulumi.Input<pulumi.Input<inputs.hive.v1.HiveConfigSpecManagedDomains>[]>;
            /**
             * SyncSetReapplyInterval is a string duration indicating how much time must pass before SyncSet resources will be reapplied. The default reapply interval is two hours.
             */
            syncSetReapplyInterval?: pulumi.Input<string>;
            /**
             * TargetNamespace is the namespace where the core Hive components should be run. Defaults to "hive". Will be created if it does not already exist. All resource references in HiveConfig can be assumed to be in the TargetNamespace.
             */
            targetNamespace?: pulumi.Input<string>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface HiveConfigSpecAdditionalCertificateAuthoritiesSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Backup specifies configuration for backup integration. If absent, backup integration will be disabled.
         */
        export interface HiveConfigSpecBackup {
            /**
             * MinBackupPeriodSeconds specifies that a minimum of MinBackupPeriodSeconds will occur in between each backup. This is used to rate limit backups. This potentially batches together multiple changes into 1 backup. No backups will be lost as changes that happen during this interval are queued up and will result in a backup happening once the interval has been completed.
             */
            minBackupPeriodSeconds?: pulumi.Input<number>;
            /**
             * Velero specifies configuration for the Velero backup integration.
             */
            velero?: pulumi.Input<inputs.hive.v1.HiveConfigSpecBackupVelero>;
        }

        /**
         * Velero specifies configuration for the Velero backup integration.
         */
        export interface HiveConfigSpecBackupVelero {
            /**
             * Enabled dictates if Velero backup integration is enabled. If not specified, the default is disabled.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * Namespace specifies in which namespace velero backup objects should be created. If not specified, the default is a namespace named "velero".
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ControllersConfig is used to configure different hive controllers
         */
        export interface HiveConfigSpecControllersConfig {
            /**
             * Controllers contains a list of configurations for different controllers
             */
            controllers?: pulumi.Input<pulumi.Input<inputs.hive.v1.HiveConfigSpecControllersConfigControllers>[]>;
            /**
             * Default specifies default configuration for all the controllers, can be used to override following coded defaults default for concurrent reconciles is 5 default for client qps is 5 default for client burst is 10 default for queue qps is 10 default for queue burst is 100
             */
            default?: pulumi.Input<inputs.hive.v1.HiveConfigSpecControllersConfigDefault>;
        }

        /**
         * SpecificControllerConfig contains the configuration for a specific controller
         */
        export interface HiveConfigSpecControllersConfigControllers {
            /**
             * ControllerConfig contains the configuration for the controller specified by Name field
             */
            config: pulumi.Input<inputs.hive.v1.HiveConfigSpecControllersConfigControllersConfig>;
            /**
             * Name specifies the name of the controller
             */
            name: pulumi.Input<string>;
        }

        /**
         * ControllerConfig contains the configuration for the controller specified by Name field
         */
        export interface HiveConfigSpecControllersConfigControllersConfig {
            /**
             * ClientBurst specifies client rate limiter burst for a controller
             */
            clientBurst?: pulumi.Input<number>;
            /**
             * ClientQPS specifies client rate limiter QPS for a controller
             */
            clientQPS?: pulumi.Input<number>;
            /**
             * ConcurrentReconciles specifies number of concurrent reconciles for a controller
             */
            concurrentReconciles?: pulumi.Input<number>;
            /**
             * QueueBurst specifies workqueue rate limiter burst for a controller
             */
            queueBurst?: pulumi.Input<number>;
            /**
             * QueueQPS specifies workqueue rate limiter QPS for a controller
             */
            queueQPS?: pulumi.Input<number>;
            /**
             * Replicas specifies the number of replicas the specific controller pod should use. This is ONLY for controllers that have been split out into their own pods. This is ignored for all others.
             */
            replicas?: pulumi.Input<number>;
        }

        /**
         * Default specifies default configuration for all the controllers, can be used to override following coded defaults default for concurrent reconciles is 5 default for client qps is 5 default for client burst is 10 default for queue qps is 10 default for queue burst is 100
         */
        export interface HiveConfigSpecControllersConfigDefault {
            /**
             * ClientBurst specifies client rate limiter burst for a controller
             */
            clientBurst?: pulumi.Input<number>;
            /**
             * ClientQPS specifies client rate limiter QPS for a controller
             */
            clientQPS?: pulumi.Input<number>;
            /**
             * ConcurrentReconciles specifies number of concurrent reconciles for a controller
             */
            concurrentReconciles?: pulumi.Input<number>;
            /**
             * QueueBurst specifies workqueue rate limiter burst for a controller
             */
            queueBurst?: pulumi.Input<number>;
            /**
             * QueueQPS specifies workqueue rate limiter QPS for a controller
             */
            queueQPS?: pulumi.Input<number>;
            /**
             * Replicas specifies the number of replicas the specific controller pod should use. This is ONLY for controllers that have been split out into their own pods. This is ignored for all others.
             */
            replicas?: pulumi.Input<number>;
        }

        /**
         * FailedProvisionConfig is used to configure settings related to handling provision failures.
         */
        export interface HiveConfigSpecFailedProvisionConfig {
            /**
             * FailedProvisionAWSConfig contains AWS-specific info to upload log files.
             */
            aws?: pulumi.Input<inputs.hive.v1.HiveConfigSpecFailedProvisionConfigAws>;
            /**
             * DEPRECATED: This flag is no longer respected and will be removed in the future.
             */
            skipGatherLogs?: pulumi.Input<boolean>;
        }

        /**
         * FailedProvisionAWSConfig contains AWS-specific info to upload log files.
         */
        export interface HiveConfigSpecFailedProvisionConfigAws {
            /**
             * Bucket is the S3 bucket to store the logs in.
             */
            bucket?: pulumi.Input<string>;
            /**
             * CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with AWS S3. It will need permission to upload logs to S3. Secret should have keys named aws_access_key_id and aws_secret_access_key that contain the AWS credentials. Example Secret:   data:     aws_access_key_id: minio     aws_secret_access_key: minio123
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.HiveConfigSpecFailedProvisionConfigAwsCredentialsSecretRef>;
            /**
             * Region is the AWS region to use for S3 operations. This defaults to us-east-1. For AWS China, use cn-northwest-1.
             */
            region?: pulumi.Input<string>;
            /**
             * ServiceEndpoint is the url to connect to an S3 compatible provider.
             */
            serviceEndpoint?: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with AWS S3. It will need permission to upload logs to S3. Secret should have keys named aws_access_key_id and aws_secret_access_key that contain the AWS credentials. Example Secret:   data:     aws_access_key_id: minio     aws_secret_access_key: minio123
         */
        export interface HiveConfigSpecFailedProvisionConfigAwsCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * GlobalPullSecretRef is used to specify a pull secret that will be used globally by all of the cluster deployments. For each cluster deployment, the contents of GlobalPullSecret will be merged with the specific pull secret for a cluster deployment(if specified), with precedence given to the contents of the pull secret for the cluster deployment. The global pull secret is assumed to be in the TargetNamespace.
         */
        export interface HiveConfigSpecGlobalPullSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ManageDNSConfig contains the domain being managed, and the cloud-specific details for accessing/managing the domain.
         */
        export interface HiveConfigSpecManagedDomains {
            /**
             * AWS contains AWS-specific settings for external DNS
             */
            aws?: pulumi.Input<inputs.hive.v1.HiveConfigSpecManagedDomainsAws>;
            /**
             * Azure contains Azure-specific settings for external DNS
             */
            azure?: pulumi.Input<inputs.hive.v1.HiveConfigSpecManagedDomainsAzure>;
            /**
             * Domains is the list of domains that hive will be managing entries for with the provided credentials.
             */
            domains: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * GCP contains GCP-specific settings for external DNS
             */
            gcp?: pulumi.Input<inputs.hive.v1.HiveConfigSpecManagedDomainsGcp>;
        }

        /**
         * AWS contains AWS-specific settings for external DNS
         */
        export interface HiveConfigSpecManagedDomainsAws {
            /**
             * CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with AWS Route53. It will need permission to manage entries for the domain listed in the parent ManageDNSConfig object. Secret should have AWS keys named 'aws_access_key_id' and 'aws_secret_access_key'.
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.HiveConfigSpecManagedDomainsAwsCredentialsSecretRef>;
            /**
             * Region is the AWS region to use for route53 operations. This defaults to us-east-1. For AWS China, use cn-northwest-1.
             */
            region?: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with AWS Route53. It will need permission to manage entries for the domain listed in the parent ManageDNSConfig object. Secret should have AWS keys named 'aws_access_key_id' and 'aws_secret_access_key'.
         */
        export interface HiveConfigSpecManagedDomainsAwsCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Azure contains Azure-specific settings for external DNS
         */
        export interface HiveConfigSpecManagedDomainsAzure {
            /**
             * CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with Azure DNS. It wil need permission to manage entries in each of the managed domains listed in the parent ManageDNSConfig object. Secret should have a key named 'osServicePrincipal.json'
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.HiveConfigSpecManagedDomainsAzureCredentialsSecretRef>;
            /**
             * ResourceGroupName specifies the Azure resource group containing the DNS zones for the domains being managed.
             */
            resourceGroupName: pulumi.Input<string>;
        }

        /**
         * CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with Azure DNS. It wil need permission to manage entries in each of the managed domains listed in the parent ManageDNSConfig object. Secret should have a key named 'osServicePrincipal.json'
         */
        export interface HiveConfigSpecManagedDomainsAzureCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * GCP contains GCP-specific settings for external DNS
         */
        export interface HiveConfigSpecManagedDomainsGcp {
            /**
             * CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with GCP DNS. It will need permission to manage entries in each of the managed domains for this cluster. listed in the parent ManageDNSConfig object. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
             */
            credentialsSecretRef: pulumi.Input<inputs.hive.v1.HiveConfigSpecManagedDomainsGcpCredentialsSecretRef>;
        }

        /**
         * CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with GCP DNS. It will need permission to manage entries in each of the managed domains for this cluster. listed in the parent ManageDNSConfig object. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
         */
        export interface HiveConfigSpecManagedDomainsGcpCredentialsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * HiveConfigStatus defines the observed state of Hive
         */
        export interface HiveConfigStatus {
            /**
             * AggregatorClientCAHash keeps an md5 hash of the aggregator client CA configmap data from the openshift-config-managed namespace. When the configmap changes, admission is redeployed.
             */
            aggregatorClientCAHash?: pulumi.Input<string>;
            /**
             * ConfigApplied will be set by the hive operator to indicate whether or not the LastGenerationObserved was successfully reconciled.
             */
            configApplied?: pulumi.Input<boolean>;
            /**
             * ObservedGeneration will record the most recently processed HiveConfig object's generation.
             */
            observedGeneration?: pulumi.Input<number>;
        }

        /**
         * MachinePoolSpec defines the desired state of MachinePool
         */
        export interface MachinePoolSpec {
            /**
             * Autoscaling is the details for auto-scaling the machine pool. Replicas and autoscaling cannot be used together.
             */
            autoscaling?: pulumi.Input<inputs.hive.v1.MachinePoolSpecAutoscaling>;
            /**
             * ClusterDeploymentRef references the cluster deployment to which this machine pool belongs.
             */
            clusterDeploymentRef: pulumi.Input<inputs.hive.v1.MachinePoolSpecClusterDeploymentRef>;
            /**
             * Map of label string keys and values that will be applied to the created MachineSet's MachineSpec. This list will overwrite any modifications made to Node labels on an ongoing basis.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Name is the name of the machine pool.
             */
            name: pulumi.Input<string>;
            /**
             * Platform is configuration for machine pool specific to the platform.
             */
            platform: pulumi.Input<inputs.hive.v1.MachinePoolSpecPlatform>;
            /**
             * Replicas is the count of machines for this machine pool. Replicas and autoscaling cannot be used together. Default is 1, if autoscaling is not used.
             */
            replicas?: pulumi.Input<number>;
            /**
             * List of taints that will be applied to the created MachineSet's MachineSpec. This list will overwrite any modifications made to Node taints on an ongoing basis.
             */
            taints?: pulumi.Input<pulumi.Input<inputs.hive.v1.MachinePoolSpecTaints>[]>;
        }

        /**
         * Autoscaling is the details for auto-scaling the machine pool. Replicas and autoscaling cannot be used together.
         */
        export interface MachinePoolSpecAutoscaling {
            /**
             * MaxReplicas is the maximum number of replicas for the machine pool.
             */
            maxReplicas: pulumi.Input<number>;
            /**
             * MinReplicas is the minimum number of replicas for the machine pool.
             */
            minReplicas: pulumi.Input<number>;
        }

        /**
         * ClusterDeploymentRef references the cluster deployment to which this machine pool belongs.
         */
        export interface MachinePoolSpecClusterDeploymentRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Platform is configuration for machine pool specific to the platform.
         */
        export interface MachinePoolSpecPlatform {
            /**
             * AWS is the configuration used when installing on AWS.
             */
            aws?: pulumi.Input<inputs.hive.v1.MachinePoolSpecPlatformAws>;
            /**
             * Azure is the configuration used when installing on Azure.
             */
            azure?: pulumi.Input<inputs.hive.v1.MachinePoolSpecPlatformAzure>;
            /**
             * GCP is the configuration used when installing on GCP.
             */
            gcp?: pulumi.Input<inputs.hive.v1.MachinePoolSpecPlatformGcp>;
            /**
             * OpenStack is the configuration used when installing on OpenStack.
             */
            openstack?: pulumi.Input<inputs.hive.v1.MachinePoolSpecPlatformOpenstack>;
            /**
             * Ovirt is the configuration used when installing on oVirt.
             */
            ovirt?: pulumi.Input<inputs.hive.v1.MachinePoolSpecPlatformOvirt>;
            /**
             * VSphere is the configuration used when installing on vSphere
             */
            vsphere?: pulumi.Input<inputs.hive.v1.MachinePoolSpecPlatformVsphere>;
        }

        /**
         * AWS is the configuration used when installing on AWS.
         */
        export interface MachinePoolSpecPlatformAws {
            /**
             * EC2RootVolume defines the storage for ec2 instance.
             */
            rootVolume: pulumi.Input<inputs.hive.v1.MachinePoolSpecPlatformAwsRootVolume>;
            /**
             * SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.
             */
            spotMarketOptions?: pulumi.Input<inputs.hive.v1.MachinePoolSpecPlatformAwsSpotMarketOptions>;
            /**
             * Subnets is the list of subnets to which to attach the machines. There must be exactly one subnet for each availability zone used.
             */
            subnets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * InstanceType defines the ec2 instance type. eg. m4-large
             */
            type: pulumi.Input<string>;
            /**
             * Zones is list of availability zones that can be used.
             */
            zones?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * EC2RootVolume defines the storage for ec2 instance.
         */
        export interface MachinePoolSpecPlatformAwsRootVolume {
            /**
             * IOPS defines the iops for the storage.
             */
            iops: pulumi.Input<number>;
            /**
             * Size defines the size of the storage.
             */
            size: pulumi.Input<number>;
            /**
             * Type defines the type of the storage.
             */
            type: pulumi.Input<string>;
        }

        /**
         * SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.
         */
        export interface MachinePoolSpecPlatformAwsSpotMarketOptions {
            /**
             * The maximum price the user is willing to pay for their instances Default: On-Demand price
             */
            maxPrice?: pulumi.Input<string>;
        }

        /**
         * Azure is the configuration used when installing on Azure.
         */
        export interface MachinePoolSpecPlatformAzure {
            /**
             * OSDisk defines the storage for instance.
             */
            osDisk: pulumi.Input<inputs.hive.v1.MachinePoolSpecPlatformAzureOsDisk>;
            /**
             * InstanceType defines the azure instance type. eg. Standard_DS_V2
             */
            type: pulumi.Input<string>;
            /**
             * Zones is list of availability zones that can be used. eg. ["1", "2", "3"]
             */
            zones?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * OSDisk defines the storage for instance.
         */
        export interface MachinePoolSpecPlatformAzureOsDisk {
            /**
             * DiskSizeGB defines the size of disk in GB.
             */
            diskSizeGB: pulumi.Input<number>;
        }

        /**
         * GCP is the configuration used when installing on GCP.
         */
        export interface MachinePoolSpecPlatformGcp {
            /**
             * InstanceType defines the GCP instance type. eg. n1-standard-4
             */
            type: pulumi.Input<string>;
            /**
             * Zones is list of availability zones that can be used.
             */
            zones?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * OpenStack is the configuration used when installing on OpenStack.
         */
        export interface MachinePoolSpecPlatformOpenstack {
            /**
             * Flavor defines the OpenStack Nova flavor. eg. m1.large The json key here differs from the installer which uses both "computeFlavor" and type "type" depending on which type you're looking at, and the resulting field on the MachineSet is "flavor". We are opting to stay consistent with the end result.
             */
            flavor: pulumi.Input<string>;
            /**
             * RootVolume defines the root volume for instances in the machine pool. The instances use ephemeral disks if not set.
             */
            rootVolume?: pulumi.Input<inputs.hive.v1.MachinePoolSpecPlatformOpenstackRootVolume>;
        }

        /**
         * RootVolume defines the root volume for instances in the machine pool. The instances use ephemeral disks if not set.
         */
        export interface MachinePoolSpecPlatformOpenstackRootVolume {
            /**
             * Size defines the size of the volume in gibibytes (GiB). Required
             */
            size: pulumi.Input<number>;
            /**
             * Type defines the type of the volume. Required
             */
            type: pulumi.Input<string>;
        }

        /**
         * Ovirt is the configuration used when installing on oVirt.
         */
        export interface MachinePoolSpecPlatformOvirt {
            /**
             * CPU defines the VM CPU.
             */
            cpu?: pulumi.Input<inputs.hive.v1.MachinePoolSpecPlatformOvirtCpu>;
            /**
             * MemoryMB is the size of a VM's memory in MiBs.
             */
            memoryMB?: pulumi.Input<number>;
            /**
             * OSDisk is the the root disk of the node.
             */
            osDisk?: pulumi.Input<inputs.hive.v1.MachinePoolSpecPlatformOvirtOsDisk>;
            /**
             * VMType defines the workload type of the VM.
             */
            vmType?: pulumi.Input<string>;
        }

        /**
         * CPU defines the VM CPU.
         */
        export interface MachinePoolSpecPlatformOvirtCpu {
            /**
             * Cores is the number of cores per socket. Total CPUs is (Sockets * Cores)
             */
            cores: pulumi.Input<number>;
            /**
             * Sockets is the number of sockets for a VM. Total CPUs is (Sockets * Cores)
             */
            sockets: pulumi.Input<number>;
        }

        /**
         * OSDisk is the the root disk of the node.
         */
        export interface MachinePoolSpecPlatformOvirtOsDisk {
            /**
             * SizeGB size of the bootable disk in GiB.
             */
            sizeGB: pulumi.Input<number>;
        }

        /**
         * VSphere is the configuration used when installing on vSphere
         */
        export interface MachinePoolSpecPlatformVsphere {
            /**
             * NumCoresPerSocket is the number of cores per socket in a vm. The number of vCPUs on the vm will be NumCPUs/NumCoresPerSocket.
             */
            coresPerSocket: pulumi.Input<number>;
            /**
             * NumCPUs is the total number of virtual processor cores to assign a vm.
             */
            cpus: pulumi.Input<number>;
            /**
             * Memory is the size of a VM's memory in MB.
             */
            memoryMB: pulumi.Input<number>;
            /**
             * OSDisk defines the storage for instance.
             */
            osDisk: pulumi.Input<inputs.hive.v1.MachinePoolSpecPlatformVsphereOsDisk>;
        }

        /**
         * OSDisk defines the storage for instance.
         */
        export interface MachinePoolSpecPlatformVsphereOsDisk {
            /**
             * DiskSizeGB defines the size of disk in GB.
             */
            diskSizeGB: pulumi.Input<number>;
        }

        /**
         * The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
         */
        export interface MachinePoolSpecTaints {
            /**
             * Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: pulumi.Input<string>;
            /**
             * Required. The taint key to be applied to a node.
             */
            key: pulumi.Input<string>;
            /**
             * TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
             */
            timeAdded?: pulumi.Input<string>;
            /**
             * The taint value corresponding to the taint key.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * MachinePoolStatus defines the observed state of MachinePool
         */
        export interface MachinePoolStatus {
            /**
             * Conditions includes more detailed status for the cluster deployment
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.hive.v1.MachinePoolStatusConditions>[]>;
            /**
             * MachineSets is the status of the machine sets for the machine pool on the remote cluster.
             */
            machineSets?: pulumi.Input<pulumi.Input<inputs.hive.v1.MachinePoolStatusMachineSets>[]>;
            /**
             * Replicas is the current number of replicas for the machine pool.
             */
            replicas?: pulumi.Input<number>;
        }

        /**
         * MachinePoolCondition contains details for the current condition of a machine pool
         */
        export interface MachinePoolStatusConditions {
            /**
             * LastProbeTime is the last time we probed the condition.
             */
            lastProbeTime?: pulumi.Input<string>;
            /**
             * LastTransitionTime is the last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human-readable message indicating details about last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * Reason is a unique, one-word, CamelCase reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status is the status of the condition.
             */
            status: pulumi.Input<string>;
            /**
             * Type is the type of the condition.
             */
            type: pulumi.Input<string>;
        }

        /**
         * MachineSetStatus is the status of a machineset in the remote cluster.
         */
        export interface MachinePoolStatusMachineSets {
            /**
             * MaxReplicas is the maximum number of replicas for the machine set.
             */
            maxReplicas: pulumi.Input<number>;
            /**
             * MinReplicas is the minimum number of replicas for the machine set.
             */
            minReplicas: pulumi.Input<number>;
            /**
             * Name is the name of the machine set.
             */
            name: pulumi.Input<string>;
            /**
             * Replicas is the current number of replicas for the machine set.
             */
            replicas: pulumi.Input<number>;
        }

        /**
         * SelectorSyncIdentityProviderSpec defines the SyncIdentityProviderCommonSpec to sync to ClusterDeploymentSelector indicating which clusters the SelectorSyncIdentityProvider applies to in any namespace.
         */
        export interface SelectorSyncIdentityProviderSpec {
            /**
             * ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorIdentityProvider applies to in any namespace.
             */
            clusterDeploymentSelector?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecClusterDeploymentSelector>;
            /**
             * IdentityProviders is an ordered list of ways for a user to identify themselves
             */
            identityProviders: pulumi.Input<pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProviders>[]>;
        }

        /**
         * ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorIdentityProvider applies to in any namespace.
         */
        export interface SelectorSyncIdentityProviderSpecClusterDeploymentSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecClusterDeploymentSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface SelectorSyncIdentityProviderSpecClusterDeploymentSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * IdentityProvider provides identities for users authenticating using credentials
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProviders {
            /**
             * basicAuth contains configuration options for the BasicAuth IdP
             */
            basicAuth?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuth>;
            /**
             * github enables user authentication using GitHub credentials
             */
            github?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersGithub>;
            /**
             * gitlab enables user authentication using GitLab credentials
             */
            gitlab?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersGitlab>;
            /**
             * google enables user authentication using Google credentials
             */
            google?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersGoogle>;
            /**
             * htpasswd enables user authentication using an HTPasswd file to validate credentials
             */
            htpasswd?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswd>;
            /**
             * keystone enables user authentication using keystone password credentials
             */
            keystone?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersKeystone>;
            /**
             * ldap enables user authentication using LDAP credentials
             */
            ldap?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersLdap>;
            /**
             * mappingMethod determines how identities from this provider are mapped to users Defaults to "claim"
             */
            mappingMethod?: pulumi.Input<string>;
            /**
             * name is used to qualify the identities returned by this provider. - It MUST be unique and not shared by any other identity provider used - It MUST be a valid path segment: name cannot equal "." or ".." or contain "/" or "%" or ":"   Ref: https://godoc.org/github.com/openshift/origin/pkg/user/apis/user/validation#ValidateIdentityProviderName
             */
            name?: pulumi.Input<string>;
            /**
             * openID enables user authentication using OpenID credentials
             */
            openID?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersOpenID>;
            /**
             * requestHeader enables user authentication using request header credentials
             */
            requestHeader?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeader>;
            /**
             * type identifies the identity provider type for this entry.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * basicAuth contains configuration options for the BasicAuth IdP
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuth {
            /**
             * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
             */
            ca?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthCa>;
            /**
             * tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            tlsClientCert?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCert>;
            /**
             * tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            tlsClientKey?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKey>;
            /**
             * url is the remote URL to connect to
             */
            url?: pulumi.Input<string>;
        }

        /**
         * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthCa {
            /**
             * name is the metadata.name of the referenced config map
             */
            name: pulumi.Input<string>;
        }

        /**
         * tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCert {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKey {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * github enables user authentication using GitHub credentials
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersGithub {
            /**
             * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
             */
            ca?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersGithubCa>;
            /**
             * clientID is the oauth client ID
             */
            clientID?: pulumi.Input<string>;
            /**
             * clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            clientSecret?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersGithubClientSecret>;
            /**
             * hostname is the optional domain (e.g. "mycompany.com") for use with a hosted instance of GitHub Enterprise. It must match the GitHub Enterprise settings value configured at /setup/settings#hostname.
             */
            hostname?: pulumi.Input<string>;
            /**
             * organizations optionally restricts which organizations are allowed to log in
             */
            organizations?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * teams optionally restricts which teams are allowed to log in. Format is <org>/<team>.
             */
            teams?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersGithubCa {
            /**
             * name is the metadata.name of the referenced config map
             */
            name: pulumi.Input<string>;
        }

        /**
         * clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersGithubClientSecret {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * gitlab enables user authentication using GitLab credentials
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersGitlab {
            /**
             * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
             */
            ca?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersGitlabCa>;
            /**
             * clientID is the oauth client ID
             */
            clientID?: pulumi.Input<string>;
            /**
             * clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            clientSecret?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersGitlabClientSecret>;
            /**
             * url is the oauth server base URL
             */
            url?: pulumi.Input<string>;
        }

        /**
         * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersGitlabCa {
            /**
             * name is the metadata.name of the referenced config map
             */
            name: pulumi.Input<string>;
        }

        /**
         * clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersGitlabClientSecret {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * google enables user authentication using Google credentials
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersGoogle {
            /**
             * clientID is the oauth client ID
             */
            clientID?: pulumi.Input<string>;
            /**
             * clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            clientSecret?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersGoogleClientSecret>;
            /**
             * hostedDomain is the optional Google App domain (e.g. "mycompany.com") to restrict logins to
             */
            hostedDomain?: pulumi.Input<string>;
        }

        /**
         * clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersGoogleClientSecret {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * htpasswd enables user authentication using an HTPasswd file to validate credentials
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswd {
            /**
             * fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            fileData?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdFileData>;
        }

        /**
         * fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdFileData {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * keystone enables user authentication using keystone password credentials
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersKeystone {
            /**
             * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
             */
            ca?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneCa>;
            /**
             * domainName is required for keystone v3
             */
            domainName?: pulumi.Input<string>;
            /**
             * tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            tlsClientCert?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCert>;
            /**
             * tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            tlsClientKey?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKey>;
            /**
             * url is the remote URL to connect to
             */
            url?: pulumi.Input<string>;
        }

        /**
         * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneCa {
            /**
             * name is the metadata.name of the referenced config map
             */
            name: pulumi.Input<string>;
        }

        /**
         * tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCert {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKey {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * ldap enables user authentication using LDAP credentials
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersLdap {
            /**
             * attributes maps LDAP attributes to identities
             */
            attributes?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersLdapAttributes>;
            /**
             * bindDN is an optional DN to bind with during the search phase.
             */
            bindDN?: pulumi.Input<string>;
            /**
             * bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            bindPassword?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersLdapBindPassword>;
            /**
             * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
             */
            ca?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersLdapCa>;
            /**
             * insecure, if true, indicates the connection should not use TLS WARNING: Should not be set to `true` with the URL scheme "ldaps://" as "ldaps://" URLs always          attempt to connect using TLS, even when `insecure` is set to `true` When `true`, "ldap://" URLS connect insecurely. When `false`, "ldap://" URLs are upgraded to a TLS connection using StartTLS as specified in https://tools.ietf.org/html/rfc2830.
             */
            insecure?: pulumi.Input<boolean>;
            /**
             * url is an RFC 2255 URL which specifies the LDAP search parameters to use. The syntax of the URL is: ldap://host:port/basedn?attribute?scope?filter
             */
            url?: pulumi.Input<string>;
        }

        /**
         * attributes maps LDAP attributes to identities
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersLdapAttributes {
            /**
             * email is the list of attributes whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
             */
            email?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * id is the list of attributes whose values should be used as the user ID. Required. First non-empty attribute is used. At least one attribute is required. If none of the listed attribute have a value, authentication fails. LDAP standard identity attribute is "dn"
             */
            id?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * name is the list of attributes whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity LDAP standard display name attribute is "cn"
             */
            name?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * preferredUsername is the list of attributes whose values should be used as the preferred username. LDAP standard login attribute is "uid"
             */
            preferredUsername?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersLdapBindPassword {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersLdapCa {
            /**
             * name is the metadata.name of the referenced config map
             */
            name: pulumi.Input<string>;
        }

        /**
         * openID enables user authentication using OpenID credentials
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersOpenID {
            /**
             * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
             */
            ca?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDCa>;
            /**
             * claims mappings
             */
            claims?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClaims>;
            /**
             * clientID is the oauth client ID
             */
            clientID?: pulumi.Input<string>;
            /**
             * clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            clientSecret?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClientSecret>;
            /**
             * extraAuthorizeParameters are any custom parameters to add to the authorize request.
             */
            extraAuthorizeParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * extraScopes are any scopes to request in addition to the standard "openid" scope.
             */
            extraScopes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * issuer is the URL that the OpenID Provider asserts as its Issuer Identifier. It must use the https scheme with no query or fragment component.
             */
            issuer?: pulumi.Input<string>;
        }

        /**
         * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDCa {
            /**
             * name is the metadata.name of the referenced config map
             */
            name: pulumi.Input<string>;
        }

        /**
         * claims mappings
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClaims {
            /**
             * email is the list of claims whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
             */
            email?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * name is the list of claims whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity
             */
            name?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * preferredUsername is the list of claims whose values should be used as the preferred username. If unspecified, the preferred username is determined from the value of the sub claim
             */
            preferredUsername?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClientSecret {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * requestHeader enables user authentication using request header credentials
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeader {
            /**
             * ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
             */
            ca?: pulumi.Input<inputs.hive.v1.SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderCa>;
            /**
             * challengeURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect WWW-Authenticate challenges will be redirected here. ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when challenge is set to true.
             */
            challengeURL?: pulumi.Input<string>;
            /**
             * clientCommonNames is an optional list of common names to require a match from. If empty, any client certificate validated against the clientCA bundle is considered authoritative.
             */
            clientCommonNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * emailHeaders is the set of headers to check for the email address
             */
            emailHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * headers is the set of headers to check for identity information
             */
            headers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * loginURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect interactive logins will be redirected here ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when login is set to true.
             */
            loginURL?: pulumi.Input<string>;
            /**
             * nameHeaders is the set of headers to check for the display name
             */
            nameHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * preferredUsernameHeaders is the set of headers to check for the preferred username
             */
            preferredUsernameHeaders?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
         */
        export interface SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderCa {
            /**
             * name is the metadata.name of the referenced config map
             */
            name: pulumi.Input<string>;
        }

        /**
         * SelectorSyncSetSpec defines the SyncSetCommonSpec resources and patches to sync along with a ClusterDeploymentSelector indicating which clusters the SelectorSyncSet applies to in any namespace.
         */
        export interface SelectorSyncSetSpec {
            /**
             * ApplyBehavior indicates how resources in this syncset will be applied to the target cluster. The default value of "Apply" indicates that resources should be applied using the 'oc apply' command. If no value is set, "Apply" is assumed. A value of "CreateOnly" indicates that the resource will only be created if it does not already exist in the target cluster. Otherwise, it will be left alone. A value of "CreateOrUpdate" indicates that the resource will be created/updated without the use of the 'oc apply' command, allowing larger resources to be synced, but losing some functionality of the 'oc apply' command such as the ability to remove annotations, labels, and other map entries in general.
             */
            applyBehavior?: pulumi.Input<string>;
            /**
             * ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorSyncSet applies to in any namespace.
             */
            clusterDeploymentSelector?: pulumi.Input<inputs.hive.v1.SelectorSyncSetSpecClusterDeploymentSelector>;
            /**
             * Patches is the list of patches to apply.
             */
            patches?: pulumi.Input<pulumi.Input<inputs.hive.v1.SelectorSyncSetSpecPatches>[]>;
            /**
             * ResourceApplyMode indicates if the Resource apply mode is "Upsert" (default) or "Sync". ApplyMode "Upsert" indicates create and update. ApplyMode "Sync" indicates create, update and delete.
             */
            resourceApplyMode?: pulumi.Input<string>;
            /**
             * Resources is the list of objects to sync from RawExtension definitions.
             */
            resources?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
            /**
             * Secrets is the list of secrets to sync along with their respective destinations.
             */
            secretMappings?: pulumi.Input<pulumi.Input<inputs.hive.v1.SelectorSyncSetSpecSecretMappings>[]>;
        }

        /**
         * ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorSyncSet applies to in any namespace.
         */
        export interface SelectorSyncSetSpecClusterDeploymentSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.hive.v1.SelectorSyncSetSpecClusterDeploymentSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface SelectorSyncSetSpecClusterDeploymentSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * SyncObjectPatch represents a patch to be applied to a specific object
         */
        export interface SelectorSyncSetSpecPatches {
            /**
             * APIVersion is the Group and Version of the object to be patched.
             */
            apiVersion: pulumi.Input<string>;
            /**
             * Kind is the Kind of the object to be patched.
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of the object to be patched.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the Namespace in which the object to patch exists. Defaults to the SyncSet's Namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * Patch is the patch to apply.
             */
            patch: pulumi.Input<string>;
            /**
             * PatchType indicates the PatchType as "strategic" (default), "json", or "merge".
             */
            patchType?: pulumi.Input<string>;
        }

        /**
         * SecretMapping defines a source and destination for a secret to be synced by a SyncSet
         */
        export interface SelectorSyncSetSpecSecretMappings {
            /**
             * SourceRef specifies the name and namespace of a secret on the management cluster
             */
            sourceRef: pulumi.Input<inputs.hive.v1.SelectorSyncSetSpecSecretMappingsSourceRef>;
            /**
             * TargetRef specifies the target name and namespace of the secret on the target cluster
             */
            targetRef: pulumi.Input<inputs.hive.v1.SelectorSyncSetSpecSecretMappingsTargetRef>;
        }

        /**
         * SourceRef specifies the name and namespace of a secret on the management cluster
         */
        export interface SelectorSyncSetSpecSecretMappingsSourceRef {
            /**
             * Name is the name of the secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * TargetRef specifies the target name and namespace of the secret on the target cluster
         */
        export interface SelectorSyncSetSpecSecretMappingsTargetRef {
            /**
             * Name is the name of the secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * SyncIdentityProviderSpec defines the SyncIdentityProviderCommonSpec identity providers to sync along with ClusterDeploymentRefs indicating which clusters the SyncIdentityProvider applies to in the SyncIdentityProvider's namespace.
         */
        export interface SyncIdentityProviderSpec {
            /**
             * ClusterDeploymentRefs is the list of LocalObjectReference indicating which clusters the SyncSet applies to in the SyncSet's namespace.
             */
            clusterDeploymentRefs: pulumi.Input<pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecClusterDeploymentRefs>[]>;
            /**
             * IdentityProviders is an ordered list of ways for a user to identify themselves
             */
            identityProviders: pulumi.Input<pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProviders>[]>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface SyncIdentityProviderSpecClusterDeploymentRefs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * IdentityProvider provides identities for users authenticating using credentials
         */
        export interface SyncIdentityProviderSpecIdentityProviders {
            /**
             * basicAuth contains configuration options for the BasicAuth IdP
             */
            basicAuth?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersBasicAuth>;
            /**
             * github enables user authentication using GitHub credentials
             */
            github?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersGithub>;
            /**
             * gitlab enables user authentication using GitLab credentials
             */
            gitlab?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersGitlab>;
            /**
             * google enables user authentication using Google credentials
             */
            google?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersGoogle>;
            /**
             * htpasswd enables user authentication using an HTPasswd file to validate credentials
             */
            htpasswd?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersHtpasswd>;
            /**
             * keystone enables user authentication using keystone password credentials
             */
            keystone?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersKeystone>;
            /**
             * ldap enables user authentication using LDAP credentials
             */
            ldap?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersLdap>;
            /**
             * mappingMethod determines how identities from this provider are mapped to users Defaults to "claim"
             */
            mappingMethod?: pulumi.Input<string>;
            /**
             * name is used to qualify the identities returned by this provider. - It MUST be unique and not shared by any other identity provider used - It MUST be a valid path segment: name cannot equal "." or ".." or contain "/" or "%" or ":"   Ref: https://godoc.org/github.com/openshift/origin/pkg/user/apis/user/validation#ValidateIdentityProviderName
             */
            name?: pulumi.Input<string>;
            /**
             * openID enables user authentication using OpenID credentials
             */
            openID?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersOpenID>;
            /**
             * requestHeader enables user authentication using request header credentials
             */
            requestHeader?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersRequestHeader>;
            /**
             * type identifies the identity provider type for this entry.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * basicAuth contains configuration options for the BasicAuth IdP
         */
        export interface SyncIdentityProviderSpecIdentityProvidersBasicAuth {
            /**
             * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
             */
            ca?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersBasicAuthCa>;
            /**
             * tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            tlsClientCert?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCert>;
            /**
             * tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            tlsClientKey?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKey>;
            /**
             * url is the remote URL to connect to
             */
            url?: pulumi.Input<string>;
        }

        /**
         * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersBasicAuthCa {
            /**
             * name is the metadata.name of the referenced config map
             */
            name: pulumi.Input<string>;
        }

        /**
         * tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCert {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKey {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * github enables user authentication using GitHub credentials
         */
        export interface SyncIdentityProviderSpecIdentityProvidersGithub {
            /**
             * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
             */
            ca?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersGithubCa>;
            /**
             * clientID is the oauth client ID
             */
            clientID?: pulumi.Input<string>;
            /**
             * clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            clientSecret?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersGithubClientSecret>;
            /**
             * hostname is the optional domain (e.g. "mycompany.com") for use with a hosted instance of GitHub Enterprise. It must match the GitHub Enterprise settings value configured at /setup/settings#hostname.
             */
            hostname?: pulumi.Input<string>;
            /**
             * organizations optionally restricts which organizations are allowed to log in
             */
            organizations?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * teams optionally restricts which teams are allowed to log in. Format is <org>/<team>.
             */
            teams?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersGithubCa {
            /**
             * name is the metadata.name of the referenced config map
             */
            name: pulumi.Input<string>;
        }

        /**
         * clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersGithubClientSecret {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * gitlab enables user authentication using GitLab credentials
         */
        export interface SyncIdentityProviderSpecIdentityProvidersGitlab {
            /**
             * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
             */
            ca?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersGitlabCa>;
            /**
             * clientID is the oauth client ID
             */
            clientID?: pulumi.Input<string>;
            /**
             * clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            clientSecret?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersGitlabClientSecret>;
            /**
             * url is the oauth server base URL
             */
            url?: pulumi.Input<string>;
        }

        /**
         * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersGitlabCa {
            /**
             * name is the metadata.name of the referenced config map
             */
            name: pulumi.Input<string>;
        }

        /**
         * clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersGitlabClientSecret {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * google enables user authentication using Google credentials
         */
        export interface SyncIdentityProviderSpecIdentityProvidersGoogle {
            /**
             * clientID is the oauth client ID
             */
            clientID?: pulumi.Input<string>;
            /**
             * clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            clientSecret?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersGoogleClientSecret>;
            /**
             * hostedDomain is the optional Google App domain (e.g. "mycompany.com") to restrict logins to
             */
            hostedDomain?: pulumi.Input<string>;
        }

        /**
         * clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersGoogleClientSecret {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * htpasswd enables user authentication using an HTPasswd file to validate credentials
         */
        export interface SyncIdentityProviderSpecIdentityProvidersHtpasswd {
            /**
             * fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            fileData?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersHtpasswdFileData>;
        }

        /**
         * fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersHtpasswdFileData {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * keystone enables user authentication using keystone password credentials
         */
        export interface SyncIdentityProviderSpecIdentityProvidersKeystone {
            /**
             * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
             */
            ca?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersKeystoneCa>;
            /**
             * domainName is required for keystone v3
             */
            domainName?: pulumi.Input<string>;
            /**
             * tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            tlsClientCert?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCert>;
            /**
             * tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            tlsClientKey?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKey>;
            /**
             * url is the remote URL to connect to
             */
            url?: pulumi.Input<string>;
        }

        /**
         * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersKeystoneCa {
            /**
             * name is the metadata.name of the referenced config map
             */
            name: pulumi.Input<string>;
        }

        /**
         * tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCert {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKey {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * ldap enables user authentication using LDAP credentials
         */
        export interface SyncIdentityProviderSpecIdentityProvidersLdap {
            /**
             * attributes maps LDAP attributes to identities
             */
            attributes?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersLdapAttributes>;
            /**
             * bindDN is an optional DN to bind with during the search phase.
             */
            bindDN?: pulumi.Input<string>;
            /**
             * bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            bindPassword?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersLdapBindPassword>;
            /**
             * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
             */
            ca?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersLdapCa>;
            /**
             * insecure, if true, indicates the connection should not use TLS WARNING: Should not be set to `true` with the URL scheme "ldaps://" as "ldaps://" URLs always          attempt to connect using TLS, even when `insecure` is set to `true` When `true`, "ldap://" URLS connect insecurely. When `false`, "ldap://" URLs are upgraded to a TLS connection using StartTLS as specified in https://tools.ietf.org/html/rfc2830.
             */
            insecure?: pulumi.Input<boolean>;
            /**
             * url is an RFC 2255 URL which specifies the LDAP search parameters to use. The syntax of the URL is: ldap://host:port/basedn?attribute?scope?filter
             */
            url?: pulumi.Input<string>;
        }

        /**
         * attributes maps LDAP attributes to identities
         */
        export interface SyncIdentityProviderSpecIdentityProvidersLdapAttributes {
            /**
             * email is the list of attributes whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
             */
            email?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * id is the list of attributes whose values should be used as the user ID. Required. First non-empty attribute is used. At least one attribute is required. If none of the listed attribute have a value, authentication fails. LDAP standard identity attribute is "dn"
             */
            id?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * name is the list of attributes whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity LDAP standard display name attribute is "cn"
             */
            name?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * preferredUsername is the list of attributes whose values should be used as the preferred username. LDAP standard login attribute is "uid"
             */
            preferredUsername?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersLdapBindPassword {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersLdapCa {
            /**
             * name is the metadata.name of the referenced config map
             */
            name: pulumi.Input<string>;
        }

        /**
         * openID enables user authentication using OpenID credentials
         */
        export interface SyncIdentityProviderSpecIdentityProvidersOpenID {
            /**
             * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
             */
            ca?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersOpenIDCa>;
            /**
             * claims mappings
             */
            claims?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersOpenIDClaims>;
            /**
             * clientID is the oauth client ID
             */
            clientID?: pulumi.Input<string>;
            /**
             * clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
             */
            clientSecret?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersOpenIDClientSecret>;
            /**
             * extraAuthorizeParameters are any custom parameters to add to the authorize request.
             */
            extraAuthorizeParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * extraScopes are any scopes to request in addition to the standard "openid" scope.
             */
            extraScopes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * issuer is the URL that the OpenID Provider asserts as its Issuer Identifier. It must use the https scheme with no query or fragment component.
             */
            issuer?: pulumi.Input<string>;
        }

        /**
         * ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersOpenIDCa {
            /**
             * name is the metadata.name of the referenced config map
             */
            name: pulumi.Input<string>;
        }

        /**
         * claims mappings
         */
        export interface SyncIdentityProviderSpecIdentityProvidersOpenIDClaims {
            /**
             * email is the list of claims whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
             */
            email?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * name is the list of claims whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity
             */
            name?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * preferredUsername is the list of claims whose values should be used as the preferred username. If unspecified, the preferred username is determined from the value of the sub claim
             */
            preferredUsername?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersOpenIDClientSecret {
            /**
             * name is the metadata.name of the referenced secret
             */
            name: pulumi.Input<string>;
        }

        /**
         * requestHeader enables user authentication using request header credentials
         */
        export interface SyncIdentityProviderSpecIdentityProvidersRequestHeader {
            /**
             * ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
             */
            ca?: pulumi.Input<inputs.hive.v1.SyncIdentityProviderSpecIdentityProvidersRequestHeaderCa>;
            /**
             * challengeURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect WWW-Authenticate challenges will be redirected here. ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when challenge is set to true.
             */
            challengeURL?: pulumi.Input<string>;
            /**
             * clientCommonNames is an optional list of common names to require a match from. If empty, any client certificate validated against the clientCA bundle is considered authoritative.
             */
            clientCommonNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * emailHeaders is the set of headers to check for the email address
             */
            emailHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * headers is the set of headers to check for identity information
             */
            headers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * loginURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect interactive logins will be redirected here ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when login is set to true.
             */
            loginURL?: pulumi.Input<string>;
            /**
             * nameHeaders is the set of headers to check for the display name
             */
            nameHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * preferredUsernameHeaders is the set of headers to check for the preferred username
             */
            preferredUsernameHeaders?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
         */
        export interface SyncIdentityProviderSpecIdentityProvidersRequestHeaderCa {
            /**
             * name is the metadata.name of the referenced config map
             */
            name: pulumi.Input<string>;
        }

        /**
         * SyncSetSpec defines the SyncSetCommonSpec resources and patches to sync along with ClusterDeploymentRefs indicating which clusters the SyncSet applies to in the SyncSet's namespace.
         */
        export interface SyncSetSpec {
            /**
             * ApplyBehavior indicates how resources in this syncset will be applied to the target cluster. The default value of "Apply" indicates that resources should be applied using the 'oc apply' command. If no value is set, "Apply" is assumed. A value of "CreateOnly" indicates that the resource will only be created if it does not already exist in the target cluster. Otherwise, it will be left alone. A value of "CreateOrUpdate" indicates that the resource will be created/updated without the use of the 'oc apply' command, allowing larger resources to be synced, but losing some functionality of the 'oc apply' command such as the ability to remove annotations, labels, and other map entries in general.
             */
            applyBehavior?: pulumi.Input<string>;
            /**
             * ClusterDeploymentRefs is the list of LocalObjectReference indicating which clusters the SyncSet applies to in the SyncSet's namespace.
             */
            clusterDeploymentRefs: pulumi.Input<pulumi.Input<inputs.hive.v1.SyncSetSpecClusterDeploymentRefs>[]>;
            /**
             * Patches is the list of patches to apply.
             */
            patches?: pulumi.Input<pulumi.Input<inputs.hive.v1.SyncSetSpecPatches>[]>;
            /**
             * ResourceApplyMode indicates if the Resource apply mode is "Upsert" (default) or "Sync". ApplyMode "Upsert" indicates create and update. ApplyMode "Sync" indicates create, update and delete.
             */
            resourceApplyMode?: pulumi.Input<string>;
            /**
             * Resources is the list of objects to sync from RawExtension definitions.
             */
            resources?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
            /**
             * Secrets is the list of secrets to sync along with their respective destinations.
             */
            secretMappings?: pulumi.Input<pulumi.Input<inputs.hive.v1.SyncSetSpecSecretMappings>[]>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface SyncSetSpecClusterDeploymentRefs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * SyncObjectPatch represents a patch to be applied to a specific object
         */
        export interface SyncSetSpecPatches {
            /**
             * APIVersion is the Group and Version of the object to be patched.
             */
            apiVersion: pulumi.Input<string>;
            /**
             * Kind is the Kind of the object to be patched.
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of the object to be patched.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the Namespace in which the object to patch exists. Defaults to the SyncSet's Namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * Patch is the patch to apply.
             */
            patch: pulumi.Input<string>;
            /**
             * PatchType indicates the PatchType as "strategic" (default), "json", or "merge".
             */
            patchType?: pulumi.Input<string>;
        }

        /**
         * SecretMapping defines a source and destination for a secret to be synced by a SyncSet
         */
        export interface SyncSetSpecSecretMappings {
            /**
             * SourceRef specifies the name and namespace of a secret on the management cluster
             */
            sourceRef: pulumi.Input<inputs.hive.v1.SyncSetSpecSecretMappingsSourceRef>;
            /**
             * TargetRef specifies the target name and namespace of the secret on the target cluster
             */
            targetRef: pulumi.Input<inputs.hive.v1.SyncSetSpecSecretMappingsTargetRef>;
        }

        /**
         * SourceRef specifies the name and namespace of a secret on the management cluster
         */
        export interface SyncSetSpecSecretMappingsSourceRef {
            /**
             * Name is the name of the secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * TargetRef specifies the target name and namespace of the secret on the target cluster
         */
        export interface SyncSetSpecSecretMappingsTargetRef {
            /**
             * Name is the name of the secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
             */
            namespace?: pulumi.Input<string>;
        }

    }
}

export namespace hiveinternal {
    export namespace v1alpha1 {
        /**
         * ClusterSyncLeaseSpec is the specification of a ClusterSyncLease.
         */
        export interface ClusterSyncLeaseSpec {
            /**
             * RenewTime is the time when SyncSets and SelectorSyncSets were last applied to the cluster.
             */
            renewTime: pulumi.Input<string>;
        }

        /**
         * ClusterSyncStatus defines the observed state of ClusterSync
         */
        export interface ClusterSyncStatus {
            /**
             * Conditions is a list of conditions associated with syncing to the cluster.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.hiveinternal.v1alpha1.ClusterSyncStatusConditions>[]>;
            /**
             * FirstSuccessTime is the time we first successfully applied all (selector)syncsets to a cluster.
             */
            firstSuccessTime?: pulumi.Input<string>;
            /**
             * SelectorSyncSets is the sync status of all of the SelectorSyncSets for the cluster.
             */
            selectorSyncSets?: pulumi.Input<pulumi.Input<inputs.hiveinternal.v1alpha1.ClusterSyncStatusSelectorSyncSets>[]>;
            /**
             * SyncSets is the sync status of all of the SyncSets for the cluster.
             */
            syncSets?: pulumi.Input<pulumi.Input<inputs.hiveinternal.v1alpha1.ClusterSyncStatusSyncSets>[]>;
        }

        /**
         * ClusterSyncCondition contains details for the current condition of a ClusterSync
         */
        export interface ClusterSyncStatusConditions {
            /**
             * LastProbeTime is the last time we probed the condition.
             */
            lastProbeTime?: pulumi.Input<string>;
            /**
             * LastTransitionTime is the last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human-readable message indicating details about the last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * Reason is a unique, one-word, CamelCase reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status is the status of the condition.
             */
            status: pulumi.Input<string>;
            /**
             * Type is the type of the condition.
             */
            type: pulumi.Input<string>;
        }

        /**
         * SyncStatus is the status of applying a specific SyncSet or SelectorSyncSet to the cluster.
         */
        export interface ClusterSyncStatusSelectorSyncSets {
            /**
             * FailureMessage is a message describing why the SyncSet or SelectorSyncSet could not be applied. This is only set when Result is Failure.
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FirstSuccessTime is the time when the SyncSet or SelectorSyncSet was first successfully applied to the cluster.
             */
            firstSuccessTime?: pulumi.Input<string>;
            /**
             * LastTransitionTime is the time when this status last changed.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * Name is the name of the SyncSet or SelectorSyncSet.
             */
            name: pulumi.Input<string>;
            /**
             * ObservedGeneration is the generation of the SyncSet or SelectorSyncSet that was last observed.
             */
            observedGeneration: pulumi.Input<number>;
            /**
             * ResourcesToDelete is the list of resources in the cluster that should be deleted when the SyncSet or SelectorSyncSet is deleted or is no longer matched to the cluster.
             */
            resourcesToDelete?: pulumi.Input<pulumi.Input<inputs.hiveinternal.v1alpha1.ClusterSyncStatusSelectorSyncSetsResourcesToDelete>[]>;
            /**
             * Result is the result of the last attempt to apply the SyncSet or SelectorSyncSet to the cluster.
             */
            result: pulumi.Input<string>;
        }

        /**
         * SyncResourceReference is a reference to a resource that is synced to a cluster via a SyncSet or SelectorSyncSet.
         */
        export interface ClusterSyncStatusSelectorSyncSetsResourcesToDelete {
            /**
             * APIVersion is the Group and Version of the resource.
             */
            apiVersion: pulumi.Input<string>;
            /**
             * Kind is the Kind of the resource.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * SyncStatus is the status of applying a specific SyncSet or SelectorSyncSet to the cluster.
         */
        export interface ClusterSyncStatusSyncSets {
            /**
             * FailureMessage is a message describing why the SyncSet or SelectorSyncSet could not be applied. This is only set when Result is Failure.
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FirstSuccessTime is the time when the SyncSet or SelectorSyncSet was first successfully applied to the cluster.
             */
            firstSuccessTime?: pulumi.Input<string>;
            /**
             * LastTransitionTime is the time when this status last changed.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * Name is the name of the SyncSet or SelectorSyncSet.
             */
            name: pulumi.Input<string>;
            /**
             * ObservedGeneration is the generation of the SyncSet or SelectorSyncSet that was last observed.
             */
            observedGeneration: pulumi.Input<number>;
            /**
             * ResourcesToDelete is the list of resources in the cluster that should be deleted when the SyncSet or SelectorSyncSet is deleted or is no longer matched to the cluster.
             */
            resourcesToDelete?: pulumi.Input<pulumi.Input<inputs.hiveinternal.v1alpha1.ClusterSyncStatusSyncSetsResourcesToDelete>[]>;
            /**
             * Result is the result of the last attempt to apply the SyncSet or SelectorSyncSet to the cluster.
             */
            result: pulumi.Input<string>;
        }

        /**
         * SyncResourceReference is a reference to a resource that is synced to a cluster via a SyncSet or SelectorSyncSet.
         */
        export interface ClusterSyncStatusSyncSetsResourcesToDelete {
            /**
             * APIVersion is the Group and Version of the resource.
             */
            apiVersion: pulumi.Input<string>;
            /**
             * Kind is the Kind of the resource.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the resource.
             */
            namespace?: pulumi.Input<string>;
        }
    }
}

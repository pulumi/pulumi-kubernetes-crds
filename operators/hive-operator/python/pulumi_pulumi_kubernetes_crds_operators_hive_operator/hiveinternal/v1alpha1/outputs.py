# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'ClusterSyncLeaseSpec',
    'ClusterSyncStatus',
    'ClusterSyncStatusConditions',
    'ClusterSyncStatusSelectorSyncSets',
    'ClusterSyncStatusSelectorSyncSetsResourcesToDelete',
    'ClusterSyncStatusSyncSets',
    'ClusterSyncStatusSyncSetsResourcesToDelete',
]

@pulumi.output_type
class ClusterSyncLeaseSpec(dict):
    """
    ClusterSyncLeaseSpec is the specification of a ClusterSyncLease.
    """
    def __init__(__self__, *,
                 renew_time: str):
        """
        ClusterSyncLeaseSpec is the specification of a ClusterSyncLease.
        :param str renew_time: RenewTime is the time when SyncSets and SelectorSyncSets were last applied to the cluster.
        """
        pulumi.set(__self__, "renew_time", renew_time)

    @property
    @pulumi.getter(name="renewTime")
    def renew_time(self) -> str:
        """
        RenewTime is the time when SyncSets and SelectorSyncSets were last applied to the cluster.
        """
        return pulumi.get(self, "renew_time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterSyncStatus(dict):
    """
    ClusterSyncStatus defines the observed state of ClusterSync
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ClusterSyncStatusConditions']] = None,
                 first_success_time: Optional[str] = None,
                 selector_sync_sets: Optional[Sequence['outputs.ClusterSyncStatusSelectorSyncSets']] = None,
                 sync_sets: Optional[Sequence['outputs.ClusterSyncStatusSyncSets']] = None):
        """
        ClusterSyncStatus defines the observed state of ClusterSync
        :param Sequence['ClusterSyncStatusConditionsArgs'] conditions: Conditions is a list of conditions associated with syncing to the cluster.
        :param str first_success_time: FirstSuccessTime is the time we first successfully applied all (selector)syncsets to a cluster.
        :param Sequence['ClusterSyncStatusSelectorSyncSetsArgs'] selector_sync_sets: SelectorSyncSets is the sync status of all of the SelectorSyncSets for the cluster.
        :param Sequence['ClusterSyncStatusSyncSetsArgs'] sync_sets: SyncSets is the sync status of all of the SyncSets for the cluster.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if first_success_time is not None:
            pulumi.set(__self__, "first_success_time", first_success_time)
        if selector_sync_sets is not None:
            pulumi.set(__self__, "selector_sync_sets", selector_sync_sets)
        if sync_sets is not None:
            pulumi.set(__self__, "sync_sets", sync_sets)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ClusterSyncStatusConditions']]:
        """
        Conditions is a list of conditions associated with syncing to the cluster.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="firstSuccessTime")
    def first_success_time(self) -> Optional[str]:
        """
        FirstSuccessTime is the time we first successfully applied all (selector)syncsets to a cluster.
        """
        return pulumi.get(self, "first_success_time")

    @property
    @pulumi.getter(name="selectorSyncSets")
    def selector_sync_sets(self) -> Optional[Sequence['outputs.ClusterSyncStatusSelectorSyncSets']]:
        """
        SelectorSyncSets is the sync status of all of the SelectorSyncSets for the cluster.
        """
        return pulumi.get(self, "selector_sync_sets")

    @property
    @pulumi.getter(name="syncSets")
    def sync_sets(self) -> Optional[Sequence['outputs.ClusterSyncStatusSyncSets']]:
        """
        SyncSets is the sync status of all of the SyncSets for the cluster.
        """
        return pulumi.get(self, "sync_sets")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterSyncStatusConditions(dict):
    """
    ClusterSyncCondition contains details for the current condition of a ClusterSync
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_probe_time: Optional[str] = None,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        ClusterSyncCondition contains details for the current condition of a ClusterSync
        :param str status: Status is the status of the condition.
        :param str type: Type is the type of the condition.
        :param str last_probe_time: LastProbeTime is the last time we probed the condition.
        :param str last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param str message: Message is a human-readable message indicating details about the last transition.
        :param str reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[str]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message is a human-readable message indicating details about the last transition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterSyncStatusSelectorSyncSets(dict):
    """
    SyncStatus is the status of applying a specific SyncSet or SelectorSyncSet to the cluster.
    """
    def __init__(__self__, *,
                 last_transition_time: str,
                 name: str,
                 observed_generation: int,
                 result: str,
                 failure_message: Optional[str] = None,
                 first_success_time: Optional[str] = None,
                 resources_to_delete: Optional[Sequence['outputs.ClusterSyncStatusSelectorSyncSetsResourcesToDelete']] = None):
        """
        SyncStatus is the status of applying a specific SyncSet or SelectorSyncSet to the cluster.
        :param str last_transition_time: LastTransitionTime is the time when this status last changed.
        :param str name: Name is the name of the SyncSet or SelectorSyncSet.
        :param int observed_generation: ObservedGeneration is the generation of the SyncSet or SelectorSyncSet that was last observed.
        :param str result: Result is the result of the last attempt to apply the SyncSet or SelectorSyncSet to the cluster.
        :param str failure_message: FailureMessage is a message describing why the SyncSet or SelectorSyncSet could not be applied. This is only set when Result is Failure.
        :param str first_success_time: FirstSuccessTime is the time when the SyncSet or SelectorSyncSet was first successfully applied to the cluster.
        :param Sequence['ClusterSyncStatusSelectorSyncSetsResourcesToDeleteArgs'] resources_to_delete: ResourcesToDelete is the list of resources in the cluster that should be deleted when the SyncSet or SelectorSyncSet is deleted or is no longer matched to the cluster.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "observed_generation", observed_generation)
        pulumi.set(__self__, "result", result)
        if failure_message is not None:
            pulumi.set(__self__, "failure_message", failure_message)
        if first_success_time is not None:
            pulumi.set(__self__, "first_success_time", first_success_time)
        if resources_to_delete is not None:
            pulumi.set(__self__, "resources_to_delete", resources_to_delete)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        LastTransitionTime is the time when this status last changed.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the SyncSet or SelectorSyncSet.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> int:
        """
        ObservedGeneration is the generation of the SyncSet or SelectorSyncSet that was last observed.
        """
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter
    def result(self) -> str:
        """
        Result is the result of the last attempt to apply the SyncSet or SelectorSyncSet to the cluster.
        """
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="failureMessage")
    def failure_message(self) -> Optional[str]:
        """
        FailureMessage is a message describing why the SyncSet or SelectorSyncSet could not be applied. This is only set when Result is Failure.
        """
        return pulumi.get(self, "failure_message")

    @property
    @pulumi.getter(name="firstSuccessTime")
    def first_success_time(self) -> Optional[str]:
        """
        FirstSuccessTime is the time when the SyncSet or SelectorSyncSet was first successfully applied to the cluster.
        """
        return pulumi.get(self, "first_success_time")

    @property
    @pulumi.getter(name="resourcesToDelete")
    def resources_to_delete(self) -> Optional[Sequence['outputs.ClusterSyncStatusSelectorSyncSetsResourcesToDelete']]:
        """
        ResourcesToDelete is the list of resources in the cluster that should be deleted when the SyncSet or SelectorSyncSet is deleted or is no longer matched to the cluster.
        """
        return pulumi.get(self, "resources_to_delete")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterSyncStatusSelectorSyncSetsResourcesToDelete(dict):
    """
    SyncResourceReference is a reference to a resource that is synced to a cluster via a SyncSet or SelectorSyncSet.
    """
    def __init__(__self__, *,
                 api_version: str,
                 name: str,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        SyncResourceReference is a reference to a resource that is synced to a cluster via a SyncSet or SelectorSyncSet.
        :param str api_version: APIVersion is the Group and Version of the resource.
        :param str name: Name is the name of the resource.
        :param str kind: Kind is the Kind of the resource.
        :param str namespace: Namespace is the namespace of the resource.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "name", name)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        APIVersion is the Group and Version of the resource.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is the Kind of the resource.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the resource.
        """
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterSyncStatusSyncSets(dict):
    """
    SyncStatus is the status of applying a specific SyncSet or SelectorSyncSet to the cluster.
    """
    def __init__(__self__, *,
                 last_transition_time: str,
                 name: str,
                 observed_generation: int,
                 result: str,
                 failure_message: Optional[str] = None,
                 first_success_time: Optional[str] = None,
                 resources_to_delete: Optional[Sequence['outputs.ClusterSyncStatusSyncSetsResourcesToDelete']] = None):
        """
        SyncStatus is the status of applying a specific SyncSet or SelectorSyncSet to the cluster.
        :param str last_transition_time: LastTransitionTime is the time when this status last changed.
        :param str name: Name is the name of the SyncSet or SelectorSyncSet.
        :param int observed_generation: ObservedGeneration is the generation of the SyncSet or SelectorSyncSet that was last observed.
        :param str result: Result is the result of the last attempt to apply the SyncSet or SelectorSyncSet to the cluster.
        :param str failure_message: FailureMessage is a message describing why the SyncSet or SelectorSyncSet could not be applied. This is only set when Result is Failure.
        :param str first_success_time: FirstSuccessTime is the time when the SyncSet or SelectorSyncSet was first successfully applied to the cluster.
        :param Sequence['ClusterSyncStatusSyncSetsResourcesToDeleteArgs'] resources_to_delete: ResourcesToDelete is the list of resources in the cluster that should be deleted when the SyncSet or SelectorSyncSet is deleted or is no longer matched to the cluster.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "observed_generation", observed_generation)
        pulumi.set(__self__, "result", result)
        if failure_message is not None:
            pulumi.set(__self__, "failure_message", failure_message)
        if first_success_time is not None:
            pulumi.set(__self__, "first_success_time", first_success_time)
        if resources_to_delete is not None:
            pulumi.set(__self__, "resources_to_delete", resources_to_delete)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        LastTransitionTime is the time when this status last changed.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the SyncSet or SelectorSyncSet.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> int:
        """
        ObservedGeneration is the generation of the SyncSet or SelectorSyncSet that was last observed.
        """
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter
    def result(self) -> str:
        """
        Result is the result of the last attempt to apply the SyncSet or SelectorSyncSet to the cluster.
        """
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="failureMessage")
    def failure_message(self) -> Optional[str]:
        """
        FailureMessage is a message describing why the SyncSet or SelectorSyncSet could not be applied. This is only set when Result is Failure.
        """
        return pulumi.get(self, "failure_message")

    @property
    @pulumi.getter(name="firstSuccessTime")
    def first_success_time(self) -> Optional[str]:
        """
        FirstSuccessTime is the time when the SyncSet or SelectorSyncSet was first successfully applied to the cluster.
        """
        return pulumi.get(self, "first_success_time")

    @property
    @pulumi.getter(name="resourcesToDelete")
    def resources_to_delete(self) -> Optional[Sequence['outputs.ClusterSyncStatusSyncSetsResourcesToDelete']]:
        """
        ResourcesToDelete is the list of resources in the cluster that should be deleted when the SyncSet or SelectorSyncSet is deleted or is no longer matched to the cluster.
        """
        return pulumi.get(self, "resources_to_delete")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterSyncStatusSyncSetsResourcesToDelete(dict):
    """
    SyncResourceReference is a reference to a resource that is synced to a cluster via a SyncSet or SelectorSyncSet.
    """
    def __init__(__self__, *,
                 api_version: str,
                 name: str,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        SyncResourceReference is a reference to a resource that is synced to a cluster via a SyncSet or SelectorSyncSet.
        :param str api_version: APIVersion is the Group and Version of the resource.
        :param str name: Name is the name of the resource.
        :param str kind: Kind is the Kind of the resource.
        :param str namespace: Namespace is the namespace of the resource.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "name", name)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        APIVersion is the Group and Version of the resource.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is the Kind of the resource.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the resource.
        """
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'ClusterSyncLeaseSpecArgs',
    'ClusterSyncStatusArgs',
    'ClusterSyncStatusConditionsArgs',
    'ClusterSyncStatusSelectorSyncSetsArgs',
    'ClusterSyncStatusSelectorSyncSetsResourcesToDeleteArgs',
    'ClusterSyncStatusSyncSetsArgs',
    'ClusterSyncStatusSyncSetsResourcesToDeleteArgs',
]

@pulumi.input_type
class ClusterSyncLeaseSpecArgs:
    def __init__(__self__, *,
                 renew_time: pulumi.Input[str]):
        """
        ClusterSyncLeaseSpec is the specification of a ClusterSyncLease.
        :param pulumi.Input[str] renew_time: RenewTime is the time when SyncSets and SelectorSyncSets were last applied to the cluster.
        """
        pulumi.set(__self__, "renew_time", renew_time)

    @property
    @pulumi.getter(name="renewTime")
    def renew_time(self) -> pulumi.Input[str]:
        """
        RenewTime is the time when SyncSets and SelectorSyncSets were last applied to the cluster.
        """
        return pulumi.get(self, "renew_time")

    @renew_time.setter
    def renew_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "renew_time", value)


@pulumi.input_type
class ClusterSyncStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusConditionsArgs']]]] = None,
                 first_success_time: Optional[pulumi.Input[str]] = None,
                 selector_sync_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusSelectorSyncSetsArgs']]]] = None,
                 sync_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusSyncSetsArgs']]]] = None):
        """
        ClusterSyncStatus defines the observed state of ClusterSync
        :param pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusConditionsArgs']]] conditions: Conditions is a list of conditions associated with syncing to the cluster.
        :param pulumi.Input[str] first_success_time: FirstSuccessTime is the time we first successfully applied all (selector)syncsets to a cluster.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusSelectorSyncSetsArgs']]] selector_sync_sets: SelectorSyncSets is the sync status of all of the SelectorSyncSets for the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusSyncSetsArgs']]] sync_sets: SyncSets is the sync status of all of the SyncSets for the cluster.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if first_success_time is not None:
            pulumi.set(__self__, "first_success_time", first_success_time)
        if selector_sync_sets is not None:
            pulumi.set(__self__, "selector_sync_sets", selector_sync_sets)
        if sync_sets is not None:
            pulumi.set(__self__, "sync_sets", sync_sets)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusConditionsArgs']]]]:
        """
        Conditions is a list of conditions associated with syncing to the cluster.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="firstSuccessTime")
    def first_success_time(self) -> Optional[pulumi.Input[str]]:
        """
        FirstSuccessTime is the time we first successfully applied all (selector)syncsets to a cluster.
        """
        return pulumi.get(self, "first_success_time")

    @first_success_time.setter
    def first_success_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_success_time", value)

    @property
    @pulumi.getter(name="selectorSyncSets")
    def selector_sync_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusSelectorSyncSetsArgs']]]]:
        """
        SelectorSyncSets is the sync status of all of the SelectorSyncSets for the cluster.
        """
        return pulumi.get(self, "selector_sync_sets")

    @selector_sync_sets.setter
    def selector_sync_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusSelectorSyncSetsArgs']]]]):
        pulumi.set(self, "selector_sync_sets", value)

    @property
    @pulumi.getter(name="syncSets")
    def sync_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusSyncSetsArgs']]]]:
        """
        SyncSets is the sync status of all of the SyncSets for the cluster.
        """
        return pulumi.get(self, "sync_sets")

    @sync_sets.setter
    def sync_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusSyncSetsArgs']]]]):
        pulumi.set(self, "sync_sets", value)


@pulumi.input_type
class ClusterSyncStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_probe_time: Optional[pulumi.Input[str]] = None,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        ClusterSyncCondition contains details for the current condition of a ClusterSync
        :param pulumi.Input[str] status: Status is the status of the condition.
        :param pulumi.Input[str] type: Type is the type of the condition.
        :param pulumi.Input[str] last_probe_time: LastProbeTime is the last time we probed the condition.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: Message is a human-readable message indicating details about the last transition.
        :param pulumi.Input[str] reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @last_probe_time.setter
    def last_probe_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_probe_time", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human-readable message indicating details about the last transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class ClusterSyncStatusSelectorSyncSetsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 name: pulumi.Input[str],
                 observed_generation: pulumi.Input[int],
                 result: pulumi.Input[str],
                 failure_message: Optional[pulumi.Input[str]] = None,
                 first_success_time: Optional[pulumi.Input[str]] = None,
                 resources_to_delete: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusSelectorSyncSetsResourcesToDeleteArgs']]]] = None):
        """
        SyncStatus is the status of applying a specific SyncSet or SelectorSyncSet to the cluster.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the time when this status last changed.
        :param pulumi.Input[str] name: Name is the name of the SyncSet or SelectorSyncSet.
        :param pulumi.Input[int] observed_generation: ObservedGeneration is the generation of the SyncSet or SelectorSyncSet that was last observed.
        :param pulumi.Input[str] result: Result is the result of the last attempt to apply the SyncSet or SelectorSyncSet to the cluster.
        :param pulumi.Input[str] failure_message: FailureMessage is a message describing why the SyncSet or SelectorSyncSet could not be applied. This is only set when Result is Failure.
        :param pulumi.Input[str] first_success_time: FirstSuccessTime is the time when the SyncSet or SelectorSyncSet was first successfully applied to the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusSelectorSyncSetsResourcesToDeleteArgs']]] resources_to_delete: ResourcesToDelete is the list of resources in the cluster that should be deleted when the SyncSet or SelectorSyncSet is deleted or is no longer matched to the cluster.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "observed_generation", observed_generation)
        pulumi.set(__self__, "result", result)
        if failure_message is not None:
            pulumi.set(__self__, "failure_message", failure_message)
        if first_success_time is not None:
            pulumi.set(__self__, "first_success_time", first_success_time)
        if resources_to_delete is not None:
            pulumi.set(__self__, "resources_to_delete", resources_to_delete)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        LastTransitionTime is the time when this status last changed.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the SyncSet or SelectorSyncSet.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> pulumi.Input[int]:
        """
        ObservedGeneration is the generation of the SyncSet or SelectorSyncSet that was last observed.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: pulumi.Input[int]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter
    def result(self) -> pulumi.Input[str]:
        """
        Result is the result of the last attempt to apply the SyncSet or SelectorSyncSet to the cluster.
        """
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: pulumi.Input[str]):
        pulumi.set(self, "result", value)

    @property
    @pulumi.getter(name="failureMessage")
    def failure_message(self) -> Optional[pulumi.Input[str]]:
        """
        FailureMessage is a message describing why the SyncSet or SelectorSyncSet could not be applied. This is only set when Result is Failure.
        """
        return pulumi.get(self, "failure_message")

    @failure_message.setter
    def failure_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_message", value)

    @property
    @pulumi.getter(name="firstSuccessTime")
    def first_success_time(self) -> Optional[pulumi.Input[str]]:
        """
        FirstSuccessTime is the time when the SyncSet or SelectorSyncSet was first successfully applied to the cluster.
        """
        return pulumi.get(self, "first_success_time")

    @first_success_time.setter
    def first_success_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_success_time", value)

    @property
    @pulumi.getter(name="resourcesToDelete")
    def resources_to_delete(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusSelectorSyncSetsResourcesToDeleteArgs']]]]:
        """
        ResourcesToDelete is the list of resources in the cluster that should be deleted when the SyncSet or SelectorSyncSet is deleted or is no longer matched to the cluster.
        """
        return pulumi.get(self, "resources_to_delete")

    @resources_to_delete.setter
    def resources_to_delete(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusSelectorSyncSetsResourcesToDeleteArgs']]]]):
        pulumi.set(self, "resources_to_delete", value)


@pulumi.input_type
class ClusterSyncStatusSelectorSyncSetsResourcesToDeleteArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 name: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SyncResourceReference is a reference to a resource that is synced to a cluster via a SyncSet or SelectorSyncSet.
        :param pulumi.Input[str] api_version: APIVersion is the Group and Version of the resource.
        :param pulumi.Input[str] name: Name is the name of the resource.
        :param pulumi.Input[str] kind: Kind is the Kind of the resource.
        :param pulumi.Input[str] namespace: Namespace is the namespace of the resource.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "name", name)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion is the Group and Version of the resource.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is the Kind of the resource.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace of the resource.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ClusterSyncStatusSyncSetsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 name: pulumi.Input[str],
                 observed_generation: pulumi.Input[int],
                 result: pulumi.Input[str],
                 failure_message: Optional[pulumi.Input[str]] = None,
                 first_success_time: Optional[pulumi.Input[str]] = None,
                 resources_to_delete: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusSyncSetsResourcesToDeleteArgs']]]] = None):
        """
        SyncStatus is the status of applying a specific SyncSet or SelectorSyncSet to the cluster.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the time when this status last changed.
        :param pulumi.Input[str] name: Name is the name of the SyncSet or SelectorSyncSet.
        :param pulumi.Input[int] observed_generation: ObservedGeneration is the generation of the SyncSet or SelectorSyncSet that was last observed.
        :param pulumi.Input[str] result: Result is the result of the last attempt to apply the SyncSet or SelectorSyncSet to the cluster.
        :param pulumi.Input[str] failure_message: FailureMessage is a message describing why the SyncSet or SelectorSyncSet could not be applied. This is only set when Result is Failure.
        :param pulumi.Input[str] first_success_time: FirstSuccessTime is the time when the SyncSet or SelectorSyncSet was first successfully applied to the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusSyncSetsResourcesToDeleteArgs']]] resources_to_delete: ResourcesToDelete is the list of resources in the cluster that should be deleted when the SyncSet or SelectorSyncSet is deleted or is no longer matched to the cluster.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "observed_generation", observed_generation)
        pulumi.set(__self__, "result", result)
        if failure_message is not None:
            pulumi.set(__self__, "failure_message", failure_message)
        if first_success_time is not None:
            pulumi.set(__self__, "first_success_time", first_success_time)
        if resources_to_delete is not None:
            pulumi.set(__self__, "resources_to_delete", resources_to_delete)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        LastTransitionTime is the time when this status last changed.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the SyncSet or SelectorSyncSet.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> pulumi.Input[int]:
        """
        ObservedGeneration is the generation of the SyncSet or SelectorSyncSet that was last observed.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: pulumi.Input[int]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter
    def result(self) -> pulumi.Input[str]:
        """
        Result is the result of the last attempt to apply the SyncSet or SelectorSyncSet to the cluster.
        """
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: pulumi.Input[str]):
        pulumi.set(self, "result", value)

    @property
    @pulumi.getter(name="failureMessage")
    def failure_message(self) -> Optional[pulumi.Input[str]]:
        """
        FailureMessage is a message describing why the SyncSet or SelectorSyncSet could not be applied. This is only set when Result is Failure.
        """
        return pulumi.get(self, "failure_message")

    @failure_message.setter
    def failure_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_message", value)

    @property
    @pulumi.getter(name="firstSuccessTime")
    def first_success_time(self) -> Optional[pulumi.Input[str]]:
        """
        FirstSuccessTime is the time when the SyncSet or SelectorSyncSet was first successfully applied to the cluster.
        """
        return pulumi.get(self, "first_success_time")

    @first_success_time.setter
    def first_success_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_success_time", value)

    @property
    @pulumi.getter(name="resourcesToDelete")
    def resources_to_delete(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusSyncSetsResourcesToDeleteArgs']]]]:
        """
        ResourcesToDelete is the list of resources in the cluster that should be deleted when the SyncSet or SelectorSyncSet is deleted or is no longer matched to the cluster.
        """
        return pulumi.get(self, "resources_to_delete")

    @resources_to_delete.setter
    def resources_to_delete(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterSyncStatusSyncSetsResourcesToDeleteArgs']]]]):
        pulumi.set(self, "resources_to_delete", value)


@pulumi.input_type
class ClusterSyncStatusSyncSetsResourcesToDeleteArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 name: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SyncResourceReference is a reference to a resource that is synced to a cluster via a SyncSet or SelectorSyncSet.
        :param pulumi.Input[str] api_version: APIVersion is the Group and Version of the resource.
        :param pulumi.Input[str] name: Name is the name of the resource.
        :param pulumi.Input[str] kind: Kind is the Kind of the resource.
        :param pulumi.Input[str] namespace: Namespace is the namespace of the resource.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "name", name)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion is the Group and Version of the resource.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is the Kind of the resource.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace of the resource.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'CheckpointSpecArgs',
    'CheckpointSpecLastBackupRefArgs',
    'ClusterClaimSpecArgs',
    'ClusterClaimSpecSubjectsArgs',
    'ClusterClaimStatusArgs',
    'ClusterClaimStatusConditionsArgs',
    'ClusterDeploymentSpecArgs',
    'ClusterDeploymentSpecCertificateBundlesArgs',
    'ClusterDeploymentSpecCertificateBundlesCertificateSecretRefArgs',
    'ClusterDeploymentSpecClusterMetadataArgs',
    'ClusterDeploymentSpecClusterMetadataAdminKubeconfigSecretRefArgs',
    'ClusterDeploymentSpecClusterMetadataAdminPasswordSecretRefArgs',
    'ClusterDeploymentSpecClusterPoolRefArgs',
    'ClusterDeploymentSpecControlPlaneConfigArgs',
    'ClusterDeploymentSpecControlPlaneConfigServingCertificatesArgs',
    'ClusterDeploymentSpecControlPlaneConfigServingCertificatesAdditionalArgs',
    'ClusterDeploymentSpecIngressArgs',
    'ClusterDeploymentSpecIngressNamespaceSelectorArgs',
    'ClusterDeploymentSpecIngressNamespaceSelectorMatchExpressionsArgs',
    'ClusterDeploymentSpecIngressRouteSelectorArgs',
    'ClusterDeploymentSpecIngressRouteSelectorMatchExpressionsArgs',
    'ClusterDeploymentSpecPlatformArgs',
    'ClusterDeploymentSpecPlatformAwsArgs',
    'ClusterDeploymentSpecPlatformAwsCredentialsSecretRefArgs',
    'ClusterDeploymentSpecPlatformAzureArgs',
    'ClusterDeploymentSpecPlatformAzureCredentialsSecretRefArgs',
    'ClusterDeploymentSpecPlatformBaremetalArgs',
    'ClusterDeploymentSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRefArgs',
    'ClusterDeploymentSpecPlatformGcpArgs',
    'ClusterDeploymentSpecPlatformGcpCredentialsSecretRefArgs',
    'ClusterDeploymentSpecPlatformOpenstackArgs',
    'ClusterDeploymentSpecPlatformOpenstackCredentialsSecretRefArgs',
    'ClusterDeploymentSpecPlatformOvirtArgs',
    'ClusterDeploymentSpecPlatformOvirtCertificatesSecretRefArgs',
    'ClusterDeploymentSpecPlatformOvirtCredentialsSecretRefArgs',
    'ClusterDeploymentSpecPlatformVsphereArgs',
    'ClusterDeploymentSpecPlatformVsphereCertificatesSecretRefArgs',
    'ClusterDeploymentSpecPlatformVsphereCredentialsSecretRefArgs',
    'ClusterDeploymentSpecProvisioningArgs',
    'ClusterDeploymentSpecProvisioningImageSetRefArgs',
    'ClusterDeploymentSpecProvisioningInstallConfigSecretRefArgs',
    'ClusterDeploymentSpecProvisioningInstallerEnvArgs',
    'ClusterDeploymentSpecProvisioningInstallerEnvValueFromArgs',
    'ClusterDeploymentSpecProvisioningInstallerEnvValueFromConfigMapKeyRefArgs',
    'ClusterDeploymentSpecProvisioningInstallerEnvValueFromFieldRefArgs',
    'ClusterDeploymentSpecProvisioningInstallerEnvValueFromResourceFieldRefArgs',
    'ClusterDeploymentSpecProvisioningInstallerEnvValueFromSecretKeyRefArgs',
    'ClusterDeploymentSpecProvisioningManifestsConfigMapRefArgs',
    'ClusterDeploymentSpecProvisioningSshPrivateKeySecretRefArgs',
    'ClusterDeploymentSpecPullSecretRefArgs',
    'ClusterDeploymentStatusArgs',
    'ClusterDeploymentStatusCertificateBundlesArgs',
    'ClusterDeploymentStatusClusterVersionStatusArgs',
    'ClusterDeploymentStatusClusterVersionStatusAvailableUpdatesArgs',
    'ClusterDeploymentStatusClusterVersionStatusConditionsArgs',
    'ClusterDeploymentStatusClusterVersionStatusDesiredArgs',
    'ClusterDeploymentStatusClusterVersionStatusHistoryArgs',
    'ClusterDeploymentStatusConditionsArgs',
    'ClusterDeploymentStatusProvisionRefArgs',
    'ClusterDeprovisionSpecArgs',
    'ClusterDeprovisionSpecPlatformArgs',
    'ClusterDeprovisionSpecPlatformAwsArgs',
    'ClusterDeprovisionSpecPlatformAwsCredentialsSecretRefArgs',
    'ClusterDeprovisionSpecPlatformAzureArgs',
    'ClusterDeprovisionSpecPlatformAzureCredentialsSecretRefArgs',
    'ClusterDeprovisionSpecPlatformGcpArgs',
    'ClusterDeprovisionSpecPlatformGcpCredentialsSecretRefArgs',
    'ClusterDeprovisionSpecPlatformOpenstackArgs',
    'ClusterDeprovisionSpecPlatformOpenstackCredentialsSecretRefArgs',
    'ClusterDeprovisionSpecPlatformOvirtArgs',
    'ClusterDeprovisionSpecPlatformOvirtCertificatesSecretRefArgs',
    'ClusterDeprovisionSpecPlatformOvirtCredentialsSecretRefArgs',
    'ClusterDeprovisionSpecPlatformVsphereArgs',
    'ClusterDeprovisionSpecPlatformVsphereCertificatesSecretRefArgs',
    'ClusterDeprovisionSpecPlatformVsphereCredentialsSecretRefArgs',
    'ClusterDeprovisionStatusArgs',
    'ClusterImageSetSpecArgs',
    'ClusterPoolSpecArgs',
    'ClusterPoolSpecImageSetRefArgs',
    'ClusterPoolSpecPlatformArgs',
    'ClusterPoolSpecPlatformAwsArgs',
    'ClusterPoolSpecPlatformAwsCredentialsSecretRefArgs',
    'ClusterPoolSpecPlatformAzureArgs',
    'ClusterPoolSpecPlatformAzureCredentialsSecretRefArgs',
    'ClusterPoolSpecPlatformBaremetalArgs',
    'ClusterPoolSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRefArgs',
    'ClusterPoolSpecPlatformGcpArgs',
    'ClusterPoolSpecPlatformGcpCredentialsSecretRefArgs',
    'ClusterPoolSpecPlatformOpenstackArgs',
    'ClusterPoolSpecPlatformOpenstackCredentialsSecretRefArgs',
    'ClusterPoolSpecPlatformOvirtArgs',
    'ClusterPoolSpecPlatformOvirtCertificatesSecretRefArgs',
    'ClusterPoolSpecPlatformOvirtCredentialsSecretRefArgs',
    'ClusterPoolSpecPlatformVsphereArgs',
    'ClusterPoolSpecPlatformVsphereCertificatesSecretRefArgs',
    'ClusterPoolSpecPlatformVsphereCredentialsSecretRefArgs',
    'ClusterPoolSpecPullSecretRefArgs',
    'ClusterPoolStatusArgs',
    'ClusterPoolStatusConditionsArgs',
    'ClusterProvisionSpecArgs',
    'ClusterProvisionSpecAdminKubeconfigSecretRefArgs',
    'ClusterProvisionSpecAdminPasswordSecretRefArgs',
    'ClusterProvisionSpecClusterDeploymentRefArgs',
    'ClusterProvisionSpecPodSpecArgs',
    'ClusterProvisionSpecPodSpecAffinityArgs',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityArgs',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs',
    'ClusterProvisionSpecPodSpecAffinityPodAffinityArgs',
    'ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs',
    'ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs',
    'ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs',
    'ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs',
    'ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs',
    'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityArgs',
    'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs',
    'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs',
    'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs',
    'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs',
    'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs',
    'ClusterProvisionSpecPodSpecContainersArgs',
    'ClusterProvisionSpecPodSpecContainersEnvArgs',
    'ClusterProvisionSpecPodSpecContainersEnvFromArgs',
    'ClusterProvisionSpecPodSpecContainersEnvFromConfigMapRefArgs',
    'ClusterProvisionSpecPodSpecContainersEnvFromSecretRefArgs',
    'ClusterProvisionSpecPodSpecContainersEnvValueFromArgs',
    'ClusterProvisionSpecPodSpecContainersEnvValueFromConfigMapKeyRefArgs',
    'ClusterProvisionSpecPodSpecContainersEnvValueFromFieldRefArgs',
    'ClusterProvisionSpecPodSpecContainersEnvValueFromResourceFieldRefArgs',
    'ClusterProvisionSpecPodSpecContainersEnvValueFromSecretKeyRefArgs',
    'ClusterProvisionSpecPodSpecContainersLifecycleArgs',
    'ClusterProvisionSpecPodSpecContainersLifecyclePostStartArgs',
    'ClusterProvisionSpecPodSpecContainersLifecyclePostStartExecArgs',
    'ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetArgs',
    'ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs',
    'ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetPortArgs',
    'ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketArgs',
    'ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketPortArgs',
    'ClusterProvisionSpecPodSpecContainersLifecyclePreStopArgs',
    'ClusterProvisionSpecPodSpecContainersLifecyclePreStopExecArgs',
    'ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetArgs',
    'ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs',
    'ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetPortArgs',
    'ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketArgs',
    'ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketPortArgs',
    'ClusterProvisionSpecPodSpecContainersLivenessProbeArgs',
    'ClusterProvisionSpecPodSpecContainersLivenessProbeExecArgs',
    'ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetArgs',
    'ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetHttpHeadersArgs',
    'ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetPortArgs',
    'ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketArgs',
    'ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketPortArgs',
    'ClusterProvisionSpecPodSpecContainersPortsArgs',
    'ClusterProvisionSpecPodSpecContainersReadinessProbeArgs',
    'ClusterProvisionSpecPodSpecContainersReadinessProbeExecArgs',
    'ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetArgs',
    'ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetHttpHeadersArgs',
    'ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetPortArgs',
    'ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketArgs',
    'ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketPortArgs',
    'ClusterProvisionSpecPodSpecContainersResourcesArgs',
    'ClusterProvisionSpecPodSpecContainersSecurityContextArgs',
    'ClusterProvisionSpecPodSpecContainersSecurityContextCapabilitiesArgs',
    'ClusterProvisionSpecPodSpecContainersSecurityContextSeLinuxOptionsArgs',
    'ClusterProvisionSpecPodSpecContainersSecurityContextWindowsOptionsArgs',
    'ClusterProvisionSpecPodSpecContainersStartupProbeArgs',
    'ClusterProvisionSpecPodSpecContainersStartupProbeExecArgs',
    'ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetArgs',
    'ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetHttpHeadersArgs',
    'ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetPortArgs',
    'ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketArgs',
    'ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketPortArgs',
    'ClusterProvisionSpecPodSpecContainersVolumeDevicesArgs',
    'ClusterProvisionSpecPodSpecContainersVolumeMountsArgs',
    'ClusterProvisionSpecPodSpecDnsConfigArgs',
    'ClusterProvisionSpecPodSpecDnsConfigOptionsArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvFromArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvFromConfigMapRefArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvFromSecretRefArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromFieldRefArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRefArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRefArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecycleArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartExecArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPortArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPortArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopExecArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPortArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPortArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeExecArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetPortArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPortArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersPortsArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeExecArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetPortArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPortArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersResourcesArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextCapabilitiesArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextWindowsOptionsArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeExecArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetPortArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketPortArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersVolumeDevicesArgs',
    'ClusterProvisionSpecPodSpecEphemeralContainersVolumeMountsArgs',
    'ClusterProvisionSpecPodSpecHostAliasesArgs',
    'ClusterProvisionSpecPodSpecImagePullSecretsArgs',
    'ClusterProvisionSpecPodSpecInitContainersArgs',
    'ClusterProvisionSpecPodSpecInitContainersEnvArgs',
    'ClusterProvisionSpecPodSpecInitContainersEnvFromArgs',
    'ClusterProvisionSpecPodSpecInitContainersEnvFromConfigMapRefArgs',
    'ClusterProvisionSpecPodSpecInitContainersEnvFromSecretRefArgs',
    'ClusterProvisionSpecPodSpecInitContainersEnvValueFromArgs',
    'ClusterProvisionSpecPodSpecInitContainersEnvValueFromConfigMapKeyRefArgs',
    'ClusterProvisionSpecPodSpecInitContainersEnvValueFromFieldRefArgs',
    'ClusterProvisionSpecPodSpecInitContainersEnvValueFromResourceFieldRefArgs',
    'ClusterProvisionSpecPodSpecInitContainersEnvValueFromSecretKeyRefArgs',
    'ClusterProvisionSpecPodSpecInitContainersLifecycleArgs',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartArgs',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartExecArgs',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetArgs',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetPortArgs',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketArgs',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketPortArgs',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopArgs',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopExecArgs',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetArgs',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetPortArgs',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketArgs',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketPortArgs',
    'ClusterProvisionSpecPodSpecInitContainersLivenessProbeArgs',
    'ClusterProvisionSpecPodSpecInitContainersLivenessProbeExecArgs',
    'ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetArgs',
    'ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs',
    'ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetPortArgs',
    'ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketArgs',
    'ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketPortArgs',
    'ClusterProvisionSpecPodSpecInitContainersPortsArgs',
    'ClusterProvisionSpecPodSpecInitContainersReadinessProbeArgs',
    'ClusterProvisionSpecPodSpecInitContainersReadinessProbeExecArgs',
    'ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetArgs',
    'ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs',
    'ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetPortArgs',
    'ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketArgs',
    'ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketPortArgs',
    'ClusterProvisionSpecPodSpecInitContainersResourcesArgs',
    'ClusterProvisionSpecPodSpecInitContainersSecurityContextArgs',
    'ClusterProvisionSpecPodSpecInitContainersSecurityContextCapabilitiesArgs',
    'ClusterProvisionSpecPodSpecInitContainersSecurityContextSeLinuxOptionsArgs',
    'ClusterProvisionSpecPodSpecInitContainersSecurityContextWindowsOptionsArgs',
    'ClusterProvisionSpecPodSpecInitContainersStartupProbeArgs',
    'ClusterProvisionSpecPodSpecInitContainersStartupProbeExecArgs',
    'ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetArgs',
    'ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetHttpHeadersArgs',
    'ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetPortArgs',
    'ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketArgs',
    'ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketPortArgs',
    'ClusterProvisionSpecPodSpecInitContainersVolumeDevicesArgs',
    'ClusterProvisionSpecPodSpecInitContainersVolumeMountsArgs',
    'ClusterProvisionSpecPodSpecReadinessGatesArgs',
    'ClusterProvisionSpecPodSpecSecurityContextArgs',
    'ClusterProvisionSpecPodSpecSecurityContextSeLinuxOptionsArgs',
    'ClusterProvisionSpecPodSpecSecurityContextSysctlsArgs',
    'ClusterProvisionSpecPodSpecSecurityContextWindowsOptionsArgs',
    'ClusterProvisionSpecPodSpecTolerationsArgs',
    'ClusterProvisionSpecPodSpecTopologySpreadConstraintsArgs',
    'ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorArgs',
    'ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs',
    'ClusterProvisionSpecPodSpecVolumesArgs',
    'ClusterProvisionSpecPodSpecVolumesAwsElasticBlockStoreArgs',
    'ClusterProvisionSpecPodSpecVolumesAzureDiskArgs',
    'ClusterProvisionSpecPodSpecVolumesAzureFileArgs',
    'ClusterProvisionSpecPodSpecVolumesCephfsArgs',
    'ClusterProvisionSpecPodSpecVolumesCephfsSecretRefArgs',
    'ClusterProvisionSpecPodSpecVolumesCinderArgs',
    'ClusterProvisionSpecPodSpecVolumesCinderSecretRefArgs',
    'ClusterProvisionSpecPodSpecVolumesConfigMapArgs',
    'ClusterProvisionSpecPodSpecVolumesConfigMapItemsArgs',
    'ClusterProvisionSpecPodSpecVolumesCsiArgs',
    'ClusterProvisionSpecPodSpecVolumesCsiNodePublishSecretRefArgs',
    'ClusterProvisionSpecPodSpecVolumesDownwardAPIArgs',
    'ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsArgs',
    'ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsFieldRefArgs',
    'ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsResourceFieldRefArgs',
    'ClusterProvisionSpecPodSpecVolumesEmptyDirArgs',
    'ClusterProvisionSpecPodSpecVolumesFcArgs',
    'ClusterProvisionSpecPodSpecVolumesFlexVolumeArgs',
    'ClusterProvisionSpecPodSpecVolumesFlexVolumeSecretRefArgs',
    'ClusterProvisionSpecPodSpecVolumesFlockerArgs',
    'ClusterProvisionSpecPodSpecVolumesGcePersistentDiskArgs',
    'ClusterProvisionSpecPodSpecVolumesGitRepoArgs',
    'ClusterProvisionSpecPodSpecVolumesGlusterfsArgs',
    'ClusterProvisionSpecPodSpecVolumesHostPathArgs',
    'ClusterProvisionSpecPodSpecVolumesIscsiArgs',
    'ClusterProvisionSpecPodSpecVolumesIscsiSecretRefArgs',
    'ClusterProvisionSpecPodSpecVolumesNfsArgs',
    'ClusterProvisionSpecPodSpecVolumesPersistentVolumeClaimArgs',
    'ClusterProvisionSpecPodSpecVolumesPhotonPersistentDiskArgs',
    'ClusterProvisionSpecPodSpecVolumesPortworxVolumeArgs',
    'ClusterProvisionSpecPodSpecVolumesProjectedArgs',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesArgs',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapArgs',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapItemsArgs',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIArgs',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsArgs',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretArgs',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretItemsArgs',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesServiceAccountTokenArgs',
    'ClusterProvisionSpecPodSpecVolumesQuobyteArgs',
    'ClusterProvisionSpecPodSpecVolumesRbdArgs',
    'ClusterProvisionSpecPodSpecVolumesRbdSecretRefArgs',
    'ClusterProvisionSpecPodSpecVolumesScaleIOArgs',
    'ClusterProvisionSpecPodSpecVolumesScaleIOSecretRefArgs',
    'ClusterProvisionSpecPodSpecVolumesSecretArgs',
    'ClusterProvisionSpecPodSpecVolumesSecretItemsArgs',
    'ClusterProvisionSpecPodSpecVolumesStorageosArgs',
    'ClusterProvisionSpecPodSpecVolumesStorageosSecretRefArgs',
    'ClusterProvisionSpecPodSpecVolumesVsphereVolumeArgs',
    'ClusterProvisionStatusArgs',
    'ClusterProvisionStatusConditionsArgs',
    'ClusterProvisionStatusJobRefArgs',
    'ClusterRelocateSpecArgs',
    'ClusterRelocateSpecClusterDeploymentSelectorArgs',
    'ClusterRelocateSpecClusterDeploymentSelectorMatchExpressionsArgs',
    'ClusterRelocateSpecKubeconfigSecretRefArgs',
    'ClusterStateStatusArgs',
    'ClusterStateStatusClusterOperatorsArgs',
    'ClusterStateStatusClusterOperatorsConditionsArgs',
    'DNSZoneSpecArgs',
    'DNSZoneSpecAwsArgs',
    'DNSZoneSpecAwsAdditionalTagsArgs',
    'DNSZoneSpecAwsCredentialsSecretRefArgs',
    'DNSZoneSpecAzureArgs',
    'DNSZoneSpecAzureCredentialsSecretRefArgs',
    'DNSZoneSpecGcpArgs',
    'DNSZoneSpecGcpCredentialsSecretRefArgs',
    'DNSZoneStatusArgs',
    'DNSZoneStatusAwsArgs',
    'DNSZoneStatusConditionsArgs',
    'DNSZoneStatusGcpArgs',
    'HiveConfigSpecArgs',
    'HiveConfigSpecAdditionalCertificateAuthoritiesSecretRefArgs',
    'HiveConfigSpecBackupArgs',
    'HiveConfigSpecBackupVeleroArgs',
    'HiveConfigSpecFailedProvisionConfigArgs',
    'HiveConfigSpecGlobalPullSecretRefArgs',
    'HiveConfigSpecManagedDomainsArgs',
    'HiveConfigSpecManagedDomainsAwsArgs',
    'HiveConfigSpecManagedDomainsAwsCredentialsSecretRefArgs',
    'HiveConfigSpecManagedDomainsAzureArgs',
    'HiveConfigSpecManagedDomainsAzureCredentialsSecretRefArgs',
    'HiveConfigSpecManagedDomainsGcpArgs',
    'HiveConfigSpecManagedDomainsGcpCredentialsSecretRefArgs',
    'HiveConfigStatusArgs',
    'MachinePoolSpecArgs',
    'MachinePoolSpecAutoscalingArgs',
    'MachinePoolSpecClusterDeploymentRefArgs',
    'MachinePoolSpecPlatformArgs',
    'MachinePoolSpecPlatformAwsArgs',
    'MachinePoolSpecPlatformAwsRootVolumeArgs',
    'MachinePoolSpecPlatformAwsSpotMarketOptionsArgs',
    'MachinePoolSpecPlatformAzureArgs',
    'MachinePoolSpecPlatformAzureOsDiskArgs',
    'MachinePoolSpecPlatformGcpArgs',
    'MachinePoolSpecPlatformOpenstackArgs',
    'MachinePoolSpecPlatformOpenstackRootVolumeArgs',
    'MachinePoolSpecPlatformOvirtArgs',
    'MachinePoolSpecPlatformOvirtCpuArgs',
    'MachinePoolSpecPlatformOvirtOsDiskArgs',
    'MachinePoolSpecPlatformVsphereArgs',
    'MachinePoolSpecPlatformVsphereOsDiskArgs',
    'MachinePoolSpecTaintsArgs',
    'MachinePoolStatusArgs',
    'MachinePoolStatusConditionsArgs',
    'MachinePoolStatusMachineSetsArgs',
    'SelectorSyncIdentityProviderSpecArgs',
    'SelectorSyncIdentityProviderSpecClusterDeploymentSelectorArgs',
    'SelectorSyncIdentityProviderSpecClusterDeploymentSelectorMatchExpressionsArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthCaArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCertArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKeyArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersGithubArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersGithubCaArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersGithubClientSecretArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersGitlabArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersGitlabCaArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersGitlabClientSecretArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersGoogleArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersGoogleClientSecretArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdFileDataArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneCaArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCertArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKeyArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersLdapArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersLdapAttributesArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersLdapBindPasswordArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersLdapCaArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDCaArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClaimsArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClientSecretArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderArgs',
    'SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderCaArgs',
    'SelectorSyncSetSpecArgs',
    'SelectorSyncSetSpecClusterDeploymentSelectorArgs',
    'SelectorSyncSetSpecClusterDeploymentSelectorMatchExpressionsArgs',
    'SelectorSyncSetSpecPatchesArgs',
    'SelectorSyncSetSpecSecretMappingsArgs',
    'SelectorSyncSetSpecSecretMappingsSourceRefArgs',
    'SelectorSyncSetSpecSecretMappingsTargetRefArgs',
    'SyncIdentityProviderSpecArgs',
    'SyncIdentityProviderSpecClusterDeploymentRefsArgs',
    'SyncIdentityProviderSpecIdentityProvidersArgs',
    'SyncIdentityProviderSpecIdentityProvidersBasicAuthArgs',
    'SyncIdentityProviderSpecIdentityProvidersBasicAuthCaArgs',
    'SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCertArgs',
    'SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKeyArgs',
    'SyncIdentityProviderSpecIdentityProvidersGithubArgs',
    'SyncIdentityProviderSpecIdentityProvidersGithubCaArgs',
    'SyncIdentityProviderSpecIdentityProvidersGithubClientSecretArgs',
    'SyncIdentityProviderSpecIdentityProvidersGitlabArgs',
    'SyncIdentityProviderSpecIdentityProvidersGitlabCaArgs',
    'SyncIdentityProviderSpecIdentityProvidersGitlabClientSecretArgs',
    'SyncIdentityProviderSpecIdentityProvidersGoogleArgs',
    'SyncIdentityProviderSpecIdentityProvidersGoogleClientSecretArgs',
    'SyncIdentityProviderSpecIdentityProvidersHtpasswdArgs',
    'SyncIdentityProviderSpecIdentityProvidersHtpasswdFileDataArgs',
    'SyncIdentityProviderSpecIdentityProvidersKeystoneArgs',
    'SyncIdentityProviderSpecIdentityProvidersKeystoneCaArgs',
    'SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCertArgs',
    'SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKeyArgs',
    'SyncIdentityProviderSpecIdentityProvidersLdapArgs',
    'SyncIdentityProviderSpecIdentityProvidersLdapAttributesArgs',
    'SyncIdentityProviderSpecIdentityProvidersLdapBindPasswordArgs',
    'SyncIdentityProviderSpecIdentityProvidersLdapCaArgs',
    'SyncIdentityProviderSpecIdentityProvidersOpenIDArgs',
    'SyncIdentityProviderSpecIdentityProvidersOpenIDCaArgs',
    'SyncIdentityProviderSpecIdentityProvidersOpenIDClaimsArgs',
    'SyncIdentityProviderSpecIdentityProvidersOpenIDClientSecretArgs',
    'SyncIdentityProviderSpecIdentityProvidersRequestHeaderArgs',
    'SyncIdentityProviderSpecIdentityProvidersRequestHeaderCaArgs',
    'SyncSetInstanceSpecArgs',
    'SyncSetInstanceSpecClusterDeploymentRefArgs',
    'SyncSetInstanceSpecSelectorSyncSetRefArgs',
    'SyncSetInstanceSpecSyncSetRefArgs',
    'SyncSetInstanceStatusArgs',
    'SyncSetInstanceStatusConditionsArgs',
    'SyncSetInstanceStatusPatchesArgs',
    'SyncSetInstanceStatusPatchesConditionsArgs',
    'SyncSetInstanceStatusResourcesArgs',
    'SyncSetInstanceStatusResourcesConditionsArgs',
    'SyncSetInstanceStatusSecretReferencesArgs',
    'SyncSetInstanceStatusSecretReferencesConditionsArgs',
    'SyncSetSpecArgs',
    'SyncSetSpecClusterDeploymentRefsArgs',
    'SyncSetSpecPatchesArgs',
    'SyncSetSpecSecretMappingsArgs',
    'SyncSetSpecSecretMappingsSourceRefArgs',
    'SyncSetSpecSecretMappingsTargetRefArgs',
]

@pulumi.input_type
class CheckpointSpecArgs:
    def __init__(__self__, *,
                 last_backup_checksum: pulumi.Input[str],
                 last_backup_ref: pulumi.Input['CheckpointSpecLastBackupRefArgs'],
                 last_backup_time: pulumi.Input[str]):
        """
        CheckpointSpec defines the metadata around the Hive objects state in the namespace at the time of the last backup.
        :param pulumi.Input[str] last_backup_checksum: LastBackupChecksum is the checksum of all Hive objects in the namespace at the time of the last backup.
        :param pulumi.Input['CheckpointSpecLastBackupRefArgs'] last_backup_ref: LastBackupRef is a reference to last backup object created
        :param pulumi.Input[str] last_backup_time: LastBackupTime is the last time we performed a backup of the namespace
        """
        pulumi.set(__self__, "last_backup_checksum", last_backup_checksum)
        pulumi.set(__self__, "last_backup_ref", last_backup_ref)
        pulumi.set(__self__, "last_backup_time", last_backup_time)

    @property
    @pulumi.getter(name="lastBackupChecksum")
    def last_backup_checksum(self) -> pulumi.Input[str]:
        """
        LastBackupChecksum is the checksum of all Hive objects in the namespace at the time of the last backup.
        """
        return pulumi.get(self, "last_backup_checksum")

    @last_backup_checksum.setter
    def last_backup_checksum(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_backup_checksum", value)

    @property
    @pulumi.getter(name="lastBackupRef")
    def last_backup_ref(self) -> pulumi.Input['CheckpointSpecLastBackupRefArgs']:
        """
        LastBackupRef is a reference to last backup object created
        """
        return pulumi.get(self, "last_backup_ref")

    @last_backup_ref.setter
    def last_backup_ref(self, value: pulumi.Input['CheckpointSpecLastBackupRefArgs']):
        pulumi.set(self, "last_backup_ref", value)

    @property
    @pulumi.getter(name="lastBackupTime")
    def last_backup_time(self) -> pulumi.Input[str]:
        """
        LastBackupTime is the last time we performed a backup of the namespace
        """
        return pulumi.get(self, "last_backup_time")

    @last_backup_time.setter
    def last_backup_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_backup_time", value)


@pulumi.input_type
class CheckpointSpecLastBackupRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str]):
        """
        LastBackupRef is a reference to last backup object created
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ClusterClaimSpecArgs:
    def __init__(__self__, *,
                 cluster_pool_name: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None,
                 subjects: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterClaimSpecSubjectsArgs']]]] = None):
        """
        ClusterClaimSpec defines the desired state of the ClusterClaim.
        :param pulumi.Input[str] cluster_pool_name: ClusterPoolName is the name of the cluster pool from which to claim a cluster.
        :param pulumi.Input[str] namespace: Namespace is the namespace containing the ClusterDeployment of the claimed cluster. This field will be set by the ClusterPool when the claim is assigned a cluster.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterClaimSpecSubjectsArgs']]] subjects: Subjects hold references to which to authorize access to the claimed cluster.
        """
        pulumi.set(__self__, "cluster_pool_name", cluster_pool_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if subjects is not None:
            pulumi.set(__self__, "subjects", subjects)

    @property
    @pulumi.getter(name="clusterPoolName")
    def cluster_pool_name(self) -> pulumi.Input[str]:
        """
        ClusterPoolName is the name of the cluster pool from which to claim a cluster.
        """
        return pulumi.get(self, "cluster_pool_name")

    @cluster_pool_name.setter
    def cluster_pool_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_pool_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace containing the ClusterDeployment of the claimed cluster. This field will be set by the ClusterPool when the claim is assigned a cluster.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def subjects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterClaimSpecSubjectsArgs']]]]:
        """
        Subjects hold references to which to authorize access to the claimed cluster.
        """
        return pulumi.get(self, "subjects")

    @subjects.setter
    def subjects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterClaimSpecSubjectsArgs']]]]):
        pulumi.set(self, "subjects", value)


@pulumi.input_type
class ClusterClaimSpecSubjectsArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 api_group: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
        :param pulumi.Input[str] kind: Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
        :param pulumi.Input[str] name: Name of the object being referenced.
        :param pulumi.Input[str] api_group: APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
        :param pulumi.Input[str] namespace: Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if api_group is not None:
            pulumi.set(__self__, "api_group", api_group)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the object being referenced.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="apiGroup")
    def api_group(self) -> Optional[pulumi.Input[str]]:
        """
        APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
        """
        return pulumi.get(self, "api_group")

    @api_group.setter
    def api_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_group", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ClusterClaimStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterClaimStatusConditionsArgs']]]] = None):
        """
        ClusterClaimStatus defines the observed state of ClusterClaim.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterClaimStatusConditionsArgs']]] conditions: Conditions includes more detailed status for the cluster pool.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterClaimStatusConditionsArgs']]]]:
        """
        Conditions includes more detailed status for the cluster pool.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterClaimStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ClusterClaimStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_probe_time: Optional[pulumi.Input[str]] = None,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        ClusterClaimCondition contains details for the current condition of a cluster claim.
        :param pulumi.Input[str] status: Status is the status of the condition.
        :param pulumi.Input[str] type: Type is the type of the condition.
        :param pulumi.Input[str] last_probe_time: LastProbeTime is the last time we probed the condition.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: Message is a human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @last_probe_time.setter
    def last_probe_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_probe_time", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class ClusterDeploymentSpecArgs:
    def __init__(__self__, *,
                 base_domain: pulumi.Input[str],
                 cluster_name: pulumi.Input[str],
                 platform: pulumi.Input['ClusterDeploymentSpecPlatformArgs'],
                 certificate_bundles: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecCertificateBundlesArgs']]]] = None,
                 cluster_metadata: Optional[pulumi.Input['ClusterDeploymentSpecClusterMetadataArgs']] = None,
                 cluster_pool_ref: Optional[pulumi.Input['ClusterDeploymentSpecClusterPoolRefArgs']] = None,
                 control_plane_config: Optional[pulumi.Input['ClusterDeploymentSpecControlPlaneConfigArgs']] = None,
                 ingress: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecIngressArgs']]]] = None,
                 installed: Optional[pulumi.Input[bool]] = None,
                 manage_dns: Optional[pulumi.Input[bool]] = None,
                 power_state: Optional[pulumi.Input[str]] = None,
                 preserve_on_delete: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningArgs']] = None,
                 pull_secret_ref: Optional[pulumi.Input['ClusterDeploymentSpecPullSecretRefArgs']] = None):
        """
        ClusterDeploymentSpec defines the desired state of ClusterDeployment
        :param pulumi.Input[str] base_domain: BaseDomain is the base domain to which the cluster should belong.
        :param pulumi.Input[str] cluster_name: ClusterName is the friendly name of the cluster. It is used for subdomains, some resource tagging, and other instances where a friendly name for the cluster is useful.
        :param pulumi.Input['ClusterDeploymentSpecPlatformArgs'] platform: Platform is the configuration for the specific platform upon which to perform the installation.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecCertificateBundlesArgs']]] certificate_bundles: CertificateBundles is a list of certificate bundles associated with this cluster
        :param pulumi.Input['ClusterDeploymentSpecClusterMetadataArgs'] cluster_metadata: ClusterMetadata contains metadata information about the installed cluster.
        :param pulumi.Input['ClusterDeploymentSpecClusterPoolRefArgs'] cluster_pool_ref: ClusterPoolRef is a reference to the ClusterPool that this ClusterDeployment originated from.
        :param pulumi.Input['ClusterDeploymentSpecControlPlaneConfigArgs'] control_plane_config: ControlPlaneConfig contains additional configuration for the target cluster's control plane
        :param pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecIngressArgs']]] ingress: Ingress allows defining desired clusteringress/shards to be configured on the cluster.
        :param pulumi.Input[bool] installed: Installed is true if the cluster has been installed
        :param pulumi.Input[bool] manage_dns: ManageDNS specifies whether a DNSZone should be created and managed automatically for this ClusterDeployment
        :param pulumi.Input[str] power_state: PowerState indicates whether a cluster should be running or hibernating. When omitted, PowerState defaults to the Running state.
        :param pulumi.Input[bool] preserve_on_delete: PreserveOnDelete allows the user to disconnect a cluster from Hive without deprovisioning it
        :param pulumi.Input['ClusterDeploymentSpecProvisioningArgs'] provisioning: Provisioning contains settings used only for initial cluster provisioning. May be unset in the case of adopted clusters.
        :param pulumi.Input['ClusterDeploymentSpecPullSecretRefArgs'] pull_secret_ref: PullSecretRef is the reference to the secret to use when pulling images.
        """
        pulumi.set(__self__, "base_domain", base_domain)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "platform", platform)
        if certificate_bundles is not None:
            pulumi.set(__self__, "certificate_bundles", certificate_bundles)
        if cluster_metadata is not None:
            pulumi.set(__self__, "cluster_metadata", cluster_metadata)
        if cluster_pool_ref is not None:
            pulumi.set(__self__, "cluster_pool_ref", cluster_pool_ref)
        if control_plane_config is not None:
            pulumi.set(__self__, "control_plane_config", control_plane_config)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if installed is not None:
            pulumi.set(__self__, "installed", installed)
        if manage_dns is not None:
            pulumi.set(__self__, "manage_dns", manage_dns)
        if power_state is not None:
            pulumi.set(__self__, "power_state", power_state)
        if preserve_on_delete is not None:
            pulumi.set(__self__, "preserve_on_delete", preserve_on_delete)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if pull_secret_ref is not None:
            pulumi.set(__self__, "pull_secret_ref", pull_secret_ref)

    @property
    @pulumi.getter(name="baseDomain")
    def base_domain(self) -> pulumi.Input[str]:
        """
        BaseDomain is the base domain to which the cluster should belong.
        """
        return pulumi.get(self, "base_domain")

    @base_domain.setter
    def base_domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "base_domain", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        ClusterName is the friendly name of the cluster. It is used for subdomains, some resource tagging, and other instances where a friendly name for the cluster is useful.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def platform(self) -> pulumi.Input['ClusterDeploymentSpecPlatformArgs']:
        """
        Platform is the configuration for the specific platform upon which to perform the installation.
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: pulumi.Input['ClusterDeploymentSpecPlatformArgs']):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter(name="certificateBundles")
    def certificate_bundles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecCertificateBundlesArgs']]]]:
        """
        CertificateBundles is a list of certificate bundles associated with this cluster
        """
        return pulumi.get(self, "certificate_bundles")

    @certificate_bundles.setter
    def certificate_bundles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecCertificateBundlesArgs']]]]):
        pulumi.set(self, "certificate_bundles", value)

    @property
    @pulumi.getter(name="clusterMetadata")
    def cluster_metadata(self) -> Optional[pulumi.Input['ClusterDeploymentSpecClusterMetadataArgs']]:
        """
        ClusterMetadata contains metadata information about the installed cluster.
        """
        return pulumi.get(self, "cluster_metadata")

    @cluster_metadata.setter
    def cluster_metadata(self, value: Optional[pulumi.Input['ClusterDeploymentSpecClusterMetadataArgs']]):
        pulumi.set(self, "cluster_metadata", value)

    @property
    @pulumi.getter(name="clusterPoolRef")
    def cluster_pool_ref(self) -> Optional[pulumi.Input['ClusterDeploymentSpecClusterPoolRefArgs']]:
        """
        ClusterPoolRef is a reference to the ClusterPool that this ClusterDeployment originated from.
        """
        return pulumi.get(self, "cluster_pool_ref")

    @cluster_pool_ref.setter
    def cluster_pool_ref(self, value: Optional[pulumi.Input['ClusterDeploymentSpecClusterPoolRefArgs']]):
        pulumi.set(self, "cluster_pool_ref", value)

    @property
    @pulumi.getter(name="controlPlaneConfig")
    def control_plane_config(self) -> Optional[pulumi.Input['ClusterDeploymentSpecControlPlaneConfigArgs']]:
        """
        ControlPlaneConfig contains additional configuration for the target cluster's control plane
        """
        return pulumi.get(self, "control_plane_config")

    @control_plane_config.setter
    def control_plane_config(self, value: Optional[pulumi.Input['ClusterDeploymentSpecControlPlaneConfigArgs']]):
        pulumi.set(self, "control_plane_config", value)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecIngressArgs']]]]:
        """
        Ingress allows defining desired clusteringress/shards to be configured on the cluster.
        """
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecIngressArgs']]]]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter
    def installed(self) -> Optional[pulumi.Input[bool]]:
        """
        Installed is true if the cluster has been installed
        """
        return pulumi.get(self, "installed")

    @installed.setter
    def installed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "installed", value)

    @property
    @pulumi.getter(name="manageDNS")
    def manage_dns(self) -> Optional[pulumi.Input[bool]]:
        """
        ManageDNS specifies whether a DNSZone should be created and managed automatically for this ClusterDeployment
        """
        return pulumi.get(self, "manage_dns")

    @manage_dns.setter
    def manage_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manage_dns", value)

    @property
    @pulumi.getter(name="powerState")
    def power_state(self) -> Optional[pulumi.Input[str]]:
        """
        PowerState indicates whether a cluster should be running or hibernating. When omitted, PowerState defaults to the Running state.
        """
        return pulumi.get(self, "power_state")

    @power_state.setter
    def power_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_state", value)

    @property
    @pulumi.getter(name="preserveOnDelete")
    def preserve_on_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        PreserveOnDelete allows the user to disconnect a cluster from Hive without deprovisioning it
        """
        return pulumi.get(self, "preserve_on_delete")

    @preserve_on_delete.setter
    def preserve_on_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_on_delete", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input['ClusterDeploymentSpecProvisioningArgs']]:
        """
        Provisioning contains settings used only for initial cluster provisioning. May be unset in the case of adopted clusters.
        """
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningArgs']]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter(name="pullSecretRef")
    def pull_secret_ref(self) -> Optional[pulumi.Input['ClusterDeploymentSpecPullSecretRefArgs']]:
        """
        PullSecretRef is the reference to the secret to use when pulling images.
        """
        return pulumi.get(self, "pull_secret_ref")

    @pull_secret_ref.setter
    def pull_secret_ref(self, value: Optional[pulumi.Input['ClusterDeploymentSpecPullSecretRefArgs']]):
        pulumi.set(self, "pull_secret_ref", value)


@pulumi.input_type
class ClusterDeploymentSpecCertificateBundlesArgs:
    def __init__(__self__, *,
                 certificate_secret_ref: pulumi.Input['ClusterDeploymentSpecCertificateBundlesCertificateSecretRefArgs'],
                 name: pulumi.Input[str],
                 generate: Optional[pulumi.Input[bool]] = None):
        """
        CertificateBundleSpec specifies a certificate bundle associated with a cluster deployment
        :param pulumi.Input['ClusterDeploymentSpecCertificateBundlesCertificateSecretRefArgs'] certificate_secret_ref: CertificateSecretRef is the reference to the secret that contains the certificate bundle. If the certificate bundle is to be generated, it will be generated with the name in this reference. Otherwise, it is expected that the secret should exist in the same namespace as the ClusterDeployment
        :param pulumi.Input[str] name: Name is an identifier that must be unique within the bundle and must be referenced by an ingress or by the control plane serving certs
        :param pulumi.Input[bool] generate: Generate indicates whether this bundle should have real certificates generated for it.
        """
        pulumi.set(__self__, "certificate_secret_ref", certificate_secret_ref)
        pulumi.set(__self__, "name", name)
        if generate is not None:
            pulumi.set(__self__, "generate", generate)

    @property
    @pulumi.getter(name="certificateSecretRef")
    def certificate_secret_ref(self) -> pulumi.Input['ClusterDeploymentSpecCertificateBundlesCertificateSecretRefArgs']:
        """
        CertificateSecretRef is the reference to the secret that contains the certificate bundle. If the certificate bundle is to be generated, it will be generated with the name in this reference. Otherwise, it is expected that the secret should exist in the same namespace as the ClusterDeployment
        """
        return pulumi.get(self, "certificate_secret_ref")

    @certificate_secret_ref.setter
    def certificate_secret_ref(self, value: pulumi.Input['ClusterDeploymentSpecCertificateBundlesCertificateSecretRefArgs']):
        pulumi.set(self, "certificate_secret_ref", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is an identifier that must be unique within the bundle and must be referenced by an ingress or by the control plane serving certs
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def generate(self) -> Optional[pulumi.Input[bool]]:
        """
        Generate indicates whether this bundle should have real certificates generated for it.
        """
        return pulumi.get(self, "generate")

    @generate.setter
    def generate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "generate", value)


@pulumi.input_type
class ClusterDeploymentSpecCertificateBundlesCertificateSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CertificateSecretRef is the reference to the secret that contains the certificate bundle. If the certificate bundle is to be generated, it will be generated with the name in this reference. Otherwise, it is expected that the secret should exist in the same namespace as the ClusterDeployment
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecClusterMetadataArgs:
    def __init__(__self__, *,
                 admin_kubeconfig_secret_ref: pulumi.Input['ClusterDeploymentSpecClusterMetadataAdminKubeconfigSecretRefArgs'],
                 admin_password_secret_ref: pulumi.Input['ClusterDeploymentSpecClusterMetadataAdminPasswordSecretRefArgs'],
                 cluster_id: pulumi.Input[str],
                 infra_id: pulumi.Input[str]):
        """
        ClusterMetadata contains metadata information about the installed cluster.
        :param pulumi.Input['ClusterDeploymentSpecClusterMetadataAdminKubeconfigSecretRefArgs'] admin_kubeconfig_secret_ref: AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
        :param pulumi.Input['ClusterDeploymentSpecClusterMetadataAdminPasswordSecretRefArgs'] admin_password_secret_ref: AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
        :param pulumi.Input[str] cluster_id: ClusterID is a globally unique identifier for this cluster generated during installation. Used for reporting metrics among other places.
        :param pulumi.Input[str] infra_id: InfraID is an identifier for this cluster generated during installation and used for tagging/naming resources in cloud providers.
        """
        pulumi.set(__self__, "admin_kubeconfig_secret_ref", admin_kubeconfig_secret_ref)
        pulumi.set(__self__, "admin_password_secret_ref", admin_password_secret_ref)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "infra_id", infra_id)

    @property
    @pulumi.getter(name="adminKubeconfigSecretRef")
    def admin_kubeconfig_secret_ref(self) -> pulumi.Input['ClusterDeploymentSpecClusterMetadataAdminKubeconfigSecretRefArgs']:
        """
        AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
        """
        return pulumi.get(self, "admin_kubeconfig_secret_ref")

    @admin_kubeconfig_secret_ref.setter
    def admin_kubeconfig_secret_ref(self, value: pulumi.Input['ClusterDeploymentSpecClusterMetadataAdminKubeconfigSecretRefArgs']):
        pulumi.set(self, "admin_kubeconfig_secret_ref", value)

    @property
    @pulumi.getter(name="adminPasswordSecretRef")
    def admin_password_secret_ref(self) -> pulumi.Input['ClusterDeploymentSpecClusterMetadataAdminPasswordSecretRefArgs']:
        """
        AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
        """
        return pulumi.get(self, "admin_password_secret_ref")

    @admin_password_secret_ref.setter
    def admin_password_secret_ref(self, value: pulumi.Input['ClusterDeploymentSpecClusterMetadataAdminPasswordSecretRefArgs']):
        pulumi.set(self, "admin_password_secret_ref", value)

    @property
    @pulumi.getter(name="clusterID")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        ClusterID is a globally unique identifier for this cluster generated during installation. Used for reporting metrics among other places.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="infraID")
    def infra_id(self) -> pulumi.Input[str]:
        """
        InfraID is an identifier for this cluster generated during installation and used for tagging/naming resources in cloud providers.
        """
        return pulumi.get(self, "infra_id")

    @infra_id.setter
    def infra_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "infra_id", value)


@pulumi.input_type
class ClusterDeploymentSpecClusterMetadataAdminKubeconfigSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecClusterMetadataAdminPasswordSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecClusterPoolRefArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str],
                 pool_name: pulumi.Input[str],
                 claim_name: Optional[pulumi.Input[str]] = None):
        """
        ClusterPoolRef is a reference to the ClusterPool that this ClusterDeployment originated from.
        :param pulumi.Input[str] namespace: Namespace is the namespace where the ClusterPool resides.
        :param pulumi.Input[str] pool_name: PoolName is the name of the ClusterPool for which the cluster was created.
        :param pulumi.Input[str] claim_name: ClaimName is the name of the ClusterClaim that claimed the cluster from the pool.
        """
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "pool_name", pool_name)
        if claim_name is not None:
            pulumi.set(__self__, "claim_name", claim_name)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace is the namespace where the ClusterPool resides.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="poolName")
    def pool_name(self) -> pulumi.Input[str]:
        """
        PoolName is the name of the ClusterPool for which the cluster was created.
        """
        return pulumi.get(self, "pool_name")

    @pool_name.setter
    def pool_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "pool_name", value)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> Optional[pulumi.Input[str]]:
        """
        ClaimName is the name of the ClusterClaim that claimed the cluster from the pool.
        """
        return pulumi.get(self, "claim_name")

    @claim_name.setter
    def claim_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "claim_name", value)


@pulumi.input_type
class ClusterDeploymentSpecControlPlaneConfigArgs:
    def __init__(__self__, *,
                 api_url_override: Optional[pulumi.Input[str]] = None,
                 serving_certificates: Optional[pulumi.Input['ClusterDeploymentSpecControlPlaneConfigServingCertificatesArgs']] = None):
        """
        ControlPlaneConfig contains additional configuration for the target cluster's control plane
        :param pulumi.Input[str] api_url_override: APIURLOverride is the optional URL override to which Hive will transition for communication with the API server of the remote cluster. When a remote cluster is created, Hive will initially communicate using the API URL established during installation. If an API URL Override is specified, Hive will periodically attempt to connect to the remote cluster using the override URL. Once Hive has determined that the override URL is active, Hive will use the override URL for further communications with the API server of the remote cluster.
        :param pulumi.Input['ClusterDeploymentSpecControlPlaneConfigServingCertificatesArgs'] serving_certificates: ServingCertificates specifies serving certificates for the control plane
        """
        if api_url_override is not None:
            pulumi.set(__self__, "api_url_override", api_url_override)
        if serving_certificates is not None:
            pulumi.set(__self__, "serving_certificates", serving_certificates)

    @property
    @pulumi.getter(name="apiURLOverride")
    def api_url_override(self) -> Optional[pulumi.Input[str]]:
        """
        APIURLOverride is the optional URL override to which Hive will transition for communication with the API server of the remote cluster. When a remote cluster is created, Hive will initially communicate using the API URL established during installation. If an API URL Override is specified, Hive will periodically attempt to connect to the remote cluster using the override URL. Once Hive has determined that the override URL is active, Hive will use the override URL for further communications with the API server of the remote cluster.
        """
        return pulumi.get(self, "api_url_override")

    @api_url_override.setter
    def api_url_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url_override", value)

    @property
    @pulumi.getter(name="servingCertificates")
    def serving_certificates(self) -> Optional[pulumi.Input['ClusterDeploymentSpecControlPlaneConfigServingCertificatesArgs']]:
        """
        ServingCertificates specifies serving certificates for the control plane
        """
        return pulumi.get(self, "serving_certificates")

    @serving_certificates.setter
    def serving_certificates(self, value: Optional[pulumi.Input['ClusterDeploymentSpecControlPlaneConfigServingCertificatesArgs']]):
        pulumi.set(self, "serving_certificates", value)


@pulumi.input_type
class ClusterDeploymentSpecControlPlaneConfigServingCertificatesArgs:
    def __init__(__self__, *,
                 additional: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecControlPlaneConfigServingCertificatesAdditionalArgs']]]] = None,
                 default: Optional[pulumi.Input[str]] = None):
        """
        ServingCertificates specifies serving certificates for the control plane
        :param pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecControlPlaneConfigServingCertificatesAdditionalArgs']]] additional: Additional is a list of additional domains and certificates that are also associated with the control plane's api endpoint.
        :param pulumi.Input[str] default: Default references the name of a CertificateBundle in the ClusterDeployment that should be used for the control plane's default endpoint.
        """
        if additional is not None:
            pulumi.set(__self__, "additional", additional)
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def additional(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecControlPlaneConfigServingCertificatesAdditionalArgs']]]]:
        """
        Additional is a list of additional domains and certificates that are also associated with the control plane's api endpoint.
        """
        return pulumi.get(self, "additional")

    @additional.setter
    def additional(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecControlPlaneConfigServingCertificatesAdditionalArgs']]]]):
        pulumi.set(self, "additional", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        """
        Default references the name of a CertificateBundle in the ClusterDeployment that should be used for the control plane's default endpoint.
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)


@pulumi.input_type
class ClusterDeploymentSpecControlPlaneConfigServingCertificatesAdditionalArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        ControlPlaneAdditionalCertificate defines an additional serving certificate for a control plane
        :param pulumi.Input[str] domain: Domain is the domain of the additional control plane certificate
        :param pulumi.Input[str] name: Name references a CertificateBundle in the ClusterDeployment.Spec that should be used for this additional certificate.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Domain is the domain of the additional control plane certificate
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name references a CertificateBundle in the ClusterDeployment.Spec that should be used for this additional certificate.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecIngressArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace_selector: Optional[pulumi.Input['ClusterDeploymentSpecIngressNamespaceSelectorArgs']] = None,
                 route_selector: Optional[pulumi.Input['ClusterDeploymentSpecIngressRouteSelectorArgs']] = None,
                 serving_certificate: Optional[pulumi.Input[str]] = None):
        """
        ClusterIngress contains the configurable pieces for any ClusterIngress objects that should exist on the cluster.
        :param pulumi.Input[str] domain: Domain (sometimes referred to as shard) is the full DNS suffix that the resulting IngressController object will service (eg abcd.mycluster.mydomain.com).
        :param pulumi.Input[str] name: Name of the ClusterIngress object to create.
        :param pulumi.Input['ClusterDeploymentSpecIngressNamespaceSelectorArgs'] namespace_selector: NamespaceSelector allows filtering the list of namespaces serviced by the ingress controller.
        :param pulumi.Input['ClusterDeploymentSpecIngressRouteSelectorArgs'] route_selector: RouteSelector allows filtering the set of Routes serviced by the ingress controller
        :param pulumi.Input[str] serving_certificate: ServingCertificate references a CertificateBundle in the ClusterDeployment.Spec that should be used for this Ingress
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "name", name)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if route_selector is not None:
            pulumi.set(__self__, "route_selector", route_selector)
        if serving_certificate is not None:
            pulumi.set(__self__, "serving_certificate", serving_certificate)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Domain (sometimes referred to as shard) is the full DNS suffix that the resulting IngressController object will service (eg abcd.mycluster.mydomain.com).
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the ClusterIngress object to create.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional[pulumi.Input['ClusterDeploymentSpecIngressNamespaceSelectorArgs']]:
        """
        NamespaceSelector allows filtering the list of namespaces serviced by the ingress controller.
        """
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(self, value: Optional[pulumi.Input['ClusterDeploymentSpecIngressNamespaceSelectorArgs']]):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter(name="routeSelector")
    def route_selector(self) -> Optional[pulumi.Input['ClusterDeploymentSpecIngressRouteSelectorArgs']]:
        """
        RouteSelector allows filtering the set of Routes serviced by the ingress controller
        """
        return pulumi.get(self, "route_selector")

    @route_selector.setter
    def route_selector(self, value: Optional[pulumi.Input['ClusterDeploymentSpecIngressRouteSelectorArgs']]):
        pulumi.set(self, "route_selector", value)

    @property
    @pulumi.getter(name="servingCertificate")
    def serving_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        ServingCertificate references a CertificateBundle in the ClusterDeployment.Spec that should be used for this Ingress
        """
        return pulumi.get(self, "serving_certificate")

    @serving_certificate.setter
    def serving_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serving_certificate", value)


@pulumi.input_type
class ClusterDeploymentSpecIngressNamespaceSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecIngressNamespaceSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        NamespaceSelector allows filtering the list of namespaces serviced by the ingress controller.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecIngressNamespaceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecIngressNamespaceSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecIngressNamespaceSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterDeploymentSpecIngressNamespaceSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterDeploymentSpecIngressRouteSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecIngressRouteSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        RouteSelector allows filtering the set of Routes serviced by the ingress controller
        :param pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecIngressRouteSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecIngressRouteSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecIngressRouteSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterDeploymentSpecIngressRouteSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformArgs:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['ClusterDeploymentSpecPlatformAwsArgs']] = None,
                 azure: Optional[pulumi.Input['ClusterDeploymentSpecPlatformAzureArgs']] = None,
                 baremetal: Optional[pulumi.Input['ClusterDeploymentSpecPlatformBaremetalArgs']] = None,
                 gcp: Optional[pulumi.Input['ClusterDeploymentSpecPlatformGcpArgs']] = None,
                 openstack: Optional[pulumi.Input['ClusterDeploymentSpecPlatformOpenstackArgs']] = None,
                 ovirt: Optional[pulumi.Input['ClusterDeploymentSpecPlatformOvirtArgs']] = None,
                 vsphere: Optional[pulumi.Input['ClusterDeploymentSpecPlatformVsphereArgs']] = None):
        """
        Platform is the configuration for the specific platform upon which to perform the installation.
        :param pulumi.Input['ClusterDeploymentSpecPlatformAwsArgs'] aws: AWS is the configuration used when installing on AWS.
        :param pulumi.Input['ClusterDeploymentSpecPlatformAzureArgs'] azure: Azure is the configuration used when installing on Azure.
        :param pulumi.Input['ClusterDeploymentSpecPlatformBaremetalArgs'] baremetal: BareMetal is the configuration used when installing on bare metal.
        :param pulumi.Input['ClusterDeploymentSpecPlatformGcpArgs'] gcp: GCP is the configuration used when installing on Google Cloud Platform.
        :param pulumi.Input['ClusterDeploymentSpecPlatformOpenstackArgs'] openstack: OpenStack is the configuration used when installing on OpenStack
        :param pulumi.Input['ClusterDeploymentSpecPlatformOvirtArgs'] ovirt: Ovirt is the configuration used when installing on oVirt
        :param pulumi.Input['ClusterDeploymentSpecPlatformVsphereArgs'] vsphere: VSphere is the configuration used when installing on vSphere
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if baremetal is not None:
            pulumi.set(__self__, "baremetal", baremetal)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if openstack is not None:
            pulumi.set(__self__, "openstack", openstack)
        if ovirt is not None:
            pulumi.set(__self__, "ovirt", ovirt)
        if vsphere is not None:
            pulumi.set(__self__, "vsphere", vsphere)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['ClusterDeploymentSpecPlatformAwsArgs']]:
        """
        AWS is the configuration used when installing on AWS.
        """
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['ClusterDeploymentSpecPlatformAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['ClusterDeploymentSpecPlatformAzureArgs']]:
        """
        Azure is the configuration used when installing on Azure.
        """
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['ClusterDeploymentSpecPlatformAzureArgs']]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter
    def baremetal(self) -> Optional[pulumi.Input['ClusterDeploymentSpecPlatformBaremetalArgs']]:
        """
        BareMetal is the configuration used when installing on bare metal.
        """
        return pulumi.get(self, "baremetal")

    @baremetal.setter
    def baremetal(self, value: Optional[pulumi.Input['ClusterDeploymentSpecPlatformBaremetalArgs']]):
        pulumi.set(self, "baremetal", value)

    @property
    @pulumi.getter
    def gcp(self) -> Optional[pulumi.Input['ClusterDeploymentSpecPlatformGcpArgs']]:
        """
        GCP is the configuration used when installing on Google Cloud Platform.
        """
        return pulumi.get(self, "gcp")

    @gcp.setter
    def gcp(self, value: Optional[pulumi.Input['ClusterDeploymentSpecPlatformGcpArgs']]):
        pulumi.set(self, "gcp", value)

    @property
    @pulumi.getter
    def openstack(self) -> Optional[pulumi.Input['ClusterDeploymentSpecPlatformOpenstackArgs']]:
        """
        OpenStack is the configuration used when installing on OpenStack
        """
        return pulumi.get(self, "openstack")

    @openstack.setter
    def openstack(self, value: Optional[pulumi.Input['ClusterDeploymentSpecPlatformOpenstackArgs']]):
        pulumi.set(self, "openstack", value)

    @property
    @pulumi.getter
    def ovirt(self) -> Optional[pulumi.Input['ClusterDeploymentSpecPlatformOvirtArgs']]:
        """
        Ovirt is the configuration used when installing on oVirt
        """
        return pulumi.get(self, "ovirt")

    @ovirt.setter
    def ovirt(self, value: Optional[pulumi.Input['ClusterDeploymentSpecPlatformOvirtArgs']]):
        pulumi.set(self, "ovirt", value)

    @property
    @pulumi.getter
    def vsphere(self) -> Optional[pulumi.Input['ClusterDeploymentSpecPlatformVsphereArgs']]:
        """
        VSphere is the configuration used when installing on vSphere
        """
        return pulumi.get(self, "vsphere")

    @vsphere.setter
    def vsphere(self, value: Optional[pulumi.Input['ClusterDeploymentSpecPlatformVsphereArgs']]):
        pulumi.set(self, "vsphere", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformAwsArgs:
    def __init__(__self__, *,
                 credentials_secret_ref: pulumi.Input['ClusterDeploymentSpecPlatformAwsCredentialsSecretRefArgs'],
                 region: pulumi.Input[str],
                 user_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        AWS is the configuration used when installing on AWS.
        :param pulumi.Input['ClusterDeploymentSpecPlatformAwsCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
        :param pulumi.Input[str] region: Region specifies the AWS region where the cluster will be created.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] user_tags: UserTags specifies additional tags for AWS resources created for the cluster.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "region", region)
        if user_tags is not None:
            pulumi.set(__self__, "user_tags", user_tags)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['ClusterDeploymentSpecPlatformAwsCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['ClusterDeploymentSpecPlatformAwsCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region specifies the AWS region where the cluster will be created.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        UserTags specifies additional tags for AWS resources created for the cluster.
        """
        return pulumi.get(self, "user_tags")

    @user_tags.setter
    def user_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "user_tags", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformAwsCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformAzureArgs:
    def __init__(__self__, *,
                 credentials_secret_ref: pulumi.Input['ClusterDeploymentSpecPlatformAzureCredentialsSecretRefArgs'],
                 region: pulumi.Input[str],
                 base_domain_resource_group_name: Optional[pulumi.Input[str]] = None):
        """
        Azure is the configuration used when installing on Azure.
        :param pulumi.Input['ClusterDeploymentSpecPlatformAzureCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
        :param pulumi.Input[str] region: Region specifies the Azure region where the cluster will be created.
        :param pulumi.Input[str] base_domain_resource_group_name: BaseDomainResourceGroupName specifies the resource group where the azure DNS zone for the base domain is found
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "region", region)
        if base_domain_resource_group_name is not None:
            pulumi.set(__self__, "base_domain_resource_group_name", base_domain_resource_group_name)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['ClusterDeploymentSpecPlatformAzureCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['ClusterDeploymentSpecPlatformAzureCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region specifies the Azure region where the cluster will be created.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="baseDomainResourceGroupName")
    def base_domain_resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        BaseDomainResourceGroupName specifies the resource group where the azure DNS zone for the base domain is found
        """
        return pulumi.get(self, "base_domain_resource_group_name")

    @base_domain_resource_group_name.setter
    def base_domain_resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_domain_resource_group_name", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformAzureCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformBaremetalArgs:
    def __init__(__self__, *,
                 libvirt_ssh_private_key_secret_ref: pulumi.Input['ClusterDeploymentSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRefArgs']):
        """
        BareMetal is the configuration used when installing on bare metal.
        :param pulumi.Input['ClusterDeploymentSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRefArgs'] libvirt_ssh_private_key_secret_ref: LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        """
        pulumi.set(__self__, "libvirt_ssh_private_key_secret_ref", libvirt_ssh_private_key_secret_ref)

    @property
    @pulumi.getter(name="libvirtSSHPrivateKeySecretRef")
    def libvirt_ssh_private_key_secret_ref(self) -> pulumi.Input['ClusterDeploymentSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRefArgs']:
        """
        LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        """
        return pulumi.get(self, "libvirt_ssh_private_key_secret_ref")

    @libvirt_ssh_private_key_secret_ref.setter
    def libvirt_ssh_private_key_secret_ref(self, value: pulumi.Input['ClusterDeploymentSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRefArgs']):
        pulumi.set(self, "libvirt_ssh_private_key_secret_ref", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformGcpArgs:
    def __init__(__self__, *,
                 credentials_secret_ref: pulumi.Input['ClusterDeploymentSpecPlatformGcpCredentialsSecretRefArgs'],
                 region: pulumi.Input[str]):
        """
        GCP is the configuration used when installing on Google Cloud Platform.
        :param pulumi.Input['ClusterDeploymentSpecPlatformGcpCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
        :param pulumi.Input[str] region: Region specifies the GCP region where the cluster will be created.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['ClusterDeploymentSpecPlatformGcpCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['ClusterDeploymentSpecPlatformGcpCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region specifies the GCP region where the cluster will be created.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformGcpCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformOpenstackArgs:
    def __init__(__self__, *,
                 cloud: pulumi.Input[str],
                 credentials_secret_ref: pulumi.Input['ClusterDeploymentSpecPlatformOpenstackCredentialsSecretRefArgs'],
                 trunk_support: Optional[pulumi.Input[bool]] = None):
        """
        OpenStack is the configuration used when installing on OpenStack
        :param pulumi.Input[str] cloud: Cloud will be used to indicate the OS_CLOUD value to use the right section from the cloud.yaml in the CredentialsSecretRef.
        :param pulumi.Input['ClusterDeploymentSpecPlatformOpenstackCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
        :param pulumi.Input[bool] trunk_support: TrunkSupport indicates whether or not to use trunk ports in your OpenShift cluster.
        """
        pulumi.set(__self__, "cloud", cloud)
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        if trunk_support is not None:
            pulumi.set(__self__, "trunk_support", trunk_support)

    @property
    @pulumi.getter
    def cloud(self) -> pulumi.Input[str]:
        """
        Cloud will be used to indicate the OS_CLOUD value to use the right section from the cloud.yaml in the CredentialsSecretRef.
        """
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud", value)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['ClusterDeploymentSpecPlatformOpenstackCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['ClusterDeploymentSpecPlatformOpenstackCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter(name="trunkSupport")
    def trunk_support(self) -> Optional[pulumi.Input[bool]]:
        """
        TrunkSupport indicates whether or not to use trunk ports in your OpenShift cluster.
        """
        return pulumi.get(self, "trunk_support")

    @trunk_support.setter
    def trunk_support(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trunk_support", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformOpenstackCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformOvirtArgs:
    def __init__(__self__, *,
                 certificates_secret_ref: pulumi.Input['ClusterDeploymentSpecPlatformOvirtCertificatesSecretRefArgs'],
                 credentials_secret_ref: pulumi.Input['ClusterDeploymentSpecPlatformOvirtCredentialsSecretRefArgs'],
                 ovirt_cluster_id: pulumi.Input[str],
                 storage_domain_id: pulumi.Input[str],
                 ovirt_network_name: Optional[pulumi.Input[str]] = None):
        """
        Ovirt is the configuration used when installing on oVirt
        :param pulumi.Input['ClusterDeploymentSpecPlatformOvirtCertificatesSecretRefArgs'] certificates_secret_ref: CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
        :param pulumi.Input['ClusterDeploymentSpecPlatformOvirtCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        :param pulumi.Input[str] ovirt_cluster_id: The target cluster under which all VMs will run
        :param pulumi.Input[str] storage_domain_id: The target storage domain under which all VM disk would be created.
        :param pulumi.Input[str] ovirt_network_name: The target network of all the network interfaces of the nodes. Omitting defaults to ovirtmgmt network which is a default network for evert ovirt cluster.
        """
        pulumi.set(__self__, "certificates_secret_ref", certificates_secret_ref)
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "ovirt_cluster_id", ovirt_cluster_id)
        pulumi.set(__self__, "storage_domain_id", storage_domain_id)
        if ovirt_network_name is not None:
            pulumi.set(__self__, "ovirt_network_name", ovirt_network_name)

    @property
    @pulumi.getter(name="certificatesSecretRef")
    def certificates_secret_ref(self) -> pulumi.Input['ClusterDeploymentSpecPlatformOvirtCertificatesSecretRefArgs']:
        """
        CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
        """
        return pulumi.get(self, "certificates_secret_ref")

    @certificates_secret_ref.setter
    def certificates_secret_ref(self, value: pulumi.Input['ClusterDeploymentSpecPlatformOvirtCertificatesSecretRefArgs']):
        pulumi.set(self, "certificates_secret_ref", value)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['ClusterDeploymentSpecPlatformOvirtCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['ClusterDeploymentSpecPlatformOvirtCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter
    def ovirt_cluster_id(self) -> pulumi.Input[str]:
        """
        The target cluster under which all VMs will run
        """
        return pulumi.get(self, "ovirt_cluster_id")

    @ovirt_cluster_id.setter
    def ovirt_cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ovirt_cluster_id", value)

    @property
    @pulumi.getter
    def storage_domain_id(self) -> pulumi.Input[str]:
        """
        The target storage domain under which all VM disk would be created.
        """
        return pulumi.get(self, "storage_domain_id")

    @storage_domain_id.setter
    def storage_domain_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_domain_id", value)

    @property
    @pulumi.getter
    def ovirt_network_name(self) -> Optional[pulumi.Input[str]]:
        """
        The target network of all the network interfaces of the nodes. Omitting defaults to ovirtmgmt network which is a default network for evert ovirt cluster.
        """
        return pulumi.get(self, "ovirt_network_name")

    @ovirt_network_name.setter
    def ovirt_network_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovirt_network_name", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformOvirtCertificatesSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformOvirtCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformVsphereArgs:
    def __init__(__self__, *,
                 certificates_secret_ref: pulumi.Input['ClusterDeploymentSpecPlatformVsphereCertificatesSecretRefArgs'],
                 credentials_secret_ref: pulumi.Input['ClusterDeploymentSpecPlatformVsphereCredentialsSecretRefArgs'],
                 datacenter: pulumi.Input[str],
                 default_datastore: pulumi.Input[str],
                 v_center: pulumi.Input[str],
                 cluster: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None):
        """
        VSphere is the configuration used when installing on vSphere
        :param pulumi.Input['ClusterDeploymentSpecPlatformVsphereCertificatesSecretRefArgs'] certificates_secret_ref: CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        :param pulumi.Input['ClusterDeploymentSpecPlatformVsphereCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
        :param pulumi.Input[str] datacenter: Datacenter is the name of the datacenter to use in the vCenter.
        :param pulumi.Input[str] default_datastore: DefaultDatastore is the default datastore to use for provisioning volumes.
        :param pulumi.Input[str] v_center: VCenter is the domain name or IP address of the vCenter.
        :param pulumi.Input[str] cluster: Cluster is the name of the cluster virtual machines will be cloned into.
        :param pulumi.Input[str] folder: Folder is the name of the folder that will be used and/or created for virtual machines.
        :param pulumi.Input[str] network: Network specifies the name of the network to be used by the cluster.
        """
        pulumi.set(__self__, "certificates_secret_ref", certificates_secret_ref)
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "default_datastore", default_datastore)
        pulumi.set(__self__, "v_center", v_center)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter(name="certificatesSecretRef")
    def certificates_secret_ref(self) -> pulumi.Input['ClusterDeploymentSpecPlatformVsphereCertificatesSecretRefArgs']:
        """
        CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        """
        return pulumi.get(self, "certificates_secret_ref")

    @certificates_secret_ref.setter
    def certificates_secret_ref(self, value: pulumi.Input['ClusterDeploymentSpecPlatformVsphereCertificatesSecretRefArgs']):
        pulumi.set(self, "certificates_secret_ref", value)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['ClusterDeploymentSpecPlatformVsphereCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['ClusterDeploymentSpecPlatformVsphereCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter
    def datacenter(self) -> pulumi.Input[str]:
        """
        Datacenter is the name of the datacenter to use in the vCenter.
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter", value)

    @property
    @pulumi.getter(name="defaultDatastore")
    def default_datastore(self) -> pulumi.Input[str]:
        """
        DefaultDatastore is the default datastore to use for provisioning volumes.
        """
        return pulumi.get(self, "default_datastore")

    @default_datastore.setter
    def default_datastore(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_datastore", value)

    @property
    @pulumi.getter(name="vCenter")
    def v_center(self) -> pulumi.Input[str]:
        """
        VCenter is the domain name or IP address of the vCenter.
        """
        return pulumi.get(self, "v_center")

    @v_center.setter
    def v_center(self, value: pulumi.Input[str]):
        pulumi.set(self, "v_center", value)

    @property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster is the name of the cluster virtual machines will be cloned into.
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        """
        Folder is the name of the folder that will be used and/or created for virtual machines.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        Network specifies the name of the network to be used by the cluster.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformVsphereCertificatesSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecPlatformVsphereCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecProvisioningArgs:
    def __init__(__self__, *,
                 install_config_secret_ref: pulumi.Input['ClusterDeploymentSpecProvisioningInstallConfigSecretRefArgs'],
                 image_set_ref: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningImageSetRefArgs']] = None,
                 installer_env: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvArgs']]]] = None,
                 manifests_config_map_ref: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningManifestsConfigMapRefArgs']] = None,
                 release_image: Optional[pulumi.Input[str]] = None,
                 ssh_known_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssh_private_key_secret_ref: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningSshPrivateKeySecretRefArgs']] = None):
        """
        Provisioning contains settings used only for initial cluster provisioning. May be unset in the case of adopted clusters.
        :param pulumi.Input['ClusterDeploymentSpecProvisioningInstallConfigSecretRefArgs'] install_config_secret_ref: InstallConfigSecretRef is the reference to a secret that contains an openshift-install InstallConfig. This file will be passed through directly to the installer. Any version of InstallConfig can be used, provided it can be parsed by the openshift-install version for the release you are provisioning.
        :param pulumi.Input['ClusterDeploymentSpecProvisioningImageSetRefArgs'] image_set_ref: ImageSetRef is a reference to a ClusterImageSet. If a value is specified for ReleaseImage, that will take precedence over the one from the ClusterImageSet.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvArgs']]] installer_env: InstallerEnv are extra environment variables to pass through to the installer. This may be used to enable additional features of the installer.
        :param pulumi.Input['ClusterDeploymentSpecProvisioningManifestsConfigMapRefArgs'] manifests_config_map_ref: ManifestsConfigMapRef is a reference to user-provided manifests to add to or replace manifests that are generated by the installer.
        :param pulumi.Input[str] release_image: ReleaseImage is the image containing metadata for all components that run in the cluster, and is the primary and best way to specify what specific version of OpenShift you wish to install.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_known_hosts: SSHKnownHosts are known hosts to be configured in the hive install manager pod to avoid ssh prompts. Use of ssh in the install pod is somewhat limited today (failure log gathering from cluster, some bare metal provisioning scenarios), so this setting is often not needed.
        :param pulumi.Input['ClusterDeploymentSpecProvisioningSshPrivateKeySecretRefArgs'] ssh_private_key_secret_ref: SSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to compute instances. This private key should correspond to the public key included in the InstallConfig. The private key is used by Hive to gather logs on the target cluster if there are install failures. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        """
        pulumi.set(__self__, "install_config_secret_ref", install_config_secret_ref)
        if image_set_ref is not None:
            pulumi.set(__self__, "image_set_ref", image_set_ref)
        if installer_env is not None:
            pulumi.set(__self__, "installer_env", installer_env)
        if manifests_config_map_ref is not None:
            pulumi.set(__self__, "manifests_config_map_ref", manifests_config_map_ref)
        if release_image is not None:
            pulumi.set(__self__, "release_image", release_image)
        if ssh_known_hosts is not None:
            pulumi.set(__self__, "ssh_known_hosts", ssh_known_hosts)
        if ssh_private_key_secret_ref is not None:
            pulumi.set(__self__, "ssh_private_key_secret_ref", ssh_private_key_secret_ref)

    @property
    @pulumi.getter(name="installConfigSecretRef")
    def install_config_secret_ref(self) -> pulumi.Input['ClusterDeploymentSpecProvisioningInstallConfigSecretRefArgs']:
        """
        InstallConfigSecretRef is the reference to a secret that contains an openshift-install InstallConfig. This file will be passed through directly to the installer. Any version of InstallConfig can be used, provided it can be parsed by the openshift-install version for the release you are provisioning.
        """
        return pulumi.get(self, "install_config_secret_ref")

    @install_config_secret_ref.setter
    def install_config_secret_ref(self, value: pulumi.Input['ClusterDeploymentSpecProvisioningInstallConfigSecretRefArgs']):
        pulumi.set(self, "install_config_secret_ref", value)

    @property
    @pulumi.getter(name="imageSetRef")
    def image_set_ref(self) -> Optional[pulumi.Input['ClusterDeploymentSpecProvisioningImageSetRefArgs']]:
        """
        ImageSetRef is a reference to a ClusterImageSet. If a value is specified for ReleaseImage, that will take precedence over the one from the ClusterImageSet.
        """
        return pulumi.get(self, "image_set_ref")

    @image_set_ref.setter
    def image_set_ref(self, value: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningImageSetRefArgs']]):
        pulumi.set(self, "image_set_ref", value)

    @property
    @pulumi.getter(name="installerEnv")
    def installer_env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvArgs']]]]:
        """
        InstallerEnv are extra environment variables to pass through to the installer. This may be used to enable additional features of the installer.
        """
        return pulumi.get(self, "installer_env")

    @installer_env.setter
    def installer_env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvArgs']]]]):
        pulumi.set(self, "installer_env", value)

    @property
    @pulumi.getter(name="manifestsConfigMapRef")
    def manifests_config_map_ref(self) -> Optional[pulumi.Input['ClusterDeploymentSpecProvisioningManifestsConfigMapRefArgs']]:
        """
        ManifestsConfigMapRef is a reference to user-provided manifests to add to or replace manifests that are generated by the installer.
        """
        return pulumi.get(self, "manifests_config_map_ref")

    @manifests_config_map_ref.setter
    def manifests_config_map_ref(self, value: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningManifestsConfigMapRefArgs']]):
        pulumi.set(self, "manifests_config_map_ref", value)

    @property
    @pulumi.getter(name="releaseImage")
    def release_image(self) -> Optional[pulumi.Input[str]]:
        """
        ReleaseImage is the image containing metadata for all components that run in the cluster, and is the primary and best way to specify what specific version of OpenShift you wish to install.
        """
        return pulumi.get(self, "release_image")

    @release_image.setter
    def release_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_image", value)

    @property
    @pulumi.getter(name="sshKnownHosts")
    def ssh_known_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        SSHKnownHosts are known hosts to be configured in the hive install manager pod to avoid ssh prompts. Use of ssh in the install pod is somewhat limited today (failure log gathering from cluster, some bare metal provisioning scenarios), so this setting is often not needed.
        """
        return pulumi.get(self, "ssh_known_hosts")

    @ssh_known_hosts.setter
    def ssh_known_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_known_hosts", value)

    @property
    @pulumi.getter(name="sshPrivateKeySecretRef")
    def ssh_private_key_secret_ref(self) -> Optional[pulumi.Input['ClusterDeploymentSpecProvisioningSshPrivateKeySecretRefArgs']]:
        """
        SSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to compute instances. This private key should correspond to the public key included in the InstallConfig. The private key is used by Hive to gather logs on the target cluster if there are install failures. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        """
        return pulumi.get(self, "ssh_private_key_secret_ref")

    @ssh_private_key_secret_ref.setter
    def ssh_private_key_secret_ref(self, value: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningSshPrivateKeySecretRefArgs']]):
        pulumi.set(self, "ssh_private_key_secret_ref", value)


@pulumi.input_type
class ClusterDeploymentSpecProvisioningImageSetRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ImageSetRef is a reference to a ClusterImageSet. If a value is specified for ReleaseImage, that will take precedence over the one from the ClusterImageSet.
        :param pulumi.Input[str] name: Name is the name of the ClusterImageSet that this refers to
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the ClusterImageSet that this refers to
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecProvisioningInstallConfigSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        InstallConfigSecretRef is the reference to a secret that contains an openshift-install InstallConfig. This file will be passed through directly to the installer. Any version of InstallConfig can be used, provided it can be parsed by the openshift-install version for the release you are provisioning.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecProvisioningInstallerEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class ClusterDeploymentSpecProvisioningInstallerEnvValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['ClusterDeploymentSpecProvisioningInstallerEnvValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class ClusterDeploymentSpecProvisioningInstallerEnvValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterDeploymentSpecProvisioningInstallerEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class ClusterDeploymentSpecProvisioningInstallerEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input[str]] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input[str] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class ClusterDeploymentSpecProvisioningInstallerEnvValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterDeploymentSpecProvisioningManifestsConfigMapRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        ManifestsConfigMapRef is a reference to user-provided manifests to add to or replace manifests that are generated by the installer.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecProvisioningSshPrivateKeySecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        SSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to compute instances. This private key should correspond to the public key included in the InstallConfig. The private key is used by Hive to gather logs on the target cluster if there are install failures. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentSpecPullSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        PullSecretRef is the reference to the secret to use when pulling images.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentStatusArgs:
    def __init__(__self__, *,
                 api_url: Optional[pulumi.Input[str]] = None,
                 certificate_bundles: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusCertificateBundlesArgs']]]] = None,
                 cli_image: Optional[pulumi.Input[str]] = None,
                 cluster_version_status: Optional[pulumi.Input['ClusterDeploymentStatusClusterVersionStatusArgs']] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusConditionsArgs']]]] = None,
                 install_restarts: Optional[pulumi.Input[int]] = None,
                 installed_timestamp: Optional[pulumi.Input[str]] = None,
                 installer_image: Optional[pulumi.Input[str]] = None,
                 provision_ref: Optional[pulumi.Input['ClusterDeploymentStatusProvisionRefArgs']] = None,
                 web_console_url: Optional[pulumi.Input[str]] = None):
        """
        ClusterDeploymentStatus defines the observed state of ClusterDeployment
        :param pulumi.Input[str] api_url: APIURL is the URL where the cluster's API can be accessed.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusCertificateBundlesArgs']]] certificate_bundles: CertificateBundles contains of the status of the certificate bundles associated with this cluster deployment.
        :param pulumi.Input[str] cli_image: CLIImage is the name of the oc cli image to use when installing the target cluster
        :param pulumi.Input['ClusterDeploymentStatusClusterVersionStatusArgs'] cluster_version_status: ClusterVersionStatus will hold a copy of the remote cluster's ClusterVersion.Status
        :param pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusConditionsArgs']]] conditions: Conditions includes more detailed status for the cluster deployment
        :param pulumi.Input[int] install_restarts: InstallRestarts is the total count of container restarts on the clusters install job.
        :param pulumi.Input[str] installed_timestamp: InstalledTimestamp is the time we first detected that the cluster has been successfully installed.
        :param pulumi.Input[str] installer_image: InstallerImage is the name of the installer image to use when installing the target cluster
        :param pulumi.Input['ClusterDeploymentStatusProvisionRefArgs'] provision_ref: ProvisionRef is a reference to the last ClusterProvision created for the deployment
        :param pulumi.Input[str] web_console_url: WebConsoleURL is the URL for the cluster's web console UI.
        """
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if certificate_bundles is not None:
            pulumi.set(__self__, "certificate_bundles", certificate_bundles)
        if cli_image is not None:
            pulumi.set(__self__, "cli_image", cli_image)
        if cluster_version_status is not None:
            pulumi.set(__self__, "cluster_version_status", cluster_version_status)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if install_restarts is not None:
            pulumi.set(__self__, "install_restarts", install_restarts)
        if installed_timestamp is not None:
            pulumi.set(__self__, "installed_timestamp", installed_timestamp)
        if installer_image is not None:
            pulumi.set(__self__, "installer_image", installer_image)
        if provision_ref is not None:
            pulumi.set(__self__, "provision_ref", provision_ref)
        if web_console_url is not None:
            pulumi.set(__self__, "web_console_url", web_console_url)

    @property
    @pulumi.getter(name="apiURL")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        """
        APIURL is the URL where the cluster's API can be accessed.
        """
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="certificateBundles")
    def certificate_bundles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusCertificateBundlesArgs']]]]:
        """
        CertificateBundles contains of the status of the certificate bundles associated with this cluster deployment.
        """
        return pulumi.get(self, "certificate_bundles")

    @certificate_bundles.setter
    def certificate_bundles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusCertificateBundlesArgs']]]]):
        pulumi.set(self, "certificate_bundles", value)

    @property
    @pulumi.getter(name="cliImage")
    def cli_image(self) -> Optional[pulumi.Input[str]]:
        """
        CLIImage is the name of the oc cli image to use when installing the target cluster
        """
        return pulumi.get(self, "cli_image")

    @cli_image.setter
    def cli_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cli_image", value)

    @property
    @pulumi.getter(name="clusterVersionStatus")
    def cluster_version_status(self) -> Optional[pulumi.Input['ClusterDeploymentStatusClusterVersionStatusArgs']]:
        """
        ClusterVersionStatus will hold a copy of the remote cluster's ClusterVersion.Status
        """
        return pulumi.get(self, "cluster_version_status")

    @cluster_version_status.setter
    def cluster_version_status(self, value: Optional[pulumi.Input['ClusterDeploymentStatusClusterVersionStatusArgs']]):
        pulumi.set(self, "cluster_version_status", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusConditionsArgs']]]]:
        """
        Conditions includes more detailed status for the cluster deployment
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="installRestarts")
    def install_restarts(self) -> Optional[pulumi.Input[int]]:
        """
        InstallRestarts is the total count of container restarts on the clusters install job.
        """
        return pulumi.get(self, "install_restarts")

    @install_restarts.setter
    def install_restarts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "install_restarts", value)

    @property
    @pulumi.getter(name="installedTimestamp")
    def installed_timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        InstalledTimestamp is the time we first detected that the cluster has been successfully installed.
        """
        return pulumi.get(self, "installed_timestamp")

    @installed_timestamp.setter
    def installed_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "installed_timestamp", value)

    @property
    @pulumi.getter(name="installerImage")
    def installer_image(self) -> Optional[pulumi.Input[str]]:
        """
        InstallerImage is the name of the installer image to use when installing the target cluster
        """
        return pulumi.get(self, "installer_image")

    @installer_image.setter
    def installer_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "installer_image", value)

    @property
    @pulumi.getter(name="provisionRef")
    def provision_ref(self) -> Optional[pulumi.Input['ClusterDeploymentStatusProvisionRefArgs']]:
        """
        ProvisionRef is a reference to the last ClusterProvision created for the deployment
        """
        return pulumi.get(self, "provision_ref")

    @provision_ref.setter
    def provision_ref(self, value: Optional[pulumi.Input['ClusterDeploymentStatusProvisionRefArgs']]):
        pulumi.set(self, "provision_ref", value)

    @property
    @pulumi.getter(name="webConsoleURL")
    def web_console_url(self) -> Optional[pulumi.Input[str]]:
        """
        WebConsoleURL is the URL for the cluster's web console UI.
        """
        return pulumi.get(self, "web_console_url")

    @web_console_url.setter
    def web_console_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_console_url", value)


@pulumi.input_type
class ClusterDeploymentStatusCertificateBundlesArgs:
    def __init__(__self__, *,
                 generated: pulumi.Input[bool],
                 name: pulumi.Input[str]):
        """
        CertificateBundleStatus specifies whether a certificate bundle was generated for this cluster deployment.
        :param pulumi.Input[bool] generated: Generated indicates whether the certificate bundle was generated
        :param pulumi.Input[str] name: Name of the certificate bundle
        """
        pulumi.set(__self__, "generated", generated)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def generated(self) -> pulumi.Input[bool]:
        """
        Generated indicates whether the certificate bundle was generated
        """
        return pulumi.get(self, "generated")

    @generated.setter
    def generated(self, value: pulumi.Input[bool]):
        pulumi.set(self, "generated", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the certificate bundle
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeploymentStatusClusterVersionStatusArgs:
    def __init__(__self__, *,
                 available_updates: pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusClusterVersionStatusAvailableUpdatesArgs']]],
                 desired: pulumi.Input['ClusterDeploymentStatusClusterVersionStatusDesiredArgs'],
                 observed_generation: pulumi.Input[int],
                 version_hash: pulumi.Input[str],
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusClusterVersionStatusConditionsArgs']]]] = None,
                 history: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusClusterVersionStatusHistoryArgs']]]] = None):
        """
        ClusterVersionStatus will hold a copy of the remote cluster's ClusterVersion.Status
        :param pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusClusterVersionStatusAvailableUpdatesArgs']]] available_updates: availableUpdates contains the list of updates that are appropriate for this cluster. This list may be empty if no updates are recommended, if the update service is unavailable, or if an invalid channel has been specified.
        :param pulumi.Input['ClusterDeploymentStatusClusterVersionStatusDesiredArgs'] desired: desired is the version that the cluster is reconciling towards. If the cluster is not yet fully initialized desired will be set with the information available, which may be an image or a tag.
        :param pulumi.Input[int] observed_generation: observedGeneration reports which version of the spec is being synced. If this value is not equal to metadata.generation, then the desired and conditions fields may represent a previous version.
        :param pulumi.Input[str] version_hash: versionHash is a fingerprint of the content that the cluster will be updated with. It is used by the operator to avoid unnecessary work and is for internal use only.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusClusterVersionStatusConditionsArgs']]] conditions: conditions provides information about the cluster version. The condition "Available" is set to true if the desiredUpdate has been reached. The condition "Progressing" is set to true if an update is being applied. The condition "Degraded" is set to true if an update is currently blocked by a temporary or permanent error. Conditions are only valid for the current desiredUpdate when metadata.generation is equal to status.generation.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusClusterVersionStatusHistoryArgs']]] history: history contains a list of the most recent versions applied to the cluster. This value may be empty during cluster startup, and then will be updated when a new update is being applied. The newest update is first in the list and it is ordered by recency. Updates in the history have state Completed if the rollout completed - if an update was failing or halfway applied the state will be Partial. Only a limited amount of update history is preserved.
        """
        pulumi.set(__self__, "available_updates", available_updates)
        pulumi.set(__self__, "desired", desired)
        pulumi.set(__self__, "observed_generation", observed_generation)
        pulumi.set(__self__, "version_hash", version_hash)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if history is not None:
            pulumi.set(__self__, "history", history)

    @property
    @pulumi.getter(name="availableUpdates")
    def available_updates(self) -> pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusClusterVersionStatusAvailableUpdatesArgs']]]:
        """
        availableUpdates contains the list of updates that are appropriate for this cluster. This list may be empty if no updates are recommended, if the update service is unavailable, or if an invalid channel has been specified.
        """
        return pulumi.get(self, "available_updates")

    @available_updates.setter
    def available_updates(self, value: pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusClusterVersionStatusAvailableUpdatesArgs']]]):
        pulumi.set(self, "available_updates", value)

    @property
    @pulumi.getter
    def desired(self) -> pulumi.Input['ClusterDeploymentStatusClusterVersionStatusDesiredArgs']:
        """
        desired is the version that the cluster is reconciling towards. If the cluster is not yet fully initialized desired will be set with the information available, which may be an image or a tag.
        """
        return pulumi.get(self, "desired")

    @desired.setter
    def desired(self, value: pulumi.Input['ClusterDeploymentStatusClusterVersionStatusDesiredArgs']):
        pulumi.set(self, "desired", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> pulumi.Input[int]:
        """
        observedGeneration reports which version of the spec is being synced. If this value is not equal to metadata.generation, then the desired and conditions fields may represent a previous version.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: pulumi.Input[int]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter(name="versionHash")
    def version_hash(self) -> pulumi.Input[str]:
        """
        versionHash is a fingerprint of the content that the cluster will be updated with. It is used by the operator to avoid unnecessary work and is for internal use only.
        """
        return pulumi.get(self, "version_hash")

    @version_hash.setter
    def version_hash(self, value: pulumi.Input[str]):
        pulumi.set(self, "version_hash", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusClusterVersionStatusConditionsArgs']]]]:
        """
        conditions provides information about the cluster version. The condition "Available" is set to true if the desiredUpdate has been reached. The condition "Progressing" is set to true if an update is being applied. The condition "Degraded" is set to true if an update is currently blocked by a temporary or permanent error. Conditions are only valid for the current desiredUpdate when metadata.generation is equal to status.generation.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusClusterVersionStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def history(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusClusterVersionStatusHistoryArgs']]]]:
        """
        history contains a list of the most recent versions applied to the cluster. This value may be empty during cluster startup, and then will be updated when a new update is being applied. The newest update is first in the list and it is ordered by recency. Updates in the history have state Completed if the rollout completed - if an update was failing or halfway applied the state will be Partial. Only a limited amount of update history is preserved.
        """
        return pulumi.get(self, "history")

    @history.setter
    def history(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDeploymentStatusClusterVersionStatusHistoryArgs']]]]):
        pulumi.set(self, "history", value)


@pulumi.input_type
class ClusterDeploymentStatusClusterVersionStatusAvailableUpdatesArgs:
    def __init__(__self__, *,
                 force: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Update represents a release of the ClusterVersionOperator, referenced by the Image member.
        :param pulumi.Input[bool] force: force allows an administrator to update to an image that has failed verification, does not appear in the availableUpdates list, or otherwise would be blocked by normal protections on update. This option should only be used when the authenticity of the provided image has been verified out of band because the provided image will run with full administrative access to the cluster. Do not use this flag with images that comes from unknown or potentially malicious sources. 
                This flag does not override other forms of consistency checking that are required before a new update is deployed.
        :param pulumi.Input[str] image: image is a container image location that contains the update. When this field is part of spec, image is optional if version is specified and the availableUpdates field contains a matching version.
        :param pulumi.Input[str] version: version is a semantic versioning identifying the update version. When this field is part of spec, version is optional if image is specified.
        """
        if force is not None:
            pulumi.set(__self__, "force", force)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        force allows an administrator to update to an image that has failed verification, does not appear in the availableUpdates list, or otherwise would be blocked by normal protections on update. This option should only be used when the authenticity of the provided image has been verified out of band because the provided image will run with full administrative access to the cluster. Do not use this flag with images that comes from unknown or potentially malicious sources. 
         This flag does not override other forms of consistency checking that are required before a new update is deployed.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        image is a container image location that contains the update. When this field is part of spec, image is optional if version is specified and the availableUpdates field contains a matching version.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        version is a semantic versioning identifying the update version. When this field is part of spec, version is optional if image is specified.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterDeploymentStatusClusterVersionStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        ClusterOperatorStatusCondition represents the state of the operator's managed and monitored components.
        :param pulumi.Input[str] last_transition_time: lastTransitionTime is the time of the last update to the current status property.
        :param pulumi.Input[str] status: status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: type specifies the aspect reported by this condition.
        :param pulumi.Input[str] message: message provides additional information about the current condition. This is only to be consumed by humans.
        :param pulumi.Input[str] reason: reason is the CamelCase reason for the condition's current status.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        lastTransitionTime is the time of the last update to the current status property.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        type specifies the aspect reported by this condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        message provides additional information about the current condition. This is only to be consumed by humans.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        reason is the CamelCase reason for the condition's current status.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class ClusterDeploymentStatusClusterVersionStatusDesiredArgs:
    def __init__(__self__, *,
                 force: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        desired is the version that the cluster is reconciling towards. If the cluster is not yet fully initialized desired will be set with the information available, which may be an image or a tag.
        :param pulumi.Input[bool] force: force allows an administrator to update to an image that has failed verification, does not appear in the availableUpdates list, or otherwise would be blocked by normal protections on update. This option should only be used when the authenticity of the provided image has been verified out of band because the provided image will run with full administrative access to the cluster. Do not use this flag with images that comes from unknown or potentially malicious sources. 
                This flag does not override other forms of consistency checking that are required before a new update is deployed.
        :param pulumi.Input[str] image: image is a container image location that contains the update. When this field is part of spec, image is optional if version is specified and the availableUpdates field contains a matching version.
        :param pulumi.Input[str] version: version is a semantic versioning identifying the update version. When this field is part of spec, version is optional if image is specified.
        """
        if force is not None:
            pulumi.set(__self__, "force", force)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        force allows an administrator to update to an image that has failed verification, does not appear in the availableUpdates list, or otherwise would be blocked by normal protections on update. This option should only be used when the authenticity of the provided image has been verified out of band because the provided image will run with full administrative access to the cluster. Do not use this flag with images that comes from unknown or potentially malicious sources. 
         This flag does not override other forms of consistency checking that are required before a new update is deployed.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        image is a container image location that contains the update. When this field is part of spec, image is optional if version is specified and the availableUpdates field contains a matching version.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        version is a semantic versioning identifying the update version. When this field is part of spec, version is optional if image is specified.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterDeploymentStatusClusterVersionStatusHistoryArgs:
    def __init__(__self__, *,
                 completion_time: pulumi.Input[str],
                 image: pulumi.Input[str],
                 started_time: pulumi.Input[str],
                 state: pulumi.Input[str],
                 verified: pulumi.Input[bool],
                 version: Optional[pulumi.Input[str]] = None):
        """
        UpdateHistory is a single attempted update to the cluster.
        :param pulumi.Input[str] completion_time: completionTime, if set, is when the update was fully applied. The update that is currently being applied will have a null completion time. Completion time will always be set for entries that are not the current update (usually to the started time of the next update).
        :param pulumi.Input[str] image: image is a container image location that contains the update. This value is always populated.
        :param pulumi.Input[str] started_time: startedTime is the time at which the update was started.
        :param pulumi.Input[str] state: state reflects whether the update was fully applied. The Partial state indicates the update is not fully applied, while the Completed state indicates the update was successfully rolled out at least once (all parts of the update successfully applied).
        :param pulumi.Input[bool] verified: verified indicates whether the provided update was properly verified before it was installed. If this is false the cluster may not be trusted.
        :param pulumi.Input[str] version: version is a semantic versioning identifying the update version. If the requested image does not define a version, or if a failure occurs retrieving the image, this value may be empty.
        """
        pulumi.set(__self__, "completion_time", completion_time)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "started_time", started_time)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "verified", verified)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="completionTime")
    def completion_time(self) -> pulumi.Input[str]:
        """
        completionTime, if set, is when the update was fully applied. The update that is currently being applied will have a null completion time. Completion time will always be set for entries that are not the current update (usually to the started time of the next update).
        """
        return pulumi.get(self, "completion_time")

    @completion_time.setter
    def completion_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "completion_time", value)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        image is a container image location that contains the update. This value is always populated.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="startedTime")
    def started_time(self) -> pulumi.Input[str]:
        """
        startedTime is the time at which the update was started.
        """
        return pulumi.get(self, "started_time")

    @started_time.setter
    def started_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "started_time", value)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[str]:
        """
        state reflects whether the update was fully applied. The Partial state indicates the update is not fully applied, while the Completed state indicates the update was successfully rolled out at least once (all parts of the update successfully applied).
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[str]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def verified(self) -> pulumi.Input[bool]:
        """
        verified indicates whether the provided update was properly verified before it was installed. If this is false the cluster may not be trusted.
        """
        return pulumi.get(self, "verified")

    @verified.setter
    def verified(self, value: pulumi.Input[bool]):
        pulumi.set(self, "verified", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        version is a semantic versioning identifying the update version. If the requested image does not define a version, or if a failure occurs retrieving the image, this value may be empty.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterDeploymentStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_probe_time: Optional[pulumi.Input[str]] = None,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        ClusterDeploymentCondition contains details for the current condition of a cluster deployment
        :param pulumi.Input[str] status: Status is the status of the condition.
        :param pulumi.Input[str] type: Type is the type of the condition.
        :param pulumi.Input[str] last_probe_time: LastProbeTime is the last time we probed the condition.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: Message is a human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @last_probe_time.setter
    def last_probe_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_probe_time", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class ClusterDeploymentStatusProvisionRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        ProvisionRef is a reference to the last ClusterProvision created for the deployment
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeprovisionSpecArgs:
    def __init__(__self__, *,
                 infra_id: pulumi.Input[str],
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 platform: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformArgs']] = None):
        """
        ClusterDeprovisionSpec defines the desired state of ClusterDeprovision
        :param pulumi.Input[str] infra_id: InfraID is the identifier generated during installation for a cluster. It is used for tagging/naming resources in cloud providers.
        :param pulumi.Input[str] cluster_id: ClusterID is a globally unique identifier for the cluster to deprovision. It will be used if specified.
        :param pulumi.Input['ClusterDeprovisionSpecPlatformArgs'] platform: Platform contains platform-specific configuration for a ClusterDeprovision
        """
        pulumi.set(__self__, "infra_id", infra_id)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)

    @property
    @pulumi.getter(name="infraID")
    def infra_id(self) -> pulumi.Input[str]:
        """
        InfraID is the identifier generated during installation for a cluster. It is used for tagging/naming resources in cloud providers.
        """
        return pulumi.get(self, "infra_id")

    @infra_id.setter
    def infra_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "infra_id", value)

    @property
    @pulumi.getter(name="clusterID")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ClusterID is a globally unique identifier for the cluster to deprovision. It will be used if specified.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input['ClusterDeprovisionSpecPlatformArgs']]:
        """
        Platform contains platform-specific configuration for a ClusterDeprovision
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformArgs']]):
        pulumi.set(self, "platform", value)


@pulumi.input_type
class ClusterDeprovisionSpecPlatformArgs:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformAwsArgs']] = None,
                 azure: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformAzureArgs']] = None,
                 gcp: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformGcpArgs']] = None,
                 openstack: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformOpenstackArgs']] = None,
                 ovirt: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformOvirtArgs']] = None,
                 vsphere: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformVsphereArgs']] = None):
        """
        Platform contains platform-specific configuration for a ClusterDeprovision
        :param pulumi.Input['ClusterDeprovisionSpecPlatformAwsArgs'] aws: AWS contains AWS-specific deprovision settings
        :param pulumi.Input['ClusterDeprovisionSpecPlatformAzureArgs'] azure: Azure contains Azure-specific deprovision settings
        :param pulumi.Input['ClusterDeprovisionSpecPlatformGcpArgs'] gcp: GCP contains GCP-specific deprovision settings
        :param pulumi.Input['ClusterDeprovisionSpecPlatformOpenstackArgs'] openstack: OpenStack contains OpenStack-specific deprovision settings
        :param pulumi.Input['ClusterDeprovisionSpecPlatformOvirtArgs'] ovirt: Ovirt contains oVirt-specific deprovision settings
        :param pulumi.Input['ClusterDeprovisionSpecPlatformVsphereArgs'] vsphere: VSphere contains VMWare vSphere-specific deprovision settings
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if openstack is not None:
            pulumi.set(__self__, "openstack", openstack)
        if ovirt is not None:
            pulumi.set(__self__, "ovirt", ovirt)
        if vsphere is not None:
            pulumi.set(__self__, "vsphere", vsphere)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['ClusterDeprovisionSpecPlatformAwsArgs']]:
        """
        AWS contains AWS-specific deprovision settings
        """
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['ClusterDeprovisionSpecPlatformAzureArgs']]:
        """
        Azure contains Azure-specific deprovision settings
        """
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformAzureArgs']]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter
    def gcp(self) -> Optional[pulumi.Input['ClusterDeprovisionSpecPlatformGcpArgs']]:
        """
        GCP contains GCP-specific deprovision settings
        """
        return pulumi.get(self, "gcp")

    @gcp.setter
    def gcp(self, value: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformGcpArgs']]):
        pulumi.set(self, "gcp", value)

    @property
    @pulumi.getter
    def openstack(self) -> Optional[pulumi.Input['ClusterDeprovisionSpecPlatformOpenstackArgs']]:
        """
        OpenStack contains OpenStack-specific deprovision settings
        """
        return pulumi.get(self, "openstack")

    @openstack.setter
    def openstack(self, value: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformOpenstackArgs']]):
        pulumi.set(self, "openstack", value)

    @property
    @pulumi.getter
    def ovirt(self) -> Optional[pulumi.Input['ClusterDeprovisionSpecPlatformOvirtArgs']]:
        """
        Ovirt contains oVirt-specific deprovision settings
        """
        return pulumi.get(self, "ovirt")

    @ovirt.setter
    def ovirt(self, value: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformOvirtArgs']]):
        pulumi.set(self, "ovirt", value)

    @property
    @pulumi.getter
    def vsphere(self) -> Optional[pulumi.Input['ClusterDeprovisionSpecPlatformVsphereArgs']]:
        """
        VSphere contains VMWare vSphere-specific deprovision settings
        """
        return pulumi.get(self, "vsphere")

    @vsphere.setter
    def vsphere(self, value: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformVsphereArgs']]):
        pulumi.set(self, "vsphere", value)


@pulumi.input_type
class ClusterDeprovisionSpecPlatformAwsArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 credentials_secret_ref: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformAwsCredentialsSecretRefArgs']] = None):
        """
        AWS contains AWS-specific deprovision settings
        :param pulumi.Input[str] region: Region is the AWS region for this deprovisioning
        :param pulumi.Input['ClusterDeprovisionSpecPlatformAwsCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef is the AWS account credentials to use for deprovisioning the cluster
        """
        pulumi.set(__self__, "region", region)
        if credentials_secret_ref is not None:
            pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region is the AWS region for this deprovisioning
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> Optional[pulumi.Input['ClusterDeprovisionSpecPlatformAwsCredentialsSecretRefArgs']]:
        """
        CredentialsSecretRef is the AWS account credentials to use for deprovisioning the cluster
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformAwsCredentialsSecretRefArgs']]):
        pulumi.set(self, "credentials_secret_ref", value)


@pulumi.input_type
class ClusterDeprovisionSpecPlatformAwsCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef is the AWS account credentials to use for deprovisioning the cluster
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeprovisionSpecPlatformAzureArgs:
    def __init__(__self__, *,
                 credentials_secret_ref: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformAzureCredentialsSecretRefArgs']] = None):
        """
        Azure contains Azure-specific deprovision settings
        :param pulumi.Input['ClusterDeprovisionSpecPlatformAzureCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef is the Azure account credentials to use for deprovisioning the cluster
        """
        if credentials_secret_ref is not None:
            pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> Optional[pulumi.Input['ClusterDeprovisionSpecPlatformAzureCredentialsSecretRefArgs']]:
        """
        CredentialsSecretRef is the Azure account credentials to use for deprovisioning the cluster
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformAzureCredentialsSecretRefArgs']]):
        pulumi.set(self, "credentials_secret_ref", value)


@pulumi.input_type
class ClusterDeprovisionSpecPlatformAzureCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef is the Azure account credentials to use for deprovisioning the cluster
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeprovisionSpecPlatformGcpArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 credentials_secret_ref: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformGcpCredentialsSecretRefArgs']] = None):
        """
        GCP contains GCP-specific deprovision settings
        :param pulumi.Input[str] region: Region is the GCP region for this deprovision
        :param pulumi.Input['ClusterDeprovisionSpecPlatformGcpCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef is the GCP account credentials to use for deprovisioning the cluster
        """
        pulumi.set(__self__, "region", region)
        if credentials_secret_ref is not None:
            pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region is the GCP region for this deprovision
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> Optional[pulumi.Input['ClusterDeprovisionSpecPlatformGcpCredentialsSecretRefArgs']]:
        """
        CredentialsSecretRef is the GCP account credentials to use for deprovisioning the cluster
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformGcpCredentialsSecretRefArgs']]):
        pulumi.set(self, "credentials_secret_ref", value)


@pulumi.input_type
class ClusterDeprovisionSpecPlatformGcpCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef is the GCP account credentials to use for deprovisioning the cluster
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeprovisionSpecPlatformOpenstackArgs:
    def __init__(__self__, *,
                 cloud: pulumi.Input[str],
                 credentials_secret_ref: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformOpenstackCredentialsSecretRefArgs']] = None):
        """
        OpenStack contains OpenStack-specific deprovision settings
        :param pulumi.Input[str] cloud: Cloud is the secion in the clouds.yaml secret below to use for auth/connectivity.
        :param pulumi.Input['ClusterDeprovisionSpecPlatformOpenstackCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef is the OpenStack account credentials to use for deprovisioning the cluster
        """
        pulumi.set(__self__, "cloud", cloud)
        if credentials_secret_ref is not None:
            pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)

    @property
    @pulumi.getter
    def cloud(self) -> pulumi.Input[str]:
        """
        Cloud is the secion in the clouds.yaml secret below to use for auth/connectivity.
        """
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud", value)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> Optional[pulumi.Input['ClusterDeprovisionSpecPlatformOpenstackCredentialsSecretRefArgs']]:
        """
        CredentialsSecretRef is the OpenStack account credentials to use for deprovisioning the cluster
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: Optional[pulumi.Input['ClusterDeprovisionSpecPlatformOpenstackCredentialsSecretRefArgs']]):
        pulumi.set(self, "credentials_secret_ref", value)


@pulumi.input_type
class ClusterDeprovisionSpecPlatformOpenstackCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef is the OpenStack account credentials to use for deprovisioning the cluster
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeprovisionSpecPlatformOvirtArgs:
    def __init__(__self__, *,
                 certificates_secret_ref: pulumi.Input['ClusterDeprovisionSpecPlatformOvirtCertificatesSecretRefArgs'],
                 cluster_id: pulumi.Input[str],
                 credentials_secret_ref: pulumi.Input['ClusterDeprovisionSpecPlatformOvirtCredentialsSecretRefArgs']):
        """
        Ovirt contains oVirt-specific deprovision settings
        :param pulumi.Input['ClusterDeprovisionSpecPlatformOvirtCertificatesSecretRefArgs'] certificates_secret_ref: CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with the oVirt.
        :param pulumi.Input[str] cluster_id: The oVirt cluster ID
        :param pulumi.Input['ClusterDeprovisionSpecPlatformOvirtCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef is the oVirt account credentials to use for deprovisioning the cluster secret fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        """
        pulumi.set(__self__, "certificates_secret_ref", certificates_secret_ref)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)

    @property
    @pulumi.getter(name="certificatesSecretRef")
    def certificates_secret_ref(self) -> pulumi.Input['ClusterDeprovisionSpecPlatformOvirtCertificatesSecretRefArgs']:
        """
        CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with the oVirt.
        """
        return pulumi.get(self, "certificates_secret_ref")

    @certificates_secret_ref.setter
    def certificates_secret_ref(self, value: pulumi.Input['ClusterDeprovisionSpecPlatformOvirtCertificatesSecretRefArgs']):
        pulumi.set(self, "certificates_secret_ref", value)

    @property
    @pulumi.getter(name="clusterID")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        The oVirt cluster ID
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['ClusterDeprovisionSpecPlatformOvirtCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef is the oVirt account credentials to use for deprovisioning the cluster secret fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['ClusterDeprovisionSpecPlatformOvirtCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)


@pulumi.input_type
class ClusterDeprovisionSpecPlatformOvirtCertificatesSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with the oVirt.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeprovisionSpecPlatformOvirtCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef is the oVirt account credentials to use for deprovisioning the cluster secret fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeprovisionSpecPlatformVsphereArgs:
    def __init__(__self__, *,
                 certificates_secret_ref: pulumi.Input['ClusterDeprovisionSpecPlatformVsphereCertificatesSecretRefArgs'],
                 credentials_secret_ref: pulumi.Input['ClusterDeprovisionSpecPlatformVsphereCredentialsSecretRefArgs'],
                 v_center: pulumi.Input[str]):
        """
        VSphere contains VMWare vSphere-specific deprovision settings
        :param pulumi.Input['ClusterDeprovisionSpecPlatformVsphereCertificatesSecretRefArgs'] certificates_secret_ref: CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        :param pulumi.Input['ClusterDeprovisionSpecPlatformVsphereCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef is the vSphere account credentials to use for deprovisioning the cluster
        :param pulumi.Input[str] v_center: VCenter is the vSphere vCenter hostname.
        """
        pulumi.set(__self__, "certificates_secret_ref", certificates_secret_ref)
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "v_center", v_center)

    @property
    @pulumi.getter(name="certificatesSecretRef")
    def certificates_secret_ref(self) -> pulumi.Input['ClusterDeprovisionSpecPlatformVsphereCertificatesSecretRefArgs']:
        """
        CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        """
        return pulumi.get(self, "certificates_secret_ref")

    @certificates_secret_ref.setter
    def certificates_secret_ref(self, value: pulumi.Input['ClusterDeprovisionSpecPlatformVsphereCertificatesSecretRefArgs']):
        pulumi.set(self, "certificates_secret_ref", value)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['ClusterDeprovisionSpecPlatformVsphereCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef is the vSphere account credentials to use for deprovisioning the cluster
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['ClusterDeprovisionSpecPlatformVsphereCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter(name="vCenter")
    def v_center(self) -> pulumi.Input[str]:
        """
        VCenter is the vSphere vCenter hostname.
        """
        return pulumi.get(self, "v_center")

    @v_center.setter
    def v_center(self, value: pulumi.Input[str]):
        pulumi.set(self, "v_center", value)


@pulumi.input_type
class ClusterDeprovisionSpecPlatformVsphereCertificatesSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeprovisionSpecPlatformVsphereCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef is the vSphere account credentials to use for deprovisioning the cluster
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterDeprovisionStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[bool]] = None):
        """
        ClusterDeprovisionStatus defines the observed state of ClusterDeprovision
        :param pulumi.Input[bool] completed: Completed is true when the uninstall has completed successfully
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[bool]]:
        """
        Completed is true when the uninstall has completed successfully
        """
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "completed", value)


@pulumi.input_type
class ClusterImageSetSpecArgs:
    def __init__(__self__, *,
                 release_image: pulumi.Input[str]):
        """
        ClusterImageSetSpec defines the desired state of ClusterImageSet
        :param pulumi.Input[str] release_image: ReleaseImage is the image that contains the payload to use when installing a cluster.
        """
        pulumi.set(__self__, "release_image", release_image)

    @property
    @pulumi.getter(name="releaseImage")
    def release_image(self) -> pulumi.Input[str]:
        """
        ReleaseImage is the image that contains the payload to use when installing a cluster.
        """
        return pulumi.get(self, "release_image")

    @release_image.setter
    def release_image(self, value: pulumi.Input[str]):
        pulumi.set(self, "release_image", value)


@pulumi.input_type
class ClusterPoolSpecArgs:
    def __init__(__self__, *,
                 base_domain: pulumi.Input[str],
                 image_set_ref: pulumi.Input['ClusterPoolSpecImageSetRefArgs'],
                 platform: pulumi.Input['ClusterPoolSpecPlatformArgs'],
                 size: pulumi.Input[int],
                 pull_secret_ref: Optional[pulumi.Input['ClusterPoolSpecPullSecretRefArgs']] = None):
        """
        ClusterPoolSpec defines the desired state of the ClusterPool.
        :param pulumi.Input[str] base_domain: BaseDomain is the base domain to use for all clusters created in this pool.
        :param pulumi.Input['ClusterPoolSpecImageSetRefArgs'] image_set_ref: ImageSetRef is a reference to a ClusterImageSet. The release image specified in the ClusterImageSet will be used by clusters created for this cluster pool.
        :param pulumi.Input['ClusterPoolSpecPlatformArgs'] platform: Platform encompasses the desired platform for the cluster.
        :param pulumi.Input[int] size: Size is the default number of clusters that we should keep provisioned and waiting for use.
        :param pulumi.Input['ClusterPoolSpecPullSecretRefArgs'] pull_secret_ref: PullSecretRef is the reference to the secret to use when pulling images.
        """
        pulumi.set(__self__, "base_domain", base_domain)
        pulumi.set(__self__, "image_set_ref", image_set_ref)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "size", size)
        if pull_secret_ref is not None:
            pulumi.set(__self__, "pull_secret_ref", pull_secret_ref)

    @property
    @pulumi.getter(name="baseDomain")
    def base_domain(self) -> pulumi.Input[str]:
        """
        BaseDomain is the base domain to use for all clusters created in this pool.
        """
        return pulumi.get(self, "base_domain")

    @base_domain.setter
    def base_domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "base_domain", value)

    @property
    @pulumi.getter(name="imageSetRef")
    def image_set_ref(self) -> pulumi.Input['ClusterPoolSpecImageSetRefArgs']:
        """
        ImageSetRef is a reference to a ClusterImageSet. The release image specified in the ClusterImageSet will be used by clusters created for this cluster pool.
        """
        return pulumi.get(self, "image_set_ref")

    @image_set_ref.setter
    def image_set_ref(self, value: pulumi.Input['ClusterPoolSpecImageSetRefArgs']):
        pulumi.set(self, "image_set_ref", value)

    @property
    @pulumi.getter
    def platform(self) -> pulumi.Input['ClusterPoolSpecPlatformArgs']:
        """
        Platform encompasses the desired platform for the cluster.
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: pulumi.Input['ClusterPoolSpecPlatformArgs']):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[int]:
        """
        Size is the default number of clusters that we should keep provisioned and waiting for use.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[int]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="pullSecretRef")
    def pull_secret_ref(self) -> Optional[pulumi.Input['ClusterPoolSpecPullSecretRefArgs']]:
        """
        PullSecretRef is the reference to the secret to use when pulling images.
        """
        return pulumi.get(self, "pull_secret_ref")

    @pull_secret_ref.setter
    def pull_secret_ref(self, value: Optional[pulumi.Input['ClusterPoolSpecPullSecretRefArgs']]):
        pulumi.set(self, "pull_secret_ref", value)


@pulumi.input_type
class ClusterPoolSpecImageSetRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ImageSetRef is a reference to a ClusterImageSet. The release image specified in the ClusterImageSet will be used by clusters created for this cluster pool.
        :param pulumi.Input[str] name: Name is the name of the ClusterImageSet that this refers to
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the ClusterImageSet that this refers to
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterPoolSpecPlatformArgs:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['ClusterPoolSpecPlatformAwsArgs']] = None,
                 azure: Optional[pulumi.Input['ClusterPoolSpecPlatformAzureArgs']] = None,
                 baremetal: Optional[pulumi.Input['ClusterPoolSpecPlatformBaremetalArgs']] = None,
                 gcp: Optional[pulumi.Input['ClusterPoolSpecPlatformGcpArgs']] = None,
                 openstack: Optional[pulumi.Input['ClusterPoolSpecPlatformOpenstackArgs']] = None,
                 ovirt: Optional[pulumi.Input['ClusterPoolSpecPlatformOvirtArgs']] = None,
                 vsphere: Optional[pulumi.Input['ClusterPoolSpecPlatformVsphereArgs']] = None):
        """
        Platform encompasses the desired platform for the cluster.
        :param pulumi.Input['ClusterPoolSpecPlatformAwsArgs'] aws: AWS is the configuration used when installing on AWS.
        :param pulumi.Input['ClusterPoolSpecPlatformAzureArgs'] azure: Azure is the configuration used when installing on Azure.
        :param pulumi.Input['ClusterPoolSpecPlatformBaremetalArgs'] baremetal: BareMetal is the configuration used when installing on bare metal.
        :param pulumi.Input['ClusterPoolSpecPlatformGcpArgs'] gcp: GCP is the configuration used when installing on Google Cloud Platform.
        :param pulumi.Input['ClusterPoolSpecPlatformOpenstackArgs'] openstack: OpenStack is the configuration used when installing on OpenStack
        :param pulumi.Input['ClusterPoolSpecPlatformOvirtArgs'] ovirt: Ovirt is the configuration used when installing on oVirt
        :param pulumi.Input['ClusterPoolSpecPlatformVsphereArgs'] vsphere: VSphere is the configuration used when installing on vSphere
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if baremetal is not None:
            pulumi.set(__self__, "baremetal", baremetal)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if openstack is not None:
            pulumi.set(__self__, "openstack", openstack)
        if ovirt is not None:
            pulumi.set(__self__, "ovirt", ovirt)
        if vsphere is not None:
            pulumi.set(__self__, "vsphere", vsphere)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['ClusterPoolSpecPlatformAwsArgs']]:
        """
        AWS is the configuration used when installing on AWS.
        """
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['ClusterPoolSpecPlatformAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['ClusterPoolSpecPlatformAzureArgs']]:
        """
        Azure is the configuration used when installing on Azure.
        """
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['ClusterPoolSpecPlatformAzureArgs']]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter
    def baremetal(self) -> Optional[pulumi.Input['ClusterPoolSpecPlatformBaremetalArgs']]:
        """
        BareMetal is the configuration used when installing on bare metal.
        """
        return pulumi.get(self, "baremetal")

    @baremetal.setter
    def baremetal(self, value: Optional[pulumi.Input['ClusterPoolSpecPlatformBaremetalArgs']]):
        pulumi.set(self, "baremetal", value)

    @property
    @pulumi.getter
    def gcp(self) -> Optional[pulumi.Input['ClusterPoolSpecPlatformGcpArgs']]:
        """
        GCP is the configuration used when installing on Google Cloud Platform.
        """
        return pulumi.get(self, "gcp")

    @gcp.setter
    def gcp(self, value: Optional[pulumi.Input['ClusterPoolSpecPlatformGcpArgs']]):
        pulumi.set(self, "gcp", value)

    @property
    @pulumi.getter
    def openstack(self) -> Optional[pulumi.Input['ClusterPoolSpecPlatformOpenstackArgs']]:
        """
        OpenStack is the configuration used when installing on OpenStack
        """
        return pulumi.get(self, "openstack")

    @openstack.setter
    def openstack(self, value: Optional[pulumi.Input['ClusterPoolSpecPlatformOpenstackArgs']]):
        pulumi.set(self, "openstack", value)

    @property
    @pulumi.getter
    def ovirt(self) -> Optional[pulumi.Input['ClusterPoolSpecPlatformOvirtArgs']]:
        """
        Ovirt is the configuration used when installing on oVirt
        """
        return pulumi.get(self, "ovirt")

    @ovirt.setter
    def ovirt(self, value: Optional[pulumi.Input['ClusterPoolSpecPlatformOvirtArgs']]):
        pulumi.set(self, "ovirt", value)

    @property
    @pulumi.getter
    def vsphere(self) -> Optional[pulumi.Input['ClusterPoolSpecPlatformVsphereArgs']]:
        """
        VSphere is the configuration used when installing on vSphere
        """
        return pulumi.get(self, "vsphere")

    @vsphere.setter
    def vsphere(self, value: Optional[pulumi.Input['ClusterPoolSpecPlatformVsphereArgs']]):
        pulumi.set(self, "vsphere", value)


@pulumi.input_type
class ClusterPoolSpecPlatformAwsArgs:
    def __init__(__self__, *,
                 credentials_secret_ref: pulumi.Input['ClusterPoolSpecPlatformAwsCredentialsSecretRefArgs'],
                 region: pulumi.Input[str],
                 user_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        AWS is the configuration used when installing on AWS.
        :param pulumi.Input['ClusterPoolSpecPlatformAwsCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
        :param pulumi.Input[str] region: Region specifies the AWS region where the cluster will be created.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] user_tags: UserTags specifies additional tags for AWS resources created for the cluster.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "region", region)
        if user_tags is not None:
            pulumi.set(__self__, "user_tags", user_tags)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['ClusterPoolSpecPlatformAwsCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['ClusterPoolSpecPlatformAwsCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region specifies the AWS region where the cluster will be created.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        UserTags specifies additional tags for AWS resources created for the cluster.
        """
        return pulumi.get(self, "user_tags")

    @user_tags.setter
    def user_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "user_tags", value)


@pulumi.input_type
class ClusterPoolSpecPlatformAwsCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterPoolSpecPlatformAzureArgs:
    def __init__(__self__, *,
                 credentials_secret_ref: pulumi.Input['ClusterPoolSpecPlatformAzureCredentialsSecretRefArgs'],
                 region: pulumi.Input[str],
                 base_domain_resource_group_name: Optional[pulumi.Input[str]] = None):
        """
        Azure is the configuration used when installing on Azure.
        :param pulumi.Input['ClusterPoolSpecPlatformAzureCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
        :param pulumi.Input[str] region: Region specifies the Azure region where the cluster will be created.
        :param pulumi.Input[str] base_domain_resource_group_name: BaseDomainResourceGroupName specifies the resource group where the azure DNS zone for the base domain is found
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "region", region)
        if base_domain_resource_group_name is not None:
            pulumi.set(__self__, "base_domain_resource_group_name", base_domain_resource_group_name)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['ClusterPoolSpecPlatformAzureCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['ClusterPoolSpecPlatformAzureCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region specifies the Azure region where the cluster will be created.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="baseDomainResourceGroupName")
    def base_domain_resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        BaseDomainResourceGroupName specifies the resource group where the azure DNS zone for the base domain is found
        """
        return pulumi.get(self, "base_domain_resource_group_name")

    @base_domain_resource_group_name.setter
    def base_domain_resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_domain_resource_group_name", value)


@pulumi.input_type
class ClusterPoolSpecPlatformAzureCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterPoolSpecPlatformBaremetalArgs:
    def __init__(__self__, *,
                 libvirt_ssh_private_key_secret_ref: pulumi.Input['ClusterPoolSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRefArgs']):
        """
        BareMetal is the configuration used when installing on bare metal.
        :param pulumi.Input['ClusterPoolSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRefArgs'] libvirt_ssh_private_key_secret_ref: LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        """
        pulumi.set(__self__, "libvirt_ssh_private_key_secret_ref", libvirt_ssh_private_key_secret_ref)

    @property
    @pulumi.getter(name="libvirtSSHPrivateKeySecretRef")
    def libvirt_ssh_private_key_secret_ref(self) -> pulumi.Input['ClusterPoolSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRefArgs']:
        """
        LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        """
        return pulumi.get(self, "libvirt_ssh_private_key_secret_ref")

    @libvirt_ssh_private_key_secret_ref.setter
    def libvirt_ssh_private_key_secret_ref(self, value: pulumi.Input['ClusterPoolSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRefArgs']):
        pulumi.set(self, "libvirt_ssh_private_key_secret_ref", value)


@pulumi.input_type
class ClusterPoolSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterPoolSpecPlatformGcpArgs:
    def __init__(__self__, *,
                 credentials_secret_ref: pulumi.Input['ClusterPoolSpecPlatformGcpCredentialsSecretRefArgs'],
                 region: pulumi.Input[str]):
        """
        GCP is the configuration used when installing on Google Cloud Platform.
        :param pulumi.Input['ClusterPoolSpecPlatformGcpCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
        :param pulumi.Input[str] region: Region specifies the GCP region where the cluster will be created.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['ClusterPoolSpecPlatformGcpCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['ClusterPoolSpecPlatformGcpCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region specifies the GCP region where the cluster will be created.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ClusterPoolSpecPlatformGcpCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterPoolSpecPlatformOpenstackArgs:
    def __init__(__self__, *,
                 cloud: pulumi.Input[str],
                 credentials_secret_ref: pulumi.Input['ClusterPoolSpecPlatformOpenstackCredentialsSecretRefArgs'],
                 trunk_support: Optional[pulumi.Input[bool]] = None):
        """
        OpenStack is the configuration used when installing on OpenStack
        :param pulumi.Input[str] cloud: Cloud will be used to indicate the OS_CLOUD value to use the right section from the cloud.yaml in the CredentialsSecretRef.
        :param pulumi.Input['ClusterPoolSpecPlatformOpenstackCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
        :param pulumi.Input[bool] trunk_support: TrunkSupport indicates whether or not to use trunk ports in your OpenShift cluster.
        """
        pulumi.set(__self__, "cloud", cloud)
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        if trunk_support is not None:
            pulumi.set(__self__, "trunk_support", trunk_support)

    @property
    @pulumi.getter
    def cloud(self) -> pulumi.Input[str]:
        """
        Cloud will be used to indicate the OS_CLOUD value to use the right section from the cloud.yaml in the CredentialsSecretRef.
        """
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud", value)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['ClusterPoolSpecPlatformOpenstackCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['ClusterPoolSpecPlatformOpenstackCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter(name="trunkSupport")
    def trunk_support(self) -> Optional[pulumi.Input[bool]]:
        """
        TrunkSupport indicates whether or not to use trunk ports in your OpenShift cluster.
        """
        return pulumi.get(self, "trunk_support")

    @trunk_support.setter
    def trunk_support(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trunk_support", value)


@pulumi.input_type
class ClusterPoolSpecPlatformOpenstackCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterPoolSpecPlatformOvirtArgs:
    def __init__(__self__, *,
                 certificates_secret_ref: pulumi.Input['ClusterPoolSpecPlatformOvirtCertificatesSecretRefArgs'],
                 credentials_secret_ref: pulumi.Input['ClusterPoolSpecPlatformOvirtCredentialsSecretRefArgs'],
                 ovirt_cluster_id: pulumi.Input[str],
                 storage_domain_id: pulumi.Input[str],
                 ovirt_network_name: Optional[pulumi.Input[str]] = None):
        """
        Ovirt is the configuration used when installing on oVirt
        :param pulumi.Input['ClusterPoolSpecPlatformOvirtCertificatesSecretRefArgs'] certificates_secret_ref: CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
        :param pulumi.Input['ClusterPoolSpecPlatformOvirtCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        :param pulumi.Input[str] ovirt_cluster_id: The target cluster under which all VMs will run
        :param pulumi.Input[str] storage_domain_id: The target storage domain under which all VM disk would be created.
        :param pulumi.Input[str] ovirt_network_name: The target network of all the network interfaces of the nodes. Omitting defaults to ovirtmgmt network which is a default network for evert ovirt cluster.
        """
        pulumi.set(__self__, "certificates_secret_ref", certificates_secret_ref)
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "ovirt_cluster_id", ovirt_cluster_id)
        pulumi.set(__self__, "storage_domain_id", storage_domain_id)
        if ovirt_network_name is not None:
            pulumi.set(__self__, "ovirt_network_name", ovirt_network_name)

    @property
    @pulumi.getter(name="certificatesSecretRef")
    def certificates_secret_ref(self) -> pulumi.Input['ClusterPoolSpecPlatformOvirtCertificatesSecretRefArgs']:
        """
        CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
        """
        return pulumi.get(self, "certificates_secret_ref")

    @certificates_secret_ref.setter
    def certificates_secret_ref(self, value: pulumi.Input['ClusterPoolSpecPlatformOvirtCertificatesSecretRefArgs']):
        pulumi.set(self, "certificates_secret_ref", value)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['ClusterPoolSpecPlatformOvirtCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['ClusterPoolSpecPlatformOvirtCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter
    def ovirt_cluster_id(self) -> pulumi.Input[str]:
        """
        The target cluster under which all VMs will run
        """
        return pulumi.get(self, "ovirt_cluster_id")

    @ovirt_cluster_id.setter
    def ovirt_cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ovirt_cluster_id", value)

    @property
    @pulumi.getter
    def storage_domain_id(self) -> pulumi.Input[str]:
        """
        The target storage domain under which all VM disk would be created.
        """
        return pulumi.get(self, "storage_domain_id")

    @storage_domain_id.setter
    def storage_domain_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_domain_id", value)

    @property
    @pulumi.getter
    def ovirt_network_name(self) -> Optional[pulumi.Input[str]]:
        """
        The target network of all the network interfaces of the nodes. Omitting defaults to ovirtmgmt network which is a default network for evert ovirt cluster.
        """
        return pulumi.get(self, "ovirt_network_name")

    @ovirt_network_name.setter
    def ovirt_network_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovirt_network_name", value)


@pulumi.input_type
class ClusterPoolSpecPlatformOvirtCertificatesSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterPoolSpecPlatformOvirtCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterPoolSpecPlatformVsphereArgs:
    def __init__(__self__, *,
                 certificates_secret_ref: pulumi.Input['ClusterPoolSpecPlatformVsphereCertificatesSecretRefArgs'],
                 credentials_secret_ref: pulumi.Input['ClusterPoolSpecPlatformVsphereCredentialsSecretRefArgs'],
                 datacenter: pulumi.Input[str],
                 default_datastore: pulumi.Input[str],
                 v_center: pulumi.Input[str],
                 cluster: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None):
        """
        VSphere is the configuration used when installing on vSphere
        :param pulumi.Input['ClusterPoolSpecPlatformVsphereCertificatesSecretRefArgs'] certificates_secret_ref: CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        :param pulumi.Input['ClusterPoolSpecPlatformVsphereCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
        :param pulumi.Input[str] datacenter: Datacenter is the name of the datacenter to use in the vCenter.
        :param pulumi.Input[str] default_datastore: DefaultDatastore is the default datastore to use for provisioning volumes.
        :param pulumi.Input[str] v_center: VCenter is the domain name or IP address of the vCenter.
        :param pulumi.Input[str] cluster: Cluster is the name of the cluster virtual machines will be cloned into.
        :param pulumi.Input[str] folder: Folder is the name of the folder that will be used and/or created for virtual machines.
        :param pulumi.Input[str] network: Network specifies the name of the network to be used by the cluster.
        """
        pulumi.set(__self__, "certificates_secret_ref", certificates_secret_ref)
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "default_datastore", default_datastore)
        pulumi.set(__self__, "v_center", v_center)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter(name="certificatesSecretRef")
    def certificates_secret_ref(self) -> pulumi.Input['ClusterPoolSpecPlatformVsphereCertificatesSecretRefArgs']:
        """
        CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        """
        return pulumi.get(self, "certificates_secret_ref")

    @certificates_secret_ref.setter
    def certificates_secret_ref(self, value: pulumi.Input['ClusterPoolSpecPlatformVsphereCertificatesSecretRefArgs']):
        pulumi.set(self, "certificates_secret_ref", value)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['ClusterPoolSpecPlatformVsphereCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['ClusterPoolSpecPlatformVsphereCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter
    def datacenter(self) -> pulumi.Input[str]:
        """
        Datacenter is the name of the datacenter to use in the vCenter.
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter", value)

    @property
    @pulumi.getter(name="defaultDatastore")
    def default_datastore(self) -> pulumi.Input[str]:
        """
        DefaultDatastore is the default datastore to use for provisioning volumes.
        """
        return pulumi.get(self, "default_datastore")

    @default_datastore.setter
    def default_datastore(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_datastore", value)

    @property
    @pulumi.getter(name="vCenter")
    def v_center(self) -> pulumi.Input[str]:
        """
        VCenter is the domain name or IP address of the vCenter.
        """
        return pulumi.get(self, "v_center")

    @v_center.setter
    def v_center(self, value: pulumi.Input[str]):
        pulumi.set(self, "v_center", value)

    @property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster is the name of the cluster virtual machines will be cloned into.
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        """
        Folder is the name of the folder that will be used and/or created for virtual machines.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        Network specifies the name of the network to be used by the cluster.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)


@pulumi.input_type
class ClusterPoolSpecPlatformVsphereCertificatesSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterPoolSpecPlatformVsphereCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterPoolSpecPullSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        PullSecretRef is the reference to the secret to use when pulling images.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterPoolStatusArgs:
    def __init__(__self__, *,
                 ready: pulumi.Input[int],
                 size: pulumi.Input[int],
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterPoolStatusConditionsArgs']]]] = None):
        """
        ClusterPoolStatus defines the observed state of ClusterPool
        :param pulumi.Input[int] ready: Ready is the number of unclaimed clusters that have been installed and are ready to be claimed.
        :param pulumi.Input[int] size: Size is the number of unclaimed clusters that have been created for the pool.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterPoolStatusConditionsArgs']]] conditions: Conditions includes more detailed status for the cluster pool
        """
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "size", size)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def ready(self) -> pulumi.Input[int]:
        """
        Ready is the number of unclaimed clusters that have been installed and are ready to be claimed.
        """
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: pulumi.Input[int]):
        pulumi.set(self, "ready", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[int]:
        """
        Size is the number of unclaimed clusters that have been created for the pool.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[int]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterPoolStatusConditionsArgs']]]]:
        """
        Conditions includes more detailed status for the cluster pool
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterPoolStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ClusterPoolStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_probe_time: Optional[pulumi.Input[str]] = None,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        ClusterPoolCondition contains details for the current condition of a cluster pool
        :param pulumi.Input[str] status: Status is the status of the condition.
        :param pulumi.Input[str] type: Type is the type of the condition.
        :param pulumi.Input[str] last_probe_time: LastProbeTime is the last time we probed the condition.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: Message is a human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @last_probe_time.setter
    def last_probe_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_probe_time", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class ClusterProvisionSpecArgs:
    def __init__(__self__, *,
                 attempt: pulumi.Input[int],
                 cluster_deployment_ref: pulumi.Input['ClusterProvisionSpecClusterDeploymentRefArgs'],
                 pod_spec: pulumi.Input['ClusterProvisionSpecPodSpecArgs'],
                 stage: pulumi.Input[str],
                 admin_kubeconfig_secret_ref: Optional[pulumi.Input['ClusterProvisionSpecAdminKubeconfigSecretRefArgs']] = None,
                 admin_password_secret_ref: Optional[pulumi.Input['ClusterProvisionSpecAdminPasswordSecretRefArgs']] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 infra_id: Optional[pulumi.Input[str]] = None,
                 install_log: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 prev_cluster_id: Optional[pulumi.Input[str]] = None,
                 prev_infra_id: Optional[pulumi.Input[str]] = None):
        """
        ClusterProvisionSpec defines the results of provisioning a cluster.
        :param pulumi.Input[int] attempt: Attempt is which attempt number of the cluster deployment that this ClusterProvision is
        :param pulumi.Input['ClusterProvisionSpecClusterDeploymentRefArgs'] cluster_deployment_ref: ClusterDeploymentRef references the cluster deployment provisioned.
        :param pulumi.Input['ClusterProvisionSpecPodSpecArgs'] pod_spec: PodSpec is the spec to use for the installer pod.
        :param pulumi.Input[str] stage: Stage is the stage of provisioning that the cluster deployment has reached.
        :param pulumi.Input['ClusterProvisionSpecAdminKubeconfigSecretRefArgs'] admin_kubeconfig_secret_ref: AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
        :param pulumi.Input['ClusterProvisionSpecAdminPasswordSecretRefArgs'] admin_password_secret_ref: AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
        :param pulumi.Input[str] cluster_id: ClusterID is a globally unique identifier for this cluster generated during installation. Used for reporting metrics among other places.
        :param pulumi.Input[str] infra_id: InfraID is an identifier for this cluster generated during installation and used for tagging/naming resources in cloud providers.
        :param pulumi.Input[str] install_log: InstallLog is the log from the installer.
        :param pulumi.Input[Mapping[str, Any]] metadata: Metadata is the metadata.json generated by the installer, providing metadata information about the cluster created.
        :param pulumi.Input[str] prev_cluster_id: PrevClusterID is the cluster ID of the previous failed provision attempt.
        :param pulumi.Input[str] prev_infra_id: PrevInfraID is the infra ID of the previous failed provision attempt.
        """
        pulumi.set(__self__, "attempt", attempt)
        pulumi.set(__self__, "cluster_deployment_ref", cluster_deployment_ref)
        pulumi.set(__self__, "pod_spec", pod_spec)
        pulumi.set(__self__, "stage", stage)
        if admin_kubeconfig_secret_ref is not None:
            pulumi.set(__self__, "admin_kubeconfig_secret_ref", admin_kubeconfig_secret_ref)
        if admin_password_secret_ref is not None:
            pulumi.set(__self__, "admin_password_secret_ref", admin_password_secret_ref)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if infra_id is not None:
            pulumi.set(__self__, "infra_id", infra_id)
        if install_log is not None:
            pulumi.set(__self__, "install_log", install_log)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if prev_cluster_id is not None:
            pulumi.set(__self__, "prev_cluster_id", prev_cluster_id)
        if prev_infra_id is not None:
            pulumi.set(__self__, "prev_infra_id", prev_infra_id)

    @property
    @pulumi.getter
    def attempt(self) -> pulumi.Input[int]:
        """
        Attempt is which attempt number of the cluster deployment that this ClusterProvision is
        """
        return pulumi.get(self, "attempt")

    @attempt.setter
    def attempt(self, value: pulumi.Input[int]):
        pulumi.set(self, "attempt", value)

    @property
    @pulumi.getter(name="clusterDeploymentRef")
    def cluster_deployment_ref(self) -> pulumi.Input['ClusterProvisionSpecClusterDeploymentRefArgs']:
        """
        ClusterDeploymentRef references the cluster deployment provisioned.
        """
        return pulumi.get(self, "cluster_deployment_ref")

    @cluster_deployment_ref.setter
    def cluster_deployment_ref(self, value: pulumi.Input['ClusterProvisionSpecClusterDeploymentRefArgs']):
        pulumi.set(self, "cluster_deployment_ref", value)

    @property
    @pulumi.getter(name="podSpec")
    def pod_spec(self) -> pulumi.Input['ClusterProvisionSpecPodSpecArgs']:
        """
        PodSpec is the spec to use for the installer pod.
        """
        return pulumi.get(self, "pod_spec")

    @pod_spec.setter
    def pod_spec(self, value: pulumi.Input['ClusterProvisionSpecPodSpecArgs']):
        pulumi.set(self, "pod_spec", value)

    @property
    @pulumi.getter
    def stage(self) -> pulumi.Input[str]:
        """
        Stage is the stage of provisioning that the cluster deployment has reached.
        """
        return pulumi.get(self, "stage")

    @stage.setter
    def stage(self, value: pulumi.Input[str]):
        pulumi.set(self, "stage", value)

    @property
    @pulumi.getter(name="adminKubeconfigSecretRef")
    def admin_kubeconfig_secret_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecAdminKubeconfigSecretRefArgs']]:
        """
        AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
        """
        return pulumi.get(self, "admin_kubeconfig_secret_ref")

    @admin_kubeconfig_secret_ref.setter
    def admin_kubeconfig_secret_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecAdminKubeconfigSecretRefArgs']]):
        pulumi.set(self, "admin_kubeconfig_secret_ref", value)

    @property
    @pulumi.getter(name="adminPasswordSecretRef")
    def admin_password_secret_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecAdminPasswordSecretRefArgs']]:
        """
        AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
        """
        return pulumi.get(self, "admin_password_secret_ref")

    @admin_password_secret_ref.setter
    def admin_password_secret_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecAdminPasswordSecretRefArgs']]):
        pulumi.set(self, "admin_password_secret_ref", value)

    @property
    @pulumi.getter(name="clusterID")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ClusterID is a globally unique identifier for this cluster generated during installation. Used for reporting metrics among other places.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="infraID")
    def infra_id(self) -> Optional[pulumi.Input[str]]:
        """
        InfraID is an identifier for this cluster generated during installation and used for tagging/naming resources in cloud providers.
        """
        return pulumi.get(self, "infra_id")

    @infra_id.setter
    def infra_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "infra_id", value)

    @property
    @pulumi.getter(name="installLog")
    def install_log(self) -> Optional[pulumi.Input[str]]:
        """
        InstallLog is the log from the installer.
        """
        return pulumi.get(self, "install_log")

    @install_log.setter
    def install_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "install_log", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Metadata is the metadata.json generated by the installer, providing metadata information about the cluster created.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="prevClusterID")
    def prev_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        PrevClusterID is the cluster ID of the previous failed provision attempt.
        """
        return pulumi.get(self, "prev_cluster_id")

    @prev_cluster_id.setter
    def prev_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prev_cluster_id", value)

    @property
    @pulumi.getter(name="prevInfraID")
    def prev_infra_id(self) -> Optional[pulumi.Input[str]]:
        """
        PrevInfraID is the infra ID of the previous failed provision attempt.
        """
        return pulumi.get(self, "prev_infra_id")

    @prev_infra_id.setter
    def prev_infra_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prev_infra_id", value)


@pulumi.input_type
class ClusterProvisionSpecAdminKubeconfigSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterProvisionSpecAdminPasswordSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterProvisionSpecClusterDeploymentRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        ClusterDeploymentRef references the cluster deployment provisioned.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecArgs:
    def __init__(__self__, *,
                 containers: pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersArgs']]],
                 active_deadline_seconds: Optional[pulumi.Input[int]] = None,
                 affinity: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityArgs']] = None,
                 automount_service_account_token: Optional[pulumi.Input[bool]] = None,
                 dns_config: Optional[pulumi.Input['ClusterProvisionSpecPodSpecDnsConfigArgs']] = None,
                 dns_policy: Optional[pulumi.Input[str]] = None,
                 enable_service_links: Optional[pulumi.Input[bool]] = None,
                 ephemeral_containers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersArgs']]]] = None,
                 host_aliases: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecHostAliasesArgs']]]] = None,
                 host_ipc: Optional[pulumi.Input[bool]] = None,
                 host_network: Optional[pulumi.Input[bool]] = None,
                 host_pid: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 image_pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecImagePullSecretsArgs']]]] = None,
                 init_containers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersArgs']]]] = None,
                 node_name: Optional[pulumi.Input[str]] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 overhead: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 preemption_policy: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 readiness_gates: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecReadinessGatesArgs']]]] = None,
                 restart_policy: Optional[pulumi.Input[str]] = None,
                 runtime_class_name: Optional[pulumi.Input[str]] = None,
                 scheduler_name: Optional[pulumi.Input[str]] = None,
                 security_context: Optional[pulumi.Input['ClusterProvisionSpecPodSpecSecurityContextArgs']] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 share_process_namespace: Optional[pulumi.Input[bool]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 termination_grace_period_seconds: Optional[pulumi.Input[int]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecTolerationsArgs']]]] = None,
                 topology_spread_constraints: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecTopologySpreadConstraintsArgs']]]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesArgs']]]] = None):
        """
        PodSpec is the spec to use for the installer pod.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersArgs']]] containers: List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
        :param pulumi.Input[int] active_deadline_seconds: Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        :param pulumi.Input['ClusterProvisionSpecPodSpecAffinityArgs'] affinity: If specified, the pod's scheduling constraints
        :param pulumi.Input[bool] automount_service_account_token: AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
        :param pulumi.Input['ClusterProvisionSpecPodSpecDnsConfigArgs'] dns_config: Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
        :param pulumi.Input[str] dns_policy: Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
        :param pulumi.Input[bool] enable_service_links: EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersArgs']]] ephemeral_containers: List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecHostAliasesArgs']]] host_aliases: HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
        :param pulumi.Input[bool] host_ipc: Use the host's ipc namespace. Optional: Default to false.
        :param pulumi.Input[bool] host_network: Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
        :param pulumi.Input[bool] host_pid: Use the host's pid namespace. Optional: Default to false.
        :param pulumi.Input[str] hostname: Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecImagePullSecretsArgs']]] image_pull_secrets: ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersArgs']]] init_containers: List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
        :param pulumi.Input[str] node_name: NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] overhead: Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.
        :param pulumi.Input[str] preemption_policy: PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature.
        :param pulumi.Input[int] priority: The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
        :param pulumi.Input[str] priority_class_name: If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecReadinessGatesArgs']]] readiness_gates: If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
        :param pulumi.Input[str] restart_policy: Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
        :param pulumi.Input[str] runtime_class_name: RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.
        :param pulumi.Input[str] scheduler_name: If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
        :param pulumi.Input['ClusterProvisionSpecPodSpecSecurityContextArgs'] security_context: SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
        :param pulumi.Input[str] service_account: DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
        :param pulumi.Input[str] service_account_name: ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
        :param pulumi.Input[bool] share_process_namespace: Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
        :param pulumi.Input[str] subdomain: If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
        :param pulumi.Input[int] termination_grace_period_seconds: Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecTolerationsArgs']]] tolerations: If specified, the pod's tolerations.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecTopologySpreadConstraintsArgs']]] topology_spread_constraints: TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. This field is only honored by clusters that enable the EvenPodsSpread feature. All topologySpreadConstraints are ANDed.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesArgs']]] volumes: List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
        """
        pulumi.set(__self__, "containers", containers)
        if active_deadline_seconds is not None:
            pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if automount_service_account_token is not None:
            pulumi.set(__self__, "automount_service_account_token", automount_service_account_token)
        if dns_config is not None:
            pulumi.set(__self__, "dns_config", dns_config)
        if dns_policy is not None:
            pulumi.set(__self__, "dns_policy", dns_policy)
        if enable_service_links is not None:
            pulumi.set(__self__, "enable_service_links", enable_service_links)
        if ephemeral_containers is not None:
            pulumi.set(__self__, "ephemeral_containers", ephemeral_containers)
        if host_aliases is not None:
            pulumi.set(__self__, "host_aliases", host_aliases)
        if host_ipc is not None:
            pulumi.set(__self__, "host_ipc", host_ipc)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if host_pid is not None:
            pulumi.set(__self__, "host_pid", host_pid)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if init_containers is not None:
            pulumi.set(__self__, "init_containers", init_containers)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if overhead is not None:
            pulumi.set(__self__, "overhead", overhead)
        if preemption_policy is not None:
            pulumi.set(__self__, "preemption_policy", preemption_policy)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if readiness_gates is not None:
            pulumi.set(__self__, "readiness_gates", readiness_gates)
        if restart_policy is not None:
            pulumi.set(__self__, "restart_policy", restart_policy)
        if runtime_class_name is not None:
            pulumi.set(__self__, "runtime_class_name", runtime_class_name)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if share_process_namespace is not None:
            pulumi.set(__self__, "share_process_namespace", share_process_namespace)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if topology_spread_constraints is not None:
            pulumi.set(__self__, "topology_spread_constraints", topology_spread_constraints)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def containers(self) -> pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersArgs']]]:
        """
        List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersArgs']]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        """
        return pulumi.get(self, "active_deadline_seconds")

    @active_deadline_seconds.setter
    def active_deadline_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_deadline_seconds", value)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityArgs']]:
        """
        If specified, the pod's scheduling constraints
        """
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="automountServiceAccountToken")
    def automount_service_account_token(self) -> Optional[pulumi.Input[bool]]:
        """
        AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
        """
        return pulumi.get(self, "automount_service_account_token")

    @automount_service_account_token.setter
    def automount_service_account_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automount_service_account_token", value)

    @property
    @pulumi.getter(name="dnsConfig")
    def dns_config(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecDnsConfigArgs']]:
        """
        Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
        """
        return pulumi.get(self, "dns_config")

    @dns_config.setter
    def dns_config(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecDnsConfigArgs']]):
        pulumi.set(self, "dns_config", value)

    @property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
        """
        return pulumi.get(self, "dns_policy")

    @dns_policy.setter
    def dns_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_policy", value)

    @property
    @pulumi.getter(name="enableServiceLinks")
    def enable_service_links(self) -> Optional[pulumi.Input[bool]]:
        """
        EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
        """
        return pulumi.get(self, "enable_service_links")

    @enable_service_links.setter
    def enable_service_links(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_service_links", value)

    @property
    @pulumi.getter(name="ephemeralContainers")
    def ephemeral_containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersArgs']]]]:
        """
        List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.
        """
        return pulumi.get(self, "ephemeral_containers")

    @ephemeral_containers.setter
    def ephemeral_containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersArgs']]]]):
        pulumi.set(self, "ephemeral_containers", value)

    @property
    @pulumi.getter(name="hostAliases")
    def host_aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecHostAliasesArgs']]]]:
        """
        HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
        """
        return pulumi.get(self, "host_aliases")

    @host_aliases.setter
    def host_aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecHostAliasesArgs']]]]):
        pulumi.set(self, "host_aliases", value)

    @property
    @pulumi.getter(name="hostIPC")
    def host_ipc(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the host's ipc namespace. Optional: Default to false.
        """
        return pulumi.get(self, "host_ipc")

    @host_ipc.setter
    def host_ipc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_ipc", value)

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[pulumi.Input[bool]]:
        """
        Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
        """
        return pulumi.get(self, "host_network")

    @host_network.setter
    def host_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_network", value)

    @property
    @pulumi.getter(name="hostPID")
    def host_pid(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the host's pid namespace. Optional: Default to false.
        """
        return pulumi.get(self, "host_pid")

    @host_pid.setter
    def host_pid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_pid", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecImagePullSecretsArgs']]]]:
        """
        ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter(name="initContainers")
    def init_containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersArgs']]]]:
        """
        List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
        """
        return pulumi.get(self, "init_containers")

    @init_containers.setter
    def init_containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersArgs']]]]):
        pulumi.set(self, "init_containers", value)

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[pulumi.Input[str]]:
        """
        NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
        """
        return pulumi.get(self, "node_name")

    @node_name.setter
    def node_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_name", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter
    def overhead(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.
        """
        return pulumi.get(self, "overhead")

    @overhead.setter
    def overhead(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "overhead", value)

    @property
    @pulumi.getter(name="preemptionPolicy")
    def preemption_policy(self) -> Optional[pulumi.Input[str]]:
        """
        PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature.
        """
        return pulumi.get(self, "preemption_policy")

    @preemption_policy.setter
    def preemption_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preemption_policy", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="readinessGates")
    def readiness_gates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecReadinessGatesArgs']]]]:
        """
        If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
        """
        return pulumi.get(self, "readiness_gates")

    @readiness_gates.setter
    def readiness_gates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecReadinessGatesArgs']]]]):
        pulumi.set(self, "readiness_gates", value)

    @property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
        """
        return pulumi.get(self, "restart_policy")

    @restart_policy.setter
    def restart_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_policy", value)

    @property
    @pulumi.getter(name="runtimeClassName")
    def runtime_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.
        """
        return pulumi.get(self, "runtime_class_name")

    @runtime_class_name.setter
    def runtime_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_class_name", value)

    @property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
        """
        return pulumi.get(self, "scheduler_name")

    @scheduler_name.setter
    def scheduler_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecSecurityContextArgs']]:
        """
        SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter(name="shareProcessNamespace")
    def share_process_namespace(self) -> Optional[pulumi.Input[bool]]:
        """
        Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
        """
        return pulumi.get(self, "share_process_namespace")

    @share_process_namespace.setter
    def share_process_namespace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "share_process_namespace", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
        """
        return pulumi.get(self, "termination_grace_period_seconds")

    @termination_grace_period_seconds.setter
    def termination_grace_period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "termination_grace_period_seconds", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecTolerationsArgs']]]]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)

    @property
    @pulumi.getter(name="topologySpreadConstraints")
    def topology_spread_constraints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecTopologySpreadConstraintsArgs']]]]:
        """
        TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. This field is only honored by clusters that enable the EvenPodsSpread feature. All topologySpreadConstraints are ANDed.
        """
        return pulumi.get(self, "topology_spread_constraints")

    @topology_spread_constraints.setter
    def topology_spread_constraints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecTopologySpreadConstraintsArgs']]]]):
        pulumi.set(self, "topology_spread_constraints", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesArgs']]]]:
        """
        List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityArgs:
    def __init__(__self__, *,
                 node_affinity: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityArgs']] = None,
                 pod_affinity: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityArgs']] = None,
                 pod_anti_affinity: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityArgs']] = None):
        """
        If specified, the pod's scheduling constraints
        :param pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityArgs'] node_affinity: Describes node affinity scheduling rules for the pod.
        :param pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityArgs'] pod_affinity: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityArgs'] pod_anti_affinity: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityArgs']]:
        """
        Describes node affinity scheduling rules for the pod.
        """
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityArgs']]):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityArgs']]:
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityArgs']]):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityArgs']]:
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']] = None):
        """
        Describes node affinity scheduling rules for the pod.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs'] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 preference: pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs'],
                 weight: pulumi.Input[int]):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs'] preference: A node selector term, associated with the corresponding weight.
        :param pulumi.Input[int] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']:
        """
        A node selector term, associated with the corresponding weight.
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]]] = None,
                 match_fields: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]]] = None):
        """
        A node selector term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]]]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]]]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]]]):
        pulumi.set(self, "match_fields", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 node_selector_terms: pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]]):
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(self, value: pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]]):
        pulumi.set(self, "node_selector_terms", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]]] = None,
                 match_fields: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]]] = None):
        """
        A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]]]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]]]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]]]):
        pulumi.set(self, "match_fields", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityPodAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 pod_affinity_term: pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'],
                 weight: pulumi.Input[int]):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'] pod_affinity_term: Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']:
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(self, value: pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(__self__, *,
                 topology_key: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 topology_key: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 pod_affinity_term: pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'],
                 weight: pulumi.Input[int]):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'] pod_affinity_term: Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']:
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(self, value: pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(__self__, *,
                 topology_key: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 topology_key: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvArgs']]]] = None,
                 env_from: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvFromArgs']]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 lifecycle: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecycleArgs']] = None,
                 liveness_probe: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersPortsArgs']]]] = None,
                 readiness_probe: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeArgs']] = None,
                 resources: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersResourcesArgs']] = None,
                 security_context: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersSecurityContextArgs']] = None,
                 startup_probe: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeArgs']] = None,
                 stdin: Optional[pulumi.Input[bool]] = None,
                 stdin_once: Optional[pulumi.Input[bool]] = None,
                 termination_message_path: Optional[pulumi.Input[str]] = None,
                 termination_message_policy: Optional[pulumi.Input[str]] = None,
                 tty: Optional[pulumi.Input[bool]] = None,
                 volume_devices: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersVolumeDevicesArgs']]]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersVolumeMountsArgs']]]] = None,
                 working_dir: Optional[pulumi.Input[str]] = None):
        """
        A single application container that you want to run within a pod.
        :param pulumi.Input[str] name: Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvArgs']]] env: List of environment variables to set in the container. Cannot be updated.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvFromArgs']]] env_from: List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        :param pulumi.Input[str] image: Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
        :param pulumi.Input[str] image_pull_policy: Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecycleArgs'] lifecycle: Actions that the management system should take in response to container lifecycle events. Cannot be updated.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeArgs'] liveness_probe: Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersPortsArgs']]] ports: List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeArgs'] readiness_probe: Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersResourcesArgs'] resources: Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersSecurityContextArgs'] security_context: Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeArgs'] startup_probe: StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[bool] stdin: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        :param pulumi.Input[bool] stdin_once: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        :param pulumi.Input[str] termination_message_path: Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
        :param pulumi.Input[str] termination_message_policy: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        :param pulumi.Input[bool] tty: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersVolumeDevicesArgs']]] volume_devices: volumeDevices is the list of block devices to be used by the container.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersVolumeMountsArgs']]] volume_mounts: Pod volumes to mount into the container's filesystem. Cannot be updated.
        :param pulumi.Input[str] working_dir: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvArgs']]]]:
        """
        List of environment variables to set in the container. Cannot be updated.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvFromArgs']]]]:
        """
        List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        """
        return pulumi.get(self, "env_from")

    @env_from.setter
    def env_from(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvFromArgs']]]]):
        pulumi.set(self, "env_from", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        """
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecycleArgs']]:
        """
        Actions that the management system should take in response to container lifecycle events. Cannot be updated.
        """
        return pulumi.get(self, "lifecycle")

    @lifecycle.setter
    def lifecycle(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecycleArgs']]):
        pulumi.set(self, "lifecycle", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeArgs']]:
        """
        Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersPortsArgs']]]]:
        """
        List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersPortsArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeArgs']]:
        """
        Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersResourcesArgs']]:
        """
        Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersSecurityContextArgs']]:
        """
        Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeArgs']]:
        """
        StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "startup_probe")

    @startup_probe.setter
    def startup_probe(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeArgs']]):
        pulumi.set(self, "startup_probe", value)

    @property
    @pulumi.getter
    def stdin(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        """
        return pulumi.get(self, "stdin")

    @stdin.setter
    def stdin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stdin", value)

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        """
        return pulumi.get(self, "stdin_once")

    @stdin_once.setter
    def stdin_once(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stdin_once", value)

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
        """
        return pulumi.get(self, "termination_message_path")

    @termination_message_path.setter
    def termination_message_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_message_path", value)

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        """
        return pulumi.get(self, "termination_message_policy")

    @termination_message_policy.setter
    def termination_message_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_message_policy", value)

    @property
    @pulumi.getter
    def tty(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        """
        return pulumi.get(self, "tty")

    @tty.setter
    def tty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tty", value)

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersVolumeDevicesArgs']]]]:
        """
        volumeDevices is the list of block devices to be used by the container.
        """
        return pulumi.get(self, "volume_devices")

    @volume_devices.setter
    def volume_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersVolumeDevicesArgs']]]]):
        pulumi.set(self, "volume_devices", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersVolumeMountsArgs']]]]:
        """
        Pod volumes to mount into the container's filesystem. Cannot be updated.
        """
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersVolumeMountsArgs']]]]):
        pulumi.set(self, "volume_mounts", value)

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        return pulumi.get(self, "working_dir")

    @working_dir.setter
    def working_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_dir", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersEnvFromArgs:
    def __init__(__self__, *,
                 config_map_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvFromConfigMapRefArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 secret_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvFromSecretRefArgs']] = None):
        """
        EnvFromSource represents the source of a set of ConfigMaps
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvFromConfigMapRefArgs'] config_map_ref: The ConfigMap to select from
        :param pulumi.Input[str] prefix: An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvFromSecretRefArgs'] secret_ref: The Secret to select from
        """
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvFromConfigMapRefArgs']]:
        """
        The ConfigMap to select from
        """
        return pulumi.get(self, "config_map_ref")

    @config_map_ref.setter
    def config_map_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvFromConfigMapRefArgs']]):
        pulumi.set(self, "config_map_ref", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvFromSecretRefArgs']]:
        """
        The Secret to select from
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvFromSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersEnvFromConfigMapRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        The ConfigMap to select from
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap must be defined
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersEnvFromSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        The Secret to select from
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret must be defined
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersEnvValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersEnvValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersEnvValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input[str]] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input[str] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersEnvValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLifecycleArgs:
    def __init__(__self__, *,
                 post_start: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartArgs']] = None,
                 pre_stop: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopArgs']] = None):
        """
        Actions that the management system should take in response to container lifecycle events. Cannot be updated.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartArgs'] post_start: PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopArgs'] pre_stop: PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartArgs']]:
        """
        PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "post_start")

    @post_start.setter
    def post_start(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartArgs']]):
        pulumi.set(self, "post_start", value)

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopArgs']]:
        """
        PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "pre_stop")

    @pre_stop.setter
    def pre_stop(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopArgs']]):
        pulumi.set(self, "pre_stop", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLifecyclePostStartArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartExecArgs']] = None,
                 http_get: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetArgs']] = None,
                 tcp_socket: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketArgs']] = None):
        """
        PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartExecArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartExecArgs']]:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetArgs']]:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketArgs']]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLifecyclePostStartExecArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetPortArgs'],
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetPortArgs'] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetPortArgs']:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketPortArgs'],
                 host: Optional[pulumi.Input[str]] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketPortArgs'] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketPortArgs']:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLifecyclePreStopArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopExecArgs']] = None,
                 http_get: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetArgs']] = None,
                 tcp_socket: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketArgs']] = None):
        """
        PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopExecArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopExecArgs']]:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetArgs']]:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketArgs']]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLifecyclePreStopExecArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetPortArgs'],
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetPortArgs'] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetPortArgs']:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketPortArgs'],
                 host: Optional[pulumi.Input[str]] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketPortArgs'] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketPortArgs']:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLivenessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 http_get: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeExecArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeExecArgs']]:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetArgs']]:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketArgs']]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLivenessProbeExecArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetPortArgs'],
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetHttpHeadersArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetPortArgs'] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetHttpHeadersArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetPortArgs']:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetHttpHeadersArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketPortArgs'],
                 host: Optional[pulumi.Input[str]] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketPortArgs'] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketPortArgs']:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersPortsArgs:
    def __init__(__self__, *,
                 container_port: pulumi.Input[int],
                 host_ip: Optional[pulumi.Input[str]] = None,
                 host_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        ContainerPort represents a network port in a single container.
        :param pulumi.Input[int] container_port: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        :param pulumi.Input[str] host_ip: What host IP to bind the external port to.
        :param pulumi.Input[int] host_port: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        :param pulumi.Input[str] name: If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
        :param pulumi.Input[str] protocol: Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        """
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> pulumi.Input[int]:
        """
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        """
        return pulumi.get(self, "container_port")

    @container_port.setter
    def container_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "container_port", value)

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[pulumi.Input[str]]:
        """
        What host IP to bind the external port to.
        """
        return pulumi.get(self, "host_ip")

    @host_ip.setter
    def host_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_ip", value)

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[pulumi.Input[int]]:
        """
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        """
        return pulumi.get(self, "host_port")

    @host_port.setter
    def host_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_port", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersReadinessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 http_get: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeExecArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeExecArgs']]:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetArgs']]:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketArgs']]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersReadinessProbeExecArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetPortArgs'],
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetHttpHeadersArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetPortArgs'] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetHttpHeadersArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetPortArgs']:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetHttpHeadersArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketPortArgs'],
                 host: Optional[pulumi.Input[str]] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketPortArgs'] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketPortArgs']:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersSecurityContextArgs:
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[pulumi.Input[bool]] = None,
                 capabilities: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersSecurityContextCapabilitiesArgs']] = None,
                 privileged: Optional[pulumi.Input[bool]] = None,
                 proc_mount: Optional[pulumi.Input[str]] = None,
                 read_only_root_filesystem: Optional[pulumi.Input[bool]] = None,
                 run_as_group: Optional[pulumi.Input[int]] = None,
                 run_as_non_root: Optional[pulumi.Input[bool]] = None,
                 run_as_user: Optional[pulumi.Input[int]] = None,
                 se_linux_options: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersSecurityContextSeLinuxOptionsArgs']] = None,
                 windows_options: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersSecurityContextWindowsOptionsArgs']] = None):
        """
        Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param pulumi.Input[bool] allow_privilege_escalation: AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersSecurityContextCapabilitiesArgs'] capabilities: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param pulumi.Input[bool] privileged: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        :param pulumi.Input[str] proc_mount: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        :param pulumi.Input[bool] read_only_root_filesystem: Whether this container has a read-only root filesystem. Default is false.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersSecurityContextSeLinuxOptionsArgs'] se_linux_options: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersSecurityContextWindowsOptionsArgs'] windows_options: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[pulumi.Input[bool]]:
        """
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        """
        return pulumi.get(self, "allow_privilege_escalation")

    @allow_privilege_escalation.setter
    def allow_privilege_escalation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_privilege_escalation", value)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersSecurityContextCapabilitiesArgs']]:
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        """
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersSecurityContextCapabilitiesArgs']]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter
    def privileged(self) -> Optional[pulumi.Input[bool]]:
        """
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        """
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[pulumi.Input[str]]:
        """
        procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        """
        return pulumi.get(self, "proc_mount")

    @proc_mount.setter
    def proc_mount(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proc_mount", value)

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container has a read-only root filesystem. Default is false.
        """
        return pulumi.get(self, "read_only_root_filesystem")

    @read_only_root_filesystem.setter
    def read_only_root_filesystem(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only_root_filesystem", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersSecurityContextSeLinuxOptionsArgs']]:
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersSecurityContextSeLinuxOptionsArgs']]):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersSecurityContextWindowsOptionsArgs']]:
        """
        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "windows_options")

    @windows_options.setter
    def windows_options(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersSecurityContextWindowsOptionsArgs']]):
        pulumi.set(self, "windows_options", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersSecurityContextCapabilitiesArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 drop: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] add: Added capabilities
        :param pulumi.Input[Sequence[pulumi.Input[str]]] drop: Removed capabilities
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Added capabilities
        """
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Removed capabilities
        """
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "drop", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersSecurityContextSeLinuxOptionsArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersSecurityContextWindowsOptionsArgs:
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[pulumi.Input[str]] = None,
                 gmsa_credential_spec_name: Optional[pulumi.Input[str]] = None,
                 run_as_user_name: Optional[pulumi.Input[str]] = None):
        """
        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] gmsa_credential_spec: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        :param pulumi.Input[str] gmsa_credential_spec_name: GMSACredentialSpecName is the name of the GMSA credential spec to use.
        :param pulumi.Input[str] run_as_user_name: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[pulumi.Input[str]]:
        """
        GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        """
        return pulumi.get(self, "gmsa_credential_spec")

    @gmsa_credential_spec.setter
    def gmsa_credential_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_credential_spec", value)

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[pulumi.Input[str]]:
        """
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
        """
        return pulumi.get(self, "gmsa_credential_spec_name")

    @gmsa_credential_spec_name.setter
    def gmsa_credential_spec_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_credential_spec_name", value)

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user_name")

    @run_as_user_name.setter
    def run_as_user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user_name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersStartupProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 http_get: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeExecArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeExecArgs']]:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetArgs']]:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketArgs']]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersStartupProbeExecArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetPortArgs'],
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetHttpHeadersArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetPortArgs'] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetHttpHeadersArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetPortArgs']:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetHttpHeadersArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketPortArgs'],
                 host: Optional[pulumi.Input[str]] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketPortArgs'] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketPortArgs']:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersVolumeDevicesArgs:
    def __init__(__self__, *,
                 device_path: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        volumeDevice describes a mapping of a raw block device within a container.
        :param pulumi.Input[str] device_path: devicePath is the path inside of the container that the device will be mapped to.
        :param pulumi.Input[str] name: name must match the name of a persistentVolumeClaim in the pod
        """
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> pulumi.Input[str]:
        """
        devicePath is the path inside of the container that the device will be mapped to.
        """
        return pulumi.get(self, "device_path")

    @device_path.setter
    def device_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name must match the name of a persistentVolumeClaim in the pod
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecContainersVolumeMountsArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        """
        VolumeMount describes a mounting of a Volume within a container.
        :param pulumi.Input[str] mount_path: Path within the container at which the volume should be mounted.  Must not contain ':'.
        :param pulumi.Input[str] name: This must match the Name of a Volume.
        :param pulumi.Input[str] mount_propagation: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        :param pulumi.Input[bool] read_only: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        :param pulumi.Input[str] sub_path: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        :param pulumi.Input[str] sub_path_expr: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        """
        Path within the container at which the volume should be mounted.  Must not contain ':'.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        This must match the Name of a Volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        """
        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        """
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        """
        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecDnsConfigArgs:
    def __init__(__self__, *,
                 nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecDnsConfigOptionsArgs']]]] = None,
                 searches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nameservers: A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecDnsConfigOptionsArgs']]] options: A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] searches: A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
        """
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if searches is not None:
            pulumi.set(__self__, "searches", searches)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
        """
        return pulumi.get(self, "nameservers")

    @nameservers.setter
    def nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nameservers", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecDnsConfigOptionsArgs']]]]:
        """
        A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecDnsConfigOptionsArgs']]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def searches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
        """
        return pulumi.get(self, "searches")

    @searches.setter
    def searches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "searches", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecDnsConfigOptionsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        PodDNSConfigOption defines DNS resolver options of a pod.
        :param pulumi.Input[str] name: Required.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Required.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvArgs']]]] = None,
                 env_from: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvFromArgs']]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 lifecycle: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecycleArgs']] = None,
                 liveness_probe: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersPortsArgs']]]] = None,
                 readiness_probe: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeArgs']] = None,
                 resources: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersResourcesArgs']] = None,
                 security_context: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextArgs']] = None,
                 startup_probe: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeArgs']] = None,
                 stdin: Optional[pulumi.Input[bool]] = None,
                 stdin_once: Optional[pulumi.Input[bool]] = None,
                 target_container_name: Optional[pulumi.Input[str]] = None,
                 termination_message_path: Optional[pulumi.Input[str]] = None,
                 termination_message_policy: Optional[pulumi.Input[str]] = None,
                 tty: Optional[pulumi.Input[bool]] = None,
                 volume_devices: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersVolumeDevicesArgs']]]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersVolumeMountsArgs']]]] = None,
                 working_dir: Optional[pulumi.Input[str]] = None):
        """
        An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag.
        :param pulumi.Input[str] name: Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvArgs']]] env: List of environment variables to set in the container. Cannot be updated.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvFromArgs']]] env_from: List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        :param pulumi.Input[str] image: Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
        :param pulumi.Input[str] image_pull_policy: Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecycleArgs'] lifecycle: Lifecycle is not allowed for ephemeral containers.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeArgs'] liveness_probe: Probes are not allowed for ephemeral containers.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersPortsArgs']]] ports: Ports are not allowed for ephemeral containers.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeArgs'] readiness_probe: Probes are not allowed for ephemeral containers.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersResourcesArgs'] resources: Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextArgs'] security_context: SecurityContext is not allowed for ephemeral containers.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeArgs'] startup_probe: Probes are not allowed for ephemeral containers.
        :param pulumi.Input[bool] stdin: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        :param pulumi.Input[bool] stdin_once: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        :param pulumi.Input[str] target_container_name: If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.
        :param pulumi.Input[str] termination_message_path: Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
        :param pulumi.Input[str] termination_message_policy: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        :param pulumi.Input[bool] tty: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersVolumeDevicesArgs']]] volume_devices: volumeDevices is the list of block devices to be used by the container.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersVolumeMountsArgs']]] volume_mounts: Pod volumes to mount into the container's filesystem. Cannot be updated.
        :param pulumi.Input[str] working_dir: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if target_container_name is not None:
            pulumi.set(__self__, "target_container_name", target_container_name)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvArgs']]]]:
        """
        List of environment variables to set in the container. Cannot be updated.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvFromArgs']]]]:
        """
        List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        """
        return pulumi.get(self, "env_from")

    @env_from.setter
    def env_from(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvFromArgs']]]]):
        pulumi.set(self, "env_from", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        """
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecycleArgs']]:
        """
        Lifecycle is not allowed for ephemeral containers.
        """
        return pulumi.get(self, "lifecycle")

    @lifecycle.setter
    def lifecycle(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecycleArgs']]):
        pulumi.set(self, "lifecycle", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeArgs']]:
        """
        Probes are not allowed for ephemeral containers.
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersPortsArgs']]]]:
        """
        Ports are not allowed for ephemeral containers.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersPortsArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeArgs']]:
        """
        Probes are not allowed for ephemeral containers.
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersResourcesArgs']]:
        """
        Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextArgs']]:
        """
        SecurityContext is not allowed for ephemeral containers.
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeArgs']]:
        """
        Probes are not allowed for ephemeral containers.
        """
        return pulumi.get(self, "startup_probe")

    @startup_probe.setter
    def startup_probe(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeArgs']]):
        pulumi.set(self, "startup_probe", value)

    @property
    @pulumi.getter
    def stdin(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        """
        return pulumi.get(self, "stdin")

    @stdin.setter
    def stdin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stdin", value)

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        """
        return pulumi.get(self, "stdin_once")

    @stdin_once.setter
    def stdin_once(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stdin_once", value)

    @property
    @pulumi.getter(name="targetContainerName")
    def target_container_name(self) -> Optional[pulumi.Input[str]]:
        """
        If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.
        """
        return pulumi.get(self, "target_container_name")

    @target_container_name.setter
    def target_container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_container_name", value)

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
        """
        return pulumi.get(self, "termination_message_path")

    @termination_message_path.setter
    def termination_message_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_message_path", value)

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        """
        return pulumi.get(self, "termination_message_policy")

    @termination_message_policy.setter
    def termination_message_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_message_policy", value)

    @property
    @pulumi.getter
    def tty(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        """
        return pulumi.get(self, "tty")

    @tty.setter
    def tty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tty", value)

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersVolumeDevicesArgs']]]]:
        """
        volumeDevices is the list of block devices to be used by the container.
        """
        return pulumi.get(self, "volume_devices")

    @volume_devices.setter
    def volume_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersVolumeDevicesArgs']]]]):
        pulumi.set(self, "volume_devices", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersVolumeMountsArgs']]]]:
        """
        Pod volumes to mount into the container's filesystem. Cannot be updated.
        """
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersVolumeMountsArgs']]]]):
        pulumi.set(self, "volume_mounts", value)

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        return pulumi.get(self, "working_dir")

    @working_dir.setter
    def working_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_dir", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvFromArgs:
    def __init__(__self__, *,
                 config_map_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvFromConfigMapRefArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 secret_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvFromSecretRefArgs']] = None):
        """
        EnvFromSource represents the source of a set of ConfigMaps
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvFromConfigMapRefArgs'] config_map_ref: The ConfigMap to select from
        :param pulumi.Input[str] prefix: An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvFromSecretRefArgs'] secret_ref: The Secret to select from
        """
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvFromConfigMapRefArgs']]:
        """
        The ConfigMap to select from
        """
        return pulumi.get(self, "config_map_ref")

    @config_map_ref.setter
    def config_map_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvFromConfigMapRefArgs']]):
        pulumi.set(self, "config_map_ref", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvFromSecretRefArgs']]:
        """
        The Secret to select from
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvFromSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvFromConfigMapRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        The ConfigMap to select from
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap must be defined
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvFromSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        The Secret to select from
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret must be defined
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input[str]] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input[str] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecycleArgs:
    def __init__(__self__, *,
                 post_start: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartArgs']] = None,
                 pre_stop: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopArgs']] = None):
        """
        Lifecycle is not allowed for ephemeral containers.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartArgs'] post_start: PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopArgs'] pre_stop: PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartArgs']]:
        """
        PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "post_start")

    @post_start.setter
    def post_start(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartArgs']]):
        pulumi.set(self, "post_start", value)

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopArgs']]:
        """
        PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "pre_stop")

    @pre_stop.setter
    def pre_stop(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopArgs']]):
        pulumi.set(self, "pre_stop", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartExecArgs']] = None,
                 http_get: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetArgs']] = None,
                 tcp_socket: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketArgs']] = None):
        """
        PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartExecArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartExecArgs']]:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetArgs']]:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketArgs']]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartExecArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPortArgs'],
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPortArgs'] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPortArgs']:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPortArgs'],
                 host: Optional[pulumi.Input[str]] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPortArgs'] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPortArgs']:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopExecArgs']] = None,
                 http_get: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetArgs']] = None,
                 tcp_socket: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketArgs']] = None):
        """
        PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopExecArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopExecArgs']]:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetArgs']]:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketArgs']]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopExecArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPortArgs'],
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPortArgs'] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPortArgs']:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPortArgs'],
                 host: Optional[pulumi.Input[str]] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPortArgs'] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPortArgs']:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 http_get: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        Probes are not allowed for ephemeral containers.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeExecArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeExecArgs']]:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetArgs']]:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketArgs']]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeExecArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetPortArgs'],
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetPortArgs'] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetPortArgs']:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPortArgs'],
                 host: Optional[pulumi.Input[str]] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPortArgs'] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPortArgs']:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersPortsArgs:
    def __init__(__self__, *,
                 container_port: pulumi.Input[int],
                 host_ip: Optional[pulumi.Input[str]] = None,
                 host_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        ContainerPort represents a network port in a single container.
        :param pulumi.Input[int] container_port: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        :param pulumi.Input[str] host_ip: What host IP to bind the external port to.
        :param pulumi.Input[int] host_port: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        :param pulumi.Input[str] name: If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
        :param pulumi.Input[str] protocol: Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        """
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> pulumi.Input[int]:
        """
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        """
        return pulumi.get(self, "container_port")

    @container_port.setter
    def container_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "container_port", value)

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[pulumi.Input[str]]:
        """
        What host IP to bind the external port to.
        """
        return pulumi.get(self, "host_ip")

    @host_ip.setter
    def host_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_ip", value)

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[pulumi.Input[int]]:
        """
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        """
        return pulumi.get(self, "host_port")

    @host_port.setter
    def host_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_port", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 http_get: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        Probes are not allowed for ephemeral containers.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeExecArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeExecArgs']]:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetArgs']]:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketArgs']]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeExecArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetPortArgs'],
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetPortArgs'] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetPortArgs']:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPortArgs'],
                 host: Optional[pulumi.Input[str]] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPortArgs'] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPortArgs']:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextArgs:
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[pulumi.Input[bool]] = None,
                 capabilities: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextCapabilitiesArgs']] = None,
                 privileged: Optional[pulumi.Input[bool]] = None,
                 proc_mount: Optional[pulumi.Input[str]] = None,
                 read_only_root_filesystem: Optional[pulumi.Input[bool]] = None,
                 run_as_group: Optional[pulumi.Input[int]] = None,
                 run_as_non_root: Optional[pulumi.Input[bool]] = None,
                 run_as_user: Optional[pulumi.Input[int]] = None,
                 se_linux_options: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs']] = None,
                 windows_options: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextWindowsOptionsArgs']] = None):
        """
        SecurityContext is not allowed for ephemeral containers.
        :param pulumi.Input[bool] allow_privilege_escalation: AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextCapabilitiesArgs'] capabilities: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param pulumi.Input[bool] privileged: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        :param pulumi.Input[str] proc_mount: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        :param pulumi.Input[bool] read_only_root_filesystem: Whether this container has a read-only root filesystem. Default is false.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs'] se_linux_options: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextWindowsOptionsArgs'] windows_options: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[pulumi.Input[bool]]:
        """
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        """
        return pulumi.get(self, "allow_privilege_escalation")

    @allow_privilege_escalation.setter
    def allow_privilege_escalation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_privilege_escalation", value)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextCapabilitiesArgs']]:
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        """
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextCapabilitiesArgs']]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter
    def privileged(self) -> Optional[pulumi.Input[bool]]:
        """
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        """
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[pulumi.Input[str]]:
        """
        procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        """
        return pulumi.get(self, "proc_mount")

    @proc_mount.setter
    def proc_mount(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proc_mount", value)

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container has a read-only root filesystem. Default is false.
        """
        return pulumi.get(self, "read_only_root_filesystem")

    @read_only_root_filesystem.setter
    def read_only_root_filesystem(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only_root_filesystem", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs']]:
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs']]):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextWindowsOptionsArgs']]:
        """
        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "windows_options")

    @windows_options.setter
    def windows_options(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextWindowsOptionsArgs']]):
        pulumi.set(self, "windows_options", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextCapabilitiesArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 drop: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] add: Added capabilities
        :param pulumi.Input[Sequence[pulumi.Input[str]]] drop: Removed capabilities
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Added capabilities
        """
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Removed capabilities
        """
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "drop", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextWindowsOptionsArgs:
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[pulumi.Input[str]] = None,
                 gmsa_credential_spec_name: Optional[pulumi.Input[str]] = None,
                 run_as_user_name: Optional[pulumi.Input[str]] = None):
        """
        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] gmsa_credential_spec: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        :param pulumi.Input[str] gmsa_credential_spec_name: GMSACredentialSpecName is the name of the GMSA credential spec to use.
        :param pulumi.Input[str] run_as_user_name: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[pulumi.Input[str]]:
        """
        GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        """
        return pulumi.get(self, "gmsa_credential_spec")

    @gmsa_credential_spec.setter
    def gmsa_credential_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_credential_spec", value)

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[pulumi.Input[str]]:
        """
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
        """
        return pulumi.get(self, "gmsa_credential_spec_name")

    @gmsa_credential_spec_name.setter
    def gmsa_credential_spec_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_credential_spec_name", value)

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user_name")

    @run_as_user_name.setter
    def run_as_user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user_name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 http_get: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        Probes are not allowed for ephemeral containers.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeExecArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeExecArgs']]:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetArgs']]:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketArgs']]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeExecArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetPortArgs'],
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetPortArgs'] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetPortArgs']:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketPortArgs'],
                 host: Optional[pulumi.Input[str]] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketPortArgs'] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketPortArgs']:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersVolumeDevicesArgs:
    def __init__(__self__, *,
                 device_path: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        volumeDevice describes a mapping of a raw block device within a container.
        :param pulumi.Input[str] device_path: devicePath is the path inside of the container that the device will be mapped to.
        :param pulumi.Input[str] name: name must match the name of a persistentVolumeClaim in the pod
        """
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> pulumi.Input[str]:
        """
        devicePath is the path inside of the container that the device will be mapped to.
        """
        return pulumi.get(self, "device_path")

    @device_path.setter
    def device_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name must match the name of a persistentVolumeClaim in the pod
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecEphemeralContainersVolumeMountsArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        """
        VolumeMount describes a mounting of a Volume within a container.
        :param pulumi.Input[str] mount_path: Path within the container at which the volume should be mounted.  Must not contain ':'.
        :param pulumi.Input[str] name: This must match the Name of a Volume.
        :param pulumi.Input[str] mount_propagation: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        :param pulumi.Input[bool] read_only: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        :param pulumi.Input[str] sub_path: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        :param pulumi.Input[str] sub_path_expr: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        """
        Path within the container at which the volume should be mounted.  Must not contain ':'.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        This must match the Name of a Volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        """
        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        """
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        """
        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecHostAliasesArgs:
    def __init__(__self__, *,
                 hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hostnames: Hostnames for the above IP address.
        :param pulumi.Input[str] ip: IP address of the host file entry.
        """
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Hostnames for the above IP address.
        """
        return pulumi.get(self, "hostnames")

    @hostnames.setter
    def hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hostnames", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the host file entry.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvArgs']]]] = None,
                 env_from: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvFromArgs']]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 lifecycle: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecycleArgs']] = None,
                 liveness_probe: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersPortsArgs']]]] = None,
                 readiness_probe: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeArgs']] = None,
                 resources: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersResourcesArgs']] = None,
                 security_context: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersSecurityContextArgs']] = None,
                 startup_probe: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeArgs']] = None,
                 stdin: Optional[pulumi.Input[bool]] = None,
                 stdin_once: Optional[pulumi.Input[bool]] = None,
                 termination_message_path: Optional[pulumi.Input[str]] = None,
                 termination_message_policy: Optional[pulumi.Input[str]] = None,
                 tty: Optional[pulumi.Input[bool]] = None,
                 volume_devices: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersVolumeDevicesArgs']]]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersVolumeMountsArgs']]]] = None,
                 working_dir: Optional[pulumi.Input[str]] = None):
        """
        A single application container that you want to run within a pod.
        :param pulumi.Input[str] name: Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvArgs']]] env: List of environment variables to set in the container. Cannot be updated.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvFromArgs']]] env_from: List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        :param pulumi.Input[str] image: Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
        :param pulumi.Input[str] image_pull_policy: Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecycleArgs'] lifecycle: Actions that the management system should take in response to container lifecycle events. Cannot be updated.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeArgs'] liveness_probe: Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersPortsArgs']]] ports: List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeArgs'] readiness_probe: Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersResourcesArgs'] resources: Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersSecurityContextArgs'] security_context: Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeArgs'] startup_probe: StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[bool] stdin: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        :param pulumi.Input[bool] stdin_once: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        :param pulumi.Input[str] termination_message_path: Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
        :param pulumi.Input[str] termination_message_policy: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        :param pulumi.Input[bool] tty: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersVolumeDevicesArgs']]] volume_devices: volumeDevices is the list of block devices to be used by the container.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersVolumeMountsArgs']]] volume_mounts: Pod volumes to mount into the container's filesystem. Cannot be updated.
        :param pulumi.Input[str] working_dir: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvArgs']]]]:
        """
        List of environment variables to set in the container. Cannot be updated.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvFromArgs']]]]:
        """
        List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        """
        return pulumi.get(self, "env_from")

    @env_from.setter
    def env_from(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvFromArgs']]]]):
        pulumi.set(self, "env_from", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        """
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecycleArgs']]:
        """
        Actions that the management system should take in response to container lifecycle events. Cannot be updated.
        """
        return pulumi.get(self, "lifecycle")

    @lifecycle.setter
    def lifecycle(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecycleArgs']]):
        pulumi.set(self, "lifecycle", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeArgs']]:
        """
        Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersPortsArgs']]]]:
        """
        List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersPortsArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeArgs']]:
        """
        Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersResourcesArgs']]:
        """
        Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersSecurityContextArgs']]:
        """
        Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeArgs']]:
        """
        StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "startup_probe")

    @startup_probe.setter
    def startup_probe(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeArgs']]):
        pulumi.set(self, "startup_probe", value)

    @property
    @pulumi.getter
    def stdin(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        """
        return pulumi.get(self, "stdin")

    @stdin.setter
    def stdin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stdin", value)

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        """
        return pulumi.get(self, "stdin_once")

    @stdin_once.setter
    def stdin_once(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stdin_once", value)

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
        """
        return pulumi.get(self, "termination_message_path")

    @termination_message_path.setter
    def termination_message_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_message_path", value)

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        """
        return pulumi.get(self, "termination_message_policy")

    @termination_message_policy.setter
    def termination_message_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_message_policy", value)

    @property
    @pulumi.getter
    def tty(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        """
        return pulumi.get(self, "tty")

    @tty.setter
    def tty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tty", value)

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersVolumeDevicesArgs']]]]:
        """
        volumeDevices is the list of block devices to be used by the container.
        """
        return pulumi.get(self, "volume_devices")

    @volume_devices.setter
    def volume_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersVolumeDevicesArgs']]]]):
        pulumi.set(self, "volume_devices", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersVolumeMountsArgs']]]]:
        """
        Pod volumes to mount into the container's filesystem. Cannot be updated.
        """
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersVolumeMountsArgs']]]]):
        pulumi.set(self, "volume_mounts", value)

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        return pulumi.get(self, "working_dir")

    @working_dir.setter
    def working_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_dir", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersEnvFromArgs:
    def __init__(__self__, *,
                 config_map_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvFromConfigMapRefArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 secret_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvFromSecretRefArgs']] = None):
        """
        EnvFromSource represents the source of a set of ConfigMaps
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvFromConfigMapRefArgs'] config_map_ref: The ConfigMap to select from
        :param pulumi.Input[str] prefix: An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvFromSecretRefArgs'] secret_ref: The Secret to select from
        """
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvFromConfigMapRefArgs']]:
        """
        The ConfigMap to select from
        """
        return pulumi.get(self, "config_map_ref")

    @config_map_ref.setter
    def config_map_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvFromConfigMapRefArgs']]):
        pulumi.set(self, "config_map_ref", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvFromSecretRefArgs']]:
        """
        The Secret to select from
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvFromSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersEnvFromConfigMapRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        The ConfigMap to select from
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap must be defined
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersEnvFromSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        The Secret to select from
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret must be defined
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersEnvValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersEnvValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersEnvValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input[str]] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input[str] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersEnvValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLifecycleArgs:
    def __init__(__self__, *,
                 post_start: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartArgs']] = None,
                 pre_stop: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopArgs']] = None):
        """
        Actions that the management system should take in response to container lifecycle events. Cannot be updated.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartArgs'] post_start: PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopArgs'] pre_stop: PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartArgs']]:
        """
        PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "post_start")

    @post_start.setter
    def post_start(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartArgs']]):
        pulumi.set(self, "post_start", value)

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopArgs']]:
        """
        PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "pre_stop")

    @pre_stop.setter
    def pre_stop(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopArgs']]):
        pulumi.set(self, "pre_stop", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartExecArgs']] = None,
                 http_get: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetArgs']] = None,
                 tcp_socket: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketArgs']] = None):
        """
        PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartExecArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartExecArgs']]:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetArgs']]:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketArgs']]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartExecArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetPortArgs'],
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetPortArgs'] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetPortArgs']:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketPortArgs'],
                 host: Optional[pulumi.Input[str]] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketPortArgs'] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketPortArgs']:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopExecArgs']] = None,
                 http_get: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetArgs']] = None,
                 tcp_socket: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketArgs']] = None):
        """
        PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopExecArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopExecArgs']]:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetArgs']]:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketArgs']]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopExecArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetPortArgs'],
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetPortArgs'] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetPortArgs']:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketPortArgs'],
                 host: Optional[pulumi.Input[str]] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketPortArgs'] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketPortArgs']:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLivenessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 http_get: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeExecArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeExecArgs']]:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetArgs']]:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketArgs']]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLivenessProbeExecArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetPortArgs'],
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetPortArgs'] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetPortArgs']:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketPortArgs'],
                 host: Optional[pulumi.Input[str]] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketPortArgs'] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketPortArgs']:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersPortsArgs:
    def __init__(__self__, *,
                 container_port: pulumi.Input[int],
                 host_ip: Optional[pulumi.Input[str]] = None,
                 host_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        ContainerPort represents a network port in a single container.
        :param pulumi.Input[int] container_port: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        :param pulumi.Input[str] host_ip: What host IP to bind the external port to.
        :param pulumi.Input[int] host_port: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        :param pulumi.Input[str] name: If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
        :param pulumi.Input[str] protocol: Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        """
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> pulumi.Input[int]:
        """
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        """
        return pulumi.get(self, "container_port")

    @container_port.setter
    def container_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "container_port", value)

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[pulumi.Input[str]]:
        """
        What host IP to bind the external port to.
        """
        return pulumi.get(self, "host_ip")

    @host_ip.setter
    def host_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_ip", value)

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[pulumi.Input[int]]:
        """
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        """
        return pulumi.get(self, "host_port")

    @host_port.setter
    def host_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_port", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersReadinessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 http_get: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeExecArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeExecArgs']]:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetArgs']]:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketArgs']]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersReadinessProbeExecArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetPortArgs'],
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetPortArgs'] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetPortArgs']:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketPortArgs'],
                 host: Optional[pulumi.Input[str]] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketPortArgs'] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketPortArgs']:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersSecurityContextArgs:
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[pulumi.Input[bool]] = None,
                 capabilities: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersSecurityContextCapabilitiesArgs']] = None,
                 privileged: Optional[pulumi.Input[bool]] = None,
                 proc_mount: Optional[pulumi.Input[str]] = None,
                 read_only_root_filesystem: Optional[pulumi.Input[bool]] = None,
                 run_as_group: Optional[pulumi.Input[int]] = None,
                 run_as_non_root: Optional[pulumi.Input[bool]] = None,
                 run_as_user: Optional[pulumi.Input[int]] = None,
                 se_linux_options: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersSecurityContextSeLinuxOptionsArgs']] = None,
                 windows_options: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersSecurityContextWindowsOptionsArgs']] = None):
        """
        Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param pulumi.Input[bool] allow_privilege_escalation: AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersSecurityContextCapabilitiesArgs'] capabilities: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param pulumi.Input[bool] privileged: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        :param pulumi.Input[str] proc_mount: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        :param pulumi.Input[bool] read_only_root_filesystem: Whether this container has a read-only root filesystem. Default is false.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersSecurityContextSeLinuxOptionsArgs'] se_linux_options: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersSecurityContextWindowsOptionsArgs'] windows_options: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[pulumi.Input[bool]]:
        """
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        """
        return pulumi.get(self, "allow_privilege_escalation")

    @allow_privilege_escalation.setter
    def allow_privilege_escalation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_privilege_escalation", value)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersSecurityContextCapabilitiesArgs']]:
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        """
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersSecurityContextCapabilitiesArgs']]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter
    def privileged(self) -> Optional[pulumi.Input[bool]]:
        """
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        """
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[pulumi.Input[str]]:
        """
        procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        """
        return pulumi.get(self, "proc_mount")

    @proc_mount.setter
    def proc_mount(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proc_mount", value)

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container has a read-only root filesystem. Default is false.
        """
        return pulumi.get(self, "read_only_root_filesystem")

    @read_only_root_filesystem.setter
    def read_only_root_filesystem(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only_root_filesystem", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersSecurityContextSeLinuxOptionsArgs']]:
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersSecurityContextSeLinuxOptionsArgs']]):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersSecurityContextWindowsOptionsArgs']]:
        """
        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "windows_options")

    @windows_options.setter
    def windows_options(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersSecurityContextWindowsOptionsArgs']]):
        pulumi.set(self, "windows_options", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersSecurityContextCapabilitiesArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 drop: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] add: Added capabilities
        :param pulumi.Input[Sequence[pulumi.Input[str]]] drop: Removed capabilities
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Added capabilities
        """
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Removed capabilities
        """
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "drop", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersSecurityContextSeLinuxOptionsArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersSecurityContextWindowsOptionsArgs:
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[pulumi.Input[str]] = None,
                 gmsa_credential_spec_name: Optional[pulumi.Input[str]] = None,
                 run_as_user_name: Optional[pulumi.Input[str]] = None):
        """
        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] gmsa_credential_spec: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        :param pulumi.Input[str] gmsa_credential_spec_name: GMSACredentialSpecName is the name of the GMSA credential spec to use.
        :param pulumi.Input[str] run_as_user_name: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[pulumi.Input[str]]:
        """
        GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        """
        return pulumi.get(self, "gmsa_credential_spec")

    @gmsa_credential_spec.setter
    def gmsa_credential_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_credential_spec", value)

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[pulumi.Input[str]]:
        """
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
        """
        return pulumi.get(self, "gmsa_credential_spec_name")

    @gmsa_credential_spec_name.setter
    def gmsa_credential_spec_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_credential_spec_name", value)

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user_name")

    @run_as_user_name.setter
    def run_as_user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user_name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersStartupProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 http_get: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeExecArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input[int] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeExecArgs']]:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetArgs']]:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketArgs']]:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersStartupProbeExecArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetPortArgs'],
                 host: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetHttpHeadersArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        """
        HTTPGet specifies the http request to perform.
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetPortArgs'] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetHttpHeadersArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetPortArgs']:
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetHttpHeadersArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetHttpHeadersArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetHttpHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketPortArgs'],
                 host: Optional[pulumi.Input[str]] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketPortArgs'] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketPortArgs']:
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input['ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketPortArgs']):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketPortArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersVolumeDevicesArgs:
    def __init__(__self__, *,
                 device_path: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        volumeDevice describes a mapping of a raw block device within a container.
        :param pulumi.Input[str] device_path: devicePath is the path inside of the container that the device will be mapped to.
        :param pulumi.Input[str] name: name must match the name of a persistentVolumeClaim in the pod
        """
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> pulumi.Input[str]:
        """
        devicePath is the path inside of the container that the device will be mapped to.
        """
        return pulumi.get(self, "device_path")

    @device_path.setter
    def device_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name must match the name of a persistentVolumeClaim in the pod
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecInitContainersVolumeMountsArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        """
        VolumeMount describes a mounting of a Volume within a container.
        :param pulumi.Input[str] mount_path: Path within the container at which the volume should be mounted.  Must not contain ':'.
        :param pulumi.Input[str] name: This must match the Name of a Volume.
        :param pulumi.Input[str] mount_propagation: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        :param pulumi.Input[bool] read_only: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        :param pulumi.Input[str] sub_path: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        :param pulumi.Input[str] sub_path_expr: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        """
        Path within the container at which the volume should be mounted.  Must not contain ':'.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        This must match the Name of a Volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        """
        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        """
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        """
        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecReadinessGatesArgs:
    def __init__(__self__, *,
                 condition_type: pulumi.Input[str]):
        """
        PodReadinessGate contains the reference to a pod condition
        :param pulumi.Input[str] condition_type: ConditionType refers to a condition in the pod's condition list with matching type.
        """
        pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> pulumi.Input[str]:
        """
        ConditionType refers to a condition in the pod's condition list with matching type.
        """
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition_type", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecSecurityContextArgs:
    def __init__(__self__, *,
                 fs_group: Optional[pulumi.Input[int]] = None,
                 fs_group_change_policy: Optional[pulumi.Input[str]] = None,
                 run_as_group: Optional[pulumi.Input[int]] = None,
                 run_as_non_root: Optional[pulumi.Input[bool]] = None,
                 run_as_user: Optional[pulumi.Input[int]] = None,
                 se_linux_options: Optional[pulumi.Input['ClusterProvisionSpecPodSpecSecurityContextSeLinuxOptionsArgs']] = None,
                 supplemental_groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 sysctls: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecSecurityContextSysctlsArgs']]]] = None,
                 windows_options: Optional[pulumi.Input['ClusterProvisionSpecPodSpecSecurityContextWindowsOptionsArgs']] = None):
        """
        SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
        :param pulumi.Input[int] fs_group: A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
                1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
                If unset, the Kubelet will not modify the ownership and permissions of any volume.
        :param pulumi.Input[str] fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified defaults to "Always".
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param pulumi.Input['ClusterProvisionSpecPodSpecSecurityContextSeLinuxOptionsArgs'] se_linux_options: The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] supplemental_groups: A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecSecurityContextSysctlsArgs']]] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
        :param pulumi.Input['ClusterProvisionSpecPodSpecSecurityContextWindowsOptionsArgs'] windows_options: The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[int]]:
        """
        A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
         1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
         If unset, the Kubelet will not modify the ownership and permissions of any volume.
        """
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fs_group", value)

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[pulumi.Input[str]]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified defaults to "Always".
        """
        return pulumi.get(self, "fs_group_change_policy")

    @fs_group_change_policy.setter
    def fs_group_change_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_group_change_policy", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecSecurityContextSeLinuxOptionsArgs']]:
        """
        The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecSecurityContextSeLinuxOptionsArgs']]):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
        """
        return pulumi.get(self, "supplemental_groups")

    @supplemental_groups.setter
    def supplemental_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "supplemental_groups", value)

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecSecurityContextSysctlsArgs']]]]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecSecurityContextSysctlsArgs']]]]):
        pulumi.set(self, "sysctls", value)

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecSecurityContextWindowsOptionsArgs']]:
        """
        The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "windows_options")

    @windows_options.setter
    def windows_options(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecSecurityContextWindowsOptionsArgs']]):
        pulumi.set(self, "windows_options", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecSecurityContextSeLinuxOptionsArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecSecurityContextSysctlsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        Sysctl defines a kernel parameter to be set
        :param pulumi.Input[str] name: Name of a property to set
        :param pulumi.Input[str] value: Value of a property to set
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecSecurityContextWindowsOptionsArgs:
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[pulumi.Input[str]] = None,
                 gmsa_credential_spec_name: Optional[pulumi.Input[str]] = None,
                 run_as_user_name: Optional[pulumi.Input[str]] = None):
        """
        The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] gmsa_credential_spec: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        :param pulumi.Input[str] gmsa_credential_spec_name: GMSACredentialSpecName is the name of the GMSA credential spec to use.
        :param pulumi.Input[str] run_as_user_name: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[pulumi.Input[str]]:
        """
        GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        """
        return pulumi.get(self, "gmsa_credential_spec")

    @gmsa_credential_spec.setter
    def gmsa_credential_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_credential_spec", value)

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[pulumi.Input[str]]:
        """
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
        """
        return pulumi.get(self, "gmsa_credential_spec_name")

    @gmsa_credential_spec_name.setter
    def gmsa_credential_spec_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_credential_spec_name", value)

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user_name")

    @run_as_user_name.setter
    def run_as_user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user_name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecTopologySpreadConstraintsArgs:
    def __init__(__self__, *,
                 max_skew: pulumi.Input[int],
                 topology_key: pulumi.Input[str],
                 when_unsatisfiable: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorArgs']] = None):
        """
        TopologySpreadConstraint specifies how to spread matching pods among the given topology.
        :param pulumi.Input[int] max_skew: MaxSkew describes the degree to which pods may be unevenly distributed. It's the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. It's a required field. Default value is 1 and 0 is not allowed.
        :param pulumi.Input[str] topology_key: TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
        :param pulumi.Input[str] when_unsatisfiable: WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It's considered as "Unsatisfiable" if and only if placing incoming pod on any topology violates "MaxSkew". For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
        :param pulumi.Input['ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorArgs'] label_selector: LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
        """
        pulumi.set(__self__, "max_skew", max_skew)
        pulumi.set(__self__, "topology_key", topology_key)
        pulumi.set(__self__, "when_unsatisfiable", when_unsatisfiable)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)

    @property
    @pulumi.getter(name="maxSkew")
    def max_skew(self) -> pulumi.Input[int]:
        """
        MaxSkew describes the degree to which pods may be unevenly distributed. It's the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. It's a required field. Default value is 1 and 0 is not allowed.
        """
        return pulumi.get(self, "max_skew")

    @max_skew.setter
    def max_skew(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_skew", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="whenUnsatisfiable")
    def when_unsatisfiable(self) -> pulumi.Input[str]:
        """
        WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It's considered as "Unsatisfiable" if and only if placing incoming pod on any topology violates "MaxSkew". For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
        """
        return pulumi.get(self, "when_unsatisfiable")

    @when_unsatisfiable.setter
    def when_unsatisfiable(self, value: pulumi.Input[str]):
        pulumi.set(self, "when_unsatisfiable", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorArgs']]:
        """
        LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 aws_elastic_block_store: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesAwsElasticBlockStoreArgs']] = None,
                 azure_disk: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesAzureDiskArgs']] = None,
                 azure_file: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesAzureFileArgs']] = None,
                 cephfs: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCephfsArgs']] = None,
                 cinder: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCinderArgs']] = None,
                 config_map: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesConfigMapArgs']] = None,
                 csi: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCsiArgs']] = None,
                 downward_api: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesDownwardAPIArgs']] = None,
                 empty_dir: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesEmptyDirArgs']] = None,
                 fc: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesFcArgs']] = None,
                 flex_volume: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesFlexVolumeArgs']] = None,
                 flocker: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesFlockerArgs']] = None,
                 gce_persistent_disk: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesGcePersistentDiskArgs']] = None,
                 git_repo: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesGitRepoArgs']] = None,
                 glusterfs: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesGlusterfsArgs']] = None,
                 host_path: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesHostPathArgs']] = None,
                 iscsi: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesIscsiArgs']] = None,
                 nfs: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesNfsArgs']] = None,
                 persistent_volume_claim: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesPersistentVolumeClaimArgs']] = None,
                 photon_persistent_disk: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesPhotonPersistentDiskArgs']] = None,
                 portworx_volume: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesPortworxVolumeArgs']] = None,
                 projected: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedArgs']] = None,
                 quobyte: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesQuobyteArgs']] = None,
                 rbd: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesRbdArgs']] = None,
                 scale_io: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesScaleIOArgs']] = None,
                 secret: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesSecretArgs']] = None,
                 storageos: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesStorageosArgs']] = None,
                 vsphere_volume: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesVsphereVolumeArgs']] = None):
        """
        Volume represents a named volume in a pod that may be accessed by any container in the pod.
        :param pulumi.Input[str] name: Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesAwsElasticBlockStoreArgs'] aws_elastic_block_store: AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesAzureDiskArgs'] azure_disk: AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesAzureFileArgs'] azure_file: AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesCephfsArgs'] cephfs: CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesCinderArgs'] cinder: Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesConfigMapArgs'] config_map: ConfigMap represents a configMap that should populate this volume
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesCsiArgs'] csi: CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesDownwardAPIArgs'] downward_api: DownwardAPI represents downward API about the pod that should populate this volume
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesEmptyDirArgs'] empty_dir: EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesFcArgs'] fc: FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesFlexVolumeArgs'] flex_volume: FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesFlockerArgs'] flocker: Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesGcePersistentDiskArgs'] gce_persistent_disk: GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesGitRepoArgs'] git_repo: GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesGlusterfsArgs'] glusterfs: Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesHostPathArgs'] host_path: HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesIscsiArgs'] iscsi: ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesNfsArgs'] nfs: NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesPersistentVolumeClaimArgs'] persistent_volume_claim: PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesPhotonPersistentDiskArgs'] photon_persistent_disk: PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesPortworxVolumeArgs'] portworx_volume: PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedArgs'] projected: Items for all in one resources secrets, configmaps, and downward API
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesQuobyteArgs'] quobyte: Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesRbdArgs'] rbd: RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesScaleIOArgs'] scale_io: ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesSecretArgs'] secret: Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesStorageosArgs'] storageos: StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesVsphereVolumeArgs'] vsphere_volume: VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        """
        pulumi.set(__self__, "name", name)
        if aws_elastic_block_store is not None:
            pulumi.set(__self__, "aws_elastic_block_store", aws_elastic_block_store)
        if azure_disk is not None:
            pulumi.set(__self__, "azure_disk", azure_disk)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)
        if cephfs is not None:
            pulumi.set(__self__, "cephfs", cephfs)
        if cinder is not None:
            pulumi.set(__self__, "cinder", cinder)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if empty_dir is not None:
            pulumi.set(__self__, "empty_dir", empty_dir)
        if fc is not None:
            pulumi.set(__self__, "fc", fc)
        if flex_volume is not None:
            pulumi.set(__self__, "flex_volume", flex_volume)
        if flocker is not None:
            pulumi.set(__self__, "flocker", flocker)
        if gce_persistent_disk is not None:
            pulumi.set(__self__, "gce_persistent_disk", gce_persistent_disk)
        if git_repo is not None:
            pulumi.set(__self__, "git_repo", git_repo)
        if glusterfs is not None:
            pulumi.set(__self__, "glusterfs", glusterfs)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)
        if iscsi is not None:
            pulumi.set(__self__, "iscsi", iscsi)
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if photon_persistent_disk is not None:
            pulumi.set(__self__, "photon_persistent_disk", photon_persistent_disk)
        if portworx_volume is not None:
            pulumi.set(__self__, "portworx_volume", portworx_volume)
        if projected is not None:
            pulumi.set(__self__, "projected", projected)
        if quobyte is not None:
            pulumi.set(__self__, "quobyte", quobyte)
        if rbd is not None:
            pulumi.set(__self__, "rbd", rbd)
        if scale_io is not None:
            pulumi.set(__self__, "scale_io", scale_io)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if storageos is not None:
            pulumi.set(__self__, "storageos", storageos)
        if vsphere_volume is not None:
            pulumi.set(__self__, "vsphere_volume", vsphere_volume)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="awsElasticBlockStore")
    def aws_elastic_block_store(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesAwsElasticBlockStoreArgs']]:
        """
        AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "aws_elastic_block_store")

    @aws_elastic_block_store.setter
    def aws_elastic_block_store(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesAwsElasticBlockStoreArgs']]):
        pulumi.set(self, "aws_elastic_block_store", value)

    @property
    @pulumi.getter(name="azureDisk")
    def azure_disk(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesAzureDiskArgs']]:
        """
        AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        """
        return pulumi.get(self, "azure_disk")

    @azure_disk.setter
    def azure_disk(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesAzureDiskArgs']]):
        pulumi.set(self, "azure_disk", value)

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesAzureFileArgs']]:
        """
        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        """
        return pulumi.get(self, "azure_file")

    @azure_file.setter
    def azure_file(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesAzureFileArgs']]):
        pulumi.set(self, "azure_file", value)

    @property
    @pulumi.getter
    def cephfs(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCephfsArgs']]:
        """
        CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        """
        return pulumi.get(self, "cephfs")

    @cephfs.setter
    def cephfs(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCephfsArgs']]):
        pulumi.set(self, "cephfs", value)

    @property
    @pulumi.getter
    def cinder(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCinderArgs']]:
        """
        Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "cinder")

    @cinder.setter
    def cinder(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCinderArgs']]):
        pulumi.set(self, "cinder", value)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesConfigMapArgs']]:
        """
        ConfigMap represents a configMap that should populate this volume
        """
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter
    def csi(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCsiArgs']]:
        """
        CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
        """
        return pulumi.get(self, "csi")

    @csi.setter
    def csi(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCsiArgs']]):
        pulumi.set(self, "csi", value)

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesDownwardAPIArgs']]:
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        """
        return pulumi.get(self, "downward_api")

    @downward_api.setter
    def downward_api(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesDownwardAPIArgs']]):
        pulumi.set(self, "downward_api", value)

    @property
    @pulumi.getter(name="emptyDir")
    def empty_dir(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesEmptyDirArgs']]:
        """
        EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        """
        return pulumi.get(self, "empty_dir")

    @empty_dir.setter
    def empty_dir(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesEmptyDirArgs']]):
        pulumi.set(self, "empty_dir", value)

    @property
    @pulumi.getter
    def fc(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesFcArgs']]:
        """
        FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        """
        return pulumi.get(self, "fc")

    @fc.setter
    def fc(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesFcArgs']]):
        pulumi.set(self, "fc", value)

    @property
    @pulumi.getter(name="flexVolume")
    def flex_volume(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesFlexVolumeArgs']]:
        """
        FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        """
        return pulumi.get(self, "flex_volume")

    @flex_volume.setter
    def flex_volume(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesFlexVolumeArgs']]):
        pulumi.set(self, "flex_volume", value)

    @property
    @pulumi.getter
    def flocker(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesFlockerArgs']]:
        """
        Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        """
        return pulumi.get(self, "flocker")

    @flocker.setter
    def flocker(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesFlockerArgs']]):
        pulumi.set(self, "flocker", value)

    @property
    @pulumi.getter(name="gcePersistentDisk")
    def gce_persistent_disk(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesGcePersistentDiskArgs']]:
        """
        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "gce_persistent_disk")

    @gce_persistent_disk.setter
    def gce_persistent_disk(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesGcePersistentDiskArgs']]):
        pulumi.set(self, "gce_persistent_disk", value)

    @property
    @pulumi.getter(name="gitRepo")
    def git_repo(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesGitRepoArgs']]:
        """
        GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        """
        return pulumi.get(self, "git_repo")

    @git_repo.setter
    def git_repo(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesGitRepoArgs']]):
        pulumi.set(self, "git_repo", value)

    @property
    @pulumi.getter
    def glusterfs(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesGlusterfsArgs']]:
        """
        Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        """
        return pulumi.get(self, "glusterfs")

    @glusterfs.setter
    def glusterfs(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesGlusterfsArgs']]):
        pulumi.set(self, "glusterfs", value)

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesHostPathArgs']]:
        """
        HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
        """
        return pulumi.get(self, "host_path")

    @host_path.setter
    def host_path(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesHostPathArgs']]):
        pulumi.set(self, "host_path", value)

    @property
    @pulumi.getter
    def iscsi(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesIscsiArgs']]:
        """
        ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        """
        return pulumi.get(self, "iscsi")

    @iscsi.setter
    def iscsi(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesIscsiArgs']]):
        pulumi.set(self, "iscsi", value)

    @property
    @pulumi.getter
    def nfs(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesNfsArgs']]:
        """
        NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "nfs")

    @nfs.setter
    def nfs(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesNfsArgs']]):
        pulumi.set(self, "nfs", value)

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesPersistentVolumeClaimArgs']]:
        """
        PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        """
        return pulumi.get(self, "persistent_volume_claim")

    @persistent_volume_claim.setter
    def persistent_volume_claim(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesPersistentVolumeClaimArgs']]):
        pulumi.set(self, "persistent_volume_claim", value)

    @property
    @pulumi.getter(name="photonPersistentDisk")
    def photon_persistent_disk(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesPhotonPersistentDiskArgs']]:
        """
        PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "photon_persistent_disk")

    @photon_persistent_disk.setter
    def photon_persistent_disk(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesPhotonPersistentDiskArgs']]):
        pulumi.set(self, "photon_persistent_disk", value)

    @property
    @pulumi.getter(name="portworxVolume")
    def portworx_volume(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesPortworxVolumeArgs']]:
        """
        PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "portworx_volume")

    @portworx_volume.setter
    def portworx_volume(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesPortworxVolumeArgs']]):
        pulumi.set(self, "portworx_volume", value)

    @property
    @pulumi.getter
    def projected(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedArgs']]:
        """
        Items for all in one resources secrets, configmaps, and downward API
        """
        return pulumi.get(self, "projected")

    @projected.setter
    def projected(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedArgs']]):
        pulumi.set(self, "projected", value)

    @property
    @pulumi.getter
    def quobyte(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesQuobyteArgs']]:
        """
        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        """
        return pulumi.get(self, "quobyte")

    @quobyte.setter
    def quobyte(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesQuobyteArgs']]):
        pulumi.set(self, "quobyte", value)

    @property
    @pulumi.getter
    def rbd(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesRbdArgs']]:
        """
        RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        """
        return pulumi.get(self, "rbd")

    @rbd.setter
    def rbd(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesRbdArgs']]):
        pulumi.set(self, "rbd", value)

    @property
    @pulumi.getter(name="scaleIO")
    def scale_io(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesScaleIOArgs']]:
        """
        ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        """
        return pulumi.get(self, "scale_io")

    @scale_io.setter
    def scale_io(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesScaleIOArgs']]):
        pulumi.set(self, "scale_io", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesSecretArgs']]:
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def storageos(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesStorageosArgs']]:
        """
        StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        """
        return pulumi.get(self, "storageos")

    @storageos.setter
    def storageos(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesStorageosArgs']]):
        pulumi.set(self, "storageos", value)

    @property
    @pulumi.getter(name="vsphereVolume")
    def vsphere_volume(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesVsphereVolumeArgs']]:
        """
        VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "vsphere_volume")

    @vsphere_volume.setter
    def vsphere_volume(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesVsphereVolumeArgs']]):
        pulumi.set(self, "vsphere_volume", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesAwsElasticBlockStoreArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 partition: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input[str] volume_id: Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[int] partition: The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        :param pulumi.Input[bool] read_only: Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> pulumi.Input[str]:
        """
        Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def partition(self) -> Optional[pulumi.Input[int]]:
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        """
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesAzureDiskArgs:
    def __init__(__self__, *,
                 disk_name: pulumi.Input[str],
                 disk_uri: pulumi.Input[str],
                 caching_mode: Optional[pulumi.Input[str]] = None,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        :param pulumi.Input[str] disk_name: The Name of the data disk in the blob storage
        :param pulumi.Input[str] disk_uri: The URI the data disk in the blob storage
        :param pulumi.Input[str] caching_mode: Host Caching mode: None, Read Only, Read Write.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[str] kind: Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_uri", disk_uri)
        if caching_mode is not None:
            pulumi.set(__self__, "caching_mode", caching_mode)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> pulumi.Input[str]:
        """
        The Name of the data disk in the blob storage
        """
        return pulumi.get(self, "disk_name")

    @disk_name.setter
    def disk_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_name", value)

    @property
    @pulumi.getter(name="diskURI")
    def disk_uri(self) -> pulumi.Input[str]:
        """
        The URI the data disk in the blob storage
        """
        return pulumi.get(self, "disk_uri")

    @disk_uri.setter
    def disk_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_uri", value)

    @property
    @pulumi.getter(name="cachingMode")
    def caching_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Host Caching mode: None, Read Only, Read Write.
        """
        return pulumi.get(self, "caching_mode")

    @caching_mode.setter
    def caching_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caching_mode", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesAzureFileArgs:
    def __init__(__self__, *,
                 secret_name: pulumi.Input[str],
                 share_name: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        :param pulumi.Input[str] secret_name: the name of secret that contains Azure Storage Account Name and Key
        :param pulumi.Input[str] share_name: Share Name
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "share_name", share_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        the name of secret that contains Azure Storage Account Name and Key
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> pulumi.Input[str]:
        """
        Share Name
        """
        return pulumi.get(self, "share_name")

    @share_name.setter
    def share_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "share_name", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesCephfsArgs:
    def __init__(__self__, *,
                 monitors: pulumi.Input[Sequence[pulumi.Input[str]]],
                 path: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_file: Optional[pulumi.Input[str]] = None,
                 secret_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCephfsSecretRefArgs']] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitors: Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] path: Optional: Used as the mounted root, rather than the full Ceph tree, default is /
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] secret_file: Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesCephfsSecretRefArgs'] secret_ref: Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] user: Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        pulumi.set(__self__, "monitors", monitors)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_file is not None:
            pulumi.set(__self__, "secret_file", secret_file)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def monitors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Used as the mounted root, rather than the full Ceph tree, default is /
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretFile")
    def secret_file(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_file")

    @secret_file.setter
    def secret_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_file", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCephfsSecretRefArgs']]:
        """
        Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCephfsSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesCephfsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesCinderArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCinderSecretRefArgs']] = None):
        """
        Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[str] volume_id: volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesCinderSecretRefArgs'] secret_ref: Optional: points to a secret object containing parameters used to connect to OpenStack.
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> pulumi.Input[str]:
        """
        volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCinderSecretRefArgs']]:
        """
        Optional: points to a secret object containing parameters used to connect to OpenStack.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCinderSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesCinderSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Optional: points to a secret object containing parameters used to connect to OpenStack.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesConfigMapArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        ConfigMap represents a configMap that should populate this volume
        :param pulumi.Input[int] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesConfigMapItemsArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its keys must be defined
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesConfigMapItemsArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its keys must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesCsiArgs:
    def __init__(__self__, *,
                 driver: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 node_publish_secret_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCsiNodePublishSecretRefArgs']] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 volume_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
        :param pulumi.Input[str] driver: Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesCsiNodePublishSecretRefArgs'] node_publish_secret_ref: NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        :param pulumi.Input[bool] read_only: Specifies a read-only configuration for the volume. Defaults to false (read/write).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] volume_attributes: VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
        """
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if node_publish_secret_ref is not None:
            pulumi.set(__self__, "node_publish_secret_ref", node_publish_secret_ref)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_attributes is not None:
            pulumi.set(__self__, "volume_attributes", volume_attributes)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[str]:
        """
        Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="nodePublishSecretRef")
    def node_publish_secret_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCsiNodePublishSecretRefArgs']]:
        """
        NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        """
        return pulumi.get(self, "node_publish_secret_ref")

    @node_publish_secret_ref.setter
    def node_publish_secret_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesCsiNodePublishSecretRefArgs']]):
        pulumi.set(self, "node_publish_secret_ref", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies a read-only configuration for the volume. Defaults to false (read/write).
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
        """
        return pulumi.get(self, "volume_attributes")

    @volume_attributes.setter
    def volume_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "volume_attributes", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesCsiNodePublishSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesDownwardAPIArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsArgs']]]] = None):
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        :param pulumi.Input[int] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsArgs']]] items: Items is a list of downward API volume file
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsArgs']]]]:
        """
        Items is a list of downward API volume file
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 field_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsFieldRefArgs']] = None,
                 mode: Optional[pulumi.Input[int]] = None,
                 resource_field_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsResourceFieldRefArgs']] = None):
        """
        DownwardAPIVolumeFile represents information to create the file containing the pod field
        :param pulumi.Input[str] path: Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsFieldRefArgs'] field_ref: Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsFieldRefArgs']]:
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input[str]] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input[str] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesEmptyDirArgs:
    def __init__(__self__, *,
                 medium: Optional[pulumi.Input[str]] = None,
                 size_limit: Optional[pulumi.Input[str]] = None):
        """
        EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param pulumi.Input[str] medium: What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param pulumi.Input[str] size_limit: Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
        """
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def medium(self) -> Optional[pulumi.Input[str]]:
        """
        What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        """
        return pulumi.get(self, "medium")

    @medium.setter
    def medium(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "medium", value)

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[pulumi.Input[str]]:
        """
        Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
        """
        return pulumi.get(self, "size_limit")

    @size_limit.setter
    def size_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_limit", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesFcArgs:
    def __init__(__self__, *,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 lun: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 target_wwns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 wwids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[int] lun: Optional: FC target lun number
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_wwns: Optional: FC target worldwide names (WWNs)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] wwids: Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
        """
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if target_wwns is not None:
            pulumi.set(__self__, "target_wwns", target_wwns)
        if wwids is not None:
            pulumi.set(__self__, "wwids", wwids)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def lun(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: FC target lun number
        """
        return pulumi.get(self, "lun")

    @lun.setter
    def lun(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lun", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="targetWWNs")
    def target_wwns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional: FC target worldwide names (WWNs)
        """
        return pulumi.get(self, "target_wwns")

    @target_wwns.setter
    def target_wwns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_wwns", value)

    @property
    @pulumi.getter
    def wwids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
        """
        return pulumi.get(self, "wwids")

    @wwids.setter
    def wwids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "wwids", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesFlexVolumeArgs:
    def __init__(__self__, *,
                 driver: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesFlexVolumeSecretRefArgs']] = None):
        """
        FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        :param pulumi.Input[str] driver: Driver is the name of the driver to use for this volume.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] options: Optional: Extra command options if any.
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesFlexVolumeSecretRefArgs'] secret_ref: Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[str]:
        """
        Driver is the name of the driver to use for this volume.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional: Extra command options if any.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesFlexVolumeSecretRefArgs']]:
        """
        Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesFlexVolumeSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesFlexVolumeSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesFlockerArgs:
    def __init__(__self__, *,
                 dataset_name: Optional[pulumi.Input[str]] = None,
                 dataset_uuid: Optional[pulumi.Input[str]] = None):
        """
        Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        :param pulumi.Input[str] dataset_name: Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
        :param pulumi.Input[str] dataset_uuid: UUID of the dataset. This is unique identifier of a Flocker dataset
        """
        if dataset_name is not None:
            pulumi.set(__self__, "dataset_name", dataset_name)
        if dataset_uuid is not None:
            pulumi.set(__self__, "dataset_uuid", dataset_uuid)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
        """
        return pulumi.get(self, "dataset_name")

    @dataset_name.setter
    def dataset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_name", value)

    @property
    @pulumi.getter(name="datasetUUID")
    def dataset_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        UUID of the dataset. This is unique identifier of a Flocker dataset
        """
        return pulumi.get(self, "dataset_uuid")

    @dataset_uuid.setter
    def dataset_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_uuid", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesGcePersistentDiskArgs:
    def __init__(__self__, *,
                 pd_name: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 partition: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[str] pd_name: Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[int] partition: The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        pulumi.set(__self__, "pd_name", pd_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="pdName")
    def pd_name(self) -> pulumi.Input[str]:
        """
        Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "pd_name")

    @pd_name.setter
    def pd_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "pd_name", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def partition(self) -> Optional[pulumi.Input[int]]:
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesGitRepoArgs:
    def __init__(__self__, *,
                 repository: pulumi.Input[str],
                 directory: Optional[pulumi.Input[str]] = None,
                 revision: Optional[pulumi.Input[str]] = None):
        """
        GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        :param pulumi.Input[str] repository: Repository URL
        :param pulumi.Input[str] directory: Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        :param pulumi.Input[str] revision: Commit hash for the specified revision.
        """
        pulumi.set(__self__, "repository", repository)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Input[str]:
        """
        Repository URL
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[str]]:
        """
        Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[str]]:
        """
        Commit hash for the specified revision.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesGlusterfsArgs:
    def __init__(__self__, *,
                 endpoints: pulumi.Input[str],
                 path: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        :param pulumi.Input[str] endpoints: EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[str] path: Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[bool] read_only: ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def endpoints(self) -> pulumi.Input[str]:
        """
        EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesHostPathArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        """
        HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
        :param pulumi.Input[str] path: Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        :param pulumi.Input[str] type: Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        pulumi.set(__self__, "path", path)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesIscsiArgs:
    def __init__(__self__, *,
                 iqn: pulumi.Input[str],
                 lun: pulumi.Input[int],
                 target_portal: pulumi.Input[str],
                 chap_auth_discovery: Optional[pulumi.Input[bool]] = None,
                 chap_auth_session: Optional[pulumi.Input[bool]] = None,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 initiator_name: Optional[pulumi.Input[str]] = None,
                 iscsi_interface: Optional[pulumi.Input[str]] = None,
                 portals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesIscsiSecretRefArgs']] = None):
        """
        ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        :param pulumi.Input[str] iqn: Target iSCSI Qualified Name.
        :param pulumi.Input[int] lun: iSCSI Target Lun number.
        :param pulumi.Input[str] target_portal: iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        :param pulumi.Input[bool] chap_auth_discovery: whether support iSCSI Discovery CHAP authentication
        :param pulumi.Input[bool] chap_auth_session: whether support iSCSI Session CHAP authentication
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[str] initiator_name: Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
        :param pulumi.Input[str] iscsi_interface: iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] portals: iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesIscsiSecretRefArgs'] secret_ref: CHAP Secret for iSCSI target and initiator authentication
        """
        pulumi.set(__self__, "iqn", iqn)
        pulumi.set(__self__, "lun", lun)
        pulumi.set(__self__, "target_portal", target_portal)
        if chap_auth_discovery is not None:
            pulumi.set(__self__, "chap_auth_discovery", chap_auth_discovery)
        if chap_auth_session is not None:
            pulumi.set(__self__, "chap_auth_session", chap_auth_session)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if initiator_name is not None:
            pulumi.set(__self__, "initiator_name", initiator_name)
        if iscsi_interface is not None:
            pulumi.set(__self__, "iscsi_interface", iscsi_interface)
        if portals is not None:
            pulumi.set(__self__, "portals", portals)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def iqn(self) -> pulumi.Input[str]:
        """
        Target iSCSI Qualified Name.
        """
        return pulumi.get(self, "iqn")

    @iqn.setter
    def iqn(self, value: pulumi.Input[str]):
        pulumi.set(self, "iqn", value)

    @property
    @pulumi.getter
    def lun(self) -> pulumi.Input[int]:
        """
        iSCSI Target Lun number.
        """
        return pulumi.get(self, "lun")

    @lun.setter
    def lun(self, value: pulumi.Input[int]):
        pulumi.set(self, "lun", value)

    @property
    @pulumi.getter(name="targetPortal")
    def target_portal(self) -> pulumi.Input[str]:
        """
        iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        """
        return pulumi.get(self, "target_portal")

    @target_portal.setter
    def target_portal(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_portal", value)

    @property
    @pulumi.getter(name="chapAuthDiscovery")
    def chap_auth_discovery(self) -> Optional[pulumi.Input[bool]]:
        """
        whether support iSCSI Discovery CHAP authentication
        """
        return pulumi.get(self, "chap_auth_discovery")

    @chap_auth_discovery.setter
    def chap_auth_discovery(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "chap_auth_discovery", value)

    @property
    @pulumi.getter(name="chapAuthSession")
    def chap_auth_session(self) -> Optional[pulumi.Input[bool]]:
        """
        whether support iSCSI Session CHAP authentication
        """
        return pulumi.get(self, "chap_auth_session")

    @chap_auth_session.setter
    def chap_auth_session(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "chap_auth_session", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="initiatorName")
    def initiator_name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
        """
        return pulumi.get(self, "initiator_name")

    @initiator_name.setter
    def initiator_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initiator_name", value)

    @property
    @pulumi.getter(name="iscsiInterface")
    def iscsi_interface(self) -> Optional[pulumi.Input[str]]:
        """
        iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
        """
        return pulumi.get(self, "iscsi_interface")

    @iscsi_interface.setter
    def iscsi_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iscsi_interface", value)

    @property
    @pulumi.getter
    def portals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        """
        return pulumi.get(self, "portals")

    @portals.setter
    def portals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "portals", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesIscsiSecretRefArgs']]:
        """
        CHAP Secret for iSCSI target and initiator authentication
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesIscsiSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesIscsiSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CHAP Secret for iSCSI target and initiator authentication
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesNfsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 server: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[str] path: Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[str] server: Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[bool] read_only: ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesPersistentVolumeClaimArgs:
    def __init__(__self__, *,
                 claim_name: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param pulumi.Input[str] claim_name: ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param pulumi.Input[bool] read_only: Will force the ReadOnly setting in VolumeMounts. Default false.
        """
        pulumi.set(__self__, "claim_name", claim_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> pulumi.Input[str]:
        """
        ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        """
        return pulumi.get(self, "claim_name")

    @claim_name.setter
    def claim_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "claim_name", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Will force the ReadOnly setting in VolumeMounts. Default false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesPhotonPersistentDiskArgs:
    def __init__(__self__, *,
                 pd_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None):
        """
        PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        :param pulumi.Input[str] pd_id: ID that identifies Photon Controller persistent disk
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        pulumi.set(__self__, "pd_id", pd_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="pdID")
    def pd_id(self) -> pulumi.Input[str]:
        """
        ID that identifies Photon Controller persistent disk
        """
        return pulumi.get(self, "pd_id")

    @pd_id.setter
    def pd_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "pd_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesPortworxVolumeArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        :param pulumi.Input[str] volume_id: VolumeID uniquely identifies a Portworx volume
        :param pulumi.Input[str] fs_type: FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> pulumi.Input[str]:
        """
        VolumeID uniquely identifies a Portworx volume
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesProjectedArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesArgs']]],
                 default_mode: Optional[pulumi.Input[int]] = None):
        """
        Items for all in one resources secrets, configmaps, and downward API
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesArgs']]] sources: list of volume projections
        :param pulumi.Input[int] default_mode: Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "sources", sources)
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesArgs']]]:
        """
        list of volume projections
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesArgs']]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesArgs:
    def __init__(__self__, *,
                 config_map: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapArgs']] = None,
                 downward_api: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIArgs']] = None,
                 secret: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretArgs']] = None,
                 service_account_token: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesServiceAccountTokenArgs']] = None):
        """
        Projection that may be projected along with other supported volume types
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapArgs'] config_map: information about the configMap data to project
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIArgs'] downward_api: information about the downwardAPI data to project
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretArgs'] secret: information about the secret data to project
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesServiceAccountTokenArgs'] service_account_token: information about the serviceAccountToken data to project
        """
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if service_account_token is not None:
            pulumi.set(__self__, "service_account_token", service_account_token)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapArgs']]:
        """
        information about the configMap data to project
        """
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIArgs']]:
        """
        information about the downwardAPI data to project
        """
        return pulumi.get(self, "downward_api")

    @downward_api.setter
    def downward_api(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIArgs']]):
        pulumi.set(self, "downward_api", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretArgs']]:
        """
        information about the secret data to project
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="serviceAccountToken")
    def service_account_token(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesServiceAccountTokenArgs']]:
        """
        information about the serviceAccountToken data to project
        """
        return pulumi.get(self, "service_account_token")

    @service_account_token.setter
    def service_account_token(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesServiceAccountTokenArgs']]):
        pulumi.set(self, "service_account_token", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        information about the configMap data to project
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapItemsArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its keys must be defined
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapItemsArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its keys must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsArgs']]]] = None):
        """
        information about the downwardAPI data to project
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsArgs']]] items: Items is a list of DownwardAPIVolume file
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsArgs']]]]:
        """
        Items is a list of DownwardAPIVolume file
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 field_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs']] = None,
                 mode: Optional[pulumi.Input[int]] = None,
                 resource_field_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs']] = None):
        """
        DownwardAPIVolumeFile represents information to create the file containing the pod field
        :param pulumi.Input[str] path: Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs'] field_ref: Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs']]:
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input[str]] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input[str] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        information about the secret data to project
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretItemsArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretItemsArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesServiceAccountTokenArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 audience: Optional[pulumi.Input[str]] = None,
                 expiration_seconds: Optional[pulumi.Input[int]] = None):
        """
        information about the serviceAccountToken data to project
        :param pulumi.Input[str] path: Path is the path relative to the mount point of the file to project the token into.
        :param pulumi.Input[str] audience: Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
        :param pulumi.Input[int] expiration_seconds: ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
        """
        pulumi.set(__self__, "path", path)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if expiration_seconds is not None:
            pulumi.set(__self__, "expiration_seconds", expiration_seconds)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path is the path relative to the mount point of the file to project the token into.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="expirationSeconds")
    def expiration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
        """
        return pulumi.get(self, "expiration_seconds")

    @expiration_seconds.setter
    def expiration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expiration_seconds", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesQuobyteArgs:
    def __init__(__self__, *,
                 registry: pulumi.Input[str],
                 volume: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        :param pulumi.Input[str] registry: Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        :param pulumi.Input[str] volume: Volume is a string that references an already created Quobyte volume by name.
        :param pulumi.Input[str] group: Group to map volume access to Default is no group
        :param pulumi.Input[bool] read_only: ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        :param pulumi.Input[str] tenant: Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
        :param pulumi.Input[str] user: User to map volume access to Defaults to serivceaccount user
        """
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "volume", volume)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def registry(self) -> pulumi.Input[str]:
        """
        Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        """
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: pulumi.Input[str]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter
    def volume(self) -> pulumi.Input[str]:
        """
        Volume is a string that references an already created Quobyte volume by name.
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group to map volume access to Default is no group
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter
    def tenant(self) -> Optional[pulumi.Input[str]]:
        """
        Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
        """
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User to map volume access to Defaults to serivceaccount user
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesRbdArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 monitors: pulumi.Input[Sequence[pulumi.Input[str]]],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 keyring: Optional[pulumi.Input[str]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesRbdSecretRefArgs']] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        :param pulumi.Input[str] image: The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitors: A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[str] keyring: Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] pool: The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesRbdSecretRefArgs'] secret_ref: SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] user: The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "monitors", monitors)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if keyring is not None:
            pulumi.set(__self__, "keyring", keyring)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def monitors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def keyring(self) -> Optional[pulumi.Input[str]]:
        """
        Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "keyring")

    @keyring.setter
    def keyring(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyring", value)

    @property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[str]]:
        """
        The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pool", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesRbdSecretRefArgs']]:
        """
        SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesRbdSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesRbdSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesScaleIOArgs:
    def __init__(__self__, *,
                 gateway: pulumi.Input[str],
                 secret_ref: pulumi.Input['ClusterProvisionSpecPodSpecVolumesScaleIOSecretRefArgs'],
                 system: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 protection_domain: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 ssl_enabled: Optional[pulumi.Input[bool]] = None,
                 storage_mode: Optional[pulumi.Input[str]] = None,
                 storage_pool: Optional[pulumi.Input[str]] = None,
                 volume_name: Optional[pulumi.Input[str]] = None):
        """
        ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input[str] gateway: The host address of the ScaleIO API Gateway.
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesScaleIOSecretRefArgs'] secret_ref: SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        :param pulumi.Input[str] system: The name of the storage system as configured in ScaleIO.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
        :param pulumi.Input[str] protection_domain: The name of the ScaleIO Protection Domain for the configured storage.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input[bool] ssl_enabled: Flag to enable/disable SSL communication with Gateway, default false
        :param pulumi.Input[str] storage_mode: Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
        :param pulumi.Input[str] storage_pool: The ScaleIO Storage Pool associated with the protection domain.
        :param pulumi.Input[str] volume_name: The name of a volume already created in the ScaleIO system that is associated with this volume source.
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "secret_ref", secret_ref)
        pulumi.set(__self__, "system", system)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if protection_domain is not None:
            pulumi.set(__self__, "protection_domain", protection_domain)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if storage_mode is not None:
            pulumi.set(__self__, "storage_mode", storage_mode)
        if storage_pool is not None:
            pulumi.set(__self__, "storage_pool", storage_pool)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[str]:
        """
        The host address of the ScaleIO API Gateway.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> pulumi.Input['ClusterProvisionSpecPodSpecVolumesScaleIOSecretRefArgs']:
        """
        SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: pulumi.Input['ClusterProvisionSpecPodSpecVolumesScaleIOSecretRefArgs']):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def system(self) -> pulumi.Input[str]:
        """
        The name of the storage system as configured in ScaleIO.
        """
        return pulumi.get(self, "system")

    @system.setter
    def system(self, value: pulumi.Input[str]):
        pulumi.set(self, "system", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="protectionDomain")
    def protection_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the ScaleIO Protection Domain for the configured storage.
        """
        return pulumi.get(self, "protection_domain")

    @protection_domain.setter
    def protection_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_domain", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to enable/disable SSL communication with Gateway, default false
        """
        return pulumi.get(self, "ssl_enabled")

    @ssl_enabled.setter
    def ssl_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl_enabled", value)

    @property
    @pulumi.getter(name="storageMode")
    def storage_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
        """
        return pulumi.get(self, "storage_mode")

    @storage_mode.setter
    def storage_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_mode", value)

    @property
    @pulumi.getter(name="storagePool")
    def storage_pool(self) -> Optional[pulumi.Input[str]]:
        """
        The ScaleIO Storage Pool associated with the protection domain.
        """
        return pulumi.get(self, "storage_pool")

    @storage_pool.setter
    def storage_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_pool", value)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a volume already created in the ScaleIO system that is associated with this volume source.
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesScaleIOSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesSecretArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesSecretItemsArgs']]]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        :param pulumi.Input[int] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesSecretItemsArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[bool] optional: Specify whether the Secret or its keys must be defined
        :param pulumi.Input[str] secret_name: Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesSecretItemsArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionSpecPodSpecVolumesSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its keys must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesStorageosArgs:
    def __init__(__self__, *,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesStorageosSecretRefArgs']] = None,
                 volume_name: Optional[pulumi.Input[str]] = None,
                 volume_namespace: Optional[pulumi.Input[str]] = None):
        """
        StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input['ClusterProvisionSpecPodSpecVolumesStorageosSecretRefArgs'] secret_ref: SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        :param pulumi.Input[str] volume_name: VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
        :param pulumi.Input[str] volume_namespace: VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
        """
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)
        if volume_namespace is not None:
            pulumi.set(__self__, "volume_namespace", volume_namespace)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesStorageosSecretRefArgs']]:
        """
        SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['ClusterProvisionSpecPodSpecVolumesStorageosSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[str]]:
        """
        VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_name", value)

    @property
    @pulumi.getter(name="volumeNamespace")
    def volume_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
        """
        return pulumi.get(self, "volume_namespace")

    @volume_namespace.setter
    def volume_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_namespace", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesStorageosSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterProvisionSpecPodSpecVolumesVsphereVolumeArgs:
    def __init__(__self__, *,
                 volume_path: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 storage_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_policy_name: Optional[pulumi.Input[str]] = None):
        """
        VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        :param pulumi.Input[str] volume_path: Path that identifies vSphere volume vmdk
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[str] storage_policy_id: Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
        :param pulumi.Input[str] storage_policy_name: Storage Policy Based Management (SPBM) profile name.
        """
        pulumi.set(__self__, "volume_path", volume_path)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if storage_policy_id is not None:
            pulumi.set(__self__, "storage_policy_id", storage_policy_id)
        if storage_policy_name is not None:
            pulumi.set(__self__, "storage_policy_name", storage_policy_name)

    @property
    @pulumi.getter(name="volumePath")
    def volume_path(self) -> pulumi.Input[str]:
        """
        Path that identifies vSphere volume vmdk
        """
        return pulumi.get(self, "volume_path")

    @volume_path.setter
    def volume_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_path", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="storagePolicyID")
    def storage_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
        """
        return pulumi.get(self, "storage_policy_id")

    @storage_policy_id.setter
    def storage_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_policy_id", value)

    @property
    @pulumi.getter(name="storagePolicyName")
    def storage_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Storage Policy Based Management (SPBM) profile name.
        """
        return pulumi.get(self, "storage_policy_name")

    @storage_policy_name.setter
    def storage_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_policy_name", value)


@pulumi.input_type
class ClusterProvisionStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionStatusConditionsArgs']]]] = None,
                 job_ref: Optional[pulumi.Input['ClusterProvisionStatusJobRefArgs']] = None):
        """
        ClusterProvisionStatus defines the observed state of ClusterProvision.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterProvisionStatusConditionsArgs']]] conditions: Conditions includes more detailed status for the cluster provision
        :param pulumi.Input['ClusterProvisionStatusJobRefArgs'] job_ref: JobRef is the reference to the job performing the provision.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if job_ref is not None:
            pulumi.set(__self__, "job_ref", job_ref)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionStatusConditionsArgs']]]]:
        """
        Conditions includes more detailed status for the cluster provision
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterProvisionStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="jobRef")
    def job_ref(self) -> Optional[pulumi.Input['ClusterProvisionStatusJobRefArgs']]:
        """
        JobRef is the reference to the job performing the provision.
        """
        return pulumi.get(self, "job_ref")

    @job_ref.setter
    def job_ref(self, value: Optional[pulumi.Input['ClusterProvisionStatusJobRefArgs']]):
        pulumi.set(self, "job_ref", value)


@pulumi.input_type
class ClusterProvisionStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_probe_time: Optional[pulumi.Input[str]] = None,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        ClusterProvisionCondition contains details for the current condition of a cluster provision
        :param pulumi.Input[str] status: Status is the status of the condition.
        :param pulumi.Input[str] type: Type is the type of the condition.
        :param pulumi.Input[str] last_probe_time: LastProbeTime is the last time we probed the condition.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: Message is a human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @last_probe_time.setter
    def last_probe_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_probe_time", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class ClusterProvisionStatusJobRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        JobRef is the reference to the job performing the provision.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterRelocateSpecArgs:
    def __init__(__self__, *,
                 cluster_deployment_selector: pulumi.Input['ClusterRelocateSpecClusterDeploymentSelectorArgs'],
                 kubeconfig_secret_ref: pulumi.Input['ClusterRelocateSpecKubeconfigSecretRefArgs']):
        """
        ClusterRelocateSpec defines the relocation of clusters from one Hive instance to another.
        :param pulumi.Input['ClusterRelocateSpecClusterDeploymentSelectorArgs'] cluster_deployment_selector: ClusterDeploymentSelector is a LabelSelector indicating which clusters will be relocated.
        :param pulumi.Input['ClusterRelocateSpecKubeconfigSecretRefArgs'] kubeconfig_secret_ref: KubeconfigSecretRef is a reference to the secret containing the kubeconfig for the destination Hive instance. The kubeconfig must be in a data field where the key is "kubeconfig".
        """
        pulumi.set(__self__, "cluster_deployment_selector", cluster_deployment_selector)
        pulumi.set(__self__, "kubeconfig_secret_ref", kubeconfig_secret_ref)

    @property
    @pulumi.getter(name="clusterDeploymentSelector")
    def cluster_deployment_selector(self) -> pulumi.Input['ClusterRelocateSpecClusterDeploymentSelectorArgs']:
        """
        ClusterDeploymentSelector is a LabelSelector indicating which clusters will be relocated.
        """
        return pulumi.get(self, "cluster_deployment_selector")

    @cluster_deployment_selector.setter
    def cluster_deployment_selector(self, value: pulumi.Input['ClusterRelocateSpecClusterDeploymentSelectorArgs']):
        pulumi.set(self, "cluster_deployment_selector", value)

    @property
    @pulumi.getter(name="kubeconfigSecretRef")
    def kubeconfig_secret_ref(self) -> pulumi.Input['ClusterRelocateSpecKubeconfigSecretRefArgs']:
        """
        KubeconfigSecretRef is a reference to the secret containing the kubeconfig for the destination Hive instance. The kubeconfig must be in a data field where the key is "kubeconfig".
        """
        return pulumi.get(self, "kubeconfig_secret_ref")

    @kubeconfig_secret_ref.setter
    def kubeconfig_secret_ref(self, value: pulumi.Input['ClusterRelocateSpecKubeconfigSecretRefArgs']):
        pulumi.set(self, "kubeconfig_secret_ref", value)


@pulumi.input_type
class ClusterRelocateSpecClusterDeploymentSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRelocateSpecClusterDeploymentSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        ClusterDeploymentSelector is a LabelSelector indicating which clusters will be relocated.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterRelocateSpecClusterDeploymentSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRelocateSpecClusterDeploymentSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRelocateSpecClusterDeploymentSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterRelocateSpecClusterDeploymentSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterRelocateSpecKubeconfigSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str]):
        """
        KubeconfigSecretRef is a reference to the secret containing the kubeconfig for the destination Hive instance. The kubeconfig must be in a data field where the key is "kubeconfig".
        :param pulumi.Input[str] name: Name is the name of the secret.
        :param pulumi.Input[str] namespace: Namespace is the namespace where the secret lives.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace is the namespace where the secret lives.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ClusterStateStatusArgs:
    def __init__(__self__, *,
                 cluster_operators: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterStateStatusClusterOperatorsArgs']]]] = None,
                 last_updated: Optional[pulumi.Input[str]] = None):
        """
        ClusterStateStatus defines the observed state of ClusterState
        :param pulumi.Input[Sequence[pulumi.Input['ClusterStateStatusClusterOperatorsArgs']]] cluster_operators: ClusterOperators contains the state for every cluster operator in the target cluster
        :param pulumi.Input[str] last_updated: LastUpdated is the last time that operator state was updated
        """
        if cluster_operators is not None:
            pulumi.set(__self__, "cluster_operators", cluster_operators)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)

    @property
    @pulumi.getter(name="clusterOperators")
    def cluster_operators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterStateStatusClusterOperatorsArgs']]]]:
        """
        ClusterOperators contains the state for every cluster operator in the target cluster
        """
        return pulumi.get(self, "cluster_operators")

    @cluster_operators.setter
    def cluster_operators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterStateStatusClusterOperatorsArgs']]]]):
        pulumi.set(self, "cluster_operators", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[str]]:
        """
        LastUpdated is the last time that operator state was updated
        """
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated", value)


@pulumi.input_type
class ClusterStateStatusClusterOperatorsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterStateStatusClusterOperatorsConditionsArgs']]]] = None):
        """
        ClusterOperatorState summarizes the status of a single cluster operator
        :param pulumi.Input[str] name: Name is the name of the cluster operator
        :param pulumi.Input[Sequence[pulumi.Input['ClusterStateStatusClusterOperatorsConditionsArgs']]] conditions: Conditions is the set of conditions in the status of the cluster operator on the target cluster
        """
        pulumi.set(__self__, "name", name)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the cluster operator
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterStateStatusClusterOperatorsConditionsArgs']]]]:
        """
        Conditions is the set of conditions in the status of the cluster operator on the target cluster
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterStateStatusClusterOperatorsConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ClusterStateStatusClusterOperatorsConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        ClusterOperatorStatusCondition represents the state of the operator's managed and monitored components.
        :param pulumi.Input[str] last_transition_time: lastTransitionTime is the time of the last update to the current status property.
        :param pulumi.Input[str] status: status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: type specifies the aspect reported by this condition.
        :param pulumi.Input[str] message: message provides additional information about the current condition. This is only to be consumed by humans.
        :param pulumi.Input[str] reason: reason is the CamelCase reason for the condition's current status.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        lastTransitionTime is the time of the last update to the current status property.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        type specifies the aspect reported by this condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        message provides additional information about the current condition. This is only to be consumed by humans.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        reason is the CamelCase reason for the condition's current status.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class DNSZoneSpecArgs:
    def __init__(__self__, *,
                 zone: pulumi.Input[str],
                 aws: Optional[pulumi.Input['DNSZoneSpecAwsArgs']] = None,
                 azure: Optional[pulumi.Input['DNSZoneSpecAzureArgs']] = None,
                 gcp: Optional[pulumi.Input['DNSZoneSpecGcpArgs']] = None,
                 link_to_parent_domain: Optional[pulumi.Input[bool]] = None):
        """
        DNSZoneSpec defines the desired state of DNSZone
        :param pulumi.Input[str] zone: Zone is the DNS zone to host
        :param pulumi.Input['DNSZoneSpecAwsArgs'] aws: AWS specifies AWS-specific cloud configuration
        :param pulumi.Input['DNSZoneSpecAzureArgs'] azure: Azure specifes Azure-specific cloud configuration
        :param pulumi.Input['DNSZoneSpecGcpArgs'] gcp: GCP specifies GCP-specific cloud configuration
        :param pulumi.Input[bool] link_to_parent_domain: LinkToParentDomain specifies whether DNS records should be automatically created to link this DNSZone with a parent domain.
        """
        pulumi.set(__self__, "zone", zone)
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if link_to_parent_domain is not None:
            pulumi.set(__self__, "link_to_parent_domain", link_to_parent_domain)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        Zone is the DNS zone to host
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['DNSZoneSpecAwsArgs']]:
        """
        AWS specifies AWS-specific cloud configuration
        """
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['DNSZoneSpecAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['DNSZoneSpecAzureArgs']]:
        """
        Azure specifes Azure-specific cloud configuration
        """
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['DNSZoneSpecAzureArgs']]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter
    def gcp(self) -> Optional[pulumi.Input['DNSZoneSpecGcpArgs']]:
        """
        GCP specifies GCP-specific cloud configuration
        """
        return pulumi.get(self, "gcp")

    @gcp.setter
    def gcp(self, value: Optional[pulumi.Input['DNSZoneSpecGcpArgs']]):
        pulumi.set(self, "gcp", value)

    @property
    @pulumi.getter(name="linkToParentDomain")
    def link_to_parent_domain(self) -> Optional[pulumi.Input[bool]]:
        """
        LinkToParentDomain specifies whether DNS records should be automatically created to link this DNSZone with a parent domain.
        """
        return pulumi.get(self, "link_to_parent_domain")

    @link_to_parent_domain.setter
    def link_to_parent_domain(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "link_to_parent_domain", value)


@pulumi.input_type
class DNSZoneSpecAwsArgs:
    def __init__(__self__, *,
                 credentials_secret_ref: pulumi.Input['DNSZoneSpecAwsCredentialsSecretRefArgs'],
                 additional_tags: Optional[pulumi.Input[Sequence[pulumi.Input['DNSZoneSpecAwsAdditionalTagsArgs']]]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        AWS specifies AWS-specific cloud configuration
        :param pulumi.Input['DNSZoneSpecAwsCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef contains a reference to a secret that contains AWS credentials for CRUD operations
        :param pulumi.Input[Sequence[pulumi.Input['DNSZoneSpecAwsAdditionalTagsArgs']]] additional_tags: AdditionalTags is a set of additional tags to set on the DNS hosted zone. In addition to these tags,the DNS Zone controller will set a hive.openhsift.io/hostedzone tag identifying the HostedZone record that it belongs to.
        :param pulumi.Input[str] region: Region is the AWS region to use for route53 operations. This defaults to us-east-1. For AWS China, use cn-northwest-1.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        if additional_tags is not None:
            pulumi.set(__self__, "additional_tags", additional_tags)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['DNSZoneSpecAwsCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef contains a reference to a secret that contains AWS credentials for CRUD operations
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['DNSZoneSpecAwsCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter(name="additionalTags")
    def additional_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DNSZoneSpecAwsAdditionalTagsArgs']]]]:
        """
        AdditionalTags is a set of additional tags to set on the DNS hosted zone. In addition to these tags,the DNS Zone controller will set a hive.openhsift.io/hostedzone tag identifying the HostedZone record that it belongs to.
        """
        return pulumi.get(self, "additional_tags")

    @additional_tags.setter
    def additional_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DNSZoneSpecAwsAdditionalTagsArgs']]]]):
        pulumi.set(self, "additional_tags", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region is the AWS region to use for route53 operations. This defaults to us-east-1. For AWS China, use cn-northwest-1.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class DNSZoneSpecAwsAdditionalTagsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        AWSResourceTag represents a tag that is applied to an AWS cloud resource
        :param pulumi.Input[str] key: Key is the key for the tag
        :param pulumi.Input[str] value: Value is the value for the tag
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key is the key for the tag
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value is the value for the tag
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DNSZoneSpecAwsCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef contains a reference to a secret that contains AWS credentials for CRUD operations
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DNSZoneSpecAzureArgs:
    def __init__(__self__, *,
                 credentials_secret_ref: pulumi.Input['DNSZoneSpecAzureCredentialsSecretRefArgs'],
                 resource_group_name: pulumi.Input[str]):
        """
        Azure specifes Azure-specific cloud configuration
        :param pulumi.Input['DNSZoneSpecAzureCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef references a secret that will be used to authenticate with Azure CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServicePrincipal.json'. The credentials must specify the project to use.
        :param pulumi.Input[str] resource_group_name: ResourceGroupName specifies the Azure resource group in which the Hosted Zone should be created.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "resource_group_name", resource_group_name)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['DNSZoneSpecAzureCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef references a secret that will be used to authenticate with Azure CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServicePrincipal.json'. The credentials must specify the project to use.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['DNSZoneSpecAzureCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        ResourceGroupName specifies the Azure resource group in which the Hosted Zone should be created.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)


@pulumi.input_type
class DNSZoneSpecAzureCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef references a secret that will be used to authenticate with Azure CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServicePrincipal.json'. The credentials must specify the project to use.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DNSZoneSpecGcpArgs:
    def __init__(__self__, *,
                 credentials_secret_ref: pulumi.Input['DNSZoneSpecGcpCredentialsSecretRefArgs']):
        """
        GCP specifies GCP-specific cloud configuration
        :param pulumi.Input['DNSZoneSpecGcpCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef references a secret that will be used to authenticate with GCP CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['DNSZoneSpecGcpCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef references a secret that will be used to authenticate with GCP CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['DNSZoneSpecGcpCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)


@pulumi.input_type
class DNSZoneSpecGcpCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef references a secret that will be used to authenticate with GCP CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DNSZoneStatusArgs:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['DNSZoneStatusAwsArgs']] = None,
                 azure: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['DNSZoneStatusConditionsArgs']]]] = None,
                 gcp: Optional[pulumi.Input['DNSZoneStatusGcpArgs']] = None,
                 last_sync_generation: Optional[pulumi.Input[int]] = None,
                 last_sync_timestamp: Optional[pulumi.Input[str]] = None,
                 name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        DNSZoneStatus defines the observed state of DNSZone
        :param pulumi.Input['DNSZoneStatusAwsArgs'] aws: AWSDNSZoneStatus contains status information specific to AWS
        :param pulumi.Input[Mapping[str, Any]] azure: AzureDNSZoneStatus contains status information specific to Azure
        :param pulumi.Input[Sequence[pulumi.Input['DNSZoneStatusConditionsArgs']]] conditions: Conditions includes more detailed status for the DNSZone
        :param pulumi.Input['DNSZoneStatusGcpArgs'] gcp: GCPDNSZoneStatus contains status information specific to GCP
        :param pulumi.Input[int] last_sync_generation: LastSyncGeneration is the generation of the zone resource that was last sync'd. This is used to know if the Object has changed and we should sync immediately.
        :param pulumi.Input[str] last_sync_timestamp: LastSyncTimestamp is the time that the zone was last sync'd.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] name_servers: NameServers is a list of nameservers for this DNS zone
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if last_sync_generation is not None:
            pulumi.set(__self__, "last_sync_generation", last_sync_generation)
        if last_sync_timestamp is not None:
            pulumi.set(__self__, "last_sync_timestamp", last_sync_timestamp)
        if name_servers is not None:
            pulumi.set(__self__, "name_servers", name_servers)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['DNSZoneStatusAwsArgs']]:
        """
        AWSDNSZoneStatus contains status information specific to AWS
        """
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['DNSZoneStatusAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        AzureDNSZoneStatus contains status information specific to Azure
        """
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DNSZoneStatusConditionsArgs']]]]:
        """
        Conditions includes more detailed status for the DNSZone
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DNSZoneStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def gcp(self) -> Optional[pulumi.Input['DNSZoneStatusGcpArgs']]:
        """
        GCPDNSZoneStatus contains status information specific to GCP
        """
        return pulumi.get(self, "gcp")

    @gcp.setter
    def gcp(self, value: Optional[pulumi.Input['DNSZoneStatusGcpArgs']]):
        pulumi.set(self, "gcp", value)

    @property
    @pulumi.getter(name="lastSyncGeneration")
    def last_sync_generation(self) -> Optional[pulumi.Input[int]]:
        """
        LastSyncGeneration is the generation of the zone resource that was last sync'd. This is used to know if the Object has changed and we should sync immediately.
        """
        return pulumi.get(self, "last_sync_generation")

    @last_sync_generation.setter
    def last_sync_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_sync_generation", value)

    @property
    @pulumi.getter(name="lastSyncTimestamp")
    def last_sync_timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        LastSyncTimestamp is the time that the zone was last sync'd.
        """
        return pulumi.get(self, "last_sync_timestamp")

    @last_sync_timestamp.setter
    def last_sync_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_sync_timestamp", value)

    @property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        NameServers is a list of nameservers for this DNS zone
        """
        return pulumi.get(self, "name_servers")

    @name_servers.setter
    def name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "name_servers", value)


@pulumi.input_type
class DNSZoneStatusAwsArgs:
    def __init__(__self__, *,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        AWSDNSZoneStatus contains status information specific to AWS
        :param pulumi.Input[str] zone_id: ZoneID is the ID of the zone in AWS
        """
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="zoneID")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        ZoneID is the ID of the zone in AWS
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class DNSZoneStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_probe_time: Optional[pulumi.Input[str]] = None,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        DNSZoneCondition contains details for the current condition of a DNSZone
        :param pulumi.Input[str] status: Status is the status of the condition.
        :param pulumi.Input[str] type: Type is the type of the condition.
        :param pulumi.Input[str] last_probe_time: LastProbeTime is the last time we probed the condition.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: Message is a human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @last_probe_time.setter
    def last_probe_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_probe_time", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class DNSZoneStatusGcpArgs:
    def __init__(__self__, *,
                 zone_name: Optional[pulumi.Input[str]] = None):
        """
        GCPDNSZoneStatus contains status information specific to GCP
        :param pulumi.Input[str] zone_name: ZoneName is the name of the zone in GCP Cloud DNS
        """
        if zone_name is not None:
            pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        ZoneName is the name of the zone in GCP Cloud DNS
        """
        return pulumi.get(self, "zone_name")

    @zone_name.setter
    def zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_name", value)


@pulumi.input_type
class HiveConfigSpecArgs:
    def __init__(__self__, *,
                 additional_certificate_authorities_secret_ref: Optional[pulumi.Input[Sequence[pulumi.Input['HiveConfigSpecAdditionalCertificateAuthoritiesSecretRefArgs']]]] = None,
                 backup: Optional[pulumi.Input['HiveConfigSpecBackupArgs']] = None,
                 delete_protection: Optional[pulumi.Input[str]] = None,
                 deprovisions_disabled: Optional[pulumi.Input[bool]] = None,
                 disabled_controllers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 failed_provision_config: Optional[pulumi.Input['HiveConfigSpecFailedProvisionConfigArgs']] = None,
                 global_pull_secret_ref: Optional[pulumi.Input['HiveConfigSpecGlobalPullSecretRefArgs']] = None,
                 hive_api_enabled: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 maintenance_mode: Optional[pulumi.Input[bool]] = None,
                 managed_domains: Optional[pulumi.Input[Sequence[pulumi.Input['HiveConfigSpecManagedDomainsArgs']]]] = None,
                 sync_set_reapply_interval: Optional[pulumi.Input[str]] = None,
                 target_namespace: Optional[pulumi.Input[str]] = None):
        """
        HiveConfigSpec defines the desired state of Hive
        :param pulumi.Input[Sequence[pulumi.Input['HiveConfigSpecAdditionalCertificateAuthoritiesSecretRefArgs']]] additional_certificate_authorities_secret_ref: AdditionalCertificateAuthoritiesSecretRef is a list of references to secrets in the TargetNamespace that contain an additional Certificate Authority to use when communicating with target clusters. These certificate authorities will be used in addition to any self-signed CA generated by each cluster on installation.
        :param pulumi.Input['HiveConfigSpecBackupArgs'] backup: Backup specifies configuration for backup integration. If absent, backup integration will be disabled.
        :param pulumi.Input[str] delete_protection: DeleteProtection can be set to "enabled" to turn on automatic delete protection for ClusterDeployments. When enabled, Hive will add the "hive.openshift.io/protected-delete" annotation to new ClusterDeployments. Once a ClusterDeployment has been installed, a user must remove the annotation from a ClusterDeployment prior to deleting it.
        :param pulumi.Input[bool] deprovisions_disabled: DeprovisionsDisabled can be set to true to block deprovision jobs from running.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disabled_controllers: DisabledControllers allows selectively disabling Hive controllers by name. The name of an individual controller matches the name of the controller as seen in the Hive logging output.
        :param pulumi.Input['HiveConfigSpecFailedProvisionConfigArgs'] failed_provision_config: FailedProvisionConfig is used to configure settings related to handling provision failures.
        :param pulumi.Input['HiveConfigSpecGlobalPullSecretRefArgs'] global_pull_secret_ref: GlobalPullSecretRef is used to specify a pull secret that will be used globally by all of the cluster deployments. For each cluster deployment, the contents of GlobalPullSecret will be merged with the specific pull secret for a cluster deployment(if specified), with precedence given to the contents of the pull secret for the cluster deployment. The global pull secret is assumed to be in the TargetNamespace.
        :param pulumi.Input[bool] hive_api_enabled: HiveAPIEnabled is a boolean controlling whether or not the Hive operator will start up the v1alpha1 aggregated API server.
        :param pulumi.Input[str] log_level: LogLevel is the level of logging to use for the Hive controllers. Acceptable levels, from coarsest to finest, are panic, fatal, error, warn, info, debug, and trace. The default level is info.
        :param pulumi.Input[bool] maintenance_mode: MaintenanceMode can be set to true to disable the hive controllers in situations where we need to ensure nothing is running that will add or act upon finalizers on Hive types. This should rarely be needed. Sets replicas to 0 for the hive-controllers deployment to accomplish this.
        :param pulumi.Input[Sequence[pulumi.Input['HiveConfigSpecManagedDomainsArgs']]] managed_domains: ManagedDomains is the list of DNS domains that are managed by the Hive cluster When specifying 'manageDNS: true' in a ClusterDeployment, the ClusterDeployment's baseDomain should be a direct child of one of these domains, otherwise the ClusterDeployment creation will result in a validation error.
        :param pulumi.Input[str] sync_set_reapply_interval: SyncSetReapplyInterval is a string duration indicating how much time must pass before SyncSet resources will be reapplied. The default reapply interval is two hours.
        :param pulumi.Input[str] target_namespace: TargetNamespace is the namespace where the core Hive components should be run. Defaults to "hive". Will be created if it does not already exist. All resource references in HiveConfig can be assumed to be in the TargetNamespace.
        """
        if additional_certificate_authorities_secret_ref is not None:
            pulumi.set(__self__, "additional_certificate_authorities_secret_ref", additional_certificate_authorities_secret_ref)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if delete_protection is not None:
            pulumi.set(__self__, "delete_protection", delete_protection)
        if deprovisions_disabled is not None:
            pulumi.set(__self__, "deprovisions_disabled", deprovisions_disabled)
        if disabled_controllers is not None:
            pulumi.set(__self__, "disabled_controllers", disabled_controllers)
        if failed_provision_config is not None:
            pulumi.set(__self__, "failed_provision_config", failed_provision_config)
        if global_pull_secret_ref is not None:
            pulumi.set(__self__, "global_pull_secret_ref", global_pull_secret_ref)
        if hive_api_enabled is not None:
            pulumi.set(__self__, "hive_api_enabled", hive_api_enabled)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if maintenance_mode is not None:
            pulumi.set(__self__, "maintenance_mode", maintenance_mode)
        if managed_domains is not None:
            pulumi.set(__self__, "managed_domains", managed_domains)
        if sync_set_reapply_interval is not None:
            pulumi.set(__self__, "sync_set_reapply_interval", sync_set_reapply_interval)
        if target_namespace is not None:
            pulumi.set(__self__, "target_namespace", target_namespace)

    @property
    @pulumi.getter(name="additionalCertificateAuthoritiesSecretRef")
    def additional_certificate_authorities_secret_ref(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HiveConfigSpecAdditionalCertificateAuthoritiesSecretRefArgs']]]]:
        """
        AdditionalCertificateAuthoritiesSecretRef is a list of references to secrets in the TargetNamespace that contain an additional Certificate Authority to use when communicating with target clusters. These certificate authorities will be used in addition to any self-signed CA generated by each cluster on installation.
        """
        return pulumi.get(self, "additional_certificate_authorities_secret_ref")

    @additional_certificate_authorities_secret_ref.setter
    def additional_certificate_authorities_secret_ref(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HiveConfigSpecAdditionalCertificateAuthoritiesSecretRefArgs']]]]):
        pulumi.set(self, "additional_certificate_authorities_secret_ref", value)

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input['HiveConfigSpecBackupArgs']]:
        """
        Backup specifies configuration for backup integration. If absent, backup integration will be disabled.
        """
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input['HiveConfigSpecBackupArgs']]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> Optional[pulumi.Input[str]]:
        """
        DeleteProtection can be set to "enabled" to turn on automatic delete protection for ClusterDeployments. When enabled, Hive will add the "hive.openshift.io/protected-delete" annotation to new ClusterDeployments. Once a ClusterDeployment has been installed, a user must remove the annotation from a ClusterDeployment prior to deleting it.
        """
        return pulumi.get(self, "delete_protection")

    @delete_protection.setter
    def delete_protection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_protection", value)

    @property
    @pulumi.getter(name="deprovisionsDisabled")
    def deprovisions_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        DeprovisionsDisabled can be set to true to block deprovision jobs from running.
        """
        return pulumi.get(self, "deprovisions_disabled")

    @deprovisions_disabled.setter
    def deprovisions_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deprovisions_disabled", value)

    @property
    @pulumi.getter(name="disabledControllers")
    def disabled_controllers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        DisabledControllers allows selectively disabling Hive controllers by name. The name of an individual controller matches the name of the controller as seen in the Hive logging output.
        """
        return pulumi.get(self, "disabled_controllers")

    @disabled_controllers.setter
    def disabled_controllers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disabled_controllers", value)

    @property
    @pulumi.getter(name="failedProvisionConfig")
    def failed_provision_config(self) -> Optional[pulumi.Input['HiveConfigSpecFailedProvisionConfigArgs']]:
        """
        FailedProvisionConfig is used to configure settings related to handling provision failures.
        """
        return pulumi.get(self, "failed_provision_config")

    @failed_provision_config.setter
    def failed_provision_config(self, value: Optional[pulumi.Input['HiveConfigSpecFailedProvisionConfigArgs']]):
        pulumi.set(self, "failed_provision_config", value)

    @property
    @pulumi.getter(name="globalPullSecretRef")
    def global_pull_secret_ref(self) -> Optional[pulumi.Input['HiveConfigSpecGlobalPullSecretRefArgs']]:
        """
        GlobalPullSecretRef is used to specify a pull secret that will be used globally by all of the cluster deployments. For each cluster deployment, the contents of GlobalPullSecret will be merged with the specific pull secret for a cluster deployment(if specified), with precedence given to the contents of the pull secret for the cluster deployment. The global pull secret is assumed to be in the TargetNamespace.
        """
        return pulumi.get(self, "global_pull_secret_ref")

    @global_pull_secret_ref.setter
    def global_pull_secret_ref(self, value: Optional[pulumi.Input['HiveConfigSpecGlobalPullSecretRefArgs']]):
        pulumi.set(self, "global_pull_secret_ref", value)

    @property
    @pulumi.getter(name="hiveAPIEnabled")
    def hive_api_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        HiveAPIEnabled is a boolean controlling whether or not the Hive operator will start up the v1alpha1 aggregated API server.
        """
        return pulumi.get(self, "hive_api_enabled")

    @hive_api_enabled.setter
    def hive_api_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hive_api_enabled", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        LogLevel is the level of logging to use for the Hive controllers. Acceptable levels, from coarsest to finest, are panic, fatal, error, warn, info, debug, and trace. The default level is info.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="maintenanceMode")
    def maintenance_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        MaintenanceMode can be set to true to disable the hive controllers in situations where we need to ensure nothing is running that will add or act upon finalizers on Hive types. This should rarely be needed. Sets replicas to 0 for the hive-controllers deployment to accomplish this.
        """
        return pulumi.get(self, "maintenance_mode")

    @maintenance_mode.setter
    def maintenance_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "maintenance_mode", value)

    @property
    @pulumi.getter(name="managedDomains")
    def managed_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HiveConfigSpecManagedDomainsArgs']]]]:
        """
        ManagedDomains is the list of DNS domains that are managed by the Hive cluster When specifying 'manageDNS: true' in a ClusterDeployment, the ClusterDeployment's baseDomain should be a direct child of one of these domains, otherwise the ClusterDeployment creation will result in a validation error.
        """
        return pulumi.get(self, "managed_domains")

    @managed_domains.setter
    def managed_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HiveConfigSpecManagedDomainsArgs']]]]):
        pulumi.set(self, "managed_domains", value)

    @property
    @pulumi.getter(name="syncSetReapplyInterval")
    def sync_set_reapply_interval(self) -> Optional[pulumi.Input[str]]:
        """
        SyncSetReapplyInterval is a string duration indicating how much time must pass before SyncSet resources will be reapplied. The default reapply interval is two hours.
        """
        return pulumi.get(self, "sync_set_reapply_interval")

    @sync_set_reapply_interval.setter
    def sync_set_reapply_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_set_reapply_interval", value)

    @property
    @pulumi.getter(name="targetNamespace")
    def target_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        TargetNamespace is the namespace where the core Hive components should be run. Defaults to "hive". Will be created if it does not already exist. All resource references in HiveConfig can be assumed to be in the TargetNamespace.
        """
        return pulumi.get(self, "target_namespace")

    @target_namespace.setter
    def target_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_namespace", value)


@pulumi.input_type
class HiveConfigSpecAdditionalCertificateAuthoritiesSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class HiveConfigSpecBackupArgs:
    def __init__(__self__, *,
                 min_backup_period_seconds: Optional[pulumi.Input[int]] = None,
                 velero: Optional[pulumi.Input['HiveConfigSpecBackupVeleroArgs']] = None):
        """
        Backup specifies configuration for backup integration. If absent, backup integration will be disabled.
        :param pulumi.Input[int] min_backup_period_seconds: MinBackupPeriodSeconds specifies that a minimum of MinBackupPeriodSeconds will occur in between each backup. This is used to rate limit backups. This potentially batches together multiple changes into 1 backup. No backups will be lost as changes that happen during this interval are queued up and will result in a backup happening once the interval has been completed.
        :param pulumi.Input['HiveConfigSpecBackupVeleroArgs'] velero: Velero specifies configuration for the Velero backup integration.
        """
        if min_backup_period_seconds is not None:
            pulumi.set(__self__, "min_backup_period_seconds", min_backup_period_seconds)
        if velero is not None:
            pulumi.set(__self__, "velero", velero)

    @property
    @pulumi.getter(name="minBackupPeriodSeconds")
    def min_backup_period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        MinBackupPeriodSeconds specifies that a minimum of MinBackupPeriodSeconds will occur in between each backup. This is used to rate limit backups. This potentially batches together multiple changes into 1 backup. No backups will be lost as changes that happen during this interval are queued up and will result in a backup happening once the interval has been completed.
        """
        return pulumi.get(self, "min_backup_period_seconds")

    @min_backup_period_seconds.setter
    def min_backup_period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_backup_period_seconds", value)

    @property
    @pulumi.getter
    def velero(self) -> Optional[pulumi.Input['HiveConfigSpecBackupVeleroArgs']]:
        """
        Velero specifies configuration for the Velero backup integration.
        """
        return pulumi.get(self, "velero")

    @velero.setter
    def velero(self, value: Optional[pulumi.Input['HiveConfigSpecBackupVeleroArgs']]):
        pulumi.set(self, "velero", value)


@pulumi.input_type
class HiveConfigSpecBackupVeleroArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        Velero specifies configuration for the Velero backup integration.
        :param pulumi.Input[bool] enabled: Enabled dictates if Velero backup integration is enabled. If not specified, the default is disabled.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabled dictates if Velero backup integration is enabled. If not specified, the default is disabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class HiveConfigSpecFailedProvisionConfigArgs:
    def __init__(__self__, *,
                 skip_gather_logs: Optional[pulumi.Input[bool]] = None):
        """
        FailedProvisionConfig is used to configure settings related to handling provision failures.
        :param pulumi.Input[bool] skip_gather_logs: SkipGatherLogs disables functionality that attempts to gather full logs from the cluster if an installation fails for any reason. The logs will be stored in a persistent volume for up to 7 days.
        """
        if skip_gather_logs is not None:
            pulumi.set(__self__, "skip_gather_logs", skip_gather_logs)

    @property
    @pulumi.getter(name="skipGatherLogs")
    def skip_gather_logs(self) -> Optional[pulumi.Input[bool]]:
        """
        SkipGatherLogs disables functionality that attempts to gather full logs from the cluster if an installation fails for any reason. The logs will be stored in a persistent volume for up to 7 days.
        """
        return pulumi.get(self, "skip_gather_logs")

    @skip_gather_logs.setter
    def skip_gather_logs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_gather_logs", value)


@pulumi.input_type
class HiveConfigSpecGlobalPullSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        GlobalPullSecretRef is used to specify a pull secret that will be used globally by all of the cluster deployments. For each cluster deployment, the contents of GlobalPullSecret will be merged with the specific pull secret for a cluster deployment(if specified), with precedence given to the contents of the pull secret for the cluster deployment. The global pull secret is assumed to be in the TargetNamespace.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class HiveConfigSpecManagedDomainsArgs:
    def __init__(__self__, *,
                 domains: pulumi.Input[Sequence[pulumi.Input[str]]],
                 aws: Optional[pulumi.Input['HiveConfigSpecManagedDomainsAwsArgs']] = None,
                 azure: Optional[pulumi.Input['HiveConfigSpecManagedDomainsAzureArgs']] = None,
                 gcp: Optional[pulumi.Input['HiveConfigSpecManagedDomainsGcpArgs']] = None):
        """
        ManageDNSConfig contains the domain being managed, and the cloud-specific details for accessing/managing the domain.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domains: Domains is the list of domains that hive will be managing entries for with the provided credentials.
        :param pulumi.Input['HiveConfigSpecManagedDomainsAwsArgs'] aws: AWS contains AWS-specific settings for external DNS
        :param pulumi.Input['HiveConfigSpecManagedDomainsAzureArgs'] azure: Azure contains Azure-specific settings for external DNS
        :param pulumi.Input['HiveConfigSpecManagedDomainsGcpArgs'] gcp: GCP contains GCP-specific settings for external DNS
        """
        pulumi.set(__self__, "domains", domains)
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Domains is the list of domains that hive will be managing entries for with the provided credentials.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['HiveConfigSpecManagedDomainsAwsArgs']]:
        """
        AWS contains AWS-specific settings for external DNS
        """
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['HiveConfigSpecManagedDomainsAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['HiveConfigSpecManagedDomainsAzureArgs']]:
        """
        Azure contains Azure-specific settings for external DNS
        """
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['HiveConfigSpecManagedDomainsAzureArgs']]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter
    def gcp(self) -> Optional[pulumi.Input['HiveConfigSpecManagedDomainsGcpArgs']]:
        """
        GCP contains GCP-specific settings for external DNS
        """
        return pulumi.get(self, "gcp")

    @gcp.setter
    def gcp(self, value: Optional[pulumi.Input['HiveConfigSpecManagedDomainsGcpArgs']]):
        pulumi.set(self, "gcp", value)


@pulumi.input_type
class HiveConfigSpecManagedDomainsAwsArgs:
    def __init__(__self__, *,
                 credentials_secret_ref: pulumi.Input['HiveConfigSpecManagedDomainsAwsCredentialsSecretRefArgs'],
                 region: Optional[pulumi.Input[str]] = None):
        """
        AWS contains AWS-specific settings for external DNS
        :param pulumi.Input['HiveConfigSpecManagedDomainsAwsCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with AWS Route53. It will need permission to manage entries for the domain listed in the parent ManageDNSConfig object. Secret should have AWS keys named 'aws_access_key_id' and 'aws_secret_access_key'.
        :param pulumi.Input[str] region: Region is the AWS region to use for route53 operations. This defaults to us-east-1. For AWS China, use cn-northwest-1.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['HiveConfigSpecManagedDomainsAwsCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with AWS Route53. It will need permission to manage entries for the domain listed in the parent ManageDNSConfig object. Secret should have AWS keys named 'aws_access_key_id' and 'aws_secret_access_key'.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['HiveConfigSpecManagedDomainsAwsCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region is the AWS region to use for route53 operations. This defaults to us-east-1. For AWS China, use cn-northwest-1.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class HiveConfigSpecManagedDomainsAwsCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with AWS Route53. It will need permission to manage entries for the domain listed in the parent ManageDNSConfig object. Secret should have AWS keys named 'aws_access_key_id' and 'aws_secret_access_key'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class HiveConfigSpecManagedDomainsAzureArgs:
    def __init__(__self__, *,
                 credentials_secret_ref: pulumi.Input['HiveConfigSpecManagedDomainsAzureCredentialsSecretRefArgs'],
                 resource_group_name: pulumi.Input[str]):
        """
        Azure contains Azure-specific settings for external DNS
        :param pulumi.Input['HiveConfigSpecManagedDomainsAzureCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with Azure DNS. It wil need permission to manage entries in each of the managed domains listed in the parent ManageDNSConfig object. Secret should have a key named 'osServicePrincipal.json'
        :param pulumi.Input[str] resource_group_name: ResourceGroupName specifies the Azure resource group containing the DNS zones for the domains being managed.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "resource_group_name", resource_group_name)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['HiveConfigSpecManagedDomainsAzureCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with Azure DNS. It wil need permission to manage entries in each of the managed domains listed in the parent ManageDNSConfig object. Secret should have a key named 'osServicePrincipal.json'
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['HiveConfigSpecManagedDomainsAzureCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        ResourceGroupName specifies the Azure resource group containing the DNS zones for the domains being managed.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)


@pulumi.input_type
class HiveConfigSpecManagedDomainsAzureCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with Azure DNS. It wil need permission to manage entries in each of the managed domains listed in the parent ManageDNSConfig object. Secret should have a key named 'osServicePrincipal.json'
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class HiveConfigSpecManagedDomainsGcpArgs:
    def __init__(__self__, *,
                 credentials_secret_ref: pulumi.Input['HiveConfigSpecManagedDomainsGcpCredentialsSecretRefArgs']):
        """
        GCP contains GCP-specific settings for external DNS
        :param pulumi.Input['HiveConfigSpecManagedDomainsGcpCredentialsSecretRefArgs'] credentials_secret_ref: CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with GCP DNS. It will need permission to manage entries in each of the managed domains for this cluster. listed in the parent ManageDNSConfig object. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> pulumi.Input['HiveConfigSpecManagedDomainsGcpCredentialsSecretRefArgs']:
        """
        CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with GCP DNS. It will need permission to manage entries in each of the managed domains for this cluster. listed in the parent ManageDNSConfig object. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @credentials_secret_ref.setter
    def credentials_secret_ref(self, value: pulumi.Input['HiveConfigSpecManagedDomainsGcpCredentialsSecretRefArgs']):
        pulumi.set(self, "credentials_secret_ref", value)


@pulumi.input_type
class HiveConfigSpecManagedDomainsGcpCredentialsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with GCP DNS. It will need permission to manage entries in each of the managed domains for this cluster. listed in the parent ManageDNSConfig object. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class HiveConfigStatusArgs:
    def __init__(__self__, *,
                 aggregator_client_ca_hash: Optional[pulumi.Input[str]] = None,
                 config_applied: Optional[pulumi.Input[bool]] = None,
                 observed_generation: Optional[pulumi.Input[int]] = None):
        """
        HiveConfigStatus defines the observed state of Hive
        :param pulumi.Input[str] aggregator_client_ca_hash: AggregatorClientCAHash keeps an md5 hash of the aggregator client CA configmap data from the openshift-config-managed namespace. When the configmap changes, admission is redeployed.
        :param pulumi.Input[bool] config_applied: ConfigApplied will be set by the hive operator to indicate whether or not the LastGenerationObserved was successfully reconciled.
        :param pulumi.Input[int] observed_generation: ObservedGeneration will record the most recently processed HiveConfig object's generation.
        """
        if aggregator_client_ca_hash is not None:
            pulumi.set(__self__, "aggregator_client_ca_hash", aggregator_client_ca_hash)
        if config_applied is not None:
            pulumi.set(__self__, "config_applied", config_applied)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter(name="aggregatorClientCAHash")
    def aggregator_client_ca_hash(self) -> Optional[pulumi.Input[str]]:
        """
        AggregatorClientCAHash keeps an md5 hash of the aggregator client CA configmap data from the openshift-config-managed namespace. When the configmap changes, admission is redeployed.
        """
        return pulumi.get(self, "aggregator_client_ca_hash")

    @aggregator_client_ca_hash.setter
    def aggregator_client_ca_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_client_ca_hash", value)

    @property
    @pulumi.getter(name="configApplied")
    def config_applied(self) -> Optional[pulumi.Input[bool]]:
        """
        ConfigApplied will be set by the hive operator to indicate whether or not the LastGenerationObserved was successfully reconciled.
        """
        return pulumi.get(self, "config_applied")

    @config_applied.setter
    def config_applied(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "config_applied", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        ObservedGeneration will record the most recently processed HiveConfig object's generation.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)


@pulumi.input_type
class MachinePoolSpecArgs:
    def __init__(__self__, *,
                 cluster_deployment_ref: pulumi.Input['MachinePoolSpecClusterDeploymentRefArgs'],
                 name: pulumi.Input[str],
                 platform: pulumi.Input['MachinePoolSpecPlatformArgs'],
                 autoscaling: Optional[pulumi.Input['MachinePoolSpecAutoscalingArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['MachinePoolSpecTaintsArgs']]]] = None):
        """
        MachinePoolSpec defines the desired state of MachinePool
        :param pulumi.Input['MachinePoolSpecClusterDeploymentRefArgs'] cluster_deployment_ref: ClusterDeploymentRef references the cluster deployment to which this machine pool belongs.
        :param pulumi.Input[str] name: Name is the name of the machine pool.
        :param pulumi.Input['MachinePoolSpecPlatformArgs'] platform: Platform is configuration for machine pool specific to the platform.
        :param pulumi.Input['MachinePoolSpecAutoscalingArgs'] autoscaling: Autoscaling is the details for auto-scaling the machine pool. Replicas and autoscaling cannot be used together.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Map of label string keys and values that will be applied to the created MachineSet's MachineSpec. This list will overwrite any modifications made to Node labels on an ongoing basis.
        :param pulumi.Input[int] replicas: Replicas is the count of machines for this machine pool. Replicas and autoscaling cannot be used together. Default is 1, if autoscaling is not used.
        :param pulumi.Input[Sequence[pulumi.Input['MachinePoolSpecTaintsArgs']]] taints: List of taints that will be applied to the created MachineSet's MachineSpec. This list will overwrite any modifications made to Node taints on an ongoing basis.
        """
        pulumi.set(__self__, "cluster_deployment_ref", cluster_deployment_ref)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "platform", platform)
        if autoscaling is not None:
            pulumi.set(__self__, "autoscaling", autoscaling)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter(name="clusterDeploymentRef")
    def cluster_deployment_ref(self) -> pulumi.Input['MachinePoolSpecClusterDeploymentRefArgs']:
        """
        ClusterDeploymentRef references the cluster deployment to which this machine pool belongs.
        """
        return pulumi.get(self, "cluster_deployment_ref")

    @cluster_deployment_ref.setter
    def cluster_deployment_ref(self, value: pulumi.Input['MachinePoolSpecClusterDeploymentRefArgs']):
        pulumi.set(self, "cluster_deployment_ref", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the machine pool.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def platform(self) -> pulumi.Input['MachinePoolSpecPlatformArgs']:
        """
        Platform is configuration for machine pool specific to the platform.
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: pulumi.Input['MachinePoolSpecPlatformArgs']):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional[pulumi.Input['MachinePoolSpecAutoscalingArgs']]:
        """
        Autoscaling is the details for auto-scaling the machine pool. Replicas and autoscaling cannot be used together.
        """
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: Optional[pulumi.Input['MachinePoolSpecAutoscalingArgs']]):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of label string keys and values that will be applied to the created MachineSet's MachineSpec. This list will overwrite any modifications made to Node labels on an ongoing basis.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Replicas is the count of machines for this machine pool. Replicas and autoscaling cannot be used together. Default is 1, if autoscaling is not used.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MachinePoolSpecTaintsArgs']]]]:
        """
        List of taints that will be applied to the created MachineSet's MachineSpec. This list will overwrite any modifications made to Node taints on an ongoing basis.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MachinePoolSpecTaintsArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class MachinePoolSpecAutoscalingArgs:
    def __init__(__self__, *,
                 max_replicas: pulumi.Input[int],
                 min_replicas: pulumi.Input[int]):
        """
        Autoscaling is the details for auto-scaling the machine pool. Replicas and autoscaling cannot be used together.
        :param pulumi.Input[int] max_replicas: MaxReplicas is the maximum number of replicas for the machine pool.
        :param pulumi.Input[int] min_replicas: MinReplicas is the minimum number of replicas for the machine pool.
        """
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "min_replicas", min_replicas)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> pulumi.Input[int]:
        """
        MaxReplicas is the maximum number of replicas for the machine pool.
        """
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> pulumi.Input[int]:
        """
        MinReplicas is the minimum number of replicas for the machine pool.
        """
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_replicas", value)


@pulumi.input_type
class MachinePoolSpecClusterDeploymentRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        ClusterDeploymentRef references the cluster deployment to which this machine pool belongs.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class MachinePoolSpecPlatformArgs:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['MachinePoolSpecPlatformAwsArgs']] = None,
                 azure: Optional[pulumi.Input['MachinePoolSpecPlatformAzureArgs']] = None,
                 gcp: Optional[pulumi.Input['MachinePoolSpecPlatformGcpArgs']] = None,
                 openstack: Optional[pulumi.Input['MachinePoolSpecPlatformOpenstackArgs']] = None,
                 ovirt: Optional[pulumi.Input['MachinePoolSpecPlatformOvirtArgs']] = None,
                 vsphere: Optional[pulumi.Input['MachinePoolSpecPlatformVsphereArgs']] = None):
        """
        Platform is configuration for machine pool specific to the platform.
        :param pulumi.Input['MachinePoolSpecPlatformAwsArgs'] aws: AWS is the configuration used when installing on AWS.
        :param pulumi.Input['MachinePoolSpecPlatformAzureArgs'] azure: Azure is the configuration used when installing on Azure.
        :param pulumi.Input['MachinePoolSpecPlatformGcpArgs'] gcp: GCP is the configuration used when installing on GCP.
        :param pulumi.Input['MachinePoolSpecPlatformOpenstackArgs'] openstack: OpenStack is the configuration used when installing on OpenStack.
        :param pulumi.Input['MachinePoolSpecPlatformOvirtArgs'] ovirt: Ovirt is the configuration used when installing on oVirt.
        :param pulumi.Input['MachinePoolSpecPlatformVsphereArgs'] vsphere: VSphere is the configuration used when installing on vSphere
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if openstack is not None:
            pulumi.set(__self__, "openstack", openstack)
        if ovirt is not None:
            pulumi.set(__self__, "ovirt", ovirt)
        if vsphere is not None:
            pulumi.set(__self__, "vsphere", vsphere)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['MachinePoolSpecPlatformAwsArgs']]:
        """
        AWS is the configuration used when installing on AWS.
        """
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['MachinePoolSpecPlatformAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['MachinePoolSpecPlatformAzureArgs']]:
        """
        Azure is the configuration used when installing on Azure.
        """
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['MachinePoolSpecPlatformAzureArgs']]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter
    def gcp(self) -> Optional[pulumi.Input['MachinePoolSpecPlatformGcpArgs']]:
        """
        GCP is the configuration used when installing on GCP.
        """
        return pulumi.get(self, "gcp")

    @gcp.setter
    def gcp(self, value: Optional[pulumi.Input['MachinePoolSpecPlatformGcpArgs']]):
        pulumi.set(self, "gcp", value)

    @property
    @pulumi.getter
    def openstack(self) -> Optional[pulumi.Input['MachinePoolSpecPlatformOpenstackArgs']]:
        """
        OpenStack is the configuration used when installing on OpenStack.
        """
        return pulumi.get(self, "openstack")

    @openstack.setter
    def openstack(self, value: Optional[pulumi.Input['MachinePoolSpecPlatformOpenstackArgs']]):
        pulumi.set(self, "openstack", value)

    @property
    @pulumi.getter
    def ovirt(self) -> Optional[pulumi.Input['MachinePoolSpecPlatformOvirtArgs']]:
        """
        Ovirt is the configuration used when installing on oVirt.
        """
        return pulumi.get(self, "ovirt")

    @ovirt.setter
    def ovirt(self, value: Optional[pulumi.Input['MachinePoolSpecPlatformOvirtArgs']]):
        pulumi.set(self, "ovirt", value)

    @property
    @pulumi.getter
    def vsphere(self) -> Optional[pulumi.Input['MachinePoolSpecPlatformVsphereArgs']]:
        """
        VSphere is the configuration used when installing on vSphere
        """
        return pulumi.get(self, "vsphere")

    @vsphere.setter
    def vsphere(self, value: Optional[pulumi.Input['MachinePoolSpecPlatformVsphereArgs']]):
        pulumi.set(self, "vsphere", value)


@pulumi.input_type
class MachinePoolSpecPlatformAwsArgs:
    def __init__(__self__, *,
                 root_volume: pulumi.Input['MachinePoolSpecPlatformAwsRootVolumeArgs'],
                 type: pulumi.Input[str],
                 spot_market_options: Optional[pulumi.Input['MachinePoolSpecPlatformAwsSpotMarketOptionsArgs']] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        AWS is the configuration used when installing on AWS.
        :param pulumi.Input['MachinePoolSpecPlatformAwsRootVolumeArgs'] root_volume: EC2RootVolume defines the storage for ec2 instance.
        :param pulumi.Input[str] type: InstanceType defines the ec2 instance type. eg. m4-large
        :param pulumi.Input['MachinePoolSpecPlatformAwsSpotMarketOptionsArgs'] spot_market_options: SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: Subnets is the list of subnets to which to attach the machines. There must be exactly one subnet for each availability zone used.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: Zones is list of availability zones that can be used.
        """
        pulumi.set(__self__, "root_volume", root_volume)
        pulumi.set(__self__, "type", type)
        if spot_market_options is not None:
            pulumi.set(__self__, "spot_market_options", spot_market_options)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="rootVolume")
    def root_volume(self) -> pulumi.Input['MachinePoolSpecPlatformAwsRootVolumeArgs']:
        """
        EC2RootVolume defines the storage for ec2 instance.
        """
        return pulumi.get(self, "root_volume")

    @root_volume.setter
    def root_volume(self, value: pulumi.Input['MachinePoolSpecPlatformAwsRootVolumeArgs']):
        pulumi.set(self, "root_volume", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        InstanceType defines the ec2 instance type. eg. m4-large
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="spotMarketOptions")
    def spot_market_options(self) -> Optional[pulumi.Input['MachinePoolSpecPlatformAwsSpotMarketOptionsArgs']]:
        """
        SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.
        """
        return pulumi.get(self, "spot_market_options")

    @spot_market_options.setter
    def spot_market_options(self, value: Optional[pulumi.Input['MachinePoolSpecPlatformAwsSpotMarketOptionsArgs']]):
        pulumi.set(self, "spot_market_options", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Subnets is the list of subnets to which to attach the machines. There must be exactly one subnet for each availability zone used.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Zones is list of availability zones that can be used.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class MachinePoolSpecPlatformAwsRootVolumeArgs:
    def __init__(__self__, *,
                 iops: pulumi.Input[int],
                 size: pulumi.Input[int],
                 type: pulumi.Input[str]):
        """
        EC2RootVolume defines the storage for ec2 instance.
        :param pulumi.Input[int] iops: IOPS defines the iops for the storage.
        :param pulumi.Input[int] size: Size defines the size of the storage.
        :param pulumi.Input[str] type: Type defines the type of the storage.
        """
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def iops(self) -> pulumi.Input[int]:
        """
        IOPS defines the iops for the storage.
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: pulumi.Input[int]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[int]:
        """
        Size defines the size of the storage.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[int]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type defines the type of the storage.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class MachinePoolSpecPlatformAwsSpotMarketOptionsArgs:
    def __init__(__self__, *,
                 max_price: Optional[pulumi.Input[str]] = None):
        """
        SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.
        :param pulumi.Input[str] max_price: The maximum price the user is willing to pay for their instances Default: On-Demand price
        """
        if max_price is not None:
            pulumi.set(__self__, "max_price", max_price)

    @property
    @pulumi.getter(name="maxPrice")
    def max_price(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum price the user is willing to pay for their instances Default: On-Demand price
        """
        return pulumi.get(self, "max_price")

    @max_price.setter
    def max_price(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_price", value)


@pulumi.input_type
class MachinePoolSpecPlatformAzureArgs:
    def __init__(__self__, *,
                 os_disk: pulumi.Input['MachinePoolSpecPlatformAzureOsDiskArgs'],
                 type: pulumi.Input[str],
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Azure is the configuration used when installing on Azure.
        :param pulumi.Input['MachinePoolSpecPlatformAzureOsDiskArgs'] os_disk: OSDisk defines the storage for instance.
        :param pulumi.Input[str] type: InstanceType defines the azure instance type. eg. Standard_DS_V2
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: Zones is list of availability zones that can be used. eg. ["1", "2", "3"]
        """
        pulumi.set(__self__, "os_disk", os_disk)
        pulumi.set(__self__, "type", type)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> pulumi.Input['MachinePoolSpecPlatformAzureOsDiskArgs']:
        """
        OSDisk defines the storage for instance.
        """
        return pulumi.get(self, "os_disk")

    @os_disk.setter
    def os_disk(self, value: pulumi.Input['MachinePoolSpecPlatformAzureOsDiskArgs']):
        pulumi.set(self, "os_disk", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        InstanceType defines the azure instance type. eg. Standard_DS_V2
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Zones is list of availability zones that can be used. eg. ["1", "2", "3"]
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class MachinePoolSpecPlatformAzureOsDiskArgs:
    def __init__(__self__, *,
                 disk_size_gb: pulumi.Input[int]):
        """
        OSDisk defines the storage for instance.
        :param pulumi.Input[int] disk_size_gb: DiskSizeGB defines the size of disk in GB.
        """
        pulumi.set(__self__, "disk_size_gb", disk_size_gb)

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> pulumi.Input[int]:
        """
        DiskSizeGB defines the size of disk in GB.
        """
        return pulumi.get(self, "disk_size_gb")

    @disk_size_gb.setter
    def disk_size_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "disk_size_gb", value)


@pulumi.input_type
class MachinePoolSpecPlatformGcpArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        GCP is the configuration used when installing on GCP.
        :param pulumi.Input[str] type: InstanceType defines the GCP instance type. eg. n1-standard-4
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: Zones is list of availability zones that can be used.
        """
        pulumi.set(__self__, "type", type)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        InstanceType defines the GCP instance type. eg. n1-standard-4
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Zones is list of availability zones that can be used.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class MachinePoolSpecPlatformOpenstackArgs:
    def __init__(__self__, *,
                 flavor: pulumi.Input[str],
                 root_volume: Optional[pulumi.Input['MachinePoolSpecPlatformOpenstackRootVolumeArgs']] = None):
        """
        OpenStack is the configuration used when installing on OpenStack.
        :param pulumi.Input[str] flavor: Flavor defines the OpenStack Nova flavor. eg. m1.large The json key here differs from the installer which uses both "computeFlavor" and type "type" depending on which type you're looking at, and the resulting field on the MachineSet is "flavor". We are opting to stay consistent with the end result.
        :param pulumi.Input['MachinePoolSpecPlatformOpenstackRootVolumeArgs'] root_volume: RootVolume defines the root volume for instances in the machine pool. The instances use ephemeral disks if not set.
        """
        pulumi.set(__self__, "flavor", flavor)
        if root_volume is not None:
            pulumi.set(__self__, "root_volume", root_volume)

    @property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[str]:
        """
        Flavor defines the OpenStack Nova flavor. eg. m1.large The json key here differs from the installer which uses both "computeFlavor" and type "type" depending on which type you're looking at, and the resulting field on the MachineSet is "flavor". We are opting to stay consistent with the end result.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[str]):
        pulumi.set(self, "flavor", value)

    @property
    @pulumi.getter(name="rootVolume")
    def root_volume(self) -> Optional[pulumi.Input['MachinePoolSpecPlatformOpenstackRootVolumeArgs']]:
        """
        RootVolume defines the root volume for instances in the machine pool. The instances use ephemeral disks if not set.
        """
        return pulumi.get(self, "root_volume")

    @root_volume.setter
    def root_volume(self, value: Optional[pulumi.Input['MachinePoolSpecPlatformOpenstackRootVolumeArgs']]):
        pulumi.set(self, "root_volume", value)


@pulumi.input_type
class MachinePoolSpecPlatformOpenstackRootVolumeArgs:
    def __init__(__self__, *,
                 size: pulumi.Input[int],
                 type: pulumi.Input[str]):
        """
        RootVolume defines the root volume for instances in the machine pool. The instances use ephemeral disks if not set.
        :param pulumi.Input[int] size: Size defines the size of the volume in gibibytes (GiB). Required
        :param pulumi.Input[str] type: Type defines the type of the volume. Required
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[int]:
        """
        Size defines the size of the volume in gibibytes (GiB). Required
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[int]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type defines the type of the volume. Required
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class MachinePoolSpecPlatformOvirtArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input['MachinePoolSpecPlatformOvirtCpuArgs']] = None,
                 memory_mb: Optional[pulumi.Input[int]] = None,
                 os_disk: Optional[pulumi.Input['MachinePoolSpecPlatformOvirtOsDiskArgs']] = None,
                 vm_type: Optional[pulumi.Input[str]] = None):
        """
        Ovirt is the configuration used when installing on oVirt.
        :param pulumi.Input['MachinePoolSpecPlatformOvirtCpuArgs'] cpu: CPU defines the VM CPU.
        :param pulumi.Input[int] memory_mb: MemoryMB is the size of a VM's memory in MiBs.
        :param pulumi.Input['MachinePoolSpecPlatformOvirtOsDiskArgs'] os_disk: OSDisk is the the root disk of the node.
        :param pulumi.Input[str] vm_type: VMType defines the workload type of the VM.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory_mb is not None:
            pulumi.set(__self__, "memory_mb", memory_mb)
        if os_disk is not None:
            pulumi.set(__self__, "os_disk", os_disk)
        if vm_type is not None:
            pulumi.set(__self__, "vm_type", vm_type)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input['MachinePoolSpecPlatformOvirtCpuArgs']]:
        """
        CPU defines the VM CPU.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input['MachinePoolSpecPlatformOvirtCpuArgs']]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="memoryMB")
    def memory_mb(self) -> Optional[pulumi.Input[int]]:
        """
        MemoryMB is the size of a VM's memory in MiBs.
        """
        return pulumi.get(self, "memory_mb")

    @memory_mb.setter
    def memory_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_mb", value)

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> Optional[pulumi.Input['MachinePoolSpecPlatformOvirtOsDiskArgs']]:
        """
        OSDisk is the the root disk of the node.
        """
        return pulumi.get(self, "os_disk")

    @os_disk.setter
    def os_disk(self, value: Optional[pulumi.Input['MachinePoolSpecPlatformOvirtOsDiskArgs']]):
        pulumi.set(self, "os_disk", value)

    @property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> Optional[pulumi.Input[str]]:
        """
        VMType defines the workload type of the VM.
        """
        return pulumi.get(self, "vm_type")

    @vm_type.setter
    def vm_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_type", value)


@pulumi.input_type
class MachinePoolSpecPlatformOvirtCpuArgs:
    def __init__(__self__, *,
                 cores: pulumi.Input[int],
                 sockets: pulumi.Input[int]):
        """
        CPU defines the VM CPU.
        :param pulumi.Input[int] cores: Cores is the number of cores per socket. Total CPUs is (Sockets * Cores)
        :param pulumi.Input[int] sockets: Sockets is the number of sockets for a VM. Total CPUs is (Sockets * Cores)
        """
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "sockets", sockets)

    @property
    @pulumi.getter
    def cores(self) -> pulumi.Input[int]:
        """
        Cores is the number of cores per socket. Total CPUs is (Sockets * Cores)
        """
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: pulumi.Input[int]):
        pulumi.set(self, "cores", value)

    @property
    @pulumi.getter
    def sockets(self) -> pulumi.Input[int]:
        """
        Sockets is the number of sockets for a VM. Total CPUs is (Sockets * Cores)
        """
        return pulumi.get(self, "sockets")

    @sockets.setter
    def sockets(self, value: pulumi.Input[int]):
        pulumi.set(self, "sockets", value)


@pulumi.input_type
class MachinePoolSpecPlatformOvirtOsDiskArgs:
    def __init__(__self__, *,
                 size_gb: pulumi.Input[int]):
        """
        OSDisk is the the root disk of the node.
        :param pulumi.Input[int] size_gb: SizeGB size of the bootable disk in GiB.
        """
        pulumi.set(__self__, "size_gb", size_gb)

    @property
    @pulumi.getter(name="sizeGB")
    def size_gb(self) -> pulumi.Input[int]:
        """
        SizeGB size of the bootable disk in GiB.
        """
        return pulumi.get(self, "size_gb")

    @size_gb.setter
    def size_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "size_gb", value)


@pulumi.input_type
class MachinePoolSpecPlatformVsphereArgs:
    def __init__(__self__, *,
                 cores_per_socket: pulumi.Input[int],
                 cpus: pulumi.Input[int],
                 memory_mb: pulumi.Input[int],
                 os_disk: pulumi.Input['MachinePoolSpecPlatformVsphereOsDiskArgs']):
        """
        VSphere is the configuration used when installing on vSphere
        :param pulumi.Input[int] cores_per_socket: NumCoresPerSocket is the number of cores per socket in a vm. The number of vCPUs on the vm will be NumCPUs/NumCoresPerSocket.
        :param pulumi.Input[int] cpus: NumCPUs is the total number of virtual processor cores to assign a vm.
        :param pulumi.Input[int] memory_mb: Memory is the size of a VM's memory in MB.
        :param pulumi.Input['MachinePoolSpecPlatformVsphereOsDiskArgs'] os_disk: OSDisk defines the storage for instance.
        """
        pulumi.set(__self__, "cores_per_socket", cores_per_socket)
        pulumi.set(__self__, "cpus", cpus)
        pulumi.set(__self__, "memory_mb", memory_mb)
        pulumi.set(__self__, "os_disk", os_disk)

    @property
    @pulumi.getter(name="coresPerSocket")
    def cores_per_socket(self) -> pulumi.Input[int]:
        """
        NumCoresPerSocket is the number of cores per socket in a vm. The number of vCPUs on the vm will be NumCPUs/NumCoresPerSocket.
        """
        return pulumi.get(self, "cores_per_socket")

    @cores_per_socket.setter
    def cores_per_socket(self, value: pulumi.Input[int]):
        pulumi.set(self, "cores_per_socket", value)

    @property
    @pulumi.getter
    def cpus(self) -> pulumi.Input[int]:
        """
        NumCPUs is the total number of virtual processor cores to assign a vm.
        """
        return pulumi.get(self, "cpus")

    @cpus.setter
    def cpus(self, value: pulumi.Input[int]):
        pulumi.set(self, "cpus", value)

    @property
    @pulumi.getter(name="memoryMB")
    def memory_mb(self) -> pulumi.Input[int]:
        """
        Memory is the size of a VM's memory in MB.
        """
        return pulumi.get(self, "memory_mb")

    @memory_mb.setter
    def memory_mb(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory_mb", value)

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> pulumi.Input['MachinePoolSpecPlatformVsphereOsDiskArgs']:
        """
        OSDisk defines the storage for instance.
        """
        return pulumi.get(self, "os_disk")

    @os_disk.setter
    def os_disk(self, value: pulumi.Input['MachinePoolSpecPlatformVsphereOsDiskArgs']):
        pulumi.set(self, "os_disk", value)


@pulumi.input_type
class MachinePoolSpecPlatformVsphereOsDiskArgs:
    def __init__(__self__, *,
                 disk_size_gb: pulumi.Input[int]):
        """
        OSDisk defines the storage for instance.
        :param pulumi.Input[int] disk_size_gb: DiskSizeGB defines the size of disk in GB.
        """
        pulumi.set(__self__, "disk_size_gb", disk_size_gb)

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> pulumi.Input[int]:
        """
        DiskSizeGB defines the size of disk in GB.
        """
        return pulumi.get(self, "disk_size_gb")

    @disk_size_gb.setter
    def disk_size_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "disk_size_gb", value)


@pulumi.input_type
class MachinePoolSpecTaintsArgs:
    def __init__(__self__, *,
                 effect: pulumi.Input[str],
                 key: pulumi.Input[str],
                 time_added: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
        :param pulumi.Input[str] effect: Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Required. The taint key to be applied to a node.
        :param pulumi.Input[str] time_added: TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
        :param pulumi.Input[str] value: The taint value corresponding to the taint key.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        if time_added is not None:
            pulumi.set(__self__, "time_added", time_added)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> pulumi.Input[str]:
        """
        Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: pulumi.Input[str]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Required. The taint key to be applied to a node.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="timeAdded")
    def time_added(self) -> Optional[pulumi.Input[str]]:
        """
        TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
        """
        return pulumi.get(self, "time_added")

    @time_added.setter
    def time_added(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_added", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The taint value corresponding to the taint key.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class MachinePoolStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['MachinePoolStatusConditionsArgs']]]] = None,
                 machine_sets: Optional[pulumi.Input[Sequence[pulumi.Input['MachinePoolStatusMachineSetsArgs']]]] = None,
                 replicas: Optional[pulumi.Input[int]] = None):
        """
        MachinePoolStatus defines the observed state of MachinePool
        :param pulumi.Input[Sequence[pulumi.Input['MachinePoolStatusConditionsArgs']]] conditions: Conditions includes more detailed status for the cluster deployment
        :param pulumi.Input[Sequence[pulumi.Input['MachinePoolStatusMachineSetsArgs']]] machine_sets: MachineSets is the status of the machine sets for the machine pool on the remote cluster.
        :param pulumi.Input[int] replicas: Replicas is the current number of replicas for the machine pool.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if machine_sets is not None:
            pulumi.set(__self__, "machine_sets", machine_sets)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MachinePoolStatusConditionsArgs']]]]:
        """
        Conditions includes more detailed status for the cluster deployment
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MachinePoolStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="machineSets")
    def machine_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MachinePoolStatusMachineSetsArgs']]]]:
        """
        MachineSets is the status of the machine sets for the machine pool on the remote cluster.
        """
        return pulumi.get(self, "machine_sets")

    @machine_sets.setter
    def machine_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MachinePoolStatusMachineSetsArgs']]]]):
        pulumi.set(self, "machine_sets", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Replicas is the current number of replicas for the machine pool.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)


@pulumi.input_type
class MachinePoolStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_probe_time: Optional[pulumi.Input[str]] = None,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        MachinePoolCondition contains details for the current condition of a machine pool
        :param pulumi.Input[str] status: Status is the status of the condition.
        :param pulumi.Input[str] type: Type is the type of the condition.
        :param pulumi.Input[str] last_probe_time: LastProbeTime is the last time we probed the condition.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: Message is a human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @last_probe_time.setter
    def last_probe_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_probe_time", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class MachinePoolStatusMachineSetsArgs:
    def __init__(__self__, *,
                 max_replicas: pulumi.Input[int],
                 min_replicas: pulumi.Input[int],
                 name: pulumi.Input[str],
                 replicas: pulumi.Input[int]):
        """
        MachineSetStatus is the status of a machineset in the remote cluster.
        :param pulumi.Input[int] max_replicas: MaxReplicas is the maximum number of replicas for the machine set.
        :param pulumi.Input[int] min_replicas: MinReplicas is the minimum number of replicas for the machine set.
        :param pulumi.Input[str] name: Name is the name of the machine set.
        :param pulumi.Input[int] replicas: Replicas is the current number of replicas for the machine set.
        """
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "min_replicas", min_replicas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> pulumi.Input[int]:
        """
        MaxReplicas is the maximum number of replicas for the machine set.
        """
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> pulumi.Input[int]:
        """
        MinReplicas is the minimum number of replicas for the machine set.
        """
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the machine set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def replicas(self) -> pulumi.Input[int]:
        """
        Replicas is the current number of replicas for the machine set.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "replicas", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecArgs:
    def __init__(__self__, *,
                 identity_providers: pulumi.Input[Sequence[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersArgs']]],
                 cluster_deployment_selector: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecClusterDeploymentSelectorArgs']] = None):
        """
        SelectorSyncIdentityProviderSpec defines the SyncIdentityProviderCommonSpec to sync to ClusterDeploymentSelector indicating which clusters the SelectorSyncIdentityProvider applies to in any namespace.
        :param pulumi.Input[Sequence[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersArgs']]] identity_providers: IdentityProviders is an ordered list of ways for a user to identify themselves
        :param pulumi.Input['SelectorSyncIdentityProviderSpecClusterDeploymentSelectorArgs'] cluster_deployment_selector: ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorIdentityProvider applies to in any namespace.
        """
        pulumi.set(__self__, "identity_providers", identity_providers)
        if cluster_deployment_selector is not None:
            pulumi.set(__self__, "cluster_deployment_selector", cluster_deployment_selector)

    @property
    @pulumi.getter(name="identityProviders")
    def identity_providers(self) -> pulumi.Input[Sequence[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersArgs']]]:
        """
        IdentityProviders is an ordered list of ways for a user to identify themselves
        """
        return pulumi.get(self, "identity_providers")

    @identity_providers.setter
    def identity_providers(self, value: pulumi.Input[Sequence[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersArgs']]]):
        pulumi.set(self, "identity_providers", value)

    @property
    @pulumi.getter(name="clusterDeploymentSelector")
    def cluster_deployment_selector(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecClusterDeploymentSelectorArgs']]:
        """
        ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorIdentityProvider applies to in any namespace.
        """
        return pulumi.get(self, "cluster_deployment_selector")

    @cluster_deployment_selector.setter
    def cluster_deployment_selector(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecClusterDeploymentSelectorArgs']]):
        pulumi.set(self, "cluster_deployment_selector", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecClusterDeploymentSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['SelectorSyncIdentityProviderSpecClusterDeploymentSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorIdentityProvider applies to in any namespace.
        :param pulumi.Input[Sequence[pulumi.Input['SelectorSyncIdentityProviderSpecClusterDeploymentSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SelectorSyncIdentityProviderSpecClusterDeploymentSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SelectorSyncIdentityProviderSpecClusterDeploymentSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecClusterDeploymentSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersArgs:
    def __init__(__self__, *,
                 basic_auth: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthArgs']] = None,
                 github: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGithubArgs']] = None,
                 gitlab: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGitlabArgs']] = None,
                 google: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGoogleArgs']] = None,
                 htpasswd: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdArgs']] = None,
                 keystone: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneArgs']] = None,
                 ldap: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersLdapArgs']] = None,
                 mapping_method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 open_id: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDArgs']] = None,
                 request_header: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        IdentityProvider provides identities for users authenticating using credentials
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthArgs'] basic_auth: basicAuth contains configuration options for the BasicAuth IdP
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGithubArgs'] github: github enables user authentication using GitHub credentials
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGitlabArgs'] gitlab: gitlab enables user authentication using GitLab credentials
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGoogleArgs'] google: google enables user authentication using Google credentials
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdArgs'] htpasswd: htpasswd enables user authentication using an HTPasswd file to validate credentials
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneArgs'] keystone: keystone enables user authentication using keystone password credentials
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersLdapArgs'] ldap: ldap enables user authentication using LDAP credentials
        :param pulumi.Input[str] mapping_method: mappingMethod determines how identities from this provider are mapped to users Defaults to "claim"
        :param pulumi.Input[str] name: name is used to qualify the identities returned by this provider. - It MUST be unique and not shared by any other identity provider used - It MUST be a valid path segment: name cannot equal "." or ".." or contain "/" or "%" or ":"   Ref: https://godoc.org/github.com/openshift/origin/pkg/user/apis/user/validation#ValidateIdentityProviderName
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDArgs'] open_id: openID enables user authentication using OpenID credentials
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderArgs'] request_header: requestHeader enables user authentication using request header credentials
        :param pulumi.Input[str] type: type identifies the identity provider type for this entry.
        """
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if google is not None:
            pulumi.set(__self__, "google", google)
        if htpasswd is not None:
            pulumi.set(__self__, "htpasswd", htpasswd)
        if keystone is not None:
            pulumi.set(__self__, "keystone", keystone)
        if ldap is not None:
            pulumi.set(__self__, "ldap", ldap)
        if mapping_method is not None:
            pulumi.set(__self__, "mapping_method", mapping_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if open_id is not None:
            pulumi.set(__self__, "open_id", open_id)
        if request_header is not None:
            pulumi.set(__self__, "request_header", request_header)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthArgs']]:
        """
        basicAuth contains configuration options for the BasicAuth IdP
        """
        return pulumi.get(self, "basic_auth")

    @basic_auth.setter
    def basic_auth(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthArgs']]):
        pulumi.set(self, "basic_auth", value)

    @property
    @pulumi.getter
    def github(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGithubArgs']]:
        """
        github enables user authentication using GitHub credentials
        """
        return pulumi.get(self, "github")

    @github.setter
    def github(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGithubArgs']]):
        pulumi.set(self, "github", value)

    @property
    @pulumi.getter
    def gitlab(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGitlabArgs']]:
        """
        gitlab enables user authentication using GitLab credentials
        """
        return pulumi.get(self, "gitlab")

    @gitlab.setter
    def gitlab(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGitlabArgs']]):
        pulumi.set(self, "gitlab", value)

    @property
    @pulumi.getter
    def google(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGoogleArgs']]:
        """
        google enables user authentication using Google credentials
        """
        return pulumi.get(self, "google")

    @google.setter
    def google(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGoogleArgs']]):
        pulumi.set(self, "google", value)

    @property
    @pulumi.getter
    def htpasswd(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdArgs']]:
        """
        htpasswd enables user authentication using an HTPasswd file to validate credentials
        """
        return pulumi.get(self, "htpasswd")

    @htpasswd.setter
    def htpasswd(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdArgs']]):
        pulumi.set(self, "htpasswd", value)

    @property
    @pulumi.getter
    def keystone(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneArgs']]:
        """
        keystone enables user authentication using keystone password credentials
        """
        return pulumi.get(self, "keystone")

    @keystone.setter
    def keystone(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneArgs']]):
        pulumi.set(self, "keystone", value)

    @property
    @pulumi.getter
    def ldap(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersLdapArgs']]:
        """
        ldap enables user authentication using LDAP credentials
        """
        return pulumi.get(self, "ldap")

    @ldap.setter
    def ldap(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersLdapArgs']]):
        pulumi.set(self, "ldap", value)

    @property
    @pulumi.getter(name="mappingMethod")
    def mapping_method(self) -> Optional[pulumi.Input[str]]:
        """
        mappingMethod determines how identities from this provider are mapped to users Defaults to "claim"
        """
        return pulumi.get(self, "mapping_method")

    @mapping_method.setter
    def mapping_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mapping_method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name is used to qualify the identities returned by this provider. - It MUST be unique and not shared by any other identity provider used - It MUST be a valid path segment: name cannot equal "." or ".." or contain "/" or "%" or ":"   Ref: https://godoc.org/github.com/openshift/origin/pkg/user/apis/user/validation#ValidateIdentityProviderName
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="openID")
    def open_id(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDArgs']]:
        """
        openID enables user authentication using OpenID credentials
        """
        return pulumi.get(self, "open_id")

    @open_id.setter
    def open_id(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDArgs']]):
        pulumi.set(self, "open_id", value)

    @property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderArgs']]:
        """
        requestHeader enables user authentication using request header credentials
        """
        return pulumi.get(self, "request_header")

    @request_header.setter
    def request_header(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderArgs']]):
        pulumi.set(self, "request_header", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type identifies the identity provider type for this entry.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthCaArgs']] = None,
                 tls_client_cert: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCertArgs']] = None,
                 tls_client_key: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKeyArgs']] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        basicAuth contains configuration options for the BasicAuth IdP
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthCaArgs'] ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCertArgs'] tls_client_cert: tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKeyArgs'] tls_client_key: tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] url: url is the remote URL to connect to
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if tls_client_cert is not None:
            pulumi.set(__self__, "tls_client_cert", tls_client_cert)
        if tls_client_key is not None:
            pulumi.set(__self__, "tls_client_key", tls_client_key)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthCaArgs']]:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthCaArgs']]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="tlsClientCert")
    def tls_client_cert(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCertArgs']]:
        """
        tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "tls_client_cert")

    @tls_client_cert.setter
    def tls_client_cert(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCertArgs']]):
        pulumi.set(self, "tls_client_cert", value)

    @property
    @pulumi.getter(name="tlsClientKey")
    def tls_client_key(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKeyArgs']]:
        """
        tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "tls_client_key")

    @tls_client_key.setter
    def tls_client_key(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKeyArgs']]):
        pulumi.set(self, "tls_client_key", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        url is the remote URL to connect to
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthCaArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCertArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKeyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersGithubArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGithubCaArgs']] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGithubClientSecretArgs']] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 organizations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        github enables user authentication using GitHub credentials
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGithubCaArgs'] ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] client_id: clientID is the oauth client ID
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGithubClientSecretArgs'] client_secret: clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] hostname: hostname is the optional domain (e.g. "mycompany.com") for use with a hosted instance of GitHub Enterprise. It must match the GitHub Enterprise settings value configured at /setup/settings#hostname.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] organizations: organizations optionally restricts which organizations are allowed to log in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] teams: teams optionally restricts which teams are allowed to log in. Format is <org>/<team>.
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGithubCaArgs']]:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGithubCaArgs']]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        clientID is the oauth client ID
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGithubClientSecretArgs']]:
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGithubClientSecretArgs']]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        hostname is the optional domain (e.g. "mycompany.com") for use with a hosted instance of GitHub Enterprise. It must match the GitHub Enterprise settings value configured at /setup/settings#hostname.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def organizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        organizations optionally restricts which organizations are allowed to log in
        """
        return pulumi.get(self, "organizations")

    @organizations.setter
    def organizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "organizations", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        teams optionally restricts which teams are allowed to log in. Format is <org>/<team>.
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersGithubCaArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersGithubClientSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersGitlabArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGitlabCaArgs']] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGitlabClientSecretArgs']] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        gitlab enables user authentication using GitLab credentials
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGitlabCaArgs'] ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] client_id: clientID is the oauth client ID
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGitlabClientSecretArgs'] client_secret: clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] url: url is the oauth server base URL
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGitlabCaArgs']]:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGitlabCaArgs']]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        clientID is the oauth client ID
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGitlabClientSecretArgs']]:
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGitlabClientSecretArgs']]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        url is the oauth server base URL
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersGitlabCaArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersGitlabClientSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersGoogleArgs:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGoogleClientSecretArgs']] = None,
                 hosted_domain: Optional[pulumi.Input[str]] = None):
        """
        google enables user authentication using Google credentials
        :param pulumi.Input[str] client_id: clientID is the oauth client ID
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGoogleClientSecretArgs'] client_secret: clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] hosted_domain: hostedDomain is the optional Google App domain (e.g. "mycompany.com") to restrict logins to
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if hosted_domain is not None:
            pulumi.set(__self__, "hosted_domain", hosted_domain)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        clientID is the oauth client ID
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGoogleClientSecretArgs']]:
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersGoogleClientSecretArgs']]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="hostedDomain")
    def hosted_domain(self) -> Optional[pulumi.Input[str]]:
        """
        hostedDomain is the optional Google App domain (e.g. "mycompany.com") to restrict logins to
        """
        return pulumi.get(self, "hosted_domain")

    @hosted_domain.setter
    def hosted_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_domain", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersGoogleClientSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdArgs:
    def __init__(__self__, *,
                 file_data: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdFileDataArgs']] = None):
        """
        htpasswd enables user authentication using an HTPasswd file to validate credentials
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdFileDataArgs'] file_data: fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        if file_data is not None:
            pulumi.set(__self__, "file_data", file_data)

    @property
    @pulumi.getter(name="fileData")
    def file_data(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdFileDataArgs']]:
        """
        fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "file_data")

    @file_data.setter
    def file_data(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdFileDataArgs']]):
        pulumi.set(self, "file_data", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdFileDataArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneCaArgs']] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 tls_client_cert: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCertArgs']] = None,
                 tls_client_key: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKeyArgs']] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        keystone enables user authentication using keystone password credentials
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneCaArgs'] ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] domain_name: domainName is required for keystone v3
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCertArgs'] tls_client_cert: tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKeyArgs'] tls_client_key: tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] url: url is the remote URL to connect to
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if tls_client_cert is not None:
            pulumi.set(__self__, "tls_client_cert", tls_client_cert)
        if tls_client_key is not None:
            pulumi.set(__self__, "tls_client_key", tls_client_key)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneCaArgs']]:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneCaArgs']]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        domainName is required for keystone v3
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="tlsClientCert")
    def tls_client_cert(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCertArgs']]:
        """
        tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "tls_client_cert")

    @tls_client_cert.setter
    def tls_client_cert(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCertArgs']]):
        pulumi.set(self, "tls_client_cert", value)

    @property
    @pulumi.getter(name="tlsClientKey")
    def tls_client_key(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKeyArgs']]:
        """
        tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "tls_client_key")

    @tls_client_key.setter
    def tls_client_key(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKeyArgs']]):
        pulumi.set(self, "tls_client_key", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        url is the remote URL to connect to
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneCaArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCertArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKeyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersLdapArgs:
    def __init__(__self__, *,
                 attributes: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersLdapAttributesArgs']] = None,
                 bind_dn: Optional[pulumi.Input[str]] = None,
                 bind_password: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersLdapBindPasswordArgs']] = None,
                 ca: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersLdapCaArgs']] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        ldap enables user authentication using LDAP credentials
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersLdapAttributesArgs'] attributes: attributes maps LDAP attributes to identities
        :param pulumi.Input[str] bind_dn: bindDN is an optional DN to bind with during the search phase.
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersLdapBindPasswordArgs'] bind_password: bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersLdapCaArgs'] ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input[bool] insecure: insecure, if true, indicates the connection should not use TLS WARNING: Should not be set to `true` with the URL scheme "ldaps://" as "ldaps://" URLs always          attempt to connect using TLS, even when `insecure` is set to `true` When `true`, "ldap://" URLS connect insecurely. When `false`, "ldap://" URLs are upgraded to a TLS connection using StartTLS as specified in https://tools.ietf.org/html/rfc2830.
        :param pulumi.Input[str] url: url is an RFC 2255 URL which specifies the LDAP search parameters to use. The syntax of the URL is: ldap://host:port/basedn?attribute?scope?filter
        """
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if bind_dn is not None:
            pulumi.set(__self__, "bind_dn", bind_dn)
        if bind_password is not None:
            pulumi.set(__self__, "bind_password", bind_password)
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersLdapAttributesArgs']]:
        """
        attributes maps LDAP attributes to identities
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersLdapAttributesArgs']]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="bindDN")
    def bind_dn(self) -> Optional[pulumi.Input[str]]:
        """
        bindDN is an optional DN to bind with during the search phase.
        """
        return pulumi.get(self, "bind_dn")

    @bind_dn.setter
    def bind_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_dn", value)

    @property
    @pulumi.getter(name="bindPassword")
    def bind_password(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersLdapBindPasswordArgs']]:
        """
        bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "bind_password")

    @bind_password.setter
    def bind_password(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersLdapBindPasswordArgs']]):
        pulumi.set(self, "bind_password", value)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersLdapCaArgs']]:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersLdapCaArgs']]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        insecure, if true, indicates the connection should not use TLS WARNING: Should not be set to `true` with the URL scheme "ldaps://" as "ldaps://" URLs always          attempt to connect using TLS, even when `insecure` is set to `true` When `true`, "ldap://" URLS connect insecurely. When `false`, "ldap://" URLs are upgraded to a TLS connection using StartTLS as specified in https://tools.ietf.org/html/rfc2830.
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        url is an RFC 2255 URL which specifies the LDAP search parameters to use. The syntax of the URL is: ldap://host:port/basedn?attribute?scope?filter
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersLdapAttributesArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preferred_username: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        attributes maps LDAP attributes to identities
        :param pulumi.Input[Sequence[pulumi.Input[str]]] email: email is the list of attributes whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
        :param pulumi.Input[Sequence[pulumi.Input[str]]] id: id is the list of attributes whose values should be used as the user ID. Required. First non-empty attribute is used. At least one attribute is required. If none of the listed attribute have a value, authentication fails. LDAP standard identity attribute is "dn"
        :param pulumi.Input[Sequence[pulumi.Input[str]]] name: name is the list of attributes whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity LDAP standard display name attribute is "cn"
        :param pulumi.Input[Sequence[pulumi.Input[str]]] preferred_username: preferredUsername is the list of attributes whose values should be used as the preferred username. LDAP standard login attribute is "uid"
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preferred_username is not None:
            pulumi.set(__self__, "preferred_username", preferred_username)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        email is the list of attributes whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        id is the list of attributes whose values should be used as the user ID. Required. First non-empty attribute is used. At least one attribute is required. If none of the listed attribute have a value, authentication fails. LDAP standard identity attribute is "dn"
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        name is the list of attributes whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity LDAP standard display name attribute is "cn"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="preferredUsername")
    def preferred_username(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        preferredUsername is the list of attributes whose values should be used as the preferred username. LDAP standard login attribute is "uid"
        """
        return pulumi.get(self, "preferred_username")

    @preferred_username.setter
    def preferred_username(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "preferred_username", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersLdapBindPasswordArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersLdapCaArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDCaArgs']] = None,
                 claims: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClaimsArgs']] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClientSecretArgs']] = None,
                 extra_authorize_parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 extra_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 issuer: Optional[pulumi.Input[str]] = None):
        """
        openID enables user authentication using OpenID credentials
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDCaArgs'] ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClaimsArgs'] claims: claims mappings
        :param pulumi.Input[str] client_id: clientID is the oauth client ID
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClientSecretArgs'] client_secret: clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extra_authorize_parameters: extraAuthorizeParameters are any custom parameters to add to the authorize request.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_scopes: extraScopes are any scopes to request in addition to the standard "openid" scope.
        :param pulumi.Input[str] issuer: issuer is the URL that the OpenID Provider asserts as its Issuer Identifier. It must use the https scheme with no query or fragment component.
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if claims is not None:
            pulumi.set(__self__, "claims", claims)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if extra_authorize_parameters is not None:
            pulumi.set(__self__, "extra_authorize_parameters", extra_authorize_parameters)
        if extra_scopes is not None:
            pulumi.set(__self__, "extra_scopes", extra_scopes)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDCaArgs']]:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDCaArgs']]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter
    def claims(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClaimsArgs']]:
        """
        claims mappings
        """
        return pulumi.get(self, "claims")

    @claims.setter
    def claims(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClaimsArgs']]):
        pulumi.set(self, "claims", value)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        clientID is the oauth client ID
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClientSecretArgs']]:
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClientSecretArgs']]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="extraAuthorizeParameters")
    def extra_authorize_parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        extraAuthorizeParameters are any custom parameters to add to the authorize request.
        """
        return pulumi.get(self, "extra_authorize_parameters")

    @extra_authorize_parameters.setter
    def extra_authorize_parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extra_authorize_parameters", value)

    @property
    @pulumi.getter(name="extraScopes")
    def extra_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        extraScopes are any scopes to request in addition to the standard "openid" scope.
        """
        return pulumi.get(self, "extra_scopes")

    @extra_scopes.setter
    def extra_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_scopes", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        issuer is the URL that the OpenID Provider asserts as its Issuer Identifier. It must use the https scheme with no query or fragment component.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDCaArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClaimsArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preferred_username: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        claims mappings
        :param pulumi.Input[Sequence[pulumi.Input[str]]] email: email is the list of claims whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
        :param pulumi.Input[Sequence[pulumi.Input[str]]] name: name is the list of claims whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity
        :param pulumi.Input[Sequence[pulumi.Input[str]]] preferred_username: preferredUsername is the list of claims whose values should be used as the preferred username. If unspecified, the preferred username is determined from the value of the sub claim
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preferred_username is not None:
            pulumi.set(__self__, "preferred_username", preferred_username)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        email is the list of claims whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        name is the list of claims whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="preferredUsername")
    def preferred_username(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        preferredUsername is the list of claims whose values should be used as the preferred username. If unspecified, the preferred username is determined from the value of the sub claim
        """
        return pulumi.get(self, "preferred_username")

    @preferred_username.setter
    def preferred_username(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "preferred_username", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClientSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderCaArgs']] = None,
                 challenge_url: Optional[pulumi.Input[str]] = None,
                 client_common_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 email_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 login_url: Optional[pulumi.Input[str]] = None,
                 name_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preferred_username_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        requestHeader enables user authentication using request header credentials
        :param pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderCaArgs'] ca: ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] challenge_url: challengeURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect WWW-Authenticate challenges will be redirected here. ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when challenge is set to true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] client_common_names: clientCommonNames is an optional list of common names to require a match from. If empty, any client certificate validated against the clientCA bundle is considered authoritative.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] email_headers: emailHeaders is the set of headers to check for the email address
        :param pulumi.Input[Sequence[pulumi.Input[str]]] headers: headers is the set of headers to check for identity information
        :param pulumi.Input[str] login_url: loginURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect interactive logins will be redirected here ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when login is set to true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] name_headers: nameHeaders is the set of headers to check for the display name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] preferred_username_headers: preferredUsernameHeaders is the set of headers to check for the preferred username
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if challenge_url is not None:
            pulumi.set(__self__, "challenge_url", challenge_url)
        if client_common_names is not None:
            pulumi.set(__self__, "client_common_names", client_common_names)
        if email_headers is not None:
            pulumi.set(__self__, "email_headers", email_headers)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if login_url is not None:
            pulumi.set(__self__, "login_url", login_url)
        if name_headers is not None:
            pulumi.set(__self__, "name_headers", name_headers)
        if preferred_username_headers is not None:
            pulumi.set(__self__, "preferred_username_headers", preferred_username_headers)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderCaArgs']]:
        """
        ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input['SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderCaArgs']]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="challengeURL")
    def challenge_url(self) -> Optional[pulumi.Input[str]]:
        """
        challengeURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect WWW-Authenticate challenges will be redirected here. ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when challenge is set to true.
        """
        return pulumi.get(self, "challenge_url")

    @challenge_url.setter
    def challenge_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "challenge_url", value)

    @property
    @pulumi.getter(name="clientCommonNames")
    def client_common_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        clientCommonNames is an optional list of common names to require a match from. If empty, any client certificate validated against the clientCA bundle is considered authoritative.
        """
        return pulumi.get(self, "client_common_names")

    @client_common_names.setter
    def client_common_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "client_common_names", value)

    @property
    @pulumi.getter(name="emailHeaders")
    def email_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        emailHeaders is the set of headers to check for the email address
        """
        return pulumi.get(self, "email_headers")

    @email_headers.setter
    def email_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "email_headers", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        headers is the set of headers to check for identity information
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="loginURL")
    def login_url(self) -> Optional[pulumi.Input[str]]:
        """
        loginURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect interactive logins will be redirected here ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when login is set to true.
        """
        return pulumi.get(self, "login_url")

    @login_url.setter
    def login_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_url", value)

    @property
    @pulumi.getter(name="nameHeaders")
    def name_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        nameHeaders is the set of headers to check for the display name
        """
        return pulumi.get(self, "name_headers")

    @name_headers.setter
    def name_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "name_headers", value)

    @property
    @pulumi.getter(name="preferredUsernameHeaders")
    def preferred_username_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        preferredUsernameHeaders is the set of headers to check for the preferred username
        """
        return pulumi.get(self, "preferred_username_headers")

    @preferred_username_headers.setter
    def preferred_username_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "preferred_username_headers", value)


@pulumi.input_type
class SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderCaArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SelectorSyncSetSpecArgs:
    def __init__(__self__, *,
                 apply_behavior: Optional[pulumi.Input[str]] = None,
                 cluster_deployment_selector: Optional[pulumi.Input['SelectorSyncSetSpecClusterDeploymentSelectorArgs']] = None,
                 patches: Optional[pulumi.Input[Sequence[pulumi.Input['SelectorSyncSetSpecPatchesArgs']]]] = None,
                 resource_apply_mode: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 secret_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['SelectorSyncSetSpecSecretMappingsArgs']]]] = None):
        """
        SelectorSyncSetSpec defines the SyncSetCommonSpec resources and patches to sync along with a ClusterDeploymentSelector indicating which clusters the SelectorSyncSet applies to in any namespace.
        :param pulumi.Input[str] apply_behavior: ApplyBehavior indicates how resources in this syncset will be applied to the target cluster. The default value of "Apply" indicates that resources should be applied using the 'oc apply' command. If no value is set, "Apply" is assumed. A value of "CreateOnly" indicates that the resource will only be created if it does not already exist in the target cluster. Otherwise, it will be left alone. A value of "CreateOrUpdate" indicates that the resource will be created/updated without the use of the 'oc apply' command, allowing larger resources to be synced, but losing some functionality of the 'oc apply' command such as the ability to remove annotations, labels, and other map entries in general.
        :param pulumi.Input['SelectorSyncSetSpecClusterDeploymentSelectorArgs'] cluster_deployment_selector: ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorSyncSet applies to in any namespace.
        :param pulumi.Input[Sequence[pulumi.Input['SelectorSyncSetSpecPatchesArgs']]] patches: Patches is the list of patches to apply.
        :param pulumi.Input[str] resource_apply_mode: ResourceApplyMode indicates if the Resource apply mode is "Upsert" (default) or "Sync". ApplyMode "Upsert" indicates create and update. ApplyMode "Sync" indicates create, update and delete.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] resources: Resources is the list of objects to sync from RawExtension definitions.
        :param pulumi.Input[Sequence[pulumi.Input['SelectorSyncSetSpecSecretMappingsArgs']]] secret_mappings: Secrets is the list of secrets to sync along with their respective destinations.
        """
        if apply_behavior is not None:
            pulumi.set(__self__, "apply_behavior", apply_behavior)
        if cluster_deployment_selector is not None:
            pulumi.set(__self__, "cluster_deployment_selector", cluster_deployment_selector)
        if patches is not None:
            pulumi.set(__self__, "patches", patches)
        if resource_apply_mode is not None:
            pulumi.set(__self__, "resource_apply_mode", resource_apply_mode)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if secret_mappings is not None:
            pulumi.set(__self__, "secret_mappings", secret_mappings)

    @property
    @pulumi.getter(name="applyBehavior")
    def apply_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        ApplyBehavior indicates how resources in this syncset will be applied to the target cluster. The default value of "Apply" indicates that resources should be applied using the 'oc apply' command. If no value is set, "Apply" is assumed. A value of "CreateOnly" indicates that the resource will only be created if it does not already exist in the target cluster. Otherwise, it will be left alone. A value of "CreateOrUpdate" indicates that the resource will be created/updated without the use of the 'oc apply' command, allowing larger resources to be synced, but losing some functionality of the 'oc apply' command such as the ability to remove annotations, labels, and other map entries in general.
        """
        return pulumi.get(self, "apply_behavior")

    @apply_behavior.setter
    def apply_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apply_behavior", value)

    @property
    @pulumi.getter(name="clusterDeploymentSelector")
    def cluster_deployment_selector(self) -> Optional[pulumi.Input['SelectorSyncSetSpecClusterDeploymentSelectorArgs']]:
        """
        ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorSyncSet applies to in any namespace.
        """
        return pulumi.get(self, "cluster_deployment_selector")

    @cluster_deployment_selector.setter
    def cluster_deployment_selector(self, value: Optional[pulumi.Input['SelectorSyncSetSpecClusterDeploymentSelectorArgs']]):
        pulumi.set(self, "cluster_deployment_selector", value)

    @property
    @pulumi.getter
    def patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SelectorSyncSetSpecPatchesArgs']]]]:
        """
        Patches is the list of patches to apply.
        """
        return pulumi.get(self, "patches")

    @patches.setter
    def patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SelectorSyncSetSpecPatchesArgs']]]]):
        pulumi.set(self, "patches", value)

    @property
    @pulumi.getter(name="resourceApplyMode")
    def resource_apply_mode(self) -> Optional[pulumi.Input[str]]:
        """
        ResourceApplyMode indicates if the Resource apply mode is "Upsert" (default) or "Sync". ApplyMode "Upsert" indicates create and update. ApplyMode "Sync" indicates create, update and delete.
        """
        return pulumi.get(self, "resource_apply_mode")

    @resource_apply_mode.setter
    def resource_apply_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_apply_mode", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        """
        Resources is the list of objects to sync from RawExtension definitions.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="secretMappings")
    def secret_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SelectorSyncSetSpecSecretMappingsArgs']]]]:
        """
        Secrets is the list of secrets to sync along with their respective destinations.
        """
        return pulumi.get(self, "secret_mappings")

    @secret_mappings.setter
    def secret_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SelectorSyncSetSpecSecretMappingsArgs']]]]):
        pulumi.set(self, "secret_mappings", value)


@pulumi.input_type
class SelectorSyncSetSpecClusterDeploymentSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['SelectorSyncSetSpecClusterDeploymentSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorSyncSet applies to in any namespace.
        :param pulumi.Input[Sequence[pulumi.Input['SelectorSyncSetSpecClusterDeploymentSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SelectorSyncSetSpecClusterDeploymentSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SelectorSyncSetSpecClusterDeploymentSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class SelectorSyncSetSpecClusterDeploymentSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class SelectorSyncSetSpecPatchesArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 patch: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None,
                 patch_type: Optional[pulumi.Input[str]] = None):
        """
        SyncObjectPatch represents a patch to be applied to a specific object
        :param pulumi.Input[str] api_version: APIVersion is the Group and Version of the object to be patched.
        :param pulumi.Input[str] kind: Kind is the Kind of the object to be patched.
        :param pulumi.Input[str] name: Name is the name of the object to be patched.
        :param pulumi.Input[str] patch: Patch is the patch to apply.
        :param pulumi.Input[str] namespace: Namespace is the Namespace in which the object to patch exists. Defaults to the SyncSet's Namespace.
        :param pulumi.Input[str] patch_type: PatchType indicates the PatchType as "strategic" (default), "json", or "merge".
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "patch", patch)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if patch_type is not None:
            pulumi.set(__self__, "patch_type", patch_type)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion is the Group and Version of the object to be patched.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind is the Kind of the object to be patched.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the object to be patched.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def patch(self) -> pulumi.Input[str]:
        """
        Patch is the patch to apply.
        """
        return pulumi.get(self, "patch")

    @patch.setter
    def patch(self, value: pulumi.Input[str]):
        pulumi.set(self, "patch", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the Namespace in which the object to patch exists. Defaults to the SyncSet's Namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="patchType")
    def patch_type(self) -> Optional[pulumi.Input[str]]:
        """
        PatchType indicates the PatchType as "strategic" (default), "json", or "merge".
        """
        return pulumi.get(self, "patch_type")

    @patch_type.setter
    def patch_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "patch_type", value)


@pulumi.input_type
class SelectorSyncSetSpecSecretMappingsArgs:
    def __init__(__self__, *,
                 source_ref: pulumi.Input['SelectorSyncSetSpecSecretMappingsSourceRefArgs'],
                 target_ref: pulumi.Input['SelectorSyncSetSpecSecretMappingsTargetRefArgs']):
        """
        SecretMapping defines a source and destination for a secret to be synced by a SyncSet
        :param pulumi.Input['SelectorSyncSetSpecSecretMappingsSourceRefArgs'] source_ref: SourceRef specifies the name and namespace of a secret on the management cluster
        :param pulumi.Input['SelectorSyncSetSpecSecretMappingsTargetRefArgs'] target_ref: TargetRef specifies the target name and namespace of the secret on the target cluster
        """
        pulumi.set(__self__, "source_ref", source_ref)
        pulumi.set(__self__, "target_ref", target_ref)

    @property
    @pulumi.getter(name="sourceRef")
    def source_ref(self) -> pulumi.Input['SelectorSyncSetSpecSecretMappingsSourceRefArgs']:
        """
        SourceRef specifies the name and namespace of a secret on the management cluster
        """
        return pulumi.get(self, "source_ref")

    @source_ref.setter
    def source_ref(self, value: pulumi.Input['SelectorSyncSetSpecSecretMappingsSourceRefArgs']):
        pulumi.set(self, "source_ref", value)

    @property
    @pulumi.getter(name="targetRef")
    def target_ref(self) -> pulumi.Input['SelectorSyncSetSpecSecretMappingsTargetRefArgs']:
        """
        TargetRef specifies the target name and namespace of the secret on the target cluster
        """
        return pulumi.get(self, "target_ref")

    @target_ref.setter
    def target_ref(self, value: pulumi.Input['SelectorSyncSetSpecSecretMappingsTargetRefArgs']):
        pulumi.set(self, "target_ref", value)


@pulumi.input_type
class SelectorSyncSetSpecSecretMappingsSourceRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SourceRef specifies the name and namespace of a secret on the management cluster
        :param pulumi.Input[str] name: Name is the name of the secret
        :param pulumi.Input[str] namespace: Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
        """
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class SelectorSyncSetSpecSecretMappingsTargetRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        TargetRef specifies the target name and namespace of the secret on the target cluster
        :param pulumi.Input[str] name: Name is the name of the secret
        :param pulumi.Input[str] namespace: Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
        """
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class SyncIdentityProviderSpecArgs:
    def __init__(__self__, *,
                 cluster_deployment_refs: pulumi.Input[Sequence[pulumi.Input['SyncIdentityProviderSpecClusterDeploymentRefsArgs']]],
                 identity_providers: pulumi.Input[Sequence[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersArgs']]]):
        """
        SyncIdentityProviderSpec defines the SyncIdentityProviderCommonSpec identity providers to sync along with ClusterDeploymentRefs indicating which clusters the SyncIdentityProvider applies to in the SyncIdentityProvider's namespace.
        :param pulumi.Input[Sequence[pulumi.Input['SyncIdentityProviderSpecClusterDeploymentRefsArgs']]] cluster_deployment_refs: ClusterDeploymentRefs is the list of LocalObjectReference indicating which clusters the SyncSet applies to in the SyncSet's namespace.
        :param pulumi.Input[Sequence[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersArgs']]] identity_providers: IdentityProviders is an ordered list of ways for a user to identify themselves
        """
        pulumi.set(__self__, "cluster_deployment_refs", cluster_deployment_refs)
        pulumi.set(__self__, "identity_providers", identity_providers)

    @property
    @pulumi.getter(name="clusterDeploymentRefs")
    def cluster_deployment_refs(self) -> pulumi.Input[Sequence[pulumi.Input['SyncIdentityProviderSpecClusterDeploymentRefsArgs']]]:
        """
        ClusterDeploymentRefs is the list of LocalObjectReference indicating which clusters the SyncSet applies to in the SyncSet's namespace.
        """
        return pulumi.get(self, "cluster_deployment_refs")

    @cluster_deployment_refs.setter
    def cluster_deployment_refs(self, value: pulumi.Input[Sequence[pulumi.Input['SyncIdentityProviderSpecClusterDeploymentRefsArgs']]]):
        pulumi.set(self, "cluster_deployment_refs", value)

    @property
    @pulumi.getter(name="identityProviders")
    def identity_providers(self) -> pulumi.Input[Sequence[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersArgs']]]:
        """
        IdentityProviders is an ordered list of ways for a user to identify themselves
        """
        return pulumi.get(self, "identity_providers")

    @identity_providers.setter
    def identity_providers(self, value: pulumi.Input[Sequence[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersArgs']]]):
        pulumi.set(self, "identity_providers", value)


@pulumi.input_type
class SyncIdentityProviderSpecClusterDeploymentRefsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersArgs:
    def __init__(__self__, *,
                 basic_auth: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersBasicAuthArgs']] = None,
                 github: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGithubArgs']] = None,
                 gitlab: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGitlabArgs']] = None,
                 google: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGoogleArgs']] = None,
                 htpasswd: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersHtpasswdArgs']] = None,
                 keystone: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersKeystoneArgs']] = None,
                 ldap: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersLdapArgs']] = None,
                 mapping_method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 open_id: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersOpenIDArgs']] = None,
                 request_header: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersRequestHeaderArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        IdentityProvider provides identities for users authenticating using credentials
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersBasicAuthArgs'] basic_auth: basicAuth contains configuration options for the BasicAuth IdP
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGithubArgs'] github: github enables user authentication using GitHub credentials
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGitlabArgs'] gitlab: gitlab enables user authentication using GitLab credentials
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGoogleArgs'] google: google enables user authentication using Google credentials
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersHtpasswdArgs'] htpasswd: htpasswd enables user authentication using an HTPasswd file to validate credentials
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersKeystoneArgs'] keystone: keystone enables user authentication using keystone password credentials
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersLdapArgs'] ldap: ldap enables user authentication using LDAP credentials
        :param pulumi.Input[str] mapping_method: mappingMethod determines how identities from this provider are mapped to users Defaults to "claim"
        :param pulumi.Input[str] name: name is used to qualify the identities returned by this provider. - It MUST be unique and not shared by any other identity provider used - It MUST be a valid path segment: name cannot equal "." or ".." or contain "/" or "%" or ":"   Ref: https://godoc.org/github.com/openshift/origin/pkg/user/apis/user/validation#ValidateIdentityProviderName
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersOpenIDArgs'] open_id: openID enables user authentication using OpenID credentials
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersRequestHeaderArgs'] request_header: requestHeader enables user authentication using request header credentials
        :param pulumi.Input[str] type: type identifies the identity provider type for this entry.
        """
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if google is not None:
            pulumi.set(__self__, "google", google)
        if htpasswd is not None:
            pulumi.set(__self__, "htpasswd", htpasswd)
        if keystone is not None:
            pulumi.set(__self__, "keystone", keystone)
        if ldap is not None:
            pulumi.set(__self__, "ldap", ldap)
        if mapping_method is not None:
            pulumi.set(__self__, "mapping_method", mapping_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if open_id is not None:
            pulumi.set(__self__, "open_id", open_id)
        if request_header is not None:
            pulumi.set(__self__, "request_header", request_header)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersBasicAuthArgs']]:
        """
        basicAuth contains configuration options for the BasicAuth IdP
        """
        return pulumi.get(self, "basic_auth")

    @basic_auth.setter
    def basic_auth(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersBasicAuthArgs']]):
        pulumi.set(self, "basic_auth", value)

    @property
    @pulumi.getter
    def github(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGithubArgs']]:
        """
        github enables user authentication using GitHub credentials
        """
        return pulumi.get(self, "github")

    @github.setter
    def github(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGithubArgs']]):
        pulumi.set(self, "github", value)

    @property
    @pulumi.getter
    def gitlab(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGitlabArgs']]:
        """
        gitlab enables user authentication using GitLab credentials
        """
        return pulumi.get(self, "gitlab")

    @gitlab.setter
    def gitlab(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGitlabArgs']]):
        pulumi.set(self, "gitlab", value)

    @property
    @pulumi.getter
    def google(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGoogleArgs']]:
        """
        google enables user authentication using Google credentials
        """
        return pulumi.get(self, "google")

    @google.setter
    def google(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGoogleArgs']]):
        pulumi.set(self, "google", value)

    @property
    @pulumi.getter
    def htpasswd(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersHtpasswdArgs']]:
        """
        htpasswd enables user authentication using an HTPasswd file to validate credentials
        """
        return pulumi.get(self, "htpasswd")

    @htpasswd.setter
    def htpasswd(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersHtpasswdArgs']]):
        pulumi.set(self, "htpasswd", value)

    @property
    @pulumi.getter
    def keystone(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersKeystoneArgs']]:
        """
        keystone enables user authentication using keystone password credentials
        """
        return pulumi.get(self, "keystone")

    @keystone.setter
    def keystone(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersKeystoneArgs']]):
        pulumi.set(self, "keystone", value)

    @property
    @pulumi.getter
    def ldap(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersLdapArgs']]:
        """
        ldap enables user authentication using LDAP credentials
        """
        return pulumi.get(self, "ldap")

    @ldap.setter
    def ldap(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersLdapArgs']]):
        pulumi.set(self, "ldap", value)

    @property
    @pulumi.getter(name="mappingMethod")
    def mapping_method(self) -> Optional[pulumi.Input[str]]:
        """
        mappingMethod determines how identities from this provider are mapped to users Defaults to "claim"
        """
        return pulumi.get(self, "mapping_method")

    @mapping_method.setter
    def mapping_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mapping_method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name is used to qualify the identities returned by this provider. - It MUST be unique and not shared by any other identity provider used - It MUST be a valid path segment: name cannot equal "." or ".." or contain "/" or "%" or ":"   Ref: https://godoc.org/github.com/openshift/origin/pkg/user/apis/user/validation#ValidateIdentityProviderName
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="openID")
    def open_id(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersOpenIDArgs']]:
        """
        openID enables user authentication using OpenID credentials
        """
        return pulumi.get(self, "open_id")

    @open_id.setter
    def open_id(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersOpenIDArgs']]):
        pulumi.set(self, "open_id", value)

    @property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersRequestHeaderArgs']]:
        """
        requestHeader enables user authentication using request header credentials
        """
        return pulumi.get(self, "request_header")

    @request_header.setter
    def request_header(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersRequestHeaderArgs']]):
        pulumi.set(self, "request_header", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type identifies the identity provider type for this entry.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersBasicAuthArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersBasicAuthCaArgs']] = None,
                 tls_client_cert: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCertArgs']] = None,
                 tls_client_key: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKeyArgs']] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        basicAuth contains configuration options for the BasicAuth IdP
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersBasicAuthCaArgs'] ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCertArgs'] tls_client_cert: tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKeyArgs'] tls_client_key: tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] url: url is the remote URL to connect to
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if tls_client_cert is not None:
            pulumi.set(__self__, "tls_client_cert", tls_client_cert)
        if tls_client_key is not None:
            pulumi.set(__self__, "tls_client_key", tls_client_key)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersBasicAuthCaArgs']]:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersBasicAuthCaArgs']]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="tlsClientCert")
    def tls_client_cert(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCertArgs']]:
        """
        tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "tls_client_cert")

    @tls_client_cert.setter
    def tls_client_cert(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCertArgs']]):
        pulumi.set(self, "tls_client_cert", value)

    @property
    @pulumi.getter(name="tlsClientKey")
    def tls_client_key(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKeyArgs']]:
        """
        tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "tls_client_key")

    @tls_client_key.setter
    def tls_client_key(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKeyArgs']]):
        pulumi.set(self, "tls_client_key", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        url is the remote URL to connect to
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersBasicAuthCaArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCertArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKeyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersGithubArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGithubCaArgs']] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGithubClientSecretArgs']] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 organizations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        github enables user authentication using GitHub credentials
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGithubCaArgs'] ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] client_id: clientID is the oauth client ID
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGithubClientSecretArgs'] client_secret: clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] hostname: hostname is the optional domain (e.g. "mycompany.com") for use with a hosted instance of GitHub Enterprise. It must match the GitHub Enterprise settings value configured at /setup/settings#hostname.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] organizations: organizations optionally restricts which organizations are allowed to log in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] teams: teams optionally restricts which teams are allowed to log in. Format is <org>/<team>.
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGithubCaArgs']]:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGithubCaArgs']]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        clientID is the oauth client ID
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGithubClientSecretArgs']]:
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGithubClientSecretArgs']]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        hostname is the optional domain (e.g. "mycompany.com") for use with a hosted instance of GitHub Enterprise. It must match the GitHub Enterprise settings value configured at /setup/settings#hostname.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def organizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        organizations optionally restricts which organizations are allowed to log in
        """
        return pulumi.get(self, "organizations")

    @organizations.setter
    def organizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "organizations", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        teams optionally restricts which teams are allowed to log in. Format is <org>/<team>.
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersGithubCaArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersGithubClientSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersGitlabArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGitlabCaArgs']] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGitlabClientSecretArgs']] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        gitlab enables user authentication using GitLab credentials
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGitlabCaArgs'] ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] client_id: clientID is the oauth client ID
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGitlabClientSecretArgs'] client_secret: clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] url: url is the oauth server base URL
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGitlabCaArgs']]:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGitlabCaArgs']]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        clientID is the oauth client ID
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGitlabClientSecretArgs']]:
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGitlabClientSecretArgs']]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        url is the oauth server base URL
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersGitlabCaArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersGitlabClientSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersGoogleArgs:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGoogleClientSecretArgs']] = None,
                 hosted_domain: Optional[pulumi.Input[str]] = None):
        """
        google enables user authentication using Google credentials
        :param pulumi.Input[str] client_id: clientID is the oauth client ID
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGoogleClientSecretArgs'] client_secret: clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] hosted_domain: hostedDomain is the optional Google App domain (e.g. "mycompany.com") to restrict logins to
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if hosted_domain is not None:
            pulumi.set(__self__, "hosted_domain", hosted_domain)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        clientID is the oauth client ID
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGoogleClientSecretArgs']]:
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersGoogleClientSecretArgs']]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="hostedDomain")
    def hosted_domain(self) -> Optional[pulumi.Input[str]]:
        """
        hostedDomain is the optional Google App domain (e.g. "mycompany.com") to restrict logins to
        """
        return pulumi.get(self, "hosted_domain")

    @hosted_domain.setter
    def hosted_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_domain", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersGoogleClientSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersHtpasswdArgs:
    def __init__(__self__, *,
                 file_data: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersHtpasswdFileDataArgs']] = None):
        """
        htpasswd enables user authentication using an HTPasswd file to validate credentials
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersHtpasswdFileDataArgs'] file_data: fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        if file_data is not None:
            pulumi.set(__self__, "file_data", file_data)

    @property
    @pulumi.getter(name="fileData")
    def file_data(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersHtpasswdFileDataArgs']]:
        """
        fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "file_data")

    @file_data.setter
    def file_data(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersHtpasswdFileDataArgs']]):
        pulumi.set(self, "file_data", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersHtpasswdFileDataArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersKeystoneArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersKeystoneCaArgs']] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 tls_client_cert: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCertArgs']] = None,
                 tls_client_key: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKeyArgs']] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        keystone enables user authentication using keystone password credentials
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersKeystoneCaArgs'] ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] domain_name: domainName is required for keystone v3
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCertArgs'] tls_client_cert: tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKeyArgs'] tls_client_key: tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] url: url is the remote URL to connect to
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if tls_client_cert is not None:
            pulumi.set(__self__, "tls_client_cert", tls_client_cert)
        if tls_client_key is not None:
            pulumi.set(__self__, "tls_client_key", tls_client_key)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersKeystoneCaArgs']]:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersKeystoneCaArgs']]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        domainName is required for keystone v3
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="tlsClientCert")
    def tls_client_cert(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCertArgs']]:
        """
        tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "tls_client_cert")

    @tls_client_cert.setter
    def tls_client_cert(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCertArgs']]):
        pulumi.set(self, "tls_client_cert", value)

    @property
    @pulumi.getter(name="tlsClientKey")
    def tls_client_key(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKeyArgs']]:
        """
        tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "tls_client_key")

    @tls_client_key.setter
    def tls_client_key(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKeyArgs']]):
        pulumi.set(self, "tls_client_key", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        url is the remote URL to connect to
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersKeystoneCaArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCertArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKeyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersLdapArgs:
    def __init__(__self__, *,
                 attributes: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersLdapAttributesArgs']] = None,
                 bind_dn: Optional[pulumi.Input[str]] = None,
                 bind_password: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersLdapBindPasswordArgs']] = None,
                 ca: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersLdapCaArgs']] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        ldap enables user authentication using LDAP credentials
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersLdapAttributesArgs'] attributes: attributes maps LDAP attributes to identities
        :param pulumi.Input[str] bind_dn: bindDN is an optional DN to bind with during the search phase.
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersLdapBindPasswordArgs'] bind_password: bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersLdapCaArgs'] ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input[bool] insecure: insecure, if true, indicates the connection should not use TLS WARNING: Should not be set to `true` with the URL scheme "ldaps://" as "ldaps://" URLs always          attempt to connect using TLS, even when `insecure` is set to `true` When `true`, "ldap://" URLS connect insecurely. When `false`, "ldap://" URLs are upgraded to a TLS connection using StartTLS as specified in https://tools.ietf.org/html/rfc2830.
        :param pulumi.Input[str] url: url is an RFC 2255 URL which specifies the LDAP search parameters to use. The syntax of the URL is: ldap://host:port/basedn?attribute?scope?filter
        """
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if bind_dn is not None:
            pulumi.set(__self__, "bind_dn", bind_dn)
        if bind_password is not None:
            pulumi.set(__self__, "bind_password", bind_password)
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersLdapAttributesArgs']]:
        """
        attributes maps LDAP attributes to identities
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersLdapAttributesArgs']]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="bindDN")
    def bind_dn(self) -> Optional[pulumi.Input[str]]:
        """
        bindDN is an optional DN to bind with during the search phase.
        """
        return pulumi.get(self, "bind_dn")

    @bind_dn.setter
    def bind_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_dn", value)

    @property
    @pulumi.getter(name="bindPassword")
    def bind_password(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersLdapBindPasswordArgs']]:
        """
        bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "bind_password")

    @bind_password.setter
    def bind_password(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersLdapBindPasswordArgs']]):
        pulumi.set(self, "bind_password", value)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersLdapCaArgs']]:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersLdapCaArgs']]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        insecure, if true, indicates the connection should not use TLS WARNING: Should not be set to `true` with the URL scheme "ldaps://" as "ldaps://" URLs always          attempt to connect using TLS, even when `insecure` is set to `true` When `true`, "ldap://" URLS connect insecurely. When `false`, "ldap://" URLs are upgraded to a TLS connection using StartTLS as specified in https://tools.ietf.org/html/rfc2830.
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        url is an RFC 2255 URL which specifies the LDAP search parameters to use. The syntax of the URL is: ldap://host:port/basedn?attribute?scope?filter
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersLdapAttributesArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preferred_username: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        attributes maps LDAP attributes to identities
        :param pulumi.Input[Sequence[pulumi.Input[str]]] email: email is the list of attributes whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
        :param pulumi.Input[Sequence[pulumi.Input[str]]] id: id is the list of attributes whose values should be used as the user ID. Required. First non-empty attribute is used. At least one attribute is required. If none of the listed attribute have a value, authentication fails. LDAP standard identity attribute is "dn"
        :param pulumi.Input[Sequence[pulumi.Input[str]]] name: name is the list of attributes whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity LDAP standard display name attribute is "cn"
        :param pulumi.Input[Sequence[pulumi.Input[str]]] preferred_username: preferredUsername is the list of attributes whose values should be used as the preferred username. LDAP standard login attribute is "uid"
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preferred_username is not None:
            pulumi.set(__self__, "preferred_username", preferred_username)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        email is the list of attributes whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        id is the list of attributes whose values should be used as the user ID. Required. First non-empty attribute is used. At least one attribute is required. If none of the listed attribute have a value, authentication fails. LDAP standard identity attribute is "dn"
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        name is the list of attributes whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity LDAP standard display name attribute is "cn"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="preferredUsername")
    def preferred_username(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        preferredUsername is the list of attributes whose values should be used as the preferred username. LDAP standard login attribute is "uid"
        """
        return pulumi.get(self, "preferred_username")

    @preferred_username.setter
    def preferred_username(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "preferred_username", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersLdapBindPasswordArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersLdapCaArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersOpenIDArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersOpenIDCaArgs']] = None,
                 claims: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersOpenIDClaimsArgs']] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersOpenIDClientSecretArgs']] = None,
                 extra_authorize_parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 extra_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 issuer: Optional[pulumi.Input[str]] = None):
        """
        openID enables user authentication using OpenID credentials
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersOpenIDCaArgs'] ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersOpenIDClaimsArgs'] claims: claims mappings
        :param pulumi.Input[str] client_id: clientID is the oauth client ID
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersOpenIDClientSecretArgs'] client_secret: clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extra_authorize_parameters: extraAuthorizeParameters are any custom parameters to add to the authorize request.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_scopes: extraScopes are any scopes to request in addition to the standard "openid" scope.
        :param pulumi.Input[str] issuer: issuer is the URL that the OpenID Provider asserts as its Issuer Identifier. It must use the https scheme with no query or fragment component.
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if claims is not None:
            pulumi.set(__self__, "claims", claims)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if extra_authorize_parameters is not None:
            pulumi.set(__self__, "extra_authorize_parameters", extra_authorize_parameters)
        if extra_scopes is not None:
            pulumi.set(__self__, "extra_scopes", extra_scopes)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersOpenIDCaArgs']]:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersOpenIDCaArgs']]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter
    def claims(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersOpenIDClaimsArgs']]:
        """
        claims mappings
        """
        return pulumi.get(self, "claims")

    @claims.setter
    def claims(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersOpenIDClaimsArgs']]):
        pulumi.set(self, "claims", value)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        clientID is the oauth client ID
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersOpenIDClientSecretArgs']]:
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersOpenIDClientSecretArgs']]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="extraAuthorizeParameters")
    def extra_authorize_parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        extraAuthorizeParameters are any custom parameters to add to the authorize request.
        """
        return pulumi.get(self, "extra_authorize_parameters")

    @extra_authorize_parameters.setter
    def extra_authorize_parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extra_authorize_parameters", value)

    @property
    @pulumi.getter(name="extraScopes")
    def extra_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        extraScopes are any scopes to request in addition to the standard "openid" scope.
        """
        return pulumi.get(self, "extra_scopes")

    @extra_scopes.setter
    def extra_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_scopes", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        issuer is the URL that the OpenID Provider asserts as its Issuer Identifier. It must use the https scheme with no query or fragment component.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersOpenIDCaArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersOpenIDClaimsArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preferred_username: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        claims mappings
        :param pulumi.Input[Sequence[pulumi.Input[str]]] email: email is the list of claims whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
        :param pulumi.Input[Sequence[pulumi.Input[str]]] name: name is the list of claims whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity
        :param pulumi.Input[Sequence[pulumi.Input[str]]] preferred_username: preferredUsername is the list of claims whose values should be used as the preferred username. If unspecified, the preferred username is determined from the value of the sub claim
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preferred_username is not None:
            pulumi.set(__self__, "preferred_username", preferred_username)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        email is the list of claims whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        name is the list of claims whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="preferredUsername")
    def preferred_username(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        preferredUsername is the list of claims whose values should be used as the preferred username. If unspecified, the preferred username is determined from the value of the sub claim
        """
        return pulumi.get(self, "preferred_username")

    @preferred_username.setter
    def preferred_username(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "preferred_username", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersOpenIDClientSecretArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersRequestHeaderArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersRequestHeaderCaArgs']] = None,
                 challenge_url: Optional[pulumi.Input[str]] = None,
                 client_common_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 email_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 login_url: Optional[pulumi.Input[str]] = None,
                 name_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preferred_username_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        requestHeader enables user authentication using request header credentials
        :param pulumi.Input['SyncIdentityProviderSpecIdentityProvidersRequestHeaderCaArgs'] ca: ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] challenge_url: challengeURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect WWW-Authenticate challenges will be redirected here. ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when challenge is set to true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] client_common_names: clientCommonNames is an optional list of common names to require a match from. If empty, any client certificate validated against the clientCA bundle is considered authoritative.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] email_headers: emailHeaders is the set of headers to check for the email address
        :param pulumi.Input[Sequence[pulumi.Input[str]]] headers: headers is the set of headers to check for identity information
        :param pulumi.Input[str] login_url: loginURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect interactive logins will be redirected here ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when login is set to true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] name_headers: nameHeaders is the set of headers to check for the display name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] preferred_username_headers: preferredUsernameHeaders is the set of headers to check for the preferred username
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if challenge_url is not None:
            pulumi.set(__self__, "challenge_url", challenge_url)
        if client_common_names is not None:
            pulumi.set(__self__, "client_common_names", client_common_names)
        if email_headers is not None:
            pulumi.set(__self__, "email_headers", email_headers)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if login_url is not None:
            pulumi.set(__self__, "login_url", login_url)
        if name_headers is not None:
            pulumi.set(__self__, "name_headers", name_headers)
        if preferred_username_headers is not None:
            pulumi.set(__self__, "preferred_username_headers", preferred_username_headers)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersRequestHeaderCaArgs']]:
        """
        ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input['SyncIdentityProviderSpecIdentityProvidersRequestHeaderCaArgs']]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="challengeURL")
    def challenge_url(self) -> Optional[pulumi.Input[str]]:
        """
        challengeURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect WWW-Authenticate challenges will be redirected here. ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when challenge is set to true.
        """
        return pulumi.get(self, "challenge_url")

    @challenge_url.setter
    def challenge_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "challenge_url", value)

    @property
    @pulumi.getter(name="clientCommonNames")
    def client_common_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        clientCommonNames is an optional list of common names to require a match from. If empty, any client certificate validated against the clientCA bundle is considered authoritative.
        """
        return pulumi.get(self, "client_common_names")

    @client_common_names.setter
    def client_common_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "client_common_names", value)

    @property
    @pulumi.getter(name="emailHeaders")
    def email_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        emailHeaders is the set of headers to check for the email address
        """
        return pulumi.get(self, "email_headers")

    @email_headers.setter
    def email_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "email_headers", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        headers is the set of headers to check for identity information
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="loginURL")
    def login_url(self) -> Optional[pulumi.Input[str]]:
        """
        loginURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect interactive logins will be redirected here ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when login is set to true.
        """
        return pulumi.get(self, "login_url")

    @login_url.setter
    def login_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_url", value)

    @property
    @pulumi.getter(name="nameHeaders")
    def name_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        nameHeaders is the set of headers to check for the display name
        """
        return pulumi.get(self, "name_headers")

    @name_headers.setter
    def name_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "name_headers", value)

    @property
    @pulumi.getter(name="preferredUsernameHeaders")
    def preferred_username_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        preferredUsernameHeaders is the set of headers to check for the preferred username
        """
        return pulumi.get(self, "preferred_username_headers")

    @preferred_username_headers.setter
    def preferred_username_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "preferred_username_headers", value)


@pulumi.input_type
class SyncIdentityProviderSpecIdentityProvidersRequestHeaderCaArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
        :param pulumi.Input[str] name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncSetInstanceSpecArgs:
    def __init__(__self__, *,
                 cluster_deployment_ref: pulumi.Input['SyncSetInstanceSpecClusterDeploymentRefArgs'],
                 resource_apply_mode: Optional[pulumi.Input[str]] = None,
                 selector_sync_set_ref: Optional[pulumi.Input['SyncSetInstanceSpecSelectorSyncSetRefArgs']] = None,
                 sync_set_hash: Optional[pulumi.Input[str]] = None,
                 sync_set_ref: Optional[pulumi.Input['SyncSetInstanceSpecSyncSetRefArgs']] = None):
        """
        SyncSetInstanceSpec defines the desired state of SyncSetInstance
        :param pulumi.Input['SyncSetInstanceSpecClusterDeploymentRefArgs'] cluster_deployment_ref: ClusterDeployment is a reference to to the clusterdeployment for this syncsetinstance.
        :param pulumi.Input[str] resource_apply_mode: ResourceApplyMode indicates if the resource apply mode is "Upsert" (default) or "Sync". ApplyMode "Upsert" indicates create and update. ApplyMode "Sync" indicates create, update and delete.
        :param pulumi.Input['SyncSetInstanceSpecSelectorSyncSetRefArgs'] selector_sync_set_ref: SelectorSyncSetRef is a reference to the selectorsyncset for this syncsetinstance.
        :param pulumi.Input[str] sync_set_hash: SyncSetHash is a hash of the contents of the syncset or selectorsyncset spec. Its purpose is to cause a syncset instance update whenever there's a change in its source.
        :param pulumi.Input['SyncSetInstanceSpecSyncSetRefArgs'] sync_set_ref: SyncSet is a reference to the syncset for this syncsetinstance.
        """
        pulumi.set(__self__, "cluster_deployment_ref", cluster_deployment_ref)
        if resource_apply_mode is not None:
            pulumi.set(__self__, "resource_apply_mode", resource_apply_mode)
        if selector_sync_set_ref is not None:
            pulumi.set(__self__, "selector_sync_set_ref", selector_sync_set_ref)
        if sync_set_hash is not None:
            pulumi.set(__self__, "sync_set_hash", sync_set_hash)
        if sync_set_ref is not None:
            pulumi.set(__self__, "sync_set_ref", sync_set_ref)

    @property
    @pulumi.getter(name="clusterDeploymentRef")
    def cluster_deployment_ref(self) -> pulumi.Input['SyncSetInstanceSpecClusterDeploymentRefArgs']:
        """
        ClusterDeployment is a reference to to the clusterdeployment for this syncsetinstance.
        """
        return pulumi.get(self, "cluster_deployment_ref")

    @cluster_deployment_ref.setter
    def cluster_deployment_ref(self, value: pulumi.Input['SyncSetInstanceSpecClusterDeploymentRefArgs']):
        pulumi.set(self, "cluster_deployment_ref", value)

    @property
    @pulumi.getter(name="resourceApplyMode")
    def resource_apply_mode(self) -> Optional[pulumi.Input[str]]:
        """
        ResourceApplyMode indicates if the resource apply mode is "Upsert" (default) or "Sync". ApplyMode "Upsert" indicates create and update. ApplyMode "Sync" indicates create, update and delete.
        """
        return pulumi.get(self, "resource_apply_mode")

    @resource_apply_mode.setter
    def resource_apply_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_apply_mode", value)

    @property
    @pulumi.getter(name="selectorSyncSetRef")
    def selector_sync_set_ref(self) -> Optional[pulumi.Input['SyncSetInstanceSpecSelectorSyncSetRefArgs']]:
        """
        SelectorSyncSetRef is a reference to the selectorsyncset for this syncsetinstance.
        """
        return pulumi.get(self, "selector_sync_set_ref")

    @selector_sync_set_ref.setter
    def selector_sync_set_ref(self, value: Optional[pulumi.Input['SyncSetInstanceSpecSelectorSyncSetRefArgs']]):
        pulumi.set(self, "selector_sync_set_ref", value)

    @property
    @pulumi.getter(name="syncSetHash")
    def sync_set_hash(self) -> Optional[pulumi.Input[str]]:
        """
        SyncSetHash is a hash of the contents of the syncset or selectorsyncset spec. Its purpose is to cause a syncset instance update whenever there's a change in its source.
        """
        return pulumi.get(self, "sync_set_hash")

    @sync_set_hash.setter
    def sync_set_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_set_hash", value)

    @property
    @pulumi.getter(name="syncSetRef")
    def sync_set_ref(self) -> Optional[pulumi.Input['SyncSetInstanceSpecSyncSetRefArgs']]:
        """
        SyncSet is a reference to the syncset for this syncsetinstance.
        """
        return pulumi.get(self, "sync_set_ref")

    @sync_set_ref.setter
    def sync_set_ref(self, value: Optional[pulumi.Input['SyncSetInstanceSpecSyncSetRefArgs']]):
        pulumi.set(self, "sync_set_ref", value)


@pulumi.input_type
class SyncSetInstanceSpecClusterDeploymentRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        ClusterDeployment is a reference to to the clusterdeployment for this syncsetinstance.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncSetInstanceSpecSelectorSyncSetRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        SelectorSyncSetRef is a reference to the selectorsyncset for this syncsetinstance.
        :param pulumi.Input[str] name: Name is the name of the SelectorSyncSet
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the SelectorSyncSet
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncSetInstanceSpecSyncSetRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        SyncSet is a reference to the syncset for this syncsetinstance.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncSetInstanceStatusArgs:
    def __init__(__self__, *,
                 applied: Optional[pulumi.Input[bool]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusConditionsArgs']]]] = None,
                 first_success_timestamp: Optional[pulumi.Input[str]] = None,
                 patches: Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusPatchesArgs']]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusResourcesArgs']]]] = None,
                 secret_references: Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusSecretReferencesArgs']]]] = None):
        """
        SyncSetInstanceStatus defines the observed state of SyncSetInstance
        :param pulumi.Input[bool] applied: Applied will be true if all resources, patches, or secrets have successfully been applied on last attempt.
        :param pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusConditionsArgs']]] conditions: Conditions is the list of SyncConditions used to indicate UnknownObject when a resource type cannot be determined from a SyncSet resource.
        :param pulumi.Input[str] first_success_timestamp: FirstSuccessTimestamp is the time the syncset was successfully applied for the first time.
        :param pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusPatchesArgs']]] patches: Patches is the list of SyncStatus for patches that have been applied.
        :param pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusResourcesArgs']]] resources: Resources is the list of SyncStatus for objects that have been synced.
        :param pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusSecretReferencesArgs']]] secret_references: Secrets is the list of SyncStatus for secrets that have been synced.
        """
        if applied is not None:
            pulumi.set(__self__, "applied", applied)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if first_success_timestamp is not None:
            pulumi.set(__self__, "first_success_timestamp", first_success_timestamp)
        if patches is not None:
            pulumi.set(__self__, "patches", patches)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if secret_references is not None:
            pulumi.set(__self__, "secret_references", secret_references)

    @property
    @pulumi.getter
    def applied(self) -> Optional[pulumi.Input[bool]]:
        """
        Applied will be true if all resources, patches, or secrets have successfully been applied on last attempt.
        """
        return pulumi.get(self, "applied")

    @applied.setter
    def applied(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "applied", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusConditionsArgs']]]]:
        """
        Conditions is the list of SyncConditions used to indicate UnknownObject when a resource type cannot be determined from a SyncSet resource.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="firstSuccessTimestamp")
    def first_success_timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        FirstSuccessTimestamp is the time the syncset was successfully applied for the first time.
        """
        return pulumi.get(self, "first_success_timestamp")

    @first_success_timestamp.setter
    def first_success_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_success_timestamp", value)

    @property
    @pulumi.getter
    def patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusPatchesArgs']]]]:
        """
        Patches is the list of SyncStatus for patches that have been applied.
        """
        return pulumi.get(self, "patches")

    @patches.setter
    def patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusPatchesArgs']]]]):
        pulumi.set(self, "patches", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusResourcesArgs']]]]:
        """
        Resources is the list of SyncStatus for objects that have been synced.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusResourcesArgs']]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="secretReferences")
    def secret_references(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusSecretReferencesArgs']]]]:
        """
        Secrets is the list of SyncStatus for secrets that have been synced.
        """
        return pulumi.get(self, "secret_references")

    @secret_references.setter
    def secret_references(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusSecretReferencesArgs']]]]):
        pulumi.set(self, "secret_references", value)


@pulumi.input_type
class SyncSetInstanceStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_probe_time: Optional[pulumi.Input[str]] = None,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        SyncCondition is a condition in a SyncStatus
        :param pulumi.Input[str] status: Status is the status of the condition.
        :param pulumi.Input[str] type: Type is the type of the condition.
        :param pulumi.Input[str] last_probe_time: LastProbeTime is the last time we probed the condition.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: Message is a human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @last_probe_time.setter
    def last_probe_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_probe_time", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class SyncSetInstanceStatusPatchesArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 conditions: pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusPatchesConditionsArgs']]],
                 hash: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 resource: Optional[pulumi.Input[str]] = None):
        """
        SyncStatus describes objects that have been created or patches that have been applied using the unique md5 sum of the object or patch.
        :param pulumi.Input[str] api_version: APIVersion is the Group and Version of the object that was synced or patched.
        :param pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusPatchesConditionsArgs']]] conditions: Conditions is the list of conditions indicating success or failure of object create, update and delete as well as patch application.
        :param pulumi.Input[str] hash: Hash is the unique md5 hash of the resource or patch.
        :param pulumi.Input[str] kind: Kind is the Kind of the object that was synced or patched.
        :param pulumi.Input[str] name: Name is the name of the object that was synced or patched.
        :param pulumi.Input[str] namespace: Namespace is the Namespace of the object that was synced or patched.
        :param pulumi.Input[str] resource: Resource is the resource name for the object that was synced. This will be populated for resources, but not patches
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "hash", hash)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion is the Group and Version of the object that was synced or patched.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusPatchesConditionsArgs']]]:
        """
        Conditions is the list of conditions indicating success or failure of object create, update and delete as well as patch application.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusPatchesConditionsArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def hash(self) -> pulumi.Input[str]:
        """
        Hash is the unique md5 hash of the resource or patch.
        """
        return pulumi.get(self, "hash")

    @hash.setter
    def hash(self, value: pulumi.Input[str]):
        pulumi.set(self, "hash", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind is the Kind of the object that was synced or patched.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the object that was synced or patched.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace is the Namespace of the object that was synced or patched.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        Resource is the resource name for the object that was synced. This will be populated for resources, but not patches
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class SyncSetInstanceStatusPatchesConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_probe_time: Optional[pulumi.Input[str]] = None,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        SyncCondition is a condition in a SyncStatus
        :param pulumi.Input[str] status: Status is the status of the condition.
        :param pulumi.Input[str] type: Type is the type of the condition.
        :param pulumi.Input[str] last_probe_time: LastProbeTime is the last time we probed the condition.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: Message is a human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @last_probe_time.setter
    def last_probe_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_probe_time", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class SyncSetInstanceStatusResourcesArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 conditions: pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusResourcesConditionsArgs']]],
                 hash: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 resource: Optional[pulumi.Input[str]] = None):
        """
        SyncStatus describes objects that have been created or patches that have been applied using the unique md5 sum of the object or patch.
        :param pulumi.Input[str] api_version: APIVersion is the Group and Version of the object that was synced or patched.
        :param pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusResourcesConditionsArgs']]] conditions: Conditions is the list of conditions indicating success or failure of object create, update and delete as well as patch application.
        :param pulumi.Input[str] hash: Hash is the unique md5 hash of the resource or patch.
        :param pulumi.Input[str] kind: Kind is the Kind of the object that was synced or patched.
        :param pulumi.Input[str] name: Name is the name of the object that was synced or patched.
        :param pulumi.Input[str] namespace: Namespace is the Namespace of the object that was synced or patched.
        :param pulumi.Input[str] resource: Resource is the resource name for the object that was synced. This will be populated for resources, but not patches
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "hash", hash)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion is the Group and Version of the object that was synced or patched.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusResourcesConditionsArgs']]]:
        """
        Conditions is the list of conditions indicating success or failure of object create, update and delete as well as patch application.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusResourcesConditionsArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def hash(self) -> pulumi.Input[str]:
        """
        Hash is the unique md5 hash of the resource or patch.
        """
        return pulumi.get(self, "hash")

    @hash.setter
    def hash(self, value: pulumi.Input[str]):
        pulumi.set(self, "hash", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind is the Kind of the object that was synced or patched.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the object that was synced or patched.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace is the Namespace of the object that was synced or patched.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        Resource is the resource name for the object that was synced. This will be populated for resources, but not patches
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class SyncSetInstanceStatusResourcesConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_probe_time: Optional[pulumi.Input[str]] = None,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        SyncCondition is a condition in a SyncStatus
        :param pulumi.Input[str] status: Status is the status of the condition.
        :param pulumi.Input[str] type: Type is the type of the condition.
        :param pulumi.Input[str] last_probe_time: LastProbeTime is the last time we probed the condition.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: Message is a human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @last_probe_time.setter
    def last_probe_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_probe_time", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class SyncSetInstanceStatusSecretReferencesArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 conditions: pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusSecretReferencesConditionsArgs']]],
                 hash: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 resource: Optional[pulumi.Input[str]] = None):
        """
        SyncStatus describes objects that have been created or patches that have been applied using the unique md5 sum of the object or patch.
        :param pulumi.Input[str] api_version: APIVersion is the Group and Version of the object that was synced or patched.
        :param pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusSecretReferencesConditionsArgs']]] conditions: Conditions is the list of conditions indicating success or failure of object create, update and delete as well as patch application.
        :param pulumi.Input[str] hash: Hash is the unique md5 hash of the resource or patch.
        :param pulumi.Input[str] kind: Kind is the Kind of the object that was synced or patched.
        :param pulumi.Input[str] name: Name is the name of the object that was synced or patched.
        :param pulumi.Input[str] namespace: Namespace is the Namespace of the object that was synced or patched.
        :param pulumi.Input[str] resource: Resource is the resource name for the object that was synced. This will be populated for resources, but not patches
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "hash", hash)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion is the Group and Version of the object that was synced or patched.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusSecretReferencesConditionsArgs']]]:
        """
        Conditions is the list of conditions indicating success or failure of object create, update and delete as well as patch application.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['SyncSetInstanceStatusSecretReferencesConditionsArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def hash(self) -> pulumi.Input[str]:
        """
        Hash is the unique md5 hash of the resource or patch.
        """
        return pulumi.get(self, "hash")

    @hash.setter
    def hash(self, value: pulumi.Input[str]):
        pulumi.set(self, "hash", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind is the Kind of the object that was synced or patched.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the object that was synced or patched.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace is the Namespace of the object that was synced or patched.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        Resource is the resource name for the object that was synced. This will be populated for resources, but not patches
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class SyncSetInstanceStatusSecretReferencesConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_probe_time: Optional[pulumi.Input[str]] = None,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        SyncCondition is a condition in a SyncStatus
        :param pulumi.Input[str] status: Status is the status of the condition.
        :param pulumi.Input[str] type: Type is the type of the condition.
        :param pulumi.Input[str] last_probe_time: LastProbeTime is the last time we probed the condition.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: Message is a human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @last_probe_time.setter
    def last_probe_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_probe_time", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class SyncSetSpecArgs:
    def __init__(__self__, *,
                 cluster_deployment_refs: pulumi.Input[Sequence[pulumi.Input['SyncSetSpecClusterDeploymentRefsArgs']]],
                 apply_behavior: Optional[pulumi.Input[str]] = None,
                 patches: Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetSpecPatchesArgs']]]] = None,
                 resource_apply_mode: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 secret_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetSpecSecretMappingsArgs']]]] = None):
        """
        SyncSetSpec defines the SyncSetCommonSpec resources and patches to sync along with ClusterDeploymentRefs indicating which clusters the SyncSet applies to in the SyncSet's namespace.
        :param pulumi.Input[Sequence[pulumi.Input['SyncSetSpecClusterDeploymentRefsArgs']]] cluster_deployment_refs: ClusterDeploymentRefs is the list of LocalObjectReference indicating which clusters the SyncSet applies to in the SyncSet's namespace.
        :param pulumi.Input[str] apply_behavior: ApplyBehavior indicates how resources in this syncset will be applied to the target cluster. The default value of "Apply" indicates that resources should be applied using the 'oc apply' command. If no value is set, "Apply" is assumed. A value of "CreateOnly" indicates that the resource will only be created if it does not already exist in the target cluster. Otherwise, it will be left alone. A value of "CreateOrUpdate" indicates that the resource will be created/updated without the use of the 'oc apply' command, allowing larger resources to be synced, but losing some functionality of the 'oc apply' command such as the ability to remove annotations, labels, and other map entries in general.
        :param pulumi.Input[Sequence[pulumi.Input['SyncSetSpecPatchesArgs']]] patches: Patches is the list of patches to apply.
        :param pulumi.Input[str] resource_apply_mode: ResourceApplyMode indicates if the Resource apply mode is "Upsert" (default) or "Sync". ApplyMode "Upsert" indicates create and update. ApplyMode "Sync" indicates create, update and delete.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] resources: Resources is the list of objects to sync from RawExtension definitions.
        :param pulumi.Input[Sequence[pulumi.Input['SyncSetSpecSecretMappingsArgs']]] secret_mappings: Secrets is the list of secrets to sync along with their respective destinations.
        """
        pulumi.set(__self__, "cluster_deployment_refs", cluster_deployment_refs)
        if apply_behavior is not None:
            pulumi.set(__self__, "apply_behavior", apply_behavior)
        if patches is not None:
            pulumi.set(__self__, "patches", patches)
        if resource_apply_mode is not None:
            pulumi.set(__self__, "resource_apply_mode", resource_apply_mode)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if secret_mappings is not None:
            pulumi.set(__self__, "secret_mappings", secret_mappings)

    @property
    @pulumi.getter(name="clusterDeploymentRefs")
    def cluster_deployment_refs(self) -> pulumi.Input[Sequence[pulumi.Input['SyncSetSpecClusterDeploymentRefsArgs']]]:
        """
        ClusterDeploymentRefs is the list of LocalObjectReference indicating which clusters the SyncSet applies to in the SyncSet's namespace.
        """
        return pulumi.get(self, "cluster_deployment_refs")

    @cluster_deployment_refs.setter
    def cluster_deployment_refs(self, value: pulumi.Input[Sequence[pulumi.Input['SyncSetSpecClusterDeploymentRefsArgs']]]):
        pulumi.set(self, "cluster_deployment_refs", value)

    @property
    @pulumi.getter(name="applyBehavior")
    def apply_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        ApplyBehavior indicates how resources in this syncset will be applied to the target cluster. The default value of "Apply" indicates that resources should be applied using the 'oc apply' command. If no value is set, "Apply" is assumed. A value of "CreateOnly" indicates that the resource will only be created if it does not already exist in the target cluster. Otherwise, it will be left alone. A value of "CreateOrUpdate" indicates that the resource will be created/updated without the use of the 'oc apply' command, allowing larger resources to be synced, but losing some functionality of the 'oc apply' command such as the ability to remove annotations, labels, and other map entries in general.
        """
        return pulumi.get(self, "apply_behavior")

    @apply_behavior.setter
    def apply_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apply_behavior", value)

    @property
    @pulumi.getter
    def patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetSpecPatchesArgs']]]]:
        """
        Patches is the list of patches to apply.
        """
        return pulumi.get(self, "patches")

    @patches.setter
    def patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetSpecPatchesArgs']]]]):
        pulumi.set(self, "patches", value)

    @property
    @pulumi.getter(name="resourceApplyMode")
    def resource_apply_mode(self) -> Optional[pulumi.Input[str]]:
        """
        ResourceApplyMode indicates if the Resource apply mode is "Upsert" (default) or "Sync". ApplyMode "Upsert" indicates create and update. ApplyMode "Sync" indicates create, update and delete.
        """
        return pulumi.get(self, "resource_apply_mode")

    @resource_apply_mode.setter
    def resource_apply_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_apply_mode", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        """
        Resources is the list of objects to sync from RawExtension definitions.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="secretMappings")
    def secret_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetSpecSecretMappingsArgs']]]]:
        """
        Secrets is the list of secrets to sync along with their respective destinations.
        """
        return pulumi.get(self, "secret_mappings")

    @secret_mappings.setter
    def secret_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyncSetSpecSecretMappingsArgs']]]]):
        pulumi.set(self, "secret_mappings", value)


@pulumi.input_type
class SyncSetSpecClusterDeploymentRefsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyncSetSpecPatchesArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 patch: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None,
                 patch_type: Optional[pulumi.Input[str]] = None):
        """
        SyncObjectPatch represents a patch to be applied to a specific object
        :param pulumi.Input[str] api_version: APIVersion is the Group and Version of the object to be patched.
        :param pulumi.Input[str] kind: Kind is the Kind of the object to be patched.
        :param pulumi.Input[str] name: Name is the name of the object to be patched.
        :param pulumi.Input[str] patch: Patch is the patch to apply.
        :param pulumi.Input[str] namespace: Namespace is the Namespace in which the object to patch exists. Defaults to the SyncSet's Namespace.
        :param pulumi.Input[str] patch_type: PatchType indicates the PatchType as "strategic" (default), "json", or "merge".
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "patch", patch)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if patch_type is not None:
            pulumi.set(__self__, "patch_type", patch_type)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion is the Group and Version of the object to be patched.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind is the Kind of the object to be patched.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the object to be patched.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def patch(self) -> pulumi.Input[str]:
        """
        Patch is the patch to apply.
        """
        return pulumi.get(self, "patch")

    @patch.setter
    def patch(self, value: pulumi.Input[str]):
        pulumi.set(self, "patch", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the Namespace in which the object to patch exists. Defaults to the SyncSet's Namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="patchType")
    def patch_type(self) -> Optional[pulumi.Input[str]]:
        """
        PatchType indicates the PatchType as "strategic" (default), "json", or "merge".
        """
        return pulumi.get(self, "patch_type")

    @patch_type.setter
    def patch_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "patch_type", value)


@pulumi.input_type
class SyncSetSpecSecretMappingsArgs:
    def __init__(__self__, *,
                 source_ref: pulumi.Input['SyncSetSpecSecretMappingsSourceRefArgs'],
                 target_ref: pulumi.Input['SyncSetSpecSecretMappingsTargetRefArgs']):
        """
        SecretMapping defines a source and destination for a secret to be synced by a SyncSet
        :param pulumi.Input['SyncSetSpecSecretMappingsSourceRefArgs'] source_ref: SourceRef specifies the name and namespace of a secret on the management cluster
        :param pulumi.Input['SyncSetSpecSecretMappingsTargetRefArgs'] target_ref: TargetRef specifies the target name and namespace of the secret on the target cluster
        """
        pulumi.set(__self__, "source_ref", source_ref)
        pulumi.set(__self__, "target_ref", target_ref)

    @property
    @pulumi.getter(name="sourceRef")
    def source_ref(self) -> pulumi.Input['SyncSetSpecSecretMappingsSourceRefArgs']:
        """
        SourceRef specifies the name and namespace of a secret on the management cluster
        """
        return pulumi.get(self, "source_ref")

    @source_ref.setter
    def source_ref(self, value: pulumi.Input['SyncSetSpecSecretMappingsSourceRefArgs']):
        pulumi.set(self, "source_ref", value)

    @property
    @pulumi.getter(name="targetRef")
    def target_ref(self) -> pulumi.Input['SyncSetSpecSecretMappingsTargetRefArgs']:
        """
        TargetRef specifies the target name and namespace of the secret on the target cluster
        """
        return pulumi.get(self, "target_ref")

    @target_ref.setter
    def target_ref(self, value: pulumi.Input['SyncSetSpecSecretMappingsTargetRefArgs']):
        pulumi.set(self, "target_ref", value)


@pulumi.input_type
class SyncSetSpecSecretMappingsSourceRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SourceRef specifies the name and namespace of a secret on the management cluster
        :param pulumi.Input[str] name: Name is the name of the secret
        :param pulumi.Input[str] namespace: Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
        """
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class SyncSetSpecSecretMappingsTargetRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        TargetRef specifies the target name and namespace of the secret on the target cluster
        :param pulumi.Input[str] name: Name is the name of the secret
        :param pulumi.Input[str] namespace: Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
        """
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


